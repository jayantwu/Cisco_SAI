{
  "counters_bank_group_6k_interrupt_register": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 4,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "interrupt_reg0_summary",
        1,
        1
      ],
      [
        "interrupt_reg1_summary",
        2,
        1
      ],
      [
        "interrupt_reg2_summary",
        3,
        1
      ]
    ]
  },
  "counters_bank_group_6k_mem_protect_interrupt": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_6k_mem_protect_interrupt_test": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_6k_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 6,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "counters_table0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "counters_table1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "counters_table2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "counters_aux_table0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "counters_aux_table1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "counters_aux_table2_ecc_1b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_6k_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 6,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "counters_table0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "counters_table1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "counters_table2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "counters_aux_table0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "counters_aux_table1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "counters_aux_table2_ecc_2b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_6k_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 6,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "counters_table0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "counters_table1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "counters_table2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "counters_aux_table0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "counters_aux_table1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "counters_aux_table2_ecc_1b_err_initiate",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_6k_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 6,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "counters_table0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "counters_table1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "counters_table2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "counters_aux_table0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "counters_aux_table1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "counters_aux_table2_ecc_2b_err_initiate",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_6k_mem_protect_err_status": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 6,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "counters_table0_err_int",
        0,
        1
      ],
      [
        "counters_table1_err_int",
        1,
        1
      ],
      [
        "counters_table2_err_int",
        2,
        1
      ],
      [
        "counters_aux_table0_err_int",
        3,
        1
      ],
      [
        "counters_aux_table1_err_int",
        4,
        1
      ],
      [
        "counters_aux_table2_err_int",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_6k_selected_ser_error_info": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "counters_bank_group_6k_ser_error_debug_configuration": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "counters_bank_group_6k_ecc_1b_err_debug": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "counters_bank_group_6k_ecc_2b_err_debug": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "counters_bank_group_6k_counter_timer": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "counters_bank_group_6k_counter_timer_trigger_reg": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_6k_memory_access_timeout": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "counters_bank_group_6k_broadcast_config_reg": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "counters_bank_group_6k_memory_prot_bypass": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_6k_soft_reset_configuration": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_6k_mbist_configuration": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "counters_bank_group_6k_power_down_configuration": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_6k_spare_reg": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "counters_bank_group_6k_pmro_ctrl": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "counters_bank_group_6k_pmro_status": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "counters_bank_group_6k_mirror_bus_conf_reg": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "counters_bank_group_6k_mirror_bus_status": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "counters_bank_group_6k_device_time_offset_cfg": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "counters_bank_group_6k_bank_config": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 24,
    "desc": "Configurations per bank",
    "fields": [
      [
        "bank_slice_allocation",
        0,
        3
      ],
      [
        "bank_client_allocation",
        3,
        2
      ],
      [
        "cpu_read_cc_wait_before_create_bubble",
        5,
        6
      ],
      [
        "wraparound",
        11,
        1
      ],
      [
        "ignore_pd_compensation",
        12,
        1
      ],
      [
        "compensation",
        13,
        7
      ],
      [
        "bank_counter_type",
        20,
        2
      ],
      [
        "reset_on_max_counter_read",
        22,
        1
      ],
      [
        "lm_count_and_read",
        23,
        1
      ]
    ]
  },
  "counters_bank_group_6k_bank_group_config": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 2,
    "desc": "Bank group configuration",
    "fields": [
      [
        "tx_lm_read_result_delay",
        0,
        2
      ]
    ]
  },
  "counters_bank_group_6k_bank_interrupt_config": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 64,
    "desc": "Bank interrupt configuration",
    "fields": [
      [
        "max_counter_interrupt_threshold",
        0,
        64
      ]
    ]
  },
  "counters_bank_group_6k_interrupt_reg": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 3,
    "desc": "Bank interrupt register",
    "fields": [
      [
        "max_counter_crossed_threshold",
        0,
        1
      ],
      [
        "pd_config_mismatch",
        1,
        1
      ],
      [
        "lm_result_fifo_overflow",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_6k_interrupt_reg_mask": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 3,
    "desc": "This register masks InterruptReg[3] interrupt register",
    "fields": [
      [
        "max_counter_crossed_threshold_mask",
        0,
        1
      ],
      [
        "pd_config_mismatch_mask",
        1,
        1
      ],
      [
        "lm_result_fifo_overflow_mask",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_6k_interrupt_reg_test": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 3,
    "desc": "This register tests InterruptReg[3] interrupt register",
    "fields": [
      [
        "max_counter_crossed_threshold_test",
        0,
        1
      ],
      [
        "pd_config_mismatch_test",
        1,
        1
      ],
      [
        "lm_result_fifo_overflow_test",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_6k_max_counter_status": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 78,
    "desc": "Concurrent value of the max counter",
    "fields": [
      [
        "max_counter_address",
        0,
        14
      ],
      [
        "max_counter_value",
        14,
        64
      ]
    ]
  },
  "counters_bank_group_6k_debug_counters": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 40,
    "desc": "Counters for debug purposes",
    "fields": [
      [
        "total_updates",
        0,
        24
      ],
      [
        "bubble_request_count",
        24,
        16
      ]
    ]
  },
  "counters_bank_group_6k_reset_bank_trigger": {
    "type": "register",
    "block": "counters_bank_group_6k",
    "width": 1,
    "desc": "Writing to this register trigger bank reset (activates all counters' reset bits)",
    "fields": [
      [
        "reset_bank",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_6k_counters_table": {
    "type": "memory",
    "block": "counters_bank_group_6k",
    "width": 128,
    "desc": "The counters' data - fields' description is for 29b PC + 35b BC counter type Each entry holds data for 1, 2 or 4 counters depending on BankCounterType configuration: 128b counter type (64b PC + 64b BC) - 1 counter per entry 64b counter types - 2 counters per entry 32b PC counter type - 4 counters per entry",
    "fields": [
      [
        "packet_count0",
        0,
        29
      ],
      [
        "byte_count0",
        29,
        35
      ],
      [
        "packet_count1",
        64,
        29
      ],
      [
        "byte_count1",
        93,
        35
      ]
    ]
  },
  "counters_bank_group_6k_counters_aux_table": {
    "type": "memory",
    "block": "counters_bank_group_6k",
    "width": 32,
    "desc": "Auxiliary counters data - reset bit This is a bitmap where according to configuration: 64b counter types - each bit represents one counter 32b PC counter type - each bit represents two counters 128b counter type (64b PC + 64b BC) - each second bit represents one counter, only lower one used (i.e. bit 0 represents counter \\#0, bit 1 is unused, bit 2 represents counter \\#1, bit 3 is unused etc.)",
    "fields": [
      [
        "reset_bit",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_interrupt_register": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 7,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "ifg_interrupt_summary_summary",
        1,
        1
      ],
      [
        "ifgb_interrupt_reg_summary",
        2,
        1
      ],
      [
        "rx_oobe_crc_err_interrupt_reg_summary",
        3,
        1
      ],
      [
        "tx_tsf_ovf_interrupt_reg_summary",
        4,
        1
      ],
      [
        "tx_prot_interrupt_reg_summary",
        5,
        1
      ],
      [
        "rx_prot_interrupt_reg_summary",
        6,
        1
      ]
    ]
  },
  "ifgb_24p_mem_protect_interrupt": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "ifgb_24p_mem_protect_interrupt_test": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "ifgb_24p_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 130,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "tx_data_mem0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "tx_data_mem1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "tx_data_mem2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "tx_data_mem3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "tx_data_mem4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "tx_data_mem5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "tx_data_mem6_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "tx_data_mem7_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "tx_data_mem8_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "tx_data_mem9_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "tx_data_mem10_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "tx_data_mem11_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "tx_data_mem12_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "tx_data_mem13_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "tx_data_mem14_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "tx_data_mem15_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "tx_data_mem16_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "tx_data_mem17_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "tx_data_mem18_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "tx_data_mem19_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "tx_data_mem20_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "tx_data_mem21_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "tx_data_mem22_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "tx_data_mem23_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "tx_data_mem24_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "tx_data_mem25_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "tx_data_mem26_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "tx_data_mem27_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "tx_data_mem28_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "tx_data_mem29_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "tx_data_mem30_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "tx_data_mem31_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "tx_desc_mem00_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "tx_desc_mem01_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "tx_desc_mem02_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "tx_desc_mem1_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "rx_data_mem00_ecc_1b_err_interrupt_mask",
        36,
        1
      ],
      [
        "rx_data_mem01_ecc_1b_err_interrupt_mask",
        37,
        1
      ],
      [
        "rx_data_mem02_ecc_1b_err_interrupt_mask",
        38,
        1
      ],
      [
        "rx_data_mem03_ecc_1b_err_interrupt_mask",
        39,
        1
      ],
      [
        "rx_data_mem04_ecc_1b_err_interrupt_mask",
        40,
        1
      ],
      [
        "rx_data_mem05_ecc_1b_err_interrupt_mask",
        41,
        1
      ],
      [
        "rx_data_mem06_ecc_1b_err_interrupt_mask",
        42,
        1
      ],
      [
        "rx_data_mem07_ecc_1b_err_interrupt_mask",
        43,
        1
      ],
      [
        "rx_data_mem08_ecc_1b_err_interrupt_mask",
        44,
        1
      ],
      [
        "rx_data_mem09_ecc_1b_err_interrupt_mask",
        45,
        1
      ],
      [
        "rx_data_mem010_ecc_1b_err_interrupt_mask",
        46,
        1
      ],
      [
        "rx_data_mem011_ecc_1b_err_interrupt_mask",
        47,
        1
      ],
      [
        "rx_data_mem012_ecc_1b_err_interrupt_mask",
        48,
        1
      ],
      [
        "rx_data_mem013_ecc_1b_err_interrupt_mask",
        49,
        1
      ],
      [
        "rx_data_mem014_ecc_1b_err_interrupt_mask",
        50,
        1
      ],
      [
        "rx_data_mem015_ecc_1b_err_interrupt_mask",
        51,
        1
      ],
      [
        "rx_data_mem10_ecc_1b_err_interrupt_mask",
        52,
        1
      ],
      [
        "rx_data_mem11_ecc_1b_err_interrupt_mask",
        53,
        1
      ],
      [
        "rx_data_mem12_ecc_1b_err_interrupt_mask",
        54,
        1
      ],
      [
        "rx_data_mem13_ecc_1b_err_interrupt_mask",
        55,
        1
      ],
      [
        "rx_data_mem14_ecc_1b_err_interrupt_mask",
        56,
        1
      ],
      [
        "rx_data_mem15_ecc_1b_err_interrupt_mask",
        57,
        1
      ],
      [
        "rx_data_mem16_ecc_1b_err_interrupt_mask",
        58,
        1
      ],
      [
        "rx_data_mem17_ecc_1b_err_interrupt_mask",
        59,
        1
      ],
      [
        "rx_data_mem18_ecc_1b_err_interrupt_mask",
        60,
        1
      ],
      [
        "rx_data_mem19_ecc_1b_err_interrupt_mask",
        61,
        1
      ],
      [
        "rx_data_mem110_ecc_1b_err_interrupt_mask",
        62,
        1
      ],
      [
        "rx_data_mem111_ecc_1b_err_interrupt_mask",
        63,
        1
      ],
      [
        "rx_data_mem112_ecc_1b_err_interrupt_mask",
        64,
        1
      ],
      [
        "rx_data_mem113_ecc_1b_err_interrupt_mask",
        65,
        1
      ],
      [
        "rx_data_mem114_ecc_1b_err_interrupt_mask",
        66,
        1
      ],
      [
        "rx_data_mem115_ecc_1b_err_interrupt_mask",
        67,
        1
      ],
      [
        "rx_desc_mem0_ecc_1b_err_interrupt_mask",
        68,
        1
      ],
      [
        "rx_desc_mem1_ecc_1b_err_interrupt_mask",
        69,
        1
      ],
      [
        "rx_desc_mem2_ecc_1b_err_interrupt_mask",
        70,
        1
      ],
      [
        "rx_desc_mem3_ecc_1b_err_interrupt_mask",
        71,
        1
      ],
      [
        "rra_mem0_ecc_1b_err_interrupt_mask",
        72,
        1
      ],
      [
        "rra_mem1_ecc_1b_err_interrupt_mask",
        73,
        1
      ],
      [
        "rra_mem2_ecc_1b_err_interrupt_mask",
        74,
        1
      ],
      [
        "rra_mem3_ecc_1b_err_interrupt_mask",
        75,
        1
      ],
      [
        "rra_mem4_ecc_1b_err_interrupt_mask",
        76,
        1
      ],
      [
        "rra_mem5_ecc_1b_err_interrupt_mask",
        77,
        1
      ],
      [
        "rra_mem6_ecc_1b_err_interrupt_mask",
        78,
        1
      ],
      [
        "rra_mem7_ecc_1b_err_interrupt_mask",
        79,
        1
      ],
      [
        "rra_mem8_ecc_1b_err_interrupt_mask",
        80,
        1
      ],
      [
        "rra_mem9_ecc_1b_err_interrupt_mask",
        81,
        1
      ],
      [
        "rra_mem10_ecc_1b_err_interrupt_mask",
        82,
        1
      ],
      [
        "rra_mem11_ecc_1b_err_interrupt_mask",
        83,
        1
      ],
      [
        "rra_mem12_ecc_1b_err_interrupt_mask",
        84,
        1
      ],
      [
        "rra_mem13_ecc_1b_err_interrupt_mask",
        85,
        1
      ],
      [
        "rra_mem14_ecc_1b_err_interrupt_mask",
        86,
        1
      ],
      [
        "rra_mem15_ecc_1b_err_interrupt_mask",
        87,
        1
      ],
      [
        "rra_mem16_ecc_1b_err_interrupt_mask",
        88,
        1
      ],
      [
        "rra_mem17_ecc_1b_err_interrupt_mask",
        89,
        1
      ],
      [
        "rra_mem18_ecc_1b_err_interrupt_mask",
        90,
        1
      ],
      [
        "rra_mem19_ecc_1b_err_interrupt_mask",
        91,
        1
      ],
      [
        "rra_mem20_ecc_1b_err_interrupt_mask",
        92,
        1
      ],
      [
        "rra_mem21_ecc_1b_err_interrupt_mask",
        93,
        1
      ],
      [
        "rra_mem22_ecc_1b_err_interrupt_mask",
        94,
        1
      ],
      [
        "rra_mem23_ecc_1b_err_interrupt_mask",
        95,
        1
      ],
      [
        "tra_mem0_ecc_1b_err_interrupt_mask",
        96,
        1
      ],
      [
        "tra_mem1_ecc_1b_err_interrupt_mask",
        97,
        1
      ],
      [
        "tra_mem2_ecc_1b_err_interrupt_mask",
        98,
        1
      ],
      [
        "tra_mem3_ecc_1b_err_interrupt_mask",
        99,
        1
      ],
      [
        "tra_mem4_ecc_1b_err_interrupt_mask",
        100,
        1
      ],
      [
        "tra_mem5_ecc_1b_err_interrupt_mask",
        101,
        1
      ],
      [
        "tra_mem6_ecc_1b_err_interrupt_mask",
        102,
        1
      ],
      [
        "tra_mem7_ecc_1b_err_interrupt_mask",
        103,
        1
      ],
      [
        "tra_mem8_ecc_1b_err_interrupt_mask",
        104,
        1
      ],
      [
        "tra_mem9_ecc_1b_err_interrupt_mask",
        105,
        1
      ],
      [
        "tra_mem10_ecc_1b_err_interrupt_mask",
        106,
        1
      ],
      [
        "tra_mem11_ecc_1b_err_interrupt_mask",
        107,
        1
      ],
      [
        "tra_mem12_ecc_1b_err_interrupt_mask",
        108,
        1
      ],
      [
        "tra_mem13_ecc_1b_err_interrupt_mask",
        109,
        1
      ],
      [
        "tra_mem14_ecc_1b_err_interrupt_mask",
        110,
        1
      ],
      [
        "tra_mem15_ecc_1b_err_interrupt_mask",
        111,
        1
      ],
      [
        "tra_mem16_ecc_1b_err_interrupt_mask",
        112,
        1
      ],
      [
        "tra_mem17_ecc_1b_err_interrupt_mask",
        113,
        1
      ],
      [
        "tra_mem18_ecc_1b_err_interrupt_mask",
        114,
        1
      ],
      [
        "tra_mem19_ecc_1b_err_interrupt_mask",
        115,
        1
      ],
      [
        "tra_mem20_ecc_1b_err_interrupt_mask",
        116,
        1
      ],
      [
        "tra_mem21_ecc_1b_err_interrupt_mask",
        117,
        1
      ],
      [
        "tra_mem22_ecc_1b_err_interrupt_mask",
        118,
        1
      ],
      [
        "tra_mem23_ecc_1b_err_interrupt_mask",
        119,
        1
      ],
      [
        "inbi_mem0_ecc_1b_err_interrupt_mask",
        120,
        1
      ],
      [
        "inbi_mem1_ecc_1b_err_interrupt_mask",
        121,
        1
      ],
      [
        "rcy_data_mem0_ecc_1b_err_interrupt_mask",
        122,
        1
      ],
      [
        "rcy_data_mem1_ecc_1b_err_interrupt_mask",
        123,
        1
      ],
      [
        "rcy_data_mem2_ecc_1b_err_interrupt_mask",
        124,
        1
      ],
      [
        "rcy_data_mem3_ecc_1b_err_interrupt_mask",
        125,
        1
      ],
      [
        "rcy_data_mem4_ecc_1b_err_interrupt_mask",
        126,
        1
      ],
      [
        "rcy_data_mem5_ecc_1b_err_interrupt_mask",
        127,
        1
      ],
      [
        "rcy_desc_mem_ecc_1b_err_interrupt_mask",
        128,
        1
      ],
      [
        "instru_hist_mem_ecc_1b_err_interrupt_mask",
        129,
        1
      ]
    ]
  },
  "ifgb_24p_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 130,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "tx_data_mem0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "tx_data_mem1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "tx_data_mem2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "tx_data_mem3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "tx_data_mem4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "tx_data_mem5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "tx_data_mem6_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "tx_data_mem7_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "tx_data_mem8_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "tx_data_mem9_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "tx_data_mem10_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "tx_data_mem11_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "tx_data_mem12_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "tx_data_mem13_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "tx_data_mem14_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "tx_data_mem15_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "tx_data_mem16_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "tx_data_mem17_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "tx_data_mem18_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "tx_data_mem19_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "tx_data_mem20_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "tx_data_mem21_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "tx_data_mem22_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "tx_data_mem23_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "tx_data_mem24_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "tx_data_mem25_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "tx_data_mem26_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "tx_data_mem27_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "tx_data_mem28_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "tx_data_mem29_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "tx_data_mem30_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "tx_data_mem31_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "tx_desc_mem00_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "tx_desc_mem01_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "tx_desc_mem02_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "tx_desc_mem1_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "rx_data_mem00_ecc_2b_err_interrupt_mask",
        36,
        1
      ],
      [
        "rx_data_mem01_ecc_2b_err_interrupt_mask",
        37,
        1
      ],
      [
        "rx_data_mem02_ecc_2b_err_interrupt_mask",
        38,
        1
      ],
      [
        "rx_data_mem03_ecc_2b_err_interrupt_mask",
        39,
        1
      ],
      [
        "rx_data_mem04_ecc_2b_err_interrupt_mask",
        40,
        1
      ],
      [
        "rx_data_mem05_ecc_2b_err_interrupt_mask",
        41,
        1
      ],
      [
        "rx_data_mem06_ecc_2b_err_interrupt_mask",
        42,
        1
      ],
      [
        "rx_data_mem07_ecc_2b_err_interrupt_mask",
        43,
        1
      ],
      [
        "rx_data_mem08_ecc_2b_err_interrupt_mask",
        44,
        1
      ],
      [
        "rx_data_mem09_ecc_2b_err_interrupt_mask",
        45,
        1
      ],
      [
        "rx_data_mem010_ecc_2b_err_interrupt_mask",
        46,
        1
      ],
      [
        "rx_data_mem011_ecc_2b_err_interrupt_mask",
        47,
        1
      ],
      [
        "rx_data_mem012_ecc_2b_err_interrupt_mask",
        48,
        1
      ],
      [
        "rx_data_mem013_ecc_2b_err_interrupt_mask",
        49,
        1
      ],
      [
        "rx_data_mem014_ecc_2b_err_interrupt_mask",
        50,
        1
      ],
      [
        "rx_data_mem015_ecc_2b_err_interrupt_mask",
        51,
        1
      ],
      [
        "rx_data_mem10_ecc_2b_err_interrupt_mask",
        52,
        1
      ],
      [
        "rx_data_mem11_ecc_2b_err_interrupt_mask",
        53,
        1
      ],
      [
        "rx_data_mem12_ecc_2b_err_interrupt_mask",
        54,
        1
      ],
      [
        "rx_data_mem13_ecc_2b_err_interrupt_mask",
        55,
        1
      ],
      [
        "rx_data_mem14_ecc_2b_err_interrupt_mask",
        56,
        1
      ],
      [
        "rx_data_mem15_ecc_2b_err_interrupt_mask",
        57,
        1
      ],
      [
        "rx_data_mem16_ecc_2b_err_interrupt_mask",
        58,
        1
      ],
      [
        "rx_data_mem17_ecc_2b_err_interrupt_mask",
        59,
        1
      ],
      [
        "rx_data_mem18_ecc_2b_err_interrupt_mask",
        60,
        1
      ],
      [
        "rx_data_mem19_ecc_2b_err_interrupt_mask",
        61,
        1
      ],
      [
        "rx_data_mem110_ecc_2b_err_interrupt_mask",
        62,
        1
      ],
      [
        "rx_data_mem111_ecc_2b_err_interrupt_mask",
        63,
        1
      ],
      [
        "rx_data_mem112_ecc_2b_err_interrupt_mask",
        64,
        1
      ],
      [
        "rx_data_mem113_ecc_2b_err_interrupt_mask",
        65,
        1
      ],
      [
        "rx_data_mem114_ecc_2b_err_interrupt_mask",
        66,
        1
      ],
      [
        "rx_data_mem115_ecc_2b_err_interrupt_mask",
        67,
        1
      ],
      [
        "rx_desc_mem0_ecc_2b_err_interrupt_mask",
        68,
        1
      ],
      [
        "rx_desc_mem1_ecc_2b_err_interrupt_mask",
        69,
        1
      ],
      [
        "rx_desc_mem2_ecc_2b_err_interrupt_mask",
        70,
        1
      ],
      [
        "rx_desc_mem3_ecc_2b_err_interrupt_mask",
        71,
        1
      ],
      [
        "rra_mem0_ecc_2b_err_interrupt_mask",
        72,
        1
      ],
      [
        "rra_mem1_ecc_2b_err_interrupt_mask",
        73,
        1
      ],
      [
        "rra_mem2_ecc_2b_err_interrupt_mask",
        74,
        1
      ],
      [
        "rra_mem3_ecc_2b_err_interrupt_mask",
        75,
        1
      ],
      [
        "rra_mem4_ecc_2b_err_interrupt_mask",
        76,
        1
      ],
      [
        "rra_mem5_ecc_2b_err_interrupt_mask",
        77,
        1
      ],
      [
        "rra_mem6_ecc_2b_err_interrupt_mask",
        78,
        1
      ],
      [
        "rra_mem7_ecc_2b_err_interrupt_mask",
        79,
        1
      ],
      [
        "rra_mem8_ecc_2b_err_interrupt_mask",
        80,
        1
      ],
      [
        "rra_mem9_ecc_2b_err_interrupt_mask",
        81,
        1
      ],
      [
        "rra_mem10_ecc_2b_err_interrupt_mask",
        82,
        1
      ],
      [
        "rra_mem11_ecc_2b_err_interrupt_mask",
        83,
        1
      ],
      [
        "rra_mem12_ecc_2b_err_interrupt_mask",
        84,
        1
      ],
      [
        "rra_mem13_ecc_2b_err_interrupt_mask",
        85,
        1
      ],
      [
        "rra_mem14_ecc_2b_err_interrupt_mask",
        86,
        1
      ],
      [
        "rra_mem15_ecc_2b_err_interrupt_mask",
        87,
        1
      ],
      [
        "rra_mem16_ecc_2b_err_interrupt_mask",
        88,
        1
      ],
      [
        "rra_mem17_ecc_2b_err_interrupt_mask",
        89,
        1
      ],
      [
        "rra_mem18_ecc_2b_err_interrupt_mask",
        90,
        1
      ],
      [
        "rra_mem19_ecc_2b_err_interrupt_mask",
        91,
        1
      ],
      [
        "rra_mem20_ecc_2b_err_interrupt_mask",
        92,
        1
      ],
      [
        "rra_mem21_ecc_2b_err_interrupt_mask",
        93,
        1
      ],
      [
        "rra_mem22_ecc_2b_err_interrupt_mask",
        94,
        1
      ],
      [
        "rra_mem23_ecc_2b_err_interrupt_mask",
        95,
        1
      ],
      [
        "tra_mem0_ecc_2b_err_interrupt_mask",
        96,
        1
      ],
      [
        "tra_mem1_ecc_2b_err_interrupt_mask",
        97,
        1
      ],
      [
        "tra_mem2_ecc_2b_err_interrupt_mask",
        98,
        1
      ],
      [
        "tra_mem3_ecc_2b_err_interrupt_mask",
        99,
        1
      ],
      [
        "tra_mem4_ecc_2b_err_interrupt_mask",
        100,
        1
      ],
      [
        "tra_mem5_ecc_2b_err_interrupt_mask",
        101,
        1
      ],
      [
        "tra_mem6_ecc_2b_err_interrupt_mask",
        102,
        1
      ],
      [
        "tra_mem7_ecc_2b_err_interrupt_mask",
        103,
        1
      ],
      [
        "tra_mem8_ecc_2b_err_interrupt_mask",
        104,
        1
      ],
      [
        "tra_mem9_ecc_2b_err_interrupt_mask",
        105,
        1
      ],
      [
        "tra_mem10_ecc_2b_err_interrupt_mask",
        106,
        1
      ],
      [
        "tra_mem11_ecc_2b_err_interrupt_mask",
        107,
        1
      ],
      [
        "tra_mem12_ecc_2b_err_interrupt_mask",
        108,
        1
      ],
      [
        "tra_mem13_ecc_2b_err_interrupt_mask",
        109,
        1
      ],
      [
        "tra_mem14_ecc_2b_err_interrupt_mask",
        110,
        1
      ],
      [
        "tra_mem15_ecc_2b_err_interrupt_mask",
        111,
        1
      ],
      [
        "tra_mem16_ecc_2b_err_interrupt_mask",
        112,
        1
      ],
      [
        "tra_mem17_ecc_2b_err_interrupt_mask",
        113,
        1
      ],
      [
        "tra_mem18_ecc_2b_err_interrupt_mask",
        114,
        1
      ],
      [
        "tra_mem19_ecc_2b_err_interrupt_mask",
        115,
        1
      ],
      [
        "tra_mem20_ecc_2b_err_interrupt_mask",
        116,
        1
      ],
      [
        "tra_mem21_ecc_2b_err_interrupt_mask",
        117,
        1
      ],
      [
        "tra_mem22_ecc_2b_err_interrupt_mask",
        118,
        1
      ],
      [
        "tra_mem23_ecc_2b_err_interrupt_mask",
        119,
        1
      ],
      [
        "inbi_mem0_ecc_2b_err_interrupt_mask",
        120,
        1
      ],
      [
        "inbi_mem1_ecc_2b_err_interrupt_mask",
        121,
        1
      ],
      [
        "rcy_data_mem0_ecc_2b_err_interrupt_mask",
        122,
        1
      ],
      [
        "rcy_data_mem1_ecc_2b_err_interrupt_mask",
        123,
        1
      ],
      [
        "rcy_data_mem2_ecc_2b_err_interrupt_mask",
        124,
        1
      ],
      [
        "rcy_data_mem3_ecc_2b_err_interrupt_mask",
        125,
        1
      ],
      [
        "rcy_data_mem4_ecc_2b_err_interrupt_mask",
        126,
        1
      ],
      [
        "rcy_data_mem5_ecc_2b_err_interrupt_mask",
        127,
        1
      ],
      [
        "rcy_desc_mem_ecc_2b_err_interrupt_mask",
        128,
        1
      ],
      [
        "instru_hist_mem_ecc_2b_err_interrupt_mask",
        129,
        1
      ]
    ]
  },
  "ifgb_24p_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 130,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "tx_data_mem0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "tx_data_mem1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "tx_data_mem2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "tx_data_mem3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "tx_data_mem4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "tx_data_mem5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "tx_data_mem6_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "tx_data_mem7_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "tx_data_mem8_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "tx_data_mem9_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "tx_data_mem10_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "tx_data_mem11_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "tx_data_mem12_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "tx_data_mem13_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "tx_data_mem14_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "tx_data_mem15_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "tx_data_mem16_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "tx_data_mem17_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "tx_data_mem18_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "tx_data_mem19_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "tx_data_mem20_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "tx_data_mem21_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "tx_data_mem22_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "tx_data_mem23_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "tx_data_mem24_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "tx_data_mem25_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "tx_data_mem26_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "tx_data_mem27_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "tx_data_mem28_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "tx_data_mem29_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "tx_data_mem30_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "tx_data_mem31_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "tx_desc_mem00_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "tx_desc_mem01_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "tx_desc_mem02_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "tx_desc_mem1_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "rx_data_mem00_ecc_1b_err_initiate",
        36,
        1
      ],
      [
        "rx_data_mem01_ecc_1b_err_initiate",
        37,
        1
      ],
      [
        "rx_data_mem02_ecc_1b_err_initiate",
        38,
        1
      ],
      [
        "rx_data_mem03_ecc_1b_err_initiate",
        39,
        1
      ],
      [
        "rx_data_mem04_ecc_1b_err_initiate",
        40,
        1
      ],
      [
        "rx_data_mem05_ecc_1b_err_initiate",
        41,
        1
      ],
      [
        "rx_data_mem06_ecc_1b_err_initiate",
        42,
        1
      ],
      [
        "rx_data_mem07_ecc_1b_err_initiate",
        43,
        1
      ],
      [
        "rx_data_mem08_ecc_1b_err_initiate",
        44,
        1
      ],
      [
        "rx_data_mem09_ecc_1b_err_initiate",
        45,
        1
      ],
      [
        "rx_data_mem010_ecc_1b_err_initiate",
        46,
        1
      ],
      [
        "rx_data_mem011_ecc_1b_err_initiate",
        47,
        1
      ],
      [
        "rx_data_mem012_ecc_1b_err_initiate",
        48,
        1
      ],
      [
        "rx_data_mem013_ecc_1b_err_initiate",
        49,
        1
      ],
      [
        "rx_data_mem014_ecc_1b_err_initiate",
        50,
        1
      ],
      [
        "rx_data_mem015_ecc_1b_err_initiate",
        51,
        1
      ],
      [
        "rx_data_mem10_ecc_1b_err_initiate",
        52,
        1
      ],
      [
        "rx_data_mem11_ecc_1b_err_initiate",
        53,
        1
      ],
      [
        "rx_data_mem12_ecc_1b_err_initiate",
        54,
        1
      ],
      [
        "rx_data_mem13_ecc_1b_err_initiate",
        55,
        1
      ],
      [
        "rx_data_mem14_ecc_1b_err_initiate",
        56,
        1
      ],
      [
        "rx_data_mem15_ecc_1b_err_initiate",
        57,
        1
      ],
      [
        "rx_data_mem16_ecc_1b_err_initiate",
        58,
        1
      ],
      [
        "rx_data_mem17_ecc_1b_err_initiate",
        59,
        1
      ],
      [
        "rx_data_mem18_ecc_1b_err_initiate",
        60,
        1
      ],
      [
        "rx_data_mem19_ecc_1b_err_initiate",
        61,
        1
      ],
      [
        "rx_data_mem110_ecc_1b_err_initiate",
        62,
        1
      ],
      [
        "rx_data_mem111_ecc_1b_err_initiate",
        63,
        1
      ],
      [
        "rx_data_mem112_ecc_1b_err_initiate",
        64,
        1
      ],
      [
        "rx_data_mem113_ecc_1b_err_initiate",
        65,
        1
      ],
      [
        "rx_data_mem114_ecc_1b_err_initiate",
        66,
        1
      ],
      [
        "rx_data_mem115_ecc_1b_err_initiate",
        67,
        1
      ],
      [
        "rx_desc_mem0_ecc_1b_err_initiate",
        68,
        1
      ],
      [
        "rx_desc_mem1_ecc_1b_err_initiate",
        69,
        1
      ],
      [
        "rx_desc_mem2_ecc_1b_err_initiate",
        70,
        1
      ],
      [
        "rx_desc_mem3_ecc_1b_err_initiate",
        71,
        1
      ],
      [
        "rra_mem0_ecc_1b_err_initiate",
        72,
        1
      ],
      [
        "rra_mem1_ecc_1b_err_initiate",
        73,
        1
      ],
      [
        "rra_mem2_ecc_1b_err_initiate",
        74,
        1
      ],
      [
        "rra_mem3_ecc_1b_err_initiate",
        75,
        1
      ],
      [
        "rra_mem4_ecc_1b_err_initiate",
        76,
        1
      ],
      [
        "rra_mem5_ecc_1b_err_initiate",
        77,
        1
      ],
      [
        "rra_mem6_ecc_1b_err_initiate",
        78,
        1
      ],
      [
        "rra_mem7_ecc_1b_err_initiate",
        79,
        1
      ],
      [
        "rra_mem8_ecc_1b_err_initiate",
        80,
        1
      ],
      [
        "rra_mem9_ecc_1b_err_initiate",
        81,
        1
      ],
      [
        "rra_mem10_ecc_1b_err_initiate",
        82,
        1
      ],
      [
        "rra_mem11_ecc_1b_err_initiate",
        83,
        1
      ],
      [
        "rra_mem12_ecc_1b_err_initiate",
        84,
        1
      ],
      [
        "rra_mem13_ecc_1b_err_initiate",
        85,
        1
      ],
      [
        "rra_mem14_ecc_1b_err_initiate",
        86,
        1
      ],
      [
        "rra_mem15_ecc_1b_err_initiate",
        87,
        1
      ],
      [
        "rra_mem16_ecc_1b_err_initiate",
        88,
        1
      ],
      [
        "rra_mem17_ecc_1b_err_initiate",
        89,
        1
      ],
      [
        "rra_mem18_ecc_1b_err_initiate",
        90,
        1
      ],
      [
        "rra_mem19_ecc_1b_err_initiate",
        91,
        1
      ],
      [
        "rra_mem20_ecc_1b_err_initiate",
        92,
        1
      ],
      [
        "rra_mem21_ecc_1b_err_initiate",
        93,
        1
      ],
      [
        "rra_mem22_ecc_1b_err_initiate",
        94,
        1
      ],
      [
        "rra_mem23_ecc_1b_err_initiate",
        95,
        1
      ],
      [
        "tra_mem0_ecc_1b_err_initiate",
        96,
        1
      ],
      [
        "tra_mem1_ecc_1b_err_initiate",
        97,
        1
      ],
      [
        "tra_mem2_ecc_1b_err_initiate",
        98,
        1
      ],
      [
        "tra_mem3_ecc_1b_err_initiate",
        99,
        1
      ],
      [
        "tra_mem4_ecc_1b_err_initiate",
        100,
        1
      ],
      [
        "tra_mem5_ecc_1b_err_initiate",
        101,
        1
      ],
      [
        "tra_mem6_ecc_1b_err_initiate",
        102,
        1
      ],
      [
        "tra_mem7_ecc_1b_err_initiate",
        103,
        1
      ],
      [
        "tra_mem8_ecc_1b_err_initiate",
        104,
        1
      ],
      [
        "tra_mem9_ecc_1b_err_initiate",
        105,
        1
      ],
      [
        "tra_mem10_ecc_1b_err_initiate",
        106,
        1
      ],
      [
        "tra_mem11_ecc_1b_err_initiate",
        107,
        1
      ],
      [
        "tra_mem12_ecc_1b_err_initiate",
        108,
        1
      ],
      [
        "tra_mem13_ecc_1b_err_initiate",
        109,
        1
      ],
      [
        "tra_mem14_ecc_1b_err_initiate",
        110,
        1
      ],
      [
        "tra_mem15_ecc_1b_err_initiate",
        111,
        1
      ],
      [
        "tra_mem16_ecc_1b_err_initiate",
        112,
        1
      ],
      [
        "tra_mem17_ecc_1b_err_initiate",
        113,
        1
      ],
      [
        "tra_mem18_ecc_1b_err_initiate",
        114,
        1
      ],
      [
        "tra_mem19_ecc_1b_err_initiate",
        115,
        1
      ],
      [
        "tra_mem20_ecc_1b_err_initiate",
        116,
        1
      ],
      [
        "tra_mem21_ecc_1b_err_initiate",
        117,
        1
      ],
      [
        "tra_mem22_ecc_1b_err_initiate",
        118,
        1
      ],
      [
        "tra_mem23_ecc_1b_err_initiate",
        119,
        1
      ],
      [
        "inbi_mem0_ecc_1b_err_initiate",
        120,
        1
      ],
      [
        "inbi_mem1_ecc_1b_err_initiate",
        121,
        1
      ],
      [
        "rcy_data_mem0_ecc_1b_err_initiate",
        122,
        1
      ],
      [
        "rcy_data_mem1_ecc_1b_err_initiate",
        123,
        1
      ],
      [
        "rcy_data_mem2_ecc_1b_err_initiate",
        124,
        1
      ],
      [
        "rcy_data_mem3_ecc_1b_err_initiate",
        125,
        1
      ],
      [
        "rcy_data_mem4_ecc_1b_err_initiate",
        126,
        1
      ],
      [
        "rcy_data_mem5_ecc_1b_err_initiate",
        127,
        1
      ],
      [
        "rcy_desc_mem_ecc_1b_err_initiate",
        128,
        1
      ],
      [
        "instru_hist_mem_ecc_1b_err_initiate",
        129,
        1
      ]
    ]
  },
  "ifgb_24p_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 130,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "tx_data_mem0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "tx_data_mem1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "tx_data_mem2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "tx_data_mem3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "tx_data_mem4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "tx_data_mem5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "tx_data_mem6_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "tx_data_mem7_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "tx_data_mem8_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "tx_data_mem9_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "tx_data_mem10_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "tx_data_mem11_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "tx_data_mem12_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "tx_data_mem13_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "tx_data_mem14_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "tx_data_mem15_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "tx_data_mem16_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "tx_data_mem17_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "tx_data_mem18_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "tx_data_mem19_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "tx_data_mem20_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "tx_data_mem21_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "tx_data_mem22_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "tx_data_mem23_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "tx_data_mem24_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "tx_data_mem25_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "tx_data_mem26_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "tx_data_mem27_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "tx_data_mem28_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "tx_data_mem29_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "tx_data_mem30_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "tx_data_mem31_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "tx_desc_mem00_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "tx_desc_mem01_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "tx_desc_mem02_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "tx_desc_mem1_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "rx_data_mem00_ecc_2b_err_initiate",
        36,
        1
      ],
      [
        "rx_data_mem01_ecc_2b_err_initiate",
        37,
        1
      ],
      [
        "rx_data_mem02_ecc_2b_err_initiate",
        38,
        1
      ],
      [
        "rx_data_mem03_ecc_2b_err_initiate",
        39,
        1
      ],
      [
        "rx_data_mem04_ecc_2b_err_initiate",
        40,
        1
      ],
      [
        "rx_data_mem05_ecc_2b_err_initiate",
        41,
        1
      ],
      [
        "rx_data_mem06_ecc_2b_err_initiate",
        42,
        1
      ],
      [
        "rx_data_mem07_ecc_2b_err_initiate",
        43,
        1
      ],
      [
        "rx_data_mem08_ecc_2b_err_initiate",
        44,
        1
      ],
      [
        "rx_data_mem09_ecc_2b_err_initiate",
        45,
        1
      ],
      [
        "rx_data_mem010_ecc_2b_err_initiate",
        46,
        1
      ],
      [
        "rx_data_mem011_ecc_2b_err_initiate",
        47,
        1
      ],
      [
        "rx_data_mem012_ecc_2b_err_initiate",
        48,
        1
      ],
      [
        "rx_data_mem013_ecc_2b_err_initiate",
        49,
        1
      ],
      [
        "rx_data_mem014_ecc_2b_err_initiate",
        50,
        1
      ],
      [
        "rx_data_mem015_ecc_2b_err_initiate",
        51,
        1
      ],
      [
        "rx_data_mem10_ecc_2b_err_initiate",
        52,
        1
      ],
      [
        "rx_data_mem11_ecc_2b_err_initiate",
        53,
        1
      ],
      [
        "rx_data_mem12_ecc_2b_err_initiate",
        54,
        1
      ],
      [
        "rx_data_mem13_ecc_2b_err_initiate",
        55,
        1
      ],
      [
        "rx_data_mem14_ecc_2b_err_initiate",
        56,
        1
      ],
      [
        "rx_data_mem15_ecc_2b_err_initiate",
        57,
        1
      ],
      [
        "rx_data_mem16_ecc_2b_err_initiate",
        58,
        1
      ],
      [
        "rx_data_mem17_ecc_2b_err_initiate",
        59,
        1
      ],
      [
        "rx_data_mem18_ecc_2b_err_initiate",
        60,
        1
      ],
      [
        "rx_data_mem19_ecc_2b_err_initiate",
        61,
        1
      ],
      [
        "rx_data_mem110_ecc_2b_err_initiate",
        62,
        1
      ],
      [
        "rx_data_mem111_ecc_2b_err_initiate",
        63,
        1
      ],
      [
        "rx_data_mem112_ecc_2b_err_initiate",
        64,
        1
      ],
      [
        "rx_data_mem113_ecc_2b_err_initiate",
        65,
        1
      ],
      [
        "rx_data_mem114_ecc_2b_err_initiate",
        66,
        1
      ],
      [
        "rx_data_mem115_ecc_2b_err_initiate",
        67,
        1
      ],
      [
        "rx_desc_mem0_ecc_2b_err_initiate",
        68,
        1
      ],
      [
        "rx_desc_mem1_ecc_2b_err_initiate",
        69,
        1
      ],
      [
        "rx_desc_mem2_ecc_2b_err_initiate",
        70,
        1
      ],
      [
        "rx_desc_mem3_ecc_2b_err_initiate",
        71,
        1
      ],
      [
        "rra_mem0_ecc_2b_err_initiate",
        72,
        1
      ],
      [
        "rra_mem1_ecc_2b_err_initiate",
        73,
        1
      ],
      [
        "rra_mem2_ecc_2b_err_initiate",
        74,
        1
      ],
      [
        "rra_mem3_ecc_2b_err_initiate",
        75,
        1
      ],
      [
        "rra_mem4_ecc_2b_err_initiate",
        76,
        1
      ],
      [
        "rra_mem5_ecc_2b_err_initiate",
        77,
        1
      ],
      [
        "rra_mem6_ecc_2b_err_initiate",
        78,
        1
      ],
      [
        "rra_mem7_ecc_2b_err_initiate",
        79,
        1
      ],
      [
        "rra_mem8_ecc_2b_err_initiate",
        80,
        1
      ],
      [
        "rra_mem9_ecc_2b_err_initiate",
        81,
        1
      ],
      [
        "rra_mem10_ecc_2b_err_initiate",
        82,
        1
      ],
      [
        "rra_mem11_ecc_2b_err_initiate",
        83,
        1
      ],
      [
        "rra_mem12_ecc_2b_err_initiate",
        84,
        1
      ],
      [
        "rra_mem13_ecc_2b_err_initiate",
        85,
        1
      ],
      [
        "rra_mem14_ecc_2b_err_initiate",
        86,
        1
      ],
      [
        "rra_mem15_ecc_2b_err_initiate",
        87,
        1
      ],
      [
        "rra_mem16_ecc_2b_err_initiate",
        88,
        1
      ],
      [
        "rra_mem17_ecc_2b_err_initiate",
        89,
        1
      ],
      [
        "rra_mem18_ecc_2b_err_initiate",
        90,
        1
      ],
      [
        "rra_mem19_ecc_2b_err_initiate",
        91,
        1
      ],
      [
        "rra_mem20_ecc_2b_err_initiate",
        92,
        1
      ],
      [
        "rra_mem21_ecc_2b_err_initiate",
        93,
        1
      ],
      [
        "rra_mem22_ecc_2b_err_initiate",
        94,
        1
      ],
      [
        "rra_mem23_ecc_2b_err_initiate",
        95,
        1
      ],
      [
        "tra_mem0_ecc_2b_err_initiate",
        96,
        1
      ],
      [
        "tra_mem1_ecc_2b_err_initiate",
        97,
        1
      ],
      [
        "tra_mem2_ecc_2b_err_initiate",
        98,
        1
      ],
      [
        "tra_mem3_ecc_2b_err_initiate",
        99,
        1
      ],
      [
        "tra_mem4_ecc_2b_err_initiate",
        100,
        1
      ],
      [
        "tra_mem5_ecc_2b_err_initiate",
        101,
        1
      ],
      [
        "tra_mem6_ecc_2b_err_initiate",
        102,
        1
      ],
      [
        "tra_mem7_ecc_2b_err_initiate",
        103,
        1
      ],
      [
        "tra_mem8_ecc_2b_err_initiate",
        104,
        1
      ],
      [
        "tra_mem9_ecc_2b_err_initiate",
        105,
        1
      ],
      [
        "tra_mem10_ecc_2b_err_initiate",
        106,
        1
      ],
      [
        "tra_mem11_ecc_2b_err_initiate",
        107,
        1
      ],
      [
        "tra_mem12_ecc_2b_err_initiate",
        108,
        1
      ],
      [
        "tra_mem13_ecc_2b_err_initiate",
        109,
        1
      ],
      [
        "tra_mem14_ecc_2b_err_initiate",
        110,
        1
      ],
      [
        "tra_mem15_ecc_2b_err_initiate",
        111,
        1
      ],
      [
        "tra_mem16_ecc_2b_err_initiate",
        112,
        1
      ],
      [
        "tra_mem17_ecc_2b_err_initiate",
        113,
        1
      ],
      [
        "tra_mem18_ecc_2b_err_initiate",
        114,
        1
      ],
      [
        "tra_mem19_ecc_2b_err_initiate",
        115,
        1
      ],
      [
        "tra_mem20_ecc_2b_err_initiate",
        116,
        1
      ],
      [
        "tra_mem21_ecc_2b_err_initiate",
        117,
        1
      ],
      [
        "tra_mem22_ecc_2b_err_initiate",
        118,
        1
      ],
      [
        "tra_mem23_ecc_2b_err_initiate",
        119,
        1
      ],
      [
        "inbi_mem0_ecc_2b_err_initiate",
        120,
        1
      ],
      [
        "inbi_mem1_ecc_2b_err_initiate",
        121,
        1
      ],
      [
        "rcy_data_mem0_ecc_2b_err_initiate",
        122,
        1
      ],
      [
        "rcy_data_mem1_ecc_2b_err_initiate",
        123,
        1
      ],
      [
        "rcy_data_mem2_ecc_2b_err_initiate",
        124,
        1
      ],
      [
        "rcy_data_mem3_ecc_2b_err_initiate",
        125,
        1
      ],
      [
        "rcy_data_mem4_ecc_2b_err_initiate",
        126,
        1
      ],
      [
        "rcy_data_mem5_ecc_2b_err_initiate",
        127,
        1
      ],
      [
        "rcy_desc_mem_ecc_2b_err_initiate",
        128,
        1
      ],
      [
        "instru_hist_mem_ecc_2b_err_initiate",
        129,
        1
      ]
    ]
  },
  "ifgb_24p_mem_protect_err_status": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 130,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "tx_data_mem0_err_int",
        0,
        1
      ],
      [
        "tx_data_mem1_err_int",
        1,
        1
      ],
      [
        "tx_data_mem2_err_int",
        2,
        1
      ],
      [
        "tx_data_mem3_err_int",
        3,
        1
      ],
      [
        "tx_data_mem4_err_int",
        4,
        1
      ],
      [
        "tx_data_mem5_err_int",
        5,
        1
      ],
      [
        "tx_data_mem6_err_int",
        6,
        1
      ],
      [
        "tx_data_mem7_err_int",
        7,
        1
      ],
      [
        "tx_data_mem8_err_int",
        8,
        1
      ],
      [
        "tx_data_mem9_err_int",
        9,
        1
      ],
      [
        "tx_data_mem10_err_int",
        10,
        1
      ],
      [
        "tx_data_mem11_err_int",
        11,
        1
      ],
      [
        "tx_data_mem12_err_int",
        12,
        1
      ],
      [
        "tx_data_mem13_err_int",
        13,
        1
      ],
      [
        "tx_data_mem14_err_int",
        14,
        1
      ],
      [
        "tx_data_mem15_err_int",
        15,
        1
      ],
      [
        "tx_data_mem16_err_int",
        16,
        1
      ],
      [
        "tx_data_mem17_err_int",
        17,
        1
      ],
      [
        "tx_data_mem18_err_int",
        18,
        1
      ],
      [
        "tx_data_mem19_err_int",
        19,
        1
      ],
      [
        "tx_data_mem20_err_int",
        20,
        1
      ],
      [
        "tx_data_mem21_err_int",
        21,
        1
      ],
      [
        "tx_data_mem22_err_int",
        22,
        1
      ],
      [
        "tx_data_mem23_err_int",
        23,
        1
      ],
      [
        "tx_data_mem24_err_int",
        24,
        1
      ],
      [
        "tx_data_mem25_err_int",
        25,
        1
      ],
      [
        "tx_data_mem26_err_int",
        26,
        1
      ],
      [
        "tx_data_mem27_err_int",
        27,
        1
      ],
      [
        "tx_data_mem28_err_int",
        28,
        1
      ],
      [
        "tx_data_mem29_err_int",
        29,
        1
      ],
      [
        "tx_data_mem30_err_int",
        30,
        1
      ],
      [
        "tx_data_mem31_err_int",
        31,
        1
      ],
      [
        "tx_desc_mem00_err_int",
        32,
        1
      ],
      [
        "tx_desc_mem01_err_int",
        33,
        1
      ],
      [
        "tx_desc_mem02_err_int",
        34,
        1
      ],
      [
        "tx_desc_mem1_err_int",
        35,
        1
      ],
      [
        "rx_data_mem00_err_int",
        36,
        1
      ],
      [
        "rx_data_mem01_err_int",
        37,
        1
      ],
      [
        "rx_data_mem02_err_int",
        38,
        1
      ],
      [
        "rx_data_mem03_err_int",
        39,
        1
      ],
      [
        "rx_data_mem04_err_int",
        40,
        1
      ],
      [
        "rx_data_mem05_err_int",
        41,
        1
      ],
      [
        "rx_data_mem06_err_int",
        42,
        1
      ],
      [
        "rx_data_mem07_err_int",
        43,
        1
      ],
      [
        "rx_data_mem08_err_int",
        44,
        1
      ],
      [
        "rx_data_mem09_err_int",
        45,
        1
      ],
      [
        "rx_data_mem010_err_int",
        46,
        1
      ],
      [
        "rx_data_mem011_err_int",
        47,
        1
      ],
      [
        "rx_data_mem012_err_int",
        48,
        1
      ],
      [
        "rx_data_mem013_err_int",
        49,
        1
      ],
      [
        "rx_data_mem014_err_int",
        50,
        1
      ],
      [
        "rx_data_mem015_err_int",
        51,
        1
      ],
      [
        "rx_data_mem10_err_int",
        52,
        1
      ],
      [
        "rx_data_mem11_err_int",
        53,
        1
      ],
      [
        "rx_data_mem12_err_int",
        54,
        1
      ],
      [
        "rx_data_mem13_err_int",
        55,
        1
      ],
      [
        "rx_data_mem14_err_int",
        56,
        1
      ],
      [
        "rx_data_mem15_err_int",
        57,
        1
      ],
      [
        "rx_data_mem16_err_int",
        58,
        1
      ],
      [
        "rx_data_mem17_err_int",
        59,
        1
      ],
      [
        "rx_data_mem18_err_int",
        60,
        1
      ],
      [
        "rx_data_mem19_err_int",
        61,
        1
      ],
      [
        "rx_data_mem110_err_int",
        62,
        1
      ],
      [
        "rx_data_mem111_err_int",
        63,
        1
      ],
      [
        "rx_data_mem112_err_int",
        64,
        1
      ],
      [
        "rx_data_mem113_err_int",
        65,
        1
      ],
      [
        "rx_data_mem114_err_int",
        66,
        1
      ],
      [
        "rx_data_mem115_err_int",
        67,
        1
      ],
      [
        "rx_desc_mem0_err_int",
        68,
        1
      ],
      [
        "rx_desc_mem1_err_int",
        69,
        1
      ],
      [
        "rx_desc_mem2_err_int",
        70,
        1
      ],
      [
        "rx_desc_mem3_err_int",
        71,
        1
      ],
      [
        "rra_mem0_err_int",
        72,
        1
      ],
      [
        "rra_mem1_err_int",
        73,
        1
      ],
      [
        "rra_mem2_err_int",
        74,
        1
      ],
      [
        "rra_mem3_err_int",
        75,
        1
      ],
      [
        "rra_mem4_err_int",
        76,
        1
      ],
      [
        "rra_mem5_err_int",
        77,
        1
      ],
      [
        "rra_mem6_err_int",
        78,
        1
      ],
      [
        "rra_mem7_err_int",
        79,
        1
      ],
      [
        "rra_mem8_err_int",
        80,
        1
      ],
      [
        "rra_mem9_err_int",
        81,
        1
      ],
      [
        "rra_mem10_err_int",
        82,
        1
      ],
      [
        "rra_mem11_err_int",
        83,
        1
      ],
      [
        "rra_mem12_err_int",
        84,
        1
      ],
      [
        "rra_mem13_err_int",
        85,
        1
      ],
      [
        "rra_mem14_err_int",
        86,
        1
      ],
      [
        "rra_mem15_err_int",
        87,
        1
      ],
      [
        "rra_mem16_err_int",
        88,
        1
      ],
      [
        "rra_mem17_err_int",
        89,
        1
      ],
      [
        "rra_mem18_err_int",
        90,
        1
      ],
      [
        "rra_mem19_err_int",
        91,
        1
      ],
      [
        "rra_mem20_err_int",
        92,
        1
      ],
      [
        "rra_mem21_err_int",
        93,
        1
      ],
      [
        "rra_mem22_err_int",
        94,
        1
      ],
      [
        "rra_mem23_err_int",
        95,
        1
      ],
      [
        "tra_mem0_err_int",
        96,
        1
      ],
      [
        "tra_mem1_err_int",
        97,
        1
      ],
      [
        "tra_mem2_err_int",
        98,
        1
      ],
      [
        "tra_mem3_err_int",
        99,
        1
      ],
      [
        "tra_mem4_err_int",
        100,
        1
      ],
      [
        "tra_mem5_err_int",
        101,
        1
      ],
      [
        "tra_mem6_err_int",
        102,
        1
      ],
      [
        "tra_mem7_err_int",
        103,
        1
      ],
      [
        "tra_mem8_err_int",
        104,
        1
      ],
      [
        "tra_mem9_err_int",
        105,
        1
      ],
      [
        "tra_mem10_err_int",
        106,
        1
      ],
      [
        "tra_mem11_err_int",
        107,
        1
      ],
      [
        "tra_mem12_err_int",
        108,
        1
      ],
      [
        "tra_mem13_err_int",
        109,
        1
      ],
      [
        "tra_mem14_err_int",
        110,
        1
      ],
      [
        "tra_mem15_err_int",
        111,
        1
      ],
      [
        "tra_mem16_err_int",
        112,
        1
      ],
      [
        "tra_mem17_err_int",
        113,
        1
      ],
      [
        "tra_mem18_err_int",
        114,
        1
      ],
      [
        "tra_mem19_err_int",
        115,
        1
      ],
      [
        "tra_mem20_err_int",
        116,
        1
      ],
      [
        "tra_mem21_err_int",
        117,
        1
      ],
      [
        "tra_mem22_err_int",
        118,
        1
      ],
      [
        "tra_mem23_err_int",
        119,
        1
      ],
      [
        "inbi_mem0_err_int",
        120,
        1
      ],
      [
        "inbi_mem1_err_int",
        121,
        1
      ],
      [
        "rcy_data_mem0_err_int",
        122,
        1
      ],
      [
        "rcy_data_mem1_err_int",
        123,
        1
      ],
      [
        "rcy_data_mem2_err_int",
        124,
        1
      ],
      [
        "rcy_data_mem3_err_int",
        125,
        1
      ],
      [
        "rcy_data_mem4_err_int",
        126,
        1
      ],
      [
        "rcy_data_mem5_err_int",
        127,
        1
      ],
      [
        "rcy_desc_mem_err_int",
        128,
        1
      ],
      [
        "instru_hist_mem_err_int",
        129,
        1
      ]
    ]
  },
  "ifgb_24p_selected_ser_error_info": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "ifgb_24p_ser_error_debug_configuration": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 9,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        8
      ],
      [
        "reset_memory_errors",
        8,
        1
      ]
    ]
  },
  "ifgb_24p_ecc_1b_err_debug": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "ifgb_24p_ecc_2b_err_debug": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "ifgb_24p_tcam_scan_period_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_counter_timer": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "ifgb_24p_counter_timer_trigger_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "ifgb_24p_memory_access_timeout": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "ifgb_24p_broadcast_config_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "ifgb_24p_memory_prot_bypass": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "ifgb_24p_soft_reset_configuration": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "ifgb_24p_mbist_configuration": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "ifgb_24p_power_down_configuration": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "ifgb_24p_spare_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "ifgb_24p_pmro_ctrl": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "ifgb_24p_pmro_status": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "ifgb_24p_mirror_bus_conf_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "ifgb_24p_mirror_bus_status": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_device_time_offset_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "ifgb_24p_ifg_interrupt_summary": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": "Summarrize interrupts of all of ifg cif blocks.",
    "fields": [
      [
        "mac_pool0",
        0,
        1
      ],
      [
        "mac_pool1",
        1,
        1
      ],
      [
        "mac_pool2",
        2,
        1
      ]
    ]
  },
  "ifgb_24p_ifg_interrupt_summary_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": "This register masks IfgInterruptSummary interrupt register",
    "fields": [
      [
        "mac_pool0_mask",
        0,
        1
      ],
      [
        "mac_pool1_mask",
        1,
        1
      ],
      [
        "mac_pool2_mask",
        2,
        1
      ]
    ]
  },
  "ifgb_24p_ifg_interrupt_summary_test": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": "This register tests IfgInterruptSummary interrupt register",
    "fields": [
      [
        "mac_pool0_test",
        0,
        1
      ],
      [
        "mac_pool1_test",
        1,
        1
      ],
      [
        "mac_pool2_test",
        2,
        1
      ]
    ]
  },
  "ifgb_24p_ifgb_interrupt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 4,
    "desc": "IFG buffers interrupts register.",
    "fields": [
      [
        "rx_mlp_sync",
        0,
        1
      ],
      [
        "rx_mlp_sync_timeout",
        1,
        1
      ],
      [
        "dbg_buf_overflow",
        2,
        1
      ],
      [
        "rx_rcontext_alloc_err",
        3,
        1
      ]
    ]
  },
  "ifgb_24p_ifgb_interrupt_reg_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 4,
    "desc": "This register masks IfgbInterruptReg interrupt register",
    "fields": [
      [
        "rx_mlp_sync_mask",
        0,
        1
      ],
      [
        "rx_mlp_sync_timeout_mask",
        1,
        1
      ],
      [
        "dbg_buf_overflow_mask",
        2,
        1
      ],
      [
        "rx_rcontext_alloc_err_mask",
        3,
        1
      ]
    ]
  },
  "ifgb_24p_ifgb_interrupt_reg_test": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 4,
    "desc": "This register tests IfgbInterruptReg interrupt register",
    "fields": [
      [
        "rx_mlp_sync_test",
        0,
        1
      ],
      [
        "rx_mlp_sync_timeout_test",
        1,
        1
      ],
      [
        "dbg_buf_overflow_test",
        2,
        1
      ],
      [
        "rx_rcontext_alloc_err_test",
        3,
        1
      ]
    ]
  },
  "ifgb_24p_rx_oobe_crc_err_interrupt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": "CRC Error on OOB packet",
    "fields": [
      [
        "oobe_port0_crc_err",
        0,
        1
      ],
      [
        "oobe_port1_crc_err",
        1,
        1
      ],
      [
        "oobe_port2_crc_err",
        2,
        1
      ],
      [
        "oobe_port3_crc_err",
        3,
        1
      ],
      [
        "oobe_port4_crc_err",
        4,
        1
      ],
      [
        "oobe_port5_crc_err",
        5,
        1
      ],
      [
        "oobe_port6_crc_err",
        6,
        1
      ],
      [
        "oobe_port7_crc_err",
        7,
        1
      ],
      [
        "oobe_port8_crc_err",
        8,
        1
      ],
      [
        "oobe_port9_crc_err",
        9,
        1
      ],
      [
        "oobe_port10_crc_err",
        10,
        1
      ],
      [
        "oobe_port11_crc_err",
        11,
        1
      ]
    ]
  },
  "ifgb_24p_rx_oobe_crc_err_interrupt_reg_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": "This register masks RxOobeCrcErrInterruptReg interrupt register",
    "fields": [
      [
        "oobe_port0_crc_err_mask",
        0,
        1
      ],
      [
        "oobe_port1_crc_err_mask",
        1,
        1
      ],
      [
        "oobe_port2_crc_err_mask",
        2,
        1
      ],
      [
        "oobe_port3_crc_err_mask",
        3,
        1
      ],
      [
        "oobe_port4_crc_err_mask",
        4,
        1
      ],
      [
        "oobe_port5_crc_err_mask",
        5,
        1
      ],
      [
        "oobe_port6_crc_err_mask",
        6,
        1
      ],
      [
        "oobe_port7_crc_err_mask",
        7,
        1
      ],
      [
        "oobe_port8_crc_err_mask",
        8,
        1
      ],
      [
        "oobe_port9_crc_err_mask",
        9,
        1
      ],
      [
        "oobe_port10_crc_err_mask",
        10,
        1
      ],
      [
        "oobe_port11_crc_err_mask",
        11,
        1
      ]
    ]
  },
  "ifgb_24p_rx_oobe_crc_err_interrupt_reg_test": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": "This register tests RxOobeCrcErrInterruptReg interrupt register",
    "fields": [
      [
        "oobe_port0_crc_err_test",
        0,
        1
      ],
      [
        "oobe_port1_crc_err_test",
        1,
        1
      ],
      [
        "oobe_port2_crc_err_test",
        2,
        1
      ],
      [
        "oobe_port3_crc_err_test",
        3,
        1
      ],
      [
        "oobe_port4_crc_err_test",
        4,
        1
      ],
      [
        "oobe_port5_crc_err_test",
        5,
        1
      ],
      [
        "oobe_port6_crc_err_test",
        6,
        1
      ],
      [
        "oobe_port7_crc_err_test",
        7,
        1
      ],
      [
        "oobe_port8_crc_err_test",
        8,
        1
      ],
      [
        "oobe_port9_crc_err_test",
        9,
        1
      ],
      [
        "oobe_port10_crc_err_test",
        10,
        1
      ],
      [
        "oobe_port11_crc_err_test",
        11,
        1
      ]
    ]
  },
  "ifgb_24p_tx_tsf_ovf_interrupt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 24,
    "desc": "Time stamp FIFO overflow interrupt register",
    "fields": [
      [
        "port0_tx_in_tsf_ovf",
        0,
        1
      ],
      [
        "port1_tx_in_tsf_ovf",
        1,
        1
      ],
      [
        "port2_tx_in_tsf_ovf",
        2,
        1
      ],
      [
        "port3_tx_in_tsf_ovf",
        3,
        1
      ],
      [
        "port4_tx_in_tsf_ovf",
        4,
        1
      ],
      [
        "port5_tx_in_tsf_ovf",
        5,
        1
      ],
      [
        "port6_tx_in_tsf_ovf",
        6,
        1
      ],
      [
        "port7_tx_in_tsf_ovf",
        7,
        1
      ],
      [
        "port8_tx_in_tsf_ovf",
        8,
        1
      ],
      [
        "port9_tx_in_tsf_ovf",
        9,
        1
      ],
      [
        "port10_tx_in_tsf_ovf",
        10,
        1
      ],
      [
        "port11_tx_in_tsf_ovf",
        11,
        1
      ],
      [
        "port12_tx_in_tsf_ovf",
        12,
        1
      ],
      [
        "port13_tx_in_tsf_ovf",
        13,
        1
      ],
      [
        "port14_tx_in_tsf_ovf",
        14,
        1
      ],
      [
        "port15_tx_in_tsf_ovf",
        15,
        1
      ],
      [
        "port16_tx_in_tsf_ovf",
        16,
        1
      ],
      [
        "port17_tx_in_tsf_ovf",
        17,
        1
      ],
      [
        "port18_tx_in_tsf_ovf",
        18,
        1
      ],
      [
        "port19_tx_in_tsf_ovf",
        19,
        1
      ],
      [
        "port20_tx_in_tsf_ovf",
        20,
        1
      ],
      [
        "port21_tx_in_tsf_ovf",
        21,
        1
      ],
      [
        "port22_tx_in_tsf_ovf",
        22,
        1
      ],
      [
        "port23_tx_in_tsf_ovf",
        23,
        1
      ]
    ]
  },
  "ifgb_24p_tx_tsf_ovf_interrupt_reg_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 24,
    "desc": "This register masks TxTsfOvfInterruptReg interrupt register",
    "fields": [
      [
        "port0_tx_in_tsf_ovf_mask",
        0,
        1
      ],
      [
        "port1_tx_in_tsf_ovf_mask",
        1,
        1
      ],
      [
        "port2_tx_in_tsf_ovf_mask",
        2,
        1
      ],
      [
        "port3_tx_in_tsf_ovf_mask",
        3,
        1
      ],
      [
        "port4_tx_in_tsf_ovf_mask",
        4,
        1
      ],
      [
        "port5_tx_in_tsf_ovf_mask",
        5,
        1
      ],
      [
        "port6_tx_in_tsf_ovf_mask",
        6,
        1
      ],
      [
        "port7_tx_in_tsf_ovf_mask",
        7,
        1
      ],
      [
        "port8_tx_in_tsf_ovf_mask",
        8,
        1
      ],
      [
        "port9_tx_in_tsf_ovf_mask",
        9,
        1
      ],
      [
        "port10_tx_in_tsf_ovf_mask",
        10,
        1
      ],
      [
        "port11_tx_in_tsf_ovf_mask",
        11,
        1
      ],
      [
        "port12_tx_in_tsf_ovf_mask",
        12,
        1
      ],
      [
        "port13_tx_in_tsf_ovf_mask",
        13,
        1
      ],
      [
        "port14_tx_in_tsf_ovf_mask",
        14,
        1
      ],
      [
        "port15_tx_in_tsf_ovf_mask",
        15,
        1
      ],
      [
        "port16_tx_in_tsf_ovf_mask",
        16,
        1
      ],
      [
        "port17_tx_in_tsf_ovf_mask",
        17,
        1
      ],
      [
        "port18_tx_in_tsf_ovf_mask",
        18,
        1
      ],
      [
        "port19_tx_in_tsf_ovf_mask",
        19,
        1
      ],
      [
        "port20_tx_in_tsf_ovf_mask",
        20,
        1
      ],
      [
        "port21_tx_in_tsf_ovf_mask",
        21,
        1
      ],
      [
        "port22_tx_in_tsf_ovf_mask",
        22,
        1
      ],
      [
        "port23_tx_in_tsf_ovf_mask",
        23,
        1
      ]
    ]
  },
  "ifgb_24p_tx_tsf_ovf_interrupt_reg_test": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 24,
    "desc": "This register tests TxTsfOvfInterruptReg interrupt register",
    "fields": [
      [
        "port0_tx_in_tsf_ovf_test",
        0,
        1
      ],
      [
        "port1_tx_in_tsf_ovf_test",
        1,
        1
      ],
      [
        "port2_tx_in_tsf_ovf_test",
        2,
        1
      ],
      [
        "port3_tx_in_tsf_ovf_test",
        3,
        1
      ],
      [
        "port4_tx_in_tsf_ovf_test",
        4,
        1
      ],
      [
        "port5_tx_in_tsf_ovf_test",
        5,
        1
      ],
      [
        "port6_tx_in_tsf_ovf_test",
        6,
        1
      ],
      [
        "port7_tx_in_tsf_ovf_test",
        7,
        1
      ],
      [
        "port8_tx_in_tsf_ovf_test",
        8,
        1
      ],
      [
        "port9_tx_in_tsf_ovf_test",
        9,
        1
      ],
      [
        "port10_tx_in_tsf_ovf_test",
        10,
        1
      ],
      [
        "port11_tx_in_tsf_ovf_test",
        11,
        1
      ],
      [
        "port12_tx_in_tsf_ovf_test",
        12,
        1
      ],
      [
        "port13_tx_in_tsf_ovf_test",
        13,
        1
      ],
      [
        "port14_tx_in_tsf_ovf_test",
        14,
        1
      ],
      [
        "port15_tx_in_tsf_ovf_test",
        15,
        1
      ],
      [
        "port16_tx_in_tsf_ovf_test",
        16,
        1
      ],
      [
        "port17_tx_in_tsf_ovf_test",
        17,
        1
      ],
      [
        "port18_tx_in_tsf_ovf_test",
        18,
        1
      ],
      [
        "port19_tx_in_tsf_ovf_test",
        19,
        1
      ],
      [
        "port20_tx_in_tsf_ovf_test",
        20,
        1
      ],
      [
        "port21_tx_in_tsf_ovf_test",
        21,
        1
      ],
      [
        "port22_tx_in_tsf_ovf_test",
        22,
        1
      ],
      [
        "port23_tx_in_tsf_ovf_test",
        23,
        1
      ]
    ]
  },
  "ifgb_24p_tx_prot_interrupt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 13,
    "desc": "TXPP interface protection block interrupts",
    "fields": [
      [
        "tx_missing_eop_err",
        0,
        1
      ],
      [
        "tx_missing_sop_err",
        1,
        1
      ],
      [
        "tx_fabric_type_err",
        2,
        1
      ],
      [
        "tx_invalid_pif_err",
        3,
        1
      ],
      [
        "tx_min_pkt_size_non_sop_err",
        4,
        1
      ],
      [
        "tx_min_pkt_size_sop_err",
        5,
        1
      ],
      [
        "tx_non_sop_wsize_err",
        6,
        1
      ],
      [
        "tx_sop_wsize_err",
        7,
        1
      ],
      [
        "tx_start_packing_err",
        8,
        1
      ],
      [
        "tx_ts_cmd_err",
        9,
        1
      ],
      [
        "tx_filter0_hit",
        10,
        1
      ],
      [
        "tx_filter1_hit",
        11,
        1
      ],
      [
        "tx_filter2_hit",
        12,
        1
      ]
    ]
  },
  "ifgb_24p_tx_prot_interrupt_reg_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 13,
    "desc": "This register masks TxProtInterruptReg interrupt register",
    "fields": [
      [
        "tx_missing_eop_err_mask",
        0,
        1
      ],
      [
        "tx_missing_sop_err_mask",
        1,
        1
      ],
      [
        "tx_fabric_type_err_mask",
        2,
        1
      ],
      [
        "tx_invalid_pif_err_mask",
        3,
        1
      ],
      [
        "tx_min_pkt_size_non_sop_err_mask",
        4,
        1
      ],
      [
        "tx_min_pkt_size_sop_err_mask",
        5,
        1
      ],
      [
        "tx_non_sop_wsize_err_mask",
        6,
        1
      ],
      [
        "tx_sop_wsize_err_mask",
        7,
        1
      ],
      [
        "tx_start_packing_err_mask",
        8,
        1
      ],
      [
        "tx_ts_cmd_err_mask",
        9,
        1
      ],
      [
        "tx_filter0_hit_mask",
        10,
        1
      ],
      [
        "tx_filter1_hit_mask",
        11,
        1
      ],
      [
        "tx_filter2_hit_mask",
        12,
        1
      ]
    ]
  },
  "ifgb_24p_tx_prot_interrupt_reg_test": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 13,
    "desc": "This register tests TxProtInterruptReg interrupt register",
    "fields": [
      [
        "tx_missing_eop_err_test",
        0,
        1
      ],
      [
        "tx_missing_sop_err_test",
        1,
        1
      ],
      [
        "tx_fabric_type_err_test",
        2,
        1
      ],
      [
        "tx_invalid_pif_err_test",
        3,
        1
      ],
      [
        "tx_min_pkt_size_non_sop_err_test",
        4,
        1
      ],
      [
        "tx_min_pkt_size_sop_err_test",
        5,
        1
      ],
      [
        "tx_non_sop_wsize_err_test",
        6,
        1
      ],
      [
        "tx_sop_wsize_err_test",
        7,
        1
      ],
      [
        "tx_start_packing_err_test",
        8,
        1
      ],
      [
        "tx_ts_cmd_err_test",
        9,
        1
      ],
      [
        "tx_filter0_hit_test",
        10,
        1
      ],
      [
        "tx_filter1_hit_test",
        11,
        1
      ],
      [
        "tx_filter2_hit_test",
        12,
        1
      ]
    ]
  },
  "ifgb_24p_rx_prot_interrupt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 17,
    "desc": "RXPP interface protection block interrupts",
    "fields": [
      [
        "rx_missing_eop_err",
        0,
        1
      ],
      [
        "rx_missing_sop_err",
        1,
        1
      ],
      [
        "rx_fabric_type_err",
        2,
        1
      ],
      [
        "rx_invalid_pif_err",
        3,
        1
      ],
      [
        "rx_min_pkt_siz_err",
        4,
        1
      ],
      [
        "rx_max_pkt_siz_err",
        5,
        1
      ],
      [
        "rx_frag_siz_err",
        6,
        1
      ],
      [
        "rx_fd_inconsist_err",
        7,
        1
      ],
      [
        "rx_non_eop_err",
        8,
        1
      ],
      [
        "rx_missing_eof_err",
        9,
        1
      ],
      [
        "rx_beat_err",
        10,
        1
      ],
      [
        "rx_missing_nop_err",
        11,
        1
      ],
      [
        "rx_pkt_reas_inconsist_err",
        12,
        1
      ],
      [
        "rx_fatal_eof_err",
        13,
        1
      ],
      [
        "rx_filter0_hit",
        14,
        1
      ],
      [
        "rx_filter1_hit",
        15,
        1
      ],
      [
        "rx_filter2_hit",
        16,
        1
      ]
    ]
  },
  "ifgb_24p_rx_prot_interrupt_reg_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 17,
    "desc": "This register masks RxProtInterruptReg interrupt register",
    "fields": [
      [
        "rx_missing_eop_err_mask",
        0,
        1
      ],
      [
        "rx_missing_sop_err_mask",
        1,
        1
      ],
      [
        "rx_fabric_type_err_mask",
        2,
        1
      ],
      [
        "rx_invalid_pif_err_mask",
        3,
        1
      ],
      [
        "rx_min_pkt_siz_err_mask",
        4,
        1
      ],
      [
        "rx_max_pkt_siz_err_mask",
        5,
        1
      ],
      [
        "rx_frag_siz_err_mask",
        6,
        1
      ],
      [
        "rx_fd_inconsist_err_mask",
        7,
        1
      ],
      [
        "rx_non_eop_err_mask",
        8,
        1
      ],
      [
        "rx_missing_eof_err_mask",
        9,
        1
      ],
      [
        "rx_beat_err_mask",
        10,
        1
      ],
      [
        "rx_missing_nop_err_mask",
        11,
        1
      ],
      [
        "rx_pkt_reas_inconsist_err_mask",
        12,
        1
      ],
      [
        "rx_fatal_eof_err_mask",
        13,
        1
      ],
      [
        "rx_filter0_hit_mask",
        14,
        1
      ],
      [
        "rx_filter1_hit_mask",
        15,
        1
      ],
      [
        "rx_filter2_hit_mask",
        16,
        1
      ]
    ]
  },
  "ifgb_24p_rx_prot_interrupt_reg_test": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 17,
    "desc": "This register tests RxProtInterruptReg interrupt register",
    "fields": [
      [
        "rx_missing_eop_err_test",
        0,
        1
      ],
      [
        "rx_missing_sop_err_test",
        1,
        1
      ],
      [
        "rx_fabric_type_err_test",
        2,
        1
      ],
      [
        "rx_invalid_pif_err_test",
        3,
        1
      ],
      [
        "rx_min_pkt_siz_err_test",
        4,
        1
      ],
      [
        "rx_max_pkt_siz_err_test",
        5,
        1
      ],
      [
        "rx_frag_siz_err_test",
        6,
        1
      ],
      [
        "rx_fd_inconsist_err_test",
        7,
        1
      ],
      [
        "rx_non_eop_err_test",
        8,
        1
      ],
      [
        "rx_missing_eof_err_test",
        9,
        1
      ],
      [
        "rx_beat_err_test",
        10,
        1
      ],
      [
        "rx_missing_nop_err_test",
        11,
        1
      ],
      [
        "rx_pkt_reas_inconsist_err_test",
        12,
        1
      ],
      [
        "rx_fatal_eof_err_test",
        13,
        1
      ],
      [
        "rx_filter0_hit_test",
        14,
        1
      ],
      [
        "rx_filter1_hit_test",
        15,
        1
      ],
      [
        "rx_filter2_hit_test",
        16,
        1
      ]
    ]
  },
  "ifgb_24p_rx_rstn_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 53,
    "desc": "RX soft reset register.",
    "fields": [
      [
        "rx_lane_rstn",
        0,
        24
      ],
      [
        "rx_ibi_rstn",
        24,
        1
      ],
      [
        "rx_oobe_rstn",
        25,
        1
      ],
      [
        "rx_rstn",
        26,
        1
      ],
      [
        "rx_protect_pif_rstn",
        27,
        26
      ]
    ]
  },
  "ifgb_24p_tx_rstn_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 53,
    "desc": "TX soft reset register.",
    "fields": [
      [
        "tx_lane_rstn",
        0,
        26
      ],
      [
        "tx_rstn",
        26,
        1
      ],
      [
        "tx_protect_pif_rstn",
        27,
        26
      ]
    ]
  },
  "ifgb_24p_general_rstn_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": "General reset register",
    "fields": [
      [
        "rcy_rstn",
        0,
        1
      ],
      [
        "fcm_rstn",
        1,
        1
      ],
      [
        "instru_rstn",
        2,
        1
      ]
    ]
  },
  "ifgb_24p_rx_cfg0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 55,
    "desc": "RX configurations register.",
    "fields": [
      [
        "rx_2l_mode",
        0,
        12
      ],
      [
        "rx_4l_mode",
        12,
        6
      ],
      [
        "rx_8l_mode",
        18,
        3
      ],
      [
        "rx_mlp_mode",
        21,
        2
      ],
      [
        "rx_fabric_mode",
        23,
        1
      ],
      [
        "rx_data_ecc_err_en",
        24,
        1
      ],
      [
        "rx_fifo_status_sel",
        25,
        5
      ],
      [
        "rx_undersize_filter_en",
        30,
        24
      ],
      [
        "rx_cnt_ka_en",
        54,
        1
      ]
    ]
  },
  "ifgb_24p_rx_prot_cfg0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 74,
    "desc": "RX protection block configurations.",
    "fields": [
      [
        "rx_protect_active_contexts",
        0,
        74
      ]
    ]
  },
  "ifgb_24p_rx_prot_cfg1": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 13,
    "desc": "RX protection block configurations.",
    "fields": [
      [
        "rx_missing_eop_err_prot_en",
        0,
        1
      ],
      [
        "rx_missing_sop_err_prot_en",
        1,
        1
      ],
      [
        "rx_fabric_type_err_prot_en",
        2,
        1
      ],
      [
        "rx_invalid_pif_err_prot_en",
        3,
        1
      ],
      [
        "rx_min_pkt_siz_err_prot_en",
        4,
        1
      ],
      [
        "rx_max_pkt_siz_err_prot_en",
        5,
        1
      ],
      [
        "rx_frag_siz_err_prot_en",
        6,
        1
      ],
      [
        "rx_fd_inconsist_err_prot_en",
        7,
        1
      ],
      [
        "rx_non_eop_err_prot_en",
        8,
        1
      ],
      [
        "rx_missing_eof_err_prot_en",
        9,
        1
      ],
      [
        "rx_beat_err_prot_en",
        10,
        1
      ],
      [
        "rx_missing_nop_err_prot_en",
        11,
        1
      ],
      [
        "rx_pkt_reas_inconsist_err_prot_en",
        12,
        1
      ]
    ]
  },
  "ifgb_24p_rx_prot_cfg2": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 16,
    "desc": "RX protection block configurations.",
    "fields": [
      [
        "rxpp_fabric_pkt_type_en",
        0,
        16
      ]
    ]
  },
  "ifgb_24p_rx_prot_cfg3": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 14,
    "desc": "RX protection block configurations.",
    "fields": [
      [
        "rx_missing_eop_err_cnt_en",
        0,
        1
      ],
      [
        "rx_missing_sop_err_cnt_en",
        1,
        1
      ],
      [
        "rx_fabric_type_err_cnt_en",
        2,
        1
      ],
      [
        "rx_invalid_pif_err_cnt_en",
        3,
        1
      ],
      [
        "rx_min_pkt_siz_err_cnt_en",
        4,
        1
      ],
      [
        "rx_max_pkt_siz_err_cnt_en",
        5,
        1
      ],
      [
        "rx_frag_siz_err_cnt_en",
        6,
        1
      ],
      [
        "rx_fd_inconsist_err_cnt_en",
        7,
        1
      ],
      [
        "rx_non_eop_err_cnt_en",
        8,
        1
      ],
      [
        "rx_missing_eof_err_cnt_en",
        9,
        1
      ],
      [
        "rx_beat_err_cnt_en",
        10,
        1
      ],
      [
        "rx_missing_nop_err_cnt_en",
        11,
        1
      ],
      [
        "rx_pkt_reas_inconsist_err_cnt_en",
        12,
        1
      ],
      [
        "rx_fatal_eof_err_cnt_en",
        13,
        1
      ]
    ]
  },
  "ifgb_24p_rx_prot_cfg4": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 28,
    "desc": "RX protection block configurations.",
    "fields": [
      [
        "rx_min_pkt_size",
        0,
        14
      ],
      [
        "rx_max_pkt_size",
        14,
        14
      ]
    ]
  },
  "ifgb_24p_rx_filter_ctrl": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 76,
    "desc": "RXPP interface filter configuration.",
    "fields": [
      [
        "rx_filter_en",
        0,
        1
      ],
      [
        "rx_filter_drop_en",
        1,
        1
      ],
      [
        "rx_filter_pif_en",
        2,
        74
      ]
    ]
  },
  "ifgb_24p_rx_filter_val": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 269,
    "desc": "RXPP interface filter configuration.",
    "fields": [
      [
        "rx_val_sop",
        0,
        1
      ],
      [
        "rx_val_eop",
        1,
        1
      ],
      [
        "rx_val_frag_size_gt_eq",
        2,
        9
      ],
      [
        "rx_val_frag_size_small",
        11,
        9
      ],
      [
        "rx_val_reas_cntxt",
        20,
        10
      ],
      [
        "rx_val_crc_err",
        30,
        1
      ],
      [
        "rx_val_err_flg",
        31,
        1
      ],
      [
        "rx_val_unsch_rcy_code",
        32,
        2
      ],
      [
        "rx_val_tx_to_rx_rcy_data",
        34,
        8
      ],
      [
        "rx_val_initial_tc",
        42,
        3
      ],
      [
        "rx_val_receive_time",
        45,
        32
      ],
      [
        "rx_val_data",
        77,
        192
      ]
    ]
  },
  "ifgb_24p_rx_filter_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 253,
    "desc": "RXPP interface filter configuration.",
    "fields": [
      [
        "rx_mask_sop",
        0,
        1
      ],
      [
        "rx_mask_eop",
        1,
        1
      ],
      [
        "rx_mask_frag_size_gt_eq",
        2,
        1
      ],
      [
        "rx_mask_frag_size_small",
        3,
        1
      ],
      [
        "rx_mask_reas_cntxt",
        4,
        10
      ],
      [
        "rx_mask_crc_err",
        14,
        1
      ],
      [
        "rx_mask_err_flg",
        15,
        1
      ],
      [
        "rx_mask_unsch_rcy_code",
        16,
        2
      ],
      [
        "rx_mask_tx_to_rx_rcy_data",
        18,
        8
      ],
      [
        "rx_mask_initial_tc",
        26,
        3
      ],
      [
        "rx_mask_receive_time",
        29,
        32
      ],
      [
        "rx_mask_data",
        61,
        192
      ]
    ]
  },
  "ifgb_24p_rx_filter_hit_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_filter_hit_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_prot_err_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_prot_err_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_prot_pkt_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_prot_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_prot_frag_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_prot_frag_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_prot_pkt_terminate_abnormally_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_prot_pkt_terminate_abnormally_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_prot_err_fd_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 75,
    "desc": " ",
    "fields": [
      [
        "rx_prot_err_fd_valid",
        0,
        1
      ],
      [
        "rx_prot_err_fd",
        1,
        66
      ],
      [
        "rx_prot_err_byte0",
        67,
        8
      ]
    ]
  },
  "ifgb_24p_rx_filter_hit_fd_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 75,
    "desc": " ",
    "fields": [
      [
        "rx_filter_hit_fd_valid",
        0,
        1
      ],
      [
        "rx_filter_hit_fd",
        1,
        66
      ],
      [
        "rx_filter_hit_byte0",
        67,
        8
      ]
    ]
  },
  "ifgb_24p_rx_oob_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": "RX configurations register.",
    "fields": [
      [
        "port0_oob_crc_check",
        0,
        1
      ],
      [
        "port1_oob_crc_check",
        1,
        1
      ],
      [
        "port2_oob_crc_check",
        2,
        1
      ],
      [
        "port3_oob_crc_check",
        3,
        1
      ],
      [
        "port4_oob_crc_check",
        4,
        1
      ],
      [
        "port5_oob_crc_check",
        5,
        1
      ],
      [
        "port6_oob_crc_check",
        6,
        1
      ],
      [
        "port7_oob_crc_check",
        7,
        1
      ],
      [
        "port8_oob_crc_check",
        8,
        1
      ],
      [
        "port9_oob_crc_check",
        9,
        1
      ],
      [
        "port10_oob_crc_check",
        10,
        1
      ],
      [
        "port11_oob_crc_check",
        11,
        1
      ]
    ]
  },
  "ifgb_24p_tx_oob_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": "OOBI Filter configuration register",
    "fields": [
      [
        "oobi_link0_type_filter_en",
        0,
        1
      ],
      [
        "oobi_link1_type_filter_en",
        1,
        1
      ],
      [
        "oobi_link2_type_filter_en",
        2,
        1
      ],
      [
        "oobi_link3_type_filter_en",
        3,
        1
      ],
      [
        "oobi_link4_type_filter_en",
        4,
        1
      ],
      [
        "oobi_link5_type_filter_en",
        5,
        1
      ],
      [
        "oobi_link6_type_filter_en",
        6,
        1
      ],
      [
        "oobi_link7_type_filter_en",
        7,
        1
      ],
      [
        "oobi_link8_type_filter_en",
        8,
        1
      ],
      [
        "oobi_link9_type_filter_en",
        9,
        1
      ],
      [
        "oobi_link10_type_filter_en",
        10,
        1
      ],
      [
        "oobi_link11_type_filter_en",
        11,
        1
      ]
    ]
  },
  "ifgb_24p_oobi_filtered_pkt_cnt": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBI packet count per link",
    "fields": [
      [
        "oobi_link_filtered_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_device_time_offset_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "RX device time offset configuration register",
    "fields": [
      [
        "rx_device_time_offset",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_device_time_offset_inbi_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "RX device time offset configuration register",
    "fields": [
      [
        "rx_device_time_offset_inbi",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_shaper_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "IFG to RXPP rate shaper configuration",
    "fields": [
      [
        "rx_shaper_burst",
        0,
        16
      ],
      [
        "rx_shaper_period",
        16,
        16
      ]
    ]
  },
  "ifgb_24p_rx_packet_shaper_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 97,
    "desc": "IFG to RXPP rate shaper configuration",
    "fields": [
      [
        "rx_packet_shaper_inc_val",
        0,
        32
      ],
      [
        "rx_packet_shaper_cnt_max",
        32,
        32
      ],
      [
        "rx_packet_shaper_dec_val",
        64,
        32
      ],
      [
        "rx_packet_shaper_en",
        96,
        1
      ]
    ]
  },
  "ifgb_24p_rx_mlp_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "RX MLP configurations.",
    "fields": [
      [
        "rx_mlp_sync_timeout_cfg",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_header_size_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 109,
    "desc": "Header size configurations.",
    "fields": [
      [
        "rx_header_size0",
        0,
        4
      ],
      [
        "rx_header_size1",
        4,
        4
      ],
      [
        "rx_header_size2",
        8,
        4
      ],
      [
        "rx_header_size3",
        12,
        4
      ],
      [
        "rx_header_size4",
        16,
        4
      ],
      [
        "rx_header_size5",
        20,
        4
      ],
      [
        "rx_header_size6",
        24,
        4
      ],
      [
        "rx_header_size7",
        28,
        4
      ],
      [
        "rx_header_size8",
        32,
        4
      ],
      [
        "rx_header_size9",
        36,
        4
      ],
      [
        "rx_header_size10",
        40,
        4
      ],
      [
        "rx_header_size11",
        44,
        4
      ],
      [
        "rx_header_size12",
        48,
        4
      ],
      [
        "rx_header_size13",
        52,
        4
      ],
      [
        "rx_header_size14",
        56,
        4
      ],
      [
        "rx_header_size15",
        60,
        4
      ],
      [
        "rx_header_size16",
        64,
        4
      ],
      [
        "rx_header_size17",
        68,
        4
      ],
      [
        "rx_header_size18",
        72,
        4
      ],
      [
        "rx_header_size19",
        76,
        4
      ],
      [
        "rx_header_size20",
        80,
        4
      ],
      [
        "rx_header_size21",
        84,
        4
      ],
      [
        "rx_header_size22",
        88,
        4
      ],
      [
        "rx_header_size23",
        92,
        4
      ],
      [
        "inbi_header_size",
        96,
        4
      ],
      [
        "rcy_mirror_header_size",
        100,
        3
      ],
      [
        "rcy_redirect_header_size",
        103,
        3
      ],
      [
        "rcy_sched_header_size",
        106,
        3
      ]
    ]
  },
  "ifgb_24p_tx_cfg0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 41,
    "desc": "TX configurations.",
    "fields": [
      [
        "tx_mlp_mode",
        0,
        2
      ],
      [
        "tx_mlp_pkt_overhead",
        2,
        5
      ],
      [
        "tx_2l_mode",
        7,
        12
      ],
      [
        "tx_4l_mode",
        19,
        6
      ],
      [
        "tx_8l_mode",
        25,
        3
      ],
      [
        "tx_fabric_mode",
        28,
        1
      ],
      [
        "tx_data_ecc_err_en",
        29,
        1
      ],
      [
        "tx_fifo_status_sel",
        30,
        5
      ],
      [
        "tx_flit_credit_cnt_status_sel",
        35,
        5
      ],
      [
        "tx_cnt_ka_en",
        40,
        1
      ]
    ]
  },
  "ifgb_24p_tx_prot_cfg0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 26,
    "desc": "TX protection block configurations.",
    "fields": [
      [
        "tx_dest_pif_active_bmp",
        0,
        26
      ]
    ]
  },
  "ifgb_24p_tx_prot_cfg1": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 10,
    "desc": "TX protection block configurations.",
    "fields": [
      [
        "tx_missing_eop_err_prot_en",
        0,
        1
      ],
      [
        "tx_missing_sop_err_prot_en",
        1,
        1
      ],
      [
        "tx_fabric_type_err_prot_en",
        2,
        1
      ],
      [
        "tx_invalid_pif_err_prot_en",
        3,
        1
      ],
      [
        "tx_min_pkt_size_non_sop_err_prot_en",
        4,
        1
      ],
      [
        "tx_min_pkt_size_sop_err_prot_en",
        5,
        1
      ],
      [
        "tx_non_sop_wsize_err_prot_en",
        6,
        1
      ],
      [
        "tx_sop_wsize_err_prot_en",
        7,
        1
      ],
      [
        "tx_start_packing_err_prot_en",
        8,
        1
      ],
      [
        "tx_ts_cmd_err_prot_en",
        9,
        1
      ]
    ]
  },
  "ifgb_24p_tx_prot_cfg2": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 16,
    "desc": "TX protection block configurations.",
    "fields": [
      [
        "txpp_fabric_pkt_type_en",
        0,
        16
      ]
    ]
  },
  "ifgb_24p_tx_prot_cfg3": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 10,
    "desc": "TX protection block configurations.",
    "fields": [
      [
        "tx_missing_eop_err_cnt_en",
        0,
        1
      ],
      [
        "tx_missing_sop_err_cnt_en",
        1,
        1
      ],
      [
        "tx_fabric_type_err_cnt_en",
        2,
        1
      ],
      [
        "tx_invalid_pif_err_cnt_en",
        3,
        1
      ],
      [
        "tx_min_pkt_size_non_sop_err_cnt_en",
        4,
        1
      ],
      [
        "tx_min_pkt_size_sop_err_cnt_en",
        5,
        1
      ],
      [
        "tx_non_sop_wsize_err_cnt_en",
        6,
        1
      ],
      [
        "tx_sop_wsize_err_cnt_en",
        7,
        1
      ],
      [
        "tx_start_packing_err_cnt_en",
        8,
        1
      ],
      [
        "tx_ts_cmd_err_cnt_en",
        9,
        1
      ]
    ]
  },
  "ifgb_24p_tx_filter_ctrl": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 28,
    "desc": "TXPP interface filter configuration.",
    "fields": [
      [
        "tx_filter_en",
        0,
        1
      ],
      [
        "tx_filter_drop_en",
        1,
        1
      ],
      [
        "tx_filter_pif_en",
        2,
        26
      ]
    ]
  },
  "ifgb_24p_tx_filter_val": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 234,
    "desc": "TXPP interface filter configuration.",
    "fields": [
      [
        "tx_val_sop",
        0,
        1
      ],
      [
        "tx_val_eop",
        1,
        1
      ],
      [
        "tx_val_word_size_gt_eq",
        2,
        8
      ],
      [
        "tx_val_word_size_small",
        10,
        8
      ],
      [
        "tx_val_ts_cmd",
        18,
        11
      ],
      [
        "tx_val_invert_crc",
        29,
        1
      ],
      [
        "tx_val_start_packing",
        30,
        1
      ],
      [
        "tx_val_unsch_rcy_code",
        31,
        2
      ],
      [
        "tx_val_tx_to_rx_rcy_data",
        33,
        8
      ],
      [
        "tx_val_ar_meter",
        41,
        1
      ],
      [
        "tx_val_data",
        42,
        192
      ]
    ]
  },
  "ifgb_24p_tx_filter_mask": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 220,
    "desc": "TXPP interface filter configuration.",
    "fields": [
      [
        "tx_mask_sop",
        0,
        1
      ],
      [
        "tx_mask_eop",
        1,
        1
      ],
      [
        "tx_mask_word_size_gt_eq",
        2,
        1
      ],
      [
        "tx_mask_word_size_small",
        3,
        1
      ],
      [
        "tx_mask_ts_cmd",
        4,
        11
      ],
      [
        "tx_mask_invert_crc",
        15,
        1
      ],
      [
        "tx_mask_start_packing",
        16,
        1
      ],
      [
        "tx_mask_unsch_rcy_code",
        17,
        2
      ],
      [
        "tx_mask_tx_to_rx_rcy_data",
        19,
        8
      ],
      [
        "tx_mask_ar_meter",
        27,
        1
      ],
      [
        "tx_mask_data",
        28,
        192
      ]
    ]
  },
  "ifgb_24p_tx_filter_hit_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_filter_hit_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_prot_err_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_prot_err_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_prot_pkt_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_prot_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_prot_word_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_prot_word_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_prot_err_wd_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 48,
    "desc": " ",
    "fields": [
      [
        "tx_prot_err_wd_valid",
        0,
        1
      ],
      [
        "tx_prot_err_wd",
        1,
        39
      ],
      [
        "tx_prot_err_byte0",
        40,
        8
      ]
    ]
  },
  "ifgb_24p_tx_filter_hit_wd_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 48,
    "desc": " ",
    "fields": [
      [
        "tx_filter_hit_wd_valid",
        0,
        1
      ],
      [
        "tx_filter_hit_wd",
        1,
        39
      ],
      [
        "tx_filter_hit_byte0",
        40,
        8
      ]
    ]
  },
  "ifgb_24p_rx_port_fifo_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 22,
    "desc": "RX ports fifos configuration",
    "fields": [
      [
        "f_start_addr",
        0,
        11
      ],
      [
        "f_end_addr",
        11,
        11
      ]
    ]
  },
  "ifgb_24p_rx_ibi_fifo_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 18,
    "desc": "RX inband inject fifo configuration",
    "fields": [
      [
        "ibif_start_addr",
        0,
        9
      ],
      [
        "ibif_end_addr",
        9,
        9
      ]
    ]
  },
  "ifgb_24p_rx_csms_pkts_fifo_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 14,
    "desc": "RX CSMS packets fifo configuration",
    "fields": [
      [
        "f_csms_start_addr",
        0,
        7
      ],
      [
        "f_csms_end_addr",
        7,
        7
      ]
    ]
  },
  "ifgb_24p_rx_frm_pkts_fifo_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 14,
    "desc": "RX FRM packets fifo configuration",
    "fields": [
      [
        "f_frm_start_addr",
        0,
        7
      ],
      [
        "f_frm_end_addr",
        7,
        7
      ]
    ]
  },
  "ifgb_24p_rx_fte_pkts_fifo_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 14,
    "desc": "RX FTE packets fifo configuration",
    "fields": [
      [
        "f_fte_start_addr",
        0,
        7
      ],
      [
        "f_fte_end_addr",
        7,
        7
      ]
    ]
  },
  "ifgb_24p_rx_csms_fifo_status": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 7,
    "desc": " ",
    "fields": [
      [
        "bank_csms_fifo_status",
        0,
        7
      ]
    ]
  },
  "ifgb_24p_rx_frm_fifo_status": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 7,
    "desc": " ",
    "fields": [
      [
        "bank_frm_fifo_status",
        0,
        7
      ]
    ]
  },
  "ifgb_24p_rx_fte_fifo_status": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 7,
    "desc": " ",
    "fields": [
      [
        "bank_fte_fifo_status",
        0,
        7
      ]
    ]
  },
  "ifgb_24p_rx_csms_fifo_packets_wmk": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 7,
    "desc": " ",
    "fields": [
      [
        "bank_csms_fifo_packets_wmk",
        0,
        7
      ]
    ]
  },
  "ifgb_24p_rx_frm_fifo_packets_wmk": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 7,
    "desc": " ",
    "fields": [
      [
        "bank_frm_fifo_packets_wmk",
        0,
        7
      ]
    ]
  },
  "ifgb_24p_rx_fte_fifo_packets_wmk": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 7,
    "desc": " ",
    "fields": [
      [
        "bank_fte_fifo_packets_wmk",
        0,
        7
      ]
    ]
  },
  "ifgb_24p_rx_fifo_packets_wmk": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 22,
    "desc": " ",
    "fields": [
      [
        "port_rx_fifo_min_wmk",
        0,
        11
      ],
      [
        "port_rx_fifo_max_wmk",
        11,
        11
      ]
    ]
  },
  "ifgb_24p_rx_inbi_fifo_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 18,
    "desc": " ",
    "fields": [
      [
        "inbi_rx_fifo_min_wmk",
        0,
        9
      ],
      [
        "inbi_rx_fifo_max_wmk",
        9,
        9
      ]
    ]
  },
  "ifgb_24p_rx_fifo_bytes_wmk": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 38,
    "desc": " ",
    "fields": [
      [
        "port_rx_fifo_bytes_min_wmk",
        0,
        19
      ],
      [
        "port_rx_fifo_bytes_max_wmk",
        19,
        19
      ]
    ]
  },
  "ifgb_24p_rx_inbi_fifo_bytes_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 34,
    "desc": " ",
    "fields": [
      [
        "inbi_rx_fifo_bytes_min_wmk",
        0,
        17
      ],
      [
        "inbi_rx_fifo_bytes_max_wmk",
        17,
        17
      ]
    ]
  },
  "ifgb_24p_rx_cg_score_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 80,
    "desc": "",
    "fields": [
      [
        "cg_score_max",
        0,
        20
      ],
      [
        "cg_score_fast_dec_th",
        20,
        20
      ],
      [
        "cg_score_inc_factor",
        40,
        2
      ],
      [
        "cg_score_dec_slow_factor",
        42,
        2
      ],
      [
        "cg_score_dec_fast_factor",
        44,
        2
      ],
      [
        "cg_score_dec_adjust_period",
        46,
        16
      ],
      [
        "cg_score_dec_adjust_max_flits",
        62,
        16
      ],
      [
        "cg_score_dec_adjust_factor",
        78,
        2
      ]
    ]
  },
  "ifgb_24p_rx_link_cg_timer_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "link_cg_timer_gran",
        0,
        10
      ],
      [
        "link_cg_timer_cg_val",
        10,
        5
      ],
      [
        "link_cg_timer_no_cg_val",
        15,
        5
      ]
    ]
  },
  "ifgb_24p_rx_link_dcf_cg_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "link_cg_vtag1_tpid0",
        0,
        16
      ],
      [
        "link_cg_vtag1_tpid1",
        16,
        16
      ]
    ]
  },
  "ifgb_24p_rx_cg_score_wmk": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 20,
    "desc": " ",
    "fields": [
      [
        "cg_score_wmk",
        0,
        20
      ]
    ]
  },
  "ifgb_24p_rx_link_cg_indication": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": " ",
    "fields": [
      [
        "link_cgi",
        0,
        12
      ]
    ]
  },
  "ifgb_24p_mc_cgi": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 10,
    "desc": " ",
    "fields": [
      [
        "mc_cgi_ind",
        0,
        1
      ],
      [
        "mc_cgi_src_device",
        1,
        9
      ]
    ]
  },
  "ifgb_24p_tx_fif_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 39,
    "desc": "",
    "fields": [
      [
        "tx_f_end_addr",
        0,
        11
      ],
      [
        "tx_f_start_addr",
        11,
        11
      ],
      [
        "tx_alm_empty_thd",
        22,
        17
      ]
    ]
  },
  "ifgb_24p_tx_fif_cfg24": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 37,
    "desc": "",
    "fields": [
      [
        "tx_f24_end_addr",
        0,
        11
      ],
      [
        "tx_f24_start_addr",
        11,
        11
      ],
      [
        "tx_alm_empty_thd24",
        22,
        15
      ]
    ]
  },
  "ifgb_24p_rcy_fif_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 102,
    "desc": "Recycling fifos configurations.",
    "fields": [
      [
        "rcy_fif_mirror_start_addr",
        0,
        10
      ],
      [
        "rcy_fif_mirror_end_addr",
        10,
        10
      ],
      [
        "rcy_fif_mirror_wr_sop_thd",
        20,
        10
      ],
      [
        "rcy_fif_mirror_itc",
        30,
        3
      ],
      [
        "rcy_fif_redirect_start_addr",
        33,
        10
      ],
      [
        "rcy_fif_redirect_end_addr",
        43,
        10
      ],
      [
        "rcy_fif_redirect_wr_sop_thd",
        53,
        10
      ],
      [
        "rcy_fif_redirect_itc",
        63,
        3
      ],
      [
        "rcy_fif_sched_start_addr",
        66,
        10
      ],
      [
        "rcy_fif_sched_end_addr",
        76,
        10
      ],
      [
        "rcy_fif_sched_wr_sop_thd",
        86,
        10
      ],
      [
        "rcy_fif_sched_itc",
        96,
        3
      ],
      [
        "rcy_fifo_status_sel",
        99,
        2
      ],
      [
        "rcy_data_ecc_err_en",
        101,
        1
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 66,
    "desc": "",
    "fields": [
      [
        "p_tc0_drop_th",
        0,
        11
      ],
      [
        "p_tc1_drop_th",
        11,
        11
      ],
      [
        "p_tc2_drop_th",
        22,
        11
      ],
      [
        "p_tc3_drop_th",
        33,
        11
      ],
      [
        "p_xon_th",
        44,
        11
      ],
      [
        "p_xoff_th",
        55,
        11
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_sop_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 44,
    "desc": "",
    "fields": [
      [
        "p_tc0_sop_drop_th",
        0,
        11
      ],
      [
        "p_tc1_sop_drop_th",
        11,
        11
      ],
      [
        "p_tc2_sop_drop_th",
        22,
        11
      ],
      [
        "p_tc3_sop_drop_th",
        33,
        11
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_tc0_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port_cgm_tc0_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_tc1_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port_cgm_tc1_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_tc2_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port_cgm_tc2_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_tc3_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port_cgm_tc3_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_tc0_partial_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port_cgm_tc0_partial_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_tc1_partial_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port_cgm_tc1_partial_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_tc2_partial_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port_cgm_tc2_partial_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_port_cgm_tc3_partial_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port_cgm_tc3_partial_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_oobe_crc_err_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOB Extract CRC error counter",
    "fields": [
      [
        "rx_oobe_port_crc_err_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_csms_cgm_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "CSMS packets drop count",
    "fields": [
      [
        "rx_csms_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_fte_cgm_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "FTE packets drop count",
    "fields": [
      [
        "rx_fte_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_frm_cgm_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "FRM packets drop count",
    "fields": [
      [
        "rx_frm_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port0_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter1": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port1_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter2": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port2_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter3": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port3_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter4": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port4_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter5": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port5_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter6": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port6_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter7": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port7_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter8": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port8_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter9": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port9_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter10": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port10_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter11": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port11_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter12": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port12_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter13": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port13_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter14": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port14_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter15": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port15_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter16": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port16_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter17": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port17_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter18": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port18_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter19": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port19_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter20": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port20_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter21": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port21_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter22": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port22_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_undersize_pkt_drop_counter23": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_port23_undersize_pkt_drop_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_read_sch_cfg0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 64,
    "desc": "RX read scheduler configuration",
    "fields": [
      [
        "rd_sch_wt_p0",
        0,
        8
      ],
      [
        "rd_sch_wt_p1",
        8,
        8
      ],
      [
        "rd_sch_wt_p2",
        16,
        8
      ],
      [
        "rd_sch_wt_p3",
        24,
        8
      ],
      [
        "rd_sch_wt_p4",
        32,
        8
      ],
      [
        "rd_sch_wt_p5",
        40,
        8
      ],
      [
        "rd_sch_wt_p6",
        48,
        8
      ],
      [
        "rd_sch_wt_p7",
        56,
        8
      ]
    ]
  },
  "ifgb_24p_rx_read_sch_cfg1": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 64,
    "desc": "RX read scheduler configuration",
    "fields": [
      [
        "rd_sch_wt_p8",
        0,
        8
      ],
      [
        "rd_sch_wt_p9",
        8,
        8
      ],
      [
        "rd_sch_wt_p10",
        16,
        8
      ],
      [
        "rd_sch_wt_p11",
        24,
        8
      ],
      [
        "rd_sch_wt_p12",
        32,
        8
      ],
      [
        "rd_sch_wt_p13",
        40,
        8
      ],
      [
        "rd_sch_wt_p14",
        48,
        8
      ],
      [
        "rd_sch_wt_p15",
        56,
        8
      ]
    ]
  },
  "ifgb_24p_rx_read_sch_cfg2": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 96,
    "desc": "RX read scheduler configuration",
    "fields": [
      [
        "rd_sch_wt_p16",
        0,
        8
      ],
      [
        "rd_sch_wt_p17",
        8,
        8
      ],
      [
        "rd_sch_wt_p18",
        16,
        8
      ],
      [
        "rd_sch_wt_p19",
        24,
        8
      ],
      [
        "rd_sch_wt_p20",
        32,
        8
      ],
      [
        "rd_sch_wt_p21",
        40,
        8
      ],
      [
        "rd_sch_wt_p22",
        48,
        8
      ],
      [
        "rd_sch_wt_p23",
        56,
        8
      ],
      [
        "rd_sch_wt_sch_rcy",
        64,
        8
      ],
      [
        "rd_sch_wt_mirror_rcy",
        72,
        8
      ],
      [
        "rd_sch_wt_redirect_rcy",
        80,
        8
      ],
      [
        "rd_sch_wt_rcy_aggr",
        88,
        8
      ]
    ]
  },
  "ifgb_24p_rx_reas_fifo_wmk": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 5,
    "desc": " ",
    "fields": [
      [
        "rx_reas_fifo_max_wmk",
        0,
        5
      ]
    ]
  },
  "ifgb_24p_rx_reas_cbr_wmk": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 14,
    "desc": " ",
    "fields": [
      [
        "rx_reas_cbr_min_wmk",
        0,
        7
      ],
      [
        "rx_reas_cbr_max_wmk",
        7,
        7
      ]
    ]
  },
  "ifgb_24p_rx_dbg_cfg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "dbg_buf_capture_en",
        0,
        2
      ],
      [
        "dbg_buf_capture_all",
        2,
        1
      ],
      [
        "dbg_buf_capture_source",
        3,
        5
      ]
    ]
  },
  "ifgb_24p_rx_dbg_buf_rdata": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 129,
    "desc": "",
    "fields": [
      [
        "dbg_buf_rd_data",
        0,
        128
      ],
      [
        "dbg_buf_rd_data_valid",
        128,
        1
      ]
    ]
  },
  "ifgb_24p_rx_dbg_buf_status": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 7,
    "desc": " ",
    "fields": [
      [
        "dbg_buf_status",
        0,
        7
      ]
    ]
  },
  "ifgb_24p_rx_reassembly_bp_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_reassembly_backpressure_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_rxpp_bp_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_backpressure_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rcontext_alloc_err_cnt": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rcontext_alloc_err_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_port_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_port_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_redirect_rcy_port_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_redirect_rcy_port_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_mirror_rcy_port_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_mirror_rcy_port_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_inbi_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_inbi_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_sch_rcy_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_sch_rcy_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_port_trans_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_port_trans_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_redirect_rcy_port_trans_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_redirect_rcy_port_trans_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_mirror_rcy_port_trans_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_mirror_rcy_port_trans_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_inbi_trans_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_inbi_trans_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rxpp_sch_rcy_trans_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_rxpp_sch_rcy_trans_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_debug_buff0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 33,
    "desc": "TX debg buffer configuration and control register.",
    "fields": [
      [
        "tx_debug_buff_en",
        0,
        1
      ],
      [
        "tx_debug_buff_start",
        1,
        1
      ],
      [
        "tx_debug_buff_iter",
        2,
        24
      ],
      [
        "tx_debug_buff_credit_sel",
        26,
        6
      ],
      [
        "tx_debug_buff_ignore_tx_credits",
        32,
        1
      ]
    ]
  },
  "ifgb_24p_tx_debug_buff1": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 45,
    "desc": "TX debg buffer configuration and control register.",
    "fields": [
      [
        "tx_debug_buff_credit_inf_init",
        0,
        26
      ],
      [
        "tx_debug_buff_credit_val",
        26,
        13
      ],
      [
        "tx_debug_buff_end_addr",
        39,
        6
      ]
    ]
  },
  "ifgb_24p_tx_debug_buff_status": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 60,
    "desc": "Tx Debug buffer status register",
    "fields": [
      [
        "tx_debug_buff_credit_count",
        0,
        17
      ],
      [
        "tx_debug_buff_credit_count_min_wmk",
        17,
        17
      ],
      [
        "tx_debug_buff_credit_flow_control",
        34,
        26
      ]
    ]
  },
  "ifgb_24p_tc_extract_cfg_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 122,
    "desc": "Traffic class extraction configuration register.",
    "fields": [
      [
        "tc_ext_tpid0_",
        0,
        16
      ],
      [
        "tc_ext_tpid1_",
        16,
        16
      ],
      [
        "tc_ext_tpid2_",
        32,
        16
      ],
      [
        "tc_ext_eth_type0_",
        48,
        16
      ],
      [
        "tc_ext_eth_type1_",
        64,
        16
      ],
      [
        "tc_ext_eth_type2_",
        80,
        16
      ],
      [
        "tc_ext_eth_type3_",
        96,
        16
      ],
      [
        "tc_ext_byte_os",
        112,
        5
      ],
      [
        "tc_ext_default_tc",
        117,
        5
      ]
    ]
  },
  "ifgb_24p_fc_cfg0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 24,
    "desc": "Flow control configurations register.",
    "fields": [
      [
        "periodic_int_en",
        0,
        24
      ]
    ]
  },
  "ifgb_24p_fc_cfg1": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": "Flow control configurations register.",
    "fields": [
      [
        "en_fc_ext_from_oob",
        0,
        12
      ]
    ]
  },
  "ifgb_24p_fc_port_cfg0": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 59,
    "desc": "Flow control port configurations register.",
    "fields": [
      [
        "port_pause_mask",
        0,
        8
      ],
      [
        "port_pause_act_en",
        8,
        1
      ],
      [
        "port_periodic_timer",
        9,
        16
      ],
      [
        "port_watch_dog_timer",
        25,
        16
      ],
      [
        "port_fc_mode",
        41,
        2
      ],
      [
        "port_512bit_time",
        43,
        16
      ]
    ]
  },
  "ifgb_24p_fc_port_cfg2": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 8,
    "desc": "Flow control port configurations register.",
    "fields": [
      [
        "port_ostc_priority_map",
        0,
        8
      ]
    ]
  },
  "ifgb_24p_fcm_wd_expired_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_wd_expired",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_fcm_rx_fc_wmk_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 192,
    "desc": " ",
    "fields": [
      [
        "fcm_rx_fc_wmk",
        0,
        192
      ]
    ]
  },
  "ifgb_24p_tx_in_word_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_in_word_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_in_redirect_rcy_word_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_in_redirect_rcy_word_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_in_mirror_rcy_word_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_in_mirror_rcy_word_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_inbe_in_word_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_inbe_in_word_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_rcy_in_word_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_rcy_in_word_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_in_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_in_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_in_redirect_rcy_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_in_redirect_rcy_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_in_mirror_rcy_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_in_mirror_rcy_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_in_packed_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_in_packed_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_rcy_in_packed_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_rcy_in_packed_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_inbe_in_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_inbe_in_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_rcy_in_pkt_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "tx_rcy_in_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_in_redirect_rcy_pkt_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_redirect_rcy_drop_full_pkt_cnt",
        0,
        16
      ],
      [
        "port_tx_redirect_rcy_drop_pkt_cnt",
        16,
        16
      ]
    ]
  },
  "ifgb_24p_in_mirror_rcy_pkt_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_mirror_rcy_drop_full_pkt_cnt",
        0,
        16
      ],
      [
        "port_tx_mirror_rcy_drop_pkt_cnt",
        16,
        16
      ]
    ]
  },
  "ifgb_24p_in_redirect_rcy_word_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_redirect_rcy_drop_word_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_in_mirror_rcy_word_drop_counter": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "port_tx_mirror_rcy_drop_word_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_tx_fifos_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 22,
    "desc": " ",
    "fields": [
      [
        "port_tx_fifos_min_watermark",
        0,
        11
      ],
      [
        "port_tx_fifos_max_watermark",
        11,
        11
      ]
    ]
  },
  "ifgb_24p_tx_inbe_fifo_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 18,
    "desc": " ",
    "fields": [
      [
        "tx_inbe_fifo_min_wmk",
        0,
        9
      ],
      [
        "tx_inbe_fifo_max_wmk",
        9,
        9
      ]
    ]
  },
  "ifgb_24p_tx_tra_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": " ",
    "fields": [
      [
        "tx_tra_min_wmk",
        0,
        6
      ],
      [
        "tx_tra_max_wmk",
        6,
        6
      ]
    ]
  },
  "ifgb_24p_inbe_tra_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 12,
    "desc": " ",
    "fields": [
      [
        "tx_inbe_min_wmk",
        0,
        6
      ],
      [
        "tx_inbe_max_wmk",
        6,
        6
      ]
    ]
  },
  "ifgb_24p_rx_rra_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 10,
    "desc": " ",
    "fields": [
      [
        "rx_rra_min_wmk",
        0,
        5
      ],
      [
        "rx_rra_max_wmk",
        5,
        5
      ]
    ]
  },
  "ifgb_24p_rcy_sched_fifo_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 20,
    "desc": " ",
    "fields": [
      [
        "rcy_sched_fifo_min_wmk",
        0,
        10
      ],
      [
        "rcy_sched_fifo_max_wmk",
        10,
        10
      ]
    ]
  },
  "ifgb_24p_rcy_redirect_fifo_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 20,
    "desc": " ",
    "fields": [
      [
        "rcy_redirect_fifo_min_wmk",
        0,
        10
      ],
      [
        "rcy_redirect_fifo_max_wmk",
        10,
        10
      ]
    ]
  },
  "ifgb_24p_rcy_mirror_fifo_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 20,
    "desc": " ",
    "fields": [
      [
        "rcy_mirror_fifo_min_wmk",
        0,
        10
      ],
      [
        "rcy_mirror_fifo_max_wmk",
        10,
        10
      ]
    ]
  },
  "ifgb_24p_tx_fifos_bytes_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 34,
    "desc": " ",
    "fields": [
      [
        "port_tx_fifos_bytes_min_wmk",
        0,
        17
      ],
      [
        "port_tx_fifos_bytes_max_wmk",
        17,
        17
      ]
    ]
  },
  "ifgb_24p_tx_inbe_fifo_bytes_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 30,
    "desc": " ",
    "fields": [
      [
        "tx_inbe_fifo_bytes_min_wmk",
        0,
        15
      ],
      [
        "tx_inbe_fifo_bytes_max_wmk",
        15,
        15
      ]
    ]
  },
  "ifgb_24p_tx_fifos_flit_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 28,
    "desc": " ",
    "fields": [
      [
        "port_tx_fifos_flit_min_wmk",
        0,
        14
      ],
      [
        "port_tx_fifos_flit_max_wmk",
        14,
        14
      ]
    ]
  },
  "ifgb_24p_tx_inbe_fifo_flit_watermark": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 24,
    "desc": " ",
    "fields": [
      [
        "tx_inbe_fifo_flit_min_wmk",
        0,
        12
      ],
      [
        "tx_inbe_fifo_flit_max_wmk",
        12,
        12
      ]
    ]
  },
  "ifgb_24p_inbi_pkt_cnt": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "inbi_pkt_count",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_inbi_err_pkt_cnt": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "inbi_err_pkt_count",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_inbi_good_byte_cnt": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "inbi_good_byte_count",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_rx_packet_shaper_fc_count": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "rx_packet_shaper_fc_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_inbe_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "inbe_pkt_count",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_inbe_err_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": " ",
    "fields": [
      [
        "inbe_err_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_inbe_byte_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 64,
    "desc": " ",
    "fields": [
      [
        "inbe_byte_cnt",
        0,
        64
      ]
    ]
  },
  "ifgb_24p_oobi_pkt_cnt": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBI packet count per link",
    "fields": [
      [
        "oobi_link_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobi_csms_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBI CSMS packet count",
    "fields": [
      [
        "oobi_csms_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobi_frm_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBI FRM packet count",
    "fields": [
      [
        "oobi_frm_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobi_fte_pd_req_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBI FTE PD REQ packet count",
    "fields": [
      [
        "oobi_fte_pd_req_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobi_fte_pd_res_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBI FTE PD RES packet count",
    "fields": [
      [
        "oobi_fte_pd_res_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobi_fte_fts_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBI FTE FTS packet count",
    "fields": [
      [
        "oobi_fte_fts_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobi_pkt_type_cnt_en": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 5,
    "desc": "OOBI packet count enable per type: 0 - Disabled. 1 - Enabled.",
    "fields": [
      [
        "oobi_csms_cnt_en",
        0,
        1
      ],
      [
        "oobi_frm_cnt_en",
        1,
        1
      ],
      [
        "oobi_fte_pd_req_cnt_en",
        2,
        1
      ],
      [
        "oobi_fte_pd_res_cnt_en",
        3,
        1
      ],
      [
        "oobi_fte_fts_cnt_en",
        4,
        1
      ]
    ]
  },
  "ifgb_24p_oobe_pkt_cnt": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBE packet count - per port",
    "fields": [
      [
        "oobe_link_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobe_csms_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBE CSMS packet count",
    "fields": [
      [
        "oobe_csms_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobe_frm_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBE FRM packet count",
    "fields": [
      [
        "oobe_frm_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobe_fte_pd_req_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBE FTE PD REQ packet count",
    "fields": [
      [
        "oobe_fte_pd_req_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobe_fte_pd_res_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBE FTE PD RES packet count",
    "fields": [
      [
        "oobe_fte_pd_res_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobe_fte_fts_pkt_cnt_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 32,
    "desc": "OOBE FTE FTS packet count",
    "fields": [
      [
        "oobe_fte_fts_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "ifgb_24p_oobe_pkt_type_cnt_en": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 5,
    "desc": "OOBE packet count enable per type: 0 - Disabled. 1 - Enabled.",
    "fields": [
      [
        "oobe_csms_cnt_en",
        0,
        1
      ],
      [
        "oobe_frm_cnt_en",
        1,
        1
      ],
      [
        "oobe_fte_pd_req_cnt_en",
        2,
        1
      ],
      [
        "oobe_fte_pd_res_cnt_en",
        3,
        1
      ],
      [
        "oobe_fte_fts_cnt_en",
        4,
        1
      ]
    ]
  },
  "ifgb_24p_time_interval_sel": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": " ",
    "fields": [
      [
        "port_time_interval_sel_val",
        0,
        3
      ]
    ]
  },
  "ifgb_24p_phantomq_time_interval_sel": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": " ",
    "fields": [
      [
        "phantomq_time_interval_sel_val",
        0,
        3
      ]
    ]
  },
  "ifgb_24p_avg_rate_factor": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": " ",
    "fields": [
      [
        "avg_rate_factor_sel",
        0,
        3
      ]
    ]
  },
  "ifgb_24p_instru_cnt0_sel": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": " ",
    "fields": [
      [
        "instru_port_cnt0_sel",
        0,
        3
      ]
    ]
  },
  "ifgb_24p_instru_cnt1_sel": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 3,
    "desc": " ",
    "fields": [
      [
        "instru_port_cnt1_sel",
        0,
        3
      ]
    ]
  },
  "ifgb_24p_instru_cnt_enable_per_cntr": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 48,
    "desc": " ",
    "fields": [
      [
        "instru_cntr_cnt_en",
        0,
        48
      ]
    ]
  },
  "ifgb_24p_cpu_access_hist": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 24,
    "desc": " ",
    "fields": [
      [
        "cpu_access_hist_per_port",
        0,
        24
      ]
    ]
  },
  "ifgb_24p_instru_hist_ovf": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 24,
    "desc": " ",
    "fields": [
      [
        "instru_hist_ovf_per_port",
        0,
        24
      ]
    ]
  },
  "ifgb_24p_instru_tx_phantom_q_en": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 1,
    "desc": " ",
    "fields": [
      [
        "tx_port_phantom_q_en",
        0,
        1
      ]
    ]
  },
  "ifgb_24p_instru_tx_phantom_q_thd": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 17,
    "desc": " ",
    "fields": [
      [
        "tx_port_phantom_q_thd",
        0,
        17
      ]
    ]
  },
  "ifgb_24p_instru_tx_phantom_q_dec_val": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 20,
    "desc": " ",
    "fields": [
      [
        "tx_port_phantom_q_dec_val",
        0,
        20
      ]
    ]
  },
  "ifgb_24p_tx_flit_credit_cnt_status_reg": {
    "type": "register",
    "block": "ifgb_24p",
    "width": 6,
    "desc": " ",
    "fields": [
      [
        "tx_flit_credit_cnt_status",
        0,
        6
      ]
    ]
  },
  "ifgb_24p_rx_instru_pkt_hdr_hit_pattern": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 192,
    "desc": "data memory",
    "fields": [
      [
        "rx_port_pkt_hdr_hit_pattern",
        0,
        192
      ]
    ]
  },
  "ifgb_24p_rx_instru_pkt_hdr_hit_mask": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 192,
    "desc": "data memory",
    "fields": [
      [
        "rx_port_pkt_hdr_hit_mask",
        0,
        192
      ]
    ]
  },
  "ifgb_24p_tx_data_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 64,
    "desc": "data memory",
    "fields": [
      [
        "tx_data",
        0,
        64
      ]
    ]
  },
  "ifgb_24p_tx_desc_mem0": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 24,
    "desc": "descriptors memory",
    "fields": [
      [
        "tx_desc0",
        0,
        24
      ]
    ]
  },
  "ifgb_24p_tx_desc_mem1": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 24,
    "desc": "descriptors memory",
    "fields": [
      [
        "tx_desc1",
        0,
        24
      ]
    ]
  },
  "ifgb_24p_tx_debug_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 1063,
    "desc": "debug memory",
    "fields": [
      [
        "tx_debug_mem_data",
        0,
        1063
      ]
    ]
  },
  "ifgb_24p_rx_data_mem0": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 64,
    "desc": "data memory",
    "fields": [
      [
        "rx_data",
        0,
        64
      ]
    ]
  },
  "ifgb_24p_rx_data_mem1": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 64,
    "desc": "data memory",
    "fields": [
      [
        "rx_data",
        0,
        64
      ]
    ]
  },
  "ifgb_24p_rx_desc_mem0": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 49,
    "desc": "descriptors memory",
    "fields": [
      [
        "rx_desc",
        0,
        49
      ]
    ]
  },
  "ifgb_24p_rx_desc_mem1": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 49,
    "desc": "descriptors memory",
    "fields": [
      [
        "rx_desc",
        0,
        49
      ]
    ]
  },
  "ifgb_24p_rx_desc_mem2": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 49,
    "desc": "descriptors memory",
    "fields": [
      [
        "rx_desc",
        0,
        49
      ]
    ]
  },
  "ifgb_24p_rx_desc_mem3": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 49,
    "desc": "descriptors memory",
    "fields": [
      [
        "rx_desc",
        0,
        49
      ]
    ]
  },
  "ifgb_24p_rra_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 101,
    "desc": "rra",
    "fields": [
      [
        "rra",
        0,
        101
      ]
    ]
  },
  "ifgb_24p_tra_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 79,
    "desc": "tra",
    "fields": [
      [
        "tra",
        0,
        79
      ]
    ]
  },
  "ifgb_24p_inbi_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 91,
    "desc": "in band inject",
    "fields": [
      [
        "inbi",
        0,
        91
      ]
    ]
  },
  "ifgb_24p_rx_debug_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 1090,
    "desc": "debug memory",
    "fields": [
      [
        "rx_debug_mem_data",
        0,
        1090
      ]
    ]
  },
  "ifgb_24p_rcy_data_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 256,
    "desc": "data memory",
    "fields": [
      [
        "rcy_data",
        0,
        256
      ]
    ]
  },
  "ifgb_24p_rcy_desc_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 67,
    "desc": "descriptors memory",
    "fields": [
      [
        "rcy_desc",
        0,
        67
      ]
    ]
  },
  "ifgb_24p_fcm_prio_map": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 192,
    "desc": "descriptors memory",
    "fields": [
      [
        "fcm_prio_map_data",
        0,
        192
      ]
    ]
  },
  "ifgb_24p_tc_tcam": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 11,
    "desc": "Traffic class TCAM used for a pair of MAC lanes",
    "fields": [
      [
        "tc_tcam_mask",
        0,
        11
      ],
      [
        "tc_tcam_key",
        11,
        11
      ],
      [
        "tc_tcam_delete",
        22,
        1
      ]
    ]
  },
  "ifgb_24p_tc_tcam_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 5,
    "desc": "Traffic class TCAM memory used for a pair of MAC lanes",
    "fields": [
      [
        "tc_tcam_mem_dout",
        0,
        5
      ]
    ]
  },
  "ifgb_24p_tc_lut_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 6,
    "desc": "Traffic class LUT memory used for a pair of MAC lanes",
    "fields": [
      [
        "tc_lut_mem_dout",
        0,
        6
      ]
    ]
  },
  "ifgb_24p_instru_hist_mem": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 112,
    "desc": "ports rates & rates histogram",
    "fields": [
      [
        "istru_hist_mem_dout",
        0,
        112
      ]
    ]
  },
  "ifgb_24p_rx_oob_data_mem0_sop_bank": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 138,
    "desc": "oob data memory",
    "fields": [
      [
        "rx_oob_data",
        0,
        138
      ]
    ]
  },
  "ifgb_24p_rx_oob_data_mem0": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 128,
    "desc": "oob data memory",
    "fields": [
      [
        "rx_oob_data",
        0,
        128
      ]
    ]
  },
  "ifgb_24p_rx_oob_data_mem1_sop_bank": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 138,
    "desc": "oob data memory",
    "fields": [
      [
        "rx_oob_data",
        0,
        138
      ]
    ]
  },
  "ifgb_24p_rx_oob_data_mem1": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 128,
    "desc": "oob data memory",
    "fields": [
      [
        "rx_oob_data",
        0,
        128
      ]
    ]
  },
  "ifgb_24p_rx_oob_data_mem2_sop_bank": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 138,
    "desc": "oob data memory",
    "fields": [
      [
        "rx_oob_data",
        0,
        138
      ]
    ]
  },
  "ifgb_24p_rx_oob_data_mem2": {
    "type": "memory",
    "block": "ifgb_24p",
    "width": 128,
    "desc": "oob data memory",
    "fields": [
      [
        "rx_oob_data",
        0,
        128
      ]
    ]
  },
  "serdes_pool16_interrupt_register": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 10,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "apb_cmd_done_summary",
        1,
        1
      ],
      [
        "serdes_interrupts0_summary",
        2,
        1
      ],
      [
        "serdes_interrupts1_summary",
        3,
        1
      ],
      [
        "serdes_interrupts2_summary",
        4,
        1
      ],
      [
        "serdes_interrupts3_summary",
        5,
        1
      ],
      [
        "serdes_interrupts4_summary",
        6,
        1
      ],
      [
        "serdes_interrupts5_summary",
        7,
        1
      ],
      [
        "serdes_interrupts6_summary",
        8,
        1
      ],
      [
        "serdes_interrupts7_summary",
        9,
        1
      ]
    ]
  },
  "serdes_pool16_mem_protect_interrupt": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "serdes_pool16_mem_protect_interrupt_test": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "serdes_pool16_broadcast_config_reg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "serdes_pool16_memory_prot_bypass": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "serdes_pool16_soft_reset_configuration": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "serdes_pool16_mbist_configuration": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "serdes_pool16_power_down_configuration": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "serdes_pool16_spare_reg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "serdes_pool16_pmro_ctrl": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "serdes_pool16_pmro_status": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "serdes_pool16_mirror_bus_conf_reg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "serdes_pool16_mirror_bus_status": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "serdes_pool16_device_time_offset_cfg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "serdes_pool16_apb_ctrl_reg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 41,
    "desc": "SBUS Master Request Register",
    "fields": [
      [
        "apb_wr_or_rd",
        0,
        1
      ],
      [
        "apb_sel0",
        1,
        1
      ],
      [
        "apb_sel1",
        2,
        1
      ],
      [
        "apb_sel2",
        3,
        1
      ],
      [
        "apb_sel3",
        4,
        1
      ],
      [
        "apb_sel4",
        5,
        1
      ],
      [
        "apb_sel5",
        6,
        1
      ],
      [
        "apb_sel6",
        7,
        1
      ],
      [
        "apb_sel7",
        8,
        1
      ],
      [
        "apb_wr_data",
        9,
        16
      ],
      [
        "apb_addr",
        25,
        16
      ]
    ]
  },
  "serdes_pool16_apb_rd_reg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 24,
    "desc": "APB Master Request Data Register",
    "fields": [
      [
        "apb_cmd_done0",
        0,
        1
      ],
      [
        "apb_cmd_done1",
        1,
        1
      ],
      [
        "apb_cmd_done2",
        2,
        1
      ],
      [
        "apb_cmd_done3",
        3,
        1
      ],
      [
        "apb_cmd_done4",
        4,
        1
      ],
      [
        "apb_cmd_done5",
        5,
        1
      ],
      [
        "apb_cmd_done6",
        6,
        1
      ],
      [
        "apb_cmd_done7",
        7,
        1
      ],
      [
        "apb_rd_data",
        8,
        16
      ]
    ]
  },
  "serdes_pool16_apb_cmd_done": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "apb_cmd_done_interrupt",
        0,
        1
      ]
    ]
  },
  "serdes_pool16_apb_cmd_done_mask": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "apb_cmd_done_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "serdes_pool16_apb_cmd_done_test": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "apb_cmd_done_interrupt_test",
        0,
        1
      ]
    ]
  },
  "serdes_pool16_apb_clk_div": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "apb_clk_div_val",
        0,
        6
      ]
    ]
  },
  "serdes_pool16_serdes_dig_clk_cfg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 5,
    "desc": "",
    "fields": [
      [
        "dig_clk_sel",
        0,
        3
      ],
      [
        "dig_clk_div",
        3,
        2
      ]
    ]
  },
  "serdes_pool16_serdes_status": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 2,
    "desc": "SerDes status register",
    "fields": [
      [
        "rx_rdy",
        0,
        1
      ],
      [
        "signal_ok",
        1,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_pll_status": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 1,
    "desc": "SerDes PLL status register",
    "fields": [
      [
        "pll_lock",
        0,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_interrupts": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "general_interrupt",
        0,
        1
      ],
      [
        "anlt_intr_n",
        1,
        1
      ],
      [
        "an0_done",
        2,
        1
      ],
      [
        "an1_done",
        3,
        1
      ],
      [
        "lt0_done",
        4,
        1
      ],
      [
        "lt1_done",
        5,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_interrupts_mask": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "general_interrupt_mask",
        0,
        1
      ],
      [
        "anlt_intr_n_mask",
        1,
        1
      ],
      [
        "an0_done_mask",
        2,
        1
      ],
      [
        "an1_done_mask",
        3,
        1
      ],
      [
        "lt0_done_mask",
        4,
        1
      ],
      [
        "lt1_done_mask",
        5,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_interrupts_test": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "general_interrupt_test",
        0,
        1
      ],
      [
        "anlt_intr_n_test",
        1,
        1
      ],
      [
        "an0_done_test",
        2,
        1
      ],
      [
        "an1_done_test",
        3,
        1
      ],
      [
        "lt0_done_test",
        4,
        1
      ],
      [
        "lt1_done_test",
        5,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_config": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 1,
    "desc": "SerDes config register",
    "fields": [
      [
        "tx_squelch",
        0,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_snapshot_trig": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 8,
    "desc": "SerDes snapshot event",
    "fields": [
      [
        "srd0_snapshot_trig",
        0,
        1
      ],
      [
        "srd1_snapshot_trig",
        1,
        1
      ],
      [
        "srd2_snapshot_trig",
        2,
        1
      ],
      [
        "srd3_snapshot_trig",
        3,
        1
      ],
      [
        "srd4_snapshot_trig",
        4,
        1
      ],
      [
        "srd5_snapshot_trig",
        5,
        1
      ],
      [
        "srd6_snapshot_trig",
        6,
        1
      ],
      [
        "srd7_snapshot_trig",
        7,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_mcu_interrupt": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 8,
    "desc": "SerDes MCU initiate interrupt",
    "fields": [
      [
        "srd0_mcu_interrupt",
        0,
        1
      ],
      [
        "srd1_mcu_interrupt",
        1,
        1
      ],
      [
        "srd2_mcu_interrupt",
        2,
        1
      ],
      [
        "srd3_mcu_interrupt",
        3,
        1
      ],
      [
        "srd4_mcu_interrupt",
        4,
        1
      ],
      [
        "srd5_mcu_interrupt",
        5,
        1
      ],
      [
        "srd6_mcu_interrupt",
        6,
        1
      ],
      [
        "srd7_mcu_interrupt",
        7,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_synce_control": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 32,
    "desc": "Serdes SyncE control register",
    "fields": [
      [
        "synce_pri_ifg_sel_cfg",
        0,
        2
      ],
      [
        "synce_sec_ifg_sel_cfg",
        2,
        2
      ],
      [
        "synce_pri_ifg_lock_by",
        4,
        2
      ],
      [
        "synce_sec_ifg_lock_by",
        6,
        2
      ],
      [
        "synce_pri_ifg_override_lock_en",
        8,
        1
      ],
      [
        "synce_sec_ifg_override_lock_en",
        9,
        1
      ],
      [
        "synce_pri_ifg_override_lock_value",
        10,
        1
      ],
      [
        "synce_sec_ifg_override_lock_value",
        11,
        1
      ],
      [
        "synce_pri_clk_sel",
        12,
        4
      ],
      [
        "synce_sec_clk_sel",
        16,
        4
      ],
      [
        "synce_pri_clk_div",
        20,
        6
      ],
      [
        "synce_sec_clk_div",
        26,
        6
      ]
    ]
  },
  "serdes_pool16_serdes_synce_pri_unlock_clear": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 2,
    "desc": "Serdes Pri SyncE lock control",
    "fields": [
      [
        "synce_pri_squelch_enable",
        0,
        1
      ],
      [
        "synce_pri_unlock_clear",
        1,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_synce_sec_unlock_clear": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 2,
    "desc": "Serdes Sec SyncE lock control",
    "fields": [
      [
        "synce_sec_squelch_enable",
        0,
        1
      ],
      [
        "synce_sec_unlock_clear",
        1,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_bias_chain_control": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 3,
    "desc": "Serdes Bias Chain control register",
    "fields": [
      [
        "bias_en_rext_use",
        0,
        1
      ],
      [
        "bias_request_rext_atb",
        1,
        1
      ],
      [
        "bias_request_rext_atb_sense",
        2,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_signal_ok_src_cfg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 16,
    "desc": "Source of sig OK indication to MAC_POOL",
    "fields": [
      [
        "lane0_sig_ok_src",
        0,
        1
      ],
      [
        "lane1_sig_ok_src",
        1,
        1
      ],
      [
        "lane2_sig_ok_src",
        2,
        1
      ],
      [
        "lane3_sig_ok_src",
        3,
        1
      ],
      [
        "lane4_sig_ok_src",
        4,
        1
      ],
      [
        "lane5_sig_ok_src",
        5,
        1
      ],
      [
        "lane6_sig_ok_src",
        6,
        1
      ],
      [
        "lane7_sig_ok_src",
        7,
        1
      ],
      [
        "lane8_sig_ok_src",
        8,
        1
      ],
      [
        "lane9_sig_ok_src",
        9,
        1
      ],
      [
        "lane10_sig_ok_src",
        10,
        1
      ],
      [
        "lane11_sig_ok_src",
        11,
        1
      ],
      [
        "lane12_sig_ok_src",
        12,
        1
      ],
      [
        "lane13_sig_ok_src",
        13,
        1
      ],
      [
        "lane14_sig_ok_src",
        14,
        1
      ],
      [
        "lane15_sig_ok_src",
        15,
        1
      ]
    ]
  },
  "serdes_pool16_serdes_rx_lane_swap_config": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 32,
    "desc": "Lane swap configuration",
    "fields": [
      [
        "rx_lane0_source",
        0,
        2
      ],
      [
        "rx_lane1_source",
        2,
        2
      ],
      [
        "rx_lane2_source",
        4,
        2
      ],
      [
        "rx_lane3_source",
        6,
        2
      ],
      [
        "rx_lane4_source",
        8,
        2
      ],
      [
        "rx_lane5_source",
        10,
        2
      ],
      [
        "rx_lane6_source",
        12,
        2
      ],
      [
        "rx_lane7_source",
        14,
        2
      ],
      [
        "rx_lane8_source",
        16,
        2
      ],
      [
        "rx_lane9_source",
        18,
        2
      ],
      [
        "rx_lane10_source",
        20,
        2
      ],
      [
        "rx_lane11_source",
        22,
        2
      ],
      [
        "rx_lane12_source",
        24,
        2
      ],
      [
        "rx_lane13_source",
        26,
        2
      ],
      [
        "rx_lane14_source",
        28,
        2
      ],
      [
        "rx_lane15_source",
        30,
        2
      ]
    ]
  },
  "serdes_pool16_serdes_tx_lane_swap_config": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 32,
    "desc": "Lane swap configuration",
    "fields": [
      [
        "tx_lane0_source",
        0,
        2
      ],
      [
        "tx_lane1_source",
        2,
        2
      ],
      [
        "tx_lane2_source",
        4,
        2
      ],
      [
        "tx_lane3_source",
        6,
        2
      ],
      [
        "tx_lane4_source",
        8,
        2
      ],
      [
        "tx_lane5_source",
        10,
        2
      ],
      [
        "tx_lane6_source",
        12,
        2
      ],
      [
        "tx_lane7_source",
        14,
        2
      ],
      [
        "tx_lane8_source",
        16,
        2
      ],
      [
        "tx_lane9_source",
        18,
        2
      ],
      [
        "tx_lane10_source",
        20,
        2
      ],
      [
        "tx_lane11_source",
        22,
        2
      ],
      [
        "tx_lane12_source",
        24,
        2
      ],
      [
        "tx_lane13_source",
        26,
        2
      ],
      [
        "tx_lane14_source",
        28,
        2
      ],
      [
        "tx_lane15_source",
        30,
        2
      ]
    ]
  },
  "serdes_pool16_serdes_an_master_config": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 48,
    "desc": "AN master configuration",
    "fields": [
      [
        "srd0_an_master_idx",
        0,
        3
      ],
      [
        "srd1_an_master_idx",
        3,
        3
      ],
      [
        "srd2_an_master_idx",
        6,
        3
      ],
      [
        "srd3_an_master_idx",
        9,
        3
      ],
      [
        "srd4_an_master_idx",
        12,
        3
      ],
      [
        "srd5_an_master_idx",
        15,
        3
      ],
      [
        "srd6_an_master_idx",
        18,
        3
      ],
      [
        "srd7_an_master_idx",
        21,
        3
      ],
      [
        "srd8_an_master_idx",
        24,
        3
      ],
      [
        "srd9_an_master_idx",
        27,
        3
      ],
      [
        "srd10_an_master_idx",
        30,
        3
      ],
      [
        "srd11_an_master_idx",
        33,
        3
      ],
      [
        "srd12_an_master_idx",
        36,
        3
      ],
      [
        "srd13_an_master_idx",
        39,
        3
      ],
      [
        "srd14_an_master_idx",
        42,
        3
      ],
      [
        "srd15_an_master_idx",
        45,
        3
      ]
    ]
  },
  "serdes_pool16_serdes_an_bitmap_config": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 128,
    "desc": "AN Bitmap configuration",
    "fields": [
      [
        "srd0_an_bitmap",
        0,
        8
      ],
      [
        "srd1_an_bitmap",
        8,
        8
      ],
      [
        "srd2_an_bitmap",
        16,
        8
      ],
      [
        "srd3_an_bitmap",
        24,
        8
      ],
      [
        "srd4_an_bitmap",
        32,
        8
      ],
      [
        "srd5_an_bitmap",
        40,
        8
      ],
      [
        "srd6_an_bitmap",
        48,
        8
      ],
      [
        "srd7_an_bitmap",
        56,
        8
      ],
      [
        "srd8_an_bitmap",
        64,
        8
      ],
      [
        "srd9_an_bitmap",
        72,
        8
      ],
      [
        "srd10_an_bitmap",
        80,
        8
      ],
      [
        "srd11_an_bitmap",
        88,
        8
      ],
      [
        "srd12_an_bitmap",
        96,
        8
      ],
      [
        "srd13_an_bitmap",
        104,
        8
      ],
      [
        "srd14_an_bitmap",
        112,
        8
      ],
      [
        "srd15_an_bitmap",
        120,
        8
      ]
    ]
  },
  "serdes_pool16_gpi_ctrl_reg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 32,
    "desc": "Control Credo GPI",
    "fields": [
      [
        "srd_pair0_gpi0",
        0,
        1
      ],
      [
        "srd_pair0_gpi1",
        1,
        1
      ],
      [
        "srd_pair0_gpi2",
        2,
        1
      ],
      [
        "srd_pair0_gpi3",
        3,
        1
      ],
      [
        "srd_pair1_gpi0",
        4,
        1
      ],
      [
        "srd_pair1_gpi1",
        5,
        1
      ],
      [
        "srd_pair1_gpi2",
        6,
        1
      ],
      [
        "srd_pair1_gpi3",
        7,
        1
      ],
      [
        "srd_pair2_gpi0",
        8,
        1
      ],
      [
        "srd_pair2_gpi1",
        9,
        1
      ],
      [
        "srd_pair2_gpi2",
        10,
        1
      ],
      [
        "srd_pair2_gpi3",
        11,
        1
      ],
      [
        "srd_pair3_gpi0",
        12,
        1
      ],
      [
        "srd_pair3_gpi1",
        13,
        1
      ],
      [
        "srd_pair3_gpi2",
        14,
        1
      ],
      [
        "srd_pair3_gpi3",
        15,
        1
      ],
      [
        "srd_pair4_gpi0",
        16,
        1
      ],
      [
        "srd_pair4_gpi1",
        17,
        1
      ],
      [
        "srd_pair4_gpi2",
        18,
        1
      ],
      [
        "srd_pair4_gpi3",
        19,
        1
      ],
      [
        "srd_pair5_gpi0",
        20,
        1
      ],
      [
        "srd_pair5_gpi1",
        21,
        1
      ],
      [
        "srd_pair5_gpi2",
        22,
        1
      ],
      [
        "srd_pair5_gpi3",
        23,
        1
      ],
      [
        "srd_pair6_gpi0",
        24,
        1
      ],
      [
        "srd_pair6_gpi1",
        25,
        1
      ],
      [
        "srd_pair6_gpi2",
        26,
        1
      ],
      [
        "srd_pair6_gpi3",
        27,
        1
      ],
      [
        "srd_pair7_gpi0",
        28,
        1
      ],
      [
        "srd_pair7_gpi1",
        29,
        1
      ],
      [
        "srd_pair7_gpi2",
        30,
        1
      ],
      [
        "srd_pair7_gpi3",
        31,
        1
      ]
    ]
  },
  "serdes_pool16_gpo_read_reg": {
    "type": "register",
    "block": "serdes_pool16",
    "width": 32,
    "desc": "Read Credo GPO",
    "fields": [
      [
        "srd_pair0_gpo0",
        0,
        1
      ],
      [
        "srd_pair0_gpo1",
        1,
        1
      ],
      [
        "srd_pair0_gpo2",
        2,
        1
      ],
      [
        "srd_pair0_gpo3",
        3,
        1
      ],
      [
        "srd_pair1_gpo0",
        4,
        1
      ],
      [
        "srd_pair1_gpo1",
        5,
        1
      ],
      [
        "srd_pair1_gpo2",
        6,
        1
      ],
      [
        "srd_pair1_gpo3",
        7,
        1
      ],
      [
        "srd_pair2_gpo0",
        8,
        1
      ],
      [
        "srd_pair2_gpo1",
        9,
        1
      ],
      [
        "srd_pair2_gpo2",
        10,
        1
      ],
      [
        "srd_pair2_gpo3",
        11,
        1
      ],
      [
        "srd_pair3_gpo0",
        12,
        1
      ],
      [
        "srd_pair3_gpo1",
        13,
        1
      ],
      [
        "srd_pair3_gpo2",
        14,
        1
      ],
      [
        "srd_pair3_gpo3",
        15,
        1
      ],
      [
        "srd_pair4_gpo0",
        16,
        1
      ],
      [
        "srd_pair4_gpo1",
        17,
        1
      ],
      [
        "srd_pair4_gpo2",
        18,
        1
      ],
      [
        "srd_pair4_gpo3",
        19,
        1
      ],
      [
        "srd_pair5_gpo0",
        20,
        1
      ],
      [
        "srd_pair5_gpo1",
        21,
        1
      ],
      [
        "srd_pair5_gpo2",
        22,
        1
      ],
      [
        "srd_pair5_gpo3",
        23,
        1
      ],
      [
        "srd_pair6_gpo0",
        24,
        1
      ],
      [
        "srd_pair6_gpo1",
        25,
        1
      ],
      [
        "srd_pair6_gpo2",
        26,
        1
      ],
      [
        "srd_pair6_gpo3",
        27,
        1
      ],
      [
        "srd_pair7_gpo0",
        28,
        1
      ],
      [
        "srd_pair7_gpo1",
        29,
        1
      ],
      [
        "srd_pair7_gpo2",
        30,
        1
      ],
      [
        "srd_pair7_gpo3",
        31,
        1
      ]
    ]
  },
  "serdes_pool24_interrupt_register": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 14,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "apb_cmd_done_summary",
        1,
        1
      ],
      [
        "serdes_interrupts0_summary",
        2,
        1
      ],
      [
        "serdes_interrupts1_summary",
        3,
        1
      ],
      [
        "serdes_interrupts2_summary",
        4,
        1
      ],
      [
        "serdes_interrupts3_summary",
        5,
        1
      ],
      [
        "serdes_interrupts4_summary",
        6,
        1
      ],
      [
        "serdes_interrupts5_summary",
        7,
        1
      ],
      [
        "serdes_interrupts6_summary",
        8,
        1
      ],
      [
        "serdes_interrupts7_summary",
        9,
        1
      ],
      [
        "serdes_interrupts8_summary",
        10,
        1
      ],
      [
        "serdes_interrupts9_summary",
        11,
        1
      ],
      [
        "serdes_interrupts10_summary",
        12,
        1
      ],
      [
        "serdes_interrupts11_summary",
        13,
        1
      ]
    ]
  },
  "serdes_pool24_mem_protect_interrupt": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "serdes_pool24_mem_protect_interrupt_test": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "serdes_pool24_broadcast_config_reg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "serdes_pool24_memory_prot_bypass": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "serdes_pool24_soft_reset_configuration": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "serdes_pool24_mbist_configuration": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "serdes_pool24_power_down_configuration": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "serdes_pool24_spare_reg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "serdes_pool24_pmro_ctrl": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "serdes_pool24_pmro_status": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "serdes_pool24_mirror_bus_conf_reg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "serdes_pool24_mirror_bus_status": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "serdes_pool24_device_time_offset_cfg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "serdes_pool24_apb_ctrl_reg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 45,
    "desc": "SBUS Master Request Register",
    "fields": [
      [
        "apb_wr_or_rd",
        0,
        1
      ],
      [
        "apb_sel0",
        1,
        1
      ],
      [
        "apb_sel1",
        2,
        1
      ],
      [
        "apb_sel2",
        3,
        1
      ],
      [
        "apb_sel3",
        4,
        1
      ],
      [
        "apb_sel4",
        5,
        1
      ],
      [
        "apb_sel5",
        6,
        1
      ],
      [
        "apb_sel6",
        7,
        1
      ],
      [
        "apb_sel7",
        8,
        1
      ],
      [
        "apb_sel8",
        9,
        1
      ],
      [
        "apb_sel9",
        10,
        1
      ],
      [
        "apb_sel10",
        11,
        1
      ],
      [
        "apb_sel11",
        12,
        1
      ],
      [
        "apb_wr_data",
        13,
        16
      ],
      [
        "apb_addr",
        29,
        16
      ]
    ]
  },
  "serdes_pool24_apb_rd_reg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 28,
    "desc": "APB Master Request Data Register",
    "fields": [
      [
        "apb_cmd_done0",
        0,
        1
      ],
      [
        "apb_cmd_done1",
        1,
        1
      ],
      [
        "apb_cmd_done2",
        2,
        1
      ],
      [
        "apb_cmd_done3",
        3,
        1
      ],
      [
        "apb_cmd_done4",
        4,
        1
      ],
      [
        "apb_cmd_done5",
        5,
        1
      ],
      [
        "apb_cmd_done6",
        6,
        1
      ],
      [
        "apb_cmd_done7",
        7,
        1
      ],
      [
        "apb_cmd_done8",
        8,
        1
      ],
      [
        "apb_cmd_done9",
        9,
        1
      ],
      [
        "apb_cmd_done10",
        10,
        1
      ],
      [
        "apb_cmd_done11",
        11,
        1
      ],
      [
        "apb_rd_data",
        12,
        16
      ]
    ]
  },
  "serdes_pool24_apb_cmd_done": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "apb_cmd_done_interrupt",
        0,
        1
      ]
    ]
  },
  "serdes_pool24_apb_cmd_done_mask": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "apb_cmd_done_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "serdes_pool24_apb_cmd_done_test": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "apb_cmd_done_interrupt_test",
        0,
        1
      ]
    ]
  },
  "serdes_pool24_apb_clk_div": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "apb_clk_div_val",
        0,
        6
      ]
    ]
  },
  "serdes_pool24_serdes_dig_clk_cfg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 5,
    "desc": "",
    "fields": [
      [
        "dig_clk_sel",
        0,
        3
      ],
      [
        "dig_clk_div",
        3,
        2
      ]
    ]
  },
  "serdes_pool24_serdes_status": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 2,
    "desc": "SerDes status register",
    "fields": [
      [
        "rx_rdy",
        0,
        1
      ],
      [
        "signal_ok",
        1,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_pll_status": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 1,
    "desc": "SerDes PLL status register",
    "fields": [
      [
        "pll_lock",
        0,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_interrupts": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "general_interrupt",
        0,
        1
      ],
      [
        "anlt_intr_n",
        1,
        1
      ],
      [
        "an0_done",
        2,
        1
      ],
      [
        "an1_done",
        3,
        1
      ],
      [
        "lt0_done",
        4,
        1
      ],
      [
        "lt1_done",
        5,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_interrupts_mask": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "general_interrupt_mask",
        0,
        1
      ],
      [
        "anlt_intr_n_mask",
        1,
        1
      ],
      [
        "an0_done_mask",
        2,
        1
      ],
      [
        "an1_done_mask",
        3,
        1
      ],
      [
        "lt0_done_mask",
        4,
        1
      ],
      [
        "lt1_done_mask",
        5,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_interrupts_test": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "general_interrupt_test",
        0,
        1
      ],
      [
        "anlt_intr_n_test",
        1,
        1
      ],
      [
        "an0_done_test",
        2,
        1
      ],
      [
        "an1_done_test",
        3,
        1
      ],
      [
        "lt0_done_test",
        4,
        1
      ],
      [
        "lt1_done_test",
        5,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_config": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 1,
    "desc": "SerDes config register",
    "fields": [
      [
        "tx_squelch",
        0,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_snapshot_trig": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 12,
    "desc": "SerDes snapshot event",
    "fields": [
      [
        "srd0_snapshot_trig",
        0,
        1
      ],
      [
        "srd1_snapshot_trig",
        1,
        1
      ],
      [
        "srd2_snapshot_trig",
        2,
        1
      ],
      [
        "srd3_snapshot_trig",
        3,
        1
      ],
      [
        "srd4_snapshot_trig",
        4,
        1
      ],
      [
        "srd5_snapshot_trig",
        5,
        1
      ],
      [
        "srd6_snapshot_trig",
        6,
        1
      ],
      [
        "srd7_snapshot_trig",
        7,
        1
      ],
      [
        "srd8_snapshot_trig",
        8,
        1
      ],
      [
        "srd9_snapshot_trig",
        9,
        1
      ],
      [
        "srd10_snapshot_trig",
        10,
        1
      ],
      [
        "srd11_snapshot_trig",
        11,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_mcu_interrupt": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 12,
    "desc": "SerDes MCU initiate interrupt",
    "fields": [
      [
        "srd0_mcu_interrupt",
        0,
        1
      ],
      [
        "srd1_mcu_interrupt",
        1,
        1
      ],
      [
        "srd2_mcu_interrupt",
        2,
        1
      ],
      [
        "srd3_mcu_interrupt",
        3,
        1
      ],
      [
        "srd4_mcu_interrupt",
        4,
        1
      ],
      [
        "srd5_mcu_interrupt",
        5,
        1
      ],
      [
        "srd6_mcu_interrupt",
        6,
        1
      ],
      [
        "srd7_mcu_interrupt",
        7,
        1
      ],
      [
        "srd8_mcu_interrupt",
        8,
        1
      ],
      [
        "srd9_mcu_interrupt",
        9,
        1
      ],
      [
        "srd10_mcu_interrupt",
        10,
        1
      ],
      [
        "srd11_mcu_interrupt",
        11,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_synce_control": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 34,
    "desc": "Serdes SyncE control register",
    "fields": [
      [
        "synce_pri_ifg_sel_cfg",
        0,
        2
      ],
      [
        "synce_sec_ifg_sel_cfg",
        2,
        2
      ],
      [
        "synce_pri_ifg_lock_by",
        4,
        2
      ],
      [
        "synce_sec_ifg_lock_by",
        6,
        2
      ],
      [
        "synce_pri_ifg_override_lock_en",
        8,
        1
      ],
      [
        "synce_sec_ifg_override_lock_en",
        9,
        1
      ],
      [
        "synce_pri_ifg_override_lock_value",
        10,
        1
      ],
      [
        "synce_sec_ifg_override_lock_value",
        11,
        1
      ],
      [
        "synce_pri_clk_sel",
        12,
        5
      ],
      [
        "synce_sec_clk_sel",
        17,
        5
      ],
      [
        "synce_pri_clk_div",
        22,
        6
      ],
      [
        "synce_sec_clk_div",
        28,
        6
      ]
    ]
  },
  "serdes_pool24_serdes_synce_pri_unlock_clear": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 2,
    "desc": "Serdes Pri SyncE lock control",
    "fields": [
      [
        "synce_pri_squelch_enable",
        0,
        1
      ],
      [
        "synce_pri_unlock_clear",
        1,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_synce_sec_unlock_clear": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 2,
    "desc": "Serdes Sec SyncE lock control",
    "fields": [
      [
        "synce_sec_squelch_enable",
        0,
        1
      ],
      [
        "synce_sec_unlock_clear",
        1,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_bias_chain_control": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 3,
    "desc": "Serdes Bias Chain control register",
    "fields": [
      [
        "bias_en_rext_use",
        0,
        1
      ],
      [
        "bias_request_rext_atb",
        1,
        1
      ],
      [
        "bias_request_rext_atb_sense",
        2,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_signal_ok_src_cfg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 24,
    "desc": "Source of sig OK indication to MAC_POOL",
    "fields": [
      [
        "lane0_sig_ok_src",
        0,
        1
      ],
      [
        "lane1_sig_ok_src",
        1,
        1
      ],
      [
        "lane2_sig_ok_src",
        2,
        1
      ],
      [
        "lane3_sig_ok_src",
        3,
        1
      ],
      [
        "lane4_sig_ok_src",
        4,
        1
      ],
      [
        "lane5_sig_ok_src",
        5,
        1
      ],
      [
        "lane6_sig_ok_src",
        6,
        1
      ],
      [
        "lane7_sig_ok_src",
        7,
        1
      ],
      [
        "lane8_sig_ok_src",
        8,
        1
      ],
      [
        "lane9_sig_ok_src",
        9,
        1
      ],
      [
        "lane10_sig_ok_src",
        10,
        1
      ],
      [
        "lane11_sig_ok_src",
        11,
        1
      ],
      [
        "lane12_sig_ok_src",
        12,
        1
      ],
      [
        "lane13_sig_ok_src",
        13,
        1
      ],
      [
        "lane14_sig_ok_src",
        14,
        1
      ],
      [
        "lane15_sig_ok_src",
        15,
        1
      ],
      [
        "lane16_sig_ok_src",
        16,
        1
      ],
      [
        "lane17_sig_ok_src",
        17,
        1
      ],
      [
        "lane18_sig_ok_src",
        18,
        1
      ],
      [
        "lane19_sig_ok_src",
        19,
        1
      ],
      [
        "lane20_sig_ok_src",
        20,
        1
      ],
      [
        "lane21_sig_ok_src",
        21,
        1
      ],
      [
        "lane22_sig_ok_src",
        22,
        1
      ],
      [
        "lane23_sig_ok_src",
        23,
        1
      ]
    ]
  },
  "serdes_pool24_serdes_rx_lane_swap_config": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 48,
    "desc": "Lane swap configuration",
    "fields": [
      [
        "rx_lane0_source",
        0,
        2
      ],
      [
        "rx_lane1_source",
        2,
        2
      ],
      [
        "rx_lane2_source",
        4,
        2
      ],
      [
        "rx_lane3_source",
        6,
        2
      ],
      [
        "rx_lane4_source",
        8,
        2
      ],
      [
        "rx_lane5_source",
        10,
        2
      ],
      [
        "rx_lane6_source",
        12,
        2
      ],
      [
        "rx_lane7_source",
        14,
        2
      ],
      [
        "rx_lane8_source",
        16,
        2
      ],
      [
        "rx_lane9_source",
        18,
        2
      ],
      [
        "rx_lane10_source",
        20,
        2
      ],
      [
        "rx_lane11_source",
        22,
        2
      ],
      [
        "rx_lane12_source",
        24,
        2
      ],
      [
        "rx_lane13_source",
        26,
        2
      ],
      [
        "rx_lane14_source",
        28,
        2
      ],
      [
        "rx_lane15_source",
        30,
        2
      ],
      [
        "rx_lane16_source",
        32,
        2
      ],
      [
        "rx_lane17_source",
        34,
        2
      ],
      [
        "rx_lane18_source",
        36,
        2
      ],
      [
        "rx_lane19_source",
        38,
        2
      ],
      [
        "rx_lane20_source",
        40,
        2
      ],
      [
        "rx_lane21_source",
        42,
        2
      ],
      [
        "rx_lane22_source",
        44,
        2
      ],
      [
        "rx_lane23_source",
        46,
        2
      ]
    ]
  },
  "serdes_pool24_serdes_tx_lane_swap_config": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 48,
    "desc": "Lane swap configuration",
    "fields": [
      [
        "tx_lane0_source",
        0,
        2
      ],
      [
        "tx_lane1_source",
        2,
        2
      ],
      [
        "tx_lane2_source",
        4,
        2
      ],
      [
        "tx_lane3_source",
        6,
        2
      ],
      [
        "tx_lane4_source",
        8,
        2
      ],
      [
        "tx_lane5_source",
        10,
        2
      ],
      [
        "tx_lane6_source",
        12,
        2
      ],
      [
        "tx_lane7_source",
        14,
        2
      ],
      [
        "tx_lane8_source",
        16,
        2
      ],
      [
        "tx_lane9_source",
        18,
        2
      ],
      [
        "tx_lane10_source",
        20,
        2
      ],
      [
        "tx_lane11_source",
        22,
        2
      ],
      [
        "tx_lane12_source",
        24,
        2
      ],
      [
        "tx_lane13_source",
        26,
        2
      ],
      [
        "tx_lane14_source",
        28,
        2
      ],
      [
        "tx_lane15_source",
        30,
        2
      ],
      [
        "tx_lane16_source",
        32,
        2
      ],
      [
        "tx_lane17_source",
        34,
        2
      ],
      [
        "tx_lane18_source",
        36,
        2
      ],
      [
        "tx_lane19_source",
        38,
        2
      ],
      [
        "tx_lane20_source",
        40,
        2
      ],
      [
        "tx_lane21_source",
        42,
        2
      ],
      [
        "tx_lane22_source",
        44,
        2
      ],
      [
        "tx_lane23_source",
        46,
        2
      ]
    ]
  },
  "serdes_pool24_serdes_an_master_config": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 72,
    "desc": "AN master configuration",
    "fields": [
      [
        "srd0_an_master_idx",
        0,
        3
      ],
      [
        "srd1_an_master_idx",
        3,
        3
      ],
      [
        "srd2_an_master_idx",
        6,
        3
      ],
      [
        "srd3_an_master_idx",
        9,
        3
      ],
      [
        "srd4_an_master_idx",
        12,
        3
      ],
      [
        "srd5_an_master_idx",
        15,
        3
      ],
      [
        "srd6_an_master_idx",
        18,
        3
      ],
      [
        "srd7_an_master_idx",
        21,
        3
      ],
      [
        "srd8_an_master_idx",
        24,
        3
      ],
      [
        "srd9_an_master_idx",
        27,
        3
      ],
      [
        "srd10_an_master_idx",
        30,
        3
      ],
      [
        "srd11_an_master_idx",
        33,
        3
      ],
      [
        "srd12_an_master_idx",
        36,
        3
      ],
      [
        "srd13_an_master_idx",
        39,
        3
      ],
      [
        "srd14_an_master_idx",
        42,
        3
      ],
      [
        "srd15_an_master_idx",
        45,
        3
      ],
      [
        "srd16_an_master_idx",
        48,
        3
      ],
      [
        "srd17_an_master_idx",
        51,
        3
      ],
      [
        "srd18_an_master_idx",
        54,
        3
      ],
      [
        "srd19_an_master_idx",
        57,
        3
      ],
      [
        "srd20_an_master_idx",
        60,
        3
      ],
      [
        "srd21_an_master_idx",
        63,
        3
      ],
      [
        "srd22_an_master_idx",
        66,
        3
      ],
      [
        "srd23_an_master_idx",
        69,
        3
      ]
    ]
  },
  "serdes_pool24_serdes_an_bitmap_config": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 192,
    "desc": "AN Bitmap configuration",
    "fields": [
      [
        "srd0_an_bitmap",
        0,
        8
      ],
      [
        "srd1_an_bitmap",
        8,
        8
      ],
      [
        "srd2_an_bitmap",
        16,
        8
      ],
      [
        "srd3_an_bitmap",
        24,
        8
      ],
      [
        "srd4_an_bitmap",
        32,
        8
      ],
      [
        "srd5_an_bitmap",
        40,
        8
      ],
      [
        "srd6_an_bitmap",
        48,
        8
      ],
      [
        "srd7_an_bitmap",
        56,
        8
      ],
      [
        "srd8_an_bitmap",
        64,
        8
      ],
      [
        "srd9_an_bitmap",
        72,
        8
      ],
      [
        "srd10_an_bitmap",
        80,
        8
      ],
      [
        "srd11_an_bitmap",
        88,
        8
      ],
      [
        "srd12_an_bitmap",
        96,
        8
      ],
      [
        "srd13_an_bitmap",
        104,
        8
      ],
      [
        "srd14_an_bitmap",
        112,
        8
      ],
      [
        "srd15_an_bitmap",
        120,
        8
      ],
      [
        "srd16_an_bitmap",
        128,
        8
      ],
      [
        "srd17_an_bitmap",
        136,
        8
      ],
      [
        "srd18_an_bitmap",
        144,
        8
      ],
      [
        "srd19_an_bitmap",
        152,
        8
      ],
      [
        "srd20_an_bitmap",
        160,
        8
      ],
      [
        "srd21_an_bitmap",
        168,
        8
      ],
      [
        "srd22_an_bitmap",
        176,
        8
      ],
      [
        "srd23_an_bitmap",
        184,
        8
      ]
    ]
  },
  "serdes_pool24_gpi_ctrl_reg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 48,
    "desc": "Control Credo GPI",
    "fields": [
      [
        "srd_pair0_gpi0",
        0,
        1
      ],
      [
        "srd_pair0_gpi1",
        1,
        1
      ],
      [
        "srd_pair0_gpi2",
        2,
        1
      ],
      [
        "srd_pair0_gpi3",
        3,
        1
      ],
      [
        "srd_pair1_gpi0",
        4,
        1
      ],
      [
        "srd_pair1_gpi1",
        5,
        1
      ],
      [
        "srd_pair1_gpi2",
        6,
        1
      ],
      [
        "srd_pair1_gpi3",
        7,
        1
      ],
      [
        "srd_pair2_gpi0",
        8,
        1
      ],
      [
        "srd_pair2_gpi1",
        9,
        1
      ],
      [
        "srd_pair2_gpi2",
        10,
        1
      ],
      [
        "srd_pair2_gpi3",
        11,
        1
      ],
      [
        "srd_pair3_gpi0",
        12,
        1
      ],
      [
        "srd_pair3_gpi1",
        13,
        1
      ],
      [
        "srd_pair3_gpi2",
        14,
        1
      ],
      [
        "srd_pair3_gpi3",
        15,
        1
      ],
      [
        "srd_pair4_gpi0",
        16,
        1
      ],
      [
        "srd_pair4_gpi1",
        17,
        1
      ],
      [
        "srd_pair4_gpi2",
        18,
        1
      ],
      [
        "srd_pair4_gpi3",
        19,
        1
      ],
      [
        "srd_pair5_gpi0",
        20,
        1
      ],
      [
        "srd_pair5_gpi1",
        21,
        1
      ],
      [
        "srd_pair5_gpi2",
        22,
        1
      ],
      [
        "srd_pair5_gpi3",
        23,
        1
      ],
      [
        "srd_pair6_gpi0",
        24,
        1
      ],
      [
        "srd_pair6_gpi1",
        25,
        1
      ],
      [
        "srd_pair6_gpi2",
        26,
        1
      ],
      [
        "srd_pair6_gpi3",
        27,
        1
      ],
      [
        "srd_pair7_gpi0",
        28,
        1
      ],
      [
        "srd_pair7_gpi1",
        29,
        1
      ],
      [
        "srd_pair7_gpi2",
        30,
        1
      ],
      [
        "srd_pair7_gpi3",
        31,
        1
      ],
      [
        "srd_pair8_gpi0",
        32,
        1
      ],
      [
        "srd_pair8_gpi1",
        33,
        1
      ],
      [
        "srd_pair8_gpi2",
        34,
        1
      ],
      [
        "srd_pair8_gpi3",
        35,
        1
      ],
      [
        "srd_pair9_gpi0",
        36,
        1
      ],
      [
        "srd_pair9_gpi1",
        37,
        1
      ],
      [
        "srd_pair9_gpi2",
        38,
        1
      ],
      [
        "srd_pair9_gpi3",
        39,
        1
      ],
      [
        "srd_pair10_gpi0",
        40,
        1
      ],
      [
        "srd_pair10_gpi1",
        41,
        1
      ],
      [
        "srd_pair10_gpi2",
        42,
        1
      ],
      [
        "srd_pair10_gpi3",
        43,
        1
      ],
      [
        "srd_pair11_gpi0",
        44,
        1
      ],
      [
        "srd_pair11_gpi1",
        45,
        1
      ],
      [
        "srd_pair11_gpi2",
        46,
        1
      ],
      [
        "srd_pair11_gpi3",
        47,
        1
      ]
    ]
  },
  "serdes_pool24_gpo_read_reg": {
    "type": "register",
    "block": "serdes_pool24",
    "width": 48,
    "desc": "Read Credo GPO",
    "fields": [
      [
        "srd_pair0_gpo0",
        0,
        1
      ],
      [
        "srd_pair0_gpo1",
        1,
        1
      ],
      [
        "srd_pair0_gpo2",
        2,
        1
      ],
      [
        "srd_pair0_gpo3",
        3,
        1
      ],
      [
        "srd_pair1_gpo0",
        4,
        1
      ],
      [
        "srd_pair1_gpo1",
        5,
        1
      ],
      [
        "srd_pair1_gpo2",
        6,
        1
      ],
      [
        "srd_pair1_gpo3",
        7,
        1
      ],
      [
        "srd_pair2_gpo0",
        8,
        1
      ],
      [
        "srd_pair2_gpo1",
        9,
        1
      ],
      [
        "srd_pair2_gpo2",
        10,
        1
      ],
      [
        "srd_pair2_gpo3",
        11,
        1
      ],
      [
        "srd_pair3_gpo0",
        12,
        1
      ],
      [
        "srd_pair3_gpo1",
        13,
        1
      ],
      [
        "srd_pair3_gpo2",
        14,
        1
      ],
      [
        "srd_pair3_gpo3",
        15,
        1
      ],
      [
        "srd_pair4_gpo0",
        16,
        1
      ],
      [
        "srd_pair4_gpo1",
        17,
        1
      ],
      [
        "srd_pair4_gpo2",
        18,
        1
      ],
      [
        "srd_pair4_gpo3",
        19,
        1
      ],
      [
        "srd_pair5_gpo0",
        20,
        1
      ],
      [
        "srd_pair5_gpo1",
        21,
        1
      ],
      [
        "srd_pair5_gpo2",
        22,
        1
      ],
      [
        "srd_pair5_gpo3",
        23,
        1
      ],
      [
        "srd_pair6_gpo0",
        24,
        1
      ],
      [
        "srd_pair6_gpo1",
        25,
        1
      ],
      [
        "srd_pair6_gpo2",
        26,
        1
      ],
      [
        "srd_pair6_gpo3",
        27,
        1
      ],
      [
        "srd_pair7_gpo0",
        28,
        1
      ],
      [
        "srd_pair7_gpo1",
        29,
        1
      ],
      [
        "srd_pair7_gpo2",
        30,
        1
      ],
      [
        "srd_pair7_gpo3",
        31,
        1
      ],
      [
        "srd_pair8_gpo0",
        32,
        1
      ],
      [
        "srd_pair8_gpo1",
        33,
        1
      ],
      [
        "srd_pair8_gpo2",
        34,
        1
      ],
      [
        "srd_pair8_gpo3",
        35,
        1
      ],
      [
        "srd_pair9_gpo0",
        36,
        1
      ],
      [
        "srd_pair9_gpo1",
        37,
        1
      ],
      [
        "srd_pair9_gpo2",
        38,
        1
      ],
      [
        "srd_pair9_gpo3",
        39,
        1
      ],
      [
        "srd_pair10_gpo0",
        40,
        1
      ],
      [
        "srd_pair10_gpo1",
        41,
        1
      ],
      [
        "srd_pair10_gpo2",
        42,
        1
      ],
      [
        "srd_pair10_gpo3",
        43,
        1
      ],
      [
        "srd_pair11_gpo0",
        44,
        1
      ],
      [
        "srd_pair11_gpo1",
        45,
        1
      ],
      [
        "srd_pair11_gpo2",
        46,
        1
      ],
      [
        "srd_pair11_gpo3",
        47,
        1
      ]
    ]
  },
  "flc_db_interrupt_register": {
    "type": "register",
    "block": "flc_db",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "key_const_mis_config_interrupt_summary",
        1,
        1
      ],
      [
        "nppd_err_indication_reg_summary",
        2,
        1
      ]
    ]
  },
  "flc_db_mem_protect_interrupt": {
    "type": "register",
    "block": "flc_db",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "flc_db_mem_protect_interrupt_test": {
    "type": "register",
    "block": "flc_db",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "flc_db_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "flc_db",
    "width": 21,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "cache_index_to_em_index_mem_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "cache_index_fbm_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "result_fifo_mem_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "flow_cache_verifier0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "flow_cache_verifier1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "flow_cache_verifier2_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "flow_cache_verifier3_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "flow_cache_verifier4_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "flow_cache_verifier5_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "flow_cache_verifier6_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "flow_cache_verifier7_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "flow_cache_verifier8_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "flow_cache_verifier9_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "flow_cache_verifier10_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "flow_cache_verifier11_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "flow_cache_verifier12_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "flow_cache_verifier13_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "flow_cache_verifier14_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "flow_cache_verifier15_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "flow_cache_verifier16_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "flow_cache_verifier17_ecc_1b_err_interrupt_mask",
        20,
        1
      ]
    ]
  },
  "flc_db_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "flc_db",
    "width": 21,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "cache_index_to_em_index_mem_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "cache_index_fbm_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "result_fifo_mem_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "flow_cache_verifier0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "flow_cache_verifier1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "flow_cache_verifier2_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "flow_cache_verifier3_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "flow_cache_verifier4_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "flow_cache_verifier5_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "flow_cache_verifier6_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "flow_cache_verifier7_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "flow_cache_verifier8_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "flow_cache_verifier9_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "flow_cache_verifier10_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "flow_cache_verifier11_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "flow_cache_verifier12_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "flow_cache_verifier13_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "flow_cache_verifier14_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "flow_cache_verifier15_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "flow_cache_verifier16_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "flow_cache_verifier17_ecc_2b_err_interrupt_mask",
        20,
        1
      ]
    ]
  },
  "flc_db_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "header_types_array_tcam_parity_err_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "flc_db_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "flc_db",
    "width": 21,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "cache_index_to_em_index_mem_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "cache_index_fbm_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "result_fifo_mem_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "flow_cache_verifier0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "flow_cache_verifier1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "flow_cache_verifier2_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "flow_cache_verifier3_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "flow_cache_verifier4_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "flow_cache_verifier5_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "flow_cache_verifier6_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "flow_cache_verifier7_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "flow_cache_verifier8_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "flow_cache_verifier9_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "flow_cache_verifier10_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "flow_cache_verifier11_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "flow_cache_verifier12_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "flow_cache_verifier13_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "flow_cache_verifier14_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "flow_cache_verifier15_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "flow_cache_verifier16_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "flow_cache_verifier17_ecc_1b_err_initiate",
        20,
        1
      ]
    ]
  },
  "flc_db_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "flc_db",
    "width": 21,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "cache_index_to_em_index_mem_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "cache_index_fbm_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "result_fifo_mem_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "flow_cache_verifier0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "flow_cache_verifier1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "flow_cache_verifier2_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "flow_cache_verifier3_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "flow_cache_verifier4_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "flow_cache_verifier5_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "flow_cache_verifier6_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "flow_cache_verifier7_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "flow_cache_verifier8_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "flow_cache_verifier9_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "flow_cache_verifier10_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "flow_cache_verifier11_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "flow_cache_verifier12_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "flow_cache_verifier13_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "flow_cache_verifier14_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "flow_cache_verifier15_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "flow_cache_verifier16_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "flow_cache_verifier17_ecc_2b_err_initiate",
        20,
        1
      ]
    ]
  },
  "flc_db_parity_err_initiate_register": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "header_types_array_tcam_parity_err_initiate",
        0,
        1
      ]
    ]
  },
  "flc_db_mem_protect_err_status": {
    "type": "register",
    "block": "flc_db",
    "width": 22,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "cache_index_to_em_index_mem_err_int",
        0,
        1
      ],
      [
        "cache_index_fbm_err_int",
        1,
        1
      ],
      [
        "header_types_array_tcam_err_int",
        2,
        1
      ],
      [
        "result_fifo_mem_err_int",
        3,
        1
      ],
      [
        "flow_cache_verifier0_err_int",
        4,
        1
      ],
      [
        "flow_cache_verifier1_err_int",
        5,
        1
      ],
      [
        "flow_cache_verifier2_err_int",
        6,
        1
      ],
      [
        "flow_cache_verifier3_err_int",
        7,
        1
      ],
      [
        "flow_cache_verifier4_err_int",
        8,
        1
      ],
      [
        "flow_cache_verifier5_err_int",
        9,
        1
      ],
      [
        "flow_cache_verifier6_err_int",
        10,
        1
      ],
      [
        "flow_cache_verifier7_err_int",
        11,
        1
      ],
      [
        "flow_cache_verifier8_err_int",
        12,
        1
      ],
      [
        "flow_cache_verifier9_err_int",
        13,
        1
      ],
      [
        "flow_cache_verifier10_err_int",
        14,
        1
      ],
      [
        "flow_cache_verifier11_err_int",
        15,
        1
      ],
      [
        "flow_cache_verifier12_err_int",
        16,
        1
      ],
      [
        "flow_cache_verifier13_err_int",
        17,
        1
      ],
      [
        "flow_cache_verifier14_err_int",
        18,
        1
      ],
      [
        "flow_cache_verifier15_err_int",
        19,
        1
      ],
      [
        "flow_cache_verifier16_err_int",
        20,
        1
      ],
      [
        "flow_cache_verifier17_err_int",
        21,
        1
      ]
    ]
  },
  "flc_db_selected_ser_error_info": {
    "type": "register",
    "block": "flc_db",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "flc_db_ser_error_debug_configuration": {
    "type": "register",
    "block": "flc_db",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "flc_db_ecc_1b_err_debug": {
    "type": "register",
    "block": "flc_db",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "flc_db_ecc_2b_err_debug": {
    "type": "register",
    "block": "flc_db",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "flc_db_parity_err_debug": {
    "type": "register",
    "block": "flc_db",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "flc_db_tcam_bist_control": {
    "type": "register",
    "block": "flc_db",
    "width": 4,
    "desc": "TCAM BIST control",
    "fields": [
      [
        "tcam_strw",
        0,
        2
      ],
      [
        "tcam_bist_rst",
        2,
        1
      ],
      [
        "tcam_bist_run",
        3,
        1
      ]
    ]
  },
  "flc_db_tcam_bist_status": {
    "type": "register",
    "block": "flc_db",
    "width": 2,
    "desc": "TCAM BIST pass fail status",
    "fields": [
      [
        "tcam_bist_done_pass_out",
        0,
        1
      ],
      [
        "tcam_bist_done_fail_out",
        1,
        1
      ]
    ]
  },
  "flc_db_tcam_scan_period_cfg": {
    "type": "register",
    "block": "flc_db",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "flc_db_counter_timer": {
    "type": "register",
    "block": "flc_db",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "flc_db_counter_timer_trigger_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "flc_db_memory_access_timeout": {
    "type": "register",
    "block": "flc_db",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "flc_db_broadcast_config_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "flc_db_memory_prot_bypass": {
    "type": "register",
    "block": "flc_db",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "flc_db_soft_reset_configuration": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "flc_db_mbist_configuration": {
    "type": "register",
    "block": "flc_db",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "flc_db_power_down_configuration": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "flc_db_spare_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "flc_db_pmro_ctrl": {
    "type": "register",
    "block": "flc_db",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "flc_db_pmro_status": {
    "type": "register",
    "block": "flc_db",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "flc_db_mirror_bus_conf_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "flc_db_mirror_bus_status": {
    "type": "register",
    "block": "flc_db",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "flc_db_device_time_offset_cfg": {
    "type": "register",
    "block": "flc_db",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "flc_db_map_header_type_to_mask_l": {
    "type": "register",
    "block": "flc_db",
    "width": 640,
    "desc": "Maps the format identifier header type to  a large mask. Is used for excluding large packet headers' fields from the initial flow vector.",
    "fields": [
      [
        "cache_large_mask",
        0,
        320
      ],
      [
        "queue_large_mask",
        320,
        320
      ]
    ]
  },
  "flc_db_map_header_type_to_mask_m": {
    "type": "register",
    "block": "flc_db",
    "width": 320,
    "desc": "Maps the format identifier header type to a medium mask. Is used for excluding medium packet headers' fields from the initial flow vector.",
    "fields": [
      [
        "cache_medium_mask",
        0,
        160
      ],
      [
        "queue_medium_mask",
        160,
        160
      ]
    ]
  },
  "flc_db_map_header_type_to_mask_s": {
    "type": "register",
    "block": "flc_db",
    "width": 160,
    "desc": "Maps the format identifier header type to a small mask. Is used for excluding small packet headers' fields from the initial flow vector.",
    "fields": [
      [
        "cache_small_mask",
        0,
        80
      ],
      [
        "queue_small_mask",
        80,
        80
      ]
    ]
  },
  "flc_db_map_header_type_to_mask_id_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 5,
    "desc": "Maps each protocol header type to the mask index which will use it.  Masks 0-7 will use the large masks, 8-15 medium, 16-31 small",
    "fields": [
      [
        "map_header_type_to_mask_id",
        0,
        5
      ]
    ]
  },
  "flc_db_priority_tc_bitmap_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 8,
    "desc": "Bit per traffic class, Mapps the initial traffic class into high/low priority",
    "fields": [
      [
        "priority_tc_bitmap",
        0,
        8
      ]
    ]
  },
  "flc_db_high_tc_only_th_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 14,
    "desc": "Above this threshold only high priority traffic class according to PriorityTcBitmap will be inserted to the cache",
    "fields": [
      [
        "high_tc_only_th",
        0,
        14
      ]
    ]
  },
  "flc_db_key_hash_mode": {
    "type": "register",
    "block": "flc_db",
    "width": 2,
    "desc": "Selects the key constructor hash mode for building 96 bits flow signature key from 128B packet header. 2 different primitive polynom based CRC function are used to construct the 1024bit -> 96bit conversion",
    "fields": [
      [
        "mode",
        0,
        2
      ]
    ]
  },
  "flc_db_cache_range_compression_profile": {
    "type": "register",
    "block": "flc_db",
    "width": 16,
    "desc": "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    "fields": [
      [
        "cache_src_header",
        0,
        4
      ],
      [
        "cache_src_offset",
        4,
        6
      ],
      [
        "cache_src_size",
        10,
        4
      ],
      [
        "cache_range_set",
        14,
        2
      ]
    ]
  },
  "flc_db_queue_range_compression_profile": {
    "type": "register",
    "block": "flc_db",
    "width": 16,
    "desc": "Range compression for building the initial flow vector. Used after reading the selected profile from the key construction TCAM ",
    "fields": [
      [
        "queue_src_header",
        0,
        4
      ],
      [
        "queue_src_offset",
        4,
        6
      ],
      [
        "queue_src_size",
        10,
        4
      ],
      [
        "queue_range_set",
        14,
        2
      ]
    ]
  },
  "flc_db_range_compression_ranges": {
    "type": "register",
    "block": "flc_db",
    "width": 64,
    "desc": "Range compression range limits. There are four sets of ranges, mapped according to the 2 LSBs of the range ID. Each set has 16 ranges (4 MSBs of the ID). Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    "fields": [
      [
        "cache_upper_limit",
        0,
        16
      ],
      [
        "cache_lower_limit",
        16,
        16
      ],
      [
        "queue_upper_limit",
        32,
        16
      ],
      [
        "queue_lower_limit",
        48,
        16
      ]
    ]
  },
  "flc_db_verifier_update_rate_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 32,
    "desc": "Verifier update rate",
    "fields": [
      [
        "verifier_update_rate",
        0,
        32
      ]
    ]
  },
  "flc_db_validity_check_rate_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 16,
    "desc": "Validity check rate",
    "fields": [
      [
        "validity_check_rate",
        0,
        16
      ]
    ]
  },
  "flc_db_fbm_minimal_index_amount_th_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 14,
    "desc": "The minimal amount of free buffers in the Free Buffer Manager in order to enable new flow insertion to the EM",
    "fields": [
      [
        "fbm_minimal_index_amount_th",
        0,
        14
      ]
    ]
  },
  "flc_db_emdb_cam_almost_full_th_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 7,
    "desc": "Less than his amount of free entries in the EM CAM, Write cannot be guarntied",
    "fields": [
      [
        "emdb_cam_almost_full_th",
        0,
        7
      ]
    ]
  },
  "flc_db_rcy_code_location_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 6,
    "desc": "Defines the location of the 2 bits recycle code within the recycle data. The internal structure of the recycle data (total 8 bits) is determined by the NPE on transmit stage.",
    "fields": [
      [
        "rcy_code_location_msb",
        0,
        3
      ],
      [
        "rcy_code_location_lsb",
        3,
        3
      ]
    ]
  },
  "flc_db_flc_db_pipe_credit_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 6,
    "desc": "Defines the initial credit between the keyc and the flc_db",
    "fields": [
      [
        "flc_db_pipe_credit",
        0,
        6
      ]
    ]
  },
  "flc_db_init_done_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Init done indication",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "flc_db_status_hit_miss_ratio": {
    "type": "register",
    "block": "flc_db",
    "width": 192,
    "desc": "Status register for counting the flow cache 'hit'/'miss' events. Used in order to calculate the hit/miss ratio. The Counters collects only packets which uses the cache",
    "fields": [
      [
        "hit_counter",
        0,
        64
      ],
      [
        "miss_counter",
        64,
        64
      ],
      [
        "dont_use_cache_counter",
        128,
        64
      ]
    ]
  },
  "flc_db_key_const_mis_config_interrupt": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Indicates misconfiguration of the TCAM in the key constructor. The packet hit one of the TCAMs and missed the other (Sent to the NPU). The associated TCAM entry is at DebugKeyConstMisConfig",
    "fields": [
      [
        "key_const_mis_config_int",
        0,
        1
      ]
    ]
  },
  "flc_db_key_const_mis_config_interrupt_mask": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "This register masks KeyConstMisConfigInterrupt interrupt register",
    "fields": [
      [
        "key_const_mis_config_int_mask",
        0,
        1
      ]
    ]
  },
  "flc_db_key_const_mis_config_interrupt_test": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "This register tests KeyConstMisConfigInterrupt interrupt register",
    "fields": [
      [
        "key_const_mis_config_int_test",
        0,
        1
      ]
    ]
  },
  "flc_db_debug_key_const_mis_config": {
    "type": "register",
    "block": "flc_db",
    "width": 9,
    "desc": "Indicates misconfiguration of the TCAM in the key constructor. The packet hit one of the TCAMs and missed the other (Sent to the NPU)",
    "fields": [
      [
        "key_const_mis_config_event",
        0,
        1
      ],
      [
        "key_const_mis_config_value_source",
        1,
        1
      ],
      [
        "key_const_mis_config_value",
        2,
        7
      ]
    ]
  },
  "flc_db_debug_incoming_nppd_counter": {
    "type": "register",
    "block": "flc_db",
    "width": 64,
    "desc": "Counting the number of incoming NPPDs ",
    "fields": [
      [
        "debug_incoming_nppd",
        0,
        64
      ]
    ]
  },
  "flc_db_debug_outgoing_ctxt_to_fi_q_counter": {
    "type": "register",
    "block": "flc_db",
    "width": 64,
    "desc": "Counting the number of outgoing  RxPP contexts towards the FI queues",
    "fields": [
      [
        "debug_outgoing_ctxt_to_fi_q",
        0,
        64
      ]
    ]
  },
  "flc_db_debug_outgoing_nppd_counter": {
    "type": "register",
    "block": "flc_db",
    "width": 64,
    "desc": "Counting the number of outgoing  NPPDs from the flc_db",
    "fields": [
      [
        "debug_outgoing_nppd",
        0,
        64
      ]
    ]
  },
  "flc_db_debug_result_fifo_status_counter": {
    "type": "register",
    "block": "flc_db",
    "width": 12,
    "desc": "Reflecting the fullness level of the result FIFO",
    "fields": [
      [
        "debug_result_fifo_status",
        0,
        6
      ],
      [
        "debug_result_fifo_status_wm",
        6,
        6
      ]
    ]
  },
  "flc_db_debug_keyc_to_db_credit_counter": {
    "type": "register",
    "block": "flc_db",
    "width": 6,
    "desc": "Reflecting the credit between the flc_keyc to the flc_db",
    "fields": [
      [
        "debug_keyc_to_db_credit",
        0,
        6
      ]
    ]
  },
  "flc_db_debug_keyc_to_db_credit_not_ready_counter": {
    "type": "register",
    "block": "flc_db",
    "width": 48,
    "desc": "Counts the number of cycles in which the flc_keyc had no credit towards the flc_db",
    "fields": [
      [
        "debug_keyc_to_db_credit_not_ready",
        0,
        48
      ]
    ]
  },
  "flc_db_debug_remove_cache_index_counter": {
    "type": "register",
    "block": "flc_db",
    "width": 32,
    "desc": "Counters the number of cache index remove commands received from the flc_data",
    "fields": [
      [
        "debug_remove_cache_index",
        0,
        32
      ]
    ]
  },
  "flc_db_debug_released_cache_index_counter": {
    "type": "register",
    "block": "flc_db",
    "width": 32,
    "desc": "Counters the number of cache index release commands received from the flc_queues",
    "fields": [
      [
        "debug_released_cache_index",
        0,
        32
      ]
    ]
  },
  "flc_db_event_mon_indications": {
    "type": "register",
    "block": "flc_db",
    "width": 198,
    "desc": "All Event monitor's outpus (cleared on the same read)",
    "fields": [
      [
        "event_mon_acc0",
        0,
        64
      ],
      [
        "event_mon_captured_data",
        64,
        38
      ],
      [
        "event_mon_time_of_day",
        102,
        32
      ],
      [
        "event_mon_clock_counter",
        134,
        64
      ]
    ]
  },
  "flc_db_nppd_err_indication_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Incoming NPPD was received with error indication",
    "fields": [
      [
        "nppd_err_indication",
        0,
        1
      ]
    ]
  },
  "flc_db_nppd_err_indication_reg_mask": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "This register masks NppdErrIndicationReg interrupt register",
    "fields": [
      [
        "nppd_err_indication_mask",
        0,
        1
      ]
    ]
  },
  "flc_db_nppd_err_indication_reg_test": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "This register tests NppdErrIndicationReg interrupt register",
    "fields": [
      [
        "nppd_err_indication_test",
        0,
        1
      ]
    ]
  },
  "flc_db_event_mon_enable_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 1,
    "desc": "Debug Event Monitor: Enable indication",
    "fields": [
      [
        "event_mon_enable",
        0,
        1
      ]
    ]
  },
  "flc_db_event_mon_field_mask_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 38,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "event_mon_use_cache_mask",
        0,
        1
      ],
      [
        "event_mon_packet_ctxt_mask",
        1,
        11
      ],
      [
        "event_mon_queue_index_mask",
        12,
        12
      ],
      [
        "event_mon_cache_index_mask",
        24,
        14
      ]
    ]
  },
  "flc_db_event_mon_field_part_of_and_bitmap": {
    "type": "register",
    "block": "flc_db",
    "width": 4,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'and' condition",
    "fields": [
      [
        "event_mon_use_cache_part_of_and_bitmap",
        0,
        1
      ],
      [
        "event_mon_packet_ctxt_part_of_and_bitmap",
        1,
        1
      ],
      [
        "event_mon_queue_index_part_of_and_bitmap",
        2,
        1
      ],
      [
        "event_mon_cache_index_part_of_and_bitmap",
        3,
        1
      ]
    ]
  },
  "flc_db_event_mon_field_part_of_or_bitmap": {
    "type": "register",
    "block": "flc_db",
    "width": 4,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'or' condition",
    "fields": [
      [
        "event_mon_use_cache_part_of_or_bitmap",
        0,
        1
      ],
      [
        "event_mon_packet_ctxt_part_of_or_bitmap",
        1,
        1
      ],
      [
        "event_mon_queue_index_part_of_or_bitmap",
        2,
        1
      ],
      [
        "event_mon_cache_index_part_of_or_bitmap",
        3,
        1
      ]
    ]
  },
  "flc_db_event_mon_compare_mode_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 8,
    "desc": "Event monitor compare mode register per field: 2b00 Equal, 2b01 Not equal, 2b01 Smaller than, 2b11 Greater than",
    "fields": [
      [
        "event_mon_use_cache_compare_mode",
        0,
        2
      ],
      [
        "event_mon_packet_ctxt_compare_mode",
        2,
        2
      ],
      [
        "event_mon_queue_index_compare_mode",
        4,
        2
      ],
      [
        "event_mon_cache_index_compare_mode",
        6,
        2
      ]
    ]
  },
  "flc_db_event_mon_compare_value_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 38,
    "desc": "Event monitor: The value which is compared to the masked field",
    "fields": [
      [
        "event_mon_use_cache_compare_value",
        0,
        1
      ],
      [
        "event_mon_packet_ctxt_compare_value",
        1,
        11
      ],
      [
        "event_mon_queue_index_compare_value",
        12,
        12
      ],
      [
        "event_mon_cache_index_compare_value",
        24,
        14
      ]
    ]
  },
  "flc_db_event_mon_mode_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 2,
    "desc": "Event monitor: Defines a 'hit' as 1 of 4 options between the '&' and '|' comparators: 00-only 'and'; 01-only 'or' ;10-'and'&'or; 11-'and'|'or' ",
    "fields": [
      [
        "event_mon_mode",
        0,
        2
      ]
    ]
  },
  "flc_db_last_debug_bus_sel_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 7,
    "desc": "Select for multicycle debug bus mux, according to the debug bus connectivity",
    "fields": [
      [
        "last_debug_bus_sel",
        0,
        7
      ]
    ]
  },
  "flc_db_last_debug_bus_select_out_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 32,
    "desc": "Result data after accessing the LastDebugBusSel",
    "fields": [
      [
        "last_debug_bus_select_out",
        0,
        32
      ]
    ]
  },
  "flc_db_flow_signature_crc_start_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 192,
    "desc": "Sets the start value of the flow signature CRC s",
    "fields": [
      [
        "flow_signature_crc_start0",
        0,
        96
      ],
      [
        "flow_signature_crc_start1",
        96,
        96
      ]
    ]
  },
  "flc_db_queue_index_crc_start_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 11,
    "desc": "Sets the start value of the flow signature CRC s",
    "fields": [
      [
        "queue_index_crc_start",
        0,
        11
      ]
    ]
  },
  "flc_db_flow_verifier_crc_start_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 32,
    "desc": "Sets the start value of the flow signature CRC s",
    "fields": [
      [
        "flow_verifier_crc_start0",
        0,
        16
      ],
      [
        "flow_verifier_crc_start1",
        16,
        16
      ]
    ]
  },
  "flc_db_flow_cache_per_bank_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 194,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "flow_cache_active_banks",
        0,
        1
      ],
      [
        "flow_cache_hash_key",
        1,
        192
      ],
      [
        "flow_cache_use_primitive_crc",
        193,
        1
      ]
    ]
  },
  "flc_db_flow_cache_per_em_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "flow_cache_key_width",
        0,
        16
      ],
      [
        "flow_cache_auto_bubble_req",
        16,
        1
      ],
      [
        "flow_cache_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "flc_db_flow_cache_cam_wm_max_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "flow_cache_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "flc_db_flow_cache_bank_write_cntr_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "flow_cache_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "flc_db_status_cache_occupancy_cfg": {
    "type": "register",
    "block": "flc_db",
    "width": 98,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "status_cache_occupancy_th0",
        0,
        14
      ],
      [
        "status_cache_occupancy_th1",
        14,
        14
      ],
      [
        "status_cache_occupancy_th2",
        28,
        14
      ],
      [
        "status_cache_occupancy_th3",
        42,
        14
      ],
      [
        "status_cache_occupancy_th4",
        56,
        14
      ],
      [
        "status_cache_occupancy_th5",
        70,
        14
      ],
      [
        "status_cache_occupancy_th6",
        84,
        14
      ]
    ]
  },
  "flc_db_status_cache_occupancy_status": {
    "type": "register",
    "block": "flc_db",
    "width": 520,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "status_cache_occupancy_value0",
        0,
        64
      ],
      [
        "status_cache_occupancy_overflow0",
        64,
        1
      ],
      [
        "status_cache_occupancy_value1",
        65,
        64
      ],
      [
        "status_cache_occupancy_overflow1",
        129,
        1
      ],
      [
        "status_cache_occupancy_value2",
        130,
        64
      ],
      [
        "status_cache_occupancy_overflow2",
        194,
        1
      ],
      [
        "status_cache_occupancy_value3",
        195,
        64
      ],
      [
        "status_cache_occupancy_overflow3",
        259,
        1
      ],
      [
        "status_cache_occupancy_value4",
        260,
        64
      ],
      [
        "status_cache_occupancy_overflow4",
        324,
        1
      ],
      [
        "status_cache_occupancy_value5",
        325,
        64
      ],
      [
        "status_cache_occupancy_overflow5",
        389,
        1
      ],
      [
        "status_cache_occupancy_value6",
        390,
        64
      ],
      [
        "status_cache_occupancy_overflow6",
        454,
        1
      ],
      [
        "status_cache_occupancy_value7",
        455,
        64
      ],
      [
        "status_cache_occupancy_overflow7",
        519,
        1
      ]
    ]
  },
  "flc_db_status_cache_occupancy_max_wmk_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 46,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "status_cache_occupancy_max_wmk",
        0,
        14
      ],
      [
        "status_cache_occupancy_max_wmk_time",
        14,
        32
      ]
    ]
  },
  "flc_db_status_first_to_second_pkt_latency_cfg": {
    "type": "register",
    "block": "flc_db",
    "width": 224,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "status_first_to_second_pkt_latency_th0",
        0,
        32
      ],
      [
        "status_first_to_second_pkt_latency_th1",
        32,
        32
      ],
      [
        "status_first_to_second_pkt_latency_th2",
        64,
        32
      ],
      [
        "status_first_to_second_pkt_latency_th3",
        96,
        32
      ],
      [
        "status_first_to_second_pkt_latency_th4",
        128,
        32
      ],
      [
        "status_first_to_second_pkt_latency_th5",
        160,
        32
      ],
      [
        "status_first_to_second_pkt_latency_th6",
        192,
        32
      ]
    ]
  },
  "flc_db_status_first_to_second_pkt_latency_status": {
    "type": "register",
    "block": "flc_db",
    "width": 520,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "status_first_to_second_pkt_latency_value0",
        0,
        64
      ],
      [
        "status_first_to_second_pkt_latency_overflow0",
        64,
        1
      ],
      [
        "status_first_to_second_pkt_latency_value1",
        65,
        64
      ],
      [
        "status_first_to_second_pkt_latency_overflow1",
        129,
        1
      ],
      [
        "status_first_to_second_pkt_latency_value2",
        130,
        64
      ],
      [
        "status_first_to_second_pkt_latency_overflow2",
        194,
        1
      ],
      [
        "status_first_to_second_pkt_latency_value3",
        195,
        64
      ],
      [
        "status_first_to_second_pkt_latency_overflow3",
        259,
        1
      ],
      [
        "status_first_to_second_pkt_latency_value4",
        260,
        64
      ],
      [
        "status_first_to_second_pkt_latency_overflow4",
        324,
        1
      ],
      [
        "status_first_to_second_pkt_latency_value5",
        325,
        64
      ],
      [
        "status_first_to_second_pkt_latency_overflow5",
        389,
        1
      ],
      [
        "status_first_to_second_pkt_latency_value6",
        390,
        64
      ],
      [
        "status_first_to_second_pkt_latency_overflow6",
        454,
        1
      ],
      [
        "status_first_to_second_pkt_latency_value7",
        455,
        64
      ],
      [
        "status_first_to_second_pkt_latency_overflow7",
        519,
        1
      ]
    ]
  },
  "flc_db_status_first_to_second_pkt_latency_max_wmk_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 64,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "status_first_to_second_pkt_latency_max_wmk",
        0,
        32
      ],
      [
        "status_first_to_second_pkt_latency_max_wmk_time",
        32,
        32
      ]
    ]
  },
  "flc_db_status_new_flows_rate_cfg": {
    "type": "register",
    "block": "flc_db",
    "width": 122,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "status_new_flows_rate_th0",
        0,
        15
      ],
      [
        "status_new_flows_rate_th1",
        15,
        15
      ],
      [
        "status_new_flows_rate_th2",
        30,
        15
      ],
      [
        "status_new_flows_rate_th3",
        45,
        15
      ],
      [
        "status_new_flows_rate_th4",
        60,
        15
      ],
      [
        "status_new_flows_rate_th5",
        75,
        15
      ],
      [
        "status_new_flows_rate_th6",
        90,
        15
      ],
      [
        "status_new_flows_rate_time_interval",
        105,
        17
      ]
    ]
  },
  "flc_db_status_new_flows_rate_status": {
    "type": "register",
    "block": "flc_db",
    "width": 520,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "status_new_flows_rate_value0",
        0,
        64
      ],
      [
        "status_new_flows_rate_overflow0",
        64,
        1
      ],
      [
        "status_new_flows_rate_value1",
        65,
        64
      ],
      [
        "status_new_flows_rate_overflow1",
        129,
        1
      ],
      [
        "status_new_flows_rate_value2",
        130,
        64
      ],
      [
        "status_new_flows_rate_overflow2",
        194,
        1
      ],
      [
        "status_new_flows_rate_value3",
        195,
        64
      ],
      [
        "status_new_flows_rate_overflow3",
        259,
        1
      ],
      [
        "status_new_flows_rate_value4",
        260,
        64
      ],
      [
        "status_new_flows_rate_overflow4",
        324,
        1
      ],
      [
        "status_new_flows_rate_value5",
        325,
        64
      ],
      [
        "status_new_flows_rate_overflow5",
        389,
        1
      ],
      [
        "status_new_flows_rate_value6",
        390,
        64
      ],
      [
        "status_new_flows_rate_overflow6",
        454,
        1
      ],
      [
        "status_new_flows_rate_value7",
        455,
        64
      ],
      [
        "status_new_flows_rate_overflow7",
        519,
        1
      ]
    ]
  },
  "flc_db_status_new_flows_rate_max_wmk_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 47,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "status_new_flows_rate_max_wmk",
        0,
        15
      ],
      [
        "status_new_flows_rate_max_wmk_time",
        15,
        32
      ]
    ]
  },
  "flc_db_debug_flow_hash_efficiency_cfg": {
    "type": "register",
    "block": "flc_db",
    "width": 672,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "debug_flow_hash_efficiency_th0",
        0,
        96
      ],
      [
        "debug_flow_hash_efficiency_th1",
        96,
        96
      ],
      [
        "debug_flow_hash_efficiency_th2",
        192,
        96
      ],
      [
        "debug_flow_hash_efficiency_th3",
        288,
        96
      ],
      [
        "debug_flow_hash_efficiency_th4",
        384,
        96
      ],
      [
        "debug_flow_hash_efficiency_th5",
        480,
        96
      ],
      [
        "debug_flow_hash_efficiency_th6",
        576,
        96
      ]
    ]
  },
  "flc_db_debug_flow_hash_efficiency_status": {
    "type": "register",
    "block": "flc_db",
    "width": 520,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "debug_flow_hash_efficiency_value0",
        0,
        64
      ],
      [
        "debug_flow_hash_efficiency_overflow0",
        64,
        1
      ],
      [
        "debug_flow_hash_efficiency_value1",
        65,
        64
      ],
      [
        "debug_flow_hash_efficiency_overflow1",
        129,
        1
      ],
      [
        "debug_flow_hash_efficiency_value2",
        130,
        64
      ],
      [
        "debug_flow_hash_efficiency_overflow2",
        194,
        1
      ],
      [
        "debug_flow_hash_efficiency_value3",
        195,
        64
      ],
      [
        "debug_flow_hash_efficiency_overflow3",
        259,
        1
      ],
      [
        "debug_flow_hash_efficiency_value4",
        260,
        64
      ],
      [
        "debug_flow_hash_efficiency_overflow4",
        324,
        1
      ],
      [
        "debug_flow_hash_efficiency_value5",
        325,
        64
      ],
      [
        "debug_flow_hash_efficiency_overflow5",
        389,
        1
      ],
      [
        "debug_flow_hash_efficiency_value6",
        390,
        64
      ],
      [
        "debug_flow_hash_efficiency_overflow6",
        454,
        1
      ],
      [
        "debug_flow_hash_efficiency_value7",
        455,
        64
      ],
      [
        "debug_flow_hash_efficiency_overflow7",
        519,
        1
      ]
    ]
  },
  "flc_db_debug_flow_hash_efficiency_max_wmk_reg": {
    "type": "register",
    "block": "flc_db",
    "width": 128,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "debug_flow_hash_efficiency_max_wmk",
        0,
        96
      ],
      [
        "debug_flow_hash_efficiency_max_wmk_time",
        96,
        32
      ]
    ]
  },
  "flc_db_cache_index_to_em_index_mem": {
    "type": "memory",
    "block": "flc_db",
    "width": 16,
    "desc": "Mapping each cache index to the EM index in which it is located",
    "fields": [
      [
        "cache_index_to_em_index",
        0,
        16
      ]
    ]
  },
  "flc_db_cache_index_fbm": {
    "type": "memory",
    "block": "flc_db",
    "width": 128,
    "desc": "Bitmap for managing the cache indices. Used by the free-buffer-manager in order to allocate cache indices to the EM database (as payload)",
    "fields": [
      [
        "cache_index_fbm_bitmap",
        0,
        128
      ]
    ]
  },
  "flc_db_header_types_array_tcam": {
    "type": "memory",
    "block": "flc_db",
    "width": 73,
    "desc": "TCAM for finding the flow cache control bits per header types concatenated array. Accessed with the full header types array.",
    "fields": [
      [
        "header_types_array_tcam_key",
        0,
        73
      ],
      [
        "header_types_array_tcam_delete",
        73,
        1
      ]
    ]
  },
  "flc_db_header_types_array_payload": {
    "type": "memory",
    "block": "flc_db",
    "width": 25,
    "desc": "Holds the payload for HeaderTypesArrayTcam. Flow cache control bits per header types concatenated array. ",
    "fields": [
      [
        "use_cache",
        0,
        1
      ],
      [
        "range_compression_valid0",
        1,
        1
      ],
      [
        "range_compression_valid1",
        2,
        1
      ],
      [
        "range_compression_valid2",
        3,
        1
      ],
      [
        "range_compression_valid3",
        4,
        1
      ],
      [
        "range_compression_profile_sel0",
        5,
        5
      ],
      [
        "range_compression_profile_sel1",
        10,
        5
      ],
      [
        "range_compression_profile_sel2",
        15,
        5
      ],
      [
        "range_compression_profile_sel3",
        20,
        5
      ]
    ]
  },
  "flc_db_result_fifo_mem": {
    "type": "memory",
    "block": "flc_db",
    "width": 1323,
    "desc": "Contains the proccessed NPPDs",
    "fields": [
      [
        "nppd",
        0,
        1323
      ]
    ]
  },
  "flc_db_flow_cache_verifier": {
    "type": "memory",
    "block": "flc_db",
    "width": 136,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "flow_cache_verifier_data",
        0,
        136
      ]
    ]
  },
  "flc_db_flow_cache_valid": {
    "type": "memory",
    "block": "flc_db",
    "width": 1,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "flow_cache_valid_data",
        0,
        1
      ]
    ]
  },
  "flc_db_flow_cache_cam": {
    "type": "memory",
    "block": "flc_db",
    "width": 96,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "flow_cache_cam_payload",
        0,
        41
      ],
      [
        "flow_cache_cam_key",
        41,
        96
      ],
      [
        "flow_cache_cam_valid",
        137,
        1
      ]
    ]
  },
  "flc_queues_interrupt_register": {
    "type": "register",
    "block": "flc_queues",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "validity_check_failre_interrupt_reg_summary",
        1,
        1
      ],
      [
        "payload_err_indication_reg_summary",
        2,
        1
      ]
    ]
  },
  "flc_queues_mem_protect_interrupt": {
    "type": "register",
    "block": "flc_queues",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "flc_queues_mem_protect_interrupt_test": {
    "type": "register",
    "block": "flc_queues",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "flc_queues_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "flc_queues",
    "width": 11,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "aging_flow_cache_memory_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "queues_tail_memory_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "queues_head_memory0_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "queues_head_memory1_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "queues_link_list_memory_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "flc_data_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "queues_ctxt_to_cache_index_memory_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "queues_ctxt_to_cache_index_sec_memory_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "in_queue_cache_index_memory0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "in_queue_cache_index_memory1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "queues_ctxt_to_queue_index_memory_ecc_1b_err_interrupt_mask",
        10,
        1
      ]
    ]
  },
  "flc_queues_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "flc_queues",
    "width": 11,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "aging_flow_cache_memory_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "queues_tail_memory_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "queues_head_memory0_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "queues_head_memory1_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "queues_link_list_memory_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "flc_data_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "queues_ctxt_to_cache_index_memory_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "queues_ctxt_to_cache_index_sec_memory_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "in_queue_cache_index_memory0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "in_queue_cache_index_memory1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "queues_ctxt_to_queue_index_memory_ecc_2b_err_interrupt_mask",
        10,
        1
      ]
    ]
  },
  "flc_queues_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "flc_queues",
    "width": 11,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "aging_flow_cache_memory_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "queues_tail_memory_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "queues_head_memory0_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "queues_head_memory1_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "queues_link_list_memory_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "flc_data_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "queues_ctxt_to_cache_index_memory_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "queues_ctxt_to_cache_index_sec_memory_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "in_queue_cache_index_memory0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "in_queue_cache_index_memory1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "queues_ctxt_to_queue_index_memory_ecc_1b_err_initiate",
        10,
        1
      ]
    ]
  },
  "flc_queues_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "flc_queues",
    "width": 11,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "aging_flow_cache_memory_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "queues_tail_memory_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "queues_head_memory0_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "queues_head_memory1_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "queues_link_list_memory_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "flc_data_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "queues_ctxt_to_cache_index_memory_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "queues_ctxt_to_cache_index_sec_memory_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "in_queue_cache_index_memory0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "in_queue_cache_index_memory1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "queues_ctxt_to_queue_index_memory_ecc_2b_err_initiate",
        10,
        1
      ]
    ]
  },
  "flc_queues_mem_protect_err_status": {
    "type": "register",
    "block": "flc_queues",
    "width": 11,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "aging_flow_cache_memory_err_int",
        0,
        1
      ],
      [
        "queues_tail_memory_err_int",
        1,
        1
      ],
      [
        "queues_head_memory0_err_int",
        2,
        1
      ],
      [
        "queues_head_memory1_err_int",
        3,
        1
      ],
      [
        "queues_link_list_memory_err_int",
        4,
        1
      ],
      [
        "flc_data_err_int",
        5,
        1
      ],
      [
        "queues_ctxt_to_cache_index_memory_err_int",
        6,
        1
      ],
      [
        "queues_ctxt_to_cache_index_sec_memory_err_int",
        7,
        1
      ],
      [
        "in_queue_cache_index_memory0_err_int",
        8,
        1
      ],
      [
        "in_queue_cache_index_memory1_err_int",
        9,
        1
      ],
      [
        "queues_ctxt_to_queue_index_memory_err_int",
        10,
        1
      ]
    ]
  },
  "flc_queues_selected_ser_error_info": {
    "type": "register",
    "block": "flc_queues",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "flc_queues_ser_error_debug_configuration": {
    "type": "register",
    "block": "flc_queues",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "flc_queues_ecc_1b_err_debug": {
    "type": "register",
    "block": "flc_queues",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "flc_queues_ecc_2b_err_debug": {
    "type": "register",
    "block": "flc_queues",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "flc_queues_counter_timer": {
    "type": "register",
    "block": "flc_queues",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "flc_queues_counter_timer_trigger_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "flc_queues_memory_access_timeout": {
    "type": "register",
    "block": "flc_queues",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "flc_queues_broadcast_config_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "flc_queues_memory_prot_bypass": {
    "type": "register",
    "block": "flc_queues",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "flc_queues_soft_reset_configuration": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "flc_queues_mbist_configuration": {
    "type": "register",
    "block": "flc_queues",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "flc_queues_power_down_configuration": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "flc_queues_spare_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "flc_queues_pmro_ctrl": {
    "type": "register",
    "block": "flc_queues",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "flc_queues_pmro_status": {
    "type": "register",
    "block": "flc_queues",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "flc_queues_mirror_bus_conf_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "flc_queues_mirror_bus_status": {
    "type": "register",
    "block": "flc_queues",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "flc_queues_device_time_offset_cfg": {
    "type": "register",
    "block": "flc_queues",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "flc_queues_data_aging_cycle": {
    "type": "register",
    "block": "flc_queues",
    "width": 64,
    "desc": "Defines the againg cycle of the flow cache data. ",
    "fields": [
      [
        "data_aging_cycle_value",
        0,
        32
      ],
      [
        "data_activity_aging_cycle_value",
        32,
        32
      ]
    ]
  },
  "flc_queues_data_random_delete": {
    "type": "register",
    "block": "flc_queues",
    "width": 16,
    "desc": "Defines the probability to perfom random delete",
    "fields": [
      [
        "data_random_delete_th",
        0,
        16
      ]
    ]
  },
  "flc_queues_disable_ser_packets_removal_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "Disables the logic which removes from the flow cahce entries which their PD arrived with SER inidication from the RxPP",
    "fields": [
      [
        "disable_ser_packets_removal",
        0,
        1
      ]
    ]
  },
  "flc_queues_init_done_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "Init done indication",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "flc_queues_validity_check_failre_conuter_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 32,
    "desc": "Validity check failure counter",
    "fields": [
      [
        "validity_check_failuer_conuter",
        0,
        32
      ]
    ]
  },
  "flc_queues_validity_check_failre_interrupt_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "Validity check failure indication",
    "fields": [
      [
        "validity_check_failuer_interrupt",
        0,
        1
      ]
    ]
  },
  "flc_queues_validity_check_failre_interrupt_reg_mask": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "This register masks ValidityCheckFailreInterruptReg interrupt register",
    "fields": [
      [
        "validity_check_failuer_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "flc_queues_validity_check_failre_interrupt_reg_test": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "This register tests ValidityCheckFailreInterruptReg interrupt register",
    "fields": [
      [
        "validity_check_failuer_interrupt_test",
        0,
        1
      ]
    ]
  },
  "flc_queues_cache_index_remove_latency_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 8,
    "desc": "Defines the amount of clock cycles between remove command and the actual removel from the EMDB. Sets the minmal amount of cycles between 2 consecutive remove commands.",
    "fields": [
      [
        "cache_index_remove_latency",
        0,
        8
      ]
    ]
  },
  "flc_queues_queues_incoming_delay_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 5,
    "desc": "Deinfes the amount of clock cycles incoming packet is delayed when entering the flow queues. The configurable delay is required when SNA outputs should be ready before the flow cache queues transmit a packet (e.g SLB slice). Maximal delay is 80 clock cycles.",
    "fields": [
      [
        "queues_incoming_delay",
        0,
        5
      ]
    ]
  },
  "flc_queues_status_amount_of_active_queues": {
    "type": "register",
    "block": "flc_queues",
    "width": 36,
    "desc": "Status register which reflects the amount of currently active queues",
    "fields": [
      [
        "amount_of_active_queues",
        0,
        12
      ],
      [
        "amount_of_active_queues_min_wm",
        12,
        12
      ],
      [
        "amount_of_active_queues_max_wm",
        24,
        12
      ]
    ]
  },
  "flc_queues_debug_incoming_ctxt_counter_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 64,
    "desc": "Aggregated amount of incoming packet contexts",
    "fields": [
      [
        "debug_incoming_ctxt_counter",
        0,
        64
      ]
    ]
  },
  "flc_queues_debug_outgoing_ctxt_counter_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 64,
    "desc": "Aggregated amount of outgoing packet contexts",
    "fields": [
      [
        "debug_outgoing_ctxt_counter",
        0,
        64
      ]
    ]
  },
  "flc_queues_debug_output_fifo_fullness_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 16,
    "desc": "Reflects the fullness status of the output stgae for IFG0/1",
    "fields": [
      [
        "debug_output_fifo0_fullness",
        0,
        4
      ],
      [
        "debug_output_fifo0_fullness_wm",
        4,
        4
      ],
      [
        "debug_output_fifo1_fullness",
        8,
        4
      ],
      [
        "debug_output_fifo1_fullness_wm",
        12,
        4
      ]
    ]
  },
  "flc_queues_debug_output_stage_back_pressure_counter_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 64,
    "desc": "Counts the number of cycles in which the output stage of IFG0/1 was ready to transmit and the RxPP didn't pull the ctxt",
    "fields": [
      [
        "debug_output_stage_back_pressure_counter0",
        0,
        32
      ],
      [
        "debug_output_stage_back_pressure_counter1",
        32,
        32
      ]
    ]
  },
  "flc_queues_payload_err_indication_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "Indicates that the payload arrived from the RxPP had error indication asserted on it",
    "fields": [
      [
        "payload_err_indication",
        0,
        1
      ]
    ]
  },
  "flc_queues_payload_err_indication_reg_mask": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "This register masks PayloadErrIndicationReg interrupt register",
    "fields": [
      [
        "payload_err_indication_mask",
        0,
        1
      ]
    ]
  },
  "flc_queues_payload_err_indication_reg_test": {
    "type": "register",
    "block": "flc_queues",
    "width": 1,
    "desc": "This register tests PayloadErrIndicationReg interrupt register",
    "fields": [
      [
        "payload_err_indication_test",
        0,
        1
      ]
    ]
  },
  "flc_queues_debug_queue_fullness_index_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 12,
    "desc": "Configures one queue index on which the fullness will be monitored",
    "fields": [
      [
        "debug_queue_fullness_index",
        0,
        12
      ]
    ]
  },
  "flc_queues_debug_queue_fullness_status_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 24,
    "desc": "Reflects the fullness of one configurable queue index (DebugQueueFullnessIndex).  When this regiser is read by the CPU the index configured in DebugQueueFullnessIndex is start being monitored for its fullness (starting from fullness=0)",
    "fields": [
      [
        "debug_queue_fullness_status",
        0,
        12
      ],
      [
        "debug_queue_fullness_wm",
        12,
        12
      ]
    ]
  },
  "flc_queues_max_device_time_value_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 32,
    "desc": "Sets the maximal value or the device time",
    "fields": [
      [
        "max_device_time_value",
        0,
        32
      ]
    ]
  },
  "flc_queues_last_debug_bus_sel_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 7,
    "desc": "Select for multicycle debug bus mux, according to the debug bus connectivity",
    "fields": [
      [
        "last_debug_bus_sel",
        0,
        7
      ]
    ]
  },
  "flc_queues_last_debug_bus_select_out_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 32,
    "desc": "Result data after accessing the LastDebugBusSel",
    "fields": [
      [
        "last_debug_bus_select_out",
        0,
        32
      ]
    ]
  },
  "flc_queues_debug_remove_scan_latency_cfg": {
    "type": "register",
    "block": "flc_queues",
    "width": 112,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "debug_remove_scan_latency_th0",
        0,
        16
      ],
      [
        "debug_remove_scan_latency_th1",
        16,
        16
      ],
      [
        "debug_remove_scan_latency_th2",
        32,
        16
      ],
      [
        "debug_remove_scan_latency_th3",
        48,
        16
      ],
      [
        "debug_remove_scan_latency_th4",
        64,
        16
      ],
      [
        "debug_remove_scan_latency_th5",
        80,
        16
      ],
      [
        "debug_remove_scan_latency_th6",
        96,
        16
      ]
    ]
  },
  "flc_queues_debug_remove_scan_latency_status": {
    "type": "register",
    "block": "flc_queues",
    "width": 136,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "debug_remove_scan_latency_value0",
        0,
        16
      ],
      [
        "debug_remove_scan_latency_overflow0",
        16,
        1
      ],
      [
        "debug_remove_scan_latency_value1",
        17,
        16
      ],
      [
        "debug_remove_scan_latency_overflow1",
        33,
        1
      ],
      [
        "debug_remove_scan_latency_value2",
        34,
        16
      ],
      [
        "debug_remove_scan_latency_overflow2",
        50,
        1
      ],
      [
        "debug_remove_scan_latency_value3",
        51,
        16
      ],
      [
        "debug_remove_scan_latency_overflow3",
        67,
        1
      ],
      [
        "debug_remove_scan_latency_value4",
        68,
        16
      ],
      [
        "debug_remove_scan_latency_overflow4",
        84,
        1
      ],
      [
        "debug_remove_scan_latency_value5",
        85,
        16
      ],
      [
        "debug_remove_scan_latency_overflow5",
        101,
        1
      ],
      [
        "debug_remove_scan_latency_value6",
        102,
        16
      ],
      [
        "debug_remove_scan_latency_overflow6",
        118,
        1
      ],
      [
        "debug_remove_scan_latency_value7",
        119,
        16
      ],
      [
        "debug_remove_scan_latency_overflow7",
        135,
        1
      ]
    ]
  },
  "flc_queues_debug_remove_scan_latency_max_wmk_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 48,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "debug_remove_scan_latency_max_wmk",
        0,
        16
      ],
      [
        "debug_remove_scan_latency_max_wmk_time",
        16,
        32
      ]
    ]
  },
  "flc_queues_debug_cache_total_latency_cfg": {
    "type": "register",
    "block": "flc_queues",
    "width": 84,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "debug_cache_total_latency_th0",
        0,
        12
      ],
      [
        "debug_cache_total_latency_th1",
        12,
        12
      ],
      [
        "debug_cache_total_latency_th2",
        24,
        12
      ],
      [
        "debug_cache_total_latency_th3",
        36,
        12
      ],
      [
        "debug_cache_total_latency_th4",
        48,
        12
      ],
      [
        "debug_cache_total_latency_th5",
        60,
        12
      ],
      [
        "debug_cache_total_latency_th6",
        72,
        12
      ]
    ]
  },
  "flc_queues_debug_cache_total_latency_status": {
    "type": "register",
    "block": "flc_queues",
    "width": 392,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "debug_cache_total_latency_value0",
        0,
        48
      ],
      [
        "debug_cache_total_latency_overflow0",
        48,
        1
      ],
      [
        "debug_cache_total_latency_value1",
        49,
        48
      ],
      [
        "debug_cache_total_latency_overflow1",
        97,
        1
      ],
      [
        "debug_cache_total_latency_value2",
        98,
        48
      ],
      [
        "debug_cache_total_latency_overflow2",
        146,
        1
      ],
      [
        "debug_cache_total_latency_value3",
        147,
        48
      ],
      [
        "debug_cache_total_latency_overflow3",
        195,
        1
      ],
      [
        "debug_cache_total_latency_value4",
        196,
        48
      ],
      [
        "debug_cache_total_latency_overflow4",
        244,
        1
      ],
      [
        "debug_cache_total_latency_value5",
        245,
        48
      ],
      [
        "debug_cache_total_latency_overflow5",
        293,
        1
      ],
      [
        "debug_cache_total_latency_value6",
        294,
        48
      ],
      [
        "debug_cache_total_latency_overflow6",
        342,
        1
      ],
      [
        "debug_cache_total_latency_value7",
        343,
        48
      ],
      [
        "debug_cache_total_latency_overflow7",
        391,
        1
      ]
    ]
  },
  "flc_queues_debug_cache_total_latency_max_wmk_reg": {
    "type": "register",
    "block": "flc_queues",
    "width": 44,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "debug_cache_total_latency_max_wmk",
        0,
        12
      ],
      [
        "debug_cache_total_latency_max_wmk_time",
        12,
        32
      ]
    ]
  },
  "flc_queues_aging_flow_cache_memory": {
    "type": "memory",
    "block": "flc_queues",
    "width": 128,
    "desc": "Holds 2 bit per cache index which defines the aging cycle in which the flow is inserted to the cache.",
    "fields": [
      [
        "aging_flow_cache_bitmap",
        0,
        128
      ]
    ]
  },
  "flc_queues_queues_tail_memory": {
    "type": "memory",
    "block": "flc_queues",
    "width": 11,
    "desc": "Holds per queue-index the last packet-ctxt in the queue.",
    "fields": [
      [
        "tail",
        0,
        11
      ]
    ]
  },
  "flc_queues_queues_head_memory": {
    "type": "memory",
    "block": "flc_queues",
    "width": 11,
    "desc": "Holds per queue-index the first packet-ctxt in the queue.",
    "fields": [
      [
        "head",
        0,
        11
      ]
    ]
  },
  "flc_queues_queues_link_list_memory": {
    "type": "memory",
    "block": "flc_queues",
    "width": 11,
    "desc": "Holds per packet-ctxt its next-packet-ctxt.",
    "fields": [
      [
        "next_ctxt",
        0,
        11
      ]
    ]
  },
  "flc_queues_flc_data": {
    "type": "memory",
    "block": "flc_queues",
    "width": 643,
    "desc": "Flow-cache-data holds the NPU resolved data of each flow-cache-entry",
    "fields": [
      [
        "ecn",
        0,
        1
      ],
      [
        "flc_data_rxpp_pd",
        1,
        258
      ],
      [
        "flc_data_npu_header",
        259,
        384
      ]
    ]
  },
  "flc_queues_queues_ctxt_to_cache_index_memory": {
    "type": "memory",
    "block": "flc_queues",
    "width": 14,
    "desc": "Holds the cache-index of each packet-ctxt. Main context to cache index memory.",
    "fields": [
      [
        "cache_index",
        0,
        14
      ]
    ]
  },
  "flc_queues_queues_ctxt_to_cache_index_sec_memory": {
    "type": "memory",
    "block": "flc_queues",
    "width": 14,
    "desc": "Holds the cache-index of each packet-ctxt. Secondery context to cache index memory.",
    "fields": [
      [
        "sec_cache_index",
        0,
        14
      ]
    ]
  },
  "flc_queues_in_queue_cache_index_memory": {
    "type": "memory",
    "block": "flc_queues",
    "width": 112,
    "desc": "Holds the existing cache indexes in the queue. The memory is used in order to assure that when removing a cache index it doesn't have pending packets in the queue. 2 different memories are used, 1 per IFG, for assuring bandwidth over the memories ports.",
    "fields": [
      [
        "cache_index_arr",
        0,
        112
      ]
    ]
  },
  "flc_queues_queues_ctxt_to_queue_index_memory": {
    "type": "memory",
    "block": "flc_queues",
    "width": 12,
    "desc": "Holds the queue-index of each packet-ctxt. ",
    "fields": [
      [
        "queue_index",
        0,
        12
      ]
    ]
  },
  "idb_encdb_interrupt_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "em_response_interrupt_summary",
        1,
        1
      ]
    ]
  },
  "idb_encdb_mem_protect_interrupt": {
    "type": "register",
    "block": "idb_encdb",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "idb_encdb_mem_protect_interrupt_test": {
    "type": "register",
    "block": "idb_encdb",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "idb_encdb_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "idb_encdb",
    "width": 24,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "slice0_dip_index_mapping_table_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "slice1_dip_index_mapping_table_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "slice0_l3_dlp1_table_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "slice1_l3_dlp1_table_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "slice0_direct0_nh_table_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "slice1_direct0_nh_table_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "slice0_direct1_adj_table_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "slice1_direct1_adj_table_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "small_enc_table_verifier0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "small_enc_table_verifier1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "small_enc_table_verifier2_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "small_enc_table_verifier3_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "l3_dlp0_table_verifier0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "l3_dlp0_table_verifier1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "l3_dlp0_table_verifier2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "l3_dlp0_table_verifier3_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "large_enc_verifier0_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "large_enc_verifier1_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "large_enc_verifier2_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "large_enc_verifier3_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "large_enc_verifier4_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "large_enc_verifier5_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "large_enc_verifier6_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "large_enc_verifier7_ecc_1b_err_interrupt_mask",
        23,
        1
      ]
    ]
  },
  "idb_encdb_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "idb_encdb",
    "width": 24,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "slice0_dip_index_mapping_table_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "slice1_dip_index_mapping_table_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "slice0_l3_dlp1_table_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "slice1_l3_dlp1_table_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "slice0_direct0_nh_table_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "slice1_direct0_nh_table_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "slice0_direct1_adj_table_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "slice1_direct1_adj_table_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "small_enc_table_verifier0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "small_enc_table_verifier1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "small_enc_table_verifier2_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "small_enc_table_verifier3_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "l3_dlp0_table_verifier0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "l3_dlp0_table_verifier1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "l3_dlp0_table_verifier2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "l3_dlp0_table_verifier3_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "large_enc_verifier0_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "large_enc_verifier1_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "large_enc_verifier2_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "large_enc_verifier3_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "large_enc_verifier4_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "large_enc_verifier5_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "large_enc_verifier6_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "large_enc_verifier7_ecc_2b_err_interrupt_mask",
        23,
        1
      ]
    ]
  },
  "idb_encdb_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 24,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "slice0_dip_index_mapping_table_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "slice1_dip_index_mapping_table_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "slice0_l3_dlp1_table_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "slice1_l3_dlp1_table_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "slice0_direct0_nh_table_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "slice1_direct0_nh_table_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "slice0_direct1_adj_table_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "slice1_direct1_adj_table_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "small_enc_table_verifier0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "small_enc_table_verifier1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "small_enc_table_verifier2_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "small_enc_table_verifier3_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "l3_dlp0_table_verifier0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "l3_dlp0_table_verifier1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "l3_dlp0_table_verifier2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "l3_dlp0_table_verifier3_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "large_enc_verifier0_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "large_enc_verifier1_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "large_enc_verifier2_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "large_enc_verifier3_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "large_enc_verifier4_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "large_enc_verifier5_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "large_enc_verifier6_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "large_enc_verifier7_ecc_1b_err_initiate",
        23,
        1
      ]
    ]
  },
  "idb_encdb_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 24,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "slice0_dip_index_mapping_table_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "slice1_dip_index_mapping_table_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "slice0_l3_dlp1_table_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "slice1_l3_dlp1_table_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "slice0_direct0_nh_table_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "slice1_direct0_nh_table_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "slice0_direct1_adj_table_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "slice1_direct1_adj_table_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "small_enc_table_verifier0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "small_enc_table_verifier1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "small_enc_table_verifier2_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "small_enc_table_verifier3_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "l3_dlp0_table_verifier0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "l3_dlp0_table_verifier1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "l3_dlp0_table_verifier2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "l3_dlp0_table_verifier3_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "large_enc_verifier0_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "large_enc_verifier1_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "large_enc_verifier2_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "large_enc_verifier3_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "large_enc_verifier4_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "large_enc_verifier5_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "large_enc_verifier6_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "large_enc_verifier7_ecc_2b_err_initiate",
        23,
        1
      ]
    ]
  },
  "idb_encdb_mem_protect_err_status": {
    "type": "register",
    "block": "idb_encdb",
    "width": 24,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "slice0_dip_index_mapping_table_err_int",
        0,
        1
      ],
      [
        "slice1_dip_index_mapping_table_err_int",
        1,
        1
      ],
      [
        "slice0_l3_dlp1_table_err_int",
        2,
        1
      ],
      [
        "slice1_l3_dlp1_table_err_int",
        3,
        1
      ],
      [
        "slice0_direct0_nh_table_err_int",
        4,
        1
      ],
      [
        "slice1_direct0_nh_table_err_int",
        5,
        1
      ],
      [
        "slice0_direct1_adj_table_err_int",
        6,
        1
      ],
      [
        "slice1_direct1_adj_table_err_int",
        7,
        1
      ],
      [
        "small_enc_table_verifier0_err_int",
        8,
        1
      ],
      [
        "small_enc_table_verifier1_err_int",
        9,
        1
      ],
      [
        "small_enc_table_verifier2_err_int",
        10,
        1
      ],
      [
        "small_enc_table_verifier3_err_int",
        11,
        1
      ],
      [
        "l3_dlp0_table_verifier0_err_int",
        12,
        1
      ],
      [
        "l3_dlp0_table_verifier1_err_int",
        13,
        1
      ],
      [
        "l3_dlp0_table_verifier2_err_int",
        14,
        1
      ],
      [
        "l3_dlp0_table_verifier3_err_int",
        15,
        1
      ],
      [
        "large_enc_verifier0_err_int",
        16,
        1
      ],
      [
        "large_enc_verifier1_err_int",
        17,
        1
      ],
      [
        "large_enc_verifier2_err_int",
        18,
        1
      ],
      [
        "large_enc_verifier3_err_int",
        19,
        1
      ],
      [
        "large_enc_verifier4_err_int",
        20,
        1
      ],
      [
        "large_enc_verifier5_err_int",
        21,
        1
      ],
      [
        "large_enc_verifier6_err_int",
        22,
        1
      ],
      [
        "large_enc_verifier7_err_int",
        23,
        1
      ]
    ]
  },
  "idb_encdb_selected_ser_error_info": {
    "type": "register",
    "block": "idb_encdb",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "idb_encdb_ser_error_debug_configuration": {
    "type": "register",
    "block": "idb_encdb",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "idb_encdb_ecc_1b_err_debug": {
    "type": "register",
    "block": "idb_encdb",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "idb_encdb_ecc_2b_err_debug": {
    "type": "register",
    "block": "idb_encdb",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "idb_encdb_tcam_scan_period_cfg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "idb_encdb_counter_timer": {
    "type": "register",
    "block": "idb_encdb",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "idb_encdb_counter_timer_trigger_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "idb_encdb_memory_access_timeout": {
    "type": "register",
    "block": "idb_encdb",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "idb_encdb_broadcast_config_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "idb_encdb_memory_prot_bypass": {
    "type": "register",
    "block": "idb_encdb",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "idb_encdb_soft_reset_configuration": {
    "type": "register",
    "block": "idb_encdb",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "idb_encdb_mbist_configuration": {
    "type": "register",
    "block": "idb_encdb",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "idb_encdb_power_down_configuration": {
    "type": "register",
    "block": "idb_encdb",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "idb_encdb_spare_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "idb_encdb_pmro_ctrl": {
    "type": "register",
    "block": "idb_encdb",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "idb_encdb_pmro_status": {
    "type": "register",
    "block": "idb_encdb",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "idb_encdb_mirror_bus_conf_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "idb_encdb_mirror_bus_status": {
    "type": "register",
    "block": "idb_encdb",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "idb_encdb_device_time_offset_cfg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "idb_encdb_init_done_status_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 1,
    "desc": "idb_init_done_status_reg",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "idb_encdb_debug_data_bus_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 32,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "idb_encdb_debug_data_select_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 10,
    "desc": "debug_data_select_register",
    "fields": [
      [
        "debug_data_select",
        0,
        10
      ]
    ]
  },
  "idb_encdb_debug_fifos_water_marks_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 50,
    "desc": "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    "fields": [
      [
        "slice_small_enc_cbr_wm",
        0,
        6
      ],
      [
        "slice_dip_index_cbr_wm",
        6,
        6
      ],
      [
        "slice_dip_index_from_small_em_fifo_wm",
        12,
        5
      ],
      [
        "slice_dip_index_from_large_em_fifo_wm",
        17,
        5
      ],
      [
        "slice_l3_dlp1_cbr_wm",
        22,
        6
      ],
      [
        "slice_direct0_from_dlp1_fifo_wm",
        28,
        5
      ],
      [
        "slice_direct0_from_dlp0_fifo_wm",
        33,
        5
      ],
      [
        "slice_direct0_nh_cbr_wm",
        38,
        6
      ],
      [
        "slice_direct1_adj_cbr_wm",
        44,
        6
      ]
    ]
  },
  "idb_encdb_encdb_tables_counters": {
    "type": "register",
    "block": "idb_encdb",
    "width": 640,
    "desc": "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    "fields": [
      [
        "slice_small_enc_counter",
        0,
        64
      ],
      [
        "slice_large_enc_counter",
        64,
        64
      ],
      [
        "slice_dip_index_counter",
        128,
        64
      ],
      [
        "slice_dip_index_from_small_em_counter",
        192,
        64
      ],
      [
        "slice_dip_index_from_large_em_counter",
        256,
        64
      ],
      [
        "slice_l3_dlp1_counter",
        320,
        64
      ],
      [
        "slice_direct0_from_dlp1_counter",
        384,
        64
      ],
      [
        "slice_direct0_from_dlp0_counter",
        448,
        64
      ],
      [
        "slice_direct0_nh_counter",
        512,
        64
      ],
      [
        "slice_direct1_adj_counter",
        576,
        64
      ]
    ]
  },
  "idb_encdb_encdb_tables_miss_counters": {
    "type": "register",
    "block": "idb_encdb",
    "width": 192,
    "desc": "WM storing the max amount of entries in FIFO/CBR in multiple places in the design (debug feature)",
    "fields": [
      [
        "slice_small_enc_miss_counter",
        0,
        64
      ],
      [
        "slice_large_enc_miss_counter",
        64,
        64
      ],
      [
        "slice_l3_dlp0_counter",
        128,
        64
      ]
    ]
  },
  "idb_encdb_bubble_logic_counter_cfg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 26,
    "desc": "configuration_registers",
    "fields": [
      [
        "direct1_input_cbr_num_of_clks_before_forced_bubble_ordy",
        0,
        10
      ],
      [
        "direct1_input_cbr_num_of_clks_before_forced_bubble_above_th",
        10,
        10
      ],
      [
        "direct1_to_direct0_threshold",
        20,
        6
      ]
    ]
  },
  "idb_encdb_small_enc_table_per_bank_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 86,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "small_enc_table_active_banks",
        0,
        1
      ],
      [
        "small_enc_table_hash_key",
        1,
        84
      ],
      [
        "small_enc_table_use_primitive_crc",
        85,
        1
      ]
    ]
  },
  "idb_encdb_small_enc_table_per_em_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "small_enc_table_key_width",
        0,
        16
      ],
      [
        "small_enc_table_auto_bubble_req",
        16,
        1
      ],
      [
        "small_enc_table_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "idb_encdb_small_enc_table_cam_wm_max_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "small_enc_table_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "idb_encdb_small_enc_table_access_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 224,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "small_enc_table_access_reg",
        0,
        224
      ]
    ]
  },
  "idb_encdb_small_enc_table_response_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 224,
    "desc": "EM indirect access data",
    "fields": [
      [
        "small_enc_table_response_valid",
        0,
        1
      ],
      [
        "small_enc_table_response_reg",
        1,
        223
      ]
    ]
  },
  "idb_encdb_l3_dlp0_table_per_bank_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 66,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "l3_dlp0_table_active_banks",
        0,
        1
      ],
      [
        "l3_dlp0_table_hash_key",
        1,
        64
      ],
      [
        "l3_dlp0_table_use_primitive_crc",
        65,
        1
      ]
    ]
  },
  "idb_encdb_l3_dlp0_table_per_em_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "l3_dlp0_table_key_width",
        0,
        16
      ],
      [
        "l3_dlp0_table_auto_bubble_req",
        16,
        1
      ],
      [
        "l3_dlp0_table_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "idb_encdb_l3_dlp0_table_cam_wm_max_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "l3_dlp0_table_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "idb_encdb_l3_dlp0_table_access_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 214,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "l3_dlp0_table_access_reg",
        0,
        214
      ]
    ]
  },
  "idb_encdb_l3_dlp0_table_response_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 214,
    "desc": "EM indirect access data",
    "fields": [
      [
        "l3_dlp0_table_response_valid",
        0,
        1
      ],
      [
        "l3_dlp0_table_response_reg",
        1,
        213
      ]
    ]
  },
  "idb_encdb_large_enc_per_bank_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 86,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "large_enc_active_banks",
        0,
        1
      ],
      [
        "large_enc_hash_key",
        1,
        84
      ],
      [
        "large_enc_use_primitive_crc",
        85,
        1
      ]
    ]
  },
  "idb_encdb_large_enc_per_em_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "large_enc_key_width",
        0,
        16
      ],
      [
        "large_enc_auto_bubble_req",
        16,
        1
      ],
      [
        "large_enc_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "idb_encdb_large_enc_cam_wm_max_reg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "large_enc_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "idb_encdb_large_enc_access_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 228,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "large_enc_access_reg",
        0,
        228
      ]
    ]
  },
  "idb_encdb_large_enc_response_register": {
    "type": "register",
    "block": "idb_encdb",
    "width": 225,
    "desc": "EM indirect access data",
    "fields": [
      [
        "large_enc_response_valid",
        0,
        1
      ],
      [
        "large_enc_response_reg",
        1,
        224
      ]
    ]
  },
  "idb_encdb_em_response_interrupt": {
    "type": "register",
    "block": "idb_encdb",
    "width": 3,
    "desc": "EM indirect access data is valid",
    "fields": [
      [
        "small_enc_table_resp",
        0,
        1
      ],
      [
        "l3_dlp0_table_resp",
        1,
        1
      ],
      [
        "large_enc_resp",
        2,
        1
      ]
    ]
  },
  "idb_encdb_em_response_interrupt_mask": {
    "type": "register",
    "block": "idb_encdb",
    "width": 3,
    "desc": "This register masks EmResponseInterrupt interrupt register",
    "fields": [
      [
        "small_enc_table_resp_mask",
        0,
        1
      ],
      [
        "l3_dlp0_table_resp_mask",
        1,
        1
      ],
      [
        "large_enc_resp_mask",
        2,
        1
      ]
    ]
  },
  "idb_encdb_em_response_interrupt_test": {
    "type": "register",
    "block": "idb_encdb",
    "width": 3,
    "desc": "This register tests EmResponseInterrupt interrupt register",
    "fields": [
      [
        "small_enc_table_resp_test",
        0,
        1
      ],
      [
        "l3_dlp0_table_resp_test",
        1,
        1
      ],
      [
        "large_enc_resp_test",
        2,
        1
      ]
    ]
  },
  "idb_encdb_small_enc_table_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 16,
    "desc": "Bubble request configurations for SmallEncTableVerifier[n] memory",
    "fields": [
      [
        "small_enc_table_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "idb_encdb_l3_dlp0_table_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 16,
    "desc": "Bubble request configurations for L3Dlp0TableVerifier[n] memory",
    "fields": [
      [
        "l3_dlp0_table_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "idb_encdb_large_enc_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "idb_encdb",
    "width": 16,
    "desc": "Bubble request configurations for LargeEncVerifier[n] memory",
    "fields": [
      [
        "large_enc_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "idb_encdb_slice_dip_index_mapping_table": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 129,
    "desc": "DIP-Index Mapping Database",
    "fields": [
      [
        "slice_dip_data",
        0,
        128
      ],
      [
        "slice_is_wide_entry",
        128,
        1
      ]
    ]
  },
  "idb_encdb_slice_l3_dlp1_table": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 161,
    "desc": "L3-DLP Database",
    "fields": [
      [
        "l3_dlp_payload",
        0,
        160
      ],
      [
        "is_wide_entry",
        160,
        1
      ]
    ]
  },
  "idb_encdb_slice_direct0_nh_table": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 160,
    "desc": "Next-hop-database (Direct-0 Table)",
    "fields": [
      [
        "slice_nh_data",
        0,
        160
      ]
    ]
  },
  "idb_encdb_slice_direct1_adj_table": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 160,
    "desc": "Adjacent DB Database (Direct-1 Table)",
    "fields": [
      [
        "slice_adj_data",
        0,
        160
      ]
    ]
  },
  "idb_encdb_small_enc_table_verifier": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 184,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "small_enc_table_verifier_data",
        0,
        184
      ]
    ]
  },
  "idb_encdb_small_enc_table_cam": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 42,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "small_enc_table_cam_payload",
        0,
        160
      ],
      [
        "small_enc_table_cam_key",
        160,
        42
      ],
      [
        "small_enc_table_cam_valid",
        202,
        1
      ]
    ]
  },
  "idb_encdb_l3_dlp0_table_verifier": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 174,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "l3_dlp0_table_verifier_data",
        0,
        174
      ]
    ]
  },
  "idb_encdb_l3_dlp0_table_cam": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 32,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "l3_dlp0_table_cam_payload",
        0,
        160
      ],
      [
        "l3_dlp0_table_cam_key",
        160,
        32
      ],
      [
        "l3_dlp0_table_cam_valid",
        192,
        1
      ]
    ]
  },
  "idb_encdb_large_enc_verifier": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 184,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "large_enc_verifier_data",
        0,
        184
      ]
    ]
  },
  "idb_encdb_large_enc_cam": {
    "type": "memory",
    "block": "idb_encdb",
    "width": 42,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "large_enc_cam_payload",
        0,
        160
      ],
      [
        "large_enc_cam_key",
        160,
        42
      ],
      [
        "large_enc_cam_valid",
        202,
        1
      ]
    ]
  },
  "idb_macdb_interrupt_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 4,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "external_interrupts_summary",
        1,
        1
      ],
      [
        "idb_interrupts_summary",
        2,
        1
      ],
      [
        "em_response_interrupt_summary",
        3,
        1
      ]
    ]
  },
  "idb_macdb_mem_protect_interrupt": {
    "type": "register",
    "block": "idb_macdb",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "idb_macdb_mem_protect_interrupt_test": {
    "type": "register",
    "block": "idb_macdb",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "idb_macdb_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "idb_macdb",
    "width": 23,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "vlan_membership_table0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "vlan_membership_table1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "large_relay_table_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "small_relay_table0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "small_relay_table1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "vlan_mapping_table_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "lp_table_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "mymac_table_verifier0_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "mymac_table_verifier1_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mymac_table_verifier2_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "mymac_table_verifier3_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "mymac_table_verifier4_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mymac_table_verifier5_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mymac_table_verifier6_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mymac_table_verifier7_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "service_mapping_access_verifier0_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "service_mapping_access_verifier1_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "service_mapping_access_verifier2_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "service_mapping_access_verifier3_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "service_mapping_access_verifier4_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "service_mapping_access_verifier5_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "service_mapping_access_verifier6_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "service_mapping_access_verifier7_ecc_1b_err_interrupt_mask",
        22,
        1
      ]
    ]
  },
  "idb_macdb_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "idb_macdb",
    "width": 23,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "vlan_membership_table0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "vlan_membership_table1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "large_relay_table_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "small_relay_table0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "small_relay_table1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "vlan_mapping_table_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "lp_table_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "mymac_table_verifier0_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "mymac_table_verifier1_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mymac_table_verifier2_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "mymac_table_verifier3_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "mymac_table_verifier4_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mymac_table_verifier5_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mymac_table_verifier6_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mymac_table_verifier7_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "service_mapping_access_verifier0_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "service_mapping_access_verifier1_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "service_mapping_access_verifier2_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "service_mapping_access_verifier3_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "service_mapping_access_verifier4_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "service_mapping_access_verifier5_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "service_mapping_access_verifier6_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "service_mapping_access_verifier7_ecc_2b_err_interrupt_mask",
        22,
        1
      ]
    ]
  },
  "idb_macdb_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 23,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "vlan_membership_table0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "vlan_membership_table1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "large_relay_table_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "small_relay_table0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "small_relay_table1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "vlan_mapping_table_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "lp_table_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "mymac_table_verifier0_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "mymac_table_verifier1_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "mymac_table_verifier2_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "mymac_table_verifier3_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "mymac_table_verifier4_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "mymac_table_verifier5_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "mymac_table_verifier6_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "mymac_table_verifier7_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "service_mapping_access_verifier0_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "service_mapping_access_verifier1_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "service_mapping_access_verifier2_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "service_mapping_access_verifier3_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "service_mapping_access_verifier4_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "service_mapping_access_verifier5_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "service_mapping_access_verifier6_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "service_mapping_access_verifier7_ecc_1b_err_initiate",
        22,
        1
      ]
    ]
  },
  "idb_macdb_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 23,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "vlan_membership_table0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "vlan_membership_table1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "large_relay_table_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "small_relay_table0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "small_relay_table1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "vlan_mapping_table_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "lp_table_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "mymac_table_verifier0_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "mymac_table_verifier1_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "mymac_table_verifier2_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "mymac_table_verifier3_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "mymac_table_verifier4_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "mymac_table_verifier5_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "mymac_table_verifier6_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "mymac_table_verifier7_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "service_mapping_access_verifier0_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "service_mapping_access_verifier1_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "service_mapping_access_verifier2_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "service_mapping_access_verifier3_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "service_mapping_access_verifier4_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "service_mapping_access_verifier5_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "service_mapping_access_verifier6_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "service_mapping_access_verifier7_ecc_2b_err_initiate",
        22,
        1
      ]
    ]
  },
  "idb_macdb_mem_protect_err_status": {
    "type": "register",
    "block": "idb_macdb",
    "width": 23,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "vlan_membership_table0_err_int",
        0,
        1
      ],
      [
        "vlan_membership_table1_err_int",
        1,
        1
      ],
      [
        "large_relay_table_err_int",
        2,
        1
      ],
      [
        "small_relay_table0_err_int",
        3,
        1
      ],
      [
        "small_relay_table1_err_int",
        4,
        1
      ],
      [
        "vlan_mapping_table_err_int",
        5,
        1
      ],
      [
        "lp_table_err_int",
        6,
        1
      ],
      [
        "mymac_table_verifier0_err_int",
        7,
        1
      ],
      [
        "mymac_table_verifier1_err_int",
        8,
        1
      ],
      [
        "mymac_table_verifier2_err_int",
        9,
        1
      ],
      [
        "mymac_table_verifier3_err_int",
        10,
        1
      ],
      [
        "mymac_table_verifier4_err_int",
        11,
        1
      ],
      [
        "mymac_table_verifier5_err_int",
        12,
        1
      ],
      [
        "mymac_table_verifier6_err_int",
        13,
        1
      ],
      [
        "mymac_table_verifier7_err_int",
        14,
        1
      ],
      [
        "service_mapping_access_verifier0_err_int",
        15,
        1
      ],
      [
        "service_mapping_access_verifier1_err_int",
        16,
        1
      ],
      [
        "service_mapping_access_verifier2_err_int",
        17,
        1
      ],
      [
        "service_mapping_access_verifier3_err_int",
        18,
        1
      ],
      [
        "service_mapping_access_verifier4_err_int",
        19,
        1
      ],
      [
        "service_mapping_access_verifier5_err_int",
        20,
        1
      ],
      [
        "service_mapping_access_verifier6_err_int",
        21,
        1
      ],
      [
        "service_mapping_access_verifier7_err_int",
        22,
        1
      ]
    ]
  },
  "idb_macdb_selected_ser_error_info": {
    "type": "register",
    "block": "idb_macdb",
    "width": 19,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        17
      ],
      [
        "mem_err_type",
        17,
        2
      ]
    ]
  },
  "idb_macdb_ser_error_debug_configuration": {
    "type": "register",
    "block": "idb_macdb",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "idb_macdb_ecc_1b_err_debug": {
    "type": "register",
    "block": "idb_macdb",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "idb_macdb_ecc_2b_err_debug": {
    "type": "register",
    "block": "idb_macdb",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "idb_macdb_tcam_scan_period_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "idb_macdb_counter_timer": {
    "type": "register",
    "block": "idb_macdb",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "idb_macdb_counter_timer_trigger_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "idb_macdb_memory_access_timeout": {
    "type": "register",
    "block": "idb_macdb",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "idb_macdb_broadcast_config_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "idb_macdb_memory_prot_bypass": {
    "type": "register",
    "block": "idb_macdb",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "idb_macdb_soft_reset_configuration": {
    "type": "register",
    "block": "idb_macdb",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "idb_macdb_mbist_configuration": {
    "type": "register",
    "block": "idb_macdb",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "idb_macdb_power_down_configuration": {
    "type": "register",
    "block": "idb_macdb",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "idb_macdb_spare_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "idb_macdb_pmro_ctrl": {
    "type": "register",
    "block": "idb_macdb",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "idb_macdb_pmro_status": {
    "type": "register",
    "block": "idb_macdb",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "idb_macdb_mirror_bus_conf_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "idb_macdb_mirror_bus_status": {
    "type": "register",
    "block": "idb_macdb",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "idb_macdb_device_time_offset_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "idb_macdb_init_done_status_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 1,
    "desc": "idb_init_done_status_reg",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "idb_macdb_debug_data_bus_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 32,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "idb_macdb_debug_data_select_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 10,
    "desc": "debug_data_select_register",
    "fields": [
      [
        "debug_data_select",
        0,
        10
      ]
    ]
  },
  "idb_macdb_vlan_mapping_cbt_not_irdy": {
    "type": "register",
    "block": "idb_macdb",
    "width": 64,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "slice_vlan_mapping_cbt_not_irdy_counter",
        0,
        64
      ]
    ]
  },
  "idb_macdb_cycles_before_bubble": {
    "type": "register",
    "block": "idb_macdb",
    "width": 26,
    "desc": "",
    "fields": [
      [
        "sm1_input_cbr_num_of_clks_before_forced_bubble_ordy",
        0,
        10
      ],
      [
        "sm1_input_cbr_num_of_clks_before_forced_bubble_above_th",
        10,
        10
      ],
      [
        "sm1to_sm0_threshold",
        20,
        6
      ]
    ]
  },
  "idb_macdb_debug_table_input_counter_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 896,
    "desc": "debug data counters (input to many of the design registers)",
    "fields": [
      [
        "slice_vlan_mapping",
        0,
        64
      ],
      [
        "slice_service_relay",
        64,
        64
      ],
      [
        "slice_link_relay",
        128,
        64
      ],
      [
        "slice_mymac_em",
        192,
        64
      ],
      [
        "slice_vm2mymac_em",
        256,
        64
      ],
      [
        "slice_sm0",
        320,
        64
      ],
      [
        "slice_sm1",
        384,
        64
      ],
      [
        "slice_sm02service_lp",
        448,
        64
      ],
      [
        "slice_sm02service_relay",
        512,
        64
      ],
      [
        "slice_sm02mymac_db",
        576,
        64
      ],
      [
        "slice_sm12service_lp",
        640,
        64
      ],
      [
        "slice_sm12service_relay",
        704,
        64
      ],
      [
        "slice_sm12mymac_db",
        768,
        64
      ],
      [
        "slice_service_lp",
        832,
        64
      ]
    ]
  },
  "idb_macdb_debug_table_miss_counter_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 192,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "slice_sm0_miss_counter",
        0,
        64
      ],
      [
        "slice_sm1_miss_counter",
        64,
        64
      ],
      [
        "slice_mymac_miss_counter",
        128,
        64
      ]
    ]
  },
  "idb_macdb_debug_fifos_water_marks_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 82,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "slice_vlan_mapping_cbr_wm",
        0,
        6
      ],
      [
        "slice_service_relay_cbr_wm",
        6,
        6
      ],
      [
        "slice_link_relay_cbr_wm",
        12,
        6
      ],
      [
        "slice_vlan_mapping2link_relay_fifo_wm",
        18,
        4
      ],
      [
        "slice_mymac_em_cbr_wm",
        22,
        6
      ],
      [
        "slice_vm2mymac_em_cbr_wm",
        28,
        4
      ],
      [
        "slice_sm0_cbr_wm",
        32,
        6
      ],
      [
        "slice_sm1_cbr_wm",
        38,
        6
      ],
      [
        "slice_sm02service_lp_fifo_wm",
        44,
        5
      ],
      [
        "slice_sm02service_relay_fifo_wm",
        49,
        5
      ],
      [
        "slice_sm02mymac_db_fifo_wm",
        54,
        5
      ],
      [
        "slice_sm12service_lp_fifo_wm",
        59,
        5
      ],
      [
        "slice_sm12service_relay_fifo_wm",
        64,
        5
      ],
      [
        "slice_sm12mymac_db_fifo_wm",
        69,
        5
      ],
      [
        "slice_service_lp_cbr_wm",
        74,
        8
      ]
    ]
  },
  "idb_macdb_disable_link_relay_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 2,
    "desc": "configuration_registers",
    "fields": [
      [
        "slice0_disable_link_relay_table",
        0,
        1
      ],
      [
        "slice1_disable_link_relay_table",
        1,
        1
      ]
    ]
  },
  "idb_macdb_external_interrupts": {
    "type": "register",
    "block": "idb_macdb",
    "width": 2,
    "desc": "idb_interrupts",
    "fields": [
      [
        "resolution_interrupt_summary",
        0,
        1
      ],
      [
        "encdb_interrupt_summary",
        1,
        1
      ]
    ]
  },
  "idb_macdb_external_interrupts_mask": {
    "type": "register",
    "block": "idb_macdb",
    "width": 2,
    "desc": "This register masks ExternalInterrupts interrupt register",
    "fields": [
      [
        "resolution_interrupt_summary_mask",
        0,
        1
      ],
      [
        "encdb_interrupt_summary_mask",
        1,
        1
      ]
    ]
  },
  "idb_macdb_external_interrupts_test": {
    "type": "register",
    "block": "idb_macdb",
    "width": 2,
    "desc": "This register tests ExternalInterrupts interrupt register",
    "fields": [
      [
        "resolution_interrupt_summary_test",
        0,
        1
      ],
      [
        "encdb_interrupt_summary_test",
        1,
        1
      ]
    ]
  },
  "idb_macdb_idb_interrupts": {
    "type": "register",
    "block": "idb_macdb",
    "width": 2,
    "desc": "idb_interrupts",
    "fields": [
      [
        "slice0_service_relay_table_address_out_of_bounds",
        0,
        1
      ],
      [
        "slice1_service_relay_table_address_out_of_bounds",
        1,
        1
      ]
    ]
  },
  "idb_macdb_idb_interrupts_mask": {
    "type": "register",
    "block": "idb_macdb",
    "width": 2,
    "desc": "This register masks idb_interrupts interrupt register",
    "fields": [
      [
        "slice0_service_relay_table_address_out_of_bounds_mask",
        0,
        1
      ],
      [
        "slice1_service_relay_table_address_out_of_bounds_mask",
        1,
        1
      ]
    ]
  },
  "idb_macdb_idb_interrupts_test": {
    "type": "register",
    "block": "idb_macdb",
    "width": 2,
    "desc": "This register tests idb_interrupts interrupt register",
    "fields": [
      [
        "slice0_service_relay_table_address_out_of_bounds_test",
        0,
        1
      ],
      [
        "slice1_service_relay_table_address_out_of_bounds_test",
        1,
        1
      ]
    ]
  },
  "idb_macdb_vlan_mapping_relay_id_offset_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 7,
    "desc": "Sets the offset to the relay ID field",
    "fields": [
      [
        "vlan_mapping_relay_id_offset",
        0,
        7
      ]
    ]
  },
  "idb_macdb_per_slice_sm1_mask_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 50,
    "desc": "Slice[6]_sm1_mask_cfg",
    "fields": [
      [
        "sm1_mask",
        0,
        50
      ]
    ]
  },
  "idb_macdb_sm_em_relay_id_offset_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 7,
    "desc": "sm_em_relay_id_offset",
    "fields": [
      [
        "sm_em_relay_id_offset",
        0,
        7
      ]
    ]
  },
  "idb_macdb_sm_em_lp_id_offset_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 7,
    "desc": "sm_em_lp_id_offset",
    "fields": [
      [
        "sm_em_lp_id_offset",
        0,
        7
      ]
    ]
  },
  "idb_macdb_mymac_table_per_bank_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 82,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "mymac_table_active_banks",
        0,
        1
      ],
      [
        "mymac_table_hash_key",
        1,
        80
      ],
      [
        "mymac_table_use_primitive_crc",
        81,
        1
      ]
    ]
  },
  "idb_macdb_mymac_table_per_em_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "mymac_table_key_width",
        0,
        16
      ],
      [
        "mymac_table_auto_bubble_req",
        16,
        1
      ],
      [
        "mymac_table_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "idb_macdb_mymac_table_cam_wm_max_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "mymac_table_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "idb_macdb_mymac_table_access_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 220,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "mymac_table_access_reg",
        0,
        220
      ]
    ]
  },
  "idb_macdb_mymac_table_response_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 220,
    "desc": "EM indirect access data",
    "fields": [
      [
        "mymac_table_response_valid",
        0,
        1
      ],
      [
        "mymac_table_response_reg",
        1,
        219
      ]
    ]
  },
  "idb_macdb_service_mapping_access_per_bank_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 102,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "service_mapping_access_active_banks",
        0,
        1
      ],
      [
        "service_mapping_access_hash_key",
        1,
        100
      ],
      [
        "service_mapping_access_use_primitive_crc",
        101,
        1
      ]
    ]
  },
  "idb_macdb_service_mapping_access_per_em_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "service_mapping_access_key_width",
        0,
        16
      ],
      [
        "service_mapping_access_auto_bubble_req",
        16,
        1
      ],
      [
        "service_mapping_access_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "idb_macdb_service_mapping_access_cam_wm_max_reg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "service_mapping_access_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "idb_macdb_service_mapping_access_access_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 156,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "service_mapping_access_access_reg",
        0,
        156
      ]
    ]
  },
  "idb_macdb_service_mapping_access_response_register": {
    "type": "register",
    "block": "idb_macdb",
    "width": 153,
    "desc": "EM indirect access data",
    "fields": [
      [
        "service_mapping_access_response_valid",
        0,
        1
      ],
      [
        "service_mapping_access_response_reg",
        1,
        152
      ]
    ]
  },
  "idb_macdb_em_response_interrupt": {
    "type": "register",
    "block": "idb_macdb",
    "width": 4,
    "desc": "EM indirect access data is valid",
    "fields": [
      [
        "mymac_table0_resp",
        0,
        1
      ],
      [
        "mymac_table1_resp",
        1,
        1
      ],
      [
        "service_mapping_access0_resp",
        2,
        1
      ],
      [
        "service_mapping_access1_resp",
        3,
        1
      ]
    ]
  },
  "idb_macdb_em_response_interrupt_mask": {
    "type": "register",
    "block": "idb_macdb",
    "width": 4,
    "desc": "This register masks EmResponseInterrupt interrupt register",
    "fields": [
      [
        "mymac_table0_resp_mask",
        0,
        1
      ],
      [
        "mymac_table1_resp_mask",
        1,
        1
      ],
      [
        "service_mapping_access0_resp_mask",
        2,
        1
      ],
      [
        "service_mapping_access1_resp_mask",
        3,
        1
      ]
    ]
  },
  "idb_macdb_em_response_interrupt_test": {
    "type": "register",
    "block": "idb_macdb",
    "width": 4,
    "desc": "This register tests EmResponseInterrupt interrupt register",
    "fields": [
      [
        "mymac_table0_resp_test",
        0,
        1
      ],
      [
        "mymac_table1_resp_test",
        1,
        1
      ],
      [
        "service_mapping_access0_resp_test",
        2,
        1
      ],
      [
        "service_mapping_access1_resp_test",
        3,
        1
      ]
    ]
  },
  "idb_macdb_large_relay_table_bubble_req_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 16,
    "desc": "Bubble request configurations for large_relay_table memory",
    "fields": [
      [
        "large_relay_table_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "idb_macdb_vlan_mapping_table_bubble_req_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 16,
    "desc": "Bubble request configurations for vlan_mapping_table memory",
    "fields": [
      [
        "vlan_mapping_table_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "idb_macdb_lp_table_bubble_req_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 16,
    "desc": "Bubble request configurations for lp_table memory",
    "fields": [
      [
        "lp_table_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "idb_macdb_service_mapping_access_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "idb_macdb",
    "width": 16,
    "desc": "Bubble request configurations for ServiceMappingAccessVerifier[n] memory",
    "fields": [
      [
        "service_mapping_access_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "idb_macdb_vlan_membership_table": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 32,
    "desc": "vlan_membership_table*2 (logical-depth = 128K) 0,1: txpp-vlan-membership",
    "fields": [
      [
        "vlan_membership_table_field",
        0,
        32
      ]
    ]
  },
  "idb_macdb_large_relay_table": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 80,
    "desc": "Service relay-table (one table for slice-pairs)",
    "fields": [
      [
        "relay_attributes",
        0,
        80
      ]
    ]
  },
  "idb_macdb_small_relay_table": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 80,
    "desc": "Link relay table or extension to Service-relay-table  (one table for slice-pairs)",
    "fields": [
      [
        "relay_attributes",
        0,
        80
      ]
    ]
  },
  "idb_macdb_vlan_mapping_table": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 81,
    "desc": "vlan_mapping_table  (one table for two slice-pairs)",
    "fields": [
      [
        "result",
        0,
        80
      ],
      [
        "hit",
        80,
        1
      ]
    ]
  },
  "idb_macdb_lp_table": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 160,
    "desc": "lp-table: 64K",
    "fields": [
      [
        "lp_attributes",
        0,
        160
      ]
    ]
  },
  "idb_macdb_mymac_table_verifier": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 199,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "mymac_table_verifier_data",
        0,
        199
      ]
    ]
  },
  "idb_macdb_mymac_table_cam": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 40,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "mymac_table_cam_payload",
        0,
        160
      ],
      [
        "mymac_table_cam_key",
        160,
        40
      ],
      [
        "mymac_table_cam_valid",
        200,
        1
      ]
    ]
  },
  "idb_macdb_service_mapping_access_verifier": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 126,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "service_mapping_access_verifier_data",
        0,
        126
      ]
    ]
  },
  "idb_macdb_service_mapping_access_cam": {
    "type": "memory",
    "block": "idb_macdb",
    "width": 50,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "service_mapping_access_cam_payload",
        0,
        80
      ],
      [
        "service_mapping_access_cam_key",
        80,
        50
      ],
      [
        "service_mapping_access_cam_valid",
        130,
        1
      ]
    ]
  },
  "res_interrupt_register": {
    "type": "register",
    "block": "res",
    "width": 4,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "resolution_interrupts0_summary",
        1,
        1
      ],
      [
        "resolution_interrupts1_summary",
        2,
        1
      ],
      [
        "em_response_interrupt_summary",
        3,
        1
      ]
    ]
  },
  "res_mem_protect_interrupt": {
    "type": "register",
    "block": "res",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "res_mem_protect_interrupt_test": {
    "type": "register",
    "block": "res",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "res_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "res",
    "width": 60,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "protection_table_slice0_stage0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "protection_table_slice0_stage1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "protection_table_slice0_stage2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "protection_table_slice0_stage3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "slice0_stage0_lb_consistence_cache_table_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "slice0_stage1_lb_consistence_cache_table_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "slice0_stage2_lb_consistence_cache_table_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "slice0_stage3_lb_consistence_cache_table_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "resolution_stage0_associated_data_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "fec_table_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "resolution_stage1_associated_data_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "resolution_stage2_associated_data_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "resolution_stage3_associated_data_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "protection_table_slice1_stage0_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "protection_table_slice1_stage1_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "protection_table_slice1_stage2_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "protection_table_slice1_stage3_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "slice0_stage0_lb_group_size_table_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "slice0_stage1_lb_group_size_table_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "slice0_stage2_lb_group_size_table_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "slice0_stage3_lb_group_size_table_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "slice1_stage0_lb_group_size_table_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "slice1_stage1_lb_group_size_table_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "slice1_stage2_lb_group_size_table_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "slice1_stage3_lb_group_size_table_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "slice1_stage0_lb_consistence_cache_table_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "slice1_stage1_lb_consistence_cache_table_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "slice1_stage2_lb_consistence_cache_table_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "slice1_stage3_lb_consistence_cache_table_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "resolution_stage0_em_verifier0_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "resolution_stage0_em_verifier1_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "resolution_stage0_em_verifier2_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "resolution_stage0_em_verifier3_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "resolution_stage0_em_verifier4_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "resolution_stage0_em_verifier5_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "resolution_stage0_em_verifier6_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "resolution_stage0_em_verifier7_ecc_1b_err_interrupt_mask",
        36,
        1
      ],
      [
        "resolution_stage0_em_verifier8_ecc_1b_err_interrupt_mask",
        37,
        1
      ],
      [
        "resolution_stage0_em_verifier9_ecc_1b_err_interrupt_mask",
        38,
        1
      ],
      [
        "resolution_stage0_em_verifier10_ecc_1b_err_interrupt_mask",
        39,
        1
      ],
      [
        "resolution_stage0_em_verifier11_ecc_1b_err_interrupt_mask",
        40,
        1
      ],
      [
        "lp_queuing_em_verifier0_ecc_1b_err_interrupt_mask",
        41,
        1
      ],
      [
        "lp_queuing_em_verifier1_ecc_1b_err_interrupt_mask",
        42,
        1
      ],
      [
        "lp_queuing_em_verifier2_ecc_1b_err_interrupt_mask",
        43,
        1
      ],
      [
        "lp_queuing_em_verifier3_ecc_1b_err_interrupt_mask",
        44,
        1
      ],
      [
        "lp_queuing_em_verifier4_ecc_1b_err_interrupt_mask",
        45,
        1
      ],
      [
        "resolution_stage1_em_verifier0_ecc_1b_err_interrupt_mask",
        46,
        1
      ],
      [
        "resolution_stage1_em_verifier1_ecc_1b_err_interrupt_mask",
        47,
        1
      ],
      [
        "resolution_stage1_em_verifier2_ecc_1b_err_interrupt_mask",
        48,
        1
      ],
      [
        "resolution_stage1_em_verifier3_ecc_1b_err_interrupt_mask",
        49,
        1
      ],
      [
        "resolution_stage2_em_verifier0_ecc_1b_err_interrupt_mask",
        50,
        1
      ],
      [
        "resolution_stage2_em_verifier1_ecc_1b_err_interrupt_mask",
        51,
        1
      ],
      [
        "resolution_stage2_em_verifier2_ecc_1b_err_interrupt_mask",
        52,
        1
      ],
      [
        "resolution_stage2_em_verifier3_ecc_1b_err_interrupt_mask",
        53,
        1
      ],
      [
        "resolution_stage3_em_verifier0_ecc_1b_err_interrupt_mask",
        54,
        1
      ],
      [
        "resolution_stage3_em_verifier1_ecc_1b_err_interrupt_mask",
        55,
        1
      ],
      [
        "resolution_stage3_em_verifier2_ecc_1b_err_interrupt_mask",
        56,
        1
      ],
      [
        "resolution_stage3_em_verifier3_ecc_1b_err_interrupt_mask",
        57,
        1
      ],
      [
        "resolution_stage3_em_verifier4_ecc_1b_err_interrupt_mask",
        58,
        1
      ],
      [
        "resolution_stage3_em_verifier5_ecc_1b_err_interrupt_mask",
        59,
        1
      ]
    ]
  },
  "res_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "res",
    "width": 60,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "protection_table_slice0_stage0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "protection_table_slice0_stage1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "protection_table_slice0_stage2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "protection_table_slice0_stage3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "slice0_stage0_lb_consistence_cache_table_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "slice0_stage1_lb_consistence_cache_table_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "slice0_stage2_lb_consistence_cache_table_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "slice0_stage3_lb_consistence_cache_table_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "resolution_stage0_associated_data_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "fec_table_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "resolution_stage1_associated_data_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "resolution_stage2_associated_data_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "resolution_stage3_associated_data_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "protection_table_slice1_stage0_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "protection_table_slice1_stage1_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "protection_table_slice1_stage2_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "protection_table_slice1_stage3_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "slice0_stage0_lb_group_size_table_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "slice0_stage1_lb_group_size_table_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "slice0_stage2_lb_group_size_table_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "slice0_stage3_lb_group_size_table_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "slice1_stage0_lb_group_size_table_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "slice1_stage1_lb_group_size_table_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "slice1_stage2_lb_group_size_table_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "slice1_stage3_lb_group_size_table_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "slice1_stage0_lb_consistence_cache_table_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "slice1_stage1_lb_consistence_cache_table_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "slice1_stage2_lb_consistence_cache_table_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "slice1_stage3_lb_consistence_cache_table_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "resolution_stage0_em_verifier0_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "resolution_stage0_em_verifier1_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "resolution_stage0_em_verifier2_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "resolution_stage0_em_verifier3_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "resolution_stage0_em_verifier4_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "resolution_stage0_em_verifier5_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "resolution_stage0_em_verifier6_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "resolution_stage0_em_verifier7_ecc_2b_err_interrupt_mask",
        36,
        1
      ],
      [
        "resolution_stage0_em_verifier8_ecc_2b_err_interrupt_mask",
        37,
        1
      ],
      [
        "resolution_stage0_em_verifier9_ecc_2b_err_interrupt_mask",
        38,
        1
      ],
      [
        "resolution_stage0_em_verifier10_ecc_2b_err_interrupt_mask",
        39,
        1
      ],
      [
        "resolution_stage0_em_verifier11_ecc_2b_err_interrupt_mask",
        40,
        1
      ],
      [
        "lp_queuing_em_verifier0_ecc_2b_err_interrupt_mask",
        41,
        1
      ],
      [
        "lp_queuing_em_verifier1_ecc_2b_err_interrupt_mask",
        42,
        1
      ],
      [
        "lp_queuing_em_verifier2_ecc_2b_err_interrupt_mask",
        43,
        1
      ],
      [
        "lp_queuing_em_verifier3_ecc_2b_err_interrupt_mask",
        44,
        1
      ],
      [
        "lp_queuing_em_verifier4_ecc_2b_err_interrupt_mask",
        45,
        1
      ],
      [
        "resolution_stage1_em_verifier0_ecc_2b_err_interrupt_mask",
        46,
        1
      ],
      [
        "resolution_stage1_em_verifier1_ecc_2b_err_interrupt_mask",
        47,
        1
      ],
      [
        "resolution_stage1_em_verifier2_ecc_2b_err_interrupt_mask",
        48,
        1
      ],
      [
        "resolution_stage1_em_verifier3_ecc_2b_err_interrupt_mask",
        49,
        1
      ],
      [
        "resolution_stage2_em_verifier0_ecc_2b_err_interrupt_mask",
        50,
        1
      ],
      [
        "resolution_stage2_em_verifier1_ecc_2b_err_interrupt_mask",
        51,
        1
      ],
      [
        "resolution_stage2_em_verifier2_ecc_2b_err_interrupt_mask",
        52,
        1
      ],
      [
        "resolution_stage2_em_verifier3_ecc_2b_err_interrupt_mask",
        53,
        1
      ],
      [
        "resolution_stage3_em_verifier0_ecc_2b_err_interrupt_mask",
        54,
        1
      ],
      [
        "resolution_stage3_em_verifier1_ecc_2b_err_interrupt_mask",
        55,
        1
      ],
      [
        "resolution_stage3_em_verifier2_ecc_2b_err_interrupt_mask",
        56,
        1
      ],
      [
        "resolution_stage3_em_verifier3_ecc_2b_err_interrupt_mask",
        57,
        1
      ],
      [
        "resolution_stage3_em_verifier4_ecc_2b_err_interrupt_mask",
        58,
        1
      ],
      [
        "resolution_stage3_em_verifier5_ecc_2b_err_interrupt_mask",
        59,
        1
      ]
    ]
  },
  "res_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "res",
    "width": 60,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "protection_table_slice0_stage0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "protection_table_slice0_stage1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "protection_table_slice0_stage2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "protection_table_slice0_stage3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "slice0_stage0_lb_consistence_cache_table_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "slice0_stage1_lb_consistence_cache_table_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "slice0_stage2_lb_consistence_cache_table_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "slice0_stage3_lb_consistence_cache_table_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "resolution_stage0_associated_data_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "fec_table_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "resolution_stage1_associated_data_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "resolution_stage2_associated_data_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "resolution_stage3_associated_data_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "protection_table_slice1_stage0_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "protection_table_slice1_stage1_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "protection_table_slice1_stage2_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "protection_table_slice1_stage3_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "slice0_stage0_lb_group_size_table_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "slice0_stage1_lb_group_size_table_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "slice0_stage2_lb_group_size_table_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "slice0_stage3_lb_group_size_table_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "slice1_stage0_lb_group_size_table_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "slice1_stage1_lb_group_size_table_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "slice1_stage2_lb_group_size_table_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "slice1_stage3_lb_group_size_table_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "slice1_stage0_lb_consistence_cache_table_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "slice1_stage1_lb_consistence_cache_table_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "slice1_stage2_lb_consistence_cache_table_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "slice1_stage3_lb_consistence_cache_table_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "resolution_stage0_em_verifier0_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "resolution_stage0_em_verifier1_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "resolution_stage0_em_verifier2_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "resolution_stage0_em_verifier3_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "resolution_stage0_em_verifier4_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "resolution_stage0_em_verifier5_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "resolution_stage0_em_verifier6_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "resolution_stage0_em_verifier7_ecc_1b_err_initiate",
        36,
        1
      ],
      [
        "resolution_stage0_em_verifier8_ecc_1b_err_initiate",
        37,
        1
      ],
      [
        "resolution_stage0_em_verifier9_ecc_1b_err_initiate",
        38,
        1
      ],
      [
        "resolution_stage0_em_verifier10_ecc_1b_err_initiate",
        39,
        1
      ],
      [
        "resolution_stage0_em_verifier11_ecc_1b_err_initiate",
        40,
        1
      ],
      [
        "lp_queuing_em_verifier0_ecc_1b_err_initiate",
        41,
        1
      ],
      [
        "lp_queuing_em_verifier1_ecc_1b_err_initiate",
        42,
        1
      ],
      [
        "lp_queuing_em_verifier2_ecc_1b_err_initiate",
        43,
        1
      ],
      [
        "lp_queuing_em_verifier3_ecc_1b_err_initiate",
        44,
        1
      ],
      [
        "lp_queuing_em_verifier4_ecc_1b_err_initiate",
        45,
        1
      ],
      [
        "resolution_stage1_em_verifier0_ecc_1b_err_initiate",
        46,
        1
      ],
      [
        "resolution_stage1_em_verifier1_ecc_1b_err_initiate",
        47,
        1
      ],
      [
        "resolution_stage1_em_verifier2_ecc_1b_err_initiate",
        48,
        1
      ],
      [
        "resolution_stage1_em_verifier3_ecc_1b_err_initiate",
        49,
        1
      ],
      [
        "resolution_stage2_em_verifier0_ecc_1b_err_initiate",
        50,
        1
      ],
      [
        "resolution_stage2_em_verifier1_ecc_1b_err_initiate",
        51,
        1
      ],
      [
        "resolution_stage2_em_verifier2_ecc_1b_err_initiate",
        52,
        1
      ],
      [
        "resolution_stage2_em_verifier3_ecc_1b_err_initiate",
        53,
        1
      ],
      [
        "resolution_stage3_em_verifier0_ecc_1b_err_initiate",
        54,
        1
      ],
      [
        "resolution_stage3_em_verifier1_ecc_1b_err_initiate",
        55,
        1
      ],
      [
        "resolution_stage3_em_verifier2_ecc_1b_err_initiate",
        56,
        1
      ],
      [
        "resolution_stage3_em_verifier3_ecc_1b_err_initiate",
        57,
        1
      ],
      [
        "resolution_stage3_em_verifier4_ecc_1b_err_initiate",
        58,
        1
      ],
      [
        "resolution_stage3_em_verifier5_ecc_1b_err_initiate",
        59,
        1
      ]
    ]
  },
  "res_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "res",
    "width": 60,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "protection_table_slice0_stage0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "protection_table_slice0_stage1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "protection_table_slice0_stage2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "protection_table_slice0_stage3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "slice0_stage0_lb_consistence_cache_table_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "slice0_stage1_lb_consistence_cache_table_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "slice0_stage2_lb_consistence_cache_table_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "slice0_stage3_lb_consistence_cache_table_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "resolution_stage0_associated_data_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "fec_table_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "resolution_stage1_associated_data_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "resolution_stage2_associated_data_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "resolution_stage3_associated_data_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "protection_table_slice1_stage0_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "protection_table_slice1_stage1_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "protection_table_slice1_stage2_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "protection_table_slice1_stage3_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "slice0_stage0_lb_group_size_table_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "slice0_stage1_lb_group_size_table_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "slice0_stage2_lb_group_size_table_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "slice0_stage3_lb_group_size_table_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "slice1_stage0_lb_group_size_table_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "slice1_stage1_lb_group_size_table_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "slice1_stage2_lb_group_size_table_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "slice1_stage3_lb_group_size_table_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "slice1_stage0_lb_consistence_cache_table_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "slice1_stage1_lb_consistence_cache_table_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "slice1_stage2_lb_consistence_cache_table_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "slice1_stage3_lb_consistence_cache_table_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "resolution_stage0_em_verifier0_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "resolution_stage0_em_verifier1_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "resolution_stage0_em_verifier2_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "resolution_stage0_em_verifier3_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "resolution_stage0_em_verifier4_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "resolution_stage0_em_verifier5_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "resolution_stage0_em_verifier6_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "resolution_stage0_em_verifier7_ecc_2b_err_initiate",
        36,
        1
      ],
      [
        "resolution_stage0_em_verifier8_ecc_2b_err_initiate",
        37,
        1
      ],
      [
        "resolution_stage0_em_verifier9_ecc_2b_err_initiate",
        38,
        1
      ],
      [
        "resolution_stage0_em_verifier10_ecc_2b_err_initiate",
        39,
        1
      ],
      [
        "resolution_stage0_em_verifier11_ecc_2b_err_initiate",
        40,
        1
      ],
      [
        "lp_queuing_em_verifier0_ecc_2b_err_initiate",
        41,
        1
      ],
      [
        "lp_queuing_em_verifier1_ecc_2b_err_initiate",
        42,
        1
      ],
      [
        "lp_queuing_em_verifier2_ecc_2b_err_initiate",
        43,
        1
      ],
      [
        "lp_queuing_em_verifier3_ecc_2b_err_initiate",
        44,
        1
      ],
      [
        "lp_queuing_em_verifier4_ecc_2b_err_initiate",
        45,
        1
      ],
      [
        "resolution_stage1_em_verifier0_ecc_2b_err_initiate",
        46,
        1
      ],
      [
        "resolution_stage1_em_verifier1_ecc_2b_err_initiate",
        47,
        1
      ],
      [
        "resolution_stage1_em_verifier2_ecc_2b_err_initiate",
        48,
        1
      ],
      [
        "resolution_stage1_em_verifier3_ecc_2b_err_initiate",
        49,
        1
      ],
      [
        "resolution_stage2_em_verifier0_ecc_2b_err_initiate",
        50,
        1
      ],
      [
        "resolution_stage2_em_verifier1_ecc_2b_err_initiate",
        51,
        1
      ],
      [
        "resolution_stage2_em_verifier2_ecc_2b_err_initiate",
        52,
        1
      ],
      [
        "resolution_stage2_em_verifier3_ecc_2b_err_initiate",
        53,
        1
      ],
      [
        "resolution_stage3_em_verifier0_ecc_2b_err_initiate",
        54,
        1
      ],
      [
        "resolution_stage3_em_verifier1_ecc_2b_err_initiate",
        55,
        1
      ],
      [
        "resolution_stage3_em_verifier2_ecc_2b_err_initiate",
        56,
        1
      ],
      [
        "resolution_stage3_em_verifier3_ecc_2b_err_initiate",
        57,
        1
      ],
      [
        "resolution_stage3_em_verifier4_ecc_2b_err_initiate",
        58,
        1
      ],
      [
        "resolution_stage3_em_verifier5_ecc_2b_err_initiate",
        59,
        1
      ]
    ]
  },
  "res_mem_protect_err_status": {
    "type": "register",
    "block": "res",
    "width": 60,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "protection_table_slice0_stage0_err_int",
        0,
        1
      ],
      [
        "protection_table_slice0_stage1_err_int",
        1,
        1
      ],
      [
        "protection_table_slice0_stage2_err_int",
        2,
        1
      ],
      [
        "protection_table_slice0_stage3_err_int",
        3,
        1
      ],
      [
        "slice0_stage0_lb_consistence_cache_table_err_int",
        4,
        1
      ],
      [
        "slice0_stage1_lb_consistence_cache_table_err_int",
        5,
        1
      ],
      [
        "slice0_stage2_lb_consistence_cache_table_err_int",
        6,
        1
      ],
      [
        "slice0_stage3_lb_consistence_cache_table_err_int",
        7,
        1
      ],
      [
        "resolution_stage0_associated_data_err_int",
        8,
        1
      ],
      [
        "fec_table_err_int",
        9,
        1
      ],
      [
        "resolution_stage1_associated_data_err_int",
        10,
        1
      ],
      [
        "resolution_stage2_associated_data_err_int",
        11,
        1
      ],
      [
        "resolution_stage3_associated_data_err_int",
        12,
        1
      ],
      [
        "protection_table_slice1_stage0_err_int",
        13,
        1
      ],
      [
        "protection_table_slice1_stage1_err_int",
        14,
        1
      ],
      [
        "protection_table_slice1_stage2_err_int",
        15,
        1
      ],
      [
        "protection_table_slice1_stage3_err_int",
        16,
        1
      ],
      [
        "slice0_stage0_lb_group_size_table_err_int",
        17,
        1
      ],
      [
        "slice0_stage1_lb_group_size_table_err_int",
        18,
        1
      ],
      [
        "slice0_stage2_lb_group_size_table_err_int",
        19,
        1
      ],
      [
        "slice0_stage3_lb_group_size_table_err_int",
        20,
        1
      ],
      [
        "slice1_stage0_lb_group_size_table_err_int",
        21,
        1
      ],
      [
        "slice1_stage1_lb_group_size_table_err_int",
        22,
        1
      ],
      [
        "slice1_stage2_lb_group_size_table_err_int",
        23,
        1
      ],
      [
        "slice1_stage3_lb_group_size_table_err_int",
        24,
        1
      ],
      [
        "slice1_stage0_lb_consistence_cache_table_err_int",
        25,
        1
      ],
      [
        "slice1_stage1_lb_consistence_cache_table_err_int",
        26,
        1
      ],
      [
        "slice1_stage2_lb_consistence_cache_table_err_int",
        27,
        1
      ],
      [
        "slice1_stage3_lb_consistence_cache_table_err_int",
        28,
        1
      ],
      [
        "resolution_stage0_em_verifier0_err_int",
        29,
        1
      ],
      [
        "resolution_stage0_em_verifier1_err_int",
        30,
        1
      ],
      [
        "resolution_stage0_em_verifier2_err_int",
        31,
        1
      ],
      [
        "resolution_stage0_em_verifier3_err_int",
        32,
        1
      ],
      [
        "resolution_stage0_em_verifier4_err_int",
        33,
        1
      ],
      [
        "resolution_stage0_em_verifier5_err_int",
        34,
        1
      ],
      [
        "resolution_stage0_em_verifier6_err_int",
        35,
        1
      ],
      [
        "resolution_stage0_em_verifier7_err_int",
        36,
        1
      ],
      [
        "resolution_stage0_em_verifier8_err_int",
        37,
        1
      ],
      [
        "resolution_stage0_em_verifier9_err_int",
        38,
        1
      ],
      [
        "resolution_stage0_em_verifier10_err_int",
        39,
        1
      ],
      [
        "resolution_stage0_em_verifier11_err_int",
        40,
        1
      ],
      [
        "lp_queuing_em_verifier0_err_int",
        41,
        1
      ],
      [
        "lp_queuing_em_verifier1_err_int",
        42,
        1
      ],
      [
        "lp_queuing_em_verifier2_err_int",
        43,
        1
      ],
      [
        "lp_queuing_em_verifier3_err_int",
        44,
        1
      ],
      [
        "lp_queuing_em_verifier4_err_int",
        45,
        1
      ],
      [
        "resolution_stage1_em_verifier0_err_int",
        46,
        1
      ],
      [
        "resolution_stage1_em_verifier1_err_int",
        47,
        1
      ],
      [
        "resolution_stage1_em_verifier2_err_int",
        48,
        1
      ],
      [
        "resolution_stage1_em_verifier3_err_int",
        49,
        1
      ],
      [
        "resolution_stage2_em_verifier0_err_int",
        50,
        1
      ],
      [
        "resolution_stage2_em_verifier1_err_int",
        51,
        1
      ],
      [
        "resolution_stage2_em_verifier2_err_int",
        52,
        1
      ],
      [
        "resolution_stage2_em_verifier3_err_int",
        53,
        1
      ],
      [
        "resolution_stage3_em_verifier0_err_int",
        54,
        1
      ],
      [
        "resolution_stage3_em_verifier1_err_int",
        55,
        1
      ],
      [
        "resolution_stage3_em_verifier2_err_int",
        56,
        1
      ],
      [
        "resolution_stage3_em_verifier3_err_int",
        57,
        1
      ],
      [
        "resolution_stage3_em_verifier4_err_int",
        58,
        1
      ],
      [
        "resolution_stage3_em_verifier5_err_int",
        59,
        1
      ]
    ]
  },
  "res_selected_ser_error_info": {
    "type": "register",
    "block": "res",
    "width": 19,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        17
      ],
      [
        "mem_err_type",
        17,
        2
      ]
    ]
  },
  "res_ser_error_debug_configuration": {
    "type": "register",
    "block": "res",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "res_ecc_1b_err_debug": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "res_ecc_2b_err_debug": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "res_tcam_scan_period_cfg": {
    "type": "register",
    "block": "res",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "res_counter_timer": {
    "type": "register",
    "block": "res",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "res_counter_timer_trigger_reg": {
    "type": "register",
    "block": "res",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "res_memory_access_timeout": {
    "type": "register",
    "block": "res",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "res_broadcast_config_reg": {
    "type": "register",
    "block": "res",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "res_memory_prot_bypass": {
    "type": "register",
    "block": "res",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "res_soft_reset_configuration": {
    "type": "register",
    "block": "res",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "res_mbist_configuration": {
    "type": "register",
    "block": "res",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "res_power_down_configuration": {
    "type": "register",
    "block": "res",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "res_spare_reg": {
    "type": "register",
    "block": "res",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "res_pmro_ctrl": {
    "type": "register",
    "block": "res",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "res_pmro_status": {
    "type": "register",
    "block": "res",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "res_mirror_bus_conf_reg": {
    "type": "register",
    "block": "res",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "res_mirror_bus_status": {
    "type": "register",
    "block": "res",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "res_device_time_offset_cfg": {
    "type": "register",
    "block": "res",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "res_debug_data_bus_register": {
    "type": "register",
    "block": "res",
    "width": 32,
    "desc": "This register will contain selected-data-bus for debug. The selected data is taken from a full data-bus which can be seen in idb_res_dbg.v file. ",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "res_debug_data_select_register": {
    "type": "register",
    "block": "res",
    "width": 8,
    "desc": "This reg is the selector of the debug_data_bus",
    "fields": [
      [
        "debug_data_select",
        0,
        8
      ]
    ]
  },
  "res_init_done_status_register": {
    "type": "register",
    "block": "res",
    "width": 1,
    "desc": "res_init_done_status_reg",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "res_cfg_enable32k_em_group": {
    "type": "register",
    "block": "res",
    "width": 1,
    "desc": "configuration that enables the usage of 32k in the 1st stage of the IDB resolution",
    "fields": [
      [
        "enable32k_em_group",
        0,
        1
      ]
    ]
  },
  "res_slice0_stage_lb_consistence_cache_clk_and_timer_attr": {
    "type": "register",
    "block": "res",
    "width": 15,
    "desc": "This register Controls the cache-time-stamp resolution/scale The design contains 32b counter which counts clock-cycles: * Initialize on reset: clks-counter = 0 * Increment every clk This register defines the desired time-scale out of this reg. The picked time-scale is used for both the following: 1. The time-stamp that be taken and wrriten to the cache-table. 2. The threshold in which the cache-entry will be aged.",
    "fields": [
      [
        "slice0_stage_lb_consistence_cache_clock_offset",
        0,
        5
      ],
      [
        "slice0_stage_lb_consistence_cache_clock_threshold",
        5,
        10
      ]
    ]
  },
  "res_slice0_stage_lb_consistence_cache_count": {
    "type": "register",
    "block": "res",
    "width": 13,
    "desc": "Number of elements currently in cache. When cache is active, this register is managed by the Design. Because each cahce is read only when packet arrives with the corresponding LB-Key, it is posibble that before changing another group-size, the cache-count will not be 0. for this reason: Before changing Group-size of another gourp-id, If (cache-counter =! 0) then the User should do the following: a. Write 0 to all entries in the cache-table (that\ufffds done for reser the \ufffdvalid\ufffd bit in the table) b. Write 0 to this registen (cache-count = 0)",
    "fields": [
      [
        "slice0_stage_lb_consistence_cache_count_r",
        0,
        13
      ]
    ]
  },
  "res_lp_queuing_destination_mask": {
    "type": "register",
    "block": "res",
    "width": 20,
    "desc": "LP Queuing Destination Mask",
    "fields": [
      [
        "destination_mask",
        0,
        20
      ]
    ]
  },
  "res_resolution_interrupts": {
    "type": "register",
    "block": "res",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "slice_lp_queuing_em_miss_interrupt",
        0,
        1
      ],
      [
        "slice_stage0_em_miss_interrupt",
        1,
        1
      ],
      [
        "slice_stage1_em_miss_interrupt",
        2,
        1
      ],
      [
        "slice_stage2_em_miss_interrupt",
        3,
        1
      ],
      [
        "slice_stage3_em_miss_interrupt",
        4,
        1
      ],
      [
        "slice_lp_queuing_prev_core_push_to_full_interrupt",
        5,
        1
      ],
      [
        "slice_stage0_prev_core_push_to_full_interrupt",
        6,
        1
      ],
      [
        "slice_stage1_prev_core_push_to_full_interrupt",
        7,
        1
      ],
      [
        "slice_stage2_prev_core_push_to_full_interrupt",
        8,
        1
      ],
      [
        "slice_stage3_prev_core_push_to_full_interrupt",
        9,
        1
      ],
      [
        "slice_resolution_ttl",
        10,
        1
      ]
    ]
  },
  "res_resolution_interrupts_mask": {
    "type": "register",
    "block": "res",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "slice_lp_queuing_em_miss_interrupt_mask",
        0,
        1
      ],
      [
        "slice_stage0_em_miss_interrupt_mask",
        1,
        1
      ],
      [
        "slice_stage1_em_miss_interrupt_mask",
        2,
        1
      ],
      [
        "slice_stage2_em_miss_interrupt_mask",
        3,
        1
      ],
      [
        "slice_stage3_em_miss_interrupt_mask",
        4,
        1
      ],
      [
        "slice_lp_queuing_prev_core_push_to_full_interrupt_mask",
        5,
        1
      ],
      [
        "slice_stage0_prev_core_push_to_full_interrupt_mask",
        6,
        1
      ],
      [
        "slice_stage1_prev_core_push_to_full_interrupt_mask",
        7,
        1
      ],
      [
        "slice_stage2_prev_core_push_to_full_interrupt_mask",
        8,
        1
      ],
      [
        "slice_stage3_prev_core_push_to_full_interrupt_mask",
        9,
        1
      ],
      [
        "slice_resolution_ttl_mask",
        10,
        1
      ]
    ]
  },
  "res_resolution_interrupts_test": {
    "type": "register",
    "block": "res",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "slice_lp_queuing_em_miss_interrupt_test",
        0,
        1
      ],
      [
        "slice_stage0_em_miss_interrupt_test",
        1,
        1
      ],
      [
        "slice_stage1_em_miss_interrupt_test",
        2,
        1
      ],
      [
        "slice_stage2_em_miss_interrupt_test",
        3,
        1
      ],
      [
        "slice_stage3_em_miss_interrupt_test",
        4,
        1
      ],
      [
        "slice_lp_queuing_prev_core_push_to_full_interrupt_test",
        5,
        1
      ],
      [
        "slice_stage0_prev_core_push_to_full_interrupt_test",
        6,
        1
      ],
      [
        "slice_stage1_prev_core_push_to_full_interrupt_test",
        7,
        1
      ],
      [
        "slice_stage2_prev_core_push_to_full_interrupt_test",
        8,
        1
      ],
      [
        "slice_stage3_prev_core_push_to_full_interrupt_test",
        9,
        1
      ],
      [
        "slice_resolution_ttl_test",
        10,
        1
      ]
    ]
  },
  "res_core_bubble_logic_counter_cfg": {
    "type": "register",
    "block": "res",
    "width": 67,
    "desc": "Core Bubble Logic Counter Configuration",
    "fields": [
      [
        "core_prev_core_ordy_num_of_clks_before_bubble",
        0,
        10
      ],
      [
        "core_prev_core_alm_full_num_of_clks_before_bubble",
        10,
        10
      ],
      [
        "core_top_alm_full_num_of_clks_before_bubble",
        20,
        10
      ],
      [
        "core_prev_core0_alm_full_cfg",
        30,
        6
      ],
      [
        "core_prev_core1_alm_full_cfg",
        36,
        6
      ],
      [
        "core_top_alm_full_cfg",
        42,
        3
      ],
      [
        "core_prev_core_to_prev_core_num_of_clks_before_bubble",
        45,
        10
      ],
      [
        "core_prev_core0_to_prev_core_alm_full_cfg",
        55,
        6
      ],
      [
        "core_prev_core1_to_prev_core_alm_full_cfg",
        61,
        6
      ]
    ]
  },
  "res_core3_bubble_logic_counter_cfg": {
    "type": "register",
    "block": "res",
    "width": 67,
    "desc": "Core Bubble Logic Counter Configuration",
    "fields": [
      [
        "core3_prev_core_ordy_num_of_clks_before_bubble",
        0,
        10
      ],
      [
        "core3_prev_core_alm_full_num_of_clks_before_bubble",
        10,
        10
      ],
      [
        "core3_top_alm_full_num_of_clks_before_bubble",
        20,
        10
      ],
      [
        "core3_prev_core0_alm_full_cfg",
        30,
        6
      ],
      [
        "core3_prev_core1_alm_full_cfg",
        36,
        6
      ],
      [
        "core3_top_alm_full_cfg",
        42,
        3
      ],
      [
        "core3_prev_core_to_prev_core_num_of_clks_before_bubble",
        45,
        10
      ],
      [
        "core3_prev_core0_to_prev_core_alm_full_cfg",
        55,
        6
      ],
      [
        "core3_prev_core1_to_prev_core_alm_full_cfg",
        61,
        6
      ]
    ]
  },
  "res_lp_queuing_bubble_logic_counter_cfg": {
    "type": "register",
    "block": "res",
    "width": 39,
    "desc": "Core Bubble Logic Counter Configuration",
    "fields": [
      [
        "lp_queuing_prev_core_ordy_num_of_clks_before_bubble",
        0,
        10
      ],
      [
        "lp_queuing_prev_core_alm_full_num_of_clks_before_bubble",
        10,
        10
      ],
      [
        "lp_queuing_top_alm_full_num_of_clks_before_bubble",
        20,
        10
      ],
      [
        "lp_queuing_prev_core_alm_full_cfg",
        30,
        6
      ],
      [
        "lp_queuing_top_alm_full_cfg",
        36,
        3
      ]
    ]
  },
  "res_pipe_behavior_cfg": {
    "type": "register",
    "block": "res",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "resolution_slice_send_all_to_fec",
        0,
        1
      ],
      [
        "resolution_fec_next_stage_mode",
        1,
        2
      ],
      [
        "resolution_core0_next_stage_mode",
        3,
        2
      ],
      [
        "resolution_core1_next_stage_mode",
        5,
        2
      ]
    ]
  },
  "res_slice1_stage_lb_consistence_cache_clk_and_timer_attr": {
    "type": "register",
    "block": "res",
    "width": 15,
    "desc": "This register Controls the cache-time-stamp resolution/scale The design contains 32b counter which counts clock-cycles: * Initialize on reset: clks-counter = 0 * Increment every clk This register defines the desired time-scale out of this reg. The picked time-scale is used for both the following: 1. The time-stamp that be taken and wrriten to the cache-table. 2. The threshold in which the cache-entry will be aged.",
    "fields": [
      [
        "slice1_stage_lb_consistence_cache_clock_offset",
        0,
        5
      ],
      [
        "slice1_stage_lb_consistence_cache_clock_threshold",
        5,
        10
      ]
    ]
  },
  "res_slice1_stage_lb_consistence_cache_count": {
    "type": "register",
    "block": "res",
    "width": 13,
    "desc": "Number of elements currently in cache. When cache is active, this register is managed by the Design. Because each cahce is read only when packet arrives with the corresponding LB-Key, it is posibble that before changing another group-size, the cache-count will not be 0. for this reason: Before changing Group-size of another gourp-id, If (cache-counter =! 0) then the User should do the following: a. Write 0 to all entries in the cache-table (that\ufffds done for reser the \ufffdvalid\ufffd bit in the table) b. Write 0 to this registen (cache-count = 0)",
    "fields": [
      [
        "slice1_stage_lb_consistence_cache_count_r",
        0,
        13
      ]
    ]
  },
  "res_slice1_stage0_lb_consistence_attr": {
    "type": "register",
    "block": "res",
    "width": 76,
    "desc": "Consistence attributes is an external register used to inform the design that a group-size had been changed, and start a consistency sequence. 1. When Group-size changed, the user should write to the external regs the following: a. Valid = 1'b1 b. Cache-Group-id (the group which had changed) c. Prev-group-size (the value which is found in the group-size-table) d. Current-group-size (the new group-size = Prev-group-size\ufffd1) e. Timer-value (32b in clks resolution) //this starts the \ufffdlearn\ufffd timer f. Removed-member-id + valid (if group-size decreased) 2. Before changing Group-size of another gourp-id, write to the external regs the following: a. Valid = 1'b0 ",
    "fields": [
      [
        "slice1_stage0_lb_consistence_group_id_r",
        0,
        15
      ],
      [
        "slice1_stage0_lb_consistence_valid_r",
        15,
        1
      ],
      [
        "slice1_stage0_lb_consistence_prev_group_size_r",
        16,
        9
      ],
      [
        "slice1_stage0_lb_consistence_curr_group_size_r",
        25,
        9
      ],
      [
        "slice1_stage0_lb_consistence_removed_member_id_r",
        34,
        9
      ],
      [
        "slice1_stage0_lb_consistence_removed_member_id_valid_r",
        43,
        1
      ],
      [
        "slice1_stage0_lb_consistence_timer_value_r",
        44,
        32
      ]
    ]
  },
  "res_slice0_stage0_lb_consistence_attr": {
    "type": "register",
    "block": "res",
    "width": 76,
    "desc": "Consistence attributes is an external register used to inform the design that a group-size had been changed, and start a consistency sequence. 1. When Group-size changed, the user should write to the external regs the following: a. Valid = 1'b1 b. Cache-Group-id (the group which had changed) c. Prev-group-size (the value which is found in the group-size-table) d. Current-group-size (the new group-size = Prev-group-size\ufffd1) e. Timer-value (32b in clks resolution) //this starts the \ufffdlearn\ufffd timer f. Removed-member-id + valid (if group-size decreased) 2. Before changing Group-size of another gourp-id, write to the external regs the following: a. Valid = 1'b0 ",
    "fields": [
      [
        "slice0_stage0_lb_consistence_group_id_r",
        0,
        15
      ],
      [
        "slice0_stage0_lb_consistence_valid_r",
        15,
        1
      ],
      [
        "slice0_stage0_lb_consistence_prev_group_size_r",
        16,
        9
      ],
      [
        "slice0_stage0_lb_consistence_curr_group_size_r",
        25,
        9
      ],
      [
        "slice0_stage0_lb_consistence_removed_member_id_r",
        34,
        9
      ],
      [
        "slice0_stage0_lb_consistence_removed_member_id_valid_r",
        43,
        1
      ],
      [
        "slice0_stage0_lb_consistence_timer_value_r",
        44,
        32
      ]
    ]
  },
  "res_slice1_stage1_lb_consistence_attr": {
    "type": "register",
    "block": "res",
    "width": 75,
    "desc": "Consistence attributes is an external register used to inform the design that a group-size had been changed, and start a consistency sequence. 1. When Group-size changed, the user should write to the external regs the following: a. Valid = 1'b1 b. Cache-Group-id (the group which had changed) c. Prev-group-size (the value which is found in the group-size-table) d. Current-group-size (the new group-size = Prev-group-size\ufffd1) e. Timer-value (32b in clks resolution) //this starts the \ufffdlearn\ufffd timer f. Removed-member-id + valid (if group-size decreased) 2. Before changing Group-size of another gourp-id, write to the external regs the following: a. Valid = 1'b0 ",
    "fields": [
      [
        "slice1_stage1_lb_consistence_group_id_r",
        0,
        14
      ],
      [
        "slice1_stage1_lb_consistence_valid_r",
        14,
        1
      ],
      [
        "slice1_stage1_lb_consistence_prev_group_size_r",
        15,
        9
      ],
      [
        "slice1_stage1_lb_consistence_curr_group_size_r",
        24,
        9
      ],
      [
        "slice1_stage1_lb_consistence_removed_member_id_r",
        33,
        9
      ],
      [
        "slice1_stage1_lb_consistence_removed_member_id_valid_r",
        42,
        1
      ],
      [
        "slice1_stage1_lb_consistence_timer_value_r",
        43,
        32
      ]
    ]
  },
  "res_slice0_stage1_lb_consistence_attr": {
    "type": "register",
    "block": "res",
    "width": 75,
    "desc": "Consistence attributes is an external register used to inform the design that a group-size had been changed, and start a consistency sequence. 1. When Group-size changed, the user should write to the external regs the following: a. Valid = 1'b1 b. Cache-Group-id (the group which had changed) c. Prev-group-size (the value which is found in the group-size-table) d. Current-group-size (the new group-size = Prev-group-size\ufffd1) e. Timer-value (32b in clks resolution) //this starts the \ufffdlearn\ufffd timer f. Removed-member-id + valid (if group-size decreased) 2. Before changing Group-size of another gourp-id, write to the external regs the following: a. Valid = 1'b0 ",
    "fields": [
      [
        "slice0_stage1_lb_consistence_group_id_r",
        0,
        14
      ],
      [
        "slice0_stage1_lb_consistence_valid_r",
        14,
        1
      ],
      [
        "slice0_stage1_lb_consistence_prev_group_size_r",
        15,
        9
      ],
      [
        "slice0_stage1_lb_consistence_curr_group_size_r",
        24,
        9
      ],
      [
        "slice0_stage1_lb_consistence_removed_member_id_r",
        33,
        9
      ],
      [
        "slice0_stage1_lb_consistence_removed_member_id_valid_r",
        42,
        1
      ],
      [
        "slice0_stage1_lb_consistence_timer_value_r",
        43,
        32
      ]
    ]
  },
  "res_slice1_stage2_lb_consistence_attr": {
    "type": "register",
    "block": "res",
    "width": 75,
    "desc": "Consistence attributes is an external register used to inform the design that a group-size had been changed, and start a consistency sequence. 1. When Group-size changed, the user should write to the external regs the following: a. Valid = 1'b1 b. Cache-Group-id (the group which had changed) c. Prev-group-size (the value which is found in the group-size-table) d. Current-group-size (the new group-size = Prev-group-size\ufffd1) e. Timer-value (32b in clks resolution) //this starts the \ufffdlearn\ufffd timer f. Removed-member-id + valid (if group-size decreased) 2. Before changing Group-size of another gourp-id, write to the external regs the following: a. Valid = 1'b0 ",
    "fields": [
      [
        "slice1_stage2_lb_consistence_group_id_r",
        0,
        14
      ],
      [
        "slice1_stage2_lb_consistence_valid_r",
        14,
        1
      ],
      [
        "slice1_stage2_lb_consistence_prev_group_size_r",
        15,
        9
      ],
      [
        "slice1_stage2_lb_consistence_curr_group_size_r",
        24,
        9
      ],
      [
        "slice1_stage2_lb_consistence_removed_member_id_r",
        33,
        9
      ],
      [
        "slice1_stage2_lb_consistence_removed_member_id_valid_r",
        42,
        1
      ],
      [
        "slice1_stage2_lb_consistence_timer_value_r",
        43,
        32
      ]
    ]
  },
  "res_slice0_stage2_lb_consistence_attr": {
    "type": "register",
    "block": "res",
    "width": 75,
    "desc": "Consistence attributes is an external register used to inform the design that a group-size had been changed, and start a consistency sequence. 1. When Group-size changed, the user should write to the external regs the following: a. Valid = 1'b1 b. Cache-Group-id (the group which had changed) c. Prev-group-size (the value which is found in the group-size-table) d. Current-group-size (the new group-size = Prev-group-size\ufffd1) e. Timer-value (32b in clks resolution) //this starts the \ufffdlearn\ufffd timer f. Removed-member-id + valid (if group-size decreased) 2. Before changing Group-size of another gourp-id, write to the external regs the following: a. Valid = 1'b0 ",
    "fields": [
      [
        "slice0_stage2_lb_consistence_group_id_r",
        0,
        14
      ],
      [
        "slice0_stage2_lb_consistence_valid_r",
        14,
        1
      ],
      [
        "slice0_stage2_lb_consistence_prev_group_size_r",
        15,
        9
      ],
      [
        "slice0_stage2_lb_consistence_curr_group_size_r",
        24,
        9
      ],
      [
        "slice0_stage2_lb_consistence_removed_member_id_r",
        33,
        9
      ],
      [
        "slice0_stage2_lb_consistence_removed_member_id_valid_r",
        42,
        1
      ],
      [
        "slice0_stage2_lb_consistence_timer_value_r",
        43,
        32
      ]
    ]
  },
  "res_slice1_stage3_lb_consistence_attr": {
    "type": "register",
    "block": "res",
    "width": 75,
    "desc": "Consistence attributes is an external register used to inform the design that a group-size had been changed, and start a consistency sequence. 1. When Group-size changed, the user should write to the external regs the following: a. Valid = 1'b1 b. Cache-Group-id (the group which had changed) c. Prev-group-size (the value which is found in the group-size-table) d. Current-group-size (the new group-size = Prev-group-size\ufffd1) e. Timer-value (32b in clks resolution) //this starts the \ufffdlearn\ufffd timer f. Removed-member-id + valid (if group-size decreased) 2. Before changing Group-size of another gourp-id, write to the external regs the following: a. Valid = 1'b0 ",
    "fields": [
      [
        "slice1_stage3_lb_consistence_group_id_r",
        0,
        14
      ],
      [
        "slice1_stage3_lb_consistence_valid_r",
        14,
        1
      ],
      [
        "slice1_stage3_lb_consistence_prev_group_size_r",
        15,
        9
      ],
      [
        "slice1_stage3_lb_consistence_curr_group_size_r",
        24,
        9
      ],
      [
        "slice1_stage3_lb_consistence_removed_member_id_r",
        33,
        9
      ],
      [
        "slice1_stage3_lb_consistence_removed_member_id_valid_r",
        42,
        1
      ],
      [
        "slice1_stage3_lb_consistence_timer_value_r",
        43,
        32
      ]
    ]
  },
  "res_slice0_stage3_lb_consistence_attr": {
    "type": "register",
    "block": "res",
    "width": 75,
    "desc": "Consistence attributes is an external register used to inform the design that a group-size had been changed, and start a consistency sequence. 1. When Group-size changed, the user should write to the external regs the following: a. Valid = 1'b1 b. Cache-Group-id (the group which had changed) c. Prev-group-size (the value which is found in the group-size-table) d. Current-group-size (the new group-size = Prev-group-size\ufffd1) e. Timer-value (32b in clks resolution) //this starts the \ufffdlearn\ufffd timer f. Removed-member-id + valid (if group-size decreased) 2. Before changing Group-size of another gourp-id, write to the external regs the following: a. Valid = 1'b0 ",
    "fields": [
      [
        "slice0_stage3_lb_consistence_group_id_r",
        0,
        14
      ],
      [
        "slice0_stage3_lb_consistence_valid_r",
        14,
        1
      ],
      [
        "slice0_stage3_lb_consistence_prev_group_size_r",
        15,
        9
      ],
      [
        "slice0_stage3_lb_consistence_curr_group_size_r",
        24,
        9
      ],
      [
        "slice0_stage3_lb_consistence_removed_member_id_r",
        33,
        9
      ],
      [
        "slice0_stage3_lb_consistence_removed_member_id_valid_r",
        42,
        1
      ],
      [
        "slice0_stage3_lb_consistence_timer_value_r",
        43,
        32
      ]
    ]
  },
  "res_resolution_max_amount_of_lu_cfg": {
    "type": "register",
    "block": "res",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "slice_max_amount_of_lu_cfg",
        0,
        8
      ]
    ]
  },
  "res_resolution_ttl_cfg": {
    "type": "register",
    "block": "res",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "max_stages_allowed",
        0,
        4
      ]
    ]
  },
  "res_resolution_debug_next_core_cnt_wm": {
    "type": "register",
    "block": "res",
    "width": 68,
    "desc": "",
    "fields": [
      [
        "slice_fec_next_core0_counter_wm",
        0,
        6
      ],
      [
        "slice_fec_next_core1_counter_wm",
        6,
        6
      ],
      [
        "slice_core0_next_core0_counter_wm",
        12,
        7
      ],
      [
        "slice_core0_next_core1_counter_wm",
        19,
        7
      ],
      [
        "slice_core1_next_core0_counter_wm",
        26,
        7
      ],
      [
        "slice_core1_next_core1_counter_wm",
        33,
        7
      ],
      [
        "slice_core2_next_core0_counter_wm",
        40,
        7
      ],
      [
        "slice_core2_next_core1_counter_wm",
        47,
        7
      ],
      [
        "slice_core3_next_core0_counter_wm",
        54,
        7
      ],
      [
        "slice_core3_next_core1_counter_wm",
        61,
        7
      ]
    ]
  },
  "res_resolution_debug_bypass_fifo_wm": {
    "type": "register",
    "block": "res",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "slice_core0_bypass_fifo_wm",
        0,
        6
      ],
      [
        "slice_core1_bypass_fifo_wm",
        6,
        6
      ],
      [
        "slice_core2_bypass_fifo_wm",
        12,
        6
      ],
      [
        "slice_core3_bypass_fifo_wm",
        18,
        6
      ]
    ]
  },
  "res_resolution_debug_counters": {
    "type": "register",
    "block": "res",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "slice_resolution_input",
        0,
        64
      ],
      [
        "slice_resolution_output",
        64,
        64
      ]
    ]
  },
  "res_resolution_debug_output_wm": {
    "type": "register",
    "block": "res",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "slice_output_fifo_wm",
        0,
        8
      ]
    ]
  },
  "res_resolution_debug_input_wm": {
    "type": "register",
    "block": "res",
    "width": 14,
    "desc": "",
    "fields": [
      [
        "slice_max_amount_of_lu_in_slice_wm",
        0,
        8
      ],
      [
        "slice_input_cbr_fullness_wm",
        8,
        6
      ]
    ]
  },
  "res_resolution_stage0_em_per_bank_reg": {
    "type": "register",
    "block": "res",
    "width": 50,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "resolution_stage0_em_active_banks",
        0,
        1
      ],
      [
        "resolution_stage0_em_hash_key",
        1,
        48
      ],
      [
        "resolution_stage0_em_use_primitive_crc",
        49,
        1
      ]
    ]
  },
  "res_resolution_stage0_em_per_em_reg": {
    "type": "register",
    "block": "res",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "resolution_stage0_em_key_width",
        0,
        16
      ],
      [
        "resolution_stage0_em_auto_bubble_req",
        16,
        1
      ],
      [
        "resolution_stage0_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "res_resolution_stage0_em_cam_wm_max_reg": {
    "type": "register",
    "block": "res",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "resolution_stage0_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "res_resolution_stage0_em_access_register": {
    "type": "register",
    "block": "res",
    "width": 93,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "resolution_stage0_em_access_reg",
        0,
        93
      ]
    ]
  },
  "res_resolution_stage0_em_response_register": {
    "type": "register",
    "block": "res",
    "width": 87,
    "desc": "EM indirect access data",
    "fields": [
      [
        "resolution_stage0_em_response_valid",
        0,
        1
      ],
      [
        "resolution_stage0_em_response_reg",
        1,
        86
      ]
    ]
  },
  "res_lp_queuing_em_per_bank_reg": {
    "type": "register",
    "block": "res",
    "width": 114,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "lp_queuing_em_active_banks",
        0,
        1
      ],
      [
        "lp_queuing_em_hash_key",
        1,
        112
      ],
      [
        "lp_queuing_em_use_primitive_crc",
        113,
        1
      ]
    ]
  },
  "res_lp_queuing_em_per_em_reg": {
    "type": "register",
    "block": "res",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "lp_queuing_em_key_width",
        0,
        16
      ],
      [
        "lp_queuing_em_auto_bubble_req",
        16,
        1
      ],
      [
        "lp_queuing_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "res_lp_queuing_em_cam_wm_max_reg": {
    "type": "register",
    "block": "res",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "lp_queuing_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "res_lp_queuing_em_access_register": {
    "type": "register",
    "block": "res",
    "width": 97,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "lp_queuing_em_access_reg",
        0,
        97
      ]
    ]
  },
  "res_lp_queuing_em_response_register": {
    "type": "register",
    "block": "res",
    "width": 97,
    "desc": "EM indirect access data",
    "fields": [
      [
        "lp_queuing_em_response_valid",
        0,
        1
      ],
      [
        "lp_queuing_em_response_reg",
        1,
        96
      ]
    ]
  },
  "res_resolution_stage1_em_per_bank_reg": {
    "type": "register",
    "block": "res",
    "width": 50,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "resolution_stage1_em_active_banks",
        0,
        1
      ],
      [
        "resolution_stage1_em_hash_key",
        1,
        48
      ],
      [
        "resolution_stage1_em_use_primitive_crc",
        49,
        1
      ]
    ]
  },
  "res_resolution_stage1_em_per_em_reg": {
    "type": "register",
    "block": "res",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "resolution_stage1_em_key_width",
        0,
        16
      ],
      [
        "resolution_stage1_em_auto_bubble_req",
        16,
        1
      ],
      [
        "resolution_stage1_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "res_resolution_stage1_em_cam_wm_max_reg": {
    "type": "register",
    "block": "res",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "resolution_stage1_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "res_resolution_stage1_em_access_register": {
    "type": "register",
    "block": "res",
    "width": 81,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "resolution_stage1_em_access_reg",
        0,
        81
      ]
    ]
  },
  "res_resolution_stage1_em_response_register": {
    "type": "register",
    "block": "res",
    "width": 81,
    "desc": "EM indirect access data",
    "fields": [
      [
        "resolution_stage1_em_response_valid",
        0,
        1
      ],
      [
        "resolution_stage1_em_response_reg",
        1,
        80
      ]
    ]
  },
  "res_resolution_stage2_em_per_bank_reg": {
    "type": "register",
    "block": "res",
    "width": 50,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "resolution_stage2_em_active_banks",
        0,
        1
      ],
      [
        "resolution_stage2_em_hash_key",
        1,
        48
      ],
      [
        "resolution_stage2_em_use_primitive_crc",
        49,
        1
      ]
    ]
  },
  "res_resolution_stage2_em_per_em_reg": {
    "type": "register",
    "block": "res",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "resolution_stage2_em_key_width",
        0,
        16
      ],
      [
        "resolution_stage2_em_auto_bubble_req",
        16,
        1
      ],
      [
        "resolution_stage2_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "res_resolution_stage2_em_cam_wm_max_reg": {
    "type": "register",
    "block": "res",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "resolution_stage2_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "res_resolution_stage2_em_access_register": {
    "type": "register",
    "block": "res",
    "width": 81,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "resolution_stage2_em_access_reg",
        0,
        81
      ]
    ]
  },
  "res_resolution_stage2_em_response_register": {
    "type": "register",
    "block": "res",
    "width": 81,
    "desc": "EM indirect access data",
    "fields": [
      [
        "resolution_stage2_em_response_valid",
        0,
        1
      ],
      [
        "resolution_stage2_em_response_reg",
        1,
        80
      ]
    ]
  },
  "res_resolution_stage3_em_per_bank_reg": {
    "type": "register",
    "block": "res",
    "width": 50,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "resolution_stage3_em_active_banks",
        0,
        1
      ],
      [
        "resolution_stage3_em_hash_key",
        1,
        48
      ],
      [
        "resolution_stage3_em_use_primitive_crc",
        49,
        1
      ]
    ]
  },
  "res_resolution_stage3_em_per_em_reg": {
    "type": "register",
    "block": "res",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "resolution_stage3_em_key_width",
        0,
        16
      ],
      [
        "resolution_stage3_em_auto_bubble_req",
        16,
        1
      ],
      [
        "resolution_stage3_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "res_resolution_stage3_em_cam_wm_max_reg": {
    "type": "register",
    "block": "res",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "resolution_stage3_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "res_resolution_stage3_em_access_register": {
    "type": "register",
    "block": "res",
    "width": 80,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "resolution_stage3_em_access_reg",
        0,
        80
      ]
    ]
  },
  "res_resolution_stage3_em_response_register": {
    "type": "register",
    "block": "res",
    "width": 79,
    "desc": "EM indirect access data",
    "fields": [
      [
        "resolution_stage3_em_response_valid",
        0,
        1
      ],
      [
        "resolution_stage3_em_response_reg",
        1,
        78
      ]
    ]
  },
  "res_em_response_interrupt": {
    "type": "register",
    "block": "res",
    "width": 5,
    "desc": "EM indirect access data is valid",
    "fields": [
      [
        "resolution_stage0_em_resp",
        0,
        1
      ],
      [
        "lp_queuing_em_resp",
        1,
        1
      ],
      [
        "resolution_stage1_em_resp",
        2,
        1
      ],
      [
        "resolution_stage2_em_resp",
        3,
        1
      ],
      [
        "resolution_stage3_em_resp",
        4,
        1
      ]
    ]
  },
  "res_em_response_interrupt_mask": {
    "type": "register",
    "block": "res",
    "width": 5,
    "desc": "This register masks EmResponseInterrupt interrupt register",
    "fields": [
      [
        "resolution_stage0_em_resp_mask",
        0,
        1
      ],
      [
        "lp_queuing_em_resp_mask",
        1,
        1
      ],
      [
        "resolution_stage1_em_resp_mask",
        2,
        1
      ],
      [
        "resolution_stage2_em_resp_mask",
        3,
        1
      ],
      [
        "resolution_stage3_em_resp_mask",
        4,
        1
      ]
    ]
  },
  "res_em_response_interrupt_test": {
    "type": "register",
    "block": "res",
    "width": 5,
    "desc": "This register tests EmResponseInterrupt interrupt register",
    "fields": [
      [
        "resolution_stage0_em_resp_test",
        0,
        1
      ],
      [
        "lp_queuing_em_resp_test",
        1,
        1
      ],
      [
        "resolution_stage1_em_resp_test",
        2,
        1
      ],
      [
        "resolution_stage2_em_resp_test",
        3,
        1
      ],
      [
        "resolution_stage3_em_resp_test",
        4,
        1
      ]
    ]
  },
  "res_resolution_stage0_associated_data_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for ResolutionStage0AssociatedData memory",
    "fields": [
      [
        "resolution_stage0_associated_data_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_fec_table_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for FecTable memory",
    "fields": [
      [
        "fec_table_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_resolution_stage1_associated_data_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for ResolutionStage1AssociatedData memory",
    "fields": [
      [
        "resolution_stage1_associated_data_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_resolution_stage2_associated_data_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for ResolutionStage2AssociatedData memory",
    "fields": [
      [
        "resolution_stage2_associated_data_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_resolution_stage3_associated_data_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for ResolutionStage3AssociatedData memory",
    "fields": [
      [
        "resolution_stage3_associated_data_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_resolution_stage0_em_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for ResolutionStage0EmVerifier[n] memory",
    "fields": [
      [
        "resolution_stage0_em_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_lp_queuing_em_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for LpQueuingEmVerifier[n] memory",
    "fields": [
      [
        "lp_queuing_em_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_resolution_stage1_em_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for ResolutionStage1EmVerifier[n] memory",
    "fields": [
      [
        "resolution_stage1_em_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_resolution_stage2_em_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for ResolutionStage2EmVerifier[n] memory",
    "fields": [
      [
        "resolution_stage2_em_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_resolution_stage3_em_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "res",
    "width": 16,
    "desc": "Bubble request configurations for ResolutionStage3EmVerifier[n] memory",
    "fields": [
      [
        "resolution_stage3_em_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "res_protection_table_slice0_stage": {
    "type": "memory",
    "block": "res",
    "width": 8,
    "desc": "Protection table per stage",
    "fields": [
      [
        "protection_table_field_stage",
        0,
        8
      ]
    ]
  },
  "res_slice0_stage_lb_consistence_cache_table": {
    "type": "memory",
    "block": "res",
    "width": 20,
    "desc": "Lb consistance cache table",
    "fields": [
      [
        "valid_stage",
        0,
        1
      ],
      [
        "cache_member_id_stage",
        1,
        9
      ],
      [
        "time_stamp_stage",
        10,
        10
      ]
    ]
  },
  "res_resolution_stage0_associated_data": {
    "type": "memory",
    "block": "res",
    "width": 145,
    "desc": "Resolution stage associated data table",
    "fields": [
      [
        "resolution_stage0_associated_record",
        0,
        145
      ]
    ]
  },
  "res_entry_type_decoding_table_slice0_stage": {
    "type": "memory",
    "block": "res",
    "width": 85,
    "desc": "Entry type decoding table",
    "fields": [
      [
        "dest_offset_in_bits_stage",
        0,
        7
      ],
      [
        "dest_size_in_bits_stage",
        7,
        5
      ],
      [
        "dest_type_stage",
        12,
        6
      ],
      [
        "start_encapsulation_stage",
        18,
        1
      ],
      [
        "enc_type_stage",
        19,
        4
      ],
      [
        "field0_src_offset_in_bits_stage",
        23,
        7
      ],
      [
        "field0_size_in_bits_stage",
        30,
        5
      ],
      [
        "field0_dest_offset_in_nibbles_stage",
        35,
        5
      ],
      [
        "field1_src_offset_in_bits_stage",
        40,
        7
      ],
      [
        "field1_size_in_bits_stage",
        47,
        5
      ],
      [
        "field1_dest_offset_in_nibbles_stage",
        52,
        5
      ],
      [
        "field2_src_offset_in_bits_stage",
        57,
        7
      ],
      [
        "field2_size_in_bits_stage",
        64,
        5
      ],
      [
        "field2_dest_offset_in_nibbles_stage",
        69,
        5
      ],
      [
        "dest_offset_on_encap_data_in_nibbles_stage",
        74,
        5
      ],
      [
        "dest_size_on_encap_data_in_bits_stage",
        79,
        5
      ],
      [
        "lp_queuing_stage",
        84,
        1
      ]
    ]
  },
  "res_qos_bvn_mapping_table_slice0_stage": {
    "type": "memory",
    "block": "res",
    "width": 6,
    "desc": "Qos and Bvn mapping table",
    "fields": [
      [
        "dest_addition_stage",
        0,
        6
      ]
    ]
  },
  "res_dest_decoding_table": {
    "type": "memory",
    "block": "res",
    "width": 7,
    "desc": "destination decoding table",
    "fields": [
      [
        "table_id",
        0,
        3
      ],
      [
        "dest_type",
        3,
        1
      ],
      [
        "add_qos_mapping",
        4,
        1
      ],
      [
        "is_pbts",
        5,
        1
      ],
      [
        "destination_source_for_encap_data",
        6,
        1
      ]
    ]
  },
  "res_pbts_map_table_slice0_stage": {
    "type": "memory",
    "block": "res",
    "width": 23,
    "desc": "Pbts map table",
    "fields": [
      [
        "and_mask_stage",
        0,
        18
      ],
      [
        "destination_shift_stage",
        18,
        2
      ],
      [
        "pbts_offset_stage",
        20,
        3
      ]
    ]
  },
  "res_slice_lp_queuing_flow_encap_type_mapping": {
    "type": "memory",
    "block": "res",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "field0_offset_in_nibbles",
        0,
        5
      ],
      [
        "field1_offset_in_nibbles",
        5,
        5
      ],
      [
        "field0_size_in_bits",
        10,
        5
      ],
      [
        "field1_size_in_bits",
        15,
        5
      ]
    ]
  },
  "res_slice_lp_queuing_qos_mapping": {
    "type": "memory",
    "block": "res",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "qos_map_bvn_addition",
        0,
        3
      ]
    ]
  },
  "res_fec_table": {
    "type": "memory",
    "block": "res",
    "width": 80,
    "desc": "Resolution FEC table",
    "fields": [
      [
        "fec_table_record",
        0,
        80
      ]
    ]
  },
  "res_slice_fec_entry_type_decoding_table": {
    "type": "memory",
    "block": "res",
    "width": 85,
    "desc": "Entry type decoding table",
    "fields": [
      [
        "dest_offset_in_bits",
        0,
        7
      ],
      [
        "dest_size_in_bits",
        7,
        5
      ],
      [
        "dest_type_slice",
        12,
        6
      ],
      [
        "start_encapsulation",
        18,
        1
      ],
      [
        "enc_type",
        19,
        4
      ],
      [
        "field0_src_offset_in_bits",
        23,
        7
      ],
      [
        "field0_size_in_bits",
        30,
        5
      ],
      [
        "field0_dest_offset_in_nibbles",
        35,
        5
      ],
      [
        "field1_src_offset_in_bits",
        40,
        7
      ],
      [
        "field1_size_in_bits",
        47,
        5
      ],
      [
        "field1_dest_offset_in_nibbles",
        52,
        5
      ],
      [
        "field2_src_offset_in_bits",
        57,
        7
      ],
      [
        "field2_size_in_bits",
        64,
        5
      ],
      [
        "field2_dest_offset_in_nibbles",
        69,
        5
      ],
      [
        "dest_offset_on_encap_data_in_nibbles",
        74,
        5
      ],
      [
        "dest_size_on_encap_data_in_bits",
        79,
        5
      ],
      [
        "lp_queuing_stage",
        84,
        1
      ]
    ]
  },
  "res_slice_fec_qos_bvn_mapping_table": {
    "type": "memory",
    "block": "res",
    "width": 6,
    "desc": "Qos and Bvn mapping table",
    "fields": [
      [
        "dest_addition",
        0,
        6
      ]
    ]
  },
  "res_resolution_stage1_associated_data": {
    "type": "memory",
    "block": "res",
    "width": 145,
    "desc": "Resolution stage associated data table",
    "fields": [
      [
        "resolution_stage1_associated_record",
        0,
        145
      ]
    ]
  },
  "res_resolution_stage2_associated_data": {
    "type": "memory",
    "block": "res",
    "width": 145,
    "desc": "Resolution stage associated data table",
    "fields": [
      [
        "resolution_stage2_associated_record",
        0,
        145
      ]
    ]
  },
  "res_resolution_stage3_associated_data": {
    "type": "memory",
    "block": "res",
    "width": 145,
    "desc": "Resolution stage associated data table",
    "fields": [
      [
        "resolution_stage3_associated_record",
        0,
        145
      ]
    ]
  },
  "res_protection_table_slice1_stage": {
    "type": "memory",
    "block": "res",
    "width": 8,
    "desc": "Protection table per stage",
    "fields": [
      [
        "protection_table_field_stage",
        0,
        8
      ]
    ]
  },
  "res_slice0_stage0_lb_group_size_table": {
    "type": "memory",
    "block": "res",
    "width": 10,
    "desc": "Port-DSP-LB-Group-Size-Table: If:   payload.enable-consistence == 1'b1 &&    (consistence-regs.valid == 1'b1) &&    (consistence-regs.group-id == in-group-id) than Consistence logic is done for the member-id-calculation Else: Regular member-id-calculation (according to payload.group-size and in-lb-key)",
    "fields": [
      [
        "enable_consistence_stage0",
        0,
        1
      ],
      [
        "group_size_stage0",
        1,
        9
      ]
    ]
  },
  "res_slice0_stage1_lb_group_size_table": {
    "type": "memory",
    "block": "res",
    "width": 10,
    "desc": "Port-DSP-LB-Group-Size-Table: If:   payload.enable-consistence == 1'b1 &&    (consistence-regs.valid == 1'b1) &&    (consistence-regs.group-id == in-group-id) than Consistence logic is done for the member-id-calculation Else: Regular member-id-calculation (according to payload.group-size and in-lb-key)",
    "fields": [
      [
        "enable_consistence_stage1",
        0,
        1
      ],
      [
        "group_size_stage1",
        1,
        9
      ]
    ]
  },
  "res_slice0_stage2_lb_group_size_table": {
    "type": "memory",
    "block": "res",
    "width": 10,
    "desc": "Port-DSP-LB-Group-Size-Table: If:   payload.enable-consistence == 1'b1 &&    (consistence-regs.valid == 1'b1) &&    (consistence-regs.group-id == in-group-id) than Consistence logic is done for the member-id-calculation Else: Regular member-id-calculation (according to payload.group-size and in-lb-key)",
    "fields": [
      [
        "enable_consistence_stage2",
        0,
        1
      ],
      [
        "group_size_stage2",
        1,
        9
      ]
    ]
  },
  "res_slice0_stage3_lb_group_size_table": {
    "type": "memory",
    "block": "res",
    "width": 10,
    "desc": "Port-DSP-LB-Group-Size-Table: If:   payload.enable-consistence == 1'b1 &&    (consistence-regs.valid == 1'b1) &&    (consistence-regs.group-id == in-group-id) than Consistence logic is done for the member-id-calculation Else: Regular member-id-calculation (according to payload.group-size and in-lb-key)",
    "fields": [
      [
        "enable_consistence_stage3",
        0,
        1
      ],
      [
        "group_size_stage3",
        1,
        9
      ]
    ]
  },
  "res_slice1_stage0_lb_group_size_table": {
    "type": "memory",
    "block": "res",
    "width": 10,
    "desc": "Port-DSP-LB-Group-Size-Table: If:   payload.enable-consistence == 1'b1 &&    (consistence-regs.valid == 1'b1) &&    (consistence-regs.group-id == in-group-id) than Consistence logic is done for the member-id-calculation Else: Regular member-id-calculation (according to payload.group-size and in-lb-key)",
    "fields": [
      [
        "enable_consistence_stage0",
        0,
        1
      ],
      [
        "group_size_stage0",
        1,
        9
      ]
    ]
  },
  "res_slice1_stage1_lb_group_size_table": {
    "type": "memory",
    "block": "res",
    "width": 10,
    "desc": "Port-DSP-LB-Group-Size-Table: If:   payload.enable-consistence == 1'b1 &&    (consistence-regs.valid == 1'b1) &&    (consistence-regs.group-id == in-group-id) than Consistence logic is done for the member-id-calculation Else: Regular member-id-calculation (according to payload.group-size and in-lb-key)",
    "fields": [
      [
        "enable_consistence_stage1",
        0,
        1
      ],
      [
        "group_size_stage1",
        1,
        9
      ]
    ]
  },
  "res_slice1_stage2_lb_group_size_table": {
    "type": "memory",
    "block": "res",
    "width": 10,
    "desc": "Port-DSP-LB-Group-Size-Table: If:   payload.enable-consistence == 1'b1 &&    (consistence-regs.valid == 1'b1) &&    (consistence-regs.group-id == in-group-id) than Consistence logic is done for the member-id-calculation Else: Regular member-id-calculation (according to payload.group-size and in-lb-key)",
    "fields": [
      [
        "enable_consistence_stage2",
        0,
        1
      ],
      [
        "group_size_stage2",
        1,
        9
      ]
    ]
  },
  "res_slice1_stage3_lb_group_size_table": {
    "type": "memory",
    "block": "res",
    "width": 10,
    "desc": "Port-DSP-LB-Group-Size-Table: If:   payload.enable-consistence == 1'b1 &&    (consistence-regs.valid == 1'b1) &&    (consistence-regs.group-id == in-group-id) than Consistence logic is done for the member-id-calculation Else: Regular member-id-calculation (according to payload.group-size and in-lb-key)",
    "fields": [
      [
        "enable_consistence_stage3",
        0,
        1
      ],
      [
        "group_size_stage3",
        1,
        9
      ]
    ]
  },
  "res_qos_bvn_mapping_table_slice1_stage": {
    "type": "memory",
    "block": "res",
    "width": 6,
    "desc": "Qos and Bvn mapping table",
    "fields": [
      [
        "dest_addition_stage",
        0,
        6
      ]
    ]
  },
  "res_entry_type_decoding_table_slice1_stage": {
    "type": "memory",
    "block": "res",
    "width": 85,
    "desc": "Entry type decoding table",
    "fields": [
      [
        "dest_offset_in_bits_stage",
        0,
        7
      ],
      [
        "dest_size_in_bits_stage",
        7,
        5
      ],
      [
        "dest_type_stage",
        12,
        6
      ],
      [
        "start_encapsulation_stage",
        18,
        1
      ],
      [
        "enc_type_stage",
        19,
        4
      ],
      [
        "field0_src_offset_in_bits_stage",
        23,
        7
      ],
      [
        "field0_size_in_bits_stage",
        30,
        5
      ],
      [
        "field0_dest_offset_in_nibbles_stage",
        35,
        5
      ],
      [
        "field1_src_offset_in_bits_stage",
        40,
        7
      ],
      [
        "field1_size_in_bits_stage",
        47,
        5
      ],
      [
        "field1_dest_offset_in_nibbles_stage",
        52,
        5
      ],
      [
        "field2_src_offset_in_bits_stage",
        57,
        7
      ],
      [
        "field2_size_in_bits_stage",
        64,
        5
      ],
      [
        "field2_dest_offset_in_nibbles_stage",
        69,
        5
      ],
      [
        "dest_offset_on_encap_data_in_nibbles_stage",
        74,
        5
      ],
      [
        "dest_size_on_encap_data_in_bits_stage",
        79,
        5
      ],
      [
        "lp_queuing_stage",
        84,
        1
      ]
    ]
  },
  "res_slice1_stage_lb_consistence_cache_table": {
    "type": "memory",
    "block": "res",
    "width": 20,
    "desc": "Lb consistance cache table",
    "fields": [
      [
        "valid_stage",
        0,
        1
      ],
      [
        "cache_member_id_stage",
        1,
        9
      ],
      [
        "time_stamp_stage",
        10,
        10
      ]
    ]
  },
  "res_pbts_map_table_slice1_stage": {
    "type": "memory",
    "block": "res",
    "width": 23,
    "desc": "Pbts map table",
    "fields": [
      [
        "and_mask_stage",
        0,
        18
      ],
      [
        "destination_shift_stage",
        18,
        2
      ],
      [
        "pbts_offset_stage",
        20,
        3
      ]
    ]
  },
  "res_resolution_stage0_em_verifier": {
    "type": "memory",
    "block": "res",
    "width": 56,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "resolution_stage0_em_verifier_data",
        0,
        56
      ]
    ]
  },
  "res_resolution_stage0_em_cam": {
    "type": "memory",
    "block": "res",
    "width": 24,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "resolution_stage0_em_cam_payload",
        0,
        38
      ],
      [
        "resolution_stage0_em_cam_key",
        38,
        24
      ],
      [
        "resolution_stage0_em_cam_valid",
        62,
        1
      ]
    ]
  },
  "res_lp_queuing_em_verifier": {
    "type": "memory",
    "block": "res",
    "width": 72,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "lp_queuing_em_verifier_data",
        0,
        72
      ]
    ]
  },
  "res_lp_queuing_em_cam": {
    "type": "memory",
    "block": "res",
    "width": 56,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "lp_queuing_em_cam_payload",
        0,
        19
      ],
      [
        "lp_queuing_em_cam_key",
        19,
        56
      ],
      [
        "lp_queuing_em_cam_valid",
        75,
        1
      ]
    ]
  },
  "res_resolution_stage1_em_verifier": {
    "type": "memory",
    "block": "res",
    "width": 54,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "resolution_stage1_em_verifier_data",
        0,
        54
      ]
    ]
  },
  "res_resolution_stage1_em_cam": {
    "type": "memory",
    "block": "res",
    "width": 24,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "resolution_stage1_em_cam_payload",
        0,
        35
      ],
      [
        "resolution_stage1_em_cam_key",
        35,
        24
      ],
      [
        "resolution_stage1_em_cam_valid",
        59,
        1
      ]
    ]
  },
  "res_resolution_stage2_em_verifier": {
    "type": "memory",
    "block": "res",
    "width": 54,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "resolution_stage2_em_verifier_data",
        0,
        54
      ]
    ]
  },
  "res_resolution_stage2_em_cam": {
    "type": "memory",
    "block": "res",
    "width": 24,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "resolution_stage2_em_cam_payload",
        0,
        35
      ],
      [
        "resolution_stage2_em_cam_key",
        35,
        24
      ],
      [
        "resolution_stage2_em_cam_valid",
        59,
        1
      ]
    ]
  },
  "res_resolution_stage3_em_verifier": {
    "type": "memory",
    "block": "res",
    "width": 55,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "resolution_stage3_em_verifier_data",
        0,
        55
      ]
    ]
  },
  "res_resolution_stage3_em_cam": {
    "type": "memory",
    "block": "res",
    "width": 24,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "resolution_stage3_em_cam_payload",
        0,
        34
      ],
      [
        "resolution_stage3_em_cam_key",
        34,
        24
      ],
      [
        "resolution_stage3_em_cam_valid",
        58,
        1
      ]
    ]
  },
  "top_pwrup_cfg_core_pll_reg": {
    "type": "register",
    "block": "top",
    "width": 29,
    "desc": "Power up Configuration Core PLL Register",
    "fields": [
      [
        "core_pll_override",
        0,
        1
      ],
      [
        "core_pll_bypass_en",
        1,
        1
      ],
      [
        "core_pll_cfg_divf",
        2,
        10
      ],
      [
        "core_pll_cfg_divq",
        12,
        8
      ],
      [
        "core_pll_cfg_divr",
        20,
        6
      ],
      [
        "core_pll_cfg_range",
        26,
        3
      ]
    ]
  },
  "top_pwrup_cfg_reset_fsm_reg": {
    "type": "register",
    "block": "top",
    "width": 7,
    "desc": "Power up Configuration Reset FSM Register",
    "fields": [
      [
        "rst_fsm_override",
        0,
        1
      ],
      [
        "rst_fsm_skip_fuse_read",
        1,
        1
      ],
      [
        "rst_fsm_skip_mem_repair",
        2,
        1
      ],
      [
        "rst_fsm_skip_warm_up",
        3,
        1
      ],
      [
        "rst_fsm_skip_spi_read",
        4,
        1
      ],
      [
        "rst_fsm_keep_ip_async_rstn",
        5,
        1
      ],
      [
        "rst_fsm_keep_pcie_rstn",
        6,
        1
      ]
    ]
  },
  "top_pwrup_cfg_warmup_reg": {
    "type": "register",
    "block": "top",
    "width": 31,
    "desc": "Power up Configuration for Reset FSM Warm up",
    "fields": [
      [
        "warm_up_cnt_override",
        0,
        1
      ],
      [
        "warm_up_cnt_val",
        1,
        30
      ]
    ]
  },
  "top_pwrup_cfg_i2c_device_id": {
    "type": "register",
    "block": "top",
    "width": 9,
    "desc": "Power up Configuration for I2C device ID",
    "fields": [
      [
        "i2c_device_id_lsb_override",
        0,
        1
      ],
      [
        "i2c_device_id_lsb",
        1,
        3
      ],
      [
        "i2c_device_id_msb_override",
        4,
        1
      ],
      [
        "i2c_device_id_msb",
        5,
        4
      ]
    ]
  },
  "top_pwrup_cfg_device_id_extension": {
    "type": "register",
    "block": "top",
    "width": 6,
    "desc": "Power up Configuration for Device ID Extension",
    "fields": [
      [
        "device_id_ext_override",
        0,
        1
      ],
      [
        "device_id_ext",
        1,
        5
      ]
    ]
  },
  "top_pwrup_cfg_pcie_reg": {
    "type": "register",
    "block": "top",
    "width": 4,
    "desc": "Power up Configuration for PCIe",
    "fields": [
      [
        "pcie_cfg_override",
        0,
        1
      ],
      [
        "pcie_generation_select",
        1,
        2
      ],
      [
        "pcie_lane_count",
        3,
        1
      ]
    ]
  },
  "top_pwrup_cfg_svs_reg": {
    "type": "register",
    "block": "top",
    "width": 3,
    "desc": "Power up Configuration SVS (Voltage scaling)",
    "fields": [
      [
        "svs_override",
        0,
        1
      ],
      [
        "svs",
        1,
        2
      ]
    ]
  },
  "top_reset_mngr_cfg_reg": {
    "type": "register",
    "block": "top",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "force_async_rstn_en",
        0,
        1
      ],
      [
        "force_async_rstn_value",
        1,
        1
      ]
    ]
  },
  "top_mbist_ctrl_cfg_reg": {
    "type": "register",
    "block": "top",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "smart_override_en",
        0,
        1
      ],
      [
        "smart",
        1,
        1
      ],
      [
        "udr_load",
        2,
        1
      ],
      [
        "bist_run",
        3,
        1
      ],
      [
        "bisr_run",
        4,
        1
      ],
      [
        "bihr_run",
        5,
        1
      ],
      [
        "fuse_mr",
        6,
        1
      ]
    ]
  },
  "top_mbist_ctrl_ring_bypass_cfg_reg0": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "ring_bypass31_0",
        0,
        32
      ]
    ]
  },
  "top_mbist_ctrl_ring_bypass_cfg_reg1": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "ring_bypass63_32",
        0,
        32
      ]
    ]
  },
  "top_mbist_ctrl_ring_bypass_cfg_reg2": {
    "type": "register",
    "block": "top",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "use_functional_ring_bypass",
        0,
        1
      ]
    ]
  },
  "top_mbist_ctrl_status_reg": {
    "type": "register",
    "block": "top",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "mbist_done",
        0,
        1
      ],
      [
        "mbist_pass",
        1,
        1
      ]
    ]
  },
  "top_fuse_write_reg": {
    "type": "register",
    "block": "top",
    "width": 1,
    "desc": "Fuse Write Configuration Register",
    "fields": [
      [
        "fuse_write_valid",
        0,
        1
      ]
    ]
  },
  "top_fuse_write_data_reg0": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_write_data0",
        0,
        32
      ]
    ]
  },
  "top_fuse_write_data_reg1": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_write_data1",
        0,
        32
      ]
    ]
  },
  "top_fuse_write_data_reg2": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_write_data2",
        0,
        32
      ]
    ]
  },
  "top_fuse_write_data_reg3": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_write_data3",
        0,
        32
      ]
    ]
  },
  "top_fuse_write_data_reg4": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_write_data4",
        0,
        32
      ]
    ]
  },
  "top_fuse_write_data_reg5": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_write_data5",
        0,
        32
      ]
    ]
  },
  "top_fuse_read_reg": {
    "type": "register",
    "block": "top",
    "width": 1,
    "desc": "Fuse Read Status Register",
    "fields": [
      [
        "fuse_read_valid",
        0,
        1
      ]
    ]
  },
  "top_fuse_read_data_reg0": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_read_data0",
        0,
        32
      ]
    ]
  },
  "top_fuse_read_data_reg1": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_read_data1",
        0,
        32
      ]
    ]
  },
  "top_fuse_read_data_reg2": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_read_data2",
        0,
        32
      ]
    ]
  },
  "top_fuse_read_data_reg3": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_read_data3",
        0,
        32
      ]
    ]
  },
  "top_fuse_read_data_reg4": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_read_data4",
        0,
        32
      ]
    ]
  },
  "top_fuse_read_data_reg5": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "fuse_read_data5",
        0,
        32
      ]
    ]
  },
  "top_jtag_override_reg": {
    "type": "register",
    "block": "top",
    "width": 4,
    "desc": "JTag Override Configuration Register",
    "fields": [
      [
        "cpu_jtag_override",
        0,
        1
      ],
      [
        "cpu_pcie_jtag_override",
        1,
        1
      ],
      [
        "arc_jtag_mode",
        2,
        1
      ],
      [
        "mcu_jtag_mode",
        3,
        1
      ]
    ]
  },
  "top_obs_clk_cfg_reg": {
    "type": "register",
    "block": "top",
    "width": 8,
    "desc": "Observability Clock Configuration Register",
    "fields": [
      [
        "obs_clk_select",
        0,
        2
      ],
      [
        "core_clk_div",
        2,
        6
      ]
    ]
  },
  "top_misc_output_reg": {
    "type": "register",
    "block": "top",
    "width": 8,
    "desc": "Misc Output Register",
    "fields": [
      [
        "misc_output",
        0,
        8
      ]
    ]
  },
  "top_misc_input_reg": {
    "type": "register",
    "block": "top",
    "width": 8,
    "desc": "Misc Input Register",
    "fields": [
      [
        "misc_input",
        0,
        8
      ]
    ]
  },
  "top_top_status_reg": {
    "type": "register",
    "block": "top",
    "width": 17,
    "desc": "Top Status Register",
    "fields": [
      [
        "pll_lock_status",
        0,
        1
      ],
      [
        "tap_state",
        1,
        16
      ]
    ]
  },
  "top_mcu_cfg_reg": {
    "type": "register",
    "block": "top",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "mcu_cfg",
        0,
        2
      ]
    ]
  },
  "top_chip_id_reg": {
    "type": "register",
    "block": "top",
    "width": 32,
    "desc": "Chip ID Code Status Register",
    "fields": [
      [
        "rsrvd_code_lsb",
        0,
        1
      ],
      [
        "manufacturer_identity_code",
        1,
        11
      ],
      [
        "part_number_code",
        12,
        16
      ],
      [
        "version_code",
        28,
        4
      ]
    ]
  },
  "dram_cgm_interrupt_register": {
    "type": "register",
    "block": "dram_cgm",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "cgm_int_summary",
        1,
        1
      ]
    ]
  },
  "dram_cgm_mem_protect_interrupt": {
    "type": "register",
    "block": "dram_cgm",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "dram_cgm_mem_protect_interrupt_test": {
    "type": "register",
    "block": "dram_cgm",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "dram_cgm_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "dram_cgm",
    "width": 6,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "profile_global_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "context_status_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "context_info_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "cgm_lut_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "dram_context_age_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "cgm_deq_lut_ecc_1b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "dram_cgm_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "dram_cgm",
    "width": 6,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "profile_global_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "context_status_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "context_info_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "cgm_lut_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "dram_context_age_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "cgm_deq_lut_ecc_2b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "dram_cgm_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "dram_cgm",
    "width": 6,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "profile_global_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "context_status_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "context_info_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "cgm_lut_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "dram_context_age_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "cgm_deq_lut_ecc_1b_err_initiate",
        5,
        1
      ]
    ]
  },
  "dram_cgm_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "dram_cgm",
    "width": 6,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "profile_global_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "context_status_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "context_info_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "cgm_lut_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "dram_context_age_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "cgm_deq_lut_ecc_2b_err_initiate",
        5,
        1
      ]
    ]
  },
  "dram_cgm_mem_protect_err_status": {
    "type": "register",
    "block": "dram_cgm",
    "width": 6,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "profile_global_err_int",
        0,
        1
      ],
      [
        "context_status_err_int",
        1,
        1
      ],
      [
        "context_info_err_int",
        2,
        1
      ],
      [
        "cgm_lut_err_int",
        3,
        1
      ],
      [
        "dram_context_age_err_int",
        4,
        1
      ],
      [
        "cgm_deq_lut_err_int",
        5,
        1
      ]
    ]
  },
  "dram_cgm_selected_ser_error_info": {
    "type": "register",
    "block": "dram_cgm",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "dram_cgm_ser_error_debug_configuration": {
    "type": "register",
    "block": "dram_cgm",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "dram_cgm_ecc_1b_err_debug": {
    "type": "register",
    "block": "dram_cgm",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "dram_cgm_ecc_2b_err_debug": {
    "type": "register",
    "block": "dram_cgm",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "dram_cgm_counter_timer": {
    "type": "register",
    "block": "dram_cgm",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "dram_cgm_counter_timer_trigger_reg": {
    "type": "register",
    "block": "dram_cgm",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "dram_cgm_memory_access_timeout": {
    "type": "register",
    "block": "dram_cgm",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "dram_cgm_broadcast_config_reg": {
    "type": "register",
    "block": "dram_cgm",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "dram_cgm_memory_prot_bypass": {
    "type": "register",
    "block": "dram_cgm",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "dram_cgm_soft_reset_configuration": {
    "type": "register",
    "block": "dram_cgm",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "dram_cgm_mbist_configuration": {
    "type": "register",
    "block": "dram_cgm",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "dram_cgm_power_down_configuration": {
    "type": "register",
    "block": "dram_cgm",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "dram_cgm_spare_reg": {
    "type": "register",
    "block": "dram_cgm",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "dram_cgm_pmro_ctrl": {
    "type": "register",
    "block": "dram_cgm",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "dram_cgm_pmro_status": {
    "type": "register",
    "block": "dram_cgm",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "dram_cgm_mirror_bus_conf_reg": {
    "type": "register",
    "block": "dram_cgm",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "dram_cgm_mirror_bus_status": {
    "type": "register",
    "block": "dram_cgm",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "dram_cgm_device_time_offset_cfg": {
    "type": "register",
    "block": "dram_cgm",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "dram_cgm_init_active": {
    "type": "register",
    "block": "dram_cgm",
    "width": 1,
    "desc": "InitActiveRegister",
    "fields": [
      [
        "active",
        0,
        1
      ]
    ]
  },
  "dram_cgm_initial_config_values": {
    "type": "register",
    "block": "dram_cgm",
    "width": 20,
    "desc": "Config value ",
    "fields": [
      [
        "total_buffers_max_size",
        0,
        20
      ]
    ]
  },
  "dram_cgm_initial_config": {
    "type": "register",
    "block": "dram_cgm",
    "width": 20,
    "desc": "TotalBufferSize",
    "fields": [
      [
        "total_buffers",
        0,
        20
      ]
    ]
  },
  "dram_cgm_initial_config_pool_values": {
    "type": "register",
    "block": "dram_cgm",
    "width": 20,
    "desc": "Limit on Smax Reduction",
    "fields": [
      [
        "shared_pool_max_size",
        0,
        20
      ]
    ]
  },
  "dram_cgm_initial_config_pool_en": {
    "type": "register",
    "block": "dram_cgm",
    "width": 20,
    "desc": "Shared Pool Current Size",
    "fields": [
      [
        "shared_pool_size",
        0,
        20
      ]
    ]
  },
  "dram_cgm_shared_pool_profile_map": {
    "type": "register",
    "block": "dram_cgm",
    "width": 32,
    "desc": "Config value ",
    "fields": [
      [
        "shared_pool_map",
        0,
        32
      ]
    ]
  },
  "dram_cgm_quant_thresholds": {
    "type": "register",
    "block": "dram_cgm",
    "width": 749,
    "desc": "Config value ",
    "fields": [
      [
        "queue_size_th",
        0,
        225
      ],
      [
        "shared_pool0_th",
        225,
        112
      ],
      [
        "shared_pool1_th",
        337,
        112
      ],
      [
        "queue_age_th",
        449,
        300
      ]
    ]
  },
  "dram_cgm_cong_exp_control": {
    "type": "register",
    "block": "dram_cgm",
    "width": 128,
    "desc": "Congestion experienced control register",
    "fields": [
      [
        "cong_exp_per_profile_th",
        0,
        128
      ]
    ]
  },
  "dram_cgm_pool_max_wmk": {
    "type": "register",
    "block": "dram_cgm",
    "width": 60,
    "desc": "Max Wmk for shared pools",
    "fields": [
      [
        "total_buffers_max_wmk",
        0,
        20
      ],
      [
        "shared_pool0_max_wmk",
        20,
        20
      ],
      [
        "shared_pool1_max_wmk",
        40,
        20
      ]
    ]
  },
  "dram_cgm_cgm_int": {
    "type": "register",
    "block": "dram_cgm",
    "width": 2,
    "desc": "Interrupt register for CGM design",
    "fields": [
      [
        "total_buffers_underflow",
        0,
        1
      ],
      [
        "pool_underflow",
        1,
        1
      ]
    ]
  },
  "dram_cgm_cgm_int_mask": {
    "type": "register",
    "block": "dram_cgm",
    "width": 2,
    "desc": "This register masks CgmInt interrupt register",
    "fields": [
      [
        "total_buffers_underflow_mask",
        0,
        1
      ],
      [
        "pool_underflow_mask",
        1,
        1
      ]
    ]
  },
  "dram_cgm_cgm_int_test": {
    "type": "register",
    "block": "dram_cgm",
    "width": 2,
    "desc": "This register tests CgmInt interrupt register",
    "fields": [
      [
        "total_buffers_underflow_test",
        0,
        1
      ],
      [
        "pool_underflow_test",
        1,
        1
      ]
    ]
  },
  "dram_cgm_time_control_cfg": {
    "type": "register",
    "block": "dram_cgm",
    "width": 13,
    "desc": "Config value ",
    "fields": [
      [
        "count_enable",
        0,
        1
      ],
      [
        "cycle_count",
        1,
        12
      ]
    ]
  },
  "dram_cgm_context_msb_reg": {
    "type": "register",
    "block": "dram_cgm",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "context_msb",
        0,
        6
      ]
    ]
  },
  "dram_cgm_dram_context_aged": {
    "type": "register",
    "block": "dram_cgm",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "dram_context_is_aged",
        0,
        64
      ]
    ]
  },
  "dram_cgm_profile_global": {
    "type": "memory",
    "block": "dram_cgm",
    "width": 540,
    "desc": "Global Portion of Profiles for admission test",
    "fields": [
      [
        "shared_pool_id",
        0,
        1
      ],
      [
        "shared_resource_threshold_mode",
        1,
        1
      ],
      [
        "shared_resource_threshold_dp0",
        2,
        15
      ],
      [
        "alpha_dp0",
        17,
        5
      ],
      [
        "shared_resource_threshold_dp1",
        22,
        15
      ],
      [
        "alpha_dp1",
        37,
        5
      ],
      [
        "wred_fcn_enable",
        42,
        1
      ],
      [
        "wred_region_borders",
        43,
        285
      ],
      [
        "wred_probability_region",
        328,
        208
      ],
      [
        "wred_ema_weight",
        536,
        4
      ]
    ]
  },
  "dram_cgm_context_status": {
    "type": "memory",
    "block": "dram_cgm",
    "width": 368,
    "desc": "Last Wred Region and Average queue size. Needs to be initiated to 0",
    "fields": [
      [
        "status",
        0,
        368
      ]
    ]
  },
  "dram_cgm_context_info": {
    "type": "memory",
    "block": "dram_cgm",
    "width": 20,
    "desc": "Dram Context Info from ",
    "fields": [
      [
        "profile_num",
        0,
        5
      ],
      [
        "voq_context",
        5,
        15
      ]
    ]
  },
  "dram_cgm_cgm_lut": {
    "type": "memory",
    "block": "dram_cgm",
    "width": 48,
    "desc": "CGM Lut. Address is {profile, Queue Size, DramQueueDelayLevel} Available pool size selects the relevant entry.",
    "fields": [
      [
        "cgm_lut_result",
        0,
        48
      ]
    ]
  },
  "dram_cgm_dram_context_age": {
    "type": "memory",
    "block": "dram_cgm",
    "width": 20,
    "desc": "Dram Context Age",
    "fields": [
      [
        "queue_age",
        0,
        20
      ]
    ]
  },
  "dram_cgm_cgm_deq_lut": {
    "type": "memory",
    "block": "dram_cgm",
    "width": 32,
    "desc": "CGM Deq Lut. Address is {Profile, QueueBufferFillLevel} Available pool size selects the relevant entry.",
    "fields": [
      [
        "cgm_deq_lut_result",
        0,
        32
      ]
    ]
  },
  "counters_bank_group_interrupt_register": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 4,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "interrupt_reg0_summary",
        1,
        1
      ],
      [
        "interrupt_reg1_summary",
        2,
        1
      ],
      [
        "interrupt_reg2_summary",
        3,
        1
      ]
    ]
  },
  "counters_bank_group_mem_protect_interrupt": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_mem_protect_interrupt_test": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 6,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "counters_table0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "counters_table1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "counters_table2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "counters_aux_table0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "counters_aux_table1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "counters_aux_table2_ecc_1b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 6,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "counters_table0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "counters_table1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "counters_table2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "counters_aux_table0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "counters_aux_table1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "counters_aux_table2_ecc_2b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 6,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "counters_table0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "counters_table1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "counters_table2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "counters_aux_table0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "counters_aux_table1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "counters_aux_table2_ecc_1b_err_initiate",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 6,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "counters_table0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "counters_table1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "counters_table2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "counters_aux_table0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "counters_aux_table1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "counters_aux_table2_ecc_2b_err_initiate",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_mem_protect_err_status": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 6,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "counters_table0_err_int",
        0,
        1
      ],
      [
        "counters_table1_err_int",
        1,
        1
      ],
      [
        "counters_table2_err_int",
        2,
        1
      ],
      [
        "counters_aux_table0_err_int",
        3,
        1
      ],
      [
        "counters_aux_table1_err_int",
        4,
        1
      ],
      [
        "counters_aux_table2_err_int",
        5,
        1
      ]
    ]
  },
  "counters_bank_group_selected_ser_error_info": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "counters_bank_group_ser_error_debug_configuration": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "counters_bank_group_ecc_1b_err_debug": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "counters_bank_group_ecc_2b_err_debug": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "counters_bank_group_counter_timer": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "counters_bank_group_counter_timer_trigger_reg": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_memory_access_timeout": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "counters_bank_group_broadcast_config_reg": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "counters_bank_group_memory_prot_bypass": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_soft_reset_configuration": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_mbist_configuration": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "counters_bank_group_power_down_configuration": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_spare_reg": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "counters_bank_group_pmro_ctrl": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "counters_bank_group_pmro_status": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "counters_bank_group_mirror_bus_conf_reg": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "counters_bank_group_mirror_bus_status": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "counters_bank_group_device_time_offset_cfg": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "counters_bank_group_bank_config": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 24,
    "desc": "Configurations per bank",
    "fields": [
      [
        "bank_slice_allocation",
        0,
        3
      ],
      [
        "bank_client_allocation",
        3,
        2
      ],
      [
        "cpu_read_cc_wait_before_create_bubble",
        5,
        6
      ],
      [
        "wraparound",
        11,
        1
      ],
      [
        "ignore_pd_compensation",
        12,
        1
      ],
      [
        "compensation",
        13,
        7
      ],
      [
        "bank_counter_type",
        20,
        2
      ],
      [
        "reset_on_max_counter_read",
        22,
        1
      ],
      [
        "lm_count_and_read",
        23,
        1
      ]
    ]
  },
  "counters_bank_group_bank_group_config": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 2,
    "desc": "Bank group configuration",
    "fields": [
      [
        "tx_lm_read_result_delay",
        0,
        2
      ]
    ]
  },
  "counters_bank_group_bank_interrupt_config": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 64,
    "desc": "Bank interrupt configuration",
    "fields": [
      [
        "max_counter_interrupt_threshold",
        0,
        64
      ]
    ]
  },
  "counters_bank_group_interrupt_reg": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 3,
    "desc": "Bank interrupt register",
    "fields": [
      [
        "max_counter_crossed_threshold",
        0,
        1
      ],
      [
        "pd_config_mismatch",
        1,
        1
      ],
      [
        "lm_result_fifo_overflow",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_interrupt_reg_mask": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 3,
    "desc": "This register masks InterruptReg[3] interrupt register",
    "fields": [
      [
        "max_counter_crossed_threshold_mask",
        0,
        1
      ],
      [
        "pd_config_mismatch_mask",
        1,
        1
      ],
      [
        "lm_result_fifo_overflow_mask",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_interrupt_reg_test": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 3,
    "desc": "This register tests InterruptReg[3] interrupt register",
    "fields": [
      [
        "max_counter_crossed_threshold_test",
        0,
        1
      ],
      [
        "pd_config_mismatch_test",
        1,
        1
      ],
      [
        "lm_result_fifo_overflow_test",
        2,
        1
      ]
    ]
  },
  "counters_bank_group_max_counter_status": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 78,
    "desc": "Concurrent value of the max counter",
    "fields": [
      [
        "max_counter_address",
        0,
        14
      ],
      [
        "max_counter_value",
        14,
        64
      ]
    ]
  },
  "counters_bank_group_debug_counters": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 40,
    "desc": "Counters for debug purposes",
    "fields": [
      [
        "total_updates",
        0,
        24
      ],
      [
        "bubble_request_count",
        24,
        16
      ]
    ]
  },
  "counters_bank_group_reset_bank_trigger": {
    "type": "register",
    "block": "counters_bank_group",
    "width": 1,
    "desc": "Writing to this register trigger bank reset (activates all counters' reset bits)",
    "fields": [
      [
        "reset_bank",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_counters_table": {
    "type": "memory",
    "block": "counters_bank_group",
    "width": 128,
    "desc": "The counters' data - fields' description is for 29b PC + 35b BC counter type Each entry holds data for 1, 2 or 4 counters depending on BankCounterType configuration: 128b counter type (64b PC + 64b BC) - 1 counter per entry 64b counter types - 2 counters per entry 32b PC counter type - 4 counters per entry",
    "fields": [
      [
        "packet_count0",
        0,
        29
      ],
      [
        "byte_count0",
        29,
        35
      ],
      [
        "packet_count1",
        64,
        29
      ],
      [
        "byte_count1",
        93,
        35
      ]
    ]
  },
  "counters_bank_group_counters_aux_table": {
    "type": "memory",
    "block": "counters_bank_group",
    "width": 32,
    "desc": "Auxiliary counters data - reset bit This is a bitmap where according to configuration: 64b counter types - each bit represents one counter 32b PC counter type - each bit represents two counters 128b counter type (64b PC + 64b BC) - each second bit represents one counter, only lower one used (i.e. bit 0 represents counter \\#0, bit 1 is unused, bit 2 represents counter \\#1, bit 3 is unused etc.)",
    "fields": [
      [
        "reset_bit",
        0,
        32
      ]
    ]
  },
  "counters_interrupt_register": {
    "type": "register",
    "block": "counters",
    "width": 4,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "interrupt_reg_summary",
        1,
        1
      ],
      [
        "bank_group_interrupt_reg0_summary",
        2,
        1
      ],
      [
        "bank_group_interrupt_reg1_summary",
        3,
        1
      ]
    ]
  },
  "counters_mem_protect_interrupt": {
    "type": "register",
    "block": "counters",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "counters_mem_protect_interrupt_test": {
    "type": "register",
    "block": "counters",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "counters_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "counters",
    "width": 7,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "voq_block_map0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "voq_block_map1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "voq_block_map2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "voq_block_map3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "voq_block_map4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "voq_block_map5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "max_counters_table_ecc_1b_err_interrupt_mask",
        6,
        1
      ]
    ]
  },
  "counters_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "counters",
    "width": 7,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "voq_block_map0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "voq_block_map1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "voq_block_map2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "voq_block_map3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "voq_block_map4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "voq_block_map5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "max_counters_table_ecc_2b_err_interrupt_mask",
        6,
        1
      ]
    ]
  },
  "counters_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "counters",
    "width": 7,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "voq_block_map0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "voq_block_map1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "voq_block_map2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "voq_block_map3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "voq_block_map4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "voq_block_map5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "max_counters_table_ecc_1b_err_initiate",
        6,
        1
      ]
    ]
  },
  "counters_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "counters",
    "width": 7,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "voq_block_map0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "voq_block_map1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "voq_block_map2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "voq_block_map3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "voq_block_map4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "voq_block_map5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "max_counters_table_ecc_2b_err_initiate",
        6,
        1
      ]
    ]
  },
  "counters_mem_protect_err_status": {
    "type": "register",
    "block": "counters",
    "width": 7,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "voq_block_map0_err_int",
        0,
        1
      ],
      [
        "voq_block_map1_err_int",
        1,
        1
      ],
      [
        "voq_block_map2_err_int",
        2,
        1
      ],
      [
        "voq_block_map3_err_int",
        3,
        1
      ],
      [
        "voq_block_map4_err_int",
        4,
        1
      ],
      [
        "voq_block_map5_err_int",
        5,
        1
      ],
      [
        "max_counters_table_err_int",
        6,
        1
      ]
    ]
  },
  "counters_selected_ser_error_info": {
    "type": "register",
    "block": "counters",
    "width": 12,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        10
      ],
      [
        "mem_err_type",
        10,
        2
      ]
    ]
  },
  "counters_ser_error_debug_configuration": {
    "type": "register",
    "block": "counters",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "counters_ecc_1b_err_debug": {
    "type": "register",
    "block": "counters",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "counters_ecc_2b_err_debug": {
    "type": "register",
    "block": "counters",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "counters_counter_timer": {
    "type": "register",
    "block": "counters",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "counters_counter_timer_trigger_reg": {
    "type": "register",
    "block": "counters",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "counters_memory_access_timeout": {
    "type": "register",
    "block": "counters",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "counters_broadcast_config_reg": {
    "type": "register",
    "block": "counters",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "counters_memory_prot_bypass": {
    "type": "register",
    "block": "counters",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "counters_soft_reset_configuration": {
    "type": "register",
    "block": "counters",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "counters_mbist_configuration": {
    "type": "register",
    "block": "counters",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "counters_power_down_configuration": {
    "type": "register",
    "block": "counters",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "counters_spare_reg": {
    "type": "register",
    "block": "counters",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "counters_pmro_ctrl": {
    "type": "register",
    "block": "counters",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "counters_pmro_status": {
    "type": "register",
    "block": "counters",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "counters_mirror_bus_conf_reg": {
    "type": "register",
    "block": "counters",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "counters_mirror_bus_status": {
    "type": "register",
    "block": "counters",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "counters_device_time_offset_cfg": {
    "type": "register",
    "block": "counters",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "counters_bank_allocation_config": {
    "type": "register",
    "block": "counters",
    "width": 5,
    "desc": "Allocation of each bank to a specific counting origin Note: should not be changed under traffic Typically bank N+1 will be allocated the same as bank N",
    "fields": [
      [
        "bank_slice_allocation",
        0,
        3
      ],
      [
        "bank_client_allocation",
        3,
        2
      ]
    ]
  },
  "counters_voq_set_type_config": {
    "type": "register",
    "block": "counters",
    "width": 1,
    "desc": "Configuration for VOQ Set-Type (per slice)",
    "fields": [
      [
        "count_dropped_only",
        0,
        1
      ]
    ]
  },
  "counters_enable_voq_count_tc_config": {
    "type": "register",
    "block": "counters",
    "width": 16,
    "desc": "VOQ Counting per TC enable register (per slice)",
    "fields": [
      [
        "enable_voq_count_tc",
        0,
        16
      ]
    ]
  },
  "counters_rx_lm_constant_config": {
    "type": "register",
    "block": "counters",
    "width": 6,
    "desc": "Debug configuration for RX LM",
    "fields": [
      [
        "max_rx_lm_grant_round_trip_time",
        0,
        6
      ]
    ]
  },
  "counters_cpu_read": {
    "type": "register",
    "block": "counters",
    "width": 24,
    "desc": "Counters CPU read control register Writing to this register triggers the counter/s read process When the Ready field is on the result is ready in CpuCounterReadResult (for specific counter read) or MaxCountersTable (for max counters read)",
    "fields": [
      [
        "read_target",
        0,
        1
      ],
      [
        "read_reset",
        1,
        1
      ],
      [
        "counter_read_address",
        2,
        21
      ],
      [
        "ready",
        23,
        1
      ]
    ]
  },
  "counters_cpu_counter_read_result": {
    "type": "register",
    "block": "counters",
    "width": 129,
    "desc": "Read result of a specific counter",
    "fields": [
      [
        "counter_read_result_packet_count",
        0,
        64
      ],
      [
        "counter_read_result_byte_count",
        64,
        64
      ],
      [
        "result_valid",
        128,
        1
      ]
    ]
  },
  "counters_lm_read_counters": {
    "type": "register",
    "block": "counters",
    "width": 112,
    "desc": "",
    "fields": [
      [
        "rx_lm_read",
        0,
        16
      ],
      [
        "tx_lm_read0",
        16,
        16
      ],
      [
        "tx_lm_read1",
        32,
        16
      ],
      [
        "tx_lm_read2",
        48,
        16
      ],
      [
        "tx_lm_read3",
        64,
        16
      ],
      [
        "tx_lm_read4",
        80,
        16
      ],
      [
        "tx_lm_read5",
        96,
        16
      ]
    ]
  },
  "counters_interrupt_reg": {
    "type": "register",
    "block": "counters",
    "width": 1,
    "desc": "Interrupt register",
    "fields": [
      [
        "same_pd_bank_collision",
        0,
        1
      ]
    ]
  },
  "counters_interrupt_reg_mask": {
    "type": "register",
    "block": "counters",
    "width": 1,
    "desc": "This register masks InterruptReg interrupt register",
    "fields": [
      [
        "same_pd_bank_collision_mask",
        0,
        1
      ]
    ]
  },
  "counters_interrupt_reg_test": {
    "type": "register",
    "block": "counters",
    "width": 1,
    "desc": "This register tests InterruptReg interrupt register",
    "fields": [
      [
        "same_pd_bank_collision_test",
        0,
        1
      ]
    ]
  },
  "counters_bank_group_interrupt_reg0": {
    "type": "register",
    "block": "counters",
    "width": 18,
    "desc": "Interrupt register from all bank groups 0-17",
    "fields": [
      [
        "bank_group_interrupt0",
        0,
        1
      ],
      [
        "bank_group_interrupt1",
        1,
        1
      ],
      [
        "bank_group_interrupt2",
        2,
        1
      ],
      [
        "bank_group_interrupt3",
        3,
        1
      ],
      [
        "bank_group_interrupt4",
        4,
        1
      ],
      [
        "bank_group_interrupt5",
        5,
        1
      ],
      [
        "bank_group_interrupt6",
        6,
        1
      ],
      [
        "bank_group_interrupt7",
        7,
        1
      ],
      [
        "bank_group_interrupt8",
        8,
        1
      ],
      [
        "bank_group_interrupt9",
        9,
        1
      ],
      [
        "bank_group_interrupt10",
        10,
        1
      ],
      [
        "bank_group_interrupt11",
        11,
        1
      ],
      [
        "bank_group_interrupt12",
        12,
        1
      ],
      [
        "bank_group_interrupt13",
        13,
        1
      ],
      [
        "bank_group_interrupt14",
        14,
        1
      ],
      [
        "bank_group_interrupt15",
        15,
        1
      ],
      [
        "bank_group_interrupt16",
        16,
        1
      ],
      [
        "bank_group_interrupt17",
        17,
        1
      ]
    ]
  },
  "counters_bank_group_interrupt_reg0_mask": {
    "type": "register",
    "block": "counters",
    "width": 18,
    "desc": "This register masks BankGroupInterruptReg0 interrupt register",
    "fields": [
      [
        "bank_group_interrupt0_mask",
        0,
        1
      ],
      [
        "bank_group_interrupt1_mask",
        1,
        1
      ],
      [
        "bank_group_interrupt2_mask",
        2,
        1
      ],
      [
        "bank_group_interrupt3_mask",
        3,
        1
      ],
      [
        "bank_group_interrupt4_mask",
        4,
        1
      ],
      [
        "bank_group_interrupt5_mask",
        5,
        1
      ],
      [
        "bank_group_interrupt6_mask",
        6,
        1
      ],
      [
        "bank_group_interrupt7_mask",
        7,
        1
      ],
      [
        "bank_group_interrupt8_mask",
        8,
        1
      ],
      [
        "bank_group_interrupt9_mask",
        9,
        1
      ],
      [
        "bank_group_interrupt10_mask",
        10,
        1
      ],
      [
        "bank_group_interrupt11_mask",
        11,
        1
      ],
      [
        "bank_group_interrupt12_mask",
        12,
        1
      ],
      [
        "bank_group_interrupt13_mask",
        13,
        1
      ],
      [
        "bank_group_interrupt14_mask",
        14,
        1
      ],
      [
        "bank_group_interrupt15_mask",
        15,
        1
      ],
      [
        "bank_group_interrupt16_mask",
        16,
        1
      ],
      [
        "bank_group_interrupt17_mask",
        17,
        1
      ]
    ]
  },
  "counters_bank_group_interrupt_reg0_test": {
    "type": "register",
    "block": "counters",
    "width": 18,
    "desc": "This register tests BankGroupInterruptReg0 interrupt register",
    "fields": [
      [
        "bank_group_interrupt0_test",
        0,
        1
      ],
      [
        "bank_group_interrupt1_test",
        1,
        1
      ],
      [
        "bank_group_interrupt2_test",
        2,
        1
      ],
      [
        "bank_group_interrupt3_test",
        3,
        1
      ],
      [
        "bank_group_interrupt4_test",
        4,
        1
      ],
      [
        "bank_group_interrupt5_test",
        5,
        1
      ],
      [
        "bank_group_interrupt6_test",
        6,
        1
      ],
      [
        "bank_group_interrupt7_test",
        7,
        1
      ],
      [
        "bank_group_interrupt8_test",
        8,
        1
      ],
      [
        "bank_group_interrupt9_test",
        9,
        1
      ],
      [
        "bank_group_interrupt10_test",
        10,
        1
      ],
      [
        "bank_group_interrupt11_test",
        11,
        1
      ],
      [
        "bank_group_interrupt12_test",
        12,
        1
      ],
      [
        "bank_group_interrupt13_test",
        13,
        1
      ],
      [
        "bank_group_interrupt14_test",
        14,
        1
      ],
      [
        "bank_group_interrupt15_test",
        15,
        1
      ],
      [
        "bank_group_interrupt16_test",
        16,
        1
      ],
      [
        "bank_group_interrupt17_test",
        17,
        1
      ]
    ]
  },
  "counters_bank_group_interrupt_reg1": {
    "type": "register",
    "block": "counters",
    "width": 18,
    "desc": "Interrupt register from all bank groups 18-35",
    "fields": [
      [
        "bank_group_interrupt18",
        0,
        1
      ],
      [
        "bank_group_interrupt19",
        1,
        1
      ],
      [
        "bank_group_interrupt20",
        2,
        1
      ],
      [
        "bank_group_interrupt21",
        3,
        1
      ],
      [
        "bank_group_interrupt22",
        4,
        1
      ],
      [
        "bank_group_interrupt23",
        5,
        1
      ],
      [
        "bank_group_interrupt24",
        6,
        1
      ],
      [
        "bank_group_interrupt25",
        7,
        1
      ],
      [
        "bank_group_interrupt26",
        8,
        1
      ],
      [
        "bank_group_interrupt27",
        9,
        1
      ],
      [
        "bank_group_interrupt28",
        10,
        1
      ],
      [
        "bank_group_interrupt29",
        11,
        1
      ],
      [
        "bank_group_interrupt30",
        12,
        1
      ],
      [
        "bank_group_interrupt31",
        13,
        1
      ],
      [
        "bank_group_interrupt32",
        14,
        1
      ],
      [
        "bank_group_interrupt33",
        15,
        1
      ],
      [
        "bank_group_interrupt34",
        16,
        1
      ],
      [
        "bank_group_interrupt35",
        17,
        1
      ]
    ]
  },
  "counters_bank_group_interrupt_reg1_mask": {
    "type": "register",
    "block": "counters",
    "width": 18,
    "desc": "This register masks BankGroupInterruptReg1 interrupt register",
    "fields": [
      [
        "bank_group_interrupt18_mask",
        0,
        1
      ],
      [
        "bank_group_interrupt19_mask",
        1,
        1
      ],
      [
        "bank_group_interrupt20_mask",
        2,
        1
      ],
      [
        "bank_group_interrupt21_mask",
        3,
        1
      ],
      [
        "bank_group_interrupt22_mask",
        4,
        1
      ],
      [
        "bank_group_interrupt23_mask",
        5,
        1
      ],
      [
        "bank_group_interrupt24_mask",
        6,
        1
      ],
      [
        "bank_group_interrupt25_mask",
        7,
        1
      ],
      [
        "bank_group_interrupt26_mask",
        8,
        1
      ],
      [
        "bank_group_interrupt27_mask",
        9,
        1
      ],
      [
        "bank_group_interrupt28_mask",
        10,
        1
      ],
      [
        "bank_group_interrupt29_mask",
        11,
        1
      ],
      [
        "bank_group_interrupt30_mask",
        12,
        1
      ],
      [
        "bank_group_interrupt31_mask",
        13,
        1
      ],
      [
        "bank_group_interrupt32_mask",
        14,
        1
      ],
      [
        "bank_group_interrupt33_mask",
        15,
        1
      ],
      [
        "bank_group_interrupt34_mask",
        16,
        1
      ],
      [
        "bank_group_interrupt35_mask",
        17,
        1
      ]
    ]
  },
  "counters_bank_group_interrupt_reg1_test": {
    "type": "register",
    "block": "counters",
    "width": 18,
    "desc": "This register tests BankGroupInterruptReg1 interrupt register",
    "fields": [
      [
        "bank_group_interrupt18_test",
        0,
        1
      ],
      [
        "bank_group_interrupt19_test",
        1,
        1
      ],
      [
        "bank_group_interrupt20_test",
        2,
        1
      ],
      [
        "bank_group_interrupt21_test",
        3,
        1
      ],
      [
        "bank_group_interrupt22_test",
        4,
        1
      ],
      [
        "bank_group_interrupt23_test",
        5,
        1
      ],
      [
        "bank_group_interrupt24_test",
        6,
        1
      ],
      [
        "bank_group_interrupt25_test",
        7,
        1
      ],
      [
        "bank_group_interrupt26_test",
        8,
        1
      ],
      [
        "bank_group_interrupt27_test",
        9,
        1
      ],
      [
        "bank_group_interrupt28_test",
        10,
        1
      ],
      [
        "bank_group_interrupt29_test",
        11,
        1
      ],
      [
        "bank_group_interrupt30_test",
        12,
        1
      ],
      [
        "bank_group_interrupt31_test",
        13,
        1
      ],
      [
        "bank_group_interrupt32_test",
        14,
        1
      ],
      [
        "bank_group_interrupt33_test",
        15,
        1
      ],
      [
        "bank_group_interrupt34_test",
        16,
        1
      ],
      [
        "bank_group_interrupt35_test",
        17,
        1
      ]
    ]
  },
  "counters_status_register": {
    "type": "register",
    "block": "counters",
    "width": 1,
    "desc": "Initialization status register",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "counters_counters_bank_config": {
    "type": "memory",
    "block": "counters",
    "width": 3,
    "desc": "Configuration for the TX Counters (only relevant to banks allocated to TXPP) All 6 memories should be configured identically",
    "fields": [
      [
        "bank_set_type",
        0,
        2
      ],
      [
        "inc_addr_for_set",
        2,
        1
      ]
    ]
  },
  "counters_bank_id_map_config": {
    "type": "memory",
    "block": "counters",
    "width": 7,
    "desc": "Configuration for TX Counters bank-ID mapping",
    "fields": [
      [
        "bank_id_map",
        0,
        7
      ]
    ]
  },
  "counters_voq_block_map": {
    "type": "memory",
    "block": "counters",
    "width": 24,
    "desc": "Mapping of VOQ number to its attributes (per slice) Each entry corresponds to 64 consequtive VOQ numbers (total 1024*64 = 64K VOQs)",
    "fields": [
      [
        "bank_id",
        0,
        7
      ],
      [
        "counter_offset",
        7,
        14
      ],
      [
        "tc_profile",
        21,
        1
      ],
      [
        "map_group_size",
        22,
        2
      ]
    ]
  },
  "counters_max_counters_table": {
    "type": "memory",
    "block": "counters",
    "width": 78,
    "desc": "Read result of max counters read, entry per bank",
    "fields": [
      [
        "packet_count",
        0,
        29
      ],
      [
        "byte_count",
        29,
        35
      ],
      [
        "counter_address",
        64,
        14
      ]
    ]
  },
  "dics_interrupt_register": {
    "type": "register",
    "block": "dics",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ],
      [
        "fabric_blocking_intr_reg_summary",
        2,
        1
      ]
    ]
  },
  "dics_mem_protect_interrupt": {
    "type": "register",
    "block": "dics",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "dics_mem_protect_interrupt_test": {
    "type": "register",
    "block": "dics",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "dics_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "dics",
    "width": 16,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "dramcontext2smscontext_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "credit_consume_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "credit_allocate_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "last_qsize_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "queue_is_empty_set_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "queue_is_empty_clr_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "queue_list_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "voqcgm_profile_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "first_credit_grant_set_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "first_credit_grant_clr_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ib_set_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ib_clr_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "aged_out_queue_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "dequeue_marking_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "dequeue_cong_level_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "dics2mmu_fifo_ecc_1b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "dics_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "dics",
    "width": 16,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "dramcontext2smscontext_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "credit_consume_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "credit_allocate_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "last_qsize_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "queue_is_empty_set_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "queue_is_empty_clr_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "queue_list_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "voqcgm_profile_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "first_credit_grant_set_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "first_credit_grant_clr_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ib_set_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ib_clr_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "aged_out_queue_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "dequeue_marking_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "dequeue_cong_level_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "dics2mmu_fifo_ecc_2b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "dics_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "dics",
    "width": 16,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "dramcontext2smscontext_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "credit_consume_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "credit_allocate_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "last_qsize_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "queue_is_empty_set_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "queue_is_empty_clr_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "queue_list_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "voqcgm_profile_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "first_credit_grant_set_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "first_credit_grant_clr_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "ib_set_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "ib_clr_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "aged_out_queue_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "dequeue_marking_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "dequeue_cong_level_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "dics2mmu_fifo_ecc_1b_err_initiate",
        15,
        1
      ]
    ]
  },
  "dics_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "dics",
    "width": 16,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "dramcontext2smscontext_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "credit_consume_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "credit_allocate_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "last_qsize_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "queue_is_empty_set_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "queue_is_empty_clr_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "queue_list_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "voqcgm_profile_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "first_credit_grant_set_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "first_credit_grant_clr_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "ib_set_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "ib_clr_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "aged_out_queue_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "dequeue_marking_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "dequeue_cong_level_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "dics2mmu_fifo_ecc_2b_err_initiate",
        15,
        1
      ]
    ]
  },
  "dics_mem_protect_err_status": {
    "type": "register",
    "block": "dics",
    "width": 16,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "dramcontext2smscontext_err_int",
        0,
        1
      ],
      [
        "credit_consume_err_int",
        1,
        1
      ],
      [
        "credit_allocate_err_int",
        2,
        1
      ],
      [
        "last_qsize_err_int",
        3,
        1
      ],
      [
        "queue_is_empty_set_err_int",
        4,
        1
      ],
      [
        "queue_is_empty_clr_err_int",
        5,
        1
      ],
      [
        "queue_list_err_int",
        6,
        1
      ],
      [
        "voqcgm_profile_err_int",
        7,
        1
      ],
      [
        "first_credit_grant_set_err_int",
        8,
        1
      ],
      [
        "first_credit_grant_clr_err_int",
        9,
        1
      ],
      [
        "ib_set_err_int",
        10,
        1
      ],
      [
        "ib_clr_err_int",
        11,
        1
      ],
      [
        "aged_out_queue_err_int",
        12,
        1
      ],
      [
        "dequeue_marking_err_int",
        13,
        1
      ],
      [
        "dequeue_cong_level_err_int",
        14,
        1
      ],
      [
        "dics2mmu_fifo_err_int",
        15,
        1
      ]
    ]
  },
  "dics_selected_ser_error_info": {
    "type": "register",
    "block": "dics",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "dics_ser_error_debug_configuration": {
    "type": "register",
    "block": "dics",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "dics_ecc_1b_err_debug": {
    "type": "register",
    "block": "dics",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "dics_ecc_2b_err_debug": {
    "type": "register",
    "block": "dics",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "dics_counter_timer": {
    "type": "register",
    "block": "dics",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "dics_counter_timer_trigger_reg": {
    "type": "register",
    "block": "dics",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "dics_memory_access_timeout": {
    "type": "register",
    "block": "dics",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "dics_broadcast_config_reg": {
    "type": "register",
    "block": "dics",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "dics_memory_prot_bypass": {
    "type": "register",
    "block": "dics",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "dics_soft_reset_configuration": {
    "type": "register",
    "block": "dics",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "dics_mbist_configuration": {
    "type": "register",
    "block": "dics",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "dics_power_down_configuration": {
    "type": "register",
    "block": "dics",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "dics_spare_reg": {
    "type": "register",
    "block": "dics",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "dics_pmro_ctrl": {
    "type": "register",
    "block": "dics",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "dics_pmro_status": {
    "type": "register",
    "block": "dics",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "dics_mirror_bus_conf_reg": {
    "type": "register",
    "block": "dics",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "dics_mirror_bus_status": {
    "type": "register",
    "block": "dics",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "dics_device_time_offset_cfg": {
    "type": "register",
    "block": "dics",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "dics_general_interrupt_register": {
    "type": "register",
    "block": "dics",
    "width": 4,
    "desc": "Interrupt",
    "fields": [
      [
        "fabric_blocking_intr",
        0,
        1
      ],
      [
        "aged_out_fifo_full",
        1,
        1
      ],
      [
        "dics2mmu_fifo_overflow",
        2,
        1
      ],
      [
        "crdt_req_cbt_overflow",
        3,
        1
      ]
    ]
  },
  "dics_general_interrupt_register_mask": {
    "type": "register",
    "block": "dics",
    "width": 4,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "fabric_blocking_intr_mask",
        0,
        1
      ],
      [
        "aged_out_fifo_full_mask",
        1,
        1
      ],
      [
        "dics2mmu_fifo_overflow_mask",
        2,
        1
      ],
      [
        "crdt_req_cbt_overflow_mask",
        3,
        1
      ]
    ]
  },
  "dics_general_interrupt_register_test": {
    "type": "register",
    "block": "dics",
    "width": 4,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "fabric_blocking_intr_test",
        0,
        1
      ],
      [
        "aged_out_fifo_full_test",
        1,
        1
      ],
      [
        "dics2mmu_fifo_overflow_test",
        2,
        1
      ],
      [
        "crdt_req_cbt_overflow_test",
        3,
        1
      ]
    ]
  },
  "dics_fabric_blocking_intr_reg": {
    "type": "register",
    "block": "dics",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "total_list_full",
        0,
        1
      ]
    ]
  },
  "dics_fabric_blocking_intr_reg_mask": {
    "type": "register",
    "block": "dics",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "total_list_full_mask",
        0,
        1
      ]
    ]
  },
  "dics_fabric_blocking_intr_reg_test": {
    "type": "register",
    "block": "dics",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "total_list_full_test",
        0,
        1
      ]
    ]
  },
  "dics_reset_done_reg": {
    "type": "register",
    "block": "dics",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "queue_is_empty_rst_done",
        0,
        1
      ],
      [
        "first_credit_grant_rst_done",
        1,
        1
      ],
      [
        "enq_pipe_rst_done",
        2,
        1
      ]
    ]
  },
  "dics_fifos_debug_reg": {
    "type": "register",
    "block": "dics",
    "width": 21,
    "desc": "",
    "fields": [
      [
        "scrubber_fifo_count",
        0,
        4
      ],
      [
        "crdt_req_by_gnt_stat",
        4,
        5
      ],
      [
        "crdt_req_by_enq_stat",
        9,
        4
      ],
      [
        "dics2mmu_fifo_stat",
        13,
        8
      ]
    ]
  },
  "dics_context_msb_reg": {
    "type": "register",
    "block": "dics",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "context_msb",
        0,
        6
      ]
    ]
  },
  "dics_queue_in_elig_reg": {
    "type": "register",
    "block": "dics",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "queue_in_elig",
        0,
        64
      ]
    ]
  },
  "dics_has_credits_reg": {
    "type": "register",
    "block": "dics",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "has_credits",
        0,
        64
      ]
    ]
  },
  "dics_alm_full_cfg_reg": {
    "type": "register",
    "block": "dics",
    "width": 67,
    "desc": "",
    "fields": [
      [
        "crgnt_fifo_alm_full_cfg",
        0,
        4
      ],
      [
        "ppc_alm_full_cfg",
        4,
        8
      ],
      [
        "crgnt_alm_full_cfg",
        12,
        3
      ],
      [
        "map_cmd_fifo_alm_full_cfg",
        15,
        4
      ],
      [
        "req_by_gnt_alm_full_cfg",
        19,
        3
      ],
      [
        "req_by_enq_fifo_alm_full_cfg",
        22,
        3
      ],
      [
        "crdt_req_by_deq_alm_full_cfg",
        25,
        8
      ],
      [
        "read_req_fifo_alm_full_cfg",
        33,
        5
      ],
      [
        "dics_to_mmu_cbt_alm_full",
        38,
        5
      ],
      [
        "crdt_req_cbt_alm_full",
        43,
        4
      ],
      [
        "crdt_req_by_gnt_alm_full_cfg",
        47,
        3
      ],
      [
        "crdt_req_by_enq_alm_full_cfg",
        50,
        9
      ],
      [
        "dics2mmu_fifo_alm_full_cfg",
        59,
        8
      ]
    ]
  },
  "dics_slice_mode_reg": {
    "type": "register",
    "block": "dics",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "ics_mode",
        0,
        4
      ]
    ]
  },
  "dics_mode_reg": {
    "type": "register",
    "block": "dics",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "buff8k",
        0,
        1
      ]
    ]
  },
  "dics_fabric_blocking_capture_reg": {
    "type": "register",
    "block": "dics",
    "width": 36,
    "desc": "",
    "fields": [
      [
        "list_full_context",
        0,
        12
      ],
      [
        "queue_blocking_context",
        12,
        12
      ],
      [
        "slice_blocking_context",
        24,
        12
      ]
    ]
  },
  "dics_general_conf_reg": {
    "type": "register",
    "block": "dics",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "ignore_credits",
        0,
        1
      ],
      [
        "network_slice1_fabric_slice0",
        1,
        6
      ]
    ]
  },
  "dics_enq_conf_reg": {
    "type": "register",
    "block": "dics",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "max_rand_val",
        0,
        4
      ],
      [
        "credit_for_every_enq",
        4,
        1
      ],
      [
        "credit_req_for_qsize1",
        5,
        1
      ]
    ]
  },
  "dics_credits_conf_reg": {
    "type": "register",
    "block": "dics",
    "width": 131,
    "desc": "Queue number for delete queue",
    "fields": [
      [
        "static_go_profile",
        0,
        32
      ],
      [
        "crgnt_random_noise_en",
        32,
        1
      ],
      [
        "crdt_in_bytes",
        33,
        13
      ],
      [
        "crdt_size_log2",
        46,
        4
      ],
      [
        "init_extra_credits",
        50,
        13
      ],
      [
        "stop_credits_th",
        63,
        16
      ],
      [
        "return_credits_th",
        79,
        16
      ],
      [
        "enq_priority_th",
        95,
        5
      ],
      [
        "stop_crdt_on_off",
        100,
        1
      ],
      [
        "return_crdt_on_off",
        101,
        1
      ],
      [
        "max_qb_threshold",
        102,
        24
      ],
      [
        "return_crdt_queue_blocking",
        126,
        1
      ],
      [
        "return_eir_crdt_slice_blocking",
        127,
        1
      ],
      [
        "return_cir_crdt_slice_blocking",
        128,
        1
      ],
      [
        "return_crdt_list_full_blocking",
        129,
        1
      ],
      [
        "pause_checkin_machine",
        130,
        1
      ]
    ]
  },
  "dics_read_reprt_reg": {
    "type": "register",
    "block": "dics",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "header_size",
        0,
        6
      ]
    ]
  },
  "dics_set_queue_blocking_th_reg": {
    "type": "register",
    "block": "dics",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "set_queue_blocking_th",
        0,
        24
      ]
    ]
  },
  "dics_clear_queue_blocking_th_reg": {
    "type": "register",
    "block": "dics",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "clear_queue_blocking_th",
        0,
        24
      ]
    ]
  },
  "dics_accept_queue_blocking_th_reg": {
    "type": "register",
    "block": "dics",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "accept_queue_blocking_th",
        0,
        24
      ]
    ]
  },
  "dics_acc_crdt_req_th_reg": {
    "type": "register",
    "block": "dics",
    "width": 48,
    "desc": "Threshold for enqueue accumulated bytes to send credit request",
    "fields": [
      [
        "acc_crdt_req_th",
        0,
        14
      ],
      [
        "acc_crdt_req_fc_th",
        14,
        14
      ],
      [
        "csms_fc",
        28,
        6
      ],
      [
        "acc_crdt_first_th",
        34,
        14
      ]
    ]
  },
  "dics_eligible_th_reg": {
    "type": "register",
    "block": "dics",
    "width": 111,
    "desc": "Threshold to move a queue to speculative read",
    "fields": [
      [
        "speculative_en",
        0,
        1
      ],
      [
        "speculative_qsize_th",
        1,
        10
      ],
      [
        "speculative_cb_th",
        11,
        20
      ],
      [
        "eir_slice_blocking_th",
        31,
        32
      ],
      [
        "cir_slice_blocking_th",
        63,
        32
      ],
      [
        "eir_slice_pds_blocking_th",
        95,
        8
      ],
      [
        "cir_slice_pds_blocking_th",
        103,
        8
      ]
    ]
  },
  "dics_cpu_elgbl_context": {
    "type": "register",
    "block": "dics",
    "width": 14,
    "desc": "",
    "fields": [
      [
        "cpu_elgbl_context_addr",
        0,
        12
      ],
      [
        "cpu_elgbl_context_data",
        12,
        1
      ],
      [
        "cpu_elgbl_context_rd0wr1",
        13,
        1
      ]
    ]
  },
  "dics_cpu_age_fsm_reg": {
    "type": "register",
    "block": "dics",
    "width": 27,
    "desc": "",
    "fields": [
      [
        "cpu_age_qnum",
        0,
        12
      ],
      [
        "cpu_age_sms_context",
        12,
        12
      ],
      [
        "cpu_age_slice_num",
        24,
        3
      ]
    ]
  },
  "dics_eligible_engine_busy_reg": {
    "type": "register",
    "block": "dics",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "eligible_engine_busy",
        0,
        1
      ]
    ]
  },
  "dics_eligible_engine_ppc_reg": {
    "type": "register",
    "block": "dics",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "eligible_engine_ppc_num",
        0,
        8
      ]
    ]
  },
  "dics_eligible_engine_dram_context_reg": {
    "type": "register",
    "block": "dics",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "eligible_engine_dram_context_num",
        0,
        12
      ]
    ]
  },
  "dics_ppc_active_reg": {
    "type": "register",
    "block": "dics",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "ppc_active",
        0,
        128
      ]
    ]
  },
  "dics_ppc_context_reg": {
    "type": "register",
    "block": "dics",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "ppc_context",
        0,
        12
      ]
    ]
  },
  "dics_ppc_sms_context_reg": {
    "type": "register",
    "block": "dics",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "ppc_sms_context",
        0,
        12
      ]
    ]
  },
  "dics_ppc_sms_slice_reg": {
    "type": "register",
    "block": "dics",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "ppc_sms_slice",
        0,
        3
      ]
    ]
  },
  "dics_ppc_cb_reg": {
    "type": "register",
    "block": "dics",
    "width": 23,
    "desc": "",
    "fields": [
      [
        "ppc_cb",
        0,
        23
      ]
    ]
  },
  "dics_ppc_qsize_eob_reg": {
    "type": "register",
    "block": "dics",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "ppc_qsize_eob",
        0,
        16
      ]
    ]
  },
  "dics_cbt_not_ready_cnt": {
    "type": "register",
    "block": "dics",
    "width": 96,
    "desc": "",
    "fields": [
      [
        "crdt_req_cnt",
        0,
        48
      ],
      [
        "dics2mmu_cnt",
        48,
        48
      ]
    ]
  },
  "dics_dramcontext2smscontext": {
    "type": "memory",
    "block": "dics",
    "width": 15,
    "desc": "Map context to VOQ number for regular queues",
    "fields": [
      [
        "smscontext",
        0,
        12
      ],
      [
        "slicenum",
        12,
        3
      ]
    ]
  },
  "dics_credit_consume": {
    "type": "memory",
    "block": "dics",
    "width": 23,
    "desc": "Credit consumed per queue",
    "fields": [
      [
        "credit_consumed",
        0,
        23
      ]
    ]
  },
  "dics_credit_allocate": {
    "type": "memory",
    "block": "dics",
    "width": 23,
    "desc": "Credit allocated per queue",
    "fields": [
      [
        "credit_allocated",
        0,
        23
      ]
    ]
  },
  "dics_last_qsize": {
    "type": "memory",
    "block": "dics",
    "width": 42,
    "desc": "Queue size in bytes and dram packets from enqueue-report",
    "fields": [
      [
        "qsize_byte",
        0,
        26
      ],
      [
        "qsize_eob",
        26,
        16
      ]
    ]
  },
  "dics_queue_is_empty_set": {
    "type": "memory",
    "block": "dics",
    "width": 64,
    "desc": "Queue is empty of EOBs",
    "fields": [
      [
        "queue_is_empty_set_bmp",
        0,
        64
      ]
    ]
  },
  "dics_queue_is_empty_clr": {
    "type": "memory",
    "block": "dics",
    "width": 64,
    "desc": "Queue is empty of EOBs",
    "fields": [
      [
        "queue_is_empty_clr_bmp",
        0,
        64
      ]
    ]
  },
  "dics_queue_list": {
    "type": "memory",
    "block": "dics",
    "width": 64,
    "desc": "List code per context",
    "fields": [
      [
        "list_code",
        0,
        64
      ]
    ]
  },
  "dics_voqcgm_profile": {
    "type": "memory",
    "block": "dics",
    "width": 5,
    "desc": "CGM profile per context used by voq_cgm",
    "fields": [
      [
        "cgm_profile",
        0,
        5
      ]
    ]
  },
  "dics_first_credit_grant_set": {
    "type": "memory",
    "block": "dics",
    "width": 32,
    "desc": "On new context allocation this bit is set. On credit-grant for this context this bit is clear.This bit is read on credit-grant.",
    "fields": [
      [
        "firstgrentset1",
        0,
        32
      ]
    ]
  },
  "dics_first_credit_grant_clr": {
    "type": "memory",
    "block": "dics",
    "width": 32,
    "desc": "On new context allocation this bit is set. On credit-grant for this context this bit is clear.This bit is read on credit-grant.",
    "fields": [
      [
        "firstgrantclr1",
        0,
        32
      ]
    ]
  },
  "dics_ib_set": {
    "type": "memory",
    "block": "dics",
    "width": 64,
    "desc": "set-Clear+Read Mem; set by credit grant  Read by enqueue pipe",
    "fields": [
      [
        "ib_set_bmp",
        0,
        64
      ]
    ]
  },
  "dics_ib_clr": {
    "type": "memory",
    "block": "dics",
    "width": 64,
    "desc": "set-Clear+Read Mem; clear by read-report pipe Read by enqueue pipe",
    "fields": [
      [
        "ib_clr_bmp",
        0,
        64
      ]
    ]
  },
  "dics_aged_out_queue": {
    "type": "memory",
    "block": "dics",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "aged_out_queue_bits",
        0,
        64
      ]
    ]
  },
  "dics_dequeue_marking": {
    "type": "memory",
    "block": "dics",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "dequeue_marking_bits",
        0,
        64
      ]
    ]
  },
  "dics_dequeue_cong_level": {
    "type": "memory",
    "block": "dics",
    "width": 64,
    "desc": "Dequeue congestion level memory. 16 entries of 4-bit in a row",
    "fields": [
      [
        "dequeue_cong_level_bits",
        0,
        64
      ]
    ]
  },
  "dics_muxed_context_fifo": {
    "type": "memory",
    "block": "dics",
    "width": 33,
    "desc": "FF based mem for mapping context fifo",
    "fields": [
      [
        "muxed_context_fifo_dat",
        0,
        33
      ]
    ]
  },
  "dics_dics2mmu_fifo": {
    "type": "memory",
    "block": "dics",
    "width": 72,
    "desc": "",
    "fields": [
      [
        "dics2mmu_fifi_dat",
        0,
        72
      ]
    ]
  },
  "csms_interrupt_register": {
    "type": "register",
    "block": "csms",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "csms_interrupt_reg_summary",
        1,
        1
      ]
    ]
  },
  "csms_mem_protect_interrupt": {
    "type": "register",
    "block": "csms",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "csms_mem_protect_interrupt_test": {
    "type": "register",
    "block": "csms",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "csms_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "dst_dev_map_mem0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "dst_dev_map_mem1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "dst_dev_map_mem2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "voq_vsc_dst_map_mem0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "voq_vsc_dst_map_mem1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "voq_vsc_dst_map_mem2_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "voq_vsc_dst_map_mem3_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "dst_dev_map_mem_red_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "vsc_dst_map_mem0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "vsc_dst_map_mem1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "voq_dst_map_mem0_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "voq_dst_map_mem1_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "ddmq_mem0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "ddmq_mem1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "ddmq_mem2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "ddmq_mem_red_ecc_1b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "csms_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "dst_dev_map_mem0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "dst_dev_map_mem1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "dst_dev_map_mem2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "voq_vsc_dst_map_mem0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "voq_vsc_dst_map_mem1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "voq_vsc_dst_map_mem2_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "voq_vsc_dst_map_mem3_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "dst_dev_map_mem_red_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "vsc_dst_map_mem0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "vsc_dst_map_mem1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "voq_dst_map_mem0_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "voq_dst_map_mem1_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "ddmq_mem0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "ddmq_mem1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "ddmq_mem2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "ddmq_mem_red_ecc_2b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "csms_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "dst_dev_map_mem0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "dst_dev_map_mem1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "dst_dev_map_mem2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "voq_vsc_dst_map_mem0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "voq_vsc_dst_map_mem1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "voq_vsc_dst_map_mem2_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "voq_vsc_dst_map_mem3_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "dst_dev_map_mem_red_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "vsc_dst_map_mem0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "vsc_dst_map_mem1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "voq_dst_map_mem0_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "voq_dst_map_mem1_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "ddmq_mem0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "ddmq_mem1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "ddmq_mem2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "ddmq_mem_red_ecc_1b_err_initiate",
        15,
        1
      ]
    ]
  },
  "csms_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "dst_dev_map_mem0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "dst_dev_map_mem1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "dst_dev_map_mem2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "voq_vsc_dst_map_mem0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "voq_vsc_dst_map_mem1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "voq_vsc_dst_map_mem2_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "voq_vsc_dst_map_mem3_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "dst_dev_map_mem_red_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "vsc_dst_map_mem0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "vsc_dst_map_mem1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "voq_dst_map_mem0_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "voq_dst_map_mem1_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "ddmq_mem0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "ddmq_mem1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "ddmq_mem2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "ddmq_mem_red_ecc_2b_err_initiate",
        15,
        1
      ]
    ]
  },
  "csms_mem_protect_err_status": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "dst_dev_map_mem0_err_int",
        0,
        1
      ],
      [
        "dst_dev_map_mem1_err_int",
        1,
        1
      ],
      [
        "dst_dev_map_mem2_err_int",
        2,
        1
      ],
      [
        "voq_vsc_dst_map_mem0_err_int",
        3,
        1
      ],
      [
        "voq_vsc_dst_map_mem1_err_int",
        4,
        1
      ],
      [
        "voq_vsc_dst_map_mem2_err_int",
        5,
        1
      ],
      [
        "voq_vsc_dst_map_mem3_err_int",
        6,
        1
      ],
      [
        "dst_dev_map_mem_red_err_int",
        7,
        1
      ],
      [
        "vsc_dst_map_mem0_err_int",
        8,
        1
      ],
      [
        "vsc_dst_map_mem1_err_int",
        9,
        1
      ],
      [
        "voq_dst_map_mem0_err_int",
        10,
        1
      ],
      [
        "voq_dst_map_mem1_err_int",
        11,
        1
      ],
      [
        "ddmq_mem0_err_int",
        12,
        1
      ],
      [
        "ddmq_mem1_err_int",
        13,
        1
      ],
      [
        "ddmq_mem2_err_int",
        14,
        1
      ],
      [
        "ddmq_mem_red_err_int",
        15,
        1
      ]
    ]
  },
  "csms_selected_ser_error_info": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "csms_ser_error_debug_configuration": {
    "type": "register",
    "block": "csms",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "csms_ecc_1b_err_debug": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "csms_ecc_2b_err_debug": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "csms_counter_timer": {
    "type": "register",
    "block": "csms",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "csms_counter_timer_trigger_reg": {
    "type": "register",
    "block": "csms",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "csms_memory_access_timeout": {
    "type": "register",
    "block": "csms",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "csms_broadcast_config_reg": {
    "type": "register",
    "block": "csms",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "csms_memory_prot_bypass": {
    "type": "register",
    "block": "csms",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "csms_soft_reset_configuration": {
    "type": "register",
    "block": "csms",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "csms_mbist_configuration": {
    "type": "register",
    "block": "csms",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "csms_power_down_configuration": {
    "type": "register",
    "block": "csms",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "csms_spare_reg": {
    "type": "register",
    "block": "csms",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "csms_pmro_ctrl": {
    "type": "register",
    "block": "csms",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "csms_pmro_status": {
    "type": "register",
    "block": "csms",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "csms_mirror_bus_conf_reg": {
    "type": "register",
    "block": "csms",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "csms_mirror_bus_status": {
    "type": "register",
    "block": "csms",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "csms_device_time_offset_cfg": {
    "type": "register",
    "block": "csms",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "csms_device_config_reg": {
    "type": "register",
    "block": "csms",
    "width": 9,
    "desc": "Device Configuration Register",
    "fields": [
      [
        "device_id",
        0,
        9
      ]
    ]
  },
  "csms_asic3_mode_reg": {
    "type": "register",
    "block": "csms",
    "width": 1,
    "desc": "Asic3 mode Register",
    "fields": [
      [
        "asic3_mode",
        0,
        1
      ]
    ]
  },
  "csms_packing_control_reg": {
    "type": "register",
    "block": "csms",
    "width": 20,
    "desc": "Packing Control Register. controls the packing of Credit Scheduling Control (CSC) messages into packets that are sent over the fabric.",
    "fields": [
      [
        "min_num_of_packed_msg",
        0,
        4
      ],
      [
        "packing_watchdog_timer_thr",
        4,
        16
      ]
    ]
  },
  "csms_rlb_mc_cg_msg_reg": {
    "type": "register",
    "block": "csms",
    "width": 20,
    "desc": "RLB-MC Congestion Message Register",
    "fields": [
      [
        "rlb_mc_cg_timer_val",
        0,
        20
      ]
    ]
  },
  "csms_txrq_req_dup_reg": {
    "type": "register",
    "block": "csms",
    "width": 30,
    "desc": "TXRQ Request Message Duplication Configuration Register per slice. Every VSC that is in the configured range is considered a TXRQ VSC which can duplicated messages of requests.",
    "fields": [
      [
        "txrq_min_vsc_range",
        0,
        15
      ],
      [
        "txrq_max_vsc_range",
        15,
        15
      ]
    ]
  },
  "csms_fmc_req_dup_reg": {
    "type": "register",
    "block": "csms",
    "width": 36,
    "desc": "FMC Request Message Duplication Configuration Register",
    "fields": [
      [
        "fmc_min_vsc_range",
        0,
        15
      ],
      [
        "fmc_max_vsc_range",
        15,
        15
      ],
      [
        "fmc_dup_bitmap",
        30,
        6
      ]
    ]
  },
  "csms_csms_interrupt_reg": {
    "type": "register",
    "block": "csms",
    "width": 22,
    "desc": "CSMS Interrupt Register",
    "fields": [
      [
        "credit_gnt_dest_dev_unreachable",
        0,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow0",
        1,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow1",
        2,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow2",
        3,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow3",
        4,
        1
      ],
      [
        "msg_buffer_ddmq_overflow0",
        5,
        1
      ],
      [
        "msg_buffer_ddmq_overflow1",
        6,
        1
      ],
      [
        "msg_buffer_ddmq_overflow2",
        7,
        1
      ],
      [
        "msg_buffer_ddmq_overflow3",
        8,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow0",
        9,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow1",
        10,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow2",
        11,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow3",
        12,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow0",
        13,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow1",
        14,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow2",
        15,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow3",
        16,
        1
      ],
      [
        "msg_map_fifo_overflow4",
        17,
        1
      ],
      [
        "msg_map_fifo_overflow5",
        18,
        1
      ],
      [
        "unpack_fifo_overflow",
        19,
        1
      ],
      [
        "gnt_sw_target_fifo_overflow",
        20,
        1
      ],
      [
        "req_sw_target_fifo_overflow",
        21,
        1
      ]
    ]
  },
  "csms_csms_interrupt_reg_mask": {
    "type": "register",
    "block": "csms",
    "width": 22,
    "desc": "This register masks CsmsInterruptReg interrupt register",
    "fields": [
      [
        "credit_gnt_dest_dev_unreachable_mask",
        0,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow0_mask",
        1,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow1_mask",
        2,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow2_mask",
        3,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow3_mask",
        4,
        1
      ],
      [
        "msg_buffer_ddmq_overflow0_mask",
        5,
        1
      ],
      [
        "msg_buffer_ddmq_overflow1_mask",
        6,
        1
      ],
      [
        "msg_buffer_ddmq_overflow2_mask",
        7,
        1
      ],
      [
        "msg_buffer_ddmq_overflow3_mask",
        8,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow0_mask",
        9,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow1_mask",
        10,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow2_mask",
        11,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow3_mask",
        12,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow0_mask",
        13,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow1_mask",
        14,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow2_mask",
        15,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow3_mask",
        16,
        1
      ],
      [
        "msg_map_fifo_overflow4_mask",
        17,
        1
      ],
      [
        "msg_map_fifo_overflow5_mask",
        18,
        1
      ],
      [
        "unpack_fifo_overflow_mask",
        19,
        1
      ],
      [
        "gnt_sw_target_fifo_overflow_mask",
        20,
        1
      ],
      [
        "req_sw_target_fifo_overflow_mask",
        21,
        1
      ]
    ]
  },
  "csms_csms_interrupt_reg_test": {
    "type": "register",
    "block": "csms",
    "width": 22,
    "desc": "This register tests CsmsInterruptReg interrupt register",
    "fields": [
      [
        "credit_gnt_dest_dev_unreachable_test",
        0,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow0_test",
        1,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow1_test",
        2,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow2_test",
        3,
        1
      ],
      [
        "msg_buffer_enq_pre_fifo_overflow3_test",
        4,
        1
      ],
      [
        "msg_buffer_ddmq_overflow0_test",
        5,
        1
      ],
      [
        "msg_buffer_ddmq_overflow1_test",
        6,
        1
      ],
      [
        "msg_buffer_ddmq_overflow2_test",
        7,
        1
      ],
      [
        "msg_buffer_ddmq_overflow3_test",
        8,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow0_test",
        9,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow1_test",
        10,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow2_test",
        11,
        1
      ],
      [
        "msg_buffer_deq_cmd_fifo_overflow3_test",
        12,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow0_test",
        13,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow1_test",
        14,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow2_test",
        15,
        1
      ],
      [
        "msg_buffer_local_fifo_overflow3_test",
        16,
        1
      ],
      [
        "msg_map_fifo_overflow4_test",
        17,
        1
      ],
      [
        "msg_map_fifo_overflow5_test",
        18,
        1
      ],
      [
        "unpack_fifo_overflow_test",
        19,
        1
      ],
      [
        "gnt_sw_target_fifo_overflow_test",
        20,
        1
      ],
      [
        "req_sw_target_fifo_overflow_test",
        21,
        1
      ]
    ]
  },
  "csms_debug_unreach_gnt_capture_reg": {
    "type": "register",
    "block": "csms",
    "width": 64,
    "desc": "Debug Unreachable Credit Grant Message Capture Register",
    "fields": [
      [
        "debug_unreach_gnt_capture0",
        0,
        16
      ],
      [
        "debug_unreach_gnt_capture1",
        16,
        16
      ],
      [
        "debug_unreach_gnt_capture2",
        32,
        16
      ],
      [
        "debug_unreach_gnt_capture3",
        48,
        16
      ]
    ]
  },
  "csms_debug_fifo_thr_cfg_reg": {
    "type": "register",
    "block": "csms",
    "width": 43,
    "desc": "Debug CSMS Configuration register",
    "fields": [
      [
        "msg_buffer_enq_pre_fifo_alm_full_thr",
        0,
        4
      ],
      [
        "msg_buffer_ddmq_alm_full_thr",
        4,
        5
      ],
      [
        "msg_buffer_deq_cmd_fifo_alm_full_thr",
        9,
        3
      ],
      [
        "msg_buffer_local_fifo_alm_full_thr",
        12,
        6
      ],
      [
        "msg_map_fifo_alm_full_thr",
        18,
        4
      ],
      [
        "unpack_fifo_alm_full_thr",
        22,
        6
      ],
      [
        "unpack_look_ahead_cfg",
        28,
        4
      ],
      [
        "unpack_almost_done_cfg",
        32,
        4
      ],
      [
        "switch_target_fifo_alm_full_cfg",
        36,
        7
      ]
    ]
  },
  "csms_csms_packing_ctrl_debug_cfg_reg": {
    "type": "register",
    "block": "csms",
    "width": 13,
    "desc": "CSMS to packing controller debug config register",
    "fields": [
      [
        "packing_ctrl_num_of_pack_debug_cfg",
        0,
        4
      ],
      [
        "packing_ctrl_num_of_dst_dev_debug_cfg",
        4,
        9
      ]
    ]
  },
  "csms_csms_packing_ctrl_debug_counter_reg": {
    "type": "register",
    "block": "csms",
    "width": 96,
    "desc": "CSMS to packing controller debug config register",
    "fields": [
      [
        "packing_ctrl_num_of_pack_debug_cnt",
        0,
        48
      ],
      [
        "packing_ctrl_num_of_dst_dev_debug_cnt",
        48,
        48
      ]
    ]
  },
  "csms_csms_req_local_counter_reg": {
    "type": "register",
    "block": "csms",
    "width": 48,
    "desc": "CSMS credit request local counter register",
    "fields": [
      [
        "req_local_cnt",
        0,
        48
      ]
    ]
  },
  "csms_csms_req_cbt_not_irdy_counter_reg": {
    "type": "register",
    "block": "csms",
    "width": 32,
    "desc": "CSMS req CBT not i_rdy counter register",
    "fields": [
      [
        "req_cbt_not_irdy_cnt",
        0,
        32
      ]
    ]
  },
  "csms_csms_gnt_cbt_not_irdy_counter_reg": {
    "type": "register",
    "block": "csms",
    "width": 32,
    "desc": "CSMS Gnt CBT not i_rdy counter register",
    "fields": [
      [
        "gnt_cbt_not_irdy_cnt",
        0,
        32
      ]
    ]
  },
  "csms_csms_req_gnt_event_counter_reg": {
    "type": "register",
    "block": "csms",
    "width": 144,
    "desc": "CSMS request and grants counter register",
    "fields": [
      [
        "ics_req_counter",
        0,
        48
      ],
      [
        "sch_gnt0_counter",
        48,
        48
      ],
      [
        "sch_gnt1_counter",
        96,
        48
      ]
    ]
  },
  "csms_csms_req_gnt_cbr_max_counter_reg": {
    "type": "register",
    "block": "csms",
    "width": 16,
    "desc": "CSMS request and grants cbr max register",
    "fields": [
      [
        "ics_req_cbr_max",
        0,
        6
      ],
      [
        "sch_gnt0_cbr_max",
        6,
        5
      ],
      [
        "sch_gnt1_cbr_max",
        11,
        5
      ]
    ]
  },
  "csms_csms_req_fifo_full_reg": {
    "type": "register",
    "block": "csms",
    "width": 12,
    "desc": "CSMS request target fifo register",
    "fields": [
      [
        "req_fifo_event_full",
        0,
        12
      ]
    ]
  },
  "csms_csms_gnt_fifo_full_reg": {
    "type": "register",
    "block": "csms",
    "width": 6,
    "desc": "CSMS grant target fifo register",
    "fields": [
      [
        "gnt_fifo_event_full",
        0,
        6
      ]
    ]
  },
  "csms_dst_dev_map_mem": {
    "type": "memory",
    "block": "csms",
    "width": 9,
    "desc": "Destination Device Mapping Memory A memory per Slice (except slices 3, 4 & 5, which must be local) that maps all VOQs and VSCs to a remote destination device. The mapping is done in groups of 16, first 4096 entries are used to map the VSCs, second 4096 are used to map the VOQs",
    "fields": [
      [
        "dst_dev",
        0,
        9
      ]
    ]
  },
  "csms_voq_vsc_dst_map_mem": {
    "type": "memory",
    "block": "csms",
    "width": 15,
    "desc": "VOQ and VSC Destination Mapping Memory A memory per Slice that maps all VSCs to destination {Slice, VOQ}, and all VOQs to destinatino {IFG, VSC}. The mapping is done in groups of 16, first 4096 entries are used to map the VSCs, second 4096 are used to map the VOQs",
    "fields": [
      [
        "dst_slice_voq_or_ifg_vsc",
        0,
        15
      ]
    ]
  },
  "csms_dst_dev_map_mem_red": {
    "type": "memory",
    "block": "csms",
    "width": 7,
    "desc": "Destination Device Mapping Memory Reduced A memory for slice 3 that maps all VOQs and VSCs to a remote destination device. The mapping is done in groups of 16, first 4096 entries are used to map the VSCs, second 4096 are used to map the VOQs",
    "fields": [
      [
        "dst_dev_red",
        0,
        7
      ]
    ]
  },
  "csms_vsc_dst_map_mem": {
    "type": "memory",
    "block": "csms",
    "width": 15,
    "desc": "VSC Mapping Memory for Slice 3, 4 & 5 Maps all VSCs to destination {Slice, VOQ}. The mapping is done in groups of 16.",
    "fields": [
      [
        "dst_slice_voq",
        0,
        15
      ]
    ]
  },
  "csms_voq_dst_map_mem": {
    "type": "memory",
    "block": "csms",
    "width": 15,
    "desc": "VOQ Mapping Memory for Slice 3, 4 & 5 Maps all VOQs to destination {IFG, VSC}. The mapping is done in groups of 16.",
    "fields": [
      [
        "dst_ifg_vsc",
        0,
        15
      ]
    ]
  },
  "csms_ddmq_mem": {
    "type": "memory",
    "block": "csms",
    "width": 26,
    "desc": "Destination Device Message Queues Memory Shared memory for all DDMQ of slices 0,1 and 2 ",
    "fields": [
      [
        "msg_data",
        0,
        26
      ]
    ]
  },
  "csms_ddmq_mem_red": {
    "type": "memory",
    "block": "csms",
    "width": 26,
    "desc": "Destination Device Message Queues Reduced Memory Shared memory for all DDMQ of slice 3",
    "fields": [
      [
        "msg_data",
        0,
        26
      ]
    ]
  },
  "frm_interrupt_register": {
    "type": "register",
    "block": "frm",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "frm_interrupt_reg_summary",
        1,
        1
      ]
    ]
  },
  "frm_mem_protect_interrupt": {
    "type": "register",
    "block": "frm",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "frm_mem_protect_interrupt_test": {
    "type": "register",
    "block": "frm",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "frm_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "frm",
    "width": 4,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "fabric_routing_table_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "high_rev_fabric_routing_table_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "low_rev_fabric_routing_table_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "far_end_topology_mapping_table_ecc_1b_err_interrupt_mask",
        3,
        1
      ]
    ]
  },
  "frm_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "frm",
    "width": 4,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "fabric_routing_table_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "high_rev_fabric_routing_table_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "low_rev_fabric_routing_table_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "far_end_topology_mapping_table_ecc_2b_err_interrupt_mask",
        3,
        1
      ]
    ]
  },
  "frm_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "frm",
    "width": 4,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "fabric_routing_table_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "high_rev_fabric_routing_table_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "low_rev_fabric_routing_table_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "far_end_topology_mapping_table_ecc_1b_err_initiate",
        3,
        1
      ]
    ]
  },
  "frm_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "frm",
    "width": 4,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "fabric_routing_table_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "high_rev_fabric_routing_table_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "low_rev_fabric_routing_table_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "far_end_topology_mapping_table_ecc_2b_err_initiate",
        3,
        1
      ]
    ]
  },
  "frm_mem_protect_err_status": {
    "type": "register",
    "block": "frm",
    "width": 4,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "fabric_routing_table_err_int",
        0,
        1
      ],
      [
        "high_rev_fabric_routing_table_err_int",
        1,
        1
      ],
      [
        "low_rev_fabric_routing_table_err_int",
        2,
        1
      ],
      [
        "far_end_topology_mapping_table_err_int",
        3,
        1
      ]
    ]
  },
  "frm_selected_ser_error_info": {
    "type": "register",
    "block": "frm",
    "width": 17,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        15
      ],
      [
        "mem_err_type",
        15,
        2
      ]
    ]
  },
  "frm_ser_error_debug_configuration": {
    "type": "register",
    "block": "frm",
    "width": 3,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        2
      ],
      [
        "reset_memory_errors",
        2,
        1
      ]
    ]
  },
  "frm_ecc_1b_err_debug": {
    "type": "register",
    "block": "frm",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "frm_ecc_2b_err_debug": {
    "type": "register",
    "block": "frm",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "frm_counter_timer": {
    "type": "register",
    "block": "frm",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "frm_counter_timer_trigger_reg": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "frm_memory_access_timeout": {
    "type": "register",
    "block": "frm",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "frm_broadcast_config_reg": {
    "type": "register",
    "block": "frm",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "frm_memory_prot_bypass": {
    "type": "register",
    "block": "frm",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "frm_soft_reset_configuration": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "frm_mbist_configuration": {
    "type": "register",
    "block": "frm",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "frm_power_down_configuration": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "frm_spare_reg": {
    "type": "register",
    "block": "frm",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "frm_pmro_ctrl": {
    "type": "register",
    "block": "frm",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "frm_pmro_status": {
    "type": "register",
    "block": "frm",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "frm_mirror_bus_conf_reg": {
    "type": "register",
    "block": "frm",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "frm_mirror_bus_status": {
    "type": "register",
    "block": "frm",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "frm_device_time_offset_cfg": {
    "type": "register",
    "block": "frm",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "frm_init_done_reg": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "FRM Init Done Register",
    "fields": [
      [
        "frt_init_done",
        0,
        1
      ]
    ]
  },
  "frm_frp288_device_mode_reg": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "FRP 288 Device Mode Register",
    "fields": [
      [
        "frp288_device_mode",
        0,
        1
      ]
    ]
  },
  "frm_fe13_lc_mode_reg": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "FE13 LC Mode Register",
    "fields": [
      [
        "fe13_lc_mode",
        0,
        1
      ]
    ]
  },
  "frm_frp_enable_reg": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "FRP Generation Enable Register",
    "fields": [
      [
        "frp_packet_gen_en",
        0,
        1
      ]
    ]
  },
  "frm_frm_timer_reg": {
    "type": "register",
    "block": "frm",
    "width": 32,
    "desc": "Frm Timer Register",
    "fields": [
      [
        "frp_gen_timer_thr",
        0,
        16
      ],
      [
        "frp_gen_min_thr",
        16,
        16
      ]
    ]
  },
  "frm_fmc_elig_reg": {
    "type": "register",
    "block": "frm",
    "width": 108,
    "desc": "FMC Eligible Vector Register",
    "fields": [
      [
        "fmc_elig",
        0,
        108
      ]
    ]
  },
  "frm_frp_reachable_bitmap12_reg": {
    "type": "register",
    "block": "frm",
    "width": 512,
    "desc": "FRP Reachable Device Bitmap 12 Register",
    "fields": [
      [
        "frp_reachable_bitmap12",
        0,
        512
      ]
    ]
  },
  "frm_frp_reachable_bitmap3_reg": {
    "type": "register",
    "block": "frm",
    "width": 512,
    "desc": "FRP Reachable Device Bitmap 3 Register",
    "fields": [
      [
        "frp_reachable_bitmap3",
        0,
        512
      ]
    ]
  },
  "frm_update_fmc_stable_thr_reg": {
    "type": "register",
    "block": "frm",
    "width": 26,
    "desc": "Update FMC Stable Threshold Register",
    "fields": [
      [
        "update_fmc_stable_thr",
        0,
        10
      ],
      [
        "update_fmc_timer_thr",
        10,
        16
      ]
    ]
  },
  "frm_device_config_reg": {
    "type": "register",
    "block": "frm",
    "width": 20,
    "desc": "Configure device and slices types ",
    "fields": [
      [
        "device_type",
        0,
        3
      ],
      [
        "slice3_config",
        3,
        1
      ],
      [
        "slice4_config",
        4,
        1
      ],
      [
        "fe13_config",
        5,
        6
      ],
      [
        "device_id",
        11,
        9
      ]
    ]
  },
  "frm_link_status_reg": {
    "type": "register",
    "block": "frm",
    "width": 256,
    "desc": "All Links Status Register",
    "fields": [
      [
        "link_status",
        0,
        256
      ]
    ]
  },
  "frm_fabric_link_down_transition_reg": {
    "type": "register",
    "block": "frm",
    "width": 108,
    "desc": "All Fabric Links Down Transition Register",
    "fields": [
      [
        "fabric_link_down_transition",
        0,
        108
      ]
    ]
  },
  "frm_fabric_link_mask_reg": {
    "type": "register",
    "block": "frm",
    "width": 108,
    "desc": "Fabric Link Mask Register",
    "fields": [
      [
        "fabric_link_mask",
        0,
        108
      ]
    ]
  },
  "frm_plb_uc_context_fc_en_reg": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "PLB UC Context Flow Control Enable Register",
    "fields": [
      [
        "plb_uc_context_fc_en",
        0,
        1
      ]
    ]
  },
  "frm_congestion_score_fc_reg": {
    "type": "register",
    "block": "frm",
    "width": 24,
    "desc": "Congestion Score PLB UC Flow Control Register",
    "fields": [
      [
        "congestion_score_fc_en",
        0,
        1
      ],
      [
        "congestion_score_fc_thr",
        1,
        23
      ]
    ]
  },
  "frm_dcfm_config_reg": {
    "type": "register",
    "block": "frm",
    "width": 50,
    "desc": "DCFM Configuration Register",
    "fields": [
      [
        "dcfm_operation_en",
        0,
        1
      ],
      [
        "generate_far_end_mask_en",
        1,
        1
      ],
      [
        "far_end_mask_aging_thr",
        2,
        16
      ],
      [
        "link_failure_mode_aging_thr",
        18,
        16
      ],
      [
        "reorder_error_mode_aging_thr",
        34,
        16
      ]
    ]
  },
  "frm_dcfm_feedback_parsing_reg": {
    "type": "register",
    "block": "frm",
    "width": 50,
    "desc": "DCFM Feedback Parsing Register",
    "fields": [
      [
        "header_truncate_size",
        0,
        8
      ],
      [
        "flow_sig_offset",
        8,
        6
      ],
      [
        "ssn_offset",
        14,
        6
      ],
      [
        "cong_exp_offset",
        20,
        6
      ],
      [
        "lbgid_offset",
        26,
        6
      ],
      [
        "reorder_err_offset",
        32,
        6
      ],
      [
        "device_oversub_offset",
        38,
        6
      ],
      [
        "link_failure_offset",
        44,
        6
      ]
    ]
  },
  "frm_dcfm_link_failure_mode_reg": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "Link Failure Mode Register",
    "fields": [
      [
        "dcfm_link_failure_mode",
        0,
        1
      ]
    ]
  },
  "frm_dcfm_reorder_error_mode_reg": {
    "type": "register",
    "block": "frm",
    "width": 1,
    "desc": "Reorder Error Mode Register",
    "fields": [
      [
        "dcfm_reorder_error_mode",
        0,
        1
      ]
    ]
  },
  "frm_dcf_code_reg": {
    "type": "register",
    "block": "frm",
    "width": 2,
    "desc": "DCF Code Register",
    "fields": [
      [
        "dcf_code",
        0,
        2
      ]
    ]
  },
  "frm_dcf_code_config_reg": {
    "type": "register",
    "block": "frm",
    "width": 21,
    "desc": "DCF Code Configuration Register",
    "fields": [
      [
        "dcf_code_enable",
        0,
        1
      ],
      [
        "dcf_code_timer_thr",
        1,
        20
      ]
    ]
  },
  "frm_dcf_data_config_reg": {
    "type": "register",
    "block": "frm",
    "width": 7,
    "desc": "DCF Data Configuration Register",
    "fields": [
      [
        "dcf_data_en",
        0,
        1
      ],
      [
        "dcf_data_device_oversub_thr",
        1,
        6
      ]
    ]
  },
  "frm_frm_interrupt_reg": {
    "type": "register",
    "block": "frm",
    "width": 3,
    "desc": "FRM Design Interrupt Register",
    "fields": [
      [
        "link_status_down_int",
        0,
        1
      ],
      [
        "frt_wr_fifo_overflow_int",
        1,
        1
      ],
      [
        "dcfm_feedback_fifo_full_int",
        2,
        1
      ]
    ]
  },
  "frm_frm_interrupt_reg_mask": {
    "type": "register",
    "block": "frm",
    "width": 3,
    "desc": "This register masks FrmInterruptReg interrupt register",
    "fields": [
      [
        "link_status_down_int_mask",
        0,
        1
      ],
      [
        "frt_wr_fifo_overflow_int_mask",
        1,
        1
      ],
      [
        "dcfm_feedback_fifo_full_int_mask",
        2,
        1
      ]
    ]
  },
  "frm_frm_interrupt_reg_test": {
    "type": "register",
    "block": "frm",
    "width": 3,
    "desc": "This register tests FrmInterruptReg interrupt register",
    "fields": [
      [
        "link_status_down_int_test",
        0,
        1
      ],
      [
        "frt_wr_fifo_overflow_int_test",
        1,
        1
      ],
      [
        "dcfm_feedback_fifo_full_int_test",
        2,
        1
      ]
    ]
  },
  "frm_debug_frtm_debug_reg": {
    "type": "register",
    "block": "frm",
    "width": 6,
    "desc": "FRT Manager Debug Register",
    "fields": [
      [
        "debug_frtm_disable_fmc_elig_updates",
        0,
        1
      ],
      [
        "debug_frtm_disable_reachable_bitmap_updates",
        1,
        1
      ],
      [
        "debug_frtm_generate_frt_scan",
        2,
        1
      ],
      [
        "debug_frtm_frt_wr_fifo_alm_full_thr",
        3,
        3
      ]
    ]
  },
  "frm_debug_frp_packet_cnt_reg": {
    "type": "register",
    "block": "frm",
    "width": 40,
    "desc": "FRP Packets Counter Register",
    "fields": [
      [
        "debug_frp_packet_rx_cnt",
        0,
        20
      ],
      [
        "debug_frp_packet_tx_cnt",
        20,
        20
      ]
    ]
  },
  "frm_debug_link_status_reg": {
    "type": "register",
    "block": "frm",
    "width": 45,
    "desc": "Link Status Debug Register",
    "fields": [
      [
        "debug_max_num_cong_link",
        0,
        7
      ],
      [
        "debug_max_congestion_score",
        7,
        23
      ],
      [
        "debug_max_num_cong_tor_link",
        30,
        6
      ],
      [
        "debug_fmc_cg_device_captured",
        36,
        9
      ]
    ]
  },
  "frm_debug_dcfm_packet_cnt_reg": {
    "type": "register",
    "block": "frm",
    "width": 80,
    "desc": "DCFM Feedback Packet Counter Register",
    "fields": [
      [
        "debug_dcfm_rx_packet_cnt",
        0,
        20
      ],
      [
        "debug_dcfm_rx_reorder_err_cnt",
        20,
        20
      ],
      [
        "debug_dcfm_rx_link_err_cnt",
        40,
        20
      ],
      [
        "debug_dcfm_rx_device_oversub_cnt",
        60,
        20
      ]
    ]
  },
  "frm_debug_cbt_nirdy_counter_reg": {
    "type": "register",
    "block": "frm",
    "width": 32,
    "desc": "Debug Cbt Nirdy Counter Reg",
    "fields": [
      [
        "debug_cbt_nirdy_cnt",
        0,
        32
      ]
    ]
  },
  "frm_fabric_routing_table": {
    "type": "memory",
    "block": "frm",
    "width": 108,
    "desc": "Fabric Routing Table for mapping destination devices to fabric links",
    "fields": [
      [
        "links_bmp",
        0,
        108
      ]
    ]
  },
  "frm_high_rev_fabric_routing_table": {
    "type": "memory",
    "block": "frm",
    "width": 256,
    "desc": "High Reversed Fabric Routing Table",
    "fields": [
      [
        "high_device_bmp",
        0,
        256
      ]
    ]
  },
  "frm_low_rev_fabric_routing_table": {
    "type": "memory",
    "block": "frm",
    "width": 256,
    "desc": "Reversed Fabric Routing Table",
    "fields": [
      [
        "low_device_bmp",
        0,
        256
      ]
    ]
  },
  "frm_far_end_topology_mapping_table": {
    "type": "memory",
    "block": "frm",
    "width": 36,
    "desc": "DCF Far End Topology Mapping Table Entry per device (512) per far end link (36)",
    "fields": [
      [
        "fabric_links",
        0,
        36
      ]
    ]
  },
  "frm_fabric_links_position_cfg_table": {
    "type": "memory",
    "block": "frm",
    "width": 5,
    "desc": "Fabric Links Position Cofiguration Table ",
    "fields": [
      [
        "fabric_links_position_cfg_data",
        0,
        5
      ]
    ]
  },
  "frm_min_thr_per_device_id_cfg_table": {
    "type": "memory",
    "block": "frm",
    "width": 4,
    "desc": "Min Thr Per Device Id Cfg Table",
    "fields": [
      [
        "min_thr_per_device_id_cfg_data",
        0,
        4
      ]
    ]
  },
  "fte_interrupt_register": {
    "type": "register",
    "block": "fte",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "fte_interrupt_reg_summary",
        1,
        1
      ]
    ]
  },
  "fte_mem_protect_interrupt": {
    "type": "register",
    "block": "fte",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "fte_mem_protect_interrupt_test": {
    "type": "register",
    "block": "fte",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "fte_counter_timer": {
    "type": "register",
    "block": "fte",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "fte_counter_timer_trigger_reg": {
    "type": "register",
    "block": "fte",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "fte_memory_access_timeout": {
    "type": "register",
    "block": "fte",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "fte_broadcast_config_reg": {
    "type": "register",
    "block": "fte",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "fte_memory_prot_bypass": {
    "type": "register",
    "block": "fte",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "fte_soft_reset_configuration": {
    "type": "register",
    "block": "fte",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "fte_mbist_configuration": {
    "type": "register",
    "block": "fte",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "fte_power_down_configuration": {
    "type": "register",
    "block": "fte",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "fte_spare_reg": {
    "type": "register",
    "block": "fte",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "fte_pmro_ctrl": {
    "type": "register",
    "block": "fte",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "fte_pmro_status": {
    "type": "register",
    "block": "fte",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "fte_mirror_bus_conf_reg": {
    "type": "register",
    "block": "fte",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "fte_mirror_bus_status": {
    "type": "register",
    "block": "fte",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "fte_device_time_offset_cfg": {
    "type": "register",
    "block": "fte",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "fte_fte_interrupt_reg": {
    "type": "register",
    "block": "fte",
    "width": 2,
    "desc": "Interrupt",
    "fields": [
      [
        "lost_sync_interrupt",
        0,
        1
      ],
      [
        "expected_device_time_diff_interrupt",
        1,
        1
      ]
    ]
  },
  "fte_fte_interrupt_reg_mask": {
    "type": "register",
    "block": "fte",
    "width": 2,
    "desc": "This register masks FteInterruptReg interrupt register",
    "fields": [
      [
        "lost_sync_interrupt_mask",
        0,
        1
      ],
      [
        "expected_device_time_diff_interrupt_mask",
        1,
        1
      ]
    ]
  },
  "fte_fte_interrupt_reg_test": {
    "type": "register",
    "block": "fte",
    "width": 2,
    "desc": "This register tests FteInterruptReg interrupt register",
    "fields": [
      [
        "lost_sync_interrupt_test",
        0,
        1
      ],
      [
        "expected_device_time_diff_interrupt_test",
        1,
        1
      ]
    ]
  },
  "fte_clock_inc_reg": {
    "type": "register",
    "block": "fte",
    "width": 34,
    "desc": "Clock Increment Value",
    "fields": [
      [
        "clock_inc_ns_value",
        0,
        4
      ],
      [
        "clock_inc_frac_value",
        4,
        20
      ],
      [
        "clock_frac_comp_period",
        24,
        5
      ],
      [
        "clock_frac_comp_val",
        29,
        5
      ]
    ]
  },
  "fte_enable_reg": {
    "type": "register",
    "block": "fte",
    "width": 25,
    "desc": "Enable Register",
    "fields": [
      [
        "peer_delay_req_gen_en",
        0,
        1
      ],
      [
        "peer_delay_req_gen_link_idx",
        1,
        7
      ],
      [
        "peer_delay_req_gen_periodic_timer",
        8,
        16
      ],
      [
        "sync_packet_gen_en",
        24,
        1
      ]
    ]
  },
  "fte_leaky_bucket_reg": {
    "type": "register",
    "block": "fte",
    "width": 60,
    "desc": "Leaky Bucket Register for setting the Fabric Time Sync FSM various Thresholds.",
    "fields": [
      [
        "leaky_out_of_sync_inc_val",
        0,
        7
      ],
      [
        "leaky_out_of_sync_dec_val",
        7,
        7
      ],
      [
        "leaky_in_sync_inc_val",
        14,
        7
      ],
      [
        "leaky_in_sync_dec_val",
        21,
        7
      ],
      [
        "leaky_move_to_in_sync_thr",
        28,
        16
      ],
      [
        "leaky_move_to_out_of_sync_thr",
        44,
        16
      ]
    ]
  },
  "fte_time_diff_threshold_reg": {
    "type": "register",
    "block": "fte",
    "width": 20,
    "desc": "Time Difference Thresholds Register",
    "fields": [
      [
        "time_diff_far_thr",
        0,
        12
      ],
      [
        "time_diff_adj_thr",
        12,
        8
      ]
    ]
  },
  "fte_out_of_sync_watchdog_reg": {
    "type": "register",
    "block": "fte",
    "width": 16,
    "desc": "Out Of Sync Watchdog Timer Register",
    "fields": [
      [
        "out_of_sync_watchdog_timer",
        0,
        16
      ]
    ]
  },
  "fte_sync_gen_timer_reg": {
    "type": "register",
    "block": "fte",
    "width": 17,
    "desc": "Sync Packet Generation Timer Register",
    "fields": [
      [
        "sync_gen_timer_jitter_en",
        0,
        1
      ],
      [
        "sync_gen_timer",
        1,
        16
      ]
    ]
  },
  "fte_device_config_reg": {
    "type": "register",
    "block": "fte",
    "width": 12,
    "desc": "Configure device and slices types ",
    "fields": [
      [
        "device_id",
        0,
        10
      ],
      [
        "device_type",
        10,
        2
      ]
    ]
  },
  "fte_fe3_links_config_reg": {
    "type": "register",
    "block": "fte",
    "width": 108,
    "desc": "FE3 Links Config Register",
    "fields": [
      [
        "fe3_links_config",
        0,
        108
      ]
    ]
  },
  "fte_fabric_link_mask_reg": {
    "type": "register",
    "block": "fte",
    "width": 108,
    "desc": "Fabric Link Mask Register",
    "fields": [
      [
        "fabric_link_mask",
        0,
        108
      ]
    ]
  },
  "fte_device_time_sync_reg": {
    "type": "register",
    "block": "fte",
    "width": 60,
    "desc": "Device Time Sync Pad configuration Register",
    "fields": [
      [
        "device_time_load_pad_en",
        0,
        1
      ],
      [
        "device_time_load_pad_delay",
        1,
        16
      ],
      [
        "device_time_sync_ck_pad_en",
        17,
        1
      ],
      [
        "device_time_sync_ck_pad_delay",
        18,
        16
      ],
      [
        "device_time_sync_ck_interval",
        34,
        16
      ],
      [
        "device_time_sync_ck_max_diff_th",
        50,
        10
      ]
    ]
  },
  "fte_device_time_pps_reg": {
    "type": "register",
    "block": "fte",
    "width": 82,
    "desc": "Device Time PPS configuration Register",
    "fields": [
      [
        "device_time_pps_en",
        0,
        1
      ],
      [
        "device_time_pps_interval",
        1,
        32
      ],
      [
        "device_time_pps_polarity",
        33,
        1
      ],
      [
        "device_time_pps_compensation_val",
        34,
        16
      ],
      [
        "device_time_pps_width",
        50,
        32
      ]
    ]
  },
  "fte_device_time_pps_counter_force_reg": {
    "type": "register",
    "block": "fte",
    "width": 33,
    "desc": "Overides the PPS's interval counter",
    "fields": [
      [
        "device_time_pps_counter_force_en",
        0,
        1
      ],
      [
        "device_time_pps_counter_force_val",
        1,
        32
      ]
    ]
  },
  "fte_device_time_load_command_reg": {
    "type": "register",
    "block": "fte",
    "width": 3,
    "desc": "Device Time Load Command Register",
    "fields": [
      [
        "device_time_load_command",
        0,
        3
      ]
    ]
  },
  "fte_device_time_unit_reg": {
    "type": "register",
    "block": "fte",
    "width": 34,
    "desc": "Device Time Clock Increment Value. The total increment value is of 24 bits in units of 2^(-20) nanoseconds. A write access to this register triggers immediate change to the time unit that is used by the Device Time engine",
    "fields": [
      [
        "device_time_clock_inc_ns_value",
        0,
        4
      ],
      [
        "device_time_clock_inc_frac_value",
        4,
        20
      ],
      [
        "device_time_clock_frac_comp_period",
        24,
        5
      ],
      [
        "device_time_clock_frac_comp_val",
        29,
        5
      ]
    ]
  },
  "fte_device_time_new_unit_reg": {
    "type": "register",
    "block": "fte",
    "width": 34,
    "desc": "Device Time Clock New Loaded Increment Value. The value written to this register is loaded to the time unit used by the Device Time engine only after configuring the DeviceTimeLoadCommand to Load new time unit and asserting the DEVICE-TIME-LOAD signal",
    "fields": [
      [
        "device_time_clock_new_inc_ns_value",
        0,
        4
      ],
      [
        "device_time_clock_new_inc_frac_value",
        4,
        20
      ],
      [
        "device_time_clock_new_frac_comp_period",
        24,
        5
      ],
      [
        "device_time_clock_new_frac_comp_val",
        29,
        5
      ]
    ]
  },
  "fte_device_time_sw_tuning_reg": {
    "type": "register",
    "block": "fte",
    "width": 37,
    "desc": "Device Time SW Tuning Register",
    "fields": [
      [
        "sw_tuning_inc_stall",
        0,
        1
      ],
      [
        "sw_tuning_repeat",
        1,
        16
      ],
      [
        "sw_tuning_period",
        17,
        20
      ]
    ]
  },
  "fte_new_time_load_reg": {
    "type": "register",
    "block": "fte",
    "width": 164,
    "desc": "New Time Load Register",
    "fields": [
      [
        "new_time_load_delay",
        0,
        16
      ],
      [
        "device_time_new_load",
        16,
        32
      ],
      [
        "device_time_new_load_offset",
        48,
        52
      ],
      [
        "time_of_day_new_load",
        100,
        64
      ]
    ]
  },
  "fte_time_status_reg": {
    "type": "register",
    "block": "fte",
    "width": 129,
    "desc": "Status Register to all times",
    "fields": [
      [
        "fabric_time_status",
        0,
        32
      ],
      [
        "fabric_time_sync_status",
        32,
        1
      ],
      [
        "device_time_status",
        33,
        32
      ],
      [
        "time_of_day_status",
        65,
        64
      ]
    ]
  },
  "fte_expected_device_time_status_reg": {
    "type": "register",
    "block": "fte",
    "width": 65,
    "desc": "Expected Device Time Difference is captured at this register",
    "fields": [
      [
        "expected_device_time_above_diff_thr",
        0,
        1
      ],
      [
        "compared_expected_device_time",
        1,
        32
      ],
      [
        "compared_device_time",
        33,
        32
      ]
    ]
  },
  "fte_fabric_time_force_reg": {
    "type": "register",
    "block": "fte",
    "width": 33,
    "desc": "Allows the CPU to force a value of the fabric time and the sync status",
    "fields": [
      [
        "fabric_time_force_value",
        0,
        32
      ],
      [
        "fabric_time_sync_force_value",
        32,
        1
      ]
    ]
  },
  "fte_freeze_register": {
    "type": "register",
    "block": "fte",
    "width": 97,
    "desc": "Freeze configuration register",
    "fields": [
      [
        "freeze_enable",
        0,
        1
      ],
      [
        "freeze_at_tod",
        1,
        96
      ]
    ]
  },
  "fte_time_capture_reg": {
    "type": "register",
    "block": "fte",
    "width": 96,
    "desc": "Time Capture Register",
    "fields": [
      [
        "device_time_capture",
        0,
        32
      ],
      [
        "time_of_day_capture",
        32,
        64
      ]
    ]
  },
  "fte_debug_fabric_time_diff_cnt_reg": {
    "type": "register",
    "block": "fte",
    "width": 120,
    "desc": "Debug Fabric Time Diff Counter Register",
    "fields": [
      [
        "debug_fabric_time_diff_cnt0",
        0,
        20
      ],
      [
        "debug_fabric_time_diff_cnt1",
        20,
        20
      ],
      [
        "debug_fabric_time_diff_cnt2",
        40,
        20
      ],
      [
        "debug_fabric_time_diff_cnt3",
        60,
        20
      ],
      [
        "debug_fabric_time_diff_cnt4",
        80,
        20
      ],
      [
        "debug_fabric_time_diff_cnt5",
        100,
        20
      ]
    ]
  },
  "fte_debug_fabric_time_diff_max_reg": {
    "type": "register",
    "block": "fte",
    "width": 27,
    "desc": "Debug Fabric Time Diff Counter Register",
    "fields": [
      [
        "debug_fabric_time_max_diff",
        0,
        16
      ],
      [
        "debug_fabric_time_max_diff_pkt_ahead",
        16,
        1
      ],
      [
        "debug_fabric_time_max_source_device",
        17,
        10
      ]
    ]
  },
  "fte_debug_fabric_time_max_diff_thr_reg": {
    "type": "register",
    "block": "fte",
    "width": 16,
    "desc": "Debug Fabric Time Source Device Threshold Register",
    "fields": [
      [
        "debug_fabric_time_max_diff_thr",
        0,
        16
      ]
    ]
  },
  "fte_debug_fabric_time_sync_packet_cnt_reg": {
    "type": "register",
    "block": "fte",
    "width": 64,
    "desc": "Debug Fabric Time Sync Packets Counter Register",
    "fields": [
      [
        "debug_fabric_time_rx_cnt",
        0,
        32
      ],
      [
        "debug_fabric_time_tx_cnt",
        32,
        32
      ]
    ]
  },
  "fte_debug_fabric_time_capture_on_tod_reg": {
    "type": "register",
    "block": "fte",
    "width": 96,
    "desc": "Debug Fabric Time Capture on Time of Day Register",
    "fields": [
      [
        "debug_fabric_time_capture_on_tod",
        0,
        96
      ]
    ]
  },
  "fte_debug_fabric_time_captured_reg": {
    "type": "register",
    "block": "fte",
    "width": 32,
    "desc": "Debug Fabric Time Captured",
    "fields": [
      [
        "debug_fabric_time_captured",
        0,
        32
      ]
    ]
  },
  "fte_debug_cbt_nirdy_counter_reg": {
    "type": "register",
    "block": "fte",
    "width": 32,
    "desc": "Debug Cbt Nirdy Counter Reg",
    "fields": [
      [
        "debug_cbt_nirdy_cnt",
        0,
        32
      ]
    ]
  },
  "fte_debug_device_time_event_gen_reg": {
    "type": "register",
    "block": "fte",
    "width": 3,
    "desc": "Debug Device Time Event Genenrate Register",
    "fields": [
      [
        "debug_device_time_event_gen_load_cmnd",
        0,
        1
      ],
      [
        "debug_device_time_event_gen_sync_ck",
        1,
        1
      ],
      [
        "debug_device_time_event_gen_freeze_hist",
        2,
        1
      ]
    ]
  },
  "fte_peer_delay_mem": {
    "type": "memory",
    "block": "fte",
    "width": 32,
    "desc": "Peer Delay Memory. This table is maintained by the HW, SW should only access it for debugging",
    "fields": [
      [
        "link_peer_delay_valid",
        0,
        1
      ],
      [
        "link_peer_delay",
        1,
        13
      ],
      [
        "link_peer_device_id",
        14,
        10
      ],
      [
        "link_peer_link_num",
        24,
        8
      ]
    ]
  },
  "mrb_interrupt_register": {
    "type": "register",
    "block": "mrb",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "mrb_mem_protect_interrupt": {
    "type": "register",
    "block": "mrb",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "mrb_mem_protect_interrupt_test": {
    "type": "register",
    "block": "mrb",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "mrb_memory_access_timeout": {
    "type": "register",
    "block": "mrb",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "mrb_broadcast_config_reg": {
    "type": "register",
    "block": "mrb",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "mrb_memory_prot_bypass": {
    "type": "register",
    "block": "mrb",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "mrb_soft_reset_configuration": {
    "type": "register",
    "block": "mrb",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "mrb_mbist_configuration": {
    "type": "register",
    "block": "mrb",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "mrb_power_down_configuration": {
    "type": "register",
    "block": "mrb",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "mrb_spare_reg": {
    "type": "register",
    "block": "mrb",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "mrb_pmro_ctrl": {
    "type": "register",
    "block": "mrb",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "mrb_pmro_status": {
    "type": "register",
    "block": "mrb",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "mrb_mirror_bus_conf_reg": {
    "type": "register",
    "block": "mrb",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "mrb_mirror_bus_status": {
    "type": "register",
    "block": "mrb",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "mrb_device_time_offset_cfg": {
    "type": "register",
    "block": "mrb",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "mrb_trigger_pattern_cfg_reg": {
    "type": "register",
    "block": "mrb",
    "width": 65,
    "desc": "Trigger Pattern Configuration Register",
    "fields": [
      [
        "pattern_enable",
        0,
        1
      ],
      [
        "pattern_value",
        1,
        32
      ],
      [
        "pattern_mask",
        33,
        32
      ]
    ]
  },
  "mrb_record_cfg_reg": {
    "type": "register",
    "block": "mrb",
    "width": 6,
    "desc": "Recording Configuration Register",
    "fields": [
      [
        "record_mode",
        0,
        2
      ],
      [
        "record_chain_mux",
        2,
        4
      ]
    ]
  },
  "mrb_record_exec_reg": {
    "type": "register",
    "block": "mrb",
    "width": 1,
    "desc": "Recording Execute Register",
    "fields": [
      [
        "record_exec",
        0,
        1
      ]
    ]
  },
  "mrb_cont_rec_trig_addr_reg": {
    "type": "register",
    "block": "mrb",
    "width": 11,
    "desc": "Continuous Recording Triggering Address Status Reg",
    "fields": [
      [
        "con_rec_trig_addr",
        0,
        11
      ]
    ]
  },
  "mrb_mirror_record_mem": {
    "type": "memory",
    "block": "mrb",
    "width": 32,
    "desc": "Mirror Record Memory",
    "fields": [
      [
        "mirror_record",
        0,
        32
      ]
    ]
  },
  "pier_interrupt_register": {
    "type": "register",
    "block": "pier",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "pier_core_interrupt_reg_summary",
        1,
        1
      ]
    ]
  },
  "pier_mem_protect_interrupt": {
    "type": "register",
    "block": "pier",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pier_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pier",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pier_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pier",
    "width": 7,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "inbe_multi_fifo_mem_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "cscp_ext_cbr_mem_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "cscp_inj_cbr_mem_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "oobi_multi_fifo_mem_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "fabric_routing_table_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "oobi_cfg_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "oobe_capture_ecc_1b_err_interrupt_mask",
        6,
        1
      ]
    ]
  },
  "pier_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pier",
    "width": 7,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "inbe_multi_fifo_mem_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "cscp_ext_cbr_mem_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "cscp_inj_cbr_mem_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "oobi_multi_fifo_mem_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "fabric_routing_table_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "oobi_cfg_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "oobe_capture_ecc_2b_err_interrupt_mask",
        6,
        1
      ]
    ]
  },
  "pier_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pier",
    "width": 7,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "inbe_multi_fifo_mem_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "cscp_ext_cbr_mem_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "cscp_inj_cbr_mem_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "oobi_multi_fifo_mem_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "fabric_routing_table_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "oobi_cfg_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "oobe_capture_ecc_1b_err_initiate",
        6,
        1
      ]
    ]
  },
  "pier_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pier",
    "width": 7,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "inbe_multi_fifo_mem_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "cscp_ext_cbr_mem_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "cscp_inj_cbr_mem_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "oobi_multi_fifo_mem_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "fabric_routing_table_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "oobi_cfg_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "oobe_capture_ecc_2b_err_initiate",
        6,
        1
      ]
    ]
  },
  "pier_mem_protect_err_status": {
    "type": "register",
    "block": "pier",
    "width": 7,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "inbe_multi_fifo_mem_err_int",
        0,
        1
      ],
      [
        "cscp_ext_cbr_mem_err_int",
        1,
        1
      ],
      [
        "cscp_inj_cbr_mem_err_int",
        2,
        1
      ],
      [
        "oobi_multi_fifo_mem_err_int",
        3,
        1
      ],
      [
        "fabric_routing_table_err_int",
        4,
        1
      ],
      [
        "oobi_cfg_err_int",
        5,
        1
      ],
      [
        "oobe_capture_err_int",
        6,
        1
      ]
    ]
  },
  "pier_selected_ser_error_info": {
    "type": "register",
    "block": "pier",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "pier_ser_error_debug_configuration": {
    "type": "register",
    "block": "pier",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "pier_ecc_1b_err_debug": {
    "type": "register",
    "block": "pier",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pier_ecc_2b_err_debug": {
    "type": "register",
    "block": "pier",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pier_counter_timer": {
    "type": "register",
    "block": "pier",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pier_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pier",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pier_memory_access_timeout": {
    "type": "register",
    "block": "pier",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "pier_broadcast_config_reg": {
    "type": "register",
    "block": "pier",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pier_memory_prot_bypass": {
    "type": "register",
    "block": "pier",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pier_soft_reset_configuration": {
    "type": "register",
    "block": "pier",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pier_mbist_configuration": {
    "type": "register",
    "block": "pier",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pier_power_down_configuration": {
    "type": "register",
    "block": "pier",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pier_spare_reg": {
    "type": "register",
    "block": "pier",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pier_pmro_ctrl": {
    "type": "register",
    "block": "pier",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pier_pmro_status": {
    "type": "register",
    "block": "pier",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pier_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pier",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pier_mirror_bus_status": {
    "type": "register",
    "block": "pier",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pier_device_time_offset_cfg": {
    "type": "register",
    "block": "pier",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pier_fe_device_mode_reg": {
    "type": "register",
    "block": "pier",
    "width": 3,
    "desc": "Device mode register",
    "fields": [
      [
        "fe_device_mode",
        0,
        1
      ],
      [
        "fe13_device_mode",
        1,
        1
      ],
      [
        "fe13_lc_device_mode",
        2,
        1
      ]
    ]
  },
  "pier_fabric_links_facing_lc_reg": {
    "type": "register",
    "block": "pier",
    "width": 108,
    "desc": "Fabric links facing to LC register",
    "fields": [
      [
        "fabric_links_facing_lc",
        0,
        108
      ]
    ]
  },
  "pier_inb_ifg_extract_map_reg": {
    "type": "register",
    "block": "pier",
    "width": 24,
    "desc": "Inband IFG extract mapping to host register",
    "fields": [
      [
        "inb_ifg_extract_map",
        0,
        24
      ]
    ]
  },
  "pier_oob_inb_ratio_reg": {
    "type": "register",
    "block": "pier",
    "width": 4,
    "desc": "Inject/Extract ration between the OOB and IB on the ring register",
    "fields": [
      [
        "oob_inb_inj_ratio",
        0,
        2
      ],
      [
        "oob_inb_ext_ratio",
        2,
        2
      ]
    ]
  },
  "pier_packet_dma_burst_length_reg": {
    "type": "register",
    "block": "pier",
    "width": 4,
    "desc": "Burst length of INB extract towards the PDE register",
    "fields": [
      [
        "packet_dma_burst_length",
        0,
        4
      ]
    ]
  },
  "pier_pier_core_interrupt_reg": {
    "type": "register",
    "block": "pier",
    "width": 3,
    "desc": "PIER Core Interrupt Register",
    "fields": [
      [
        "cscp_unreach_device",
        0,
        1
      ],
      [
        "inbe_multi_fifo_ovf",
        1,
        1
      ],
      [
        "oobe_invalid_host_type",
        2,
        1
      ]
    ]
  },
  "pier_pier_core_interrupt_reg_mask": {
    "type": "register",
    "block": "pier",
    "width": 3,
    "desc": "This register masks PierCoreInterruptReg interrupt register",
    "fields": [
      [
        "cscp_unreach_device_mask",
        0,
        1
      ],
      [
        "inbe_multi_fifo_ovf_mask",
        1,
        1
      ],
      [
        "oobe_invalid_host_type_mask",
        2,
        1
      ]
    ]
  },
  "pier_pier_core_interrupt_reg_test": {
    "type": "register",
    "block": "pier",
    "width": 3,
    "desc": "This register tests PierCoreInterruptReg interrupt register",
    "fields": [
      [
        "cscp_unreach_device_test",
        0,
        1
      ],
      [
        "inbe_multi_fifo_ovf_test",
        1,
        1
      ],
      [
        "oobe_invalid_host_type_test",
        2,
        1
      ]
    ]
  },
  "pier_pier_interrup_ifgt_reg": {
    "type": "register",
    "block": "pier",
    "width": 3,
    "desc": "PIER OOBI Interrupt Register",
    "fields": [
      [
        "oobe_out_of_credit",
        0,
        1
      ],
      [
        "inbe_out_of_credit",
        1,
        1
      ],
      [
        "inbi_not_elig",
        2,
        1
      ]
    ]
  },
  "pier_pier_oobi_interrupt_reg": {
    "type": "register",
    "block": "pier",
    "width": 1,
    "desc": "PIER OOBI Interrupt Register",
    "fields": [
      [
        "oobi_out_of_credit",
        0,
        1
      ]
    ]
  },
  "pier_pier_inbe_npuh_cbt_nirdy_counter_reg": {
    "type": "register",
    "block": "pier",
    "width": 32,
    "desc": "PIER INBE CBT n_irdy Counter Register",
    "fields": [
      [
        "pier_inbe_npuh_cbt_nirdy_cnt",
        0,
        32
      ]
    ]
  },
  "pier_pier_oobe_drop_counter_reg": {
    "type": "register",
    "block": "pier",
    "width": 32,
    "desc": "PIER OOBE drop Counter Register",
    "fields": [
      [
        "oobe_drop_cnt",
        0,
        32
      ]
    ]
  },
  "pier_pier_inbi_rxm_reg": {
    "type": "register",
    "block": "pier",
    "width": 12,
    "desc": "PIER INBI Rx_meter CBR Register",
    "fields": [
      [
        "inbi_rxm_status",
        0,
        6
      ],
      [
        "inbi_rxm_max",
        6,
        6
      ]
    ]
  },
  "pier_pier_inbi_npuh_reg": {
    "type": "register",
    "block": "pier",
    "width": 8,
    "desc": "PIER INBI NpuH CBR Register",
    "fields": [
      [
        "inbi_npuh_status",
        0,
        4
      ],
      [
        "inbi_npuh_max",
        4,
        4
      ]
    ]
  },
  "pier_pier_oob_counter_reg": {
    "type": "register",
    "block": "pier",
    "width": 64,
    "desc": "PIER OOB Counter Register",
    "fields": [
      [
        "oobi_cnt",
        0,
        32
      ],
      [
        "oobe_cnt",
        32,
        32
      ]
    ]
  },
  "pier_pier_oobe_counter_reg": {
    "type": "register",
    "block": "pier",
    "width": 96,
    "desc": "PIER OOB Counter Register",
    "fields": [
      [
        "oobe_frm_cnt",
        0,
        32
      ],
      [
        "oobe_fte_cnt",
        32,
        32
      ],
      [
        "oobe_csms_cnt",
        64,
        32
      ]
    ]
  },
  "pier_pier_inb_inj_counter_reg": {
    "type": "register",
    "block": "pier",
    "width": 60,
    "desc": "PIER Inband Inject Counter Register",
    "fields": [
      [
        "pde_inj_cnt",
        0,
        20
      ],
      [
        "npuh_inj_cnt",
        20,
        20
      ],
      [
        "rxm_inj_cnt",
        40,
        20
      ]
    ]
  },
  "pier_pier_inb_ext_counter_reg": {
    "type": "register",
    "block": "pier",
    "width": 40,
    "desc": "PIER Inband Extract Counter Register",
    "fields": [
      [
        "pde_ext_cnt",
        0,
        20
      ],
      [
        "npuh_ext_cnt",
        20,
        20
      ]
    ]
  },
  "pier_oob_inj_credit_init_reg": {
    "type": "register",
    "block": "pier",
    "width": 12,
    "desc": "OOB Inject Credit Init Register",
    "fields": [
      [
        "oob_inj_credit_init_en",
        0,
        1
      ],
      [
        "oob_inj_credit_init_val",
        1,
        4
      ],
      [
        "oob_inj_credit_init_link",
        5,
        7
      ]
    ]
  },
  "pier_debug_fifo_thr_cfg_reg": {
    "type": "register",
    "block": "pier",
    "width": 30,
    "desc": "Debug register for setting FIFOs Thresholds",
    "fields": [
      [
        "debug_oobi_cscp_prefetch_thr",
        0,
        3
      ],
      [
        "debug_oobi_multi_fifo_thr",
        3,
        4
      ],
      [
        "debug_oobe_ring_sch_cscp_thr",
        7,
        9
      ],
      [
        "debug_inbe_npuh_cbt_thr",
        16,
        5
      ],
      [
        "debug_inbe_ring_init_cr",
        21,
        9
      ]
    ]
  },
  "pier_oobi_pkt_cfg_register": {
    "type": "register",
    "block": "pier",
    "width": 48,
    "desc": "OOB Inject Configuration register ",
    "fields": [
      [
        "oobi_pkt_cfg_enable",
        0,
        1
      ],
      [
        "oobi_pkt_cfg_num_of_gen_pkt",
        1,
        16
      ],
      [
        "oobi_pkt_cfg_rate_en",
        17,
        1
      ],
      [
        "oobi_pkt_cfg_rate_inc",
        18,
        10
      ],
      [
        "oobi_pkt_cfg_rate_dec",
        28,
        10
      ],
      [
        "oobi_pkt_cfg_rate_max",
        38,
        10
      ]
    ]
  },
  "pier_oobe_pkt_capture_register": {
    "type": "register",
    "block": "pier",
    "width": 29,
    "desc": "OOB Inject Configuration register ",
    "fields": [
      [
        "oobe_pkt_capture_enable",
        0,
        1
      ],
      [
        "oobe_drop_fte_pkt_cfg",
        1,
        1
      ],
      [
        "oobe_drop_frm_pkt_cfg",
        2,
        1
      ],
      [
        "oobe_drop_csms_pkt_cfg",
        3,
        1
      ],
      [
        "oobe_pkt_num_of_capture_pkt",
        4,
        16
      ],
      [
        "oobe_pkt_capture_host_type",
        20,
        2
      ],
      [
        "oobe_pkt_capture_link_idx",
        22,
        7
      ]
    ]
  },
  "pier_oobi_pkt_go_reg": {
    "type": "register",
    "block": "pier",
    "width": 1,
    "desc": "OOB Inject go register ",
    "fields": [
      [
        "oobi_pkt_go",
        0,
        1
      ]
    ]
  },
  "pier_oobe_pkt_go_reg": {
    "type": "register",
    "block": "pier",
    "width": 1,
    "desc": "OOB extract go register ",
    "fields": [
      [
        "oobe_pkt_go",
        0,
        1
      ]
    ]
  },
  "pier_oobe_wr_ptr_capture": {
    "type": "register",
    "block": "pier",
    "width": 6,
    "desc": "OOB extract write pointer capture ",
    "fields": [
      [
        "oobe_wr_ptr_capture_field",
        0,
        6
      ]
    ]
  },
  "pier_oobe_capture_counter": {
    "type": "register",
    "block": "pier",
    "width": 48,
    "desc": "OOB extract capture  counter ",
    "fields": [
      [
        "oobe_capture_counter_field",
        0,
        48
      ]
    ]
  },
  "pier_inbe_multi_fifo_mem": {
    "type": "memory",
    "block": "pier",
    "width": 141,
    "desc": "Inband Extract Multi Fifo Memory",
    "fields": [
      [
        "inbe_multi_fifo_mem_data",
        0,
        141
      ]
    ]
  },
  "pier_cscp_ext_cbr_mem": {
    "type": "memory",
    "block": "pier",
    "width": 473,
    "desc": "CSCP Extract Buffer CBR Memory",
    "fields": [
      [
        "cscp_ext_cbr_mem_data",
        0,
        472
      ],
      [
        "cscp_ext_cbr_mem_data_facing_lc",
        472,
        1
      ]
    ]
  },
  "pier_cscp_inj_cbr_mem": {
    "type": "memory",
    "block": "pier",
    "width": 472,
    "desc": "CSCP Inject Buffer CBR Memory",
    "fields": [
      [
        "cscp_inj_cbr_mem_data",
        0,
        472
      ]
    ]
  },
  "pier_oobi_multi_fifo_mem": {
    "type": "memory",
    "block": "pier",
    "width": 472,
    "desc": "OOB Inject Multi Fifo Memory",
    "fields": [
      [
        "oobi_multi_fifo_mem_data",
        0,
        472
      ]
    ]
  },
  "pier_fabric_routing_table": {
    "type": "memory",
    "block": "pier",
    "width": 108,
    "desc": "Fabric Routing Table",
    "fields": [
      [
        "fabric_routing_table_data",
        0,
        108
      ]
    ]
  },
  "pier_oob_fabric_link_map_table": {
    "type": "memory",
    "block": "pier",
    "width": 8,
    "desc": "OOB Fabric Link Mapping Table ",
    "fields": [
      [
        "oob_fabric_link_map_data",
        0,
        8
      ]
    ]
  },
  "pier_oob_fabric_link_credit_cfg_table": {
    "type": "memory",
    "block": "pier",
    "width": 5,
    "desc": "OOB Fabric Link Credit configuration Table ",
    "fields": [
      [
        "oob_fabric_link_credit_cfg_data",
        0,
        5
      ]
    ]
  },
  "pier_oob_fabric_link_to_src_link_map_table": {
    "type": "memory",
    "block": "pier",
    "width": 7,
    "desc": "OOB Fabric Link to Source Link Mapping Table ",
    "fields": [
      [
        "oob_fabric_link_to_src_link_map_data",
        0,
        7
      ]
    ]
  },
  "pier_oobi_cfg": {
    "type": "memory",
    "block": "pier",
    "width": 479,
    "desc": "OOB Inject Configuration memory ",
    "fields": [
      [
        "oobi_cfg_data_field",
        0,
        479
      ]
    ]
  },
  "pier_oobe_capture": {
    "type": "memory",
    "block": "pier",
    "width": 479,
    "desc": "OOB Inject capture memory ",
    "fields": [
      [
        "oobe_capture_date_field",
        0,
        479
      ]
    ]
  },
  "sbif_reset_reg": {
    "type": "register",
    "block": "sbif",
    "width": 26,
    "desc": "Main Reset Register",
    "fields": [
      [
        "core_hard_rstn",
        0,
        1
      ],
      [
        "arc_rstn",
        1,
        4
      ],
      [
        "packet_dma_rstn",
        5,
        1
      ],
      [
        "packet_dma_inj_ctxt_rstn",
        6,
        12
      ],
      [
        "acc_eng_reset",
        18,
        8
      ]
    ]
  },
  "sbif_acc_eng_global_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 25,
    "desc": "Access Engines Global Configuration Register",
    "fields": [
      [
        "burst_write_mode",
        0,
        1
      ],
      [
        "cif_chain_resp_timeout",
        1,
        16
      ],
      [
        "cif_trans_gap_counter",
        17,
        8
      ]
    ]
  },
  "sbif_acc_eng_priority_reg": {
    "type": "register",
    "block": "sbif",
    "width": 16,
    "desc": "Configure the Access Engines Priority",
    "fields": [
      [
        "acc_eng0_priority",
        0,
        2
      ],
      [
        "acc_eng1_priority",
        2,
        2
      ],
      [
        "acc_eng2_priority",
        4,
        2
      ],
      [
        "acc_eng3_priority",
        6,
        2
      ],
      [
        "acc_eng4_priority",
        8,
        2
      ],
      [
        "acc_eng5_priority",
        10,
        2
      ],
      [
        "acc_eng6_priority",
        12,
        2
      ],
      [
        "acc_eng7_priority",
        14,
        2
      ]
    ]
  },
  "sbif_acc_eng_command_mem_fifo_override_reg": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "Access Engine Command Memory FIFO Override Configuration Register",
    "fields": [
      [
        "command_mem0_fifo_override",
        0,
        1
      ],
      [
        "command_mem1_fifo_override",
        1,
        1
      ],
      [
        "command_mem2_fifo_override",
        2,
        1
      ],
      [
        "command_mem3_fifo_override",
        3,
        1
      ],
      [
        "command_mem4_fifo_override",
        4,
        1
      ],
      [
        "command_mem5_fifo_override",
        5,
        1
      ],
      [
        "command_mem6_fifo_override",
        6,
        1
      ],
      [
        "command_mem7_fifo_override",
        7,
        1
      ]
    ]
  },
  "sbif_acc_eng_go_reg": {
    "type": "register",
    "block": "sbif",
    "width": 2,
    "desc": "Access Engine Go Register",
    "fields": [
      [
        "acc_eng_go",
        0,
        2
      ]
    ]
  },
  "sbif_acc_eng_cmd_ptr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 20,
    "desc": "Access Engine [n] Command FIFO Pointers",
    "fields": [
      [
        "acc_eng_cmd_wr_ptr",
        0,
        10
      ],
      [
        "acc_eng_cmd_rd_ptr",
        10,
        10
      ]
    ]
  },
  "sbif_acc_eng_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "Access Engine Status",
    "fields": [
      [
        "acc_eng_active",
        0,
        1
      ],
      [
        "acc_eng_state",
        1,
        6
      ],
      [
        "acc_eng_curr_count",
        7,
        10
      ],
      [
        "acc_eng_error",
        17,
        1
      ],
      [
        "acc_eng_error_blk_id",
        18,
        12
      ],
      [
        "acc_eng_error_inv_cmd",
        30,
        1
      ],
      [
        "acc_eng_error_axi_rsp",
        31,
        1
      ]
    ]
  },
  "sbif_acc_eng_address_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "Access Engine [n] Error Address Register",
    "fields": [
      [
        "acc_eng_error_addr",
        0,
        32
      ]
    ]
  },
  "sbif_acc_eng_semaphore_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "Access Engine [n] Semaphore Register",
    "fields": [
      [
        "acc_eng_semaphore",
        0,
        32
      ]
    ]
  },
  "sbif_arc_run_halt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 2,
    "desc": "ARC Run and Halt Register",
    "fields": [
      [
        "arc_run",
        0,
        1
      ],
      [
        "arc_halt",
        1,
        1
      ]
    ]
  },
  "sbif_arc_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 5,
    "desc": "ARC Status Register",
    "fields": [
      [
        "arc_halt_status",
        0,
        1
      ],
      [
        "arc_sleep_status",
        1,
        1
      ],
      [
        "arc_sleep_mode_status",
        2,
        3
      ]
    ]
  },
  "sbif_device_time_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "Device Time Register",
    "fields": [
      [
        "device_time_status",
        0,
        32
      ]
    ]
  },
  "sbif_device_time_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 12,
    "desc": "Device Time Configuration Register",
    "fields": [
      [
        "device_time_sample_offset",
        0,
        8
      ],
      [
        "device_time_increment",
        8,
        4
      ]
    ]
  },
  "sbif_i2c_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 16,
    "desc": "I2C Configuration Register",
    "fields": [
      [
        "i2c_sample_data_ph_thr",
        0,
        10
      ],
      [
        "i2c_lpf_cnt_th_cfg",
        10,
        6
      ]
    ]
  },
  "sbif_cpu_jtag_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 23,
    "desc": "CPU 2 JTAG Config Register",
    "fields": [
      [
        "cpu_jtag_reset",
        0,
        1
      ],
      [
        "cpu_jtag_tck_clock_divider",
        1,
        16
      ],
      [
        "cpu_jtag_disable_tdo_enable_type",
        17,
        1
      ],
      [
        "cpu_jtag_tdo_enable_type",
        18,
        1
      ],
      [
        "cpu_jtag_debug_enable",
        19,
        1
      ],
      [
        "cpu_jtag_config_done",
        20,
        1
      ],
      [
        "cpu_jtag_free_run_tck_mode",
        21,
        1
      ],
      [
        "cpu_jtag_switch_mode",
        22,
        1
      ]
    ]
  },
  "sbif_cpu_jtag_ir_dr_length_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "CPU 2 JTAG IR DR Length Register",
    "fields": [
      [
        "cpu_jtag_ir_dr_length",
        0,
        32
      ]
    ]
  },
  "sbif_cpu_jtag_ir_dr_value_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "CPU 2 JTAG IR DR Value Register",
    "fields": [
      [
        "cpu_jtag_ir_dr_value",
        0,
        32
      ]
    ]
  },
  "sbif_cpu_jtag_control_reg": {
    "type": "register",
    "block": "sbif",
    "width": 12,
    "desc": "CPU 2 JTAG Control Register",
    "fields": [
      [
        "cpu_jtag_execute",
        0,
        1
      ],
      [
        "cpu_jtag_go_to_tap_state",
        1,
        4
      ],
      [
        "cpu_jtag_serial_valid_bits",
        5,
        5
      ],
      [
        "cpu_jtag_serial_prog",
        10,
        1
      ],
      [
        "cpu_jtag_abort",
        11,
        1
      ]
    ]
  },
  "sbif_cpu_jtag_tap_reset_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "CPU 2 JTAG TAP Reset Register",
    "fields": [
      [
        "cpu_jtag_tap_reset_from_reg",
        0,
        32
      ]
    ]
  },
  "sbif_cpu_jtag_tap_mode_select_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "CPU 2 JTAG TAP Mode Select Register",
    "fields": [
      [
        "cpu_jtag_tap_mode_select_from_reg",
        0,
        32
      ]
    ]
  },
  "sbif_cpu_jtag_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "CPU 2 JTAG Status Register",
    "fields": [
      [
        "cpu_jtag_busy",
        0,
        1
      ],
      [
        "cpu_jtag_done_normal",
        1,
        1
      ],
      [
        "cpu_jtag_done_abort",
        2,
        1
      ],
      [
        "cpu_jtag_debug_data_valid",
        3,
        1
      ],
      [
        "cpu_jtag_debug_others",
        4,
        4
      ]
    ]
  },
  "sbif_cpu_jtag_test_data_out_reg0": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "CPU 2 JTAG Test Data Out Register 0",
    "fields": [
      [
        "cpu_jtag_tdo_data_value_low",
        0,
        32
      ]
    ]
  },
  "sbif_cpu_jtag_test_data_out_reg1": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "CPU 2 JTAG Test Data Out Register 1",
    "fields": [
      [
        "cpu_jtag_tdo_data_value_high",
        0,
        26
      ],
      [
        "cpu_jtag_tdo_data_bit_valid",
        26,
        6
      ]
    ]
  },
  "sbif_ext_dma_pd_base_lsb_reg": {
    "type": "register",
    "block": "sbif",
    "width": 20,
    "desc": "Ext DMA engine packet descriptor base pointer[n]. The base address is at 4KB boundaries: {msb, lsb, 12'b0}",
    "fields": [
      [
        "ext_dma_pd_base_lsb",
        0,
        20
      ]
    ]
  },
  "sbif_ext_dma_pd_base_msb_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "Ext DMA engine packet descriptor base pointer[n]. The base address is at 4KB boundaries: {msb, lsb, 12'b0}",
    "fields": [
      [
        "ext_dma_pd_base_msb",
        0,
        32
      ]
    ]
  },
  "sbif_ext_dma_wr_pd_ptr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 17,
    "desc": "Ext DMA engine Wr packet descriptor pointer [n]",
    "fields": [
      [
        "ext_dma_wr_pd_ptr",
        0,
        17
      ]
    ]
  },
  "sbif_ext_dma_allocated_pd_ptr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 17,
    "desc": "Ext DMA engine Allocated packet descriptor pointer [n]",
    "fields": [
      [
        "ext_dma_allocated_pd_ptr",
        0,
        17
      ]
    ]
  },
  "sbif_ext_dma_pd_length_reg": {
    "type": "register",
    "block": "sbif",
    "width": 16,
    "desc": "Ext DMA engine packet descriptor length [n]",
    "fields": [
      [
        "ext_dma_pd_length",
        0,
        16
      ]
    ]
  },
  "sbif_ext_dma_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 10,
    "desc": "Ext DMA Engine Configuration Register",
    "fields": [
      [
        "ext_dma_go",
        0,
        1
      ],
      [
        "ext_dma_flow_ctrl",
        1,
        1
      ],
      [
        "ext_dma_flow_ctrl_pd_thr",
        2,
        6
      ],
      [
        "ext_dma_remote",
        8,
        1
      ],
      [
        "ext_dma_wb",
        9,
        1
      ]
    ]
  },
  "sbif_ext_dma_state_reg": {
    "type": "register",
    "block": "sbif",
    "width": 4,
    "desc": "Ext DMA engine FSM status",
    "fields": [
      [
        "ext_dma_state",
        0,
        4
      ]
    ]
  },
  "sbif_ext_dma_drop_cnt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 16,
    "desc": "Ext DMA engine drop counter register [n]",
    "fields": [
      [
        "ext_dma_drop_cnt",
        0,
        16
      ]
    ]
  },
  "sbif_ext_dma_drop_fc_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "Ext DMA engine drop and flow control enabled interrupt register",
    "fields": [
      [
        "ext_dma_drop_interrupt",
        0,
        12
      ],
      [
        "ext_dma_fc_interrupt",
        12,
        12
      ]
    ]
  },
  "sbif_ext_dma_drop_fc_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "This register masks ExtDmaDropFcInterruptReg interrupt register",
    "fields": [
      [
        "ext_dma_drop_interrupt_mask",
        0,
        12
      ],
      [
        "ext_dma_fc_interrupt_mask",
        12,
        12
      ]
    ]
  },
  "sbif_ext_dma_drop_fc_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "This register tests ExtDmaDropFcInterruptReg interrupt register",
    "fields": [
      [
        "ext_dma_drop_interrupt_test",
        0,
        12
      ],
      [
        "ext_dma_fc_interrupt_test",
        12,
        12
      ]
    ]
  },
  "sbif_inj_dma_pd_base_lsb_reg": {
    "type": "register",
    "block": "sbif",
    "width": 20,
    "desc": "Inj DMA engine packet descriptor base pointer[n]. The base address is at 4KB boundaries: {msb, lsb, 12'b0}",
    "fields": [
      [
        "inj_dma_pd_base_lsb",
        0,
        20
      ]
    ]
  },
  "sbif_inj_dma_pd_base_msb_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "Inj DMA engine packet descriptor base pointer[n]. The base address is at 4KB boundaries: {msb, lsb, 12'b0}",
    "fields": [
      [
        "inj_dma_pd_base_msb",
        0,
        32
      ]
    ]
  },
  "sbif_inj_dma_rd_pd_ptr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 17,
    "desc": "Inj DMA engine Rd packet descriptor pointer [n]",
    "fields": [
      [
        "inj_dma_rd_pd_ptr",
        0,
        17
      ]
    ]
  },
  "sbif_inj_dma_wr_pd_ptr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 17,
    "desc": "Inj DMA engine Wr packet descriptor pointer [n]",
    "fields": [
      [
        "inj_dma_wr_pd_ptr",
        0,
        17
      ]
    ]
  },
  "sbif_inj_dma_pd_length_reg": {
    "type": "register",
    "block": "sbif",
    "width": 16,
    "desc": "Inj DMA engine packet descriptor length [n]",
    "fields": [
      [
        "inj_dma_pd_length",
        0,
        16
      ]
    ]
  },
  "sbif_inj_dma_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 3,
    "desc": "Inj DMA Engine Configuration Register",
    "fields": [
      [
        "inj_dma_go",
        0,
        1
      ],
      [
        "inj_dma_remote",
        1,
        1
      ],
      [
        "inj_dma_wb",
        2,
        1
      ]
    ]
  },
  "sbif_inj_dma_state_reg0": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "Inj DMA engine FSM status",
    "fields": [
      [
        "inj_dma_state0",
        0,
        4
      ],
      [
        "inj_dma_state1",
        4,
        4
      ],
      [
        "inj_dma_state2",
        8,
        4
      ],
      [
        "inj_dma_state3",
        12,
        4
      ],
      [
        "inj_dma_state4",
        16,
        4
      ],
      [
        "inj_dma_state5",
        20,
        4
      ]
    ]
  },
  "sbif_inj_dma_state_reg1": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "Inj DMA engine FSM status",
    "fields": [
      [
        "inj_dma_state6",
        0,
        4
      ],
      [
        "inj_dma_state7",
        4,
        4
      ],
      [
        "inj_dma_state8",
        8,
        4
      ],
      [
        "inj_dma_state9",
        12,
        4
      ],
      [
        "inj_dma_state10",
        16,
        4
      ],
      [
        "inj_dma_state11",
        20,
        4
      ]
    ]
  },
  "sbif_packet_dma_async_fifo_thr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 12,
    "desc": "Packet DMA Async FIFO Threshold Register",
    "fields": [
      [
        "ext_dma_async_fifo_thr",
        0,
        4
      ],
      [
        "inj_dma_async_fifo_thr",
        4,
        4
      ],
      [
        "ext_dma_pier_burst_cfg",
        8,
        4
      ]
    ]
  },
  "sbif_packet_dma_err_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 25,
    "desc": "Packet DMA engine error interrupt register",
    "fields": [
      [
        "ext_dma_rd_err_interrupt",
        0,
        12
      ],
      [
        "ext_dma_wr_err_interrupt",
        12,
        1
      ],
      [
        "inj_dma_err_interrupt",
        13,
        12
      ]
    ]
  },
  "sbif_packet_dma_err_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 25,
    "desc": "This register masks PacketDmaErrInterruptReg interrupt register",
    "fields": [
      [
        "ext_dma_rd_err_interrupt_mask",
        0,
        12
      ],
      [
        "ext_dma_wr_err_interrupt_mask",
        12,
        1
      ],
      [
        "inj_dma_err_interrupt_mask",
        13,
        12
      ]
    ]
  },
  "sbif_packet_dma_err_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 25,
    "desc": "This register tests PacketDmaErrInterruptReg interrupt register",
    "fields": [
      [
        "ext_dma_rd_err_interrupt_test",
        0,
        12
      ],
      [
        "ext_dma_wr_err_interrupt_test",
        12,
        1
      ],
      [
        "inj_dma_err_interrupt_test",
        13,
        12
      ]
    ]
  },
  "sbif_packet_dma_done_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "Packet DMA engine done interrupt register",
    "fields": [
      [
        "ext_dma_done_interrupt",
        0,
        12
      ],
      [
        "inj_dma_done_interrupt",
        12,
        12
      ]
    ]
  },
  "sbif_packet_dma_done_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "This register masks PacketDmaDoneInterruptReg interrupt register",
    "fields": [
      [
        "ext_dma_done_interrupt_mask",
        0,
        12
      ],
      [
        "inj_dma_done_interrupt_mask",
        12,
        12
      ]
    ]
  },
  "sbif_packet_dma_done_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "This register tests PacketDmaDoneInterruptReg interrupt register",
    "fields": [
      [
        "ext_dma_done_interrupt_test",
        0,
        12
      ],
      [
        "inj_dma_done_interrupt_test",
        12,
        12
      ]
    ]
  },
  "sbif_spi_ctrl_reg": {
    "type": "register",
    "block": "sbif",
    "width": 28,
    "desc": "SPI Controller Configuration Register",
    "fields": [
      [
        "spi_instruction",
        0,
        8
      ],
      [
        "spi_addr_len",
        8,
        2
      ],
      [
        "spi_data_len",
        10,
        7
      ],
      [
        "spi_data_dir",
        17,
        1
      ],
      [
        "spi_dummy_cnt",
        18,
        4
      ],
      [
        "spi_sck_half_period",
        22,
        6
      ]
    ]
  },
  "sbif_spi_ctrl_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "SPI Controller Address Register",
    "fields": [
      [
        "spi_addr",
        0,
        32
      ]
    ]
  },
  "sbif_spi_ctrl_data_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "SPI Controller Data Register [n]",
    "fields": [
      [
        "spi_data",
        0,
        32
      ]
    ]
  },
  "sbif_spi_ctrl_exec_reg": {
    "type": "register",
    "block": "sbif",
    "width": 1,
    "desc": "SPI Controller Execute Register",
    "fields": [
      [
        "spi_execute",
        0,
        1
      ]
    ]
  },
  "sbif_led_interface_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "LED Interface Configuration Register",
    "fields": [
      [
        "led_interface_en",
        0,
        1
      ],
      [
        "led_interface_frame_width",
        1,
        10
      ],
      [
        "led_interface_sck_period",
        11,
        7
      ]
    ]
  },
  "sbif_led_interface_data_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "LED interface data register",
    "fields": [
      [
        "led_interface_data",
        0,
        32
      ]
    ]
  },
  "sbif_top_regfile_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 11,
    "desc": "Top Regfile configuration indirect register",
    "fields": [
      [
        "top_regfile_cfg_valid",
        0,
        1
      ],
      [
        "top_regfile_cfg_addr",
        1,
        10
      ]
    ]
  },
  "sbif_top_regfile_cfg_wdata_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "Top Regfile configuration indirect register",
    "fields": [
      [
        "top_regfile_cfg_wdata",
        0,
        32
      ]
    ]
  },
  "sbif_top_regfile_cfg_read_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "Top Regfile configuration indirect register",
    "fields": [
      [
        "top_regfile_cfg_rdata",
        0,
        32
      ]
    ]
  },
  "sbif_pcie_ctrl_reset_override_reg": {
    "type": "register",
    "block": "sbif",
    "width": 14,
    "desc": "PCIe Controller reset override register - allows overriding the reset values to the PHY and Controller (usually driven by the reset manager of the device)",
    "fields": [
      [
        "phy_pipe_rstn_override_en",
        0,
        1
      ],
      [
        "phy_pipe_rstn_override_value",
        1,
        1
      ],
      [
        "ctrl_rstn_override_en",
        2,
        1
      ],
      [
        "ctrl_rstn_override_value",
        3,
        1
      ],
      [
        "ctrl_pipe_rstn_override_en",
        4,
        1
      ],
      [
        "ctrl_pipe_rstn_override_value",
        5,
        1
      ],
      [
        "mgmt_rstn_override_en",
        6,
        1
      ],
      [
        "mgmt_rstn_override_value",
        7,
        1
      ],
      [
        "mgmt_sticky_rstn_override_en",
        8,
        1
      ],
      [
        "mgmt_sticky_rstn_override_value",
        9,
        1
      ],
      [
        "axi_rstn_override_en",
        10,
        1
      ],
      [
        "axi_rstn_override_value",
        11,
        1
      ],
      [
        "link_training_override_en",
        12,
        1
      ],
      [
        "link_training_override_value",
        13,
        1
      ]
    ]
  },
  "sbif_pcie_ctrl_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 21,
    "desc": "PCIe Controller configuration register - various ports of the controller that are suggested to be strapped to a register",
    "fields": [
      [
        "pcie_bypass_remote_tx_equalization",
        0,
        1
      ],
      [
        "pcie_client_req_exit_l1",
        1,
        1
      ],
      [
        "pcie_supported_preset",
        2,
        11
      ],
      [
        "pcie_max_eval_iteration",
        13,
        7
      ],
      [
        "pcie_disable_gen3_dc_balance",
        20,
        1
      ]
    ]
  },
  "sbif_pcie_ctrl_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 23,
    "desc": "PCIe Controller status register - various outputs of the controller",
    "fields": [
      [
        "pcie_hot_reset_out",
        0,
        1
      ],
      [
        "pcie_link_down_reset_out",
        1,
        1
      ],
      [
        "pcie_link0_clock_stable",
        2,
        1
      ],
      [
        "pcie_link_status",
        3,
        2
      ],
      [
        "pcie_negotiated_link_width",
        5,
        1
      ],
      [
        "pcie_negotiated_speed",
        6,
        2
      ],
      [
        "pcie_function_power_state",
        8,
        6
      ],
      [
        "pcie_link_power_state",
        14,
        4
      ],
      [
        "pcie_fatal_error_out",
        18,
        1
      ],
      [
        "pcie_non_fatal_error_out",
        19,
        1
      ],
      [
        "pcie_correctable_error_out",
        20,
        1
      ],
      [
        "pcie_pipe_rate",
        21,
        2
      ]
    ]
  },
  "sbif_pcie_ctrl_debug_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 22,
    "desc": "PCIe Controller debug status register - debug outputs of the controller",
    "fields": [
      [
        "pcie_debug_data_out",
        0,
        16
      ],
      [
        "pcie_ltssm_state",
        16,
        6
      ]
    ]
  },
  "sbif_pcie_ctrl_debug_status_reg2": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "PCIe Controller debug status register 2 - debug outputs of the controller",
    "fields": [
      [
        "pcie_performance_data_out",
        0,
        18
      ]
    ]
  },
  "sbif_pcie_apb_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 3,
    "desc": "PCIe APB Interface indirect configuration register",
    "fields": [
      [
        "pcie_apb_core_valid",
        0,
        1
      ],
      [
        "pcie_apb_phy_valid",
        1,
        1
      ],
      [
        "pcie_apb_write",
        2,
        1
      ]
    ]
  },
  "sbif_pcie_apb_wdata_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "PCIe APB Interface indirect write data configuration register",
    "fields": [
      [
        "pcie_apb_wdata",
        0,
        32
      ]
    ]
  },
  "sbif_pcie_apb_addr_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "PCIe APB Interface indirect address configuration register",
    "fields": [
      [
        "pcie_apb_addr",
        0,
        32
      ]
    ]
  },
  "sbif_pcie_apb_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 2,
    "desc": "PCIe APB Interface indirect status register",
    "fields": [
      [
        "pcie_apb_core_error",
        0,
        1
      ],
      [
        "pcie_apb_phy_error",
        1,
        1
      ]
    ]
  },
  "sbif_pcie_apb_core_rdata_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "PCIe APB Core Interface indirect read data status register",
    "fields": [
      [
        "pcie_apb_core_rdata",
        0,
        32
      ]
    ]
  },
  "sbif_pcie_apb_phy_rdata_status_reg": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "PCIe APB Phy Interface indirect read data status register",
    "fields": [
      [
        "pcie_apb_phy_rdata",
        0,
        32
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg0": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Msi Master Interrupt",
    "fields": [
      [
        "msi_cdb_top_interrupt_summary",
        0,
        1
      ],
      [
        "msi_counters_interrupt_summary",
        1,
        1
      ],
      [
        "msi_dram_control_interrupt_summary",
        2,
        1
      ],
      [
        "msi_egr_interrupt_summary",
        3,
        1
      ],
      [
        "msi_fdll_interrupt_summary",
        4,
        1
      ],
      [
        "msi_fllb_interrupt_summary",
        5,
        1
      ],
      [
        "msi_ics_interrupt_summary",
        6,
        1
      ],
      [
        "msi_nw_reorder_interrupt_summary",
        7,
        1
      ],
      [
        "msi_pp_reorder_interrupt_summary",
        8,
        1
      ],
      [
        "msi_pdoq_interrupt_summary",
        9,
        1
      ],
      [
        "msi_pdvoq_interrupt_summary",
        10,
        1
      ],
      [
        "msi_reassembly_interrupt_summary",
        11,
        1
      ],
      [
        "msi_rx_cgm_interrupt_summary",
        12,
        1
      ],
      [
        "msi_rx_meter_interrupt_summary",
        13,
        1
      ],
      [
        "msi_rx_pdr_interrupt_summary",
        14,
        1
      ],
      [
        "msi_sch_interrupt_summary",
        15,
        1
      ],
      [
        "msi_sms_interrupt_summary",
        16,
        1
      ],
      [
        "msi_ts_mon_interrupt_summary",
        17,
        1
      ],
      [
        "msi_hbmhi_interrupt_summary",
        18,
        1
      ],
      [
        "msi_hbmlo_interrupt_summary",
        19,
        1
      ],
      [
        "msi_mmu_interrupt_summary",
        20,
        1
      ],
      [
        "msi_csms_interrupt_summary",
        21,
        1
      ],
      [
        "msi_pier_interrupt_summary",
        22,
        1
      ],
      [
        "msi_frm_interrupt_summary",
        23,
        1
      ],
      [
        "msi_fte_interrupt_summary",
        24,
        1
      ],
      [
        "msi_npu_host_interrupt_summary",
        25,
        1
      ],
      [
        "msi_mrb_interrupt_summary",
        26,
        1
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg0_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks MsiBlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "msi_cdb_top_interrupt_summary_mask",
        0,
        1
      ],
      [
        "msi_counters_interrupt_summary_mask",
        1,
        1
      ],
      [
        "msi_dram_control_interrupt_summary_mask",
        2,
        1
      ],
      [
        "msi_egr_interrupt_summary_mask",
        3,
        1
      ],
      [
        "msi_fdll_interrupt_summary_mask",
        4,
        1
      ],
      [
        "msi_fllb_interrupt_summary_mask",
        5,
        1
      ],
      [
        "msi_ics_interrupt_summary_mask",
        6,
        1
      ],
      [
        "msi_nw_reorder_interrupt_summary_mask",
        7,
        1
      ],
      [
        "msi_pp_reorder_interrupt_summary_mask",
        8,
        1
      ],
      [
        "msi_pdoq_interrupt_summary_mask",
        9,
        1
      ],
      [
        "msi_pdvoq_interrupt_summary_mask",
        10,
        1
      ],
      [
        "msi_reassembly_interrupt_summary_mask",
        11,
        1
      ],
      [
        "msi_rx_cgm_interrupt_summary_mask",
        12,
        1
      ],
      [
        "msi_rx_meter_interrupt_summary_mask",
        13,
        1
      ],
      [
        "msi_rx_pdr_interrupt_summary_mask",
        14,
        1
      ],
      [
        "msi_sch_interrupt_summary_mask",
        15,
        1
      ],
      [
        "msi_sms_interrupt_summary_mask",
        16,
        1
      ],
      [
        "msi_ts_mon_interrupt_summary_mask",
        17,
        1
      ],
      [
        "msi_hbmhi_interrupt_summary_mask",
        18,
        1
      ],
      [
        "msi_hbmlo_interrupt_summary_mask",
        19,
        1
      ],
      [
        "msi_mmu_interrupt_summary_mask",
        20,
        1
      ],
      [
        "msi_csms_interrupt_summary_mask",
        21,
        1
      ],
      [
        "msi_pier_interrupt_summary_mask",
        22,
        1
      ],
      [
        "msi_frm_interrupt_summary_mask",
        23,
        1
      ],
      [
        "msi_fte_interrupt_summary_mask",
        24,
        1
      ],
      [
        "msi_npu_host_interrupt_summary_mask",
        25,
        1
      ],
      [
        "msi_mrb_interrupt_summary_mask",
        26,
        1
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg0_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests MsiBlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "msi_cdb_top_interrupt_summary_test",
        0,
        1
      ],
      [
        "msi_counters_interrupt_summary_test",
        1,
        1
      ],
      [
        "msi_dram_control_interrupt_summary_test",
        2,
        1
      ],
      [
        "msi_egr_interrupt_summary_test",
        3,
        1
      ],
      [
        "msi_fdll_interrupt_summary_test",
        4,
        1
      ],
      [
        "msi_fllb_interrupt_summary_test",
        5,
        1
      ],
      [
        "msi_ics_interrupt_summary_test",
        6,
        1
      ],
      [
        "msi_nw_reorder_interrupt_summary_test",
        7,
        1
      ],
      [
        "msi_pp_reorder_interrupt_summary_test",
        8,
        1
      ],
      [
        "msi_pdoq_interrupt_summary_test",
        9,
        1
      ],
      [
        "msi_pdvoq_interrupt_summary_test",
        10,
        1
      ],
      [
        "msi_reassembly_interrupt_summary_test",
        11,
        1
      ],
      [
        "msi_rx_cgm_interrupt_summary_test",
        12,
        1
      ],
      [
        "msi_rx_meter_interrupt_summary_test",
        13,
        1
      ],
      [
        "msi_rx_pdr_interrupt_summary_test",
        14,
        1
      ],
      [
        "msi_sch_interrupt_summary_test",
        15,
        1
      ],
      [
        "msi_sms_interrupt_summary_test",
        16,
        1
      ],
      [
        "msi_ts_mon_interrupt_summary_test",
        17,
        1
      ],
      [
        "msi_hbmhi_interrupt_summary_test",
        18,
        1
      ],
      [
        "msi_hbmlo_interrupt_summary_test",
        19,
        1
      ],
      [
        "msi_mmu_interrupt_summary_test",
        20,
        1
      ],
      [
        "msi_csms_interrupt_summary_test",
        21,
        1
      ],
      [
        "msi_pier_interrupt_summary_test",
        22,
        1
      ],
      [
        "msi_frm_interrupt_summary_test",
        23,
        1
      ],
      [
        "msi_fte_interrupt_summary_test",
        24,
        1
      ],
      [
        "msi_npu_host_interrupt_summary_test",
        25,
        1
      ],
      [
        "msi_mrb_interrupt_summary_test",
        26,
        1
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg1": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Msi Master Interrupt",
    "fields": [
      [
        "msi_idb_interrupt_summary",
        0,
        3
      ],
      [
        "msi_ifg_core_interrupt_summary",
        3,
        12
      ],
      [
        "msi_ifg_serdes_interrupt_summary",
        15,
        12
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg1_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks MsiBlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "msi_idb_interrupt_summary_mask",
        0,
        3
      ],
      [
        "msi_ifg_core_interrupt_summary_mask",
        3,
        12
      ],
      [
        "msi_ifg_serdes_interrupt_summary_mask",
        15,
        12
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg1_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests MsiBlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "msi_idb_interrupt_summary_test",
        0,
        3
      ],
      [
        "msi_ifg_core_interrupt_summary_test",
        3,
        12
      ],
      [
        "msi_ifg_serdes_interrupt_summary_test",
        15,
        12
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg2": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "Interrupt Summary Register for all blocks for the Msi Master Interrupt",
    "fields": [
      [
        "msi_rxpp_term_interrupt_summary",
        0,
        6
      ],
      [
        "msi_rxpp_fwd_interrupt_summary",
        6,
        6
      ],
      [
        "msi_txpp_interrupt_summary",
        12,
        6
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg2_mask": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register masks MsiBlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "msi_rxpp_term_interrupt_summary_mask",
        0,
        6
      ],
      [
        "msi_rxpp_fwd_interrupt_summary_mask",
        6,
        6
      ],
      [
        "msi_txpp_interrupt_summary_mask",
        12,
        6
      ]
    ]
  },
  "sbif_msi_blocks_interrupt_summary_reg2_test": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register tests MsiBlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "msi_rxpp_term_interrupt_summary_test",
        0,
        6
      ],
      [
        "msi_rxpp_fwd_interrupt_summary_test",
        6,
        6
      ],
      [
        "msi_txpp_interrupt_summary_test",
        12,
        6
      ]
    ]
  },
  "sbif_msi_master_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Msi Master Interrupt Register",
    "fields": [
      [
        "msi_blocks0_int",
        0,
        1
      ],
      [
        "msi_blocks1_int",
        1,
        1
      ],
      [
        "msi_blocks2_int",
        2,
        1
      ],
      [
        "msi_acc_eng_err_int",
        3,
        8
      ],
      [
        "msi_acc_eng_done_int",
        11,
        8
      ],
      [
        "msi_packet_dma_err_int",
        19,
        1
      ],
      [
        "msi_packet_dma_done_int",
        20,
        1
      ],
      [
        "msi_packet_dma_drop_fc_int",
        21,
        1
      ],
      [
        "msi_axi_mem_ecc_int",
        22,
        1
      ],
      [
        "msi_css_mem_ecc_int",
        23,
        1
      ],
      [
        "msi_sbif_mem_ecc_int",
        24,
        1
      ],
      [
        "msi_pcie_phy_ln0_int",
        25,
        1
      ],
      [
        "msi_pcie_phy_ln1_int",
        26,
        1
      ]
    ]
  },
  "sbif_msi_master_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks MsiMasterInterruptReg interrupt register",
    "fields": [
      [
        "msi_blocks0_int_mask",
        0,
        1
      ],
      [
        "msi_blocks1_int_mask",
        1,
        1
      ],
      [
        "msi_blocks2_int_mask",
        2,
        1
      ],
      [
        "msi_acc_eng_err_int_mask",
        3,
        8
      ],
      [
        "msi_acc_eng_done_int_mask",
        11,
        8
      ],
      [
        "msi_packet_dma_err_int_mask",
        19,
        1
      ],
      [
        "msi_packet_dma_done_int_mask",
        20,
        1
      ],
      [
        "msi_packet_dma_drop_fc_int_mask",
        21,
        1
      ],
      [
        "msi_axi_mem_ecc_int_mask",
        22,
        1
      ],
      [
        "msi_css_mem_ecc_int_mask",
        23,
        1
      ],
      [
        "msi_sbif_mem_ecc_int_mask",
        24,
        1
      ],
      [
        "msi_pcie_phy_ln0_int_mask",
        25,
        1
      ],
      [
        "msi_pcie_phy_ln1_int_mask",
        26,
        1
      ]
    ]
  },
  "sbif_msi_master_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests MsiMasterInterruptReg interrupt register",
    "fields": [
      [
        "msi_blocks0_int_test",
        0,
        1
      ],
      [
        "msi_blocks1_int_test",
        1,
        1
      ],
      [
        "msi_blocks2_int_test",
        2,
        1
      ],
      [
        "msi_acc_eng_err_int_test",
        3,
        8
      ],
      [
        "msi_acc_eng_done_int_test",
        11,
        8
      ],
      [
        "msi_packet_dma_err_int_test",
        19,
        1
      ],
      [
        "msi_packet_dma_done_int_test",
        20,
        1
      ],
      [
        "msi_packet_dma_drop_fc_int_test",
        21,
        1
      ],
      [
        "msi_axi_mem_ecc_int_test",
        22,
        1
      ],
      [
        "msi_css_mem_ecc_int_test",
        23,
        1
      ],
      [
        "msi_sbif_mem_ecc_int_test",
        24,
        1
      ],
      [
        "msi_pcie_phy_ln0_int_test",
        25,
        1
      ],
      [
        "msi_pcie_phy_ln1_int_test",
        26,
        1
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg0": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Pin Master Interrupt",
    "fields": [
      [
        "pin_cdb_top_interrupt_summary",
        0,
        1
      ],
      [
        "pin_counters_interrupt_summary",
        1,
        1
      ],
      [
        "pin_dram_control_interrupt_summary",
        2,
        1
      ],
      [
        "pin_egr_interrupt_summary",
        3,
        1
      ],
      [
        "pin_fdll_interrupt_summary",
        4,
        1
      ],
      [
        "pin_fllb_interrupt_summary",
        5,
        1
      ],
      [
        "pin_ics_interrupt_summary",
        6,
        1
      ],
      [
        "pin_nw_reorder_interrupt_summary",
        7,
        1
      ],
      [
        "pin_pp_reorder_interrupt_summary",
        8,
        1
      ],
      [
        "pin_pdoq_interrupt_summary",
        9,
        1
      ],
      [
        "pin_pdvoq_interrupt_summary",
        10,
        1
      ],
      [
        "pin_reassembly_interrupt_summary",
        11,
        1
      ],
      [
        "pin_rx_cgm_interrupt_summary",
        12,
        1
      ],
      [
        "pin_rx_meter_interrupt_summary",
        13,
        1
      ],
      [
        "pin_rx_pdr_interrupt_summary",
        14,
        1
      ],
      [
        "pin_sch_interrupt_summary",
        15,
        1
      ],
      [
        "pin_sms_interrupt_summary",
        16,
        1
      ],
      [
        "pin_ts_mon_interrupt_summary",
        17,
        1
      ],
      [
        "pin_hbmhi_interrupt_summary",
        18,
        1
      ],
      [
        "pin_hbmlo_interrupt_summary",
        19,
        1
      ],
      [
        "pin_mmu_interrupt_summary",
        20,
        1
      ],
      [
        "pin_csms_interrupt_summary",
        21,
        1
      ],
      [
        "pin_pier_interrupt_summary",
        22,
        1
      ],
      [
        "pin_frm_interrupt_summary",
        23,
        1
      ],
      [
        "pin_fte_interrupt_summary",
        24,
        1
      ],
      [
        "pin_npu_host_interrupt_summary",
        25,
        1
      ],
      [
        "pin_mrb_interrupt_summary",
        26,
        1
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg0_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks PinBlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "pin_cdb_top_interrupt_summary_mask",
        0,
        1
      ],
      [
        "pin_counters_interrupt_summary_mask",
        1,
        1
      ],
      [
        "pin_dram_control_interrupt_summary_mask",
        2,
        1
      ],
      [
        "pin_egr_interrupt_summary_mask",
        3,
        1
      ],
      [
        "pin_fdll_interrupt_summary_mask",
        4,
        1
      ],
      [
        "pin_fllb_interrupt_summary_mask",
        5,
        1
      ],
      [
        "pin_ics_interrupt_summary_mask",
        6,
        1
      ],
      [
        "pin_nw_reorder_interrupt_summary_mask",
        7,
        1
      ],
      [
        "pin_pp_reorder_interrupt_summary_mask",
        8,
        1
      ],
      [
        "pin_pdoq_interrupt_summary_mask",
        9,
        1
      ],
      [
        "pin_pdvoq_interrupt_summary_mask",
        10,
        1
      ],
      [
        "pin_reassembly_interrupt_summary_mask",
        11,
        1
      ],
      [
        "pin_rx_cgm_interrupt_summary_mask",
        12,
        1
      ],
      [
        "pin_rx_meter_interrupt_summary_mask",
        13,
        1
      ],
      [
        "pin_rx_pdr_interrupt_summary_mask",
        14,
        1
      ],
      [
        "pin_sch_interrupt_summary_mask",
        15,
        1
      ],
      [
        "pin_sms_interrupt_summary_mask",
        16,
        1
      ],
      [
        "pin_ts_mon_interrupt_summary_mask",
        17,
        1
      ],
      [
        "pin_hbmhi_interrupt_summary_mask",
        18,
        1
      ],
      [
        "pin_hbmlo_interrupt_summary_mask",
        19,
        1
      ],
      [
        "pin_mmu_interrupt_summary_mask",
        20,
        1
      ],
      [
        "pin_csms_interrupt_summary_mask",
        21,
        1
      ],
      [
        "pin_pier_interrupt_summary_mask",
        22,
        1
      ],
      [
        "pin_frm_interrupt_summary_mask",
        23,
        1
      ],
      [
        "pin_fte_interrupt_summary_mask",
        24,
        1
      ],
      [
        "pin_npu_host_interrupt_summary_mask",
        25,
        1
      ],
      [
        "pin_mrb_interrupt_summary_mask",
        26,
        1
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg0_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests PinBlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "pin_cdb_top_interrupt_summary_test",
        0,
        1
      ],
      [
        "pin_counters_interrupt_summary_test",
        1,
        1
      ],
      [
        "pin_dram_control_interrupt_summary_test",
        2,
        1
      ],
      [
        "pin_egr_interrupt_summary_test",
        3,
        1
      ],
      [
        "pin_fdll_interrupt_summary_test",
        4,
        1
      ],
      [
        "pin_fllb_interrupt_summary_test",
        5,
        1
      ],
      [
        "pin_ics_interrupt_summary_test",
        6,
        1
      ],
      [
        "pin_nw_reorder_interrupt_summary_test",
        7,
        1
      ],
      [
        "pin_pp_reorder_interrupt_summary_test",
        8,
        1
      ],
      [
        "pin_pdoq_interrupt_summary_test",
        9,
        1
      ],
      [
        "pin_pdvoq_interrupt_summary_test",
        10,
        1
      ],
      [
        "pin_reassembly_interrupt_summary_test",
        11,
        1
      ],
      [
        "pin_rx_cgm_interrupt_summary_test",
        12,
        1
      ],
      [
        "pin_rx_meter_interrupt_summary_test",
        13,
        1
      ],
      [
        "pin_rx_pdr_interrupt_summary_test",
        14,
        1
      ],
      [
        "pin_sch_interrupt_summary_test",
        15,
        1
      ],
      [
        "pin_sms_interrupt_summary_test",
        16,
        1
      ],
      [
        "pin_ts_mon_interrupt_summary_test",
        17,
        1
      ],
      [
        "pin_hbmhi_interrupt_summary_test",
        18,
        1
      ],
      [
        "pin_hbmlo_interrupt_summary_test",
        19,
        1
      ],
      [
        "pin_mmu_interrupt_summary_test",
        20,
        1
      ],
      [
        "pin_csms_interrupt_summary_test",
        21,
        1
      ],
      [
        "pin_pier_interrupt_summary_test",
        22,
        1
      ],
      [
        "pin_frm_interrupt_summary_test",
        23,
        1
      ],
      [
        "pin_fte_interrupt_summary_test",
        24,
        1
      ],
      [
        "pin_npu_host_interrupt_summary_test",
        25,
        1
      ],
      [
        "pin_mrb_interrupt_summary_test",
        26,
        1
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg1": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Pin Master Interrupt",
    "fields": [
      [
        "pin_idb_interrupt_summary",
        0,
        3
      ],
      [
        "pin_ifg_core_interrupt_summary",
        3,
        12
      ],
      [
        "pin_ifg_serdes_interrupt_summary",
        15,
        12
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg1_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks PinBlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "pin_idb_interrupt_summary_mask",
        0,
        3
      ],
      [
        "pin_ifg_core_interrupt_summary_mask",
        3,
        12
      ],
      [
        "pin_ifg_serdes_interrupt_summary_mask",
        15,
        12
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg1_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests PinBlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "pin_idb_interrupt_summary_test",
        0,
        3
      ],
      [
        "pin_ifg_core_interrupt_summary_test",
        3,
        12
      ],
      [
        "pin_ifg_serdes_interrupt_summary_test",
        15,
        12
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg2": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "Interrupt Summary Register for all blocks for the Pin Master Interrupt",
    "fields": [
      [
        "pin_rxpp_term_interrupt_summary",
        0,
        6
      ],
      [
        "pin_rxpp_fwd_interrupt_summary",
        6,
        6
      ],
      [
        "pin_txpp_interrupt_summary",
        12,
        6
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg2_mask": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register masks PinBlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "pin_rxpp_term_interrupt_summary_mask",
        0,
        6
      ],
      [
        "pin_rxpp_fwd_interrupt_summary_mask",
        6,
        6
      ],
      [
        "pin_txpp_interrupt_summary_mask",
        12,
        6
      ]
    ]
  },
  "sbif_pin_blocks_interrupt_summary_reg2_test": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register tests PinBlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "pin_rxpp_term_interrupt_summary_test",
        0,
        6
      ],
      [
        "pin_rxpp_fwd_interrupt_summary_test",
        6,
        6
      ],
      [
        "pin_txpp_interrupt_summary_test",
        12,
        6
      ]
    ]
  },
  "sbif_pin_master_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Pin Master Interrupt Register",
    "fields": [
      [
        "pin_blocks0_int",
        0,
        1
      ],
      [
        "pin_blocks1_int",
        1,
        1
      ],
      [
        "pin_blocks2_int",
        2,
        1
      ],
      [
        "pin_acc_eng_err_int",
        3,
        8
      ],
      [
        "pin_acc_eng_done_int",
        11,
        8
      ],
      [
        "pin_packet_dma_err_int",
        19,
        1
      ],
      [
        "pin_packet_dma_done_int",
        20,
        1
      ],
      [
        "pin_packet_dma_drop_fc_int",
        21,
        1
      ],
      [
        "pin_axi_mem_ecc_int",
        22,
        1
      ],
      [
        "pin_css_mem_ecc_int",
        23,
        1
      ],
      [
        "pin_sbif_mem_ecc_int",
        24,
        1
      ],
      [
        "pin_pcie_phy_ln0_int",
        25,
        1
      ],
      [
        "pin_pcie_phy_ln1_int",
        26,
        1
      ]
    ]
  },
  "sbif_pin_master_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks PinMasterInterruptReg interrupt register",
    "fields": [
      [
        "pin_blocks0_int_mask",
        0,
        1
      ],
      [
        "pin_blocks1_int_mask",
        1,
        1
      ],
      [
        "pin_blocks2_int_mask",
        2,
        1
      ],
      [
        "pin_acc_eng_err_int_mask",
        3,
        8
      ],
      [
        "pin_acc_eng_done_int_mask",
        11,
        8
      ],
      [
        "pin_packet_dma_err_int_mask",
        19,
        1
      ],
      [
        "pin_packet_dma_done_int_mask",
        20,
        1
      ],
      [
        "pin_packet_dma_drop_fc_int_mask",
        21,
        1
      ],
      [
        "pin_axi_mem_ecc_int_mask",
        22,
        1
      ],
      [
        "pin_css_mem_ecc_int_mask",
        23,
        1
      ],
      [
        "pin_sbif_mem_ecc_int_mask",
        24,
        1
      ],
      [
        "pin_pcie_phy_ln0_int_mask",
        25,
        1
      ],
      [
        "pin_pcie_phy_ln1_int_mask",
        26,
        1
      ]
    ]
  },
  "sbif_pin_master_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests PinMasterInterruptReg interrupt register",
    "fields": [
      [
        "pin_blocks0_int_test",
        0,
        1
      ],
      [
        "pin_blocks1_int_test",
        1,
        1
      ],
      [
        "pin_blocks2_int_test",
        2,
        1
      ],
      [
        "pin_acc_eng_err_int_test",
        3,
        8
      ],
      [
        "pin_acc_eng_done_int_test",
        11,
        8
      ],
      [
        "pin_packet_dma_err_int_test",
        19,
        1
      ],
      [
        "pin_packet_dma_done_int_test",
        20,
        1
      ],
      [
        "pin_packet_dma_drop_fc_int_test",
        21,
        1
      ],
      [
        "pin_axi_mem_ecc_int_test",
        22,
        1
      ],
      [
        "pin_css_mem_ecc_int_test",
        23,
        1
      ],
      [
        "pin_sbif_mem_ecc_int_test",
        24,
        1
      ],
      [
        "pin_pcie_phy_ln0_int_test",
        25,
        1
      ],
      [
        "pin_pcie_phy_ln1_int_test",
        26,
        1
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg0": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Arc0 Master Interrupt",
    "fields": [
      [
        "arc0_cdb_top_interrupt_summary",
        0,
        1
      ],
      [
        "arc0_counters_interrupt_summary",
        1,
        1
      ],
      [
        "arc0_dram_control_interrupt_summary",
        2,
        1
      ],
      [
        "arc0_egr_interrupt_summary",
        3,
        1
      ],
      [
        "arc0_fdll_interrupt_summary",
        4,
        1
      ],
      [
        "arc0_fllb_interrupt_summary",
        5,
        1
      ],
      [
        "arc0_ics_interrupt_summary",
        6,
        1
      ],
      [
        "arc0_nw_reorder_interrupt_summary",
        7,
        1
      ],
      [
        "arc0_pp_reorder_interrupt_summary",
        8,
        1
      ],
      [
        "arc0_pdoq_interrupt_summary",
        9,
        1
      ],
      [
        "arc0_pdvoq_interrupt_summary",
        10,
        1
      ],
      [
        "arc0_reassembly_interrupt_summary",
        11,
        1
      ],
      [
        "arc0_rx_cgm_interrupt_summary",
        12,
        1
      ],
      [
        "arc0_rx_meter_interrupt_summary",
        13,
        1
      ],
      [
        "arc0_rx_pdr_interrupt_summary",
        14,
        1
      ],
      [
        "arc0_sch_interrupt_summary",
        15,
        1
      ],
      [
        "arc0_sms_interrupt_summary",
        16,
        1
      ],
      [
        "arc0_ts_mon_interrupt_summary",
        17,
        1
      ],
      [
        "arc0_hbmhi_interrupt_summary",
        18,
        1
      ],
      [
        "arc0_hbmlo_interrupt_summary",
        19,
        1
      ],
      [
        "arc0_mmu_interrupt_summary",
        20,
        1
      ],
      [
        "arc0_csms_interrupt_summary",
        21,
        1
      ],
      [
        "arc0_pier_interrupt_summary",
        22,
        1
      ],
      [
        "arc0_frm_interrupt_summary",
        23,
        1
      ],
      [
        "arc0_fte_interrupt_summary",
        24,
        1
      ],
      [
        "arc0_npu_host_interrupt_summary",
        25,
        1
      ],
      [
        "arc0_mrb_interrupt_summary",
        26,
        1
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg0_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc0BlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "arc0_cdb_top_interrupt_summary_mask",
        0,
        1
      ],
      [
        "arc0_counters_interrupt_summary_mask",
        1,
        1
      ],
      [
        "arc0_dram_control_interrupt_summary_mask",
        2,
        1
      ],
      [
        "arc0_egr_interrupt_summary_mask",
        3,
        1
      ],
      [
        "arc0_fdll_interrupt_summary_mask",
        4,
        1
      ],
      [
        "arc0_fllb_interrupt_summary_mask",
        5,
        1
      ],
      [
        "arc0_ics_interrupt_summary_mask",
        6,
        1
      ],
      [
        "arc0_nw_reorder_interrupt_summary_mask",
        7,
        1
      ],
      [
        "arc0_pp_reorder_interrupt_summary_mask",
        8,
        1
      ],
      [
        "arc0_pdoq_interrupt_summary_mask",
        9,
        1
      ],
      [
        "arc0_pdvoq_interrupt_summary_mask",
        10,
        1
      ],
      [
        "arc0_reassembly_interrupt_summary_mask",
        11,
        1
      ],
      [
        "arc0_rx_cgm_interrupt_summary_mask",
        12,
        1
      ],
      [
        "arc0_rx_meter_interrupt_summary_mask",
        13,
        1
      ],
      [
        "arc0_rx_pdr_interrupt_summary_mask",
        14,
        1
      ],
      [
        "arc0_sch_interrupt_summary_mask",
        15,
        1
      ],
      [
        "arc0_sms_interrupt_summary_mask",
        16,
        1
      ],
      [
        "arc0_ts_mon_interrupt_summary_mask",
        17,
        1
      ],
      [
        "arc0_hbmhi_interrupt_summary_mask",
        18,
        1
      ],
      [
        "arc0_hbmlo_interrupt_summary_mask",
        19,
        1
      ],
      [
        "arc0_mmu_interrupt_summary_mask",
        20,
        1
      ],
      [
        "arc0_csms_interrupt_summary_mask",
        21,
        1
      ],
      [
        "arc0_pier_interrupt_summary_mask",
        22,
        1
      ],
      [
        "arc0_frm_interrupt_summary_mask",
        23,
        1
      ],
      [
        "arc0_fte_interrupt_summary_mask",
        24,
        1
      ],
      [
        "arc0_npu_host_interrupt_summary_mask",
        25,
        1
      ],
      [
        "arc0_mrb_interrupt_summary_mask",
        26,
        1
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg0_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc0BlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "arc0_cdb_top_interrupt_summary_test",
        0,
        1
      ],
      [
        "arc0_counters_interrupt_summary_test",
        1,
        1
      ],
      [
        "arc0_dram_control_interrupt_summary_test",
        2,
        1
      ],
      [
        "arc0_egr_interrupt_summary_test",
        3,
        1
      ],
      [
        "arc0_fdll_interrupt_summary_test",
        4,
        1
      ],
      [
        "arc0_fllb_interrupt_summary_test",
        5,
        1
      ],
      [
        "arc0_ics_interrupt_summary_test",
        6,
        1
      ],
      [
        "arc0_nw_reorder_interrupt_summary_test",
        7,
        1
      ],
      [
        "arc0_pp_reorder_interrupt_summary_test",
        8,
        1
      ],
      [
        "arc0_pdoq_interrupt_summary_test",
        9,
        1
      ],
      [
        "arc0_pdvoq_interrupt_summary_test",
        10,
        1
      ],
      [
        "arc0_reassembly_interrupt_summary_test",
        11,
        1
      ],
      [
        "arc0_rx_cgm_interrupt_summary_test",
        12,
        1
      ],
      [
        "arc0_rx_meter_interrupt_summary_test",
        13,
        1
      ],
      [
        "arc0_rx_pdr_interrupt_summary_test",
        14,
        1
      ],
      [
        "arc0_sch_interrupt_summary_test",
        15,
        1
      ],
      [
        "arc0_sms_interrupt_summary_test",
        16,
        1
      ],
      [
        "arc0_ts_mon_interrupt_summary_test",
        17,
        1
      ],
      [
        "arc0_hbmhi_interrupt_summary_test",
        18,
        1
      ],
      [
        "arc0_hbmlo_interrupt_summary_test",
        19,
        1
      ],
      [
        "arc0_mmu_interrupt_summary_test",
        20,
        1
      ],
      [
        "arc0_csms_interrupt_summary_test",
        21,
        1
      ],
      [
        "arc0_pier_interrupt_summary_test",
        22,
        1
      ],
      [
        "arc0_frm_interrupt_summary_test",
        23,
        1
      ],
      [
        "arc0_fte_interrupt_summary_test",
        24,
        1
      ],
      [
        "arc0_npu_host_interrupt_summary_test",
        25,
        1
      ],
      [
        "arc0_mrb_interrupt_summary_test",
        26,
        1
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg1": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Arc0 Master Interrupt",
    "fields": [
      [
        "arc0_idb_interrupt_summary",
        0,
        3
      ],
      [
        "arc0_ifg_core_interrupt_summary",
        3,
        12
      ],
      [
        "arc0_ifg_serdes_interrupt_summary",
        15,
        12
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg1_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc0BlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "arc0_idb_interrupt_summary_mask",
        0,
        3
      ],
      [
        "arc0_ifg_core_interrupt_summary_mask",
        3,
        12
      ],
      [
        "arc0_ifg_serdes_interrupt_summary_mask",
        15,
        12
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg1_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc0BlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "arc0_idb_interrupt_summary_test",
        0,
        3
      ],
      [
        "arc0_ifg_core_interrupt_summary_test",
        3,
        12
      ],
      [
        "arc0_ifg_serdes_interrupt_summary_test",
        15,
        12
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg2": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "Interrupt Summary Register for all blocks for the Arc0 Master Interrupt",
    "fields": [
      [
        "arc0_rxpp_term_interrupt_summary",
        0,
        6
      ],
      [
        "arc0_rxpp_fwd_interrupt_summary",
        6,
        6
      ],
      [
        "arc0_txpp_interrupt_summary",
        12,
        6
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg2_mask": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register masks Arc0BlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "arc0_rxpp_term_interrupt_summary_mask",
        0,
        6
      ],
      [
        "arc0_rxpp_fwd_interrupt_summary_mask",
        6,
        6
      ],
      [
        "arc0_txpp_interrupt_summary_mask",
        12,
        6
      ]
    ]
  },
  "sbif_arc0_blocks_interrupt_summary_reg2_test": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register tests Arc0BlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "arc0_rxpp_term_interrupt_summary_test",
        0,
        6
      ],
      [
        "arc0_rxpp_fwd_interrupt_summary_test",
        6,
        6
      ],
      [
        "arc0_txpp_interrupt_summary_test",
        12,
        6
      ]
    ]
  },
  "sbif_arc0_master_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Arc0 Master Interrupt Register",
    "fields": [
      [
        "arc0_blocks0_int",
        0,
        1
      ],
      [
        "arc0_blocks1_int",
        1,
        1
      ],
      [
        "arc0_blocks2_int",
        2,
        1
      ],
      [
        "arc0_acc_eng_err_int",
        3,
        8
      ],
      [
        "arc0_acc_eng_done_int",
        11,
        8
      ],
      [
        "arc0_packet_dma_err_int",
        19,
        1
      ],
      [
        "arc0_packet_dma_done_int",
        20,
        1
      ],
      [
        "arc0_packet_dma_drop_fc_int",
        21,
        1
      ],
      [
        "arc0_axi_mem_ecc_int",
        22,
        1
      ],
      [
        "arc0_css_mem_ecc_int",
        23,
        1
      ],
      [
        "arc0_sbif_mem_ecc_int",
        24,
        1
      ],
      [
        "arc0_pcie_phy_ln0_int",
        25,
        1
      ],
      [
        "arc0_pcie_phy_ln1_int",
        26,
        1
      ]
    ]
  },
  "sbif_arc0_master_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc0MasterInterruptReg interrupt register",
    "fields": [
      [
        "arc0_blocks0_int_mask",
        0,
        1
      ],
      [
        "arc0_blocks1_int_mask",
        1,
        1
      ],
      [
        "arc0_blocks2_int_mask",
        2,
        1
      ],
      [
        "arc0_acc_eng_err_int_mask",
        3,
        8
      ],
      [
        "arc0_acc_eng_done_int_mask",
        11,
        8
      ],
      [
        "arc0_packet_dma_err_int_mask",
        19,
        1
      ],
      [
        "arc0_packet_dma_done_int_mask",
        20,
        1
      ],
      [
        "arc0_packet_dma_drop_fc_int_mask",
        21,
        1
      ],
      [
        "arc0_axi_mem_ecc_int_mask",
        22,
        1
      ],
      [
        "arc0_css_mem_ecc_int_mask",
        23,
        1
      ],
      [
        "arc0_sbif_mem_ecc_int_mask",
        24,
        1
      ],
      [
        "arc0_pcie_phy_ln0_int_mask",
        25,
        1
      ],
      [
        "arc0_pcie_phy_ln1_int_mask",
        26,
        1
      ]
    ]
  },
  "sbif_arc0_master_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc0MasterInterruptReg interrupt register",
    "fields": [
      [
        "arc0_blocks0_int_test",
        0,
        1
      ],
      [
        "arc0_blocks1_int_test",
        1,
        1
      ],
      [
        "arc0_blocks2_int_test",
        2,
        1
      ],
      [
        "arc0_acc_eng_err_int_test",
        3,
        8
      ],
      [
        "arc0_acc_eng_done_int_test",
        11,
        8
      ],
      [
        "arc0_packet_dma_err_int_test",
        19,
        1
      ],
      [
        "arc0_packet_dma_done_int_test",
        20,
        1
      ],
      [
        "arc0_packet_dma_drop_fc_int_test",
        21,
        1
      ],
      [
        "arc0_axi_mem_ecc_int_test",
        22,
        1
      ],
      [
        "arc0_css_mem_ecc_int_test",
        23,
        1
      ],
      [
        "arc0_sbif_mem_ecc_int_test",
        24,
        1
      ],
      [
        "arc0_pcie_phy_ln0_int_test",
        25,
        1
      ],
      [
        "arc0_pcie_phy_ln1_int_test",
        26,
        1
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg0": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Arc1 Master Interrupt",
    "fields": [
      [
        "arc1_cdb_top_interrupt_summary",
        0,
        1
      ],
      [
        "arc1_counters_interrupt_summary",
        1,
        1
      ],
      [
        "arc1_dram_control_interrupt_summary",
        2,
        1
      ],
      [
        "arc1_egr_interrupt_summary",
        3,
        1
      ],
      [
        "arc1_fdll_interrupt_summary",
        4,
        1
      ],
      [
        "arc1_fllb_interrupt_summary",
        5,
        1
      ],
      [
        "arc1_ics_interrupt_summary",
        6,
        1
      ],
      [
        "arc1_nw_reorder_interrupt_summary",
        7,
        1
      ],
      [
        "arc1_pp_reorder_interrupt_summary",
        8,
        1
      ],
      [
        "arc1_pdoq_interrupt_summary",
        9,
        1
      ],
      [
        "arc1_pdvoq_interrupt_summary",
        10,
        1
      ],
      [
        "arc1_reassembly_interrupt_summary",
        11,
        1
      ],
      [
        "arc1_rx_cgm_interrupt_summary",
        12,
        1
      ],
      [
        "arc1_rx_meter_interrupt_summary",
        13,
        1
      ],
      [
        "arc1_rx_pdr_interrupt_summary",
        14,
        1
      ],
      [
        "arc1_sch_interrupt_summary",
        15,
        1
      ],
      [
        "arc1_sms_interrupt_summary",
        16,
        1
      ],
      [
        "arc1_ts_mon_interrupt_summary",
        17,
        1
      ],
      [
        "arc1_hbmhi_interrupt_summary",
        18,
        1
      ],
      [
        "arc1_hbmlo_interrupt_summary",
        19,
        1
      ],
      [
        "arc1_mmu_interrupt_summary",
        20,
        1
      ],
      [
        "arc1_csms_interrupt_summary",
        21,
        1
      ],
      [
        "arc1_pier_interrupt_summary",
        22,
        1
      ],
      [
        "arc1_frm_interrupt_summary",
        23,
        1
      ],
      [
        "arc1_fte_interrupt_summary",
        24,
        1
      ],
      [
        "arc1_npu_host_interrupt_summary",
        25,
        1
      ],
      [
        "arc1_mrb_interrupt_summary",
        26,
        1
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg0_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc1BlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "arc1_cdb_top_interrupt_summary_mask",
        0,
        1
      ],
      [
        "arc1_counters_interrupt_summary_mask",
        1,
        1
      ],
      [
        "arc1_dram_control_interrupt_summary_mask",
        2,
        1
      ],
      [
        "arc1_egr_interrupt_summary_mask",
        3,
        1
      ],
      [
        "arc1_fdll_interrupt_summary_mask",
        4,
        1
      ],
      [
        "arc1_fllb_interrupt_summary_mask",
        5,
        1
      ],
      [
        "arc1_ics_interrupt_summary_mask",
        6,
        1
      ],
      [
        "arc1_nw_reorder_interrupt_summary_mask",
        7,
        1
      ],
      [
        "arc1_pp_reorder_interrupt_summary_mask",
        8,
        1
      ],
      [
        "arc1_pdoq_interrupt_summary_mask",
        9,
        1
      ],
      [
        "arc1_pdvoq_interrupt_summary_mask",
        10,
        1
      ],
      [
        "arc1_reassembly_interrupt_summary_mask",
        11,
        1
      ],
      [
        "arc1_rx_cgm_interrupt_summary_mask",
        12,
        1
      ],
      [
        "arc1_rx_meter_interrupt_summary_mask",
        13,
        1
      ],
      [
        "arc1_rx_pdr_interrupt_summary_mask",
        14,
        1
      ],
      [
        "arc1_sch_interrupt_summary_mask",
        15,
        1
      ],
      [
        "arc1_sms_interrupt_summary_mask",
        16,
        1
      ],
      [
        "arc1_ts_mon_interrupt_summary_mask",
        17,
        1
      ],
      [
        "arc1_hbmhi_interrupt_summary_mask",
        18,
        1
      ],
      [
        "arc1_hbmlo_interrupt_summary_mask",
        19,
        1
      ],
      [
        "arc1_mmu_interrupt_summary_mask",
        20,
        1
      ],
      [
        "arc1_csms_interrupt_summary_mask",
        21,
        1
      ],
      [
        "arc1_pier_interrupt_summary_mask",
        22,
        1
      ],
      [
        "arc1_frm_interrupt_summary_mask",
        23,
        1
      ],
      [
        "arc1_fte_interrupt_summary_mask",
        24,
        1
      ],
      [
        "arc1_npu_host_interrupt_summary_mask",
        25,
        1
      ],
      [
        "arc1_mrb_interrupt_summary_mask",
        26,
        1
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg0_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc1BlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "arc1_cdb_top_interrupt_summary_test",
        0,
        1
      ],
      [
        "arc1_counters_interrupt_summary_test",
        1,
        1
      ],
      [
        "arc1_dram_control_interrupt_summary_test",
        2,
        1
      ],
      [
        "arc1_egr_interrupt_summary_test",
        3,
        1
      ],
      [
        "arc1_fdll_interrupt_summary_test",
        4,
        1
      ],
      [
        "arc1_fllb_interrupt_summary_test",
        5,
        1
      ],
      [
        "arc1_ics_interrupt_summary_test",
        6,
        1
      ],
      [
        "arc1_nw_reorder_interrupt_summary_test",
        7,
        1
      ],
      [
        "arc1_pp_reorder_interrupt_summary_test",
        8,
        1
      ],
      [
        "arc1_pdoq_interrupt_summary_test",
        9,
        1
      ],
      [
        "arc1_pdvoq_interrupt_summary_test",
        10,
        1
      ],
      [
        "arc1_reassembly_interrupt_summary_test",
        11,
        1
      ],
      [
        "arc1_rx_cgm_interrupt_summary_test",
        12,
        1
      ],
      [
        "arc1_rx_meter_interrupt_summary_test",
        13,
        1
      ],
      [
        "arc1_rx_pdr_interrupt_summary_test",
        14,
        1
      ],
      [
        "arc1_sch_interrupt_summary_test",
        15,
        1
      ],
      [
        "arc1_sms_interrupt_summary_test",
        16,
        1
      ],
      [
        "arc1_ts_mon_interrupt_summary_test",
        17,
        1
      ],
      [
        "arc1_hbmhi_interrupt_summary_test",
        18,
        1
      ],
      [
        "arc1_hbmlo_interrupt_summary_test",
        19,
        1
      ],
      [
        "arc1_mmu_interrupt_summary_test",
        20,
        1
      ],
      [
        "arc1_csms_interrupt_summary_test",
        21,
        1
      ],
      [
        "arc1_pier_interrupt_summary_test",
        22,
        1
      ],
      [
        "arc1_frm_interrupt_summary_test",
        23,
        1
      ],
      [
        "arc1_fte_interrupt_summary_test",
        24,
        1
      ],
      [
        "arc1_npu_host_interrupt_summary_test",
        25,
        1
      ],
      [
        "arc1_mrb_interrupt_summary_test",
        26,
        1
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg1": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Arc1 Master Interrupt",
    "fields": [
      [
        "arc1_idb_interrupt_summary",
        0,
        3
      ],
      [
        "arc1_ifg_core_interrupt_summary",
        3,
        12
      ],
      [
        "arc1_ifg_serdes_interrupt_summary",
        15,
        12
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg1_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc1BlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "arc1_idb_interrupt_summary_mask",
        0,
        3
      ],
      [
        "arc1_ifg_core_interrupt_summary_mask",
        3,
        12
      ],
      [
        "arc1_ifg_serdes_interrupt_summary_mask",
        15,
        12
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg1_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc1BlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "arc1_idb_interrupt_summary_test",
        0,
        3
      ],
      [
        "arc1_ifg_core_interrupt_summary_test",
        3,
        12
      ],
      [
        "arc1_ifg_serdes_interrupt_summary_test",
        15,
        12
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg2": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "Interrupt Summary Register for all blocks for the Arc1 Master Interrupt",
    "fields": [
      [
        "arc1_rxpp_term_interrupt_summary",
        0,
        6
      ],
      [
        "arc1_rxpp_fwd_interrupt_summary",
        6,
        6
      ],
      [
        "arc1_txpp_interrupt_summary",
        12,
        6
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg2_mask": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register masks Arc1BlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "arc1_rxpp_term_interrupt_summary_mask",
        0,
        6
      ],
      [
        "arc1_rxpp_fwd_interrupt_summary_mask",
        6,
        6
      ],
      [
        "arc1_txpp_interrupt_summary_mask",
        12,
        6
      ]
    ]
  },
  "sbif_arc1_blocks_interrupt_summary_reg2_test": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register tests Arc1BlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "arc1_rxpp_term_interrupt_summary_test",
        0,
        6
      ],
      [
        "arc1_rxpp_fwd_interrupt_summary_test",
        6,
        6
      ],
      [
        "arc1_txpp_interrupt_summary_test",
        12,
        6
      ]
    ]
  },
  "sbif_arc1_master_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Arc1 Master Interrupt Register",
    "fields": [
      [
        "arc1_blocks0_int",
        0,
        1
      ],
      [
        "arc1_blocks1_int",
        1,
        1
      ],
      [
        "arc1_blocks2_int",
        2,
        1
      ],
      [
        "arc1_acc_eng_err_int",
        3,
        8
      ],
      [
        "arc1_acc_eng_done_int",
        11,
        8
      ],
      [
        "arc1_packet_dma_err_int",
        19,
        1
      ],
      [
        "arc1_packet_dma_done_int",
        20,
        1
      ],
      [
        "arc1_packet_dma_drop_fc_int",
        21,
        1
      ],
      [
        "arc1_axi_mem_ecc_int",
        22,
        1
      ],
      [
        "arc1_css_mem_ecc_int",
        23,
        1
      ],
      [
        "arc1_sbif_mem_ecc_int",
        24,
        1
      ],
      [
        "arc1_pcie_phy_ln0_int",
        25,
        1
      ],
      [
        "arc1_pcie_phy_ln1_int",
        26,
        1
      ]
    ]
  },
  "sbif_arc1_master_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc1MasterInterruptReg interrupt register",
    "fields": [
      [
        "arc1_blocks0_int_mask",
        0,
        1
      ],
      [
        "arc1_blocks1_int_mask",
        1,
        1
      ],
      [
        "arc1_blocks2_int_mask",
        2,
        1
      ],
      [
        "arc1_acc_eng_err_int_mask",
        3,
        8
      ],
      [
        "arc1_acc_eng_done_int_mask",
        11,
        8
      ],
      [
        "arc1_packet_dma_err_int_mask",
        19,
        1
      ],
      [
        "arc1_packet_dma_done_int_mask",
        20,
        1
      ],
      [
        "arc1_packet_dma_drop_fc_int_mask",
        21,
        1
      ],
      [
        "arc1_axi_mem_ecc_int_mask",
        22,
        1
      ],
      [
        "arc1_css_mem_ecc_int_mask",
        23,
        1
      ],
      [
        "arc1_sbif_mem_ecc_int_mask",
        24,
        1
      ],
      [
        "arc1_pcie_phy_ln0_int_mask",
        25,
        1
      ],
      [
        "arc1_pcie_phy_ln1_int_mask",
        26,
        1
      ]
    ]
  },
  "sbif_arc1_master_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc1MasterInterruptReg interrupt register",
    "fields": [
      [
        "arc1_blocks0_int_test",
        0,
        1
      ],
      [
        "arc1_blocks1_int_test",
        1,
        1
      ],
      [
        "arc1_blocks2_int_test",
        2,
        1
      ],
      [
        "arc1_acc_eng_err_int_test",
        3,
        8
      ],
      [
        "arc1_acc_eng_done_int_test",
        11,
        8
      ],
      [
        "arc1_packet_dma_err_int_test",
        19,
        1
      ],
      [
        "arc1_packet_dma_done_int_test",
        20,
        1
      ],
      [
        "arc1_packet_dma_drop_fc_int_test",
        21,
        1
      ],
      [
        "arc1_axi_mem_ecc_int_test",
        22,
        1
      ],
      [
        "arc1_css_mem_ecc_int_test",
        23,
        1
      ],
      [
        "arc1_sbif_mem_ecc_int_test",
        24,
        1
      ],
      [
        "arc1_pcie_phy_ln0_int_test",
        25,
        1
      ],
      [
        "arc1_pcie_phy_ln1_int_test",
        26,
        1
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg0": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Arc2 Master Interrupt",
    "fields": [
      [
        "arc2_cdb_top_interrupt_summary",
        0,
        1
      ],
      [
        "arc2_counters_interrupt_summary",
        1,
        1
      ],
      [
        "arc2_dram_control_interrupt_summary",
        2,
        1
      ],
      [
        "arc2_egr_interrupt_summary",
        3,
        1
      ],
      [
        "arc2_fdll_interrupt_summary",
        4,
        1
      ],
      [
        "arc2_fllb_interrupt_summary",
        5,
        1
      ],
      [
        "arc2_ics_interrupt_summary",
        6,
        1
      ],
      [
        "arc2_nw_reorder_interrupt_summary",
        7,
        1
      ],
      [
        "arc2_pp_reorder_interrupt_summary",
        8,
        1
      ],
      [
        "arc2_pdoq_interrupt_summary",
        9,
        1
      ],
      [
        "arc2_pdvoq_interrupt_summary",
        10,
        1
      ],
      [
        "arc2_reassembly_interrupt_summary",
        11,
        1
      ],
      [
        "arc2_rx_cgm_interrupt_summary",
        12,
        1
      ],
      [
        "arc2_rx_meter_interrupt_summary",
        13,
        1
      ],
      [
        "arc2_rx_pdr_interrupt_summary",
        14,
        1
      ],
      [
        "arc2_sch_interrupt_summary",
        15,
        1
      ],
      [
        "arc2_sms_interrupt_summary",
        16,
        1
      ],
      [
        "arc2_ts_mon_interrupt_summary",
        17,
        1
      ],
      [
        "arc2_hbmhi_interrupt_summary",
        18,
        1
      ],
      [
        "arc2_hbmlo_interrupt_summary",
        19,
        1
      ],
      [
        "arc2_mmu_interrupt_summary",
        20,
        1
      ],
      [
        "arc2_csms_interrupt_summary",
        21,
        1
      ],
      [
        "arc2_pier_interrupt_summary",
        22,
        1
      ],
      [
        "arc2_frm_interrupt_summary",
        23,
        1
      ],
      [
        "arc2_fte_interrupt_summary",
        24,
        1
      ],
      [
        "arc2_npu_host_interrupt_summary",
        25,
        1
      ],
      [
        "arc2_mrb_interrupt_summary",
        26,
        1
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg0_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc2BlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "arc2_cdb_top_interrupt_summary_mask",
        0,
        1
      ],
      [
        "arc2_counters_interrupt_summary_mask",
        1,
        1
      ],
      [
        "arc2_dram_control_interrupt_summary_mask",
        2,
        1
      ],
      [
        "arc2_egr_interrupt_summary_mask",
        3,
        1
      ],
      [
        "arc2_fdll_interrupt_summary_mask",
        4,
        1
      ],
      [
        "arc2_fllb_interrupt_summary_mask",
        5,
        1
      ],
      [
        "arc2_ics_interrupt_summary_mask",
        6,
        1
      ],
      [
        "arc2_nw_reorder_interrupt_summary_mask",
        7,
        1
      ],
      [
        "arc2_pp_reorder_interrupt_summary_mask",
        8,
        1
      ],
      [
        "arc2_pdoq_interrupt_summary_mask",
        9,
        1
      ],
      [
        "arc2_pdvoq_interrupt_summary_mask",
        10,
        1
      ],
      [
        "arc2_reassembly_interrupt_summary_mask",
        11,
        1
      ],
      [
        "arc2_rx_cgm_interrupt_summary_mask",
        12,
        1
      ],
      [
        "arc2_rx_meter_interrupt_summary_mask",
        13,
        1
      ],
      [
        "arc2_rx_pdr_interrupt_summary_mask",
        14,
        1
      ],
      [
        "arc2_sch_interrupt_summary_mask",
        15,
        1
      ],
      [
        "arc2_sms_interrupt_summary_mask",
        16,
        1
      ],
      [
        "arc2_ts_mon_interrupt_summary_mask",
        17,
        1
      ],
      [
        "arc2_hbmhi_interrupt_summary_mask",
        18,
        1
      ],
      [
        "arc2_hbmlo_interrupt_summary_mask",
        19,
        1
      ],
      [
        "arc2_mmu_interrupt_summary_mask",
        20,
        1
      ],
      [
        "arc2_csms_interrupt_summary_mask",
        21,
        1
      ],
      [
        "arc2_pier_interrupt_summary_mask",
        22,
        1
      ],
      [
        "arc2_frm_interrupt_summary_mask",
        23,
        1
      ],
      [
        "arc2_fte_interrupt_summary_mask",
        24,
        1
      ],
      [
        "arc2_npu_host_interrupt_summary_mask",
        25,
        1
      ],
      [
        "arc2_mrb_interrupt_summary_mask",
        26,
        1
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg0_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc2BlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "arc2_cdb_top_interrupt_summary_test",
        0,
        1
      ],
      [
        "arc2_counters_interrupt_summary_test",
        1,
        1
      ],
      [
        "arc2_dram_control_interrupt_summary_test",
        2,
        1
      ],
      [
        "arc2_egr_interrupt_summary_test",
        3,
        1
      ],
      [
        "arc2_fdll_interrupt_summary_test",
        4,
        1
      ],
      [
        "arc2_fllb_interrupt_summary_test",
        5,
        1
      ],
      [
        "arc2_ics_interrupt_summary_test",
        6,
        1
      ],
      [
        "arc2_nw_reorder_interrupt_summary_test",
        7,
        1
      ],
      [
        "arc2_pp_reorder_interrupt_summary_test",
        8,
        1
      ],
      [
        "arc2_pdoq_interrupt_summary_test",
        9,
        1
      ],
      [
        "arc2_pdvoq_interrupt_summary_test",
        10,
        1
      ],
      [
        "arc2_reassembly_interrupt_summary_test",
        11,
        1
      ],
      [
        "arc2_rx_cgm_interrupt_summary_test",
        12,
        1
      ],
      [
        "arc2_rx_meter_interrupt_summary_test",
        13,
        1
      ],
      [
        "arc2_rx_pdr_interrupt_summary_test",
        14,
        1
      ],
      [
        "arc2_sch_interrupt_summary_test",
        15,
        1
      ],
      [
        "arc2_sms_interrupt_summary_test",
        16,
        1
      ],
      [
        "arc2_ts_mon_interrupt_summary_test",
        17,
        1
      ],
      [
        "arc2_hbmhi_interrupt_summary_test",
        18,
        1
      ],
      [
        "arc2_hbmlo_interrupt_summary_test",
        19,
        1
      ],
      [
        "arc2_mmu_interrupt_summary_test",
        20,
        1
      ],
      [
        "arc2_csms_interrupt_summary_test",
        21,
        1
      ],
      [
        "arc2_pier_interrupt_summary_test",
        22,
        1
      ],
      [
        "arc2_frm_interrupt_summary_test",
        23,
        1
      ],
      [
        "arc2_fte_interrupt_summary_test",
        24,
        1
      ],
      [
        "arc2_npu_host_interrupt_summary_test",
        25,
        1
      ],
      [
        "arc2_mrb_interrupt_summary_test",
        26,
        1
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg1": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Arc2 Master Interrupt",
    "fields": [
      [
        "arc2_idb_interrupt_summary",
        0,
        3
      ],
      [
        "arc2_ifg_core_interrupt_summary",
        3,
        12
      ],
      [
        "arc2_ifg_serdes_interrupt_summary",
        15,
        12
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg1_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc2BlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "arc2_idb_interrupt_summary_mask",
        0,
        3
      ],
      [
        "arc2_ifg_core_interrupt_summary_mask",
        3,
        12
      ],
      [
        "arc2_ifg_serdes_interrupt_summary_mask",
        15,
        12
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg1_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc2BlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "arc2_idb_interrupt_summary_test",
        0,
        3
      ],
      [
        "arc2_ifg_core_interrupt_summary_test",
        3,
        12
      ],
      [
        "arc2_ifg_serdes_interrupt_summary_test",
        15,
        12
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg2": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "Interrupt Summary Register for all blocks for the Arc2 Master Interrupt",
    "fields": [
      [
        "arc2_rxpp_term_interrupt_summary",
        0,
        6
      ],
      [
        "arc2_rxpp_fwd_interrupt_summary",
        6,
        6
      ],
      [
        "arc2_txpp_interrupt_summary",
        12,
        6
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg2_mask": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register masks Arc2BlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "arc2_rxpp_term_interrupt_summary_mask",
        0,
        6
      ],
      [
        "arc2_rxpp_fwd_interrupt_summary_mask",
        6,
        6
      ],
      [
        "arc2_txpp_interrupt_summary_mask",
        12,
        6
      ]
    ]
  },
  "sbif_arc2_blocks_interrupt_summary_reg2_test": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register tests Arc2BlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "arc2_rxpp_term_interrupt_summary_test",
        0,
        6
      ],
      [
        "arc2_rxpp_fwd_interrupt_summary_test",
        6,
        6
      ],
      [
        "arc2_txpp_interrupt_summary_test",
        12,
        6
      ]
    ]
  },
  "sbif_arc2_master_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Arc2 Master Interrupt Register",
    "fields": [
      [
        "arc2_blocks0_int",
        0,
        1
      ],
      [
        "arc2_blocks1_int",
        1,
        1
      ],
      [
        "arc2_blocks2_int",
        2,
        1
      ],
      [
        "arc2_acc_eng_err_int",
        3,
        8
      ],
      [
        "arc2_acc_eng_done_int",
        11,
        8
      ],
      [
        "arc2_packet_dma_err_int",
        19,
        1
      ],
      [
        "arc2_packet_dma_done_int",
        20,
        1
      ],
      [
        "arc2_packet_dma_drop_fc_int",
        21,
        1
      ],
      [
        "arc2_axi_mem_ecc_int",
        22,
        1
      ],
      [
        "arc2_css_mem_ecc_int",
        23,
        1
      ],
      [
        "arc2_sbif_mem_ecc_int",
        24,
        1
      ],
      [
        "arc2_pcie_phy_ln0_int",
        25,
        1
      ],
      [
        "arc2_pcie_phy_ln1_int",
        26,
        1
      ]
    ]
  },
  "sbif_arc2_master_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc2MasterInterruptReg interrupt register",
    "fields": [
      [
        "arc2_blocks0_int_mask",
        0,
        1
      ],
      [
        "arc2_blocks1_int_mask",
        1,
        1
      ],
      [
        "arc2_blocks2_int_mask",
        2,
        1
      ],
      [
        "arc2_acc_eng_err_int_mask",
        3,
        8
      ],
      [
        "arc2_acc_eng_done_int_mask",
        11,
        8
      ],
      [
        "arc2_packet_dma_err_int_mask",
        19,
        1
      ],
      [
        "arc2_packet_dma_done_int_mask",
        20,
        1
      ],
      [
        "arc2_packet_dma_drop_fc_int_mask",
        21,
        1
      ],
      [
        "arc2_axi_mem_ecc_int_mask",
        22,
        1
      ],
      [
        "arc2_css_mem_ecc_int_mask",
        23,
        1
      ],
      [
        "arc2_sbif_mem_ecc_int_mask",
        24,
        1
      ],
      [
        "arc2_pcie_phy_ln0_int_mask",
        25,
        1
      ],
      [
        "arc2_pcie_phy_ln1_int_mask",
        26,
        1
      ]
    ]
  },
  "sbif_arc2_master_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc2MasterInterruptReg interrupt register",
    "fields": [
      [
        "arc2_blocks0_int_test",
        0,
        1
      ],
      [
        "arc2_blocks1_int_test",
        1,
        1
      ],
      [
        "arc2_blocks2_int_test",
        2,
        1
      ],
      [
        "arc2_acc_eng_err_int_test",
        3,
        8
      ],
      [
        "arc2_acc_eng_done_int_test",
        11,
        8
      ],
      [
        "arc2_packet_dma_err_int_test",
        19,
        1
      ],
      [
        "arc2_packet_dma_done_int_test",
        20,
        1
      ],
      [
        "arc2_packet_dma_drop_fc_int_test",
        21,
        1
      ],
      [
        "arc2_axi_mem_ecc_int_test",
        22,
        1
      ],
      [
        "arc2_css_mem_ecc_int_test",
        23,
        1
      ],
      [
        "arc2_sbif_mem_ecc_int_test",
        24,
        1
      ],
      [
        "arc2_pcie_phy_ln0_int_test",
        25,
        1
      ],
      [
        "arc2_pcie_phy_ln1_int_test",
        26,
        1
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg0": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Arc3 Master Interrupt",
    "fields": [
      [
        "arc3_cdb_top_interrupt_summary",
        0,
        1
      ],
      [
        "arc3_counters_interrupt_summary",
        1,
        1
      ],
      [
        "arc3_dram_control_interrupt_summary",
        2,
        1
      ],
      [
        "arc3_egr_interrupt_summary",
        3,
        1
      ],
      [
        "arc3_fdll_interrupt_summary",
        4,
        1
      ],
      [
        "arc3_fllb_interrupt_summary",
        5,
        1
      ],
      [
        "arc3_ics_interrupt_summary",
        6,
        1
      ],
      [
        "arc3_nw_reorder_interrupt_summary",
        7,
        1
      ],
      [
        "arc3_pp_reorder_interrupt_summary",
        8,
        1
      ],
      [
        "arc3_pdoq_interrupt_summary",
        9,
        1
      ],
      [
        "arc3_pdvoq_interrupt_summary",
        10,
        1
      ],
      [
        "arc3_reassembly_interrupt_summary",
        11,
        1
      ],
      [
        "arc3_rx_cgm_interrupt_summary",
        12,
        1
      ],
      [
        "arc3_rx_meter_interrupt_summary",
        13,
        1
      ],
      [
        "arc3_rx_pdr_interrupt_summary",
        14,
        1
      ],
      [
        "arc3_sch_interrupt_summary",
        15,
        1
      ],
      [
        "arc3_sms_interrupt_summary",
        16,
        1
      ],
      [
        "arc3_ts_mon_interrupt_summary",
        17,
        1
      ],
      [
        "arc3_hbmhi_interrupt_summary",
        18,
        1
      ],
      [
        "arc3_hbmlo_interrupt_summary",
        19,
        1
      ],
      [
        "arc3_mmu_interrupt_summary",
        20,
        1
      ],
      [
        "arc3_csms_interrupt_summary",
        21,
        1
      ],
      [
        "arc3_pier_interrupt_summary",
        22,
        1
      ],
      [
        "arc3_frm_interrupt_summary",
        23,
        1
      ],
      [
        "arc3_fte_interrupt_summary",
        24,
        1
      ],
      [
        "arc3_npu_host_interrupt_summary",
        25,
        1
      ],
      [
        "arc3_mrb_interrupt_summary",
        26,
        1
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg0_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc3BlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "arc3_cdb_top_interrupt_summary_mask",
        0,
        1
      ],
      [
        "arc3_counters_interrupt_summary_mask",
        1,
        1
      ],
      [
        "arc3_dram_control_interrupt_summary_mask",
        2,
        1
      ],
      [
        "arc3_egr_interrupt_summary_mask",
        3,
        1
      ],
      [
        "arc3_fdll_interrupt_summary_mask",
        4,
        1
      ],
      [
        "arc3_fllb_interrupt_summary_mask",
        5,
        1
      ],
      [
        "arc3_ics_interrupt_summary_mask",
        6,
        1
      ],
      [
        "arc3_nw_reorder_interrupt_summary_mask",
        7,
        1
      ],
      [
        "arc3_pp_reorder_interrupt_summary_mask",
        8,
        1
      ],
      [
        "arc3_pdoq_interrupt_summary_mask",
        9,
        1
      ],
      [
        "arc3_pdvoq_interrupt_summary_mask",
        10,
        1
      ],
      [
        "arc3_reassembly_interrupt_summary_mask",
        11,
        1
      ],
      [
        "arc3_rx_cgm_interrupt_summary_mask",
        12,
        1
      ],
      [
        "arc3_rx_meter_interrupt_summary_mask",
        13,
        1
      ],
      [
        "arc3_rx_pdr_interrupt_summary_mask",
        14,
        1
      ],
      [
        "arc3_sch_interrupt_summary_mask",
        15,
        1
      ],
      [
        "arc3_sms_interrupt_summary_mask",
        16,
        1
      ],
      [
        "arc3_ts_mon_interrupt_summary_mask",
        17,
        1
      ],
      [
        "arc3_hbmhi_interrupt_summary_mask",
        18,
        1
      ],
      [
        "arc3_hbmlo_interrupt_summary_mask",
        19,
        1
      ],
      [
        "arc3_mmu_interrupt_summary_mask",
        20,
        1
      ],
      [
        "arc3_csms_interrupt_summary_mask",
        21,
        1
      ],
      [
        "arc3_pier_interrupt_summary_mask",
        22,
        1
      ],
      [
        "arc3_frm_interrupt_summary_mask",
        23,
        1
      ],
      [
        "arc3_fte_interrupt_summary_mask",
        24,
        1
      ],
      [
        "arc3_npu_host_interrupt_summary_mask",
        25,
        1
      ],
      [
        "arc3_mrb_interrupt_summary_mask",
        26,
        1
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg0_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc3BlocksInterruptSummaryReg0 interrupt register",
    "fields": [
      [
        "arc3_cdb_top_interrupt_summary_test",
        0,
        1
      ],
      [
        "arc3_counters_interrupt_summary_test",
        1,
        1
      ],
      [
        "arc3_dram_control_interrupt_summary_test",
        2,
        1
      ],
      [
        "arc3_egr_interrupt_summary_test",
        3,
        1
      ],
      [
        "arc3_fdll_interrupt_summary_test",
        4,
        1
      ],
      [
        "arc3_fllb_interrupt_summary_test",
        5,
        1
      ],
      [
        "arc3_ics_interrupt_summary_test",
        6,
        1
      ],
      [
        "arc3_nw_reorder_interrupt_summary_test",
        7,
        1
      ],
      [
        "arc3_pp_reorder_interrupt_summary_test",
        8,
        1
      ],
      [
        "arc3_pdoq_interrupt_summary_test",
        9,
        1
      ],
      [
        "arc3_pdvoq_interrupt_summary_test",
        10,
        1
      ],
      [
        "arc3_reassembly_interrupt_summary_test",
        11,
        1
      ],
      [
        "arc3_rx_cgm_interrupt_summary_test",
        12,
        1
      ],
      [
        "arc3_rx_meter_interrupt_summary_test",
        13,
        1
      ],
      [
        "arc3_rx_pdr_interrupt_summary_test",
        14,
        1
      ],
      [
        "arc3_sch_interrupt_summary_test",
        15,
        1
      ],
      [
        "arc3_sms_interrupt_summary_test",
        16,
        1
      ],
      [
        "arc3_ts_mon_interrupt_summary_test",
        17,
        1
      ],
      [
        "arc3_hbmhi_interrupt_summary_test",
        18,
        1
      ],
      [
        "arc3_hbmlo_interrupt_summary_test",
        19,
        1
      ],
      [
        "arc3_mmu_interrupt_summary_test",
        20,
        1
      ],
      [
        "arc3_csms_interrupt_summary_test",
        21,
        1
      ],
      [
        "arc3_pier_interrupt_summary_test",
        22,
        1
      ],
      [
        "arc3_frm_interrupt_summary_test",
        23,
        1
      ],
      [
        "arc3_fte_interrupt_summary_test",
        24,
        1
      ],
      [
        "arc3_npu_host_interrupt_summary_test",
        25,
        1
      ],
      [
        "arc3_mrb_interrupt_summary_test",
        26,
        1
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg1": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Interrupt Summary Register for all blocks for the Arc3 Master Interrupt",
    "fields": [
      [
        "arc3_idb_interrupt_summary",
        0,
        3
      ],
      [
        "arc3_ifg_core_interrupt_summary",
        3,
        12
      ],
      [
        "arc3_ifg_serdes_interrupt_summary",
        15,
        12
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg1_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc3BlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "arc3_idb_interrupt_summary_mask",
        0,
        3
      ],
      [
        "arc3_ifg_core_interrupt_summary_mask",
        3,
        12
      ],
      [
        "arc3_ifg_serdes_interrupt_summary_mask",
        15,
        12
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg1_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc3BlocksInterruptSummaryReg1 interrupt register",
    "fields": [
      [
        "arc3_idb_interrupt_summary_test",
        0,
        3
      ],
      [
        "arc3_ifg_core_interrupt_summary_test",
        3,
        12
      ],
      [
        "arc3_ifg_serdes_interrupt_summary_test",
        15,
        12
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg2": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "Interrupt Summary Register for all blocks for the Arc3 Master Interrupt",
    "fields": [
      [
        "arc3_rxpp_term_interrupt_summary",
        0,
        6
      ],
      [
        "arc3_rxpp_fwd_interrupt_summary",
        6,
        6
      ],
      [
        "arc3_txpp_interrupt_summary",
        12,
        6
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg2_mask": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register masks Arc3BlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "arc3_rxpp_term_interrupt_summary_mask",
        0,
        6
      ],
      [
        "arc3_rxpp_fwd_interrupt_summary_mask",
        6,
        6
      ],
      [
        "arc3_txpp_interrupt_summary_mask",
        12,
        6
      ]
    ]
  },
  "sbif_arc3_blocks_interrupt_summary_reg2_test": {
    "type": "register",
    "block": "sbif",
    "width": 18,
    "desc": "This register tests Arc3BlocksInterruptSummaryReg2 interrupt register",
    "fields": [
      [
        "arc3_rxpp_term_interrupt_summary_test",
        0,
        6
      ],
      [
        "arc3_rxpp_fwd_interrupt_summary_test",
        6,
        6
      ],
      [
        "arc3_txpp_interrupt_summary_test",
        12,
        6
      ]
    ]
  },
  "sbif_arc3_master_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "Arc3 Master Interrupt Register",
    "fields": [
      [
        "arc3_blocks0_int",
        0,
        1
      ],
      [
        "arc3_blocks1_int",
        1,
        1
      ],
      [
        "arc3_blocks2_int",
        2,
        1
      ],
      [
        "arc3_acc_eng_err_int",
        3,
        8
      ],
      [
        "arc3_acc_eng_done_int",
        11,
        8
      ],
      [
        "arc3_packet_dma_err_int",
        19,
        1
      ],
      [
        "arc3_packet_dma_done_int",
        20,
        1
      ],
      [
        "arc3_packet_dma_drop_fc_int",
        21,
        1
      ],
      [
        "arc3_axi_mem_ecc_int",
        22,
        1
      ],
      [
        "arc3_css_mem_ecc_int",
        23,
        1
      ],
      [
        "arc3_sbif_mem_ecc_int",
        24,
        1
      ],
      [
        "arc3_pcie_phy_ln0_int",
        25,
        1
      ],
      [
        "arc3_pcie_phy_ln1_int",
        26,
        1
      ]
    ]
  },
  "sbif_arc3_master_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register masks Arc3MasterInterruptReg interrupt register",
    "fields": [
      [
        "arc3_blocks0_int_mask",
        0,
        1
      ],
      [
        "arc3_blocks1_int_mask",
        1,
        1
      ],
      [
        "arc3_blocks2_int_mask",
        2,
        1
      ],
      [
        "arc3_acc_eng_err_int_mask",
        3,
        8
      ],
      [
        "arc3_acc_eng_done_int_mask",
        11,
        8
      ],
      [
        "arc3_packet_dma_err_int_mask",
        19,
        1
      ],
      [
        "arc3_packet_dma_done_int_mask",
        20,
        1
      ],
      [
        "arc3_packet_dma_drop_fc_int_mask",
        21,
        1
      ],
      [
        "arc3_axi_mem_ecc_int_mask",
        22,
        1
      ],
      [
        "arc3_css_mem_ecc_int_mask",
        23,
        1
      ],
      [
        "arc3_sbif_mem_ecc_int_mask",
        24,
        1
      ],
      [
        "arc3_pcie_phy_ln0_int_mask",
        25,
        1
      ],
      [
        "arc3_pcie_phy_ln1_int_mask",
        26,
        1
      ]
    ]
  },
  "sbif_arc3_master_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 27,
    "desc": "This register tests Arc3MasterInterruptReg interrupt register",
    "fields": [
      [
        "arc3_blocks0_int_test",
        0,
        1
      ],
      [
        "arc3_blocks1_int_test",
        1,
        1
      ],
      [
        "arc3_blocks2_int_test",
        2,
        1
      ],
      [
        "arc3_acc_eng_err_int_test",
        3,
        8
      ],
      [
        "arc3_acc_eng_done_int_test",
        11,
        8
      ],
      [
        "arc3_packet_dma_err_int_test",
        19,
        1
      ],
      [
        "arc3_packet_dma_done_int_test",
        20,
        1
      ],
      [
        "arc3_packet_dma_drop_fc_int_test",
        21,
        1
      ],
      [
        "arc3_axi_mem_ecc_int_test",
        22,
        1
      ],
      [
        "arc3_css_mem_ecc_int_test",
        23,
        1
      ],
      [
        "arc3_sbif_mem_ecc_int_test",
        24,
        1
      ],
      [
        "arc3_pcie_phy_ln0_int_test",
        25,
        1
      ],
      [
        "arc3_pcie_phy_ln1_int_test",
        26,
        1
      ]
    ]
  },
  "sbif_mbist_configuration0": {
    "type": "register",
    "block": "sbif",
    "width": 30,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ]
    ]
  },
  "sbif_mbist_configuration1": {
    "type": "register",
    "block": "sbif",
    "width": 32,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sads2_p_rmeb",
        0,
        1
      ],
      [
        "sads2_p_rmb",
        1,
        4
      ],
      [
        "sasr1_p_rme",
        5,
        1
      ],
      [
        "sasr1_p_rm",
        6,
        4
      ],
      [
        "sass1_p_rme",
        10,
        1
      ],
      [
        "sass1_p_rm",
        11,
        4
      ],
      [
        "sass2_p_rmea",
        15,
        1
      ],
      [
        "sass2_p_rma",
        16,
        4
      ],
      [
        "sass2_p_rmeb",
        20,
        1
      ],
      [
        "sass2_p_rmb",
        21,
        4
      ],
      [
        "sasu2_p_rme",
        25,
        1
      ],
      [
        "sasu2_p_rm",
        26,
        4
      ],
      [
        "sads2_p_ra",
        30,
        2
      ]
    ]
  },
  "sbif_mbist_configuration2": {
    "type": "register",
    "block": "sbif",
    "width": 11,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sadu1_p_rme",
        0,
        1
      ],
      [
        "sadu1_p_rm",
        1,
        4
      ],
      [
        "sadu1_p_wa",
        5,
        3
      ],
      [
        "sadu1_p_wpulse",
        8,
        3
      ]
    ]
  },
  "sbif_obs_clk_cfg_reg": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "Observability clock configuration register",
    "fields": [
      [
        "obs_clk_sel",
        0,
        2
      ],
      [
        "obs_clk_div",
        2,
        6
      ]
    ]
  },
  "sbif_css_mem_even_high_ecc_err_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 19,
    "desc": "ECC Error Address capture register",
    "fields": [
      [
        "css_mem_even_high_ecc_err_addr",
        0,
        19
      ]
    ]
  },
  "sbif_css_mem_even_low_ecc_err_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 19,
    "desc": "ECC Error Address capture register",
    "fields": [
      [
        "css_mem_even_low_ecc_err_addr",
        0,
        19
      ]
    ]
  },
  "sbif_css_mem_odd_high_ecc_err_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 19,
    "desc": "ECC Error Address capture register",
    "fields": [
      [
        "css_mem_odd_high_ecc_err_addr",
        0,
        19
      ]
    ]
  },
  "sbif_css_mem_odd_low_ecc_err_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 19,
    "desc": "ECC Error Address capture register",
    "fields": [
      [
        "css_mem_odd_low_ecc_err_addr",
        0,
        19
      ]
    ]
  },
  "sbif_css_mem_ecc_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "CSS memory ECC error interrupt register",
    "fields": [
      [
        "css_mem_even_high_ecc1b_err_interrupt",
        0,
        1
      ],
      [
        "css_mem_even_high_ecc2b_err_interrupt",
        1,
        1
      ],
      [
        "css_mem_even_low_ecc1b_err_interrupt",
        2,
        1
      ],
      [
        "css_mem_even_low_ecc2b_err_interrupt",
        3,
        1
      ],
      [
        "css_mem_odd_high_ecc1b_err_interrupt",
        4,
        1
      ],
      [
        "css_mem_odd_high_ecc2b_err_interrupt",
        5,
        1
      ],
      [
        "css_mem_odd_low_ecc1b_err_interrupt",
        6,
        1
      ],
      [
        "css_mem_odd_low_ecc2b_err_interrupt",
        7,
        1
      ]
    ]
  },
  "sbif_css_mem_ecc_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "This register masks CssMemEccInterruptReg interrupt register",
    "fields": [
      [
        "css_mem_even_high_ecc1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "css_mem_even_high_ecc2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "css_mem_even_low_ecc1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "css_mem_even_low_ecc2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "css_mem_odd_high_ecc1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "css_mem_odd_high_ecc2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "css_mem_odd_low_ecc1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "css_mem_odd_low_ecc2b_err_interrupt_mask",
        7,
        1
      ]
    ]
  },
  "sbif_css_mem_ecc_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "This register tests CssMemEccInterruptReg interrupt register",
    "fields": [
      [
        "css_mem_even_high_ecc1b_err_interrupt_test",
        0,
        1
      ],
      [
        "css_mem_even_high_ecc2b_err_interrupt_test",
        1,
        1
      ],
      [
        "css_mem_even_low_ecc1b_err_interrupt_test",
        2,
        1
      ],
      [
        "css_mem_even_low_ecc2b_err_interrupt_test",
        3,
        1
      ],
      [
        "css_mem_odd_high_ecc1b_err_interrupt_test",
        4,
        1
      ],
      [
        "css_mem_odd_high_ecc2b_err_interrupt_test",
        5,
        1
      ],
      [
        "css_mem_odd_low_ecc1b_err_interrupt_test",
        6,
        1
      ],
      [
        "css_mem_odd_low_ecc2b_err_interrupt_test",
        7,
        1
      ]
    ]
  },
  "sbif_axi_mem_ecc_err_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 30,
    "desc": "ECC Error Address capture register",
    "fields": [
      [
        "axi_mem_mstr0_mem0_ecc_err_addr",
        0,
        7
      ],
      [
        "axi_mem_mstr0_mem1_ecc_err_addr",
        7,
        7
      ],
      [
        "axi_mem_mstr1_mem0_ecc_err_addr",
        14,
        8
      ],
      [
        "axi_mem_mstr1_mem1_ecc_err_addr",
        22,
        8
      ]
    ]
  },
  "sbif_axi_mem_ecc_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "CSS memory ECC error interrupt register",
    "fields": [
      [
        "axi_mem_mstr0_mem0_ecc1b_err_interrupt",
        0,
        1
      ],
      [
        "axi_mem_mstr0_mem0_ecc2b_err_interrupt",
        1,
        1
      ],
      [
        "axi_mem_mstr0_mem1_ecc1b_err_interrupt",
        2,
        1
      ],
      [
        "axi_mem_mstr0_mem1_ecc2b_err_interrupt",
        3,
        1
      ],
      [
        "axi_mem_mstr1_mem0_ecc1b_err_interrupt",
        4,
        1
      ],
      [
        "axi_mem_mstr1_mem0_ecc2b_err_interrupt",
        5,
        1
      ],
      [
        "axi_mem_mstr1_mem1_ecc1b_err_interrupt",
        6,
        1
      ],
      [
        "axi_mem_mstr1_mem1_ecc2b_err_interrupt",
        7,
        1
      ]
    ]
  },
  "sbif_axi_mem_ecc_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "This register masks AxiMemEccInterruptReg interrupt register",
    "fields": [
      [
        "axi_mem_mstr0_mem0_ecc1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "axi_mem_mstr0_mem0_ecc2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "axi_mem_mstr0_mem1_ecc1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "axi_mem_mstr0_mem1_ecc2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "axi_mem_mstr1_mem0_ecc1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "axi_mem_mstr1_mem0_ecc2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "axi_mem_mstr1_mem1_ecc1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "axi_mem_mstr1_mem1_ecc2b_err_interrupt_mask",
        7,
        1
      ]
    ]
  },
  "sbif_axi_mem_ecc_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 8,
    "desc": "This register tests AxiMemEccInterruptReg interrupt register",
    "fields": [
      [
        "axi_mem_mstr0_mem0_ecc1b_err_interrupt_test",
        0,
        1
      ],
      [
        "axi_mem_mstr0_mem0_ecc2b_err_interrupt_test",
        1,
        1
      ],
      [
        "axi_mem_mstr0_mem1_ecc1b_err_interrupt_test",
        2,
        1
      ],
      [
        "axi_mem_mstr0_mem1_ecc2b_err_interrupt_test",
        3,
        1
      ],
      [
        "axi_mem_mstr1_mem0_ecc1b_err_interrupt_test",
        4,
        1
      ],
      [
        "axi_mem_mstr1_mem0_ecc2b_err_interrupt_test",
        5,
        1
      ],
      [
        "axi_mem_mstr1_mem1_ecc1b_err_interrupt_test",
        6,
        1
      ],
      [
        "axi_mem_mstr1_mem1_ecc2b_err_interrupt_test",
        7,
        1
      ]
    ]
  },
  "sbif_sbif_mem_ecc_interrupt_reg": {
    "type": "register",
    "block": "sbif",
    "width": 10,
    "desc": "Access Engine mems, CIF Chain sync mems and PDE memory ECC error interrupt register",
    "fields": [
      [
        "ae_command_mem_ecc1b_err_interrupt",
        0,
        1
      ],
      [
        "ae_command_mem_ecc2b_err_interrupt",
        1,
        1
      ],
      [
        "ae_data_mem_ecc1b_err_interrupt",
        2,
        1
      ],
      [
        "ae_data_mem_ecc2b_err_interrupt",
        3,
        1
      ],
      [
        "cif_sync_in_mem_ecc1b_err_interrupt",
        4,
        1
      ],
      [
        "cif_sync_in_mem_ecc2b_err_interrupt",
        5,
        1
      ],
      [
        "cif_sync_out_mem_ecc1b_err_interrupt",
        6,
        1
      ],
      [
        "cif_sync_out_mem_ecc2b_err_interrupt",
        7,
        1
      ],
      [
        "pde_mem_ecc1b_err_interrupt",
        8,
        1
      ],
      [
        "pde_mem_ecc2b_err_interrupt",
        9,
        1
      ]
    ]
  },
  "sbif_sbif_mem_ecc_interrupt_reg_mask": {
    "type": "register",
    "block": "sbif",
    "width": 10,
    "desc": "This register masks SbifMemEccInterruptReg interrupt register",
    "fields": [
      [
        "ae_command_mem_ecc1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "ae_command_mem_ecc2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "ae_data_mem_ecc1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "ae_data_mem_ecc2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cif_sync_in_mem_ecc1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "cif_sync_in_mem_ecc2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "cif_sync_out_mem_ecc1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "cif_sync_out_mem_ecc2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "pde_mem_ecc1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "pde_mem_ecc2b_err_interrupt_mask",
        9,
        1
      ]
    ]
  },
  "sbif_sbif_mem_ecc_interrupt_reg_test": {
    "type": "register",
    "block": "sbif",
    "width": 10,
    "desc": "This register tests SbifMemEccInterruptReg interrupt register",
    "fields": [
      [
        "ae_command_mem_ecc1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ae_command_mem_ecc2b_err_interrupt_test",
        1,
        1
      ],
      [
        "ae_data_mem_ecc1b_err_interrupt_test",
        2,
        1
      ],
      [
        "ae_data_mem_ecc2b_err_interrupt_test",
        3,
        1
      ],
      [
        "cif_sync_in_mem_ecc1b_err_interrupt_test",
        4,
        1
      ],
      [
        "cif_sync_in_mem_ecc2b_err_interrupt_test",
        5,
        1
      ],
      [
        "cif_sync_out_mem_ecc1b_err_interrupt_test",
        6,
        1
      ],
      [
        "cif_sync_out_mem_ecc2b_err_interrupt_test",
        7,
        1
      ],
      [
        "pde_mem_ecc1b_err_interrupt_test",
        8,
        1
      ],
      [
        "pde_mem_ecc2b_err_interrupt_test",
        9,
        1
      ]
    ]
  },
  "sbif_ae_mem_ecc_err_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 24,
    "desc": "ECC Error Address capture register",
    "fields": [
      [
        "ae_command_mem_ecc_err_addr",
        0,
        12
      ],
      [
        "ae_data_mem_ecc_err_addr",
        12,
        12
      ]
    ]
  },
  "sbif_cif_sync_mem_ecc_err_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 22,
    "desc": "ECC Error Address capture register",
    "fields": [
      [
        "cif_sync_in_mem_ecc_err_addr",
        0,
        11
      ],
      [
        "cif_sync_out_mem_ecc_err_addr",
        11,
        11
      ]
    ]
  },
  "sbif_pde_mem_ecc_err_addr_reg": {
    "type": "register",
    "block": "sbif",
    "width": 10,
    "desc": "ECC Error Address capture register",
    "fields": [
      [
        "pde_mem_ecc_err_addr",
        0,
        10
      ]
    ]
  },
  "sbif_css_mem_even": {
    "type": "memory",
    "block": "sbif",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "css_mem_field",
        0,
        32
      ]
    ]
  },
  "sbif_css_mem_odd": {
    "type": "memory",
    "block": "sbif",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "css_mem_field",
        0,
        32
      ]
    ]
  },
  "sbif_access_engine_data_mem": {
    "type": "memory",
    "block": "sbif",
    "width": 32,
    "desc": "Access Engine Data Memory",
    "fields": [
      [
        "access_engine_data_mem_field",
        0,
        32
      ]
    ]
  },
  "sbif_access_engine_command_mem": {
    "type": "memory",
    "block": "sbif",
    "width": 32,
    "desc": "Access Engine Command Memory",
    "fields": [
      [
        "access_engine_command_mem_field",
        0,
        32
      ]
    ]
  },
  "dvoq_interrupt_register": {
    "type": "register",
    "block": "dvoq",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "slave_interrupts_summary",
        1,
        1
      ]
    ]
  },
  "dvoq_mem_protect_interrupt": {
    "type": "register",
    "block": "dvoq",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "dvoq_mem_protect_interrupt_test": {
    "type": "register",
    "block": "dvoq",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "dvoq_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "dvoq",
    "width": 19,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "pdm0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pdm1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "pdm2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "pdm3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "pdm4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "pdm5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "pdm6_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pdm7_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "plm0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "plm1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "plm2_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "plm3_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "plm4_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "plm5_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "plm6_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "plm7_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "wpm_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "rrpm_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "qsm_ecc_1b_err_interrupt_mask",
        18,
        1
      ]
    ]
  },
  "dvoq_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "dvoq",
    "width": 19,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "pdm0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pdm1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "pdm2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "pdm3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "pdm4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "pdm5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "pdm6_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pdm7_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "plm0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "plm1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "plm2_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "plm3_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "plm4_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "plm5_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "plm6_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "plm7_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "wpm_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "rrpm_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "qsm_ecc_2b_err_interrupt_mask",
        18,
        1
      ]
    ]
  },
  "dvoq_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "dvoq",
    "width": 19,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "pdm0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "pdm1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "pdm2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "pdm3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "pdm4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "pdm5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "pdm6_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "pdm7_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "plm0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "plm1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "plm2_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "plm3_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "plm4_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "plm5_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "plm6_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "plm7_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "wpm_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "rrpm_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "qsm_ecc_1b_err_initiate",
        18,
        1
      ]
    ]
  },
  "dvoq_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "dvoq",
    "width": 19,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "pdm0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "pdm1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "pdm2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "pdm3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "pdm4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "pdm5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "pdm6_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "pdm7_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "plm0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "plm1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "plm2_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "plm3_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "plm4_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "plm5_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "plm6_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "plm7_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "wpm_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "rrpm_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "qsm_ecc_2b_err_initiate",
        18,
        1
      ]
    ]
  },
  "dvoq_mem_protect_err_status": {
    "type": "register",
    "block": "dvoq",
    "width": 19,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "pdm0_err_int",
        0,
        1
      ],
      [
        "pdm1_err_int",
        1,
        1
      ],
      [
        "pdm2_err_int",
        2,
        1
      ],
      [
        "pdm3_err_int",
        3,
        1
      ],
      [
        "pdm4_err_int",
        4,
        1
      ],
      [
        "pdm5_err_int",
        5,
        1
      ],
      [
        "pdm6_err_int",
        6,
        1
      ],
      [
        "pdm7_err_int",
        7,
        1
      ],
      [
        "plm0_err_int",
        8,
        1
      ],
      [
        "plm1_err_int",
        9,
        1
      ],
      [
        "plm2_err_int",
        10,
        1
      ],
      [
        "plm3_err_int",
        11,
        1
      ],
      [
        "plm4_err_int",
        12,
        1
      ],
      [
        "plm5_err_int",
        13,
        1
      ],
      [
        "plm6_err_int",
        14,
        1
      ],
      [
        "plm7_err_int",
        15,
        1
      ],
      [
        "wpm_err_int",
        16,
        1
      ],
      [
        "rrpm_err_int",
        17,
        1
      ],
      [
        "qsm_err_int",
        18,
        1
      ]
    ]
  },
  "dvoq_selected_ser_error_info": {
    "type": "register",
    "block": "dvoq",
    "width": 17,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        15
      ],
      [
        "mem_err_type",
        15,
        2
      ]
    ]
  },
  "dvoq_ser_error_debug_configuration": {
    "type": "register",
    "block": "dvoq",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "dvoq_ecc_1b_err_debug": {
    "type": "register",
    "block": "dvoq",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "dvoq_ecc_2b_err_debug": {
    "type": "register",
    "block": "dvoq",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "dvoq_counter_timer": {
    "type": "register",
    "block": "dvoq",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "dvoq_counter_timer_trigger_reg": {
    "type": "register",
    "block": "dvoq",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "dvoq_memory_access_timeout": {
    "type": "register",
    "block": "dvoq",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "dvoq_broadcast_config_reg": {
    "type": "register",
    "block": "dvoq",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "dvoq_memory_prot_bypass": {
    "type": "register",
    "block": "dvoq",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "dvoq_soft_reset_configuration": {
    "type": "register",
    "block": "dvoq",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "dvoq_mbist_configuration": {
    "type": "register",
    "block": "dvoq",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "dvoq_power_down_configuration": {
    "type": "register",
    "block": "dvoq",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "dvoq_spare_reg": {
    "type": "register",
    "block": "dvoq",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "dvoq_pmro_ctrl": {
    "type": "register",
    "block": "dvoq",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "dvoq_pmro_status": {
    "type": "register",
    "block": "dvoq",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "dvoq_mirror_bus_conf_reg": {
    "type": "register",
    "block": "dvoq",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "dvoq_mirror_bus_status": {
    "type": "register",
    "block": "dvoq",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "dvoq_device_time_offset_cfg": {
    "type": "register",
    "block": "dvoq",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "dvoq_slave_interrupts": {
    "type": "register",
    "block": "dvoq",
    "width": 2,
    "desc": "Slave summary summation register",
    "fields": [
      [
        "hmc_cgm",
        0,
        1
      ],
      [
        "dics",
        1,
        1
      ]
    ]
  },
  "dvoq_slave_interrupts_mask": {
    "type": "register",
    "block": "dvoq",
    "width": 2,
    "desc": "This register masks SlaveInterrupts interrupt register",
    "fields": [
      [
        "hmc_cgm_mask",
        0,
        1
      ],
      [
        "dics_mask",
        1,
        1
      ]
    ]
  },
  "dvoq_slave_interrupts_test": {
    "type": "register",
    "block": "dvoq",
    "width": 2,
    "desc": "This register tests SlaveInterrupts interrupt register",
    "fields": [
      [
        "hmc_cgm_test",
        0,
        1
      ],
      [
        "dics_test",
        1,
        1
      ]
    ]
  },
  "dvoq_init_active": {
    "type": "register",
    "block": "dvoq",
    "width": 4,
    "desc": "Mem Init Register",
    "fields": [
      [
        "mem_init_active",
        0,
        4
      ]
    ]
  },
  "dvoq_used_bytes_config_register": {
    "type": "register",
    "block": "dvoq",
    "width": 28,
    "desc": "Decoding UsedBytes field in Buffer Descriptor",
    "fields": [
      [
        "size_when_half",
        0,
        14
      ],
      [
        "size_when_full",
        14,
        14
      ]
    ]
  },
  "dvoq_encap_compensation_config_register": {
    "type": "register",
    "block": "dvoq",
    "width": 99,
    "desc": "Encapsulation Compensation configurations. Values are signed numbers, Must be set from most negative to most positive",
    "fields": [
      [
        "quantization_config_value1",
        0,
        14
      ],
      [
        "quantization_config_value2",
        14,
        14
      ],
      [
        "quantization_config_value3",
        28,
        14
      ],
      [
        "quantization_config_value4",
        42,
        14
      ],
      [
        "quantization_config_value5",
        56,
        14
      ],
      [
        "quantization_config_value6",
        70,
        14
      ],
      [
        "quantization_config_value7",
        84,
        14
      ],
      [
        "quantization_config_enable",
        98,
        1
      ]
    ]
  },
  "dvoq_debug_pd_field_value_cfg": {
    "type": "register",
    "block": "dvoq",
    "width": 76,
    "desc": "PD debugger",
    "fields": [
      [
        "debug_pd_field_value",
        0,
        76
      ]
    ]
  },
  "dvoq_debug_pd_field_mask_cfg": {
    "type": "register",
    "block": "dvoq",
    "width": 76,
    "desc": "PD debugger",
    "fields": [
      [
        "debug_pd_field_mask",
        0,
        76
      ]
    ]
  },
  "dvoq_debug_pd_field_status": {
    "type": "register",
    "block": "dvoq",
    "width": 96,
    "desc": "PD debug counters",
    "fields": [
      [
        "debug_pd_field_cnt",
        0,
        32
      ],
      [
        "debug_pd_total_pd_cnt",
        32,
        32
      ],
      [
        "debug_pd_total_byte_cnt",
        64,
        32
      ]
    ]
  },
  "dvoq_pdm": {
    "type": "memory",
    "block": "dvoq",
    "width": 84,
    "desc": "Descriptor memory, entry per packet descriptor, initialization to 0 required. Write every en-queue command, read every read command, Single port memory",
    "fields": [
      [
        "num_valid_bytes0",
        0,
        13
      ],
      [
        "num_of_sops0",
        13,
        5
      ],
      [
        "num_comp_bytes0",
        18,
        3
      ],
      [
        "num_valid_bytes1",
        21,
        13
      ],
      [
        "num_of_sops1",
        34,
        5
      ],
      [
        "num_comp_bytes1",
        39,
        3
      ],
      [
        "num_valid_bytes2",
        42,
        13
      ],
      [
        "num_of_sops2",
        55,
        5
      ],
      [
        "num_comp_bytes2",
        60,
        3
      ],
      [
        "num_valid_bytes3",
        63,
        13
      ],
      [
        "num_of_sops3",
        76,
        5
      ],
      [
        "num_comp_bytes3",
        81,
        3
      ]
    ]
  },
  "dvoq_plm": {
    "type": "memory",
    "block": "dvoq",
    "width": 80,
    "desc": "Packet Link Memory, entry per packet descriptor. initialization required. Write every en-queue command, read every read command, Single port memory.",
    "fields": [
      [
        "buffer_address0",
        0,
        20
      ],
      [
        "buffer_address1",
        20,
        20
      ],
      [
        "buffer_address2",
        40,
        20
      ],
      [
        "buffer_address3",
        60,
        20
      ]
    ]
  },
  "dvoq_wpm": {
    "type": "memory",
    "block": "dvoq",
    "width": 32,
    "desc": "Write Pointer memory, entry per queue, no initilization required.  Read Modify Write every en-Queue command, Two Port memory.",
    "fields": [
      [
        "wpm_data",
        0,
        20
      ],
      [
        "residue_value",
        20,
        12
      ]
    ]
  },
  "dvoq_rrpm": {
    "type": "memory",
    "block": "dvoq",
    "width": 20,
    "desc": "Read request pointer memory, entry per queue, each entry is initialized to the reserved invalid value 20'hfffff. Read Modify Write every read request command, also writen from enq pipe if queue is empty.  Two port memory. ",
    "fields": [
      [
        "rrpm_data",
        0,
        20
      ]
    ]
  },
  "dvoq_qsm": {
    "type": "memory",
    "block": "dvoq",
    "width": 68,
    "desc": "Queue Size memory, entry per queue, size of the queue in buffers, bytes and buffers ending in eop. Initialized to zeros. Read Modify Write every en-queue and read command, Two port memory.",
    "fields": [
      [
        "dcm",
        0,
        19
      ],
      [
        "qsize_bytes",
        19,
        30
      ],
      [
        "qsize_eob",
        49,
        19
      ]
    ]
  },
  "fdll_interrupt_register": {
    "type": "register",
    "block": "fdll",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_summary",
        1,
        1
      ]
    ]
  },
  "fdll_mem_protect_interrupt": {
    "type": "register",
    "block": "fdll",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "fdll_mem_protect_interrupt_test": {
    "type": "register",
    "block": "fdll",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "fdll_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fdll",
    "width": 10,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "fdll_fbm_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "sms_buffer_ptr_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "user_count_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "emdb_verifier0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "emdb_verifier1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "emdb_verifier2_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "emdb_verifier3_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "emdb_verifier4_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "emdb_verifier5_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "emdb_verifier6_ecc_1b_err_interrupt_mask",
        9,
        1
      ]
    ]
  },
  "fdll_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fdll",
    "width": 10,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "fdll_fbm_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "sms_buffer_ptr_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "user_count_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "emdb_verifier0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "emdb_verifier1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "emdb_verifier2_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "emdb_verifier3_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "emdb_verifier4_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "emdb_verifier5_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "emdb_verifier6_ecc_2b_err_interrupt_mask",
        9,
        1
      ]
    ]
  },
  "fdll_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "fdll",
    "width": 10,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "fdll_fbm_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "sms_buffer_ptr_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "user_count_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "emdb_verifier0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "emdb_verifier1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "emdb_verifier2_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "emdb_verifier3_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "emdb_verifier4_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "emdb_verifier5_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "emdb_verifier6_ecc_1b_err_initiate",
        9,
        1
      ]
    ]
  },
  "fdll_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "fdll",
    "width": 10,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "fdll_fbm_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "sms_buffer_ptr_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "user_count_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "emdb_verifier0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "emdb_verifier1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "emdb_verifier2_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "emdb_verifier3_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "emdb_verifier4_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "emdb_verifier5_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "emdb_verifier6_ecc_2b_err_initiate",
        9,
        1
      ]
    ]
  },
  "fdll_mem_protect_err_status": {
    "type": "register",
    "block": "fdll",
    "width": 10,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "fdll_fbm_err_int",
        0,
        1
      ],
      [
        "sms_buffer_ptr_err_int",
        1,
        1
      ],
      [
        "user_count_err_int",
        2,
        1
      ],
      [
        "emdb_verifier0_err_int",
        3,
        1
      ],
      [
        "emdb_verifier1_err_int",
        4,
        1
      ],
      [
        "emdb_verifier2_err_int",
        5,
        1
      ],
      [
        "emdb_verifier3_err_int",
        6,
        1
      ],
      [
        "emdb_verifier4_err_int",
        7,
        1
      ],
      [
        "emdb_verifier5_err_int",
        8,
        1
      ],
      [
        "emdb_verifier6_err_int",
        9,
        1
      ]
    ]
  },
  "fdll_selected_ser_error_info": {
    "type": "register",
    "block": "fdll",
    "width": 18,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        16
      ],
      [
        "mem_err_type",
        16,
        2
      ]
    ]
  },
  "fdll_ser_error_debug_configuration": {
    "type": "register",
    "block": "fdll",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "fdll_ecc_1b_err_debug": {
    "type": "register",
    "block": "fdll",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "fdll_ecc_2b_err_debug": {
    "type": "register",
    "block": "fdll",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "fdll_tcam_scan_period_cfg": {
    "type": "register",
    "block": "fdll",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "fdll_counter_timer": {
    "type": "register",
    "block": "fdll",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "fdll_counter_timer_trigger_reg": {
    "type": "register",
    "block": "fdll",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "fdll_memory_access_timeout": {
    "type": "register",
    "block": "fdll",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "fdll_broadcast_config_reg": {
    "type": "register",
    "block": "fdll",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "fdll_memory_prot_bypass": {
    "type": "register",
    "block": "fdll",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "fdll_soft_reset_configuration": {
    "type": "register",
    "block": "fdll",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "fdll_mbist_configuration": {
    "type": "register",
    "block": "fdll",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "fdll_power_down_configuration": {
    "type": "register",
    "block": "fdll",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "fdll_spare_reg": {
    "type": "register",
    "block": "fdll",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "fdll_pmro_ctrl": {
    "type": "register",
    "block": "fdll",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "fdll_pmro_status": {
    "type": "register",
    "block": "fdll",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "fdll_mirror_bus_conf_reg": {
    "type": "register",
    "block": "fdll",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "fdll_mirror_bus_status": {
    "type": "register",
    "block": "fdll",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "fdll_device_time_offset_cfg": {
    "type": "register",
    "block": "fdll",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "fdll_general_interrupt": {
    "type": "register",
    "block": "fdll",
    "width": 2,
    "desc": "Interrupt register for EMPD",
    "fields": [
      [
        "emdb_duplicate_entry",
        0,
        1
      ],
      [
        "ucdv_rollover",
        1,
        1
      ]
    ]
  },
  "fdll_general_interrupt_mask": {
    "type": "register",
    "block": "fdll",
    "width": 2,
    "desc": "This register masks GeneralInterrupt interrupt register",
    "fields": [
      [
        "emdb_duplicate_entry_mask",
        0,
        1
      ],
      [
        "ucdv_rollover_mask",
        1,
        1
      ]
    ]
  },
  "fdll_general_interrupt_test": {
    "type": "register",
    "block": "fdll",
    "width": 2,
    "desc": "This register tests GeneralInterrupt interrupt register",
    "fields": [
      [
        "emdb_duplicate_entry_test",
        0,
        1
      ],
      [
        "ucdv_rollover_test",
        1,
        1
      ]
    ]
  },
  "fdll_internal_fifo_alm_full": {
    "type": "register",
    "block": "fdll",
    "width": 27,
    "desc": "Internal EMPD fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "del_req_fifo_alm_full_cfg",
        0,
        4
      ],
      [
        "fbm_alm_empty_th",
        4,
        16
      ],
      [
        "cam_alm_full_th",
        20,
        7
      ]
    ]
  },
  "fdll_fbm_configurations": {
    "type": "register",
    "block": "fdll",
    "width": 306,
    "desc": "EMPD free buffer manager debug configurations, allows to work with less buffers for debug scenarios, should not be changed by the user for normal operation",
    "fields": [
      [
        "fbm_init",
        0,
        1
      ],
      [
        "fbm_working_mode",
        1,
        1
      ],
      [
        "fbm_total_buffers",
        2,
        16
      ],
      [
        "fbm_not_empty_entry",
        18,
        288
      ]
    ]
  },
  "fdll_empd_debug": {
    "type": "register",
    "block": "fdll",
    "width": 34,
    "desc": "EMPD debug indications register",
    "fields": [
      [
        "read_access_cnt",
        0,
        16
      ],
      [
        "write_access_cnt",
        16,
        16
      ],
      [
        "cam_full",
        32,
        1
      ],
      [
        "fbm_full",
        33,
        1
      ]
    ]
  },
  "fdll_fbm_debug": {
    "type": "register",
    "block": "fdll",
    "width": 32,
    "desc": "FBM debug indications register",
    "fields": [
      [
        "fbm_min_value",
        0,
        16
      ],
      [
        "fbm_inst_value",
        16,
        16
      ]
    ]
  },
  "fdll_write_fail_debug": {
    "type": "register",
    "block": "fdll",
    "width": 44,
    "desc": "Exact match write fail debug indications register",
    "fields": [
      [
        "last_write_fail_valid",
        0,
        1
      ],
      [
        "last_key",
        1,
        24
      ],
      [
        "last_data",
        25,
        19
      ]
    ]
  },
  "fdll_write_fail_debug_counter": {
    "type": "register",
    "block": "fdll",
    "width": 16,
    "desc": "Exact match write fail events counter",
    "fields": [
      [
        "write_fail_cnt",
        0,
        16
      ]
    ]
  },
  "fdll_emdb_per_bank_reg": {
    "type": "register",
    "block": "fdll",
    "width": 50,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "emdb_active_banks",
        0,
        1
      ],
      [
        "emdb_hash_key",
        1,
        48
      ],
      [
        "emdb_use_primitive_crc",
        49,
        1
      ]
    ]
  },
  "fdll_emdb_per_em_reg": {
    "type": "register",
    "block": "fdll",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "emdb_key_width",
        0,
        16
      ],
      [
        "emdb_auto_bubble_req",
        16,
        1
      ],
      [
        "emdb_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "fdll_emdb_cam_wm_max_reg": {
    "type": "register",
    "block": "fdll",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "emdb_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "fdll_emdb_bank_write_cntr_reg": {
    "type": "register",
    "block": "fdll",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "emdb_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "fdll_fdll_fbm": {
    "type": "memory",
    "block": "fdll",
    "width": 128,
    "desc": "Free buffer manager. 1 bit per buffer, indicating its availability.",
    "fields": [
      [
        "fdll_fbm_data",
        0,
        128
      ]
    ]
  },
  "fdll_sms_buffer_ptr": {
    "type": "memory",
    "block": "fdll",
    "width": 19,
    "desc": "EMPD payload - SMS buffer pointers. The address is a buffer from the FBM.",
    "fields": [
      [
        "sms_buffer_ptr_data",
        0,
        19
      ]
    ]
  },
  "fdll_user_count": {
    "type": "memory",
    "block": "fdll",
    "width": 14,
    "desc": "User count memory per SMS buffer. Used for FBM buffer release.",
    "fields": [
      [
        "user_count_data",
        0,
        14
      ]
    ]
  },
  "fdll_emdb_verifier": {
    "type": "memory",
    "block": "fdll",
    "width": 222,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "emdb_verifier_data",
        0,
        222
      ]
    ]
  },
  "fdll_emdb_valid": {
    "type": "memory",
    "block": "fdll",
    "width": 6,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "emdb_valid_data",
        0,
        6
      ]
    ]
  },
  "fdll_emdb_cam": {
    "type": "memory",
    "block": "fdll",
    "width": 24,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "emdb_cam_payload",
        0,
        16
      ],
      [
        "emdb_cam_key",
        16,
        24
      ],
      [
        "emdb_cam_valid",
        40,
        1
      ]
    ]
  },
  "fdll_shared_mem_interrupt_register": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "fdll_shared_mem_mem_protect_interrupt": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "fdll_shared_mem_mem_protect_interrupt_test": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "fdll_shared_mem_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 21,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "wr_req_fifo6_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "rd_req_fifo0_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "rd_req_fifo1_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "rd_req_fifo2_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "rd_req_fifo3_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "rd_req_fifo4_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "rd_req_fifo5_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "rd_req_fifo6_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "rd_result_fifo0_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "rd_result_fifo1_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "rd_result_fifo2_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "rd_result_fifo3_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "rd_result_fifo4_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "rd_result_fifo5_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "rd_result_fifo6_ecc_1b_err_interrupt_mask",
        20,
        1
      ]
    ]
  },
  "fdll_shared_mem_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 21,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "wr_req_fifo6_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "rd_req_fifo0_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "rd_req_fifo1_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "rd_req_fifo2_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "rd_req_fifo3_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "rd_req_fifo4_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "rd_req_fifo5_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "rd_req_fifo6_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "rd_result_fifo0_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "rd_result_fifo1_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "rd_result_fifo2_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "rd_result_fifo3_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "rd_result_fifo4_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "rd_result_fifo5_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "rd_result_fifo6_ecc_2b_err_interrupt_mask",
        20,
        1
      ]
    ]
  },
  "fdll_shared_mem_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 21,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "wr_req_fifo6_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "rd_req_fifo0_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "rd_req_fifo1_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "rd_req_fifo2_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "rd_req_fifo3_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "rd_req_fifo4_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "rd_req_fifo5_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "rd_req_fifo6_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "rd_result_fifo0_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "rd_result_fifo1_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "rd_result_fifo2_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "rd_result_fifo3_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "rd_result_fifo4_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "rd_result_fifo5_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "rd_result_fifo6_ecc_1b_err_initiate",
        20,
        1
      ]
    ]
  },
  "fdll_shared_mem_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 21,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "wr_req_fifo6_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "rd_req_fifo0_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "rd_req_fifo1_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "rd_req_fifo2_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "rd_req_fifo3_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "rd_req_fifo4_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "rd_req_fifo5_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "rd_req_fifo6_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "rd_result_fifo0_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "rd_result_fifo1_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "rd_result_fifo2_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "rd_result_fifo3_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "rd_result_fifo4_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "rd_result_fifo5_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "rd_result_fifo6_ecc_2b_err_initiate",
        20,
        1
      ]
    ]
  },
  "fdll_shared_mem_mem_protect_err_status": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 21,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "wr_req_fifo0_err_int",
        0,
        1
      ],
      [
        "wr_req_fifo1_err_int",
        1,
        1
      ],
      [
        "wr_req_fifo2_err_int",
        2,
        1
      ],
      [
        "wr_req_fifo3_err_int",
        3,
        1
      ],
      [
        "wr_req_fifo4_err_int",
        4,
        1
      ],
      [
        "wr_req_fifo5_err_int",
        5,
        1
      ],
      [
        "wr_req_fifo6_err_int",
        6,
        1
      ],
      [
        "rd_req_fifo0_err_int",
        7,
        1
      ],
      [
        "rd_req_fifo1_err_int",
        8,
        1
      ],
      [
        "rd_req_fifo2_err_int",
        9,
        1
      ],
      [
        "rd_req_fifo3_err_int",
        10,
        1
      ],
      [
        "rd_req_fifo4_err_int",
        11,
        1
      ],
      [
        "rd_req_fifo5_err_int",
        12,
        1
      ],
      [
        "rd_req_fifo6_err_int",
        13,
        1
      ],
      [
        "rd_result_fifo0_err_int",
        14,
        1
      ],
      [
        "rd_result_fifo1_err_int",
        15,
        1
      ],
      [
        "rd_result_fifo2_err_int",
        16,
        1
      ],
      [
        "rd_result_fifo3_err_int",
        17,
        1
      ],
      [
        "rd_result_fifo4_err_int",
        18,
        1
      ],
      [
        "rd_result_fifo5_err_int",
        19,
        1
      ],
      [
        "rd_result_fifo6_err_int",
        20,
        1
      ]
    ]
  },
  "fdll_shared_mem_selected_ser_error_info": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 9,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        7
      ],
      [
        "mem_err_type",
        7,
        2
      ]
    ]
  },
  "fdll_shared_mem_ser_error_debug_configuration": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "fdll_shared_mem_ecc_1b_err_debug": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "fdll_shared_mem_ecc_2b_err_debug": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "fdll_shared_mem_counter_timer": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "fdll_shared_mem_counter_timer_trigger_reg": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "fdll_shared_mem_memory_access_timeout": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "fdll_shared_mem_broadcast_config_reg": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "fdll_shared_mem_memory_prot_bypass": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "fdll_shared_mem_soft_reset_configuration": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "fdll_shared_mem_mbist_configuration": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "fdll_shared_mem_power_down_configuration": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "fdll_shared_mem_spare_reg": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "fdll_shared_mem_pmro_ctrl": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "fdll_shared_mem_pmro_status": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "fdll_shared_mem_mirror_bus_conf_reg": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "fdll_shared_mem_mirror_bus_status": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "fdll_shared_mem_device_time_offset_cfg": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "fdll_shared_mem_general_interrupt_register": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 9,
    "desc": "FDLL interrupt register",
    "fields": [
      [
        "write_fail_cbt_overflow",
        0,
        1
      ],
      [
        "empd_interrupt0",
        1,
        1
      ],
      [
        "empd_interrupt1",
        2,
        1
      ],
      [
        "empd_interrupt2",
        3,
        1
      ],
      [
        "empd_interrupt3",
        4,
        1
      ],
      [
        "empd_interrupt4",
        5,
        1
      ],
      [
        "empd_interrupt5",
        6,
        1
      ],
      [
        "empd_interrupt6",
        7,
        1
      ],
      [
        "empd_interrupt7",
        8,
        1
      ]
    ]
  },
  "fdll_shared_mem_general_interrupt_register_mask": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 9,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "write_fail_cbt_overflow_mask",
        0,
        1
      ],
      [
        "empd_interrupt0_mask",
        1,
        1
      ],
      [
        "empd_interrupt1_mask",
        2,
        1
      ],
      [
        "empd_interrupt2_mask",
        3,
        1
      ],
      [
        "empd_interrupt3_mask",
        4,
        1
      ],
      [
        "empd_interrupt4_mask",
        5,
        1
      ],
      [
        "empd_interrupt5_mask",
        6,
        1
      ],
      [
        "empd_interrupt6_mask",
        7,
        1
      ],
      [
        "empd_interrupt7_mask",
        8,
        1
      ]
    ]
  },
  "fdll_shared_mem_general_interrupt_register_test": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 9,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "write_fail_cbt_overflow_test",
        0,
        1
      ],
      [
        "empd_interrupt0_test",
        1,
        1
      ],
      [
        "empd_interrupt1_test",
        2,
        1
      ],
      [
        "empd_interrupt2_test",
        3,
        1
      ],
      [
        "empd_interrupt3_test",
        4,
        1
      ],
      [
        "empd_interrupt4_test",
        5,
        1
      ],
      [
        "empd_interrupt5_test",
        6,
        1
      ],
      [
        "empd_interrupt6_test",
        7,
        1
      ],
      [
        "empd_interrupt7_test",
        8,
        1
      ]
    ]
  },
  "fdll_shared_mem_internal_fifo_alm_full": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 25,
    "desc": "Internal FDLL fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "rd_req_alm_full_cfg",
        0,
        4
      ],
      [
        "wr_req_alm_full_cfg",
        4,
        4
      ],
      [
        "reorder_alm_full_cfg",
        8,
        7
      ],
      [
        "wf_cbt_alm_full_cfg",
        15,
        6
      ],
      [
        "wr_req_sp_cfg",
        21,
        4
      ]
    ]
  },
  "fdll_shared_mem_write_fail_cbt_debug": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 42,
    "desc": "Write fail fifo debug indications register",
    "fields": [
      [
        "write_fail_cbt_unf",
        0,
        7
      ],
      [
        "write_fail_cbt_buffer",
        7,
        19
      ],
      [
        "write_fail_cbt_counter",
        26,
        16
      ]
    ]
  },
  "fdll_shared_mem_last_write_sel_cfg": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 6,
    "desc": "Last write transaction debug control",
    "fields": [
      [
        "last_write_key_sel",
        0,
        3
      ],
      [
        "last_write_buffer_sel",
        3,
        3
      ]
    ]
  },
  "fdll_shared_mem_last_write_data": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 43,
    "desc": "Last write transaction debug data",
    "fields": [
      [
        "last_write_key",
        0,
        24
      ],
      [
        "last_write_buffer",
        24,
        19
      ]
    ]
  },
  "fdll_shared_mem_last_read_sel_cfg": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 3,
    "desc": "Last read transaction debug control",
    "fields": [
      [
        "last_read_key_sel",
        0,
        3
      ]
    ]
  },
  "fdll_shared_mem_last_read_data": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 24,
    "desc": "Last read transaction debug data",
    "fields": [
      [
        "last_read_key",
        0,
        24
      ]
    ]
  },
  "fdll_shared_mem_shared_mem_debug": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 32,
    "desc": "Shared mem general debug register",
    "fields": [
      [
        "wr_req_fifo_full_cnt",
        0,
        16
      ],
      [
        "rd_req_fifo_full_cnt",
        16,
        16
      ]
    ]
  },
  "fdll_shared_mem_fdll_pause_counter": {
    "type": "register",
    "block": "fdll_shared_mem",
    "width": 16,
    "desc": "FDLL to Reassembly pause counter",
    "fields": [
      [
        "fdll_pause_cnt",
        0,
        16
      ]
    ]
  },
  "fdll_shared_mem_wr_req_fifo": {
    "type": "memory",
    "block": "fdll_shared_mem",
    "width": 46,
    "desc": "MMA write request fifo per slice x per EMPD",
    "fields": [
      [
        "wr_key",
        0,
        24
      ],
      [
        "wr_buffer_ptr",
        24,
        19
      ],
      [
        "source_slice",
        43,
        3
      ]
    ]
  },
  "fdll_shared_mem_rd_req_fifo": {
    "type": "memory",
    "block": "fdll_shared_mem",
    "width": 39,
    "desc": "MMA read request fifo per slice x per EMPD",
    "fields": [
      [
        "rd_key",
        0,
        24
      ],
      [
        "req_source_id",
        24,
        15
      ]
    ]
  },
  "fdll_shared_mem_rd_result_fifo": {
    "type": "memory",
    "block": "fdll_shared_mem",
    "width": 21,
    "desc": "MMA read result fifo per slice",
    "fields": [
      [
        "result_buffer_ptr",
        0,
        19
      ],
      [
        "lookup_found",
        19,
        1
      ],
      [
        "result_source_id",
        20,
        1
      ]
    ]
  },
  "filb_slice_interrupt_register": {
    "type": "register",
    "block": "filb_slice",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "filb_slice_mem_protect_interrupt": {
    "type": "register",
    "block": "filb_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "filb_slice_mem_protect_interrupt_test": {
    "type": "register",
    "block": "filb_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "filb_slice_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "voq_mapping_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "static_fabric_reachability_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "fabric_reachability_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "sn_ts_per_flow_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "slb_context_lbg_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "slb_context_db_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "slb_voq_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "slb_voq_pool_mem_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "slb_fc_timer_ecc_1b_err_interrupt_mask",
        8,
        1
      ]
    ]
  },
  "filb_slice_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "voq_mapping_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "static_fabric_reachability_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "fabric_reachability_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "sn_ts_per_flow_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "slb_context_lbg_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "slb_context_db_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "slb_voq_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "slb_voq_pool_mem_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "slb_fc_timer_ecc_2b_err_interrupt_mask",
        8,
        1
      ]
    ]
  },
  "filb_slice_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "voq_mapping_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "static_fabric_reachability_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "fabric_reachability_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "sn_ts_per_flow_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "slb_context_lbg_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "slb_context_db_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "slb_voq_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "slb_voq_pool_mem_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "slb_fc_timer_ecc_1b_err_initiate",
        8,
        1
      ]
    ]
  },
  "filb_slice_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "voq_mapping_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "static_fabric_reachability_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "fabric_reachability_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "sn_ts_per_flow_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "slb_context_lbg_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "slb_context_db_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "slb_voq_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "slb_voq_pool_mem_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "slb_fc_timer_ecc_2b_err_initiate",
        8,
        1
      ]
    ]
  },
  "filb_slice_mem_protect_err_status": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "voq_mapping_err_int",
        0,
        1
      ],
      [
        "static_fabric_reachability_err_int",
        1,
        1
      ],
      [
        "fabric_reachability_err_int",
        2,
        1
      ],
      [
        "sn_ts_per_flow_err_int",
        3,
        1
      ],
      [
        "slb_context_lbg_err_int",
        4,
        1
      ],
      [
        "slb_context_db_err_int",
        5,
        1
      ],
      [
        "slb_voq_err_int",
        6,
        1
      ],
      [
        "slb_voq_pool_mem_err_int",
        7,
        1
      ],
      [
        "slb_fc_timer_err_int",
        8,
        1
      ]
    ]
  },
  "filb_slice_selected_ser_error_info": {
    "type": "register",
    "block": "filb_slice",
    "width": 18,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        16
      ],
      [
        "mem_err_type",
        16,
        2
      ]
    ]
  },
  "filb_slice_ser_error_debug_configuration": {
    "type": "register",
    "block": "filb_slice",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "filb_slice_ecc_1b_err_debug": {
    "type": "register",
    "block": "filb_slice",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "filb_slice_ecc_2b_err_debug": {
    "type": "register",
    "block": "filb_slice",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "filb_slice_counter_timer": {
    "type": "register",
    "block": "filb_slice",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "filb_slice_counter_timer_trigger_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "filb_slice_memory_access_timeout": {
    "type": "register",
    "block": "filb_slice",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "filb_slice_broadcast_config_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "filb_slice_memory_prot_bypass": {
    "type": "register",
    "block": "filb_slice",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "filb_slice_soft_reset_configuration": {
    "type": "register",
    "block": "filb_slice",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "filb_slice_mbist_configuration": {
    "type": "register",
    "block": "filb_slice",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "filb_slice_power_down_configuration": {
    "type": "register",
    "block": "filb_slice",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "filb_slice_spare_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "filb_slice_pmro_ctrl": {
    "type": "register",
    "block": "filb_slice",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "filb_slice_pmro_status": {
    "type": "register",
    "block": "filb_slice",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "filb_slice_mirror_bus_conf_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "filb_slice_mirror_bus_status": {
    "type": "register",
    "block": "filb_slice",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "filb_slice_device_time_offset_cfg": {
    "type": "register",
    "block": "filb_slice",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "filb_slice_general_interrupt_register": {
    "type": "register",
    "block": "filb_slice",
    "width": 2,
    "desc": "Interrupt",
    "fields": [
      [
        "slb_open_but_no_link",
        0,
        1
      ],
      [
        "slb_pd_fifo_overflow",
        1,
        1
      ]
    ]
  },
  "filb_slice_general_interrupt_register_mask": {
    "type": "register",
    "block": "filb_slice",
    "width": 2,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "slb_open_but_no_link_mask",
        0,
        1
      ],
      [
        "slb_pd_fifo_overflow_mask",
        1,
        1
      ]
    ]
  },
  "filb_slice_general_interrupt_register_test": {
    "type": "register",
    "block": "filb_slice",
    "width": 2,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "slb_open_but_no_link_test",
        0,
        1
      ],
      [
        "slb_pd_fifo_overflow_test",
        1,
        1
      ]
    ]
  },
  "filb_slice_status_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 1,
    "desc": "init status register- when value is not 0 - hardware initialization process is in progress",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "filb_slice_open_but_no_link_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "Slb open command discarded because there was no avaliable link",
    "fields": [
      [
        "open_but_no_link_context",
        0,
        9
      ]
    ]
  },
  "filb_slice_fifos_debug_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "slb_cmd_fifo_count",
        0,
        4
      ],
      [
        "slb_pd_fifo_stat",
        4,
        5
      ]
    ]
  },
  "filb_slice_last_in_pd": {
    "type": "register",
    "block": "filb_slice",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd",
        0,
        32
      ]
    ]
  },
  "filb_slice_debug_conf": {
    "type": "register",
    "block": "filb_slice",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "pd_mux_sel",
        0,
        3
      ]
    ]
  },
  "filb_slice_slice_mode_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ]
    ]
  },
  "filb_slice_almost_full_conf": {
    "type": "register",
    "block": "filb_slice",
    "width": 5,
    "desc": "almost full configuration register This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "slb_pd_fifo_alm_full",
        0,
        5
      ]
    ]
  },
  "filb_slice_general_conf_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 2,
    "desc": "General configuration register ",
    "fields": [
      [
        "source_interface_demux",
        0,
        1
      ],
      [
        "invert_frt_chicken",
        1,
        1
      ]
    ]
  },
  "filb_slice_link_to_sms_if_map": {
    "type": "register",
    "block": "filb_slice",
    "width": 30,
    "desc": "Map link to fabric SMS interface by comparing the first link of the next IFG",
    "fields": [
      [
        "sms_if7_min_link",
        0,
        6
      ],
      [
        "sms_if8_min_link",
        6,
        6
      ],
      [
        "sms_if9_min_link",
        12,
        6
      ],
      [
        "sms_if10_min_link",
        18,
        6
      ],
      [
        "sms_if11_min_link",
        24,
        6
      ]
    ]
  },
  "filb_slice_load_balance_cfg": {
    "type": "register",
    "block": "filb_slice",
    "width": 1,
    "desc": "Configuration regarding the load balancing enhancement scheme of GB",
    "fields": [
      [
        "enhancement_disable",
        0,
        1
      ]
    ]
  },
  "filb_slice_slices_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "num_of_nwk_slices",
        0,
        3
      ],
      [
        "num_of_fabric_slices",
        3,
        3
      ]
    ]
  },
  "filb_slice_packing_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 28,
    "desc": "fabric packing control register. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "packing_timeout",
        0,
        8
      ],
      [
        "packing_max_pd_size",
        8,
        10
      ],
      [
        "packing_max_sum_pd_size",
        18,
        10
      ]
    ]
  },
  "filb_slice_lfsr_cfg_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 42,
    "desc": "LFSR config register. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "base_lfsr_idx",
        0,
        4
      ],
      [
        "num_select_replace_lfsr",
        4,
        12
      ],
      [
        "randomize_link_on_local",
        16,
        1
      ],
      [
        "lfsr_seed1",
        17,
        12
      ],
      [
        "lfsr_seed2",
        29,
        12
      ],
      [
        "lfsr_clk_advance_enable",
        41,
        1
      ]
    ]
  },
  "filb_slice_filb_delete_xbar": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "Value of XBAR_VOQ in case that FILB delete a packet. Examples - linecard network slice with RLB or DCF network slice but all links are down ",
    "fields": [
      [
        "filb_del_xbar",
        0,
        4
      ],
      [
        "filb_del_link",
        4,
        5
      ]
    ]
  },
  "filb_slice_slb_voq_pool": {
    "type": "register",
    "block": "filb_slice",
    "width": 36,
    "desc": "VOQ pool per fabric link for DCF-SLB (180 = 5*36)",
    "fields": [
      [
        "fifosize",
        0,
        12
      ],
      [
        "fifostart",
        12,
        12
      ],
      [
        "fifoalm_full",
        24,
        12
      ]
    ]
  },
  "filb_slice_slb_voq_pool_head": {
    "type": "register",
    "block": "filb_slice",
    "width": 25,
    "desc": "VOQ pool per fabric link for DCF-SLB(180=5*36)",
    "fields": [
      [
        "headvoq",
        0,
        12
      ],
      [
        "headvoq_rdy",
        12,
        1
      ],
      [
        "statcnt",
        13,
        12
      ]
    ]
  },
  "filb_slice_init_slb_voq_pool": {
    "type": "register",
    "block": "filb_slice",
    "width": 19,
    "desc": "",
    "fields": [
      [
        "voq_to_init",
        0,
        12
      ],
      [
        "link_to_init",
        12,
        6
      ],
      [
        "trigger_to_init",
        18,
        1
      ]
    ]
  },
  "filb_slice_pool_init": {
    "type": "register",
    "block": "filb_slice",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "pool_init_en",
        0,
        1
      ]
    ]
  },
  "filb_slice_slb_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 70,
    "desc": "",
    "fields": [
      [
        "slb_timer_resolution",
        0,
        20
      ],
      [
        "close_prev_seg_gap",
        20,
        9
      ],
      [
        "switch_on_fc_th",
        29,
        9
      ],
      [
        "switch_with_eos_th",
        38,
        9
      ],
      [
        "switch_no_eos_th",
        47,
        9
      ],
      [
        "flow_control_time",
        56,
        9
      ],
      [
        "congestion_exp_fc_en",
        65,
        1
      ],
      [
        "slb_link_voqs_offset",
        66,
        4
      ]
    ]
  },
  "filb_slice_slb_timer_status_reg": {
    "type": "register",
    "block": "filb_slice",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "slb_time",
        0,
        9
      ]
    ]
  },
  "filb_slice_voq_mapping": {
    "type": "memory",
    "block": "filb_slice",
    "width": 26,
    "desc": "Voq Mapping Data",
    "fields": [
      [
        "dest_dev",
        0,
        9
      ],
      [
        "dest_slice",
        9,
        3
      ],
      [
        "dest_oq",
        12,
        9
      ],
      [
        "snr_plb_ss2dd",
        21,
        4
      ],
      [
        "packing_eligible",
        25,
        1
      ]
    ]
  },
  "filb_slice_static_fabric_reachability": {
    "type": "memory",
    "block": "filb_slice",
    "width": 64,
    "desc": "Static Fabric Reachability Table - written by the CPU In CRF mode addressed by destination device In DCF mode addessed by LBGID. In CRF slice 5 has 24 links, slice 4 has 20 links & slice 3 has 20 links - 64 overall. In DCF we use only top 36 links",
    "fields": [
      [
        "staticlinks_bit_map",
        0,
        64
      ]
    ]
  },
  "filb_slice_fabric_reachability": {
    "type": "memory",
    "block": "filb_slice",
    "width": 64,
    "desc": "Fabric Reachability Table - dynamic table updated by the frm In CRF mode addressed by destination device In DCF mode addessed by LBGID In CRF slice 5 has 24 links, slice 4 has 20 links & slice 3 has 20 links - 64 overall. In DCF we use only top 36 links",
    "fields": [
      [
        "links_bit_map",
        0,
        64
      ]
    ]
  },
  "filb_slice_sn_ts_per_flow": {
    "type": "memory",
    "block": "filb_slice",
    "width": 24,
    "desc": "Last SN or TS for RLB traffic",
    "fields": [
      [
        "ts_sn_val",
        0,
        24
      ]
    ]
  },
  "filb_slice_slb_context_lbg": {
    "type": "memory",
    "block": "filb_slice",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "lbgid",
        0,
        9
      ],
      [
        "flow_tc",
        9,
        1
      ]
    ]
  },
  "filb_slice_slb_context_db": {
    "type": "memory",
    "block": "filb_slice",
    "width": 31,
    "desc": "SLB database",
    "fields": [
      [
        "start_segment_time",
        0,
        9
      ],
      [
        "last_prev_seg_time",
        9,
        9
      ],
      [
        "last_pd_time",
        18,
        9
      ],
      [
        "ssn",
        27,
        2
      ],
      [
        "switch_next_pd",
        29,
        1
      ],
      [
        "first_segment",
        30,
        1
      ]
    ]
  },
  "filb_slice_slb_voq": {
    "type": "memory",
    "block": "filb_slice",
    "width": 19,
    "desc": "VOQ number per SLB context",
    "fields": [
      [
        "voq",
        0,
        12
      ],
      [
        "link_num",
        12,
        6
      ],
      [
        "slb_voq_map_valid",
        18,
        1
      ]
    ]
  },
  "filb_slice_slb_voq_pool_mem": {
    "type": "memory",
    "block": "filb_slice",
    "width": 12,
    "desc": "VOQ number per SLB context",
    "fields": [
      [
        "voqentry",
        0,
        12
      ]
    ]
  },
  "filb_slice_slb_fc_timer": {
    "type": "memory",
    "block": "filb_slice",
    "width": 10,
    "desc": "Slb flow control timer",
    "fields": [
      [
        "fc_timer",
        0,
        10
      ]
    ]
  },
  "fllb_interrupt_register": {
    "type": "register",
    "block": "fllb",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "fllb_mem_protect_interrupt": {
    "type": "register",
    "block": "fllb",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "fllb_mem_protect_interrupt_test": {
    "type": "register",
    "block": "fllb",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "fllb_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fllb",
    "width": 24,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "iflb_fbm0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "iflb_fbm1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "iflb_data0_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "iflb_data1_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "iflb_data_em_index0_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "iflb_data_em_index1_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "elephant_table_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pd_fifo_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "lbg_table_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "lbg_far_end_links_up_table_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "iflb_em_verifier0_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "iflb_em_verifier1_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "iflb_em_verifier2_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "iflb_em_verifier3_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "iflb_em_verifier4_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "iflb_em_verifier5_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "iflb_em_verifier6_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "iflb_em_verifier7_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "iflb_em_verifier8_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "iflb_em_verifier9_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "iflb_em_verifier10_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "iflb_em_verifier11_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "iflb_em_verifier12_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "iflb_em_verifier13_ecc_1b_err_interrupt_mask",
        23,
        1
      ]
    ]
  },
  "fllb_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fllb",
    "width": 24,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "iflb_fbm0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "iflb_fbm1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "iflb_data0_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "iflb_data1_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "iflb_data_em_index0_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "iflb_data_em_index1_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "elephant_table_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pd_fifo_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "lbg_table_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "lbg_far_end_links_up_table_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "iflb_em_verifier0_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "iflb_em_verifier1_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "iflb_em_verifier2_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "iflb_em_verifier3_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "iflb_em_verifier4_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "iflb_em_verifier5_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "iflb_em_verifier6_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "iflb_em_verifier7_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "iflb_em_verifier8_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "iflb_em_verifier9_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "iflb_em_verifier10_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "iflb_em_verifier11_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "iflb_em_verifier12_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "iflb_em_verifier13_ecc_2b_err_interrupt_mask",
        23,
        1
      ]
    ]
  },
  "fllb_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "fllb",
    "width": 24,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "iflb_fbm0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "iflb_fbm1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "iflb_data0_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "iflb_data1_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "iflb_data_em_index0_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "iflb_data_em_index1_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "elephant_table_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "pd_fifo_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "lbg_table_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "lbg_far_end_links_up_table_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "iflb_em_verifier0_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "iflb_em_verifier1_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "iflb_em_verifier2_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "iflb_em_verifier3_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "iflb_em_verifier4_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "iflb_em_verifier5_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "iflb_em_verifier6_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "iflb_em_verifier7_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "iflb_em_verifier8_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "iflb_em_verifier9_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "iflb_em_verifier10_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "iflb_em_verifier11_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "iflb_em_verifier12_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "iflb_em_verifier13_ecc_1b_err_initiate",
        23,
        1
      ]
    ]
  },
  "fllb_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "fllb",
    "width": 24,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "iflb_fbm0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "iflb_fbm1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "iflb_data0_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "iflb_data1_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "iflb_data_em_index0_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "iflb_data_em_index1_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "elephant_table_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "pd_fifo_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "lbg_table_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "lbg_far_end_links_up_table_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "iflb_em_verifier0_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "iflb_em_verifier1_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "iflb_em_verifier2_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "iflb_em_verifier3_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "iflb_em_verifier4_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "iflb_em_verifier5_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "iflb_em_verifier6_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "iflb_em_verifier7_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "iflb_em_verifier8_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "iflb_em_verifier9_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "iflb_em_verifier10_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "iflb_em_verifier11_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "iflb_em_verifier12_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "iflb_em_verifier13_ecc_2b_err_initiate",
        23,
        1
      ]
    ]
  },
  "fllb_mem_protect_err_status": {
    "type": "register",
    "block": "fllb",
    "width": 24,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "iflb_fbm0_err_int",
        0,
        1
      ],
      [
        "iflb_fbm1_err_int",
        1,
        1
      ],
      [
        "iflb_data0_err_int",
        2,
        1
      ],
      [
        "iflb_data1_err_int",
        3,
        1
      ],
      [
        "iflb_data_em_index0_err_int",
        4,
        1
      ],
      [
        "iflb_data_em_index1_err_int",
        5,
        1
      ],
      [
        "elephant_table_err_int",
        6,
        1
      ],
      [
        "pd_fifo_err_int",
        7,
        1
      ],
      [
        "lbg_table_err_int",
        8,
        1
      ],
      [
        "lbg_far_end_links_up_table_err_int",
        9,
        1
      ],
      [
        "iflb_em_verifier0_err_int",
        10,
        1
      ],
      [
        "iflb_em_verifier1_err_int",
        11,
        1
      ],
      [
        "iflb_em_verifier2_err_int",
        12,
        1
      ],
      [
        "iflb_em_verifier3_err_int",
        13,
        1
      ],
      [
        "iflb_em_verifier4_err_int",
        14,
        1
      ],
      [
        "iflb_em_verifier5_err_int",
        15,
        1
      ],
      [
        "iflb_em_verifier6_err_int",
        16,
        1
      ],
      [
        "iflb_em_verifier7_err_int",
        17,
        1
      ],
      [
        "iflb_em_verifier8_err_int",
        18,
        1
      ],
      [
        "iflb_em_verifier9_err_int",
        19,
        1
      ],
      [
        "iflb_em_verifier10_err_int",
        20,
        1
      ],
      [
        "iflb_em_verifier11_err_int",
        21,
        1
      ],
      [
        "iflb_em_verifier12_err_int",
        22,
        1
      ],
      [
        "iflb_em_verifier13_err_int",
        23,
        1
      ]
    ]
  },
  "fllb_selected_ser_error_info": {
    "type": "register",
    "block": "fllb",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "fllb_ser_error_debug_configuration": {
    "type": "register",
    "block": "fllb",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "fllb_ecc_1b_err_debug": {
    "type": "register",
    "block": "fllb",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "fllb_ecc_2b_err_debug": {
    "type": "register",
    "block": "fllb",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "fllb_tcam_scan_period_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "fllb_counter_timer": {
    "type": "register",
    "block": "fllb",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "fllb_counter_timer_trigger_reg": {
    "type": "register",
    "block": "fllb",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "fllb_memory_access_timeout": {
    "type": "register",
    "block": "fllb",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "fllb_broadcast_config_reg": {
    "type": "register",
    "block": "fllb",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "fllb_memory_prot_bypass": {
    "type": "register",
    "block": "fllb",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "fllb_soft_reset_configuration": {
    "type": "register",
    "block": "fllb",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "fllb_mbist_configuration": {
    "type": "register",
    "block": "fllb",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "fllb_power_down_configuration": {
    "type": "register",
    "block": "fllb",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "fllb_spare_reg": {
    "type": "register",
    "block": "fllb",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "fllb_pmro_ctrl": {
    "type": "register",
    "block": "fllb",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "fllb_pmro_status": {
    "type": "register",
    "block": "fllb",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "fllb_mirror_bus_conf_reg": {
    "type": "register",
    "block": "fllb",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "fllb_mirror_bus_status": {
    "type": "register",
    "block": "fllb",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "fllb_device_time_offset_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "fllb_slice_mode_config": {
    "type": "register",
    "block": "fllb",
    "width": 4,
    "desc": "Slice mode configuration",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ]
    ]
  },
  "fllb_fifo_cbt_config": {
    "type": "register",
    "block": "fllb",
    "width": 12,
    "desc": "Thresholds that control when input to the block is stopped in order to avoid overflow",
    "fields": [
      [
        "pd_fifo_almost_full_th",
        0,
        6
      ],
      [
        "cbt_almost_full_th",
        6,
        6
      ]
    ]
  },
  "fllb_general_config": {
    "type": "register",
    "block": "fllb",
    "width": 24,
    "desc": "General confurations",
    "fields": [
      [
        "is_overlay",
        0,
        1
      ],
      [
        "default_count_type",
        1,
        1
      ],
      [
        "first_flowlet_always_ecmp",
        2,
        1
      ],
      [
        "first_flowlet_ecmp_from_iflb_util_percent",
        3,
        4
      ],
      [
        "ecmp_mask_local_failed_links",
        7,
        1
      ],
      [
        "ecmp_mask_far_failed_links",
        8,
        1
      ],
      [
        "flowlet_mask_local_failed_links",
        9,
        1
      ],
      [
        "flowlet_mask_far_failed_links",
        10,
        1
      ],
      [
        "last_packet_time_resolution",
        11,
        4
      ],
      [
        "init_timestamp_resolution",
        15,
        3
      ],
      [
        "flowlet_byte_count_resolution",
        18,
        4
      ],
      [
        "disable_aging_by_tp",
        22,
        1
      ],
      [
        "promote_to_elephant_without_gap",
        23,
        1
      ]
    ]
  },
  "fllb_tc_mapping_config": {
    "type": "register",
    "block": "fllb",
    "width": 57,
    "desc": "TC Mapping configuration",
    "fields": [
      [
        "map_tc_only_for_lbg_id",
        0,
        1
      ],
      [
        "elephant_tc_mapping",
        1,
        24
      ],
      [
        "mice_tc_mapping",
        25,
        24
      ],
      [
        "slb_tc_mapping",
        49,
        8
      ]
    ]
  },
  "fllb_enabled_svc_config": {
    "type": "register",
    "block": "fllb",
    "width": 44,
    "desc": "SVC Enabling configuration",
    "fields": [
      [
        "svc_fbm_active",
        0,
        1
      ],
      [
        "svc_fbm_working_mode",
        1,
        1
      ],
      [
        "num_of_enabled_svc",
        2,
        10
      ],
      [
        "enabled_svc_lines",
        12,
        32
      ]
    ]
  },
  "fllb_enable_config": {
    "type": "register",
    "block": "fllb",
    "width": 5,
    "desc": "Features enable configuration",
    "fields": [
      [
        "process_all_flows",
        0,
        1
      ],
      [
        "bypass_mode",
        1,
        2
      ],
      [
        "slb_enabled",
        3,
        1
      ],
      [
        "all_ecmp",
        4,
        1
      ]
    ]
  },
  "fllb_reset_timer_config": {
    "type": "register",
    "block": "fllb",
    "width": 6,
    "desc": "Configuration to control whether to reset the New-Flows-Use-ECMP timer that causes new flows to be allocated using ECMP while it is active Used to prevent Out-Of-Order in cases where the last packet of the flow possibly was sent at a period shorter than flowlet gap, but it was not recorded in the IFDB",
    "fields": [
      [
        "reset_timer_on_insert_fail",
        0,
        1
      ],
      [
        "reset_timer_on_full_iflb",
        1,
        1
      ],
      [
        "reset_timer_on_pd_while_deleting_entry",
        2,
        1
      ],
      [
        "reset_timer_on_ecmp_only_pd",
        3,
        1
      ],
      [
        "reset_timer_on_pd_size_lower_than_th",
        4,
        1
      ],
      [
        "reset_timer_on_wrong_lbg_id_event",
        5,
        1
      ]
    ]
  },
  "fllb_min_packet_config": {
    "type": "register",
    "block": "fllb",
    "width": 28,
    "desc": "Threshold configurations for minimal packet size to be ignored",
    "fields": [
      [
        "min_packet_size_to_alloc_iflb_entry",
        0,
        14
      ],
      [
        "min_packet_size_to_update_rate",
        14,
        14
      ]
    ]
  },
  "fllb_rate_config": {
    "type": "register",
    "block": "fllb",
    "width": 35,
    "desc": "Rate configuration for determining flow as elephant",
    "fields": [
      [
        "flow_rate_resolution",
        0,
        4
      ],
      [
        "leaky_bucket_rate",
        4,
        5
      ],
      [
        "elephant_flow_th",
        9,
        16
      ],
      [
        "elephant_flow_packets_th",
        25,
        10
      ]
    ]
  },
  "fllb_time_th_config": {
    "type": "register",
    "block": "fllb",
    "width": 22,
    "desc": "Time threshold configurations",
    "fields": [
      [
        "flowlet_gap_th",
        0,
        12
      ],
      [
        "iflb_full_time_th",
        12,
        10
      ]
    ]
  },
  "fllb_aging_config": {
    "type": "register",
    "block": "fllb",
    "width": 45,
    "desc": "Aging configurations",
    "fields": [
      [
        "disable_aging",
        0,
        1
      ],
      [
        "expire_toggled_flows",
        1,
        1
      ],
      [
        "same_entry_minimal_aging_interval",
        2,
        15
      ],
      [
        "same_entry_maximal_aging_interval",
        17,
        15
      ],
      [
        "num_of_entries_to_update_to_enter_bubble",
        32,
        13
      ]
    ]
  },
  "fllb_aging_th_config": {
    "type": "register",
    "block": "fllb",
    "width": 52,
    "desc": "Aging threshold configuration",
    "fields": [
      [
        "flow_aging_not_elephant_th",
        0,
        13
      ],
      [
        "flow_aging_expired_elephant_th",
        13,
        13
      ],
      [
        "flow_aging_slb_elephant_th",
        26,
        13
      ],
      [
        "flow_toggle_aging_th",
        39,
        13
      ]
    ]
  },
  "fllb_iflb_fbm_config": {
    "type": "register",
    "block": "fllb",
    "width": 148,
    "desc": "IFDB FBM initialization configurations Each buffer represents one of the 4K flows",
    "fields": [
      [
        "iflb_fbm_active",
        0,
        1
      ],
      [
        "fbm_working_mode",
        1,
        1
      ],
      [
        "fbm_total_buffers",
        2,
        14
      ],
      [
        "fbm_not_empty_entry",
        16,
        128
      ],
      [
        "fbm_almost_empty_th",
        144,
        4
      ]
    ]
  },
  "fllb_ibm_config": {
    "type": "register",
    "block": "fllb",
    "width": 21,
    "desc": "In-Bound Mirror commands for Tetration",
    "fields": [
      [
        "new_flow_ibm_cmd",
        0,
        5
      ],
      [
        "new_elephant_ibm_cmd",
        5,
        5
      ],
      [
        "fin_ibm_cmd",
        10,
        5
      ],
      [
        "elephant_fin_ibm_cmd",
        15,
        5
      ],
      [
        "overwrite_mirror",
        20,
        1
      ]
    ]
  },
  "fllb_cpu_read": {
    "type": "register",
    "block": "fllb",
    "width": 36,
    "desc": "CPU Read register Writing to this register will trigger CPU read process",
    "fields": [
      [
        "cpu_read_flow_sign",
        0,
        36
      ]
    ]
  },
  "fllb_cpu_read_result_iflb": {
    "type": "register",
    "block": "fllb",
    "width": 102,
    "desc": "CPU Read result from IFDB",
    "fields": [
      [
        "cpu_read_result_iflb_entry",
        0,
        89
      ],
      [
        "cpu_read_result_iflb_pointer",
        89,
        13
      ]
    ]
  },
  "fllb_cpu_read_result_elephant": {
    "type": "register",
    "block": "fllb",
    "width": 81,
    "desc": "CPU Read result from elephant table",
    "fields": [
      [
        "cpu_read_result_elephant_entry",
        0,
        81
      ]
    ]
  },
  "fllb_cpu_read_result_misc": {
    "type": "register",
    "block": "fllb",
    "width": 36,
    "desc": "CPU Read result details",
    "fields": [
      [
        "cpu_read_result_ready",
        0,
        2
      ],
      [
        "cpu_read_result_hit",
        2,
        2
      ],
      [
        "cpu_read_result_time",
        4,
        32
      ]
    ]
  },
  "fllb_cpu_read_mask_counter_th_config": {
    "type": "register",
    "block": "fllb",
    "width": 5,
    "desc": "CPU Read auxiliary configuration",
    "fields": [
      [
        "cpu_read_mask_counter_th",
        0,
        5
      ]
    ]
  },
  "fllb_bubble_timer_config": {
    "type": "register",
    "block": "fllb",
    "width": 32,
    "desc": "Bubble threshold times configurations",
    "fields": [
      [
        "bubble_tp_th",
        0,
        16
      ],
      [
        "bubble_cpu_read_th",
        16,
        16
      ]
    ]
  },
  "fllb_links_up_table": {
    "type": "register",
    "block": "fllb",
    "width": 64,
    "desc": "Links up status",
    "fields": [
      [
        "links_up",
        0,
        64
      ]
    ]
  },
  "fllb_svc_empty_status_reg": {
    "type": "register",
    "block": "fllb",
    "width": 512,
    "desc": "Empty SVC Status",
    "fields": [
      [
        "svc_empty_status",
        0,
        512
      ]
    ]
  },
  "fllb_debug_register": {
    "type": "register",
    "block": "fllb",
    "width": 64,
    "desc": "Counters for debugging",
    "fields": [
      [
        "flowlet_path_changes_counter",
        0,
        16
      ],
      [
        "aged_elephant_flows_counter",
        16,
        16
      ],
      [
        "aged_not_slb_flows_counter",
        32,
        16
      ],
      [
        "feedback_packet_output_counter",
        48,
        16
      ]
    ]
  },
  "fllb_reset_timer_event_register": {
    "type": "register",
    "block": "fllb",
    "width": 5,
    "desc": "Indication of events that may reset the New-Flows-Use-ECMP Timer (reset based on ResetTimerConfig)",
    "fields": [
      [
        "insert_fail_event",
        0,
        1
      ],
      [
        "full_iflb_event",
        1,
        1
      ],
      [
        "pd_while_deleting_entry_event",
        2,
        1
      ],
      [
        "ecmp_only_pd_event",
        3,
        1
      ],
      [
        "pd_size_lower_than_th_event",
        4,
        1
      ]
    ]
  },
  "fllb_debug_counters": {
    "type": "register",
    "block": "fllb",
    "width": 128,
    "desc": "Debug Counters",
    "fields": [
      [
        "drop_counter",
        0,
        32
      ],
      [
        "cbt_not_ready",
        32,
        32
      ],
      [
        "rx_counters_stop0",
        64,
        32
      ],
      [
        "rx_counters_stop1",
        96,
        32
      ]
    ]
  },
  "fllb_wrong_lbgid_event": {
    "type": "register",
    "block": "fllb",
    "width": 37,
    "desc": "Wrong LBG-ID event details",
    "fields": [
      [
        "event_valid",
        0,
        1
      ],
      [
        "event_flow_sign",
        1,
        36
      ]
    ]
  },
  "fllb_flows_instrumentation_register": {
    "type": "register",
    "block": "fllb",
    "width": 50,
    "desc": "Active flows instrumentation register",
    "fields": [
      [
        "active_flows_count",
        0,
        15
      ],
      [
        "active_flows_max",
        15,
        15
      ],
      [
        "elephant_flows_count",
        30,
        10
      ],
      [
        "elephant_flows_max",
        40,
        10
      ]
    ]
  },
  "fllb_status_register": {
    "type": "register",
    "block": "fllb",
    "width": 1,
    "desc": "Initialization status reigster",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "fllb_iflb_em_per_bank_reg": {
    "type": "register",
    "block": "fllb",
    "width": 74,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "iflb_em_active_banks",
        0,
        1
      ],
      [
        "iflb_em_hash_key",
        1,
        72
      ],
      [
        "iflb_em_use_primitive_crc",
        73,
        1
      ]
    ]
  },
  "fllb_iflb_em_per_em_reg": {
    "type": "register",
    "block": "fllb",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "iflb_em_key_width",
        0,
        16
      ],
      [
        "iflb_em_auto_bubble_req",
        16,
        1
      ],
      [
        "iflb_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "fllb_iflb_em_cam_wm_max_reg": {
    "type": "register",
    "block": "fllb",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "iflb_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "fllb_iflb_em_bank_write_cntr_reg": {
    "type": "register",
    "block": "fllb",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "iflb_em_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "fllb_active_flows_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 117,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "active_flows_histogram_th0",
        0,
        15
      ],
      [
        "active_flows_histogram_th1",
        15,
        15
      ],
      [
        "active_flows_histogram_th2",
        30,
        15
      ],
      [
        "active_flows_histogram_th3",
        45,
        15
      ],
      [
        "active_flows_histogram_th4",
        60,
        15
      ],
      [
        "active_flows_histogram_th5",
        75,
        15
      ],
      [
        "active_flows_histogram_th6",
        90,
        15
      ],
      [
        "active_flows_histogram_time_interval",
        105,
        12
      ]
    ]
  },
  "fllb_active_flows_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "active_flows_histogram_value0",
        0,
        32
      ],
      [
        "active_flows_histogram_overflow0",
        32,
        1
      ],
      [
        "active_flows_histogram_value1",
        33,
        32
      ],
      [
        "active_flows_histogram_overflow1",
        65,
        1
      ],
      [
        "active_flows_histogram_value2",
        66,
        32
      ],
      [
        "active_flows_histogram_overflow2",
        98,
        1
      ],
      [
        "active_flows_histogram_value3",
        99,
        32
      ],
      [
        "active_flows_histogram_overflow3",
        131,
        1
      ],
      [
        "active_flows_histogram_value4",
        132,
        32
      ],
      [
        "active_flows_histogram_overflow4",
        164,
        1
      ],
      [
        "active_flows_histogram_value5",
        165,
        32
      ],
      [
        "active_flows_histogram_overflow5",
        197,
        1
      ],
      [
        "active_flows_histogram_value6",
        198,
        32
      ],
      [
        "active_flows_histogram_overflow6",
        230,
        1
      ],
      [
        "active_flows_histogram_value7",
        231,
        32
      ],
      [
        "active_flows_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_active_flows_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 47,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "active_flows_histogram_max_wmk",
        0,
        15
      ],
      [
        "active_flows_histogram_max_wmk_time",
        15,
        32
      ]
    ]
  },
  "fllb_active_elephant_flows_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 82,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "active_elephant_flows_histogram_th0",
        0,
        10
      ],
      [
        "active_elephant_flows_histogram_th1",
        10,
        10
      ],
      [
        "active_elephant_flows_histogram_th2",
        20,
        10
      ],
      [
        "active_elephant_flows_histogram_th3",
        30,
        10
      ],
      [
        "active_elephant_flows_histogram_th4",
        40,
        10
      ],
      [
        "active_elephant_flows_histogram_th5",
        50,
        10
      ],
      [
        "active_elephant_flows_histogram_th6",
        60,
        10
      ],
      [
        "active_elephant_flows_histogram_time_interval",
        70,
        12
      ]
    ]
  },
  "fllb_active_elephant_flows_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "active_elephant_flows_histogram_value0",
        0,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow0",
        32,
        1
      ],
      [
        "active_elephant_flows_histogram_value1",
        33,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow1",
        65,
        1
      ],
      [
        "active_elephant_flows_histogram_value2",
        66,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow2",
        98,
        1
      ],
      [
        "active_elephant_flows_histogram_value3",
        99,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow3",
        131,
        1
      ],
      [
        "active_elephant_flows_histogram_value4",
        132,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow4",
        164,
        1
      ],
      [
        "active_elephant_flows_histogram_value5",
        165,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow5",
        197,
        1
      ],
      [
        "active_elephant_flows_histogram_value6",
        198,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow6",
        230,
        1
      ],
      [
        "active_elephant_flows_histogram_value7",
        231,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_active_elephant_flows_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 42,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "active_elephant_flows_histogram_max_wmk",
        0,
        10
      ],
      [
        "active_elephant_flows_histogram_max_wmk_time",
        10,
        32
      ]
    ]
  },
  "fllb_elephant_flow_size_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 224,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "elephant_flow_size_histogram_th0",
        0,
        32
      ],
      [
        "elephant_flow_size_histogram_th1",
        32,
        32
      ],
      [
        "elephant_flow_size_histogram_th2",
        64,
        32
      ],
      [
        "elephant_flow_size_histogram_th3",
        96,
        32
      ],
      [
        "elephant_flow_size_histogram_th4",
        128,
        32
      ],
      [
        "elephant_flow_size_histogram_th5",
        160,
        32
      ],
      [
        "elephant_flow_size_histogram_th6",
        192,
        32
      ]
    ]
  },
  "fllb_elephant_flow_size_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "elephant_flow_size_histogram_value0",
        0,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow0",
        32,
        1
      ],
      [
        "elephant_flow_size_histogram_value1",
        33,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow1",
        65,
        1
      ],
      [
        "elephant_flow_size_histogram_value2",
        66,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow2",
        98,
        1
      ],
      [
        "elephant_flow_size_histogram_value3",
        99,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow3",
        131,
        1
      ],
      [
        "elephant_flow_size_histogram_value4",
        132,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow4",
        164,
        1
      ],
      [
        "elephant_flow_size_histogram_value5",
        165,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow5",
        197,
        1
      ],
      [
        "elephant_flow_size_histogram_value6",
        198,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow6",
        230,
        1
      ],
      [
        "elephant_flow_size_histogram_value7",
        231,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_elephant_flow_size_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 64,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "elephant_flow_size_histogram_max_wmk",
        0,
        32
      ],
      [
        "elephant_flow_size_histogram_max_wmk_time",
        32,
        32
      ]
    ]
  },
  "fllb_elephant_flow_packet_count_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 168,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "elephant_flow_packet_count_histogram_th0",
        0,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th1",
        24,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th2",
        48,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th3",
        72,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th4",
        96,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th5",
        120,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th6",
        144,
        24
      ]
    ]
  },
  "fllb_elephant_flow_packet_count_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "elephant_flow_packet_count_histogram_value0",
        0,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow0",
        32,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value1",
        33,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow1",
        65,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value2",
        66,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow2",
        98,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value3",
        99,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow3",
        131,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value4",
        132,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow4",
        164,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value5",
        165,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow5",
        197,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value6",
        198,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow6",
        230,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value7",
        231,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_elephant_flow_packet_count_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 56,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "elephant_flow_packet_count_histogram_max_wmk",
        0,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_max_wmk_time",
        24,
        32
      ]
    ]
  },
  "fllb_elephant_flow_duration_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 168,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "elephant_flow_duration_histogram_th0",
        0,
        24
      ],
      [
        "elephant_flow_duration_histogram_th1",
        24,
        24
      ],
      [
        "elephant_flow_duration_histogram_th2",
        48,
        24
      ],
      [
        "elephant_flow_duration_histogram_th3",
        72,
        24
      ],
      [
        "elephant_flow_duration_histogram_th4",
        96,
        24
      ],
      [
        "elephant_flow_duration_histogram_th5",
        120,
        24
      ],
      [
        "elephant_flow_duration_histogram_th6",
        144,
        24
      ]
    ]
  },
  "fllb_elephant_flow_duration_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "elephant_flow_duration_histogram_value0",
        0,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow0",
        32,
        1
      ],
      [
        "elephant_flow_duration_histogram_value1",
        33,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow1",
        65,
        1
      ],
      [
        "elephant_flow_duration_histogram_value2",
        66,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow2",
        98,
        1
      ],
      [
        "elephant_flow_duration_histogram_value3",
        99,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow3",
        131,
        1
      ],
      [
        "elephant_flow_duration_histogram_value4",
        132,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow4",
        164,
        1
      ],
      [
        "elephant_flow_duration_histogram_value5",
        165,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow5",
        197,
        1
      ],
      [
        "elephant_flow_duration_histogram_value6",
        198,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow6",
        230,
        1
      ],
      [
        "elephant_flow_duration_histogram_value7",
        231,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_elephant_flow_duration_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 56,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "elephant_flow_duration_histogram_max_wmk",
        0,
        24
      ],
      [
        "elephant_flow_duration_histogram_max_wmk_time",
        24,
        32
      ]
    ]
  },
  "fllb_flow_arrival_rate_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 122,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "flow_arrival_rate_histogram_th0",
        0,
        15
      ],
      [
        "flow_arrival_rate_histogram_th1",
        15,
        15
      ],
      [
        "flow_arrival_rate_histogram_th2",
        30,
        15
      ],
      [
        "flow_arrival_rate_histogram_th3",
        45,
        15
      ],
      [
        "flow_arrival_rate_histogram_th4",
        60,
        15
      ],
      [
        "flow_arrival_rate_histogram_th5",
        75,
        15
      ],
      [
        "flow_arrival_rate_histogram_th6",
        90,
        15
      ],
      [
        "flow_arrival_rate_histogram_time_interval",
        105,
        17
      ]
    ]
  },
  "fllb_flow_arrival_rate_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "flow_arrival_rate_histogram_value0",
        0,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow0",
        32,
        1
      ],
      [
        "flow_arrival_rate_histogram_value1",
        33,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow1",
        65,
        1
      ],
      [
        "flow_arrival_rate_histogram_value2",
        66,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow2",
        98,
        1
      ],
      [
        "flow_arrival_rate_histogram_value3",
        99,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow3",
        131,
        1
      ],
      [
        "flow_arrival_rate_histogram_value4",
        132,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow4",
        164,
        1
      ],
      [
        "flow_arrival_rate_histogram_value5",
        165,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow5",
        197,
        1
      ],
      [
        "flow_arrival_rate_histogram_value6",
        198,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow6",
        230,
        1
      ],
      [
        "flow_arrival_rate_histogram_value7",
        231,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_flow_arrival_rate_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 47,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "flow_arrival_rate_histogram_max_wmk",
        0,
        15
      ],
      [
        "flow_arrival_rate_histogram_max_wmk_time",
        15,
        32
      ]
    ]
  },
  "fllb_flowlet_inter_arrival_time_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 91,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "flowlet_inter_arrival_time_histogram_th0",
        0,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th1",
        13,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th2",
        26,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th3",
        39,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th4",
        52,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th5",
        65,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th6",
        78,
        13
      ]
    ]
  },
  "fllb_flowlet_inter_arrival_time_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "flowlet_inter_arrival_time_histogram_value0",
        0,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow0",
        32,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value1",
        33,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow1",
        65,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value2",
        66,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow2",
        98,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value3",
        99,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow3",
        131,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value4",
        132,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow4",
        164,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value5",
        165,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow5",
        197,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value6",
        198,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow6",
        230,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value7",
        231,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_flowlet_inter_arrival_time_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 45,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "flowlet_inter_arrival_time_histogram_max_wmk",
        0,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_max_wmk_time",
        13,
        32
      ]
    ]
  },
  "fllb_flowlet_size_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 112,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "flowlet_size_histogram_th0",
        0,
        16
      ],
      [
        "flowlet_size_histogram_th1",
        16,
        16
      ],
      [
        "flowlet_size_histogram_th2",
        32,
        16
      ],
      [
        "flowlet_size_histogram_th3",
        48,
        16
      ],
      [
        "flowlet_size_histogram_th4",
        64,
        16
      ],
      [
        "flowlet_size_histogram_th5",
        80,
        16
      ],
      [
        "flowlet_size_histogram_th6",
        96,
        16
      ]
    ]
  },
  "fllb_flowlet_size_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "flowlet_size_histogram_value0",
        0,
        32
      ],
      [
        "flowlet_size_histogram_overflow0",
        32,
        1
      ],
      [
        "flowlet_size_histogram_value1",
        33,
        32
      ],
      [
        "flowlet_size_histogram_overflow1",
        65,
        1
      ],
      [
        "flowlet_size_histogram_value2",
        66,
        32
      ],
      [
        "flowlet_size_histogram_overflow2",
        98,
        1
      ],
      [
        "flowlet_size_histogram_value3",
        99,
        32
      ],
      [
        "flowlet_size_histogram_overflow3",
        131,
        1
      ],
      [
        "flowlet_size_histogram_value4",
        132,
        32
      ],
      [
        "flowlet_size_histogram_overflow4",
        164,
        1
      ],
      [
        "flowlet_size_histogram_value5",
        165,
        32
      ],
      [
        "flowlet_size_histogram_overflow5",
        197,
        1
      ],
      [
        "flowlet_size_histogram_value6",
        198,
        32
      ],
      [
        "flowlet_size_histogram_overflow6",
        230,
        1
      ],
      [
        "flowlet_size_histogram_value7",
        231,
        32
      ],
      [
        "flowlet_size_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_flowlet_size_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 48,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "flowlet_size_histogram_max_wmk",
        0,
        16
      ],
      [
        "flowlet_size_histogram_max_wmk_time",
        16,
        32
      ]
    ]
  },
  "fllb_elephant_packet_size_histogram_cfg": {
    "type": "register",
    "block": "fllb",
    "width": 98,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "elephant_packet_size_histogram_th0",
        0,
        14
      ],
      [
        "elephant_packet_size_histogram_th1",
        14,
        14
      ],
      [
        "elephant_packet_size_histogram_th2",
        28,
        14
      ],
      [
        "elephant_packet_size_histogram_th3",
        42,
        14
      ],
      [
        "elephant_packet_size_histogram_th4",
        56,
        14
      ],
      [
        "elephant_packet_size_histogram_th5",
        70,
        14
      ],
      [
        "elephant_packet_size_histogram_th6",
        84,
        14
      ]
    ]
  },
  "fllb_elephant_packet_size_histogram_status": {
    "type": "register",
    "block": "fllb",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "elephant_packet_size_histogram_value0",
        0,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow0",
        32,
        1
      ],
      [
        "elephant_packet_size_histogram_value1",
        33,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow1",
        65,
        1
      ],
      [
        "elephant_packet_size_histogram_value2",
        66,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow2",
        98,
        1
      ],
      [
        "elephant_packet_size_histogram_value3",
        99,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow3",
        131,
        1
      ],
      [
        "elephant_packet_size_histogram_value4",
        132,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow4",
        164,
        1
      ],
      [
        "elephant_packet_size_histogram_value5",
        165,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow5",
        197,
        1
      ],
      [
        "elephant_packet_size_histogram_value6",
        198,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow6",
        230,
        1
      ],
      [
        "elephant_packet_size_histogram_value7",
        231,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_elephant_packet_size_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb",
    "width": 46,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "elephant_packet_size_histogram_max_wmk",
        0,
        14
      ],
      [
        "elephant_packet_size_histogram_max_wmk_time",
        14,
        32
      ]
    ]
  },
  "fllb_fllb_control_code_map": {
    "type": "memory",
    "block": "fllb",
    "width": 6,
    "desc": "Mapping of the 3b FLLB Control code from PD to properties",
    "fields": [
      [
        "force_elephant",
        0,
        1
      ],
      [
        "disable_elephant",
        1,
        1
      ],
      [
        "disable_slb",
        2,
        1
      ],
      [
        "ecmp_only",
        3,
        1
      ],
      [
        "invert_count_type",
        4,
        1
      ],
      [
        "toggle_aging_th",
        5,
        1
      ]
    ]
  },
  "fllb_link2_dsp_table": {
    "type": "memory",
    "block": "fllb",
    "width": 13,
    "desc": "Link-to-DSP mapping table, entry per spine link",
    "fields": [
      [
        "link_map",
        0,
        13
      ]
    ]
  },
  "fllb_if_source_port_config": {
    "type": "memory",
    "block": "fllb",
    "width": 4,
    "desc": "Configuration per source port",
    "fields": [
      [
        "np_header_size",
        0,
        4
      ]
    ]
  },
  "fllb_svc_fbm": {
    "type": "memory",
    "block": "fllb",
    "width": 16,
    "desc": "SVC Free buffer manager memory, each entry represents 16 consecutive SVCs (total 32*16 = 512 SVCs)",
    "fields": [
      [
        "fbm_row",
        0,
        16
      ]
    ]
  },
  "fllb_iflb_fbm": {
    "type": "memory",
    "block": "fllb",
    "width": 64,
    "desc": "IFDB entries free buffer manager memory, each entry represets 64 consecutive IFDB flow entries (total 128*64 = 8192 entries)",
    "fields": [
      [
        "iflb_fbm_row",
        0,
        64
      ]
    ]
  },
  "fllb_iflb_data": {
    "type": "memory",
    "block": "fllb",
    "width": 74,
    "desc": "IFDB data memory per flow",
    "fields": [
      [
        "entry_valid",
        0,
        1
      ],
      [
        "lbg_id",
        1,
        9
      ],
      [
        "toggle_aging_th",
        10,
        1
      ],
      [
        "last_packet_time",
        11,
        13
      ],
      [
        "elephant_status",
        24,
        2
      ],
      [
        "fabric_link",
        26,
        6
      ],
      [
        "invalid_fabric_link",
        32,
        1
      ],
      [
        "slb_voq_context",
        33,
        9
      ],
      [
        "rate",
        42,
        16
      ],
      [
        "flowlet_byte_count",
        58,
        16
      ]
    ]
  },
  "fllb_iflb_data_em_index": {
    "type": "memory",
    "block": "fllb",
    "width": 15,
    "desc": "IFDB EM Index memory per flow",
    "fields": [
      [
        "em_index",
        0,
        15
      ]
    ]
  },
  "fllb_elephant_table": {
    "type": "memory",
    "block": "fllb",
    "width": 81,
    "desc": "Data on elephant flows for instrumentation",
    "fields": [
      [
        "active",
        0,
        1
      ],
      [
        "init_timestamp",
        1,
        24
      ],
      [
        "byte_count",
        25,
        32
      ],
      [
        "packet_count",
        57,
        24
      ]
    ]
  },
  "fllb_pd_fifo": {
    "type": "memory",
    "block": "fllb",
    "width": 147,
    "desc": "PD FIFO memory",
    "fields": [
      [
        "pd",
        0,
        147
      ]
    ]
  },
  "fllb_lbg_table": {
    "type": "memory",
    "block": "fllb",
    "width": 66,
    "desc": "Properties per LBG-ID, entry selected based on each flow's LBG-ID",
    "fields": [
      [
        "eligible_links_bitmap",
        0,
        64
      ],
      [
        "flb_enable",
        64,
        1
      ],
      [
        "slb_enable",
        65,
        1
      ]
    ]
  },
  "fllb_lbg_far_end_links_up_table": {
    "type": "memory",
    "block": "fllb",
    "width": 36,
    "desc": "Far-End Links up table, entry per LBG-ID selected based on each flow's LBG-ID",
    "fields": [
      [
        "far_end_links_up_bitmap",
        0,
        36
      ]
    ]
  },
  "fllb_iflb_em_verifier": {
    "type": "memory",
    "block": "fllb",
    "width": 92,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "iflb_em_verifier_data",
        0,
        92
      ]
    ]
  },
  "fllb_iflb_em_valid": {
    "type": "memory",
    "block": "fllb",
    "width": 2,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "iflb_em_valid_data",
        0,
        2
      ]
    ]
  },
  "fllb_iflb_em_cam": {
    "type": "memory",
    "block": "fllb",
    "width": 36,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "iflb_em_cam_payload",
        0,
        13
      ],
      [
        "iflb_em_cam_key",
        13,
        36
      ],
      [
        "iflb_em_cam_valid",
        49,
        1
      ]
    ]
  },
  "fllb_fabric_slice_interrupt_register": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "fllb_fabric_slice_mem_protect_interrupt": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "fllb_fabric_slice_mem_protect_interrupt_test": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "fllb_fabric_slice_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 22,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "iflb_fbm0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "iflb_fbm1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "iflb_data0_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "iflb_data1_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "iflb_data_em_index0_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "iflb_data_em_index1_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "elephant_table_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pd_fifo_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "iflb_em_verifier0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "iflb_em_verifier1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "iflb_em_verifier2_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "iflb_em_verifier3_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "iflb_em_verifier4_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "iflb_em_verifier5_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "iflb_em_verifier6_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "iflb_em_verifier7_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "iflb_em_verifier8_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "iflb_em_verifier9_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "iflb_em_verifier10_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "iflb_em_verifier11_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "iflb_em_verifier12_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "iflb_em_verifier13_ecc_1b_err_interrupt_mask",
        21,
        1
      ]
    ]
  },
  "fllb_fabric_slice_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 22,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "iflb_fbm0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "iflb_fbm1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "iflb_data0_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "iflb_data1_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "iflb_data_em_index0_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "iflb_data_em_index1_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "elephant_table_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pd_fifo_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "iflb_em_verifier0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "iflb_em_verifier1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "iflb_em_verifier2_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "iflb_em_verifier3_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "iflb_em_verifier4_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "iflb_em_verifier5_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "iflb_em_verifier6_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "iflb_em_verifier7_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "iflb_em_verifier8_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "iflb_em_verifier9_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "iflb_em_verifier10_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "iflb_em_verifier11_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "iflb_em_verifier12_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "iflb_em_verifier13_ecc_2b_err_interrupt_mask",
        21,
        1
      ]
    ]
  },
  "fllb_fabric_slice_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 22,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "iflb_fbm0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "iflb_fbm1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "iflb_data0_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "iflb_data1_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "iflb_data_em_index0_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "iflb_data_em_index1_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "elephant_table_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "pd_fifo_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "iflb_em_verifier0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "iflb_em_verifier1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "iflb_em_verifier2_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "iflb_em_verifier3_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "iflb_em_verifier4_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "iflb_em_verifier5_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "iflb_em_verifier6_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "iflb_em_verifier7_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "iflb_em_verifier8_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "iflb_em_verifier9_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "iflb_em_verifier10_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "iflb_em_verifier11_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "iflb_em_verifier12_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "iflb_em_verifier13_ecc_1b_err_initiate",
        21,
        1
      ]
    ]
  },
  "fllb_fabric_slice_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 22,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "iflb_fbm0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "iflb_fbm1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "iflb_data0_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "iflb_data1_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "iflb_data_em_index0_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "iflb_data_em_index1_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "elephant_table_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "pd_fifo_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "iflb_em_verifier0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "iflb_em_verifier1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "iflb_em_verifier2_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "iflb_em_verifier3_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "iflb_em_verifier4_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "iflb_em_verifier5_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "iflb_em_verifier6_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "iflb_em_verifier7_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "iflb_em_verifier8_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "iflb_em_verifier9_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "iflb_em_verifier10_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "iflb_em_verifier11_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "iflb_em_verifier12_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "iflb_em_verifier13_ecc_2b_err_initiate",
        21,
        1
      ]
    ]
  },
  "fllb_fabric_slice_mem_protect_err_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 22,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "iflb_fbm0_err_int",
        0,
        1
      ],
      [
        "iflb_fbm1_err_int",
        1,
        1
      ],
      [
        "iflb_data0_err_int",
        2,
        1
      ],
      [
        "iflb_data1_err_int",
        3,
        1
      ],
      [
        "iflb_data_em_index0_err_int",
        4,
        1
      ],
      [
        "iflb_data_em_index1_err_int",
        5,
        1
      ],
      [
        "elephant_table_err_int",
        6,
        1
      ],
      [
        "pd_fifo_err_int",
        7,
        1
      ],
      [
        "iflb_em_verifier0_err_int",
        8,
        1
      ],
      [
        "iflb_em_verifier1_err_int",
        9,
        1
      ],
      [
        "iflb_em_verifier2_err_int",
        10,
        1
      ],
      [
        "iflb_em_verifier3_err_int",
        11,
        1
      ],
      [
        "iflb_em_verifier4_err_int",
        12,
        1
      ],
      [
        "iflb_em_verifier5_err_int",
        13,
        1
      ],
      [
        "iflb_em_verifier6_err_int",
        14,
        1
      ],
      [
        "iflb_em_verifier7_err_int",
        15,
        1
      ],
      [
        "iflb_em_verifier8_err_int",
        16,
        1
      ],
      [
        "iflb_em_verifier9_err_int",
        17,
        1
      ],
      [
        "iflb_em_verifier10_err_int",
        18,
        1
      ],
      [
        "iflb_em_verifier11_err_int",
        19,
        1
      ],
      [
        "iflb_em_verifier12_err_int",
        20,
        1
      ],
      [
        "iflb_em_verifier13_err_int",
        21,
        1
      ]
    ]
  },
  "fllb_fabric_slice_selected_ser_error_info": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "fllb_fabric_slice_ser_error_debug_configuration": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "fllb_fabric_slice_ecc_1b_err_debug": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "fllb_fabric_slice_ecc_2b_err_debug": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "fllb_fabric_slice_tcam_scan_period_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "fllb_fabric_slice_counter_timer": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "fllb_fabric_slice_counter_timer_trigger_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "fllb_fabric_slice_memory_access_timeout": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "fllb_fabric_slice_broadcast_config_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "fllb_fabric_slice_memory_prot_bypass": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "fllb_fabric_slice_soft_reset_configuration": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "fllb_fabric_slice_mbist_configuration": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "fllb_fabric_slice_power_down_configuration": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "fllb_fabric_slice_spare_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "fllb_fabric_slice_pmro_ctrl": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "fllb_fabric_slice_pmro_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "fllb_fabric_slice_mirror_bus_conf_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "fllb_fabric_slice_mirror_bus_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "fllb_fabric_slice_device_time_offset_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "fllb_fabric_slice_slice_mode_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 4,
    "desc": "Slice mode configuration",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ]
    ]
  },
  "fllb_fabric_slice_fifo_cbt_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 12,
    "desc": "Thresholds that control when input to the block is stopped in order to avoid overflow",
    "fields": [
      [
        "pd_fifo_almost_full_th",
        0,
        6
      ],
      [
        "cbt_almost_full_th",
        6,
        6
      ]
    ]
  },
  "fllb_fabric_slice_general_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 24,
    "desc": "General confurations",
    "fields": [
      [
        "is_overlay",
        0,
        1
      ],
      [
        "default_count_type",
        1,
        1
      ],
      [
        "first_flowlet_always_ecmp",
        2,
        1
      ],
      [
        "first_flowlet_ecmp_from_iflb_util_percent",
        3,
        4
      ],
      [
        "ecmp_mask_local_failed_links",
        7,
        1
      ],
      [
        "ecmp_mask_far_failed_links",
        8,
        1
      ],
      [
        "flowlet_mask_local_failed_links",
        9,
        1
      ],
      [
        "flowlet_mask_far_failed_links",
        10,
        1
      ],
      [
        "last_packet_time_resolution",
        11,
        4
      ],
      [
        "init_timestamp_resolution",
        15,
        3
      ],
      [
        "flowlet_byte_count_resolution",
        18,
        4
      ],
      [
        "disable_aging_by_tp",
        22,
        1
      ],
      [
        "promote_to_elephant_without_gap",
        23,
        1
      ]
    ]
  },
  "fllb_fabric_slice_tc_mapping_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 49,
    "desc": "TC Mapping configuration",
    "fields": [
      [
        "map_tc_only_for_lbg_id",
        0,
        1
      ],
      [
        "elephant_tc_mapping",
        1,
        24
      ],
      [
        "mice_tc_mapping",
        25,
        24
      ]
    ]
  },
  "fllb_fabric_slice_enabled_svc_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 44,
    "desc": "SVC Enabling configuration",
    "fields": [
      [
        "svc_fbm_active",
        0,
        1
      ],
      [
        "svc_fbm_working_mode",
        1,
        1
      ],
      [
        "num_of_enabled_svc",
        2,
        10
      ],
      [
        "enabled_svc_lines",
        12,
        32
      ]
    ]
  },
  "fllb_fabric_slice_enable_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 4,
    "desc": "Features enable configuration",
    "fields": [
      [
        "process_all_flows",
        0,
        1
      ],
      [
        "bypass_mode",
        1,
        2
      ],
      [
        "slb_enabled",
        3,
        1
      ]
    ]
  },
  "fllb_fabric_slice_min_packet_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 28,
    "desc": "Threshold configurations for minimal packet size to be ignored",
    "fields": [
      [
        "min_packet_size_to_alloc_iflb_entry",
        0,
        14
      ],
      [
        "min_packet_size_to_update_rate",
        14,
        14
      ]
    ]
  },
  "fllb_fabric_slice_rate_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 35,
    "desc": "Rate configuration for determining flow as elephant",
    "fields": [
      [
        "flow_rate_resolution",
        0,
        4
      ],
      [
        "leaky_bucket_rate",
        4,
        5
      ],
      [
        "elephant_flow_th",
        9,
        16
      ],
      [
        "elephant_flow_packets_th",
        25,
        10
      ]
    ]
  },
  "fllb_fabric_slice_time_th_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 22,
    "desc": "Time threshold configurations",
    "fields": [
      [
        "flowlet_gap_th",
        0,
        12
      ],
      [
        "iflb_full_time_th",
        12,
        10
      ]
    ]
  },
  "fllb_fabric_slice_aging_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 45,
    "desc": "Aging configurations",
    "fields": [
      [
        "disable_aging",
        0,
        1
      ],
      [
        "expire_toggled_flows",
        1,
        1
      ],
      [
        "same_entry_minimal_aging_interval",
        2,
        15
      ],
      [
        "same_entry_maximal_aging_interval",
        17,
        15
      ],
      [
        "num_of_entries_to_update_to_enter_bubble",
        32,
        13
      ]
    ]
  },
  "fllb_fabric_slice_aging_th_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 52,
    "desc": "Aging threshold configuration",
    "fields": [
      [
        "flow_aging_not_elephant_th",
        0,
        13
      ],
      [
        "flow_aging_expired_elephant_th",
        13,
        13
      ],
      [
        "flow_aging_slb_elephant_th",
        26,
        13
      ],
      [
        "flow_toggle_aging_th",
        39,
        13
      ]
    ]
  },
  "fllb_fabric_slice_iflb_fbm_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 148,
    "desc": "IFDB FBM initialization configurations Each buffer represents one of the 4K flows",
    "fields": [
      [
        "iflb_fbm_active",
        0,
        1
      ],
      [
        "fbm_working_mode",
        1,
        1
      ],
      [
        "fbm_total_buffers",
        2,
        14
      ],
      [
        "fbm_not_empty_entry",
        16,
        128
      ],
      [
        "fbm_almost_empty_th",
        144,
        4
      ]
    ]
  },
  "fllb_fabric_slice_ibm_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 21,
    "desc": "In-Bound Mirror commands for Tetration",
    "fields": [
      [
        "new_flow_ibm_cmd",
        0,
        5
      ],
      [
        "new_elephant_ibm_cmd",
        5,
        5
      ],
      [
        "fin_ibm_cmd",
        10,
        5
      ],
      [
        "elephant_fin_ibm_cmd",
        15,
        5
      ],
      [
        "overwrite_mirror",
        20,
        1
      ]
    ]
  },
  "fllb_fabric_slice_cpu_read": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 36,
    "desc": "CPU Read register Writing to this register will trigger CPU read process",
    "fields": [
      [
        "cpu_read_flow_sign",
        0,
        36
      ]
    ]
  },
  "fllb_fabric_slice_cpu_read_result_iflb": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 102,
    "desc": "CPU Read result from IFDB",
    "fields": [
      [
        "cpu_read_result_iflb_entry",
        0,
        89
      ],
      [
        "cpu_read_result_iflb_pointer",
        89,
        13
      ]
    ]
  },
  "fllb_fabric_slice_cpu_read_result_elephant": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 81,
    "desc": "CPU Read result from elephant table",
    "fields": [
      [
        "cpu_read_result_elephant_entry",
        0,
        81
      ]
    ]
  },
  "fllb_fabric_slice_cpu_read_result_misc": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 36,
    "desc": "CPU Read result details",
    "fields": [
      [
        "cpu_read_result_ready",
        0,
        2
      ],
      [
        "cpu_read_result_hit",
        2,
        2
      ],
      [
        "cpu_read_result_time",
        4,
        32
      ]
    ]
  },
  "fllb_fabric_slice_cpu_read_mask_counter_th_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 5,
    "desc": "CPU Read auxiliary configuration",
    "fields": [
      [
        "cpu_read_mask_counter_th",
        0,
        5
      ]
    ]
  },
  "fllb_fabric_slice_bubble_timer_config": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 16,
    "desc": "Bubble threshold times configurations",
    "fields": [
      [
        "bubble_cpu_read_th",
        0,
        16
      ]
    ]
  },
  "fllb_fabric_slice_links_up_table": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 36,
    "desc": "Links up status",
    "fields": [
      [
        "links_up",
        0,
        36
      ]
    ]
  },
  "fllb_fabric_slice_debug_counters": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 96,
    "desc": "Debug Counters",
    "fields": [
      [
        "cbt_not_ready",
        0,
        32
      ],
      [
        "rx_counters_stop0",
        32,
        32
      ],
      [
        "rx_counters_stop1",
        64,
        32
      ]
    ]
  },
  "fllb_fabric_slice_flows_instrumentation_register": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 50,
    "desc": "Active flows instrumentation register",
    "fields": [
      [
        "active_flows_count",
        0,
        15
      ],
      [
        "active_flows_max",
        15,
        15
      ],
      [
        "elephant_flows_count",
        30,
        10
      ],
      [
        "elephant_flows_max",
        40,
        10
      ]
    ]
  },
  "fllb_fabric_slice_status_register": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 1,
    "desc": "Initialization status reigster",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "fllb_fabric_slice_iflb_em_per_bank_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 74,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "iflb_em_active_banks",
        0,
        1
      ],
      [
        "iflb_em_hash_key",
        1,
        72
      ],
      [
        "iflb_em_use_primitive_crc",
        73,
        1
      ]
    ]
  },
  "fllb_fabric_slice_iflb_em_per_em_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "iflb_em_key_width",
        0,
        16
      ],
      [
        "iflb_em_auto_bubble_req",
        16,
        1
      ],
      [
        "iflb_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "fllb_fabric_slice_iflb_em_cam_wm_max_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "iflb_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "fllb_fabric_slice_iflb_em_bank_write_cntr_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "iflb_em_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "fllb_fabric_slice_active_flows_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 117,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "active_flows_histogram_th0",
        0,
        15
      ],
      [
        "active_flows_histogram_th1",
        15,
        15
      ],
      [
        "active_flows_histogram_th2",
        30,
        15
      ],
      [
        "active_flows_histogram_th3",
        45,
        15
      ],
      [
        "active_flows_histogram_th4",
        60,
        15
      ],
      [
        "active_flows_histogram_th5",
        75,
        15
      ],
      [
        "active_flows_histogram_th6",
        90,
        15
      ],
      [
        "active_flows_histogram_time_interval",
        105,
        12
      ]
    ]
  },
  "fllb_fabric_slice_active_flows_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "active_flows_histogram_value0",
        0,
        32
      ],
      [
        "active_flows_histogram_overflow0",
        32,
        1
      ],
      [
        "active_flows_histogram_value1",
        33,
        32
      ],
      [
        "active_flows_histogram_overflow1",
        65,
        1
      ],
      [
        "active_flows_histogram_value2",
        66,
        32
      ],
      [
        "active_flows_histogram_overflow2",
        98,
        1
      ],
      [
        "active_flows_histogram_value3",
        99,
        32
      ],
      [
        "active_flows_histogram_overflow3",
        131,
        1
      ],
      [
        "active_flows_histogram_value4",
        132,
        32
      ],
      [
        "active_flows_histogram_overflow4",
        164,
        1
      ],
      [
        "active_flows_histogram_value5",
        165,
        32
      ],
      [
        "active_flows_histogram_overflow5",
        197,
        1
      ],
      [
        "active_flows_histogram_value6",
        198,
        32
      ],
      [
        "active_flows_histogram_overflow6",
        230,
        1
      ],
      [
        "active_flows_histogram_value7",
        231,
        32
      ],
      [
        "active_flows_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_active_flows_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 47,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "active_flows_histogram_max_wmk",
        0,
        15
      ],
      [
        "active_flows_histogram_max_wmk_time",
        15,
        32
      ]
    ]
  },
  "fllb_fabric_slice_active_elephant_flows_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 82,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "active_elephant_flows_histogram_th0",
        0,
        10
      ],
      [
        "active_elephant_flows_histogram_th1",
        10,
        10
      ],
      [
        "active_elephant_flows_histogram_th2",
        20,
        10
      ],
      [
        "active_elephant_flows_histogram_th3",
        30,
        10
      ],
      [
        "active_elephant_flows_histogram_th4",
        40,
        10
      ],
      [
        "active_elephant_flows_histogram_th5",
        50,
        10
      ],
      [
        "active_elephant_flows_histogram_th6",
        60,
        10
      ],
      [
        "active_elephant_flows_histogram_time_interval",
        70,
        12
      ]
    ]
  },
  "fllb_fabric_slice_active_elephant_flows_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "active_elephant_flows_histogram_value0",
        0,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow0",
        32,
        1
      ],
      [
        "active_elephant_flows_histogram_value1",
        33,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow1",
        65,
        1
      ],
      [
        "active_elephant_flows_histogram_value2",
        66,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow2",
        98,
        1
      ],
      [
        "active_elephant_flows_histogram_value3",
        99,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow3",
        131,
        1
      ],
      [
        "active_elephant_flows_histogram_value4",
        132,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow4",
        164,
        1
      ],
      [
        "active_elephant_flows_histogram_value5",
        165,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow5",
        197,
        1
      ],
      [
        "active_elephant_flows_histogram_value6",
        198,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow6",
        230,
        1
      ],
      [
        "active_elephant_flows_histogram_value7",
        231,
        32
      ],
      [
        "active_elephant_flows_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_active_elephant_flows_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 42,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "active_elephant_flows_histogram_max_wmk",
        0,
        10
      ],
      [
        "active_elephant_flows_histogram_max_wmk_time",
        10,
        32
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_size_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 224,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "elephant_flow_size_histogram_th0",
        0,
        32
      ],
      [
        "elephant_flow_size_histogram_th1",
        32,
        32
      ],
      [
        "elephant_flow_size_histogram_th2",
        64,
        32
      ],
      [
        "elephant_flow_size_histogram_th3",
        96,
        32
      ],
      [
        "elephant_flow_size_histogram_th4",
        128,
        32
      ],
      [
        "elephant_flow_size_histogram_th5",
        160,
        32
      ],
      [
        "elephant_flow_size_histogram_th6",
        192,
        32
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_size_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "elephant_flow_size_histogram_value0",
        0,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow0",
        32,
        1
      ],
      [
        "elephant_flow_size_histogram_value1",
        33,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow1",
        65,
        1
      ],
      [
        "elephant_flow_size_histogram_value2",
        66,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow2",
        98,
        1
      ],
      [
        "elephant_flow_size_histogram_value3",
        99,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow3",
        131,
        1
      ],
      [
        "elephant_flow_size_histogram_value4",
        132,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow4",
        164,
        1
      ],
      [
        "elephant_flow_size_histogram_value5",
        165,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow5",
        197,
        1
      ],
      [
        "elephant_flow_size_histogram_value6",
        198,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow6",
        230,
        1
      ],
      [
        "elephant_flow_size_histogram_value7",
        231,
        32
      ],
      [
        "elephant_flow_size_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_size_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 64,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "elephant_flow_size_histogram_max_wmk",
        0,
        32
      ],
      [
        "elephant_flow_size_histogram_max_wmk_time",
        32,
        32
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_packet_count_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 168,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "elephant_flow_packet_count_histogram_th0",
        0,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th1",
        24,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th2",
        48,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th3",
        72,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th4",
        96,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th5",
        120,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_th6",
        144,
        24
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_packet_count_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "elephant_flow_packet_count_histogram_value0",
        0,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow0",
        32,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value1",
        33,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow1",
        65,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value2",
        66,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow2",
        98,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value3",
        99,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow3",
        131,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value4",
        132,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow4",
        164,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value5",
        165,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow5",
        197,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value6",
        198,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow6",
        230,
        1
      ],
      [
        "elephant_flow_packet_count_histogram_value7",
        231,
        32
      ],
      [
        "elephant_flow_packet_count_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_packet_count_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 56,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "elephant_flow_packet_count_histogram_max_wmk",
        0,
        24
      ],
      [
        "elephant_flow_packet_count_histogram_max_wmk_time",
        24,
        32
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_duration_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 168,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "elephant_flow_duration_histogram_th0",
        0,
        24
      ],
      [
        "elephant_flow_duration_histogram_th1",
        24,
        24
      ],
      [
        "elephant_flow_duration_histogram_th2",
        48,
        24
      ],
      [
        "elephant_flow_duration_histogram_th3",
        72,
        24
      ],
      [
        "elephant_flow_duration_histogram_th4",
        96,
        24
      ],
      [
        "elephant_flow_duration_histogram_th5",
        120,
        24
      ],
      [
        "elephant_flow_duration_histogram_th6",
        144,
        24
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_duration_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "elephant_flow_duration_histogram_value0",
        0,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow0",
        32,
        1
      ],
      [
        "elephant_flow_duration_histogram_value1",
        33,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow1",
        65,
        1
      ],
      [
        "elephant_flow_duration_histogram_value2",
        66,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow2",
        98,
        1
      ],
      [
        "elephant_flow_duration_histogram_value3",
        99,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow3",
        131,
        1
      ],
      [
        "elephant_flow_duration_histogram_value4",
        132,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow4",
        164,
        1
      ],
      [
        "elephant_flow_duration_histogram_value5",
        165,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow5",
        197,
        1
      ],
      [
        "elephant_flow_duration_histogram_value6",
        198,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow6",
        230,
        1
      ],
      [
        "elephant_flow_duration_histogram_value7",
        231,
        32
      ],
      [
        "elephant_flow_duration_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_elephant_flow_duration_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 56,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "elephant_flow_duration_histogram_max_wmk",
        0,
        24
      ],
      [
        "elephant_flow_duration_histogram_max_wmk_time",
        24,
        32
      ]
    ]
  },
  "fllb_fabric_slice_flow_arrival_rate_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 122,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "flow_arrival_rate_histogram_th0",
        0,
        15
      ],
      [
        "flow_arrival_rate_histogram_th1",
        15,
        15
      ],
      [
        "flow_arrival_rate_histogram_th2",
        30,
        15
      ],
      [
        "flow_arrival_rate_histogram_th3",
        45,
        15
      ],
      [
        "flow_arrival_rate_histogram_th4",
        60,
        15
      ],
      [
        "flow_arrival_rate_histogram_th5",
        75,
        15
      ],
      [
        "flow_arrival_rate_histogram_th6",
        90,
        15
      ],
      [
        "flow_arrival_rate_histogram_time_interval",
        105,
        17
      ]
    ]
  },
  "fllb_fabric_slice_flow_arrival_rate_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "flow_arrival_rate_histogram_value0",
        0,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow0",
        32,
        1
      ],
      [
        "flow_arrival_rate_histogram_value1",
        33,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow1",
        65,
        1
      ],
      [
        "flow_arrival_rate_histogram_value2",
        66,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow2",
        98,
        1
      ],
      [
        "flow_arrival_rate_histogram_value3",
        99,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow3",
        131,
        1
      ],
      [
        "flow_arrival_rate_histogram_value4",
        132,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow4",
        164,
        1
      ],
      [
        "flow_arrival_rate_histogram_value5",
        165,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow5",
        197,
        1
      ],
      [
        "flow_arrival_rate_histogram_value6",
        198,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow6",
        230,
        1
      ],
      [
        "flow_arrival_rate_histogram_value7",
        231,
        32
      ],
      [
        "flow_arrival_rate_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_flow_arrival_rate_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 47,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "flow_arrival_rate_histogram_max_wmk",
        0,
        15
      ],
      [
        "flow_arrival_rate_histogram_max_wmk_time",
        15,
        32
      ]
    ]
  },
  "fllb_fabric_slice_flowlet_inter_arrival_time_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 91,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "flowlet_inter_arrival_time_histogram_th0",
        0,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th1",
        13,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th2",
        26,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th3",
        39,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th4",
        52,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th5",
        65,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_th6",
        78,
        13
      ]
    ]
  },
  "fllb_fabric_slice_flowlet_inter_arrival_time_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "flowlet_inter_arrival_time_histogram_value0",
        0,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow0",
        32,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value1",
        33,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow1",
        65,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value2",
        66,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow2",
        98,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value3",
        99,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow3",
        131,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value4",
        132,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow4",
        164,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value5",
        165,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow5",
        197,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value6",
        198,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow6",
        230,
        1
      ],
      [
        "flowlet_inter_arrival_time_histogram_value7",
        231,
        32
      ],
      [
        "flowlet_inter_arrival_time_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_flowlet_inter_arrival_time_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 45,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "flowlet_inter_arrival_time_histogram_max_wmk",
        0,
        13
      ],
      [
        "flowlet_inter_arrival_time_histogram_max_wmk_time",
        13,
        32
      ]
    ]
  },
  "fllb_fabric_slice_flowlet_size_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 112,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "flowlet_size_histogram_th0",
        0,
        16
      ],
      [
        "flowlet_size_histogram_th1",
        16,
        16
      ],
      [
        "flowlet_size_histogram_th2",
        32,
        16
      ],
      [
        "flowlet_size_histogram_th3",
        48,
        16
      ],
      [
        "flowlet_size_histogram_th4",
        64,
        16
      ],
      [
        "flowlet_size_histogram_th5",
        80,
        16
      ],
      [
        "flowlet_size_histogram_th6",
        96,
        16
      ]
    ]
  },
  "fllb_fabric_slice_flowlet_size_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "flowlet_size_histogram_value0",
        0,
        32
      ],
      [
        "flowlet_size_histogram_overflow0",
        32,
        1
      ],
      [
        "flowlet_size_histogram_value1",
        33,
        32
      ],
      [
        "flowlet_size_histogram_overflow1",
        65,
        1
      ],
      [
        "flowlet_size_histogram_value2",
        66,
        32
      ],
      [
        "flowlet_size_histogram_overflow2",
        98,
        1
      ],
      [
        "flowlet_size_histogram_value3",
        99,
        32
      ],
      [
        "flowlet_size_histogram_overflow3",
        131,
        1
      ],
      [
        "flowlet_size_histogram_value4",
        132,
        32
      ],
      [
        "flowlet_size_histogram_overflow4",
        164,
        1
      ],
      [
        "flowlet_size_histogram_value5",
        165,
        32
      ],
      [
        "flowlet_size_histogram_overflow5",
        197,
        1
      ],
      [
        "flowlet_size_histogram_value6",
        198,
        32
      ],
      [
        "flowlet_size_histogram_overflow6",
        230,
        1
      ],
      [
        "flowlet_size_histogram_value7",
        231,
        32
      ],
      [
        "flowlet_size_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_flowlet_size_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 48,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "flowlet_size_histogram_max_wmk",
        0,
        16
      ],
      [
        "flowlet_size_histogram_max_wmk_time",
        16,
        32
      ]
    ]
  },
  "fllb_fabric_slice_elephant_packet_size_histogram_cfg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 98,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "elephant_packet_size_histogram_th0",
        0,
        14
      ],
      [
        "elephant_packet_size_histogram_th1",
        14,
        14
      ],
      [
        "elephant_packet_size_histogram_th2",
        28,
        14
      ],
      [
        "elephant_packet_size_histogram_th3",
        42,
        14
      ],
      [
        "elephant_packet_size_histogram_th4",
        56,
        14
      ],
      [
        "elephant_packet_size_histogram_th5",
        70,
        14
      ],
      [
        "elephant_packet_size_histogram_th6",
        84,
        14
      ]
    ]
  },
  "fllb_fabric_slice_elephant_packet_size_histogram_status": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "elephant_packet_size_histogram_value0",
        0,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow0",
        32,
        1
      ],
      [
        "elephant_packet_size_histogram_value1",
        33,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow1",
        65,
        1
      ],
      [
        "elephant_packet_size_histogram_value2",
        66,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow2",
        98,
        1
      ],
      [
        "elephant_packet_size_histogram_value3",
        99,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow3",
        131,
        1
      ],
      [
        "elephant_packet_size_histogram_value4",
        132,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow4",
        164,
        1
      ],
      [
        "elephant_packet_size_histogram_value5",
        165,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow5",
        197,
        1
      ],
      [
        "elephant_packet_size_histogram_value6",
        198,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow6",
        230,
        1
      ],
      [
        "elephant_packet_size_histogram_value7",
        231,
        32
      ],
      [
        "elephant_packet_size_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "fllb_fabric_slice_elephant_packet_size_histogram_max_wmk_reg": {
    "type": "register",
    "block": "fllb_fabric_slice",
    "width": 46,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "elephant_packet_size_histogram_max_wmk",
        0,
        14
      ],
      [
        "elephant_packet_size_histogram_max_wmk_time",
        14,
        32
      ]
    ]
  },
  "fllb_fabric_slice_fllb_control_code_map": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 6,
    "desc": "Mapping of the 3b FLLB Control code from PD to properties",
    "fields": [
      [
        "force_elephant",
        0,
        1
      ],
      [
        "disable_elephant",
        1,
        1
      ],
      [
        "disable_slb",
        2,
        1
      ],
      [
        "ecmp_only",
        3,
        1
      ],
      [
        "invert_count_type",
        4,
        1
      ],
      [
        "toggle_aging_th",
        5,
        1
      ]
    ]
  },
  "fllb_fabric_slice_if_source_port_config": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 4,
    "desc": "Configuration per source port",
    "fields": [
      [
        "np_header_size",
        0,
        4
      ]
    ]
  },
  "fllb_fabric_slice_svc_fbm": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 16,
    "desc": "SVC Free buffer manager memory, each entry represents 16 consecutive SVCs (total 32*16 = 512 SVCs)",
    "fields": [
      [
        "fbm_row",
        0,
        16
      ]
    ]
  },
  "fllb_fabric_slice_iflb_fbm": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 64,
    "desc": "IFDB entries free buffer manager memory, each entry represets 64 consecutive IFDB flow entries (total 128*64 = 8192 entries)",
    "fields": [
      [
        "iflb_fbm_row",
        0,
        64
      ]
    ]
  },
  "fllb_fabric_slice_iflb_data": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 74,
    "desc": "IFDB data memory per flow",
    "fields": [
      [
        "entry_valid",
        0,
        1
      ],
      [
        "lbg_id",
        1,
        9
      ],
      [
        "toggle_aging_th",
        10,
        1
      ],
      [
        "last_packet_time",
        11,
        13
      ],
      [
        "elephant_status",
        24,
        2
      ],
      [
        "fabric_link",
        26,
        6
      ],
      [
        "invalid_fabric_link",
        32,
        1
      ],
      [
        "slb_voq_context",
        33,
        9
      ],
      [
        "rate",
        42,
        16
      ],
      [
        "flowlet_byte_count",
        58,
        16
      ]
    ]
  },
  "fllb_fabric_slice_iflb_data_em_index": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 15,
    "desc": "IFDB EM Index memory per flow",
    "fields": [
      [
        "em_index",
        0,
        15
      ]
    ]
  },
  "fllb_fabric_slice_elephant_table": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 81,
    "desc": "Data on elephant flows for instrumentation",
    "fields": [
      [
        "active",
        0,
        1
      ],
      [
        "init_timestamp",
        1,
        24
      ],
      [
        "byte_count",
        25,
        32
      ],
      [
        "packet_count",
        57,
        24
      ]
    ]
  },
  "fllb_fabric_slice_pd_fifo": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 147,
    "desc": "PD FIFO memory",
    "fields": [
      [
        "pd",
        0,
        147
      ]
    ]
  },
  "fllb_fabric_slice_iflb_em_verifier": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 92,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "iflb_em_verifier_data",
        0,
        92
      ]
    ]
  },
  "fllb_fabric_slice_iflb_em_valid": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 2,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "iflb_em_valid_data",
        0,
        2
      ]
    ]
  },
  "fllb_fabric_slice_iflb_em_cam": {
    "type": "memory",
    "block": "fllb_fabric_slice",
    "width": 36,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "iflb_em_cam_payload",
        0,
        13
      ],
      [
        "iflb_em_cam_key",
        13,
        36
      ],
      [
        "iflb_em_cam_valid",
        49,
        1
      ]
    ]
  },
  "rx_counters_interrupt_register": {
    "type": "register",
    "block": "rx_counters",
    "width": 7,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "slice_interrupt_reg0_summary",
        1,
        1
      ],
      [
        "slice_interrupt_reg1_summary",
        2,
        1
      ],
      [
        "slice_interrupt_reg2_summary",
        3,
        1
      ],
      [
        "slice_interrupt_reg3_summary",
        4,
        1
      ],
      [
        "slice_interrupt_reg4_summary",
        5,
        1
      ],
      [
        "slice_interrupt_reg5_summary",
        6,
        1
      ]
    ]
  },
  "rx_counters_mem_protect_interrupt": {
    "type": "register",
    "block": "rx_counters",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rx_counters_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rx_counters",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rx_counters_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_counters",
    "width": 6,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "cbr_mem0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "cbr_mem1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "cbr_mem2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "cbr_mem3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cbr_mem4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "cbr_mem5_ecc_1b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "rx_counters_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_counters",
    "width": 6,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "cbr_mem0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "cbr_mem1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "cbr_mem2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "cbr_mem3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cbr_mem4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "cbr_mem5_ecc_2b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "rx_counters_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rx_counters",
    "width": 6,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "cbr_mem0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "cbr_mem1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "cbr_mem2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "cbr_mem3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "cbr_mem4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "cbr_mem5_ecc_1b_err_initiate",
        5,
        1
      ]
    ]
  },
  "rx_counters_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rx_counters",
    "width": 6,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "cbr_mem0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "cbr_mem1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "cbr_mem2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "cbr_mem3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "cbr_mem4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "cbr_mem5_ecc_2b_err_initiate",
        5,
        1
      ]
    ]
  },
  "rx_counters_mem_protect_err_status": {
    "type": "register",
    "block": "rx_counters",
    "width": 6,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "cbr_mem0_err_int",
        0,
        1
      ],
      [
        "cbr_mem1_err_int",
        1,
        1
      ],
      [
        "cbr_mem2_err_int",
        2,
        1
      ],
      [
        "cbr_mem3_err_int",
        3,
        1
      ],
      [
        "cbr_mem4_err_int",
        4,
        1
      ],
      [
        "cbr_mem5_err_int",
        5,
        1
      ]
    ]
  },
  "rx_counters_selected_ser_error_info": {
    "type": "register",
    "block": "rx_counters",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        4
      ],
      [
        "mem_err_type",
        4,
        2
      ]
    ]
  },
  "rx_counters_ser_error_debug_configuration": {
    "type": "register",
    "block": "rx_counters",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "rx_counters_ecc_1b_err_debug": {
    "type": "register",
    "block": "rx_counters",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_counters_ecc_2b_err_debug": {
    "type": "register",
    "block": "rx_counters",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_counters_counter_timer": {
    "type": "register",
    "block": "rx_counters",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rx_counters_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rx_counters",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rx_counters_memory_access_timeout": {
    "type": "register",
    "block": "rx_counters",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rx_counters_broadcast_config_reg": {
    "type": "register",
    "block": "rx_counters",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rx_counters_memory_prot_bypass": {
    "type": "register",
    "block": "rx_counters",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rx_counters_soft_reset_configuration": {
    "type": "register",
    "block": "rx_counters",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rx_counters_mbist_configuration": {
    "type": "register",
    "block": "rx_counters",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rx_counters_power_down_configuration": {
    "type": "register",
    "block": "rx_counters",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rx_counters_spare_reg": {
    "type": "register",
    "block": "rx_counters",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rx_counters_pmro_ctrl": {
    "type": "register",
    "block": "rx_counters",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rx_counters_pmro_status": {
    "type": "register",
    "block": "rx_counters",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rx_counters_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rx_counters",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rx_counters_mirror_bus_status": {
    "type": "register",
    "block": "rx_counters",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rx_counters_device_time_offset_cfg": {
    "type": "register",
    "block": "rx_counters",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rx_counters_gen_config": {
    "type": "register",
    "block": "rx_counters",
    "width": 21,
    "desc": "Configuration register",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ],
      [
        "lm_index_aging_th",
        4,
        16
      ],
      [
        "drop_lm_when_no_index_available",
        20,
        1
      ]
    ]
  },
  "rx_counters_source_if_config": {
    "type": "register",
    "block": "rx_counters",
    "width": 64,
    "desc": "IF Source Port to IFG configuration register",
    "fields": [
      [
        "source_if_to_ifg_map",
        0,
        64
      ]
    ]
  },
  "rx_counters_last_incoming_pd_config": {
    "type": "register",
    "block": "rx_counters",
    "width": 32,
    "desc": "Status register for debug feature of reading PDs",
    "fields": [
      [
        "last_incoming_pd",
        0,
        32
      ]
    ]
  },
  "rx_counters_debug_pd_mux_sel_config": {
    "type": "register",
    "block": "rx_counters",
    "width": 9,
    "desc": "Control register for debug feature of reading PDs",
    "fields": [
      [
        "last_incoming_pd_mux_sel",
        0,
        6
      ],
      [
        "debug_pd_mux_sel",
        6,
        3
      ]
    ]
  },
  "rx_counters_debug_pd_field_status": {
    "type": "register",
    "block": "rx_counters",
    "width": 96,
    "desc": "PD debug counters",
    "fields": [
      [
        "debug_pd_field_cnt",
        0,
        32
      ],
      [
        "debug_pd_total_pd_cnt",
        32,
        32
      ],
      [
        "debug_pd_total_byte_cnt",
        64,
        32
      ]
    ]
  },
  "rx_counters_lm_drop_counter_reg": {
    "type": "register",
    "block": "rx_counters",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "lm_drop_counter",
        0,
        20
      ]
    ]
  },
  "rx_counters_slice_interrupt_reg": {
    "type": "register",
    "block": "rx_counters",
    "width": 2,
    "desc": "Interrupt register per slice",
    "fields": [
      [
        "fllb_slice_interrupt",
        0,
        1
      ],
      [
        "lm_read_to_non_enabled_bank",
        1,
        1
      ]
    ]
  },
  "rx_counters_slice_interrupt_reg_mask": {
    "type": "register",
    "block": "rx_counters",
    "width": 2,
    "desc": "This register masks SliceInterruptReg[6] interrupt register",
    "fields": [
      [
        "fllb_slice_interrupt_mask",
        0,
        1
      ],
      [
        "lm_read_to_non_enabled_bank_mask",
        1,
        1
      ]
    ]
  },
  "rx_counters_slice_interrupt_reg_test": {
    "type": "register",
    "block": "rx_counters",
    "width": 2,
    "desc": "This register tests SliceInterruptReg[6] interrupt register",
    "fields": [
      [
        "fllb_slice_interrupt_test",
        0,
        1
      ],
      [
        "lm_read_to_non_enabled_bank_test",
        1,
        1
      ]
    ]
  },
  "rx_counters_bank_config": {
    "type": "memory",
    "block": "rx_counters",
    "width": 3,
    "desc": "Configuration for the RX Counters (only relevant to banks allocated to RX) All 6 memories should be configured identically (using 6 copies for physical design)",
    "fields": [
      [
        "bank_set_type",
        0,
        2
      ],
      [
        "inc_addr_for_set",
        2,
        1
      ]
    ]
  },
  "rx_counters_bank_id_map_config": {
    "type": "memory",
    "block": "rx_counters",
    "width": 7,
    "desc": "Configuration for mapping Bank-ID",
    "fields": [
      [
        "bank_id_map",
        0,
        7
      ]
    ]
  },
  "rx_counters_cbr_mem": {
    "type": "memory",
    "block": "rx_counters",
    "width": 292,
    "desc": "Memory for storing received PDs",
    "fields": [
      [
        "pd",
        0,
        292
      ]
    ]
  },
  "rx_counters_debug_pd_field_value_cfg": {
    "type": "memory",
    "block": "rx_counters",
    "width": 292,
    "desc": "Configuration for PD filter debug count in DebugPdFieldCnt - Value",
    "fields": [
      [
        "debug_pd_field_value",
        0,
        292
      ]
    ]
  },
  "rx_counters_debug_pd_field_mask_cfg": {
    "type": "memory",
    "block": "rx_counters",
    "width": 292,
    "desc": "Configuration for PD filter debug count in DebugPdFieldCnt - Mask",
    "fields": [
      [
        "debug_pd_field_mask",
        0,
        292
      ]
    ]
  },
  "hbm_interrupt_register": {
    "type": "register",
    "block": "hbm",
    "width": 10,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ],
      [
        "channel_interrupts0_summary",
        2,
        1
      ],
      [
        "channel_interrupts1_summary",
        3,
        1
      ],
      [
        "channel_interrupts2_summary",
        4,
        1
      ],
      [
        "channel_interrupts3_summary",
        5,
        1
      ],
      [
        "channel_interrupts4_summary",
        6,
        1
      ],
      [
        "channel_interrupts5_summary",
        7,
        1
      ],
      [
        "channel_interrupts6_summary",
        8,
        1
      ],
      [
        "channel_interrupts7_summary",
        9,
        1
      ]
    ]
  },
  "hbm_mem_protect_interrupt": {
    "type": "register",
    "block": "hbm",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "hbm_mem_protect_interrupt_test": {
    "type": "register",
    "block": "hbm",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "hbm_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "hbm",
    "width": 49,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "pc0_async_fifo0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pc0_async_fifo1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "pc0_async_fifo2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "pc0_async_fifo3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "pc0_async_fifo4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "pc0_async_fifo5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "pc0_async_fifo6_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pc0_async_fifo7_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "pc0_async_fifo8_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "pc0_async_fifo9_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "pc0_async_fifo10_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "pc0_async_fifo11_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "pc0_async_fifo12_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "pc0_async_fifo13_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "pc0_async_fifo14_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "pc0_async_fifo15_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "pc1_async_fifo0_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "pc1_async_fifo1_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pc1_async_fifo2_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pc1_async_fifo3_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pc1_async_fifo4_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "pc1_async_fifo5_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "pc1_async_fifo6_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "pc1_async_fifo7_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "pc1_async_fifo8_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "pc1_async_fifo9_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "pc1_async_fifo10_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "pc1_async_fifo11_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "pc1_async_fifo12_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "pc1_async_fifo13_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "pc1_async_fifo14_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "pc1_async_fifo15_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "cntrl_async_fifo0_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "cntrl_async_fifo1_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "cntrl_async_fifo2_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "cntrl_async_fifo3_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "cntrl_async_fifo4_ecc_1b_err_interrupt_mask",
        36,
        1
      ],
      [
        "cntrl_async_fifo5_ecc_1b_err_interrupt_mask",
        37,
        1
      ],
      [
        "cntrl_async_fifo6_ecc_1b_err_interrupt_mask",
        38,
        1
      ],
      [
        "cntrl_async_fifo7_ecc_1b_err_interrupt_mask",
        39,
        1
      ],
      [
        "cntrl_async_fifo8_ecc_1b_err_interrupt_mask",
        40,
        1
      ],
      [
        "cntrl_async_fifo9_ecc_1b_err_interrupt_mask",
        41,
        1
      ],
      [
        "cntrl_async_fifo10_ecc_1b_err_interrupt_mask",
        42,
        1
      ],
      [
        "cntrl_async_fifo11_ecc_1b_err_interrupt_mask",
        43,
        1
      ],
      [
        "cntrl_async_fifo12_ecc_1b_err_interrupt_mask",
        44,
        1
      ],
      [
        "cntrl_async_fifo13_ecc_1b_err_interrupt_mask",
        45,
        1
      ],
      [
        "cntrl_async_fifo14_ecc_1b_err_interrupt_mask",
        46,
        1
      ],
      [
        "cntrl_async_fifo15_ecc_1b_err_interrupt_mask",
        47,
        1
      ],
      [
        "capture_mem_ecc_1b_err_interrupt_mask",
        48,
        1
      ]
    ]
  },
  "hbm_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "hbm",
    "width": 49,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "pc0_async_fifo0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pc0_async_fifo1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "pc0_async_fifo2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "pc0_async_fifo3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "pc0_async_fifo4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "pc0_async_fifo5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "pc0_async_fifo6_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pc0_async_fifo7_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "pc0_async_fifo8_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "pc0_async_fifo9_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "pc0_async_fifo10_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "pc0_async_fifo11_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "pc0_async_fifo12_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "pc0_async_fifo13_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "pc0_async_fifo14_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "pc0_async_fifo15_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "pc1_async_fifo0_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "pc1_async_fifo1_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pc1_async_fifo2_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pc1_async_fifo3_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pc1_async_fifo4_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "pc1_async_fifo5_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "pc1_async_fifo6_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "pc1_async_fifo7_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "pc1_async_fifo8_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "pc1_async_fifo9_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "pc1_async_fifo10_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "pc1_async_fifo11_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "pc1_async_fifo12_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "pc1_async_fifo13_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "pc1_async_fifo14_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "pc1_async_fifo15_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "cntrl_async_fifo0_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "cntrl_async_fifo1_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "cntrl_async_fifo2_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "cntrl_async_fifo3_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "cntrl_async_fifo4_ecc_2b_err_interrupt_mask",
        36,
        1
      ],
      [
        "cntrl_async_fifo5_ecc_2b_err_interrupt_mask",
        37,
        1
      ],
      [
        "cntrl_async_fifo6_ecc_2b_err_interrupt_mask",
        38,
        1
      ],
      [
        "cntrl_async_fifo7_ecc_2b_err_interrupt_mask",
        39,
        1
      ],
      [
        "cntrl_async_fifo8_ecc_2b_err_interrupt_mask",
        40,
        1
      ],
      [
        "cntrl_async_fifo9_ecc_2b_err_interrupt_mask",
        41,
        1
      ],
      [
        "cntrl_async_fifo10_ecc_2b_err_interrupt_mask",
        42,
        1
      ],
      [
        "cntrl_async_fifo11_ecc_2b_err_interrupt_mask",
        43,
        1
      ],
      [
        "cntrl_async_fifo12_ecc_2b_err_interrupt_mask",
        44,
        1
      ],
      [
        "cntrl_async_fifo13_ecc_2b_err_interrupt_mask",
        45,
        1
      ],
      [
        "cntrl_async_fifo14_ecc_2b_err_interrupt_mask",
        46,
        1
      ],
      [
        "cntrl_async_fifo15_ecc_2b_err_interrupt_mask",
        47,
        1
      ],
      [
        "capture_mem_ecc_2b_err_interrupt_mask",
        48,
        1
      ]
    ]
  },
  "hbm_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "hbm",
    "width": 49,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "pc0_async_fifo0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "pc0_async_fifo1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "pc0_async_fifo2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "pc0_async_fifo3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "pc0_async_fifo4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "pc0_async_fifo5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "pc0_async_fifo6_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "pc0_async_fifo7_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "pc0_async_fifo8_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "pc0_async_fifo9_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "pc0_async_fifo10_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "pc0_async_fifo11_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "pc0_async_fifo12_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "pc0_async_fifo13_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "pc0_async_fifo14_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "pc0_async_fifo15_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "pc1_async_fifo0_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "pc1_async_fifo1_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "pc1_async_fifo2_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "pc1_async_fifo3_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "pc1_async_fifo4_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "pc1_async_fifo5_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "pc1_async_fifo6_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "pc1_async_fifo7_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "pc1_async_fifo8_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "pc1_async_fifo9_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "pc1_async_fifo10_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "pc1_async_fifo11_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "pc1_async_fifo12_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "pc1_async_fifo13_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "pc1_async_fifo14_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "pc1_async_fifo15_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "cntrl_async_fifo0_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "cntrl_async_fifo1_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "cntrl_async_fifo2_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "cntrl_async_fifo3_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "cntrl_async_fifo4_ecc_1b_err_initiate",
        36,
        1
      ],
      [
        "cntrl_async_fifo5_ecc_1b_err_initiate",
        37,
        1
      ],
      [
        "cntrl_async_fifo6_ecc_1b_err_initiate",
        38,
        1
      ],
      [
        "cntrl_async_fifo7_ecc_1b_err_initiate",
        39,
        1
      ],
      [
        "cntrl_async_fifo8_ecc_1b_err_initiate",
        40,
        1
      ],
      [
        "cntrl_async_fifo9_ecc_1b_err_initiate",
        41,
        1
      ],
      [
        "cntrl_async_fifo10_ecc_1b_err_initiate",
        42,
        1
      ],
      [
        "cntrl_async_fifo11_ecc_1b_err_initiate",
        43,
        1
      ],
      [
        "cntrl_async_fifo12_ecc_1b_err_initiate",
        44,
        1
      ],
      [
        "cntrl_async_fifo13_ecc_1b_err_initiate",
        45,
        1
      ],
      [
        "cntrl_async_fifo14_ecc_1b_err_initiate",
        46,
        1
      ],
      [
        "cntrl_async_fifo15_ecc_1b_err_initiate",
        47,
        1
      ],
      [
        "capture_mem_ecc_1b_err_initiate",
        48,
        1
      ]
    ]
  },
  "hbm_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "hbm",
    "width": 49,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "pc0_async_fifo0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "pc0_async_fifo1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "pc0_async_fifo2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "pc0_async_fifo3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "pc0_async_fifo4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "pc0_async_fifo5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "pc0_async_fifo6_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "pc0_async_fifo7_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "pc0_async_fifo8_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "pc0_async_fifo9_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "pc0_async_fifo10_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "pc0_async_fifo11_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "pc0_async_fifo12_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "pc0_async_fifo13_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "pc0_async_fifo14_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "pc0_async_fifo15_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "pc1_async_fifo0_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "pc1_async_fifo1_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "pc1_async_fifo2_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "pc1_async_fifo3_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "pc1_async_fifo4_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "pc1_async_fifo5_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "pc1_async_fifo6_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "pc1_async_fifo7_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "pc1_async_fifo8_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "pc1_async_fifo9_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "pc1_async_fifo10_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "pc1_async_fifo11_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "pc1_async_fifo12_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "pc1_async_fifo13_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "pc1_async_fifo14_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "pc1_async_fifo15_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "cntrl_async_fifo0_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "cntrl_async_fifo1_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "cntrl_async_fifo2_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "cntrl_async_fifo3_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "cntrl_async_fifo4_ecc_2b_err_initiate",
        36,
        1
      ],
      [
        "cntrl_async_fifo5_ecc_2b_err_initiate",
        37,
        1
      ],
      [
        "cntrl_async_fifo6_ecc_2b_err_initiate",
        38,
        1
      ],
      [
        "cntrl_async_fifo7_ecc_2b_err_initiate",
        39,
        1
      ],
      [
        "cntrl_async_fifo8_ecc_2b_err_initiate",
        40,
        1
      ],
      [
        "cntrl_async_fifo9_ecc_2b_err_initiate",
        41,
        1
      ],
      [
        "cntrl_async_fifo10_ecc_2b_err_initiate",
        42,
        1
      ],
      [
        "cntrl_async_fifo11_ecc_2b_err_initiate",
        43,
        1
      ],
      [
        "cntrl_async_fifo12_ecc_2b_err_initiate",
        44,
        1
      ],
      [
        "cntrl_async_fifo13_ecc_2b_err_initiate",
        45,
        1
      ],
      [
        "cntrl_async_fifo14_ecc_2b_err_initiate",
        46,
        1
      ],
      [
        "cntrl_async_fifo15_ecc_2b_err_initiate",
        47,
        1
      ],
      [
        "capture_mem_ecc_2b_err_initiate",
        48,
        1
      ]
    ]
  },
  "hbm_mem_protect_err_status": {
    "type": "register",
    "block": "hbm",
    "width": 49,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "pc0_async_fifo0_err_int",
        0,
        1
      ],
      [
        "pc0_async_fifo1_err_int",
        1,
        1
      ],
      [
        "pc0_async_fifo2_err_int",
        2,
        1
      ],
      [
        "pc0_async_fifo3_err_int",
        3,
        1
      ],
      [
        "pc0_async_fifo4_err_int",
        4,
        1
      ],
      [
        "pc0_async_fifo5_err_int",
        5,
        1
      ],
      [
        "pc0_async_fifo6_err_int",
        6,
        1
      ],
      [
        "pc0_async_fifo7_err_int",
        7,
        1
      ],
      [
        "pc0_async_fifo8_err_int",
        8,
        1
      ],
      [
        "pc0_async_fifo9_err_int",
        9,
        1
      ],
      [
        "pc0_async_fifo10_err_int",
        10,
        1
      ],
      [
        "pc0_async_fifo11_err_int",
        11,
        1
      ],
      [
        "pc0_async_fifo12_err_int",
        12,
        1
      ],
      [
        "pc0_async_fifo13_err_int",
        13,
        1
      ],
      [
        "pc0_async_fifo14_err_int",
        14,
        1
      ],
      [
        "pc0_async_fifo15_err_int",
        15,
        1
      ],
      [
        "pc1_async_fifo0_err_int",
        16,
        1
      ],
      [
        "pc1_async_fifo1_err_int",
        17,
        1
      ],
      [
        "pc1_async_fifo2_err_int",
        18,
        1
      ],
      [
        "pc1_async_fifo3_err_int",
        19,
        1
      ],
      [
        "pc1_async_fifo4_err_int",
        20,
        1
      ],
      [
        "pc1_async_fifo5_err_int",
        21,
        1
      ],
      [
        "pc1_async_fifo6_err_int",
        22,
        1
      ],
      [
        "pc1_async_fifo7_err_int",
        23,
        1
      ],
      [
        "pc1_async_fifo8_err_int",
        24,
        1
      ],
      [
        "pc1_async_fifo9_err_int",
        25,
        1
      ],
      [
        "pc1_async_fifo10_err_int",
        26,
        1
      ],
      [
        "pc1_async_fifo11_err_int",
        27,
        1
      ],
      [
        "pc1_async_fifo12_err_int",
        28,
        1
      ],
      [
        "pc1_async_fifo13_err_int",
        29,
        1
      ],
      [
        "pc1_async_fifo14_err_int",
        30,
        1
      ],
      [
        "pc1_async_fifo15_err_int",
        31,
        1
      ],
      [
        "cntrl_async_fifo0_err_int",
        32,
        1
      ],
      [
        "cntrl_async_fifo1_err_int",
        33,
        1
      ],
      [
        "cntrl_async_fifo2_err_int",
        34,
        1
      ],
      [
        "cntrl_async_fifo3_err_int",
        35,
        1
      ],
      [
        "cntrl_async_fifo4_err_int",
        36,
        1
      ],
      [
        "cntrl_async_fifo5_err_int",
        37,
        1
      ],
      [
        "cntrl_async_fifo6_err_int",
        38,
        1
      ],
      [
        "cntrl_async_fifo7_err_int",
        39,
        1
      ],
      [
        "cntrl_async_fifo8_err_int",
        40,
        1
      ],
      [
        "cntrl_async_fifo9_err_int",
        41,
        1
      ],
      [
        "cntrl_async_fifo10_err_int",
        42,
        1
      ],
      [
        "cntrl_async_fifo11_err_int",
        43,
        1
      ],
      [
        "cntrl_async_fifo12_err_int",
        44,
        1
      ],
      [
        "cntrl_async_fifo13_err_int",
        45,
        1
      ],
      [
        "cntrl_async_fifo14_err_int",
        46,
        1
      ],
      [
        "cntrl_async_fifo15_err_int",
        47,
        1
      ],
      [
        "capture_mem_err_int",
        48,
        1
      ]
    ]
  },
  "hbm_selected_ser_error_info": {
    "type": "register",
    "block": "hbm",
    "width": 10,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        8
      ],
      [
        "mem_err_type",
        8,
        2
      ]
    ]
  },
  "hbm_ser_error_debug_configuration": {
    "type": "register",
    "block": "hbm",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "hbm_ecc_1b_err_debug": {
    "type": "register",
    "block": "hbm",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "hbm_ecc_2b_err_debug": {
    "type": "register",
    "block": "hbm",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "hbm_counter_timer": {
    "type": "register",
    "block": "hbm",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "hbm_counter_timer_trigger_reg": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "hbm_memory_access_timeout": {
    "type": "register",
    "block": "hbm",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "hbm_broadcast_config_reg": {
    "type": "register",
    "block": "hbm",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "hbm_memory_prot_bypass": {
    "type": "register",
    "block": "hbm",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "hbm_soft_reset_configuration": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "hbm_mbist_configuration": {
    "type": "register",
    "block": "hbm",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "hbm_power_down_configuration": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "hbm_spare_reg": {
    "type": "register",
    "block": "hbm",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "hbm_pmro_ctrl": {
    "type": "register",
    "block": "hbm",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "hbm_pmro_status": {
    "type": "register",
    "block": "hbm",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "hbm_mirror_bus_conf_reg": {
    "type": "register",
    "block": "hbm",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "hbm_mirror_bus_status": {
    "type": "register",
    "block": "hbm",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "hbm_device_time_offset_cfg": {
    "type": "register",
    "block": "hbm",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "hbm_general_interrupt_register": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "Interrupt",
    "fields": [
      [
        "cattrip_interrupt",
        0,
        1
      ]
    ]
  },
  "hbm_general_interrupt_register_mask": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "cattrip_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "hbm_general_interrupt_register_test": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "cattrip_interrupt_test",
        0,
        1
      ]
    ]
  },
  "hbm_channel_interrupts": {
    "type": "register",
    "block": "hbm",
    "width": 4,
    "desc": "Interrupt",
    "fields": [
      [
        "async_fifo_underflow",
        0,
        1
      ],
      [
        "async_fifo_overflow",
        1,
        1
      ],
      [
        "address_parity_error",
        2,
        1
      ],
      [
        "one_bit_ecc_error",
        3,
        1
      ]
    ]
  },
  "hbm_channel_interrupts_mask": {
    "type": "register",
    "block": "hbm",
    "width": 4,
    "desc": "This register masks ChannelInterrupts[8] interrupt register",
    "fields": [
      [
        "async_fifo_underflow_mask",
        0,
        1
      ],
      [
        "async_fifo_overflow_mask",
        1,
        1
      ],
      [
        "address_parity_error_mask",
        2,
        1
      ],
      [
        "one_bit_ecc_error_mask",
        3,
        1
      ]
    ]
  },
  "hbm_channel_interrupts_test": {
    "type": "register",
    "block": "hbm",
    "width": 4,
    "desc": "This register tests ChannelInterrupts[8] interrupt register",
    "fields": [
      [
        "async_fifo_underflow_test",
        0,
        1
      ],
      [
        "async_fifo_overflow_test",
        1,
        1
      ],
      [
        "address_parity_error_test",
        2,
        1
      ],
      [
        "one_bit_ecc_error_test",
        3,
        1
      ]
    ]
  },
  "hbm_hbm_resets": {
    "type": "register",
    "block": "hbm",
    "width": 12,
    "desc": "Reset for parts of HBM module",
    "fields": [
      [
        "apb_rstn",
        0,
        1
      ],
      [
        "ieee_wrstn",
        1,
        1
      ],
      [
        "pll_rstn",
        2,
        1
      ],
      [
        "phy_rstn",
        3,
        1
      ],
      [
        "dfi_rstn",
        4,
        8
      ]
    ]
  },
  "hbm_hbm_clock_config": {
    "type": "register",
    "block": "hbm",
    "width": 14,
    "desc": "Config of divided clocks in HBM",
    "fields": [
      [
        "apb_clock_division",
        0,
        5
      ],
      [
        "ieee_clock_division",
        5,
        8
      ],
      [
        "use_ieee_bridge",
        13,
        1
      ]
    ]
  },
  "hbm_async_fifo_config": {
    "type": "register",
    "block": "hbm",
    "width": 7,
    "desc": "Config of MMU to HBM async FIFO",
    "fields": [
      [
        "almost_full",
        0,
        7
      ]
    ]
  },
  "hbm_phy_mode_config": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "Config of HBM PHY",
    "fields": [
      [
        "phy_mode",
        0,
        1
      ]
    ]
  },
  "hbm_temp_watermark_reg": {
    "type": "register",
    "block": "hbm",
    "width": 3,
    "desc": "High watermark of 3b temperature interface from HBM",
    "fields": [
      [
        "temp_watermark",
        0,
        3
      ]
    ]
  },
  "hbm_pll_locked_status": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "High watermark of 3b temperature interface from HBM",
    "fields": [
      [
        "pll_locked",
        0,
        1
      ]
    ]
  },
  "hbm_apb_ctrl": {
    "type": "register",
    "block": "hbm",
    "width": 2,
    "desc": "Control for APB or IEEE control of PHY CSRs",
    "fields": [
      [
        "apb_ctrl_req",
        0,
        1
      ],
      [
        "apb_ctrl_mode",
        1,
        1
      ]
    ]
  },
  "hbm_apb_ctrl_status": {
    "type": "register",
    "block": "hbm",
    "width": 1,
    "desc": "Status for APB or IEEE control of PHY CSRs",
    "fields": [
      [
        "apb_ctrl_ack",
        0,
        1
      ]
    ]
  },
  "hbm_hbm_config": {
    "type": "register",
    "block": "hbm",
    "width": 19,
    "desc": "Config of HBM macro",
    "fields": [
      [
        "hbm_pl",
        0,
        2
      ],
      [
        "dbi_byte_enable",
        2,
        16
      ],
      [
        "crc_enable",
        18,
        1
      ]
    ]
  },
  "hbm_hbm_debug": {
    "type": "register",
    "block": "hbm",
    "width": 4,
    "desc": "Debug features for HBM",
    "fields": [
      [
        "ecc_check_enable",
        0,
        1
      ],
      [
        "count_one_bit_ecc_as_error",
        1,
        1
      ],
      [
        "check_rx_data_parity",
        2,
        1
      ],
      [
        "ignore_gen_error",
        3,
        1
      ]
    ]
  },
  "hbm_hbm_error_counters": {
    "type": "register",
    "block": "hbm",
    "width": 176,
    "desc": "Error counters for HBM interface Errors",
    "fields": [
      [
        "derr_cntr_dw0",
        0,
        16
      ],
      [
        "derr_cntr_dw1",
        16,
        16
      ],
      [
        "derr_cntr_dw2",
        32,
        16
      ],
      [
        "derr_cntr_dw3",
        48,
        16
      ],
      [
        "aerr_cntr",
        64,
        16
      ],
      [
        "one_bit_ecc_error_cntr_pc0",
        80,
        16
      ],
      [
        "one_bit_ecc_error_cntr_pc1",
        96,
        16
      ],
      [
        "rd_data_parity_error_cntr_pc0",
        112,
        16
      ],
      [
        "rd_data_parity_error_cntr_pc1",
        128,
        16
      ],
      [
        "crc_error_cntr_pc0",
        144,
        16
      ],
      [
        "crc_error_cntr_pc1",
        160,
        16
      ]
    ]
  },
  "hbm_hbm_error_injection": {
    "type": "register",
    "block": "hbm",
    "width": 35,
    "desc": "Interface to inject errors into stream seen by MMU",
    "fields": [
      [
        "inject_errors",
        0,
        1
      ],
      [
        "errors_to_inject",
        1,
        16
      ],
      [
        "cycles_between_errors",
        17,
        16
      ],
      [
        "inject_error_type",
        33,
        2
      ]
    ]
  },
  "hbm_capture_mem_config": {
    "type": "register",
    "block": "hbm",
    "width": 59,
    "desc": "Config of Capture Memory",
    "fields": [
      [
        "capture_mem_enable",
        0,
        1
      ],
      [
        "capture_mem_channel_select",
        1,
        3
      ],
      [
        "capture_mem_pc_select",
        4,
        1
      ],
      [
        "capture_mem_driver",
        5,
        2
      ],
      [
        "capture_mem_row_cmd_trigger",
        7,
        22
      ],
      [
        "capture_mem_row_cmd_trigger_mask",
        29,
        22
      ],
      [
        "capture_mem_error_count",
        51,
        8
      ]
    ]
  },
  "hbm_capture_mem_status": {
    "type": "register",
    "block": "hbm",
    "width": 17,
    "desc": "Status of Capture Memory",
    "fields": [
      [
        "capture_mem_valid_entries",
        0,
        9
      ],
      [
        "capture_mem_stop_pointer",
        9,
        8
      ]
    ]
  },
  "hbm_error_record_config": {
    "type": "register",
    "block": "hbm",
    "width": 2,
    "desc": "Config of Error Record Memory",
    "fields": [
      [
        "error_record_enable",
        0,
        1
      ],
      [
        "error_record_overwrite",
        1,
        1
      ]
    ]
  },
  "hbm_phy_mon_sel": {
    "type": "register",
    "block": "hbm",
    "width": 9,
    "desc": "Config of Error Record Memory",
    "fields": [
      [
        "phy_mon_select",
        0,
        8
      ],
      [
        "phy_mon_en",
        8,
        1
      ]
    ]
  },
  "hbm_pc0_async_fifo": {
    "type": "memory",
    "block": "hbm",
    "width": 131,
    "desc": "MMU 2 HBM Async FIFO mem for PC0 data/control",
    "fields": [
      [
        "pc0_async_fifo_data",
        0,
        131
      ]
    ]
  },
  "hbm_pc1_async_fifo": {
    "type": "memory",
    "block": "hbm",
    "width": 131,
    "desc": "MMU 2 HBM Async FIFO mem for PC1 data/control",
    "fields": [
      [
        "pc1_async_fifo_data",
        0,
        131
      ]
    ]
  },
  "hbm_cntrl_async_fifo": {
    "type": "memory",
    "block": "hbm",
    "width": 27,
    "desc": "MMU 2 HBM Async FIFO mem",
    "fields": [
      [
        "cntrl_async_fifo_data",
        0,
        27
      ]
    ]
  },
  "hbm_capture_mem": {
    "type": "memory",
    "block": "hbm",
    "width": 173,
    "desc": "HBM Capture memory. Captures data per cycle for one PC. Captures according to trigger or captures error transactions",
    "fields": [
      [
        "capture_mem_data",
        0,
        128
      ],
      [
        "capture_mem_bank",
        128,
        4
      ],
      [
        "capture_mem_col",
        132,
        5
      ],
      [
        "capture_mem_row",
        137,
        14
      ],
      [
        "capture_mem_error_type",
        151,
        2
      ],
      [
        "capture_mem_parity_compare",
        153,
        4
      ],
      [
        "capture_mem_received_crc",
        157,
        8
      ],
      [
        "capture_mem_expected_crc",
        165,
        8
      ]
    ]
  },
  "hbm_error_record_pc0": {
    "type": "memory",
    "block": "hbm",
    "width": 29,
    "desc": "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    "fields": [
      [
        "entry_valid",
        0,
        1
      ],
      [
        "error_bank",
        1,
        4
      ],
      [
        "error_col",
        5,
        5
      ],
      [
        "error_row",
        10,
        14
      ],
      [
        "error_type",
        24,
        1
      ],
      [
        "parity_compare",
        25,
        4
      ]
    ]
  },
  "hbm_error_record_pc1": {
    "type": "memory",
    "block": "hbm",
    "width": 29,
    "desc": "Record of 16 last errors per PC.  Memory is overwritten cyclically or stopped according to config",
    "fields": [
      [
        "entry_valid",
        0,
        1
      ],
      [
        "error_bank",
        1,
        4
      ],
      [
        "error_col",
        5,
        5
      ],
      [
        "error_row",
        10,
        14
      ],
      [
        "error_type",
        24,
        1
      ],
      [
        "parity_compare",
        25,
        4
      ]
    ]
  },
  "hbm_ieee1500": {
    "type": "memory",
    "block": "hbm",
    "width": 521,
    "desc": "Virtual Memory for mapping HBM die and PHY IEEE 1500 accessible registers. The address is translated to the IEEE1500 instruction Cannot access IEEE registers inside PHY, which are accessed normally using APB, and will use IEEE only in test mode from external JTAG Width of memory is a bit larger than largest WDR in Samsung HBM spec.  Note that on reads, the read data will be in leftmost bits of register. For example, when reading a 256b register, the valid bits will be bits 511:256 bits 11:8 : Channel address. Value of f means broadcast. Broadcast is supported only on write. Not relevant for PHY registers bits 7:0 : Register address",
    "fields": [
      [
        "ieee1500_data",
        0,
        512
      ],
      [
        "ieee1500_length",
        512,
        9
      ]
    ]
  },
  "hbm_phy_apb": {
    "type": "memory",
    "block": "hbm",
    "width": 32,
    "desc": "Virtual Memory for mapping PHY APB accessible registers.  Width of memory is according to APB data bus This address is translated to PADDR[13:2]",
    "fields": [
      [
        "phy_apb_data",
        0,
        32
      ]
    ]
  },
  "ics_slice_interrupt_register": {
    "type": "register",
    "block": "ics_slice",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ],
      [
        "fabric_blocking_intr_reg_summary",
        2,
        1
      ]
    ]
  },
  "ics_slice_mem_protect_interrupt": {
    "type": "register",
    "block": "ics_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "ics_slice_mem_protect_interrupt_test": {
    "type": "register",
    "block": "ics_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "ics_slice_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "ics_slice",
    "width": 34,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "context2voq_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "slb_context2voq_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "slb_voq2context_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "credit_consume_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "credit_allocate_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "last_enqueue_qsize_bytes_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "last_dequeue_qsize_bytes_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "last_queue_report_set_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "last_queue_report_clr_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "enq_acc_bytes_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ib_set_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ib_clr_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "re_transmit_filter_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "queue_is_empty_set_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "queue_is_empty_clr_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "scrubber_mem_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "aged_out_queue_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "queue2_dram_mem_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "queue_list_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "queue_profile_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "read_requst_fifo_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "dram_list_fifo_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "from_dram_rlb_fifo_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "from_dram_flb_fifo_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "rlb_uch_fifo_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "rlb_ucl_fifo_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "rlb_mc_fifo_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "flb_hp_fifo_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "flb_lp_fifo_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "delete_fifo_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "fast_delete_fifo_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "to_dram_fifo_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "dram_pack_fifo_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "enq_crdt_req_hp_fifo_ecc_1b_err_interrupt_mask",
        33,
        1
      ]
    ]
  },
  "ics_slice_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "ics_slice",
    "width": 34,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "context2voq_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "slb_context2voq_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "slb_voq2context_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "credit_consume_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "credit_allocate_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "last_enqueue_qsize_bytes_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "last_dequeue_qsize_bytes_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "last_queue_report_set_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "last_queue_report_clr_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "enq_acc_bytes_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ib_set_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ib_clr_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "re_transmit_filter_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "queue_is_empty_set_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "queue_is_empty_clr_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "scrubber_mem_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "aged_out_queue_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "queue2_dram_mem_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "queue_list_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "queue_profile_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "read_requst_fifo_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "dram_list_fifo_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "from_dram_rlb_fifo_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "from_dram_flb_fifo_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "rlb_uch_fifo_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "rlb_ucl_fifo_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "rlb_mc_fifo_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "flb_hp_fifo_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "flb_lp_fifo_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "delete_fifo_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "fast_delete_fifo_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "to_dram_fifo_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "dram_pack_fifo_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "enq_crdt_req_hp_fifo_ecc_2b_err_interrupt_mask",
        33,
        1
      ]
    ]
  },
  "ics_slice_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "ics_slice",
    "width": 34,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "context2voq_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "slb_context2voq_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "slb_voq2context_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "credit_consume_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "credit_allocate_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "last_enqueue_qsize_bytes_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "last_dequeue_qsize_bytes_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "last_queue_report_set_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "last_queue_report_clr_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "enq_acc_bytes_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "ib_set_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "ib_clr_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "re_transmit_filter_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "queue_is_empty_set_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "queue_is_empty_clr_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "scrubber_mem_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "aged_out_queue_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "queue2_dram_mem_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "queue_list_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "queue_profile_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "read_requst_fifo_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "dram_list_fifo_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "from_dram_rlb_fifo_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "from_dram_flb_fifo_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "rlb_uch_fifo_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "rlb_ucl_fifo_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "rlb_mc_fifo_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "flb_hp_fifo_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "flb_lp_fifo_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "delete_fifo_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "fast_delete_fifo_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "to_dram_fifo_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "dram_pack_fifo_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "enq_crdt_req_hp_fifo_ecc_1b_err_initiate",
        33,
        1
      ]
    ]
  },
  "ics_slice_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "ics_slice",
    "width": 34,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "context2voq_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "slb_context2voq_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "slb_voq2context_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "credit_consume_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "credit_allocate_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "last_enqueue_qsize_bytes_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "last_dequeue_qsize_bytes_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "last_queue_report_set_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "last_queue_report_clr_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "enq_acc_bytes_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "ib_set_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "ib_clr_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "re_transmit_filter_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "queue_is_empty_set_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "queue_is_empty_clr_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "scrubber_mem_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "aged_out_queue_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "queue2_dram_mem_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "queue_list_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "queue_profile_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "read_requst_fifo_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "dram_list_fifo_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "from_dram_rlb_fifo_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "from_dram_flb_fifo_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "rlb_uch_fifo_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "rlb_ucl_fifo_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "rlb_mc_fifo_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "flb_hp_fifo_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "flb_lp_fifo_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "delete_fifo_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "fast_delete_fifo_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "to_dram_fifo_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "dram_pack_fifo_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "enq_crdt_req_hp_fifo_ecc_2b_err_initiate",
        33,
        1
      ]
    ]
  },
  "ics_slice_mem_protect_err_status": {
    "type": "register",
    "block": "ics_slice",
    "width": 34,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "context2voq_err_int",
        0,
        1
      ],
      [
        "slb_context2voq_err_int",
        1,
        1
      ],
      [
        "slb_voq2context_err_int",
        2,
        1
      ],
      [
        "credit_consume_err_int",
        3,
        1
      ],
      [
        "credit_allocate_err_int",
        4,
        1
      ],
      [
        "last_enqueue_qsize_bytes_err_int",
        5,
        1
      ],
      [
        "last_dequeue_qsize_bytes_err_int",
        6,
        1
      ],
      [
        "last_queue_report_set_err_int",
        7,
        1
      ],
      [
        "last_queue_report_clr_err_int",
        8,
        1
      ],
      [
        "enq_acc_bytes_err_int",
        9,
        1
      ],
      [
        "ib_set_err_int",
        10,
        1
      ],
      [
        "ib_clr_err_int",
        11,
        1
      ],
      [
        "re_transmit_filter_err_int",
        12,
        1
      ],
      [
        "queue_is_empty_set_err_int",
        13,
        1
      ],
      [
        "queue_is_empty_clr_err_int",
        14,
        1
      ],
      [
        "scrubber_mem_err_int",
        15,
        1
      ],
      [
        "aged_out_queue_err_int",
        16,
        1
      ],
      [
        "queue2_dram_mem_err_int",
        17,
        1
      ],
      [
        "queue_list_err_int",
        18,
        1
      ],
      [
        "queue_profile_err_int",
        19,
        1
      ],
      [
        "read_requst_fifo_err_int",
        20,
        1
      ],
      [
        "dram_list_fifo_err_int",
        21,
        1
      ],
      [
        "from_dram_rlb_fifo_err_int",
        22,
        1
      ],
      [
        "from_dram_flb_fifo_err_int",
        23,
        1
      ],
      [
        "rlb_uch_fifo_err_int",
        24,
        1
      ],
      [
        "rlb_ucl_fifo_err_int",
        25,
        1
      ],
      [
        "rlb_mc_fifo_err_int",
        26,
        1
      ],
      [
        "flb_hp_fifo_err_int",
        27,
        1
      ],
      [
        "flb_lp_fifo_err_int",
        28,
        1
      ],
      [
        "delete_fifo_err_int",
        29,
        1
      ],
      [
        "fast_delete_fifo_err_int",
        30,
        1
      ],
      [
        "to_dram_fifo_err_int",
        31,
        1
      ],
      [
        "dram_pack_fifo_err_int",
        32,
        1
      ],
      [
        "enq_crdt_req_hp_fifo_err_int",
        33,
        1
      ]
    ]
  },
  "ics_slice_selected_ser_error_info": {
    "type": "register",
    "block": "ics_slice",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "ics_slice_ser_error_debug_configuration": {
    "type": "register",
    "block": "ics_slice",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "ics_slice_ecc_1b_err_debug": {
    "type": "register",
    "block": "ics_slice",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "ics_slice_ecc_2b_err_debug": {
    "type": "register",
    "block": "ics_slice",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "ics_slice_counter_timer": {
    "type": "register",
    "block": "ics_slice",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "ics_slice_counter_timer_trigger_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "ics_slice_memory_access_timeout": {
    "type": "register",
    "block": "ics_slice",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "ics_slice_broadcast_config_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "ics_slice_memory_prot_bypass": {
    "type": "register",
    "block": "ics_slice",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "ics_slice_soft_reset_configuration": {
    "type": "register",
    "block": "ics_slice",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "ics_slice_mbist_configuration": {
    "type": "register",
    "block": "ics_slice",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "ics_slice_power_down_configuration": {
    "type": "register",
    "block": "ics_slice",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "ics_slice_spare_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "ics_slice_pmro_ctrl": {
    "type": "register",
    "block": "ics_slice",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "ics_slice_pmro_status": {
    "type": "register",
    "block": "ics_slice",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "ics_slice_mirror_bus_conf_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "ics_slice_mirror_bus_status": {
    "type": "register",
    "block": "ics_slice",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "ics_slice_device_time_offset_cfg": {
    "type": "register",
    "block": "ics_slice",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "ics_slice_general_interrupt_register": {
    "type": "register",
    "block": "ics_slice",
    "width": 8,
    "desc": "Interrupt",
    "fields": [
      [
        "fabric_blocking_intr",
        0,
        1
      ],
      [
        "queue_aged_out_intr",
        1,
        1
      ],
      [
        "rxcgm_cbt_full_intr",
        2,
        1
      ],
      [
        "voq_to_context_fifo_overflow",
        3,
        1
      ],
      [
        "dram_list_qsize_fif_overflow",
        4,
        1
      ],
      [
        "dram_list_reread_fif_overflow",
        5,
        1
      ],
      [
        "dram_list_enq_fif_overflow",
        6,
        1
      ],
      [
        "exit_dram_list_reread_full",
        7,
        1
      ]
    ]
  },
  "ics_slice_general_interrupt_register_mask": {
    "type": "register",
    "block": "ics_slice",
    "width": 8,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "fabric_blocking_intr_mask",
        0,
        1
      ],
      [
        "queue_aged_out_intr_mask",
        1,
        1
      ],
      [
        "rxcgm_cbt_full_intr_mask",
        2,
        1
      ],
      [
        "voq_to_context_fifo_overflow_mask",
        3,
        1
      ],
      [
        "dram_list_qsize_fif_overflow_mask",
        4,
        1
      ],
      [
        "dram_list_reread_fif_overflow_mask",
        5,
        1
      ],
      [
        "dram_list_enq_fif_overflow_mask",
        6,
        1
      ],
      [
        "exit_dram_list_reread_full_mask",
        7,
        1
      ]
    ]
  },
  "ics_slice_general_interrupt_register_test": {
    "type": "register",
    "block": "ics_slice",
    "width": 8,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "fabric_blocking_intr_test",
        0,
        1
      ],
      [
        "queue_aged_out_intr_test",
        1,
        1
      ],
      [
        "rxcgm_cbt_full_intr_test",
        2,
        1
      ],
      [
        "voq_to_context_fifo_overflow_test",
        3,
        1
      ],
      [
        "dram_list_qsize_fif_overflow_test",
        4,
        1
      ],
      [
        "dram_list_reread_fif_overflow_test",
        5,
        1
      ],
      [
        "dram_list_enq_fif_overflow_test",
        6,
        1
      ],
      [
        "exit_dram_list_reread_full_test",
        7,
        1
      ]
    ]
  },
  "ics_slice_fabric_blocking_intr_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "flb_hp_list_full",
        0,
        1
      ],
      [
        "flb_lp_list_full",
        1,
        1
      ],
      [
        "rlb_uch_list_full",
        2,
        1
      ],
      [
        "rlb_ucl_list_full",
        3,
        1
      ],
      [
        "rlb_mc_list_full",
        4,
        1
      ],
      [
        "total_list_full",
        5,
        1
      ]
    ]
  },
  "ics_slice_fabric_blocking_intr_reg_mask": {
    "type": "register",
    "block": "ics_slice",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "flb_hp_list_full_mask",
        0,
        1
      ],
      [
        "flb_lp_list_full_mask",
        1,
        1
      ],
      [
        "rlb_uch_list_full_mask",
        2,
        1
      ],
      [
        "rlb_ucl_list_full_mask",
        3,
        1
      ],
      [
        "rlb_mc_list_full_mask",
        4,
        1
      ],
      [
        "total_list_full_mask",
        5,
        1
      ]
    ]
  },
  "ics_slice_fabric_blocking_intr_reg_test": {
    "type": "register",
    "block": "ics_slice",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "flb_hp_list_full_test",
        0,
        1
      ],
      [
        "flb_lp_list_full_test",
        1,
        1
      ],
      [
        "rlb_uch_list_full_test",
        2,
        1
      ],
      [
        "rlb_ucl_list_full_test",
        3,
        1
      ],
      [
        "rlb_mc_list_full_test",
        4,
        1
      ],
      [
        "total_list_full_test",
        5,
        1
      ]
    ]
  },
  "ics_slice_reset_done_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "queue_is_empty_rst_done",
        0,
        1
      ],
      [
        "last_qrpt_rst_done",
        1,
        1
      ],
      [
        "enq_pipe_rst_done",
        2,
        1
      ]
    ]
  },
  "ics_slice_fifos_debug_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 209,
    "desc": "",
    "fields": [
      [
        "scrubber_fifo_count",
        0,
        14
      ],
      [
        "rd_req_on_the_fly",
        14,
        9
      ],
      [
        "delete_rd_rq_on_the_fly",
        23,
        9
      ],
      [
        "crdt_gnt_fifo_stat",
        32,
        6
      ],
      [
        "voq_to_context_fifo_stat",
        38,
        6
      ],
      [
        "checkin_to_elgbl_fifo_stat",
        44,
        5
      ],
      [
        "dram_list_fifo_stat",
        49,
        5
      ],
      [
        "plb_uch_fifo_stat",
        54,
        4
      ],
      [
        "plb_ucl_fifo_stat",
        58,
        4
      ],
      [
        "plb_mc_fifo_stat",
        62,
        4
      ],
      [
        "flb_hp_fifo_stat",
        66,
        4
      ],
      [
        "flb_lp_fifo_stat",
        70,
        4
      ],
      [
        "to_dram_fifo_stat",
        74,
        4
      ],
      [
        "to_dram_reread_fifo_stat",
        78,
        4
      ],
      [
        "delete_fifo_stat",
        82,
        4
      ],
      [
        "aging_fifo_stat",
        86,
        4
      ],
      [
        "scrb_fifo_stat",
        90,
        4
      ],
      [
        "crdt_req_by_gnt_stat",
        94,
        5
      ],
      [
        "crdt_req_by_enq_hp_stat",
        99,
        9
      ],
      [
        "crdt_req_by_slbmap_stat",
        108,
        6
      ],
      [
        "rdrq_fifo_stat",
        114,
        9
      ],
      [
        "deq_cmd_fifo_stat",
        123,
        7
      ],
      [
        "crdt_req_cbt_count",
        130,
        7
      ],
      [
        "slbmap_fifo_stat",
        137,
        6
      ],
      [
        "slbcmd_fifo_stat",
        143,
        6
      ],
      [
        "active_contexts",
        149,
        13
      ],
      [
        "dram_pool_prefetch_stat",
        162,
        5
      ],
      [
        "dram_active_contexts",
        167,
        13
      ],
      [
        "rxcgm_cbt_stat",
        180,
        7
      ],
      [
        "rxcgm_wrfail_fifo_stat",
        187,
        3
      ],
      [
        "dram_list_qsize_sum",
        190,
        19
      ]
    ]
  },
  "ics_slice_instrumentation_wmk": {
    "type": "register",
    "block": "ics_slice",
    "width": 26,
    "desc": "",
    "fields": [
      [
        "active_contexts_wmk",
        0,
        13
      ],
      [
        "dram_active_contexts_wmk",
        13,
        13
      ]
    ]
  },
  "ics_slice_dram_sms_pending_buf_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 17,
    "desc": "",
    "fields": [
      [
        "dram_sms_pending_buf",
        0,
        17
      ]
    ]
  },
  "ics_slice_last_in_pd": {
    "type": "register",
    "block": "ics_slice",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd",
        0,
        32
      ]
    ]
  },
  "ics_slice_chicken_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "clear_sms_pending_to_dram",
        0,
        1
      ],
      [
        "evict_to_dram_voq_ib",
        1,
        1
      ],
      [
        "evict_to_dram_slice_ib",
        2,
        1
      ]
    ]
  },
  "ics_slice_context_msb_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "context_msb",
        0,
        6
      ]
    ]
  },
  "ics_slice_queue_in_dram_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "queue_in_dram",
        0,
        64
      ]
    ]
  },
  "ics_slice_queue_in_elig_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "queue_in_elig",
        0,
        64
      ]
    ]
  },
  "ics_slice_has_credits_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "has_credits",
        0,
        64
      ]
    ]
  },
  "ics_slice_debug_conf": {
    "type": "register",
    "block": "ics_slice",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "pd_mux_sel",
        0,
        4
      ]
    ]
  },
  "ics_slice_slice_mode_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "ics_mode",
        0,
        4
      ]
    ]
  },
  "ics_slice_almost_full_cfg": {
    "type": "register",
    "block": "ics_slice",
    "width": 255,
    "desc": "",
    "fields": [
      [
        "fast_delete_alm_full",
        0,
        7
      ],
      [
        "flb_hp_alm_full",
        7,
        8
      ],
      [
        "flb_lp_alm_full",
        15,
        8
      ],
      [
        "from_dram_flb_alm_full",
        23,
        8
      ],
      [
        "from_dram_rlb_alm_full",
        31,
        8
      ],
      [
        "from_dram_dics_flb_alm_full",
        39,
        8
      ],
      [
        "from_dram_dics_rlb_alm_full",
        47,
        8
      ],
      [
        "rlb_mc_alm_full",
        55,
        8
      ],
      [
        "rlb_uch_alm_full",
        63,
        8
      ],
      [
        "rlb_ucl_alm_full",
        71,
        8
      ],
      [
        "to_dram_alm_full",
        79,
        8
      ],
      [
        "delete_alm_full",
        87,
        8
      ],
      [
        "flb_hp_stop_bypass_thr",
        95,
        8
      ],
      [
        "enq_to_elgbl_fifo_alm_full",
        103,
        4
      ],
      [
        "crdt_to_elgbl_fifo_alm_full",
        107,
        5
      ],
      [
        "dram_list_alm_full",
        112,
        4
      ],
      [
        "dram_list_qsizefif_alm_full",
        116,
        8
      ],
      [
        "plb_uch_fifo_alm_full",
        124,
        3
      ],
      [
        "plb_ucl_fifo_alm_full",
        127,
        3
      ],
      [
        "plb_mc_fifo_alm_full",
        130,
        3
      ],
      [
        "flb_hp_fifo_alm_full",
        133,
        3
      ],
      [
        "flb_lp_fifo_alm_full",
        136,
        3
      ],
      [
        "to_dram_fifo_alm_full",
        139,
        3
      ],
      [
        "to_dram_reread_fifo_alm_full",
        142,
        3
      ],
      [
        "fast_delete_fifo_alm_full",
        145,
        6
      ],
      [
        "delete_fifo_alm_full",
        151,
        8
      ],
      [
        "aging_fifo_alm_full",
        159,
        3
      ],
      [
        "scrb_fifo_alm_full_cfg",
        162,
        3
      ],
      [
        "crdt_req_by_gnt_alm_full_cfg",
        165,
        3
      ],
      [
        "crdt_req_by_enq_alm_full_cfg",
        168,
        9
      ],
      [
        "crdt_req_by_dram_alm_full_cfg",
        177,
        4
      ],
      [
        "crdt_req_by_deq_alm_full_cfg",
        181,
        8
      ],
      [
        "crdt_req_by_slb_map_alm_full_cfg",
        189,
        5
      ],
      [
        "rd_req_fifo_alm_full_cfg",
        194,
        7
      ],
      [
        "deq_cmd_fifo_alm_full_cfg",
        201,
        7
      ],
      [
        "empty_context_fifo_alm_full_cfg",
        208,
        5
      ],
      [
        "to_dram_grant_cbt_alm_full_cfg",
        213,
        4
      ],
      [
        "dram_pool_prefetch_alm_full_cfg",
        217,
        4
      ],
      [
        "shallow_dram_pool_prefetch_th",
        221,
        4
      ],
      [
        "rxcgm_alm_full_cfg",
        225,
        6
      ],
      [
        "crdt_req_cbt_alm_full_cfg",
        231,
        6
      ],
      [
        "slbmap_alm_full_cfg",
        237,
        5
      ],
      [
        "slbcmd_alm_full_cfg",
        242,
        5
      ],
      [
        "scrubber_context_fifo_alm_full_cfg",
        247,
        3
      ],
      [
        "rxcgm_wrfail_fifo_alm_full_cfg",
        250,
        2
      ],
      [
        "rxcgm_dram_delete_fifo_alm_full_cfg",
        252,
        3
      ]
    ]
  },
  "ics_slice_compensation_per_ifg": {
    "type": "register",
    "block": "ics_slice",
    "width": 80,
    "desc": "",
    "fields": [
      [
        "ifg_per_source_if",
        0,
        64
      ],
      [
        "ifg0_compensation",
        64,
        8
      ],
      [
        "ifg1_compensation",
        72,
        8
      ]
    ]
  },
  "ics_slice_scrb_status_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 13,
    "desc": "",
    "fields": [
      [
        "aged_out_context_num",
        0,
        12
      ],
      [
        "aged_out_context_valid",
        12,
        1
      ]
    ]
  },
  "ics_slice_scrb_aging_trig_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "scrb_aging_trig",
        0,
        1
      ]
    ]
  },
  "ics_slice_aging_list_trig_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 26,
    "desc": "",
    "fields": [
      [
        "context_to_clean",
        0,
        12
      ],
      [
        "size_to_clean",
        12,
        14
      ]
    ]
  },
  "ics_slice_aging_list_status": {
    "type": "register",
    "block": "ics_slice",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "aging_list_busy",
        0,
        1
      ]
    ]
  },
  "ics_slice_aging_mask_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 13,
    "desc": "",
    "fields": [
      [
        "aged_context_mask",
        0,
        12
      ],
      [
        "aged_context_mask_valid",
        12,
        1
      ]
    ]
  },
  "ics_slice_delete_credits": {
    "type": "register",
    "block": "ics_slice",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "delete_crdt_init",
        0,
        7
      ]
    ]
  },
  "ics_slice_delete_credits_trig": {
    "type": "register",
    "block": "ics_slice",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "delete_crdt_init_trig",
        0,
        1
      ]
    ]
  },
  "ics_slice_ms_q_conf": {
    "type": "register",
    "block": "ics_slice",
    "width": 21,
    "desc": "",
    "fields": [
      [
        "ms_q_uch_crdts",
        0,
        7
      ],
      [
        "ms_q_ucl_crdts",
        7,
        7
      ],
      [
        "ms_q_mc_crdts",
        14,
        7
      ]
    ]
  },
  "ics_slice_msq_dbg_mux": {
    "type": "register",
    "block": "ics_slice",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "msq_sel",
        0,
        8
      ],
      [
        "msq_sel_context",
        8,
        2
      ]
    ]
  },
  "ics_slice_ms_q_count": {
    "type": "register",
    "block": "ics_slice",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "ms_q_crds_count",
        0,
        8
      ]
    ]
  },
  "ics_slice_msq_slow_credits": {
    "type": "register",
    "block": "ics_slice",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "msq_slow_crdt_th",
        0,
        3
      ]
    ]
  },
  "ics_slice_cpu_dram_queue_valid": {
    "type": "register",
    "block": "ics_slice",
    "width": 14,
    "desc": "",
    "fields": [
      [
        "cpu_dram_queue_valid_addr",
        0,
        12
      ],
      [
        "cpu_dram_queue_valid_data",
        12,
        1
      ],
      [
        "cpu_dram_queue_valid_rd0wr1",
        13,
        1
      ]
    ]
  },
  "ics_slice_cpu_elgbl_context": {
    "type": "register",
    "block": "ics_slice",
    "width": 14,
    "desc": "",
    "fields": [
      [
        "cpu_elgbl_context_addr",
        0,
        12
      ],
      [
        "cpu_elgbl_context_data",
        12,
        1
      ],
      [
        "cpu_elgbl_context_rd0wr1",
        13,
        1
      ]
    ]
  },
  "ics_slice_fabric_blocking_capture_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 36,
    "desc": "",
    "fields": [
      [
        "list_full_context",
        0,
        12
      ],
      [
        "queue_blocking_context",
        12,
        12
      ],
      [
        "slice_blocking_context",
        24,
        12
      ]
    ]
  },
  "ics_slice_general_conf_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 53,
    "desc": "",
    "fields": [
      [
        "network_slice1_fabric_slice0",
        0,
        6
      ],
      [
        "scrubber_step",
        6,
        20
      ],
      [
        "scrubber_req_type",
        26,
        1
      ],
      [
        "slb_req_type",
        27,
        2
      ],
      [
        "slb_link_voqs_offset",
        29,
        4
      ],
      [
        "level_to_stop_pdvoq",
        33,
        8
      ],
      [
        "rand_crdt_req_limit",
        41,
        5
      ],
      [
        "ignore_credits",
        46,
        1
      ],
      [
        "pause_checkin_machine",
        47,
        1
      ],
      [
        "evict_to_dram_with_credits",
        48,
        1
      ],
      [
        "evict_to_dram_while_eligible",
        49,
        1
      ],
      [
        "evict_to_dram_while_dequeue",
        50,
        1
      ],
      [
        "evict_to_dram_ignore_shapers",
        51,
        1
      ],
      [
        "retransmit_on_ib_fifo_full",
        52,
        1
      ]
    ]
  },
  "ics_slice_enq_conf_static_go_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 119,
    "desc": "",
    "fields": [
      [
        "max_rand_val",
        0,
        4
      ],
      [
        "credit_for_every_enq",
        4,
        1
      ],
      [
        "credit_req_for_qsize1",
        5,
        1
      ],
      [
        "en_static_go_on_enq_qsize",
        6,
        1
      ],
      [
        "enq_acc_saturation",
        7,
        15
      ],
      [
        "max_dram_evict_context",
        22,
        13
      ],
      [
        "max_dram_list_qsize_kbytes",
        35,
        20
      ],
      [
        "evict_hp_profile",
        55,
        32
      ],
      [
        "evict_hp_voq_start",
        87,
        16
      ],
      [
        "evict_hp_voq_end",
        103,
        16
      ]
    ]
  },
  "ics_slice_credits_gift_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 41,
    "desc": "Calculate the credits gift (in bytes units) out of the context number",
    "fields": [
      [
        "num_bit_per_credits_gift",
        0,
        4
      ],
      [
        "inverse_credits_gift",
        4,
        1
      ],
      [
        "dram_return_enable",
        5,
        1
      ],
      [
        "dram_return_gift",
        6,
        12
      ],
      [
        "dram_return_max_cb",
        18,
        23
      ]
    ]
  },
  "ics_slice_cgm_pool_per_profile": {
    "type": "register",
    "block": "ics_slice",
    "width": 32,
    "desc": "Map 4-bit profile to Cgm pool. There are 2 pools 0/1 and thus bit per profile",
    "fields": [
      [
        "cgm_pool",
        0,
        32
      ]
    ]
  },
  "ics_slice_scrubber_th_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 5,
    "desc": "Queue number for delete queue",
    "fields": [
      [
        "scrubber_th",
        0,
        5
      ]
    ]
  },
  "ics_slice_queue_size_static_go_th_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 23,
    "desc": "",
    "fields": [
      [
        "queue_size_static_go_th",
        0,
        23
      ]
    ]
  },
  "ics_slice_set_queue_blocking_th_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "set_queue_blocking_th",
        0,
        24
      ]
    ]
  },
  "ics_slice_clear_queue_blocking_th_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "clear_queue_blocking_th",
        0,
        24
      ]
    ]
  },
  "ics_slice_accept_queue_blocking_th_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "accept_queue_blocking_th",
        0,
        24
      ]
    ]
  },
  "ics_slice_credits_conf_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 167,
    "desc": "Queue number for delete queue",
    "fields": [
      [
        "static_go_profile",
        0,
        32
      ],
      [
        "crdt_in_bytes",
        32,
        13
      ],
      [
        "crdt_size_log2",
        45,
        4
      ],
      [
        "init_extra_credits",
        49,
        13
      ],
      [
        "stop_credits_th",
        62,
        16
      ],
      [
        "return_credits_th",
        78,
        16
      ],
      [
        "static_go_stop_credits_th",
        94,
        16
      ],
      [
        "static_go_return_credits_th",
        110,
        16
      ],
      [
        "enq_priority_th",
        126,
        5
      ],
      [
        "return_crdt_on_off",
        131,
        1
      ],
      [
        "max_qb_threshold",
        132,
        24
      ],
      [
        "random_credits_allocated",
        156,
        6
      ],
      [
        "return_crdt_queue_blocking",
        162,
        1
      ],
      [
        "return_eir_crdt_slice_blocking",
        163,
        1
      ],
      [
        "return_cir_crdt_slice_blocking",
        164,
        1
      ],
      [
        "return_crdt_list_full_blocking",
        165,
        1
      ],
      [
        "ignore_txif_byte_in_slice_blocking",
        166,
        1
      ]
    ]
  },
  "ics_slice_auto_credit_fsm": {
    "type": "register",
    "block": "ics_slice",
    "width": 49,
    "desc": "Auto credit machine",
    "fields": [
      [
        "start_voq",
        0,
        16
      ],
      [
        "end_voq",
        16,
        16
      ],
      [
        "credit_period",
        32,
        16
      ],
      [
        "auto_credit_en",
        48,
        1
      ]
    ]
  },
  "ics_slice_acc_crdt_req_th_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 48,
    "desc": "Threshold for enqueue accumulated bytes to send credit request",
    "fields": [
      [
        "acc_crdt_req_th",
        0,
        14
      ],
      [
        "acc_crdt_req_fc_th",
        14,
        14
      ],
      [
        "csms_fc",
        28,
        6
      ],
      [
        "acc_crdt_first_th",
        34,
        14
      ]
    ]
  },
  "ics_slice_dram_list_param_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 64,
    "desc": "Parameters for Dram List machine",
    "fields": [
      [
        "dram_eligible_th_norm",
        0,
        13
      ],
      [
        "dram_eligible_th_empty",
        13,
        13
      ],
      [
        "num_of_reads_per_dram_buffer",
        26,
        11
      ],
      [
        "qsize_limit_to_read_it_all",
        37,
        23
      ],
      [
        "max_parallel_dram_contexts",
        60,
        4
      ]
    ]
  },
  "ics_slice_aging_list_param_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 8,
    "desc": "Parameters for Aging List machine",
    "fields": [
      [
        "aging_max_read_burst",
        0,
        8
      ]
    ]
  },
  "ics_slice_eligible_th_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 185,
    "desc": "Threshold to move a queue to speculative read",
    "fields": [
      [
        "speculative_en",
        0,
        1
      ],
      [
        "speculative_qsize_th",
        1,
        10
      ],
      [
        "speculative_cb_th",
        11,
        20
      ],
      [
        "fabric_packing_en",
        31,
        1
      ],
      [
        "fabric_packing_th",
        32,
        7
      ],
      [
        "eir_slice_blocking_th",
        39,
        32
      ],
      [
        "cir_slice_blocking_th",
        71,
        32
      ],
      [
        "eir_slice_pds_blocking_th",
        103,
        8
      ],
      [
        "cir_slice_pds_blocking_th",
        111,
        8
      ],
      [
        "list_full_blocking_th",
        119,
        8
      ],
      [
        "p2_cb_th",
        127,
        16
      ],
      [
        "elgbl_flb_hp_alm_full",
        143,
        7
      ],
      [
        "elgbl_flb_lp_alm_full",
        150,
        7
      ],
      [
        "elgbl_rlb_mc_alm_full",
        157,
        7
      ],
      [
        "elgbl_rlb_uch_alm_full",
        164,
        7
      ],
      [
        "elgbl_rlb_ucl_alm_full",
        171,
        7
      ],
      [
        "elgbl_to_dram_alm_full",
        178,
        7
      ]
    ]
  },
  "ics_slice_txif_conf": {
    "type": "register",
    "block": "ics_slice",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "fabric_slice_flb_rate",
        0,
        2
      ]
    ]
  },
  "ics_slice_eligible_max_parallel_queues": {
    "type": "register",
    "block": "ics_slice",
    "width": 45,
    "desc": "Max queues served in parallel in the eligible list. Note that the sum of these fields must be =< 128",
    "fields": [
      [
        "max_rlb_uch",
        0,
        9
      ],
      [
        "max_rlb_ucl",
        9,
        9
      ],
      [
        "max_rlb_mc",
        18,
        9
      ],
      [
        "max_flb_lp",
        27,
        9
      ],
      [
        "max_flb_hp",
        36,
        9
      ]
    ]
  },
  "ics_slice_weighted_round_robin": {
    "type": "register",
    "block": "ics_slice",
    "width": 14,
    "desc": "Weight for Weighted round-robin arb",
    "fields": [
      [
        "rlb_mc_weight",
        0,
        7
      ],
      [
        "delete_weight",
        7,
        7
      ]
    ]
  },
  "ics_slice_read_pipe_param_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 49,
    "desc": "",
    "fields": [
      [
        "retransmit_win_size",
        0,
        16
      ],
      [
        "max_negative_cb",
        16,
        16
      ],
      [
        "pre_pkt_cb_th",
        32,
        16
      ],
      [
        "retransmit_timer_on_aging",
        48,
        1
      ]
    ]
  },
  "ics_slice_deq_rpt_pipe_param_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "ib_qsize_th",
        0,
        23
      ],
      [
        "ib_qsize_crdt_en",
        23,
        1
      ]
    ]
  },
  "ics_slice_packing_configuration": {
    "type": "register",
    "block": "ics_slice",
    "width": 30,
    "desc": "Packing parameters",
    "fields": [
      [
        "packing_timer",
        0,
        10
      ],
      [
        "dram_buffer_size",
        10,
        3
      ],
      [
        "dram_burst_size",
        13,
        5
      ],
      [
        "max_pds_in_pack",
        18,
        6
      ],
      [
        "header_size",
        24,
        6
      ]
    ]
  },
  "ics_slice_internal_fifo_alm_full": {
    "type": "register",
    "block": "ics_slice",
    "width": 7,
    "desc": "Packing parameters",
    "fields": [
      [
        "dram_pack_fifo_alm_full",
        0,
        4
      ],
      [
        "dram_delete_fifo_alm_full",
        4,
        3
      ]
    ]
  },
  "ics_slice_max_cong_level_voq": {
    "type": "register",
    "block": "ics_slice",
    "width": 160,
    "desc": "Highest congestion level encountered watermark, 8 per slice",
    "fields": [
      [
        "max_cong_level_voq_num",
        0,
        128
      ],
      [
        "max_cong_level_voq_value",
        128,
        32
      ]
    ]
  },
  "ics_slice_fabric_rate_limiter_cfg": {
    "type": "register",
    "block": "ics_slice",
    "width": 61,
    "desc": "Shapes the Tx RLB FIFOs rate of the device towards the fabric.",
    "fields": [
      [
        "fabric_rate_limiter_max_thr",
        0,
        20
      ],
      [
        "fabric_rate_limiter_rate",
        20,
        20
      ],
      [
        "fabric_rate_limiter_inc_value",
        40,
        20
      ],
      [
        "fabric_rate_limiter_enable",
        60,
        1
      ]
    ]
  },
  "ics_slice_rx_cgm_count_mode_cfg": {
    "type": "register",
    "block": "ics_slice",
    "width": 34,
    "desc": "Defines the behaviour of decrements towards the RX_CGM counters",
    "fields": [
      [
        "rx_cgm_count_mode",
        0,
        1
      ],
      [
        "rx_cgm_leaky_cnt_th",
        1,
        32
      ],
      [
        "dec_val_in_src_if",
        33,
        1
      ]
    ]
  },
  "ics_slice_active_contexts_histogram_cfg": {
    "type": "register",
    "block": "ics_slice",
    "width": 106,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "active_contexts_histogram_th0",
        0,
        13
      ],
      [
        "active_contexts_histogram_th1",
        13,
        13
      ],
      [
        "active_contexts_histogram_th2",
        26,
        13
      ],
      [
        "active_contexts_histogram_th3",
        39,
        13
      ],
      [
        "active_contexts_histogram_th4",
        52,
        13
      ],
      [
        "active_contexts_histogram_th5",
        65,
        13
      ],
      [
        "active_contexts_histogram_th6",
        78,
        13
      ],
      [
        "active_contexts_histogram_time_interval",
        91,
        15
      ]
    ]
  },
  "ics_slice_active_contexts_histogram_status": {
    "type": "register",
    "block": "ics_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "active_contexts_histogram_value0",
        0,
        32
      ],
      [
        "active_contexts_histogram_overflow0",
        32,
        1
      ],
      [
        "active_contexts_histogram_value1",
        33,
        32
      ],
      [
        "active_contexts_histogram_overflow1",
        65,
        1
      ],
      [
        "active_contexts_histogram_value2",
        66,
        32
      ],
      [
        "active_contexts_histogram_overflow2",
        98,
        1
      ],
      [
        "active_contexts_histogram_value3",
        99,
        32
      ],
      [
        "active_contexts_histogram_overflow3",
        131,
        1
      ],
      [
        "active_contexts_histogram_value4",
        132,
        32
      ],
      [
        "active_contexts_histogram_overflow4",
        164,
        1
      ],
      [
        "active_contexts_histogram_value5",
        165,
        32
      ],
      [
        "active_contexts_histogram_overflow5",
        197,
        1
      ],
      [
        "active_contexts_histogram_value6",
        198,
        32
      ],
      [
        "active_contexts_histogram_overflow6",
        230,
        1
      ],
      [
        "active_contexts_histogram_value7",
        231,
        32
      ],
      [
        "active_contexts_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "ics_slice_active_contexts_histogram_max_wmk_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 45,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "active_contexts_histogram_max_wmk",
        0,
        13
      ],
      [
        "active_contexts_histogram_max_wmk_time",
        13,
        32
      ]
    ]
  },
  "ics_slice_dram_active_contexts_histogram_cfg": {
    "type": "register",
    "block": "ics_slice",
    "width": 106,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "dram_active_contexts_histogram_th0",
        0,
        13
      ],
      [
        "dram_active_contexts_histogram_th1",
        13,
        13
      ],
      [
        "dram_active_contexts_histogram_th2",
        26,
        13
      ],
      [
        "dram_active_contexts_histogram_th3",
        39,
        13
      ],
      [
        "dram_active_contexts_histogram_th4",
        52,
        13
      ],
      [
        "dram_active_contexts_histogram_th5",
        65,
        13
      ],
      [
        "dram_active_contexts_histogram_th6",
        78,
        13
      ],
      [
        "dram_active_contexts_histogram_time_interval",
        91,
        15
      ]
    ]
  },
  "ics_slice_dram_active_contexts_histogram_status": {
    "type": "register",
    "block": "ics_slice",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "dram_active_contexts_histogram_value0",
        0,
        32
      ],
      [
        "dram_active_contexts_histogram_overflow0",
        32,
        1
      ],
      [
        "dram_active_contexts_histogram_value1",
        33,
        32
      ],
      [
        "dram_active_contexts_histogram_overflow1",
        65,
        1
      ],
      [
        "dram_active_contexts_histogram_value2",
        66,
        32
      ],
      [
        "dram_active_contexts_histogram_overflow2",
        98,
        1
      ],
      [
        "dram_active_contexts_histogram_value3",
        99,
        32
      ],
      [
        "dram_active_contexts_histogram_overflow3",
        131,
        1
      ],
      [
        "dram_active_contexts_histogram_value4",
        132,
        32
      ],
      [
        "dram_active_contexts_histogram_overflow4",
        164,
        1
      ],
      [
        "dram_active_contexts_histogram_value5",
        165,
        32
      ],
      [
        "dram_active_contexts_histogram_overflow5",
        197,
        1
      ],
      [
        "dram_active_contexts_histogram_value6",
        198,
        32
      ],
      [
        "dram_active_contexts_histogram_overflow6",
        230,
        1
      ],
      [
        "dram_active_contexts_histogram_value7",
        231,
        32
      ],
      [
        "dram_active_contexts_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "ics_slice_dram_active_contexts_histogram_max_wmk_reg": {
    "type": "register",
    "block": "ics_slice",
    "width": 45,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "dram_active_contexts_histogram_max_wmk",
        0,
        13
      ],
      [
        "dram_active_contexts_histogram_max_wmk_time",
        13,
        32
      ]
    ]
  },
  "ics_slice_context2voq": {
    "type": "memory",
    "block": "ics_slice",
    "width": 16,
    "desc": "Map context to VOQ number for regular queues",
    "fields": [
      [
        "voqnum",
        0,
        16
      ]
    ]
  },
  "ics_slice_slb_context2voq": {
    "type": "memory",
    "block": "ics_slice",
    "width": 12,
    "desc": "Map context to VOQ number for SLB queues in DCF",
    "fields": [
      [
        "slbvoqnum",
        0,
        12
      ]
    ]
  },
  "ics_slice_slb_voq2context": {
    "type": "memory",
    "block": "ics_slice",
    "width": 10,
    "desc": "Map SLB VOQ number to SLB context in DCF",
    "fields": [
      [
        "slbqnumvoq",
        0,
        9
      ],
      [
        "map_valid",
        9,
        1
      ]
    ]
  },
  "ics_slice_credit_consume": {
    "type": "memory",
    "block": "ics_slice",
    "width": 23,
    "desc": "Credit consumed per queue",
    "fields": [
      [
        "credit_consumed",
        0,
        23
      ]
    ]
  },
  "ics_slice_credit_allocate": {
    "type": "memory",
    "block": "ics_slice",
    "width": 23,
    "desc": "Credit allocated per queue",
    "fields": [
      [
        "credit_allocated",
        0,
        23
      ]
    ]
  },
  "ics_slice_last_enqueue_qsize_bytes": {
    "type": "memory",
    "block": "ics_slice",
    "width": 23,
    "desc": "Queue size in bytes from enqueue-report",
    "fields": [
      [
        "enqueue_qsize_byte",
        0,
        23
      ]
    ]
  },
  "ics_slice_last_dequeue_qsize_bytes": {
    "type": "memory",
    "block": "ics_slice",
    "width": 23,
    "desc": "Queue size in bytes from dequeue-report",
    "fields": [
      [
        "dequeue_qsize_bytes",
        0,
        23
      ]
    ]
  },
  "ics_slice_last_queue_report_set": {
    "type": "memory",
    "block": "ics_slice",
    "width": 64,
    "desc": "Points on either LastEnqueueQsizeBytes or LastDequeueQsizeBytes",
    "fields": [
      [
        "last_queue_report_bmp",
        0,
        64
      ]
    ]
  },
  "ics_slice_last_queue_report_clr": {
    "type": "memory",
    "block": "ics_slice",
    "width": 64,
    "desc": "Points on either LastEnqueueQsizeBytes or LastDequeueQsizeBytes",
    "fields": [
      [
        "last_queue_report_clr_bmp",
        0,
        64
      ]
    ]
  },
  "ics_slice_enq_acc_bytes": {
    "type": "memory",
    "block": "ics_slice",
    "width": 16,
    "desc": "Accumulate credit-size per context. Incremented by enqueue-report by the packet size in credit size units; decremented when enqueue report pipe decides to transmit credit-request A.k.a: credit-request-enqueue-balance",
    "fields": [
      [
        "enq_acc",
        0,
        16
      ]
    ]
  },
  "ics_slice_ib_set": {
    "type": "memory",
    "block": "ics_slice",
    "width": 64,
    "desc": "set-Clear+Read Mem; set by credit grant  Read by enqueue pipe",
    "fields": [
      [
        "ib_set_bmp",
        0,
        64
      ]
    ]
  },
  "ics_slice_ib_clr": {
    "type": "memory",
    "block": "ics_slice",
    "width": 64,
    "desc": "set-Clear+Read Mem; clear by read-report pipe Read by enqueue pipe",
    "fields": [
      [
        "ib_clr_bmp",
        0,
        64
      ]
    ]
  },
  "ics_slice_re_transmit_filter": {
    "type": "memory",
    "block": "ics_slice",
    "width": 15,
    "desc": "Last credit balance calculated on credit-grant",
    "fields": [
      [
        "retransmit_sn",
        0,
        14
      ],
      [
        "filter_is_active",
        14,
        1
      ]
    ]
  },
  "ics_slice_queue_is_empty_set": {
    "type": "memory",
    "block": "ics_slice",
    "width": 64,
    "desc": "Set-Clear+Read Mem",
    "fields": [
      [
        "queue_is_empty_set_bmp",
        0,
        64
      ]
    ]
  },
  "ics_slice_queue_is_empty_clr": {
    "type": "memory",
    "block": "ics_slice",
    "width": 64,
    "desc": "Set-Clear+Read Mem",
    "fields": [
      [
        "queue_is_empty_clr_bmp",
        0,
        64
      ]
    ]
  },
  "ics_slice_scrubber_mem": {
    "type": "memory",
    "block": "ics_slice",
    "width": 5,
    "desc": "Scrubber memory 8 entries in a row",
    "fields": [
      [
        "scrubber_cnt",
        0,
        3
      ],
      [
        "aging_cnt",
        3,
        2
      ]
    ]
  },
  "ics_slice_aged_out_queue": {
    "type": "memory",
    "block": "ics_slice",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "aged_out_queue_bits",
        0,
        64
      ]
    ]
  },
  "ics_slice_queue2_dram_mem": {
    "type": "memory",
    "block": "ics_slice",
    "width": 12,
    "desc": "Map context to Dram queue\\#",
    "fields": [
      [
        "dram_queue_num",
        0,
        12
      ]
    ]
  },
  "ics_slice_queue_list": {
    "type": "memory",
    "block": "ics_slice",
    "width": 3,
    "desc": "List code per context",
    "fields": [
      [
        "list_code",
        0,
        3
      ]
    ]
  },
  "ics_slice_queue_profile": {
    "type": "memory",
    "block": "ics_slice",
    "width": 5,
    "desc": "Profile per context",
    "fields": [
      [
        "queue_profile_bits",
        0,
        5
      ]
    ]
  },
  "ics_slice_dics_qsize0": {
    "type": "memory",
    "block": "ics_slice",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "dics_qsize0_bitmap",
        0,
        32
      ]
    ]
  },
  "ics_slice_read_requst_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 27,
    "desc": "Fifo that holds the read request til the read report returns from the PDVOQ",
    "fields": [
      [
        "read_requst_fifo_bits",
        0,
        27
      ]
    ]
  },
  "ics_slice_dram_list_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 67,
    "desc": "",
    "fields": [
      [
        "dram_list_fifo_bits",
        0,
        67
      ]
    ]
  },
  "ics_slice_from_dram_rlb_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 137,
    "desc": "",
    "fields": [
      [
        "from_dram_rlb_fifo_pd",
        0,
        137
      ]
    ]
  },
  "ics_slice_from_dram_flb_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 137,
    "desc": "",
    "fields": [
      [
        "from_dram_flb_fifo_pd",
        0,
        137
      ]
    ]
  },
  "ics_slice_rlb_uch_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 135,
    "desc": "",
    "fields": [
      [
        "rlb_uch_fifo_pd",
        0,
        135
      ]
    ]
  },
  "ics_slice_rlb_ucl_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 135,
    "desc": "",
    "fields": [
      [
        "rlb_ucl_fifo_pd",
        0,
        135
      ]
    ]
  },
  "ics_slice_rlb_mc_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 135,
    "desc": "",
    "fields": [
      [
        "rlb_mc_fifo_pd",
        0,
        135
      ]
    ]
  },
  "ics_slice_flb_hp_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 135,
    "desc": "",
    "fields": [
      [
        "flb_hp_fifo_pd",
        0,
        135
      ]
    ]
  },
  "ics_slice_flb_lp_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 135,
    "desc": "",
    "fields": [
      [
        "flb_lp_fifo_pd",
        0,
        135
      ]
    ]
  },
  "ics_slice_delete_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 135,
    "desc": "delete VOQ fifo",
    "fields": [
      [
        "delete_fifo_pd",
        0,
        135
      ]
    ]
  },
  "ics_slice_fast_delete_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 135,
    "desc": "write fail delete fifo",
    "fields": [
      [
        "fast_delete_fifo_pd",
        0,
        135
      ]
    ]
  },
  "ics_slice_to_dram_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 121,
    "desc": "",
    "fields": [
      [
        "to_dram_fifo_pd",
        0,
        121
      ]
    ]
  },
  "ics_slice_dram_pack_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 120,
    "desc": "aaa",
    "fields": [
      [
        "dram_pack_fifo_data",
        0,
        120
      ]
    ]
  },
  "ics_slice_enq_crdt_req_hp_fifo": {
    "type": "memory",
    "block": "ics_slice",
    "width": 19,
    "desc": "",
    "fields": [
      [
        "enq_crdt_req_hp_fifo_data",
        0,
        19
      ]
    ]
  },
  "ics_top_interrupt_register": {
    "type": "register",
    "block": "ics_top",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "ics_top_mem_protect_interrupt": {
    "type": "register",
    "block": "ics_top",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "ics_top_mem_protect_interrupt_test": {
    "type": "register",
    "block": "ics_top",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "ics_top_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "ics_top",
    "width": 13,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "dram_context_pool_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "dram_dec_cnt0_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "dram_dec_cnt1_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "dram_dec_cnt2_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "dram_dec_cnt3_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "dram_dec_cnt4_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "dram_dec_cnt5_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "dram_inc_cnt0_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "dram_inc_cnt1_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "dram_inc_cnt2_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "dram_inc_cnt3_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "dram_inc_cnt4_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "dram_inc_cnt5_ecc_1b_err_interrupt_mask",
        12,
        1
      ]
    ]
  },
  "ics_top_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "ics_top",
    "width": 13,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "dram_context_pool_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "dram_dec_cnt0_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "dram_dec_cnt1_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "dram_dec_cnt2_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "dram_dec_cnt3_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "dram_dec_cnt4_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "dram_dec_cnt5_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "dram_inc_cnt0_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "dram_inc_cnt1_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "dram_inc_cnt2_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "dram_inc_cnt3_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "dram_inc_cnt4_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "dram_inc_cnt5_ecc_2b_err_interrupt_mask",
        12,
        1
      ]
    ]
  },
  "ics_top_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "ics_top",
    "width": 13,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "dram_context_pool_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "dram_dec_cnt0_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "dram_dec_cnt1_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "dram_dec_cnt2_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "dram_dec_cnt3_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "dram_dec_cnt4_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "dram_dec_cnt5_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "dram_inc_cnt0_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "dram_inc_cnt1_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "dram_inc_cnt2_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "dram_inc_cnt3_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "dram_inc_cnt4_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "dram_inc_cnt5_ecc_1b_err_initiate",
        12,
        1
      ]
    ]
  },
  "ics_top_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "ics_top",
    "width": 13,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "dram_context_pool_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "dram_dec_cnt0_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "dram_dec_cnt1_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "dram_dec_cnt2_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "dram_dec_cnt3_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "dram_dec_cnt4_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "dram_dec_cnt5_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "dram_inc_cnt0_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "dram_inc_cnt1_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "dram_inc_cnt2_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "dram_inc_cnt3_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "dram_inc_cnt4_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "dram_inc_cnt5_ecc_2b_err_initiate",
        12,
        1
      ]
    ]
  },
  "ics_top_mem_protect_err_status": {
    "type": "register",
    "block": "ics_top",
    "width": 13,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "dram_context_pool_err_int",
        0,
        1
      ],
      [
        "dram_dec_cnt0_err_int",
        1,
        1
      ],
      [
        "dram_dec_cnt1_err_int",
        2,
        1
      ],
      [
        "dram_dec_cnt2_err_int",
        3,
        1
      ],
      [
        "dram_dec_cnt3_err_int",
        4,
        1
      ],
      [
        "dram_dec_cnt4_err_int",
        5,
        1
      ],
      [
        "dram_dec_cnt5_err_int",
        6,
        1
      ],
      [
        "dram_inc_cnt0_err_int",
        7,
        1
      ],
      [
        "dram_inc_cnt1_err_int",
        8,
        1
      ],
      [
        "dram_inc_cnt2_err_int",
        9,
        1
      ],
      [
        "dram_inc_cnt3_err_int",
        10,
        1
      ],
      [
        "dram_inc_cnt4_err_int",
        11,
        1
      ],
      [
        "dram_inc_cnt5_err_int",
        12,
        1
      ]
    ]
  },
  "ics_top_selected_ser_error_info": {
    "type": "register",
    "block": "ics_top",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "ics_top_ser_error_debug_configuration": {
    "type": "register",
    "block": "ics_top",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "ics_top_ecc_1b_err_debug": {
    "type": "register",
    "block": "ics_top",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "ics_top_ecc_2b_err_debug": {
    "type": "register",
    "block": "ics_top",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "ics_top_counter_timer": {
    "type": "register",
    "block": "ics_top",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "ics_top_counter_timer_trigger_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "ics_top_memory_access_timeout": {
    "type": "register",
    "block": "ics_top",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "ics_top_broadcast_config_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "ics_top_memory_prot_bypass": {
    "type": "register",
    "block": "ics_top",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "ics_top_soft_reset_configuration": {
    "type": "register",
    "block": "ics_top",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "ics_top_mbist_configuration": {
    "type": "register",
    "block": "ics_top",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "ics_top_power_down_configuration": {
    "type": "register",
    "block": "ics_top",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "ics_top_spare_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "ics_top_pmro_ctrl": {
    "type": "register",
    "block": "ics_top",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "ics_top_pmro_status": {
    "type": "register",
    "block": "ics_top",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "ics_top_mirror_bus_conf_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "ics_top_mirror_bus_status": {
    "type": "register",
    "block": "ics_top",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "ics_top_device_time_offset_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "ics_top_general_interrupt_register": {
    "type": "register",
    "block": "ics_top",
    "width": 14,
    "desc": "Interrupt",
    "fields": [
      [
        "ics_slice0_interrupt",
        0,
        1
      ],
      [
        "ics_slice1_interrupt",
        1,
        1
      ],
      [
        "ics_slice2_interrupt",
        2,
        1
      ],
      [
        "ics_slice3_interrupt",
        3,
        1
      ],
      [
        "ics_slice4_interrupt",
        4,
        1
      ],
      [
        "ics_slice5_interrupt",
        5,
        1
      ],
      [
        "filb_slice0_interrupt",
        6,
        1
      ],
      [
        "filb_slice1_interrupt",
        7,
        1
      ],
      [
        "filb_slice2_interrupt",
        8,
        1
      ],
      [
        "filb_slice3_interrupt",
        9,
        1
      ],
      [
        "filb_slice4_interrupt",
        10,
        1
      ],
      [
        "filb_slice5_interrupt",
        11,
        1
      ],
      [
        "dram_pack_pref_fifo_overf",
        12,
        1
      ],
      [
        "dram_delete_pref_fifo_overf",
        13,
        1
      ]
    ]
  },
  "ics_top_general_interrupt_register_mask": {
    "type": "register",
    "block": "ics_top",
    "width": 14,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "ics_slice0_interrupt_mask",
        0,
        1
      ],
      [
        "ics_slice1_interrupt_mask",
        1,
        1
      ],
      [
        "ics_slice2_interrupt_mask",
        2,
        1
      ],
      [
        "ics_slice3_interrupt_mask",
        3,
        1
      ],
      [
        "ics_slice4_interrupt_mask",
        4,
        1
      ],
      [
        "ics_slice5_interrupt_mask",
        5,
        1
      ],
      [
        "filb_slice0_interrupt_mask",
        6,
        1
      ],
      [
        "filb_slice1_interrupt_mask",
        7,
        1
      ],
      [
        "filb_slice2_interrupt_mask",
        8,
        1
      ],
      [
        "filb_slice3_interrupt_mask",
        9,
        1
      ],
      [
        "filb_slice4_interrupt_mask",
        10,
        1
      ],
      [
        "filb_slice5_interrupt_mask",
        11,
        1
      ],
      [
        "dram_pack_pref_fifo_overf_mask",
        12,
        1
      ],
      [
        "dram_delete_pref_fifo_overf_mask",
        13,
        1
      ]
    ]
  },
  "ics_top_general_interrupt_register_test": {
    "type": "register",
    "block": "ics_top",
    "width": 14,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "ics_slice0_interrupt_test",
        0,
        1
      ],
      [
        "ics_slice1_interrupt_test",
        1,
        1
      ],
      [
        "ics_slice2_interrupt_test",
        2,
        1
      ],
      [
        "ics_slice3_interrupt_test",
        3,
        1
      ],
      [
        "ics_slice4_interrupt_test",
        4,
        1
      ],
      [
        "ics_slice5_interrupt_test",
        5,
        1
      ],
      [
        "filb_slice0_interrupt_test",
        6,
        1
      ],
      [
        "filb_slice1_interrupt_test",
        7,
        1
      ],
      [
        "filb_slice2_interrupt_test",
        8,
        1
      ],
      [
        "filb_slice3_interrupt_test",
        9,
        1
      ],
      [
        "filb_slice4_interrupt_test",
        10,
        1
      ],
      [
        "filb_slice5_interrupt_test",
        11,
        1
      ],
      [
        "dram_pack_pref_fifo_overf_test",
        12,
        1
      ],
      [
        "dram_delete_pref_fifo_overf_test",
        13,
        1
      ]
    ]
  },
  "ics_top_counter_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 33,
    "desc": "TO BE REMOVED  - no one use it",
    "fields": [
      [
        "counter_address",
        0,
        12
      ],
      [
        "counter_data",
        12,
        20
      ],
      [
        "wr1_rd0",
        32,
        1
      ]
    ]
  },
  "ics_top_almost_full_conf": {
    "type": "register",
    "block": "ics_top",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "dec_fifo_alm_full_th",
        0,
        4
      ],
      [
        "return_dram_context_alm_full_cfg",
        4,
        4
      ],
      [
        "pre_ics_fifo_alm_full_cfg",
        8,
        3
      ],
      [
        "cbt_alm_full_cfg",
        11,
        5
      ],
      [
        "global_sms_data_above_th",
        16,
        32
      ]
    ]
  },
  "ics_top_fifos_debug_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "cbt_credit_count",
        0,
        6
      ]
    ]
  },
  "ics_top_dram_pool_fbm_conf": {
    "type": "register",
    "block": "ics_top",
    "width": 78,
    "desc": "",
    "fields": [
      [
        "dram_pool_fbm_total_free_buf",
        0,
        13
      ],
      [
        "dram_pool_fbm_not_empty_entry",
        13,
        64
      ],
      [
        "dram_pool_fbm_rstn_cfg",
        77,
        1
      ]
    ]
  },
  "ics_top_debug_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "evict_en_when_elig_meter_above",
        0,
        1
      ]
    ]
  },
  "ics_top_fifo_status_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 24,
    "desc": "Status",
    "fields": [
      [
        "dec_fifo_status",
        0,
        5
      ],
      [
        "return_dram_context_status",
        5,
        5
      ],
      [
        "pre_ics_fifo_status",
        10,
        4
      ],
      [
        "dram_pack_pref_fifo_status",
        14,
        5
      ],
      [
        "dram_delete_pref_fifo_status",
        19,
        5
      ]
    ]
  },
  "ics_top_dram_write_meter": {
    "type": "register",
    "block": "ics_top",
    "width": 112,
    "desc": "control eviction of new queues to dram",
    "fields": [
      [
        "dram_write_meter_rate",
        0,
        16
      ],
      [
        "dram_write_meter_inc_value",
        16,
        16
      ],
      [
        "dram_write_meter_max_bucket",
        32,
        40
      ],
      [
        "dram_write_meter_max_bucket_th",
        72,
        40
      ]
    ]
  },
  "ics_top_dram_write_eligible_meter": {
    "type": "register",
    "block": "ics_top",
    "width": 112,
    "desc": "control the rate of traffic to the dram- bucket size ~4MB rate is 50% - epsilon (on large time average - large bucket to allow bursts)",
    "fields": [
      [
        "dram_write_elig_meter_rate",
        0,
        16
      ],
      [
        "dram_write_elig_meter_inc_value",
        16,
        16
      ],
      [
        "dram_write_elig_meter_max_bucket",
        32,
        40
      ],
      [
        "dram_write_elig_meter_max_bucket_th",
        72,
        40
      ]
    ]
  },
  "ics_top_dram_discard_meter": {
    "type": "register",
    "block": "ics_top",
    "width": 112,
    "desc": "may decide that packets targetted to the dram are discarded- rate is 50% - epsillon - the idea is to limit the burst allowed by DramWriteEligiblleMeter",
    "fields": [
      [
        "dram_discard_meter_rate",
        0,
        16
      ],
      [
        "dram_discard_meter_inc_value",
        16,
        16
      ],
      [
        "dram_discard_meter_max_bucket",
        32,
        40
      ],
      [
        "dram_discard_meter_max_bucket_th",
        72,
        40
      ]
    ]
  },
  "ics_top_internal_fifo_alm_full": {
    "type": "register",
    "block": "ics_top",
    "width": 8,
    "desc": "Packing parameters",
    "fields": [
      [
        "dram_pack_pref_alm_full",
        0,
        4
      ],
      [
        "dram_del_pref_alm_full",
        4,
        4
      ]
    ]
  },
  "ics_top_dram_context_pool_alm_empty": {
    "type": "register",
    "block": "ics_top",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "dram_context_pool_alm_empty_th",
        0,
        12
      ],
      [
        "dram_context_pool_hp_voq_th",
        12,
        12
      ]
    ]
  },
  "ics_top_dram_pool_stat": {
    "type": "register",
    "block": "ics_top",
    "width": 13,
    "desc": "",
    "fields": [
      [
        "dram_pool_status",
        0,
        13
      ]
    ]
  },
  "ics_top_sms_buf_directed_to_dram_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 19,
    "desc": "",
    "fields": [
      [
        "sms_buf_directed_to_dram",
        0,
        19
      ]
    ]
  },
  "ics_top_sms_buf_directed_to_dram_wm_reg": {
    "type": "register",
    "block": "ics_top",
    "width": 133,
    "desc": "",
    "fields": [
      [
        "sms_buf_directed_to_dram_wm_slice0",
        0,
        19
      ],
      [
        "sms_buf_directed_to_dram_wm_slice1",
        19,
        19
      ],
      [
        "sms_buf_directed_to_dram_wm_slice2",
        38,
        19
      ],
      [
        "sms_buf_directed_to_dram_wm_slice3",
        57,
        19
      ],
      [
        "sms_buf_directed_to_dram_wm_slice4",
        76,
        19
      ],
      [
        "sms_buf_directed_to_dram_wm_slice5",
        95,
        19
      ],
      [
        "sms_buf_directed_to_dram_wm_total",
        114,
        19
      ]
    ]
  },
  "ics_top_dram_global_buffer_size_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 60,
    "desc": "",
    "fields": [
      [
        "dram_global_buffer_size_th",
        0,
        60
      ]
    ]
  },
  "ics_top_fabric_rate_limiter_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 64,
    "desc": "FIRL configuration, shapes the entire rate of the device towards the fabric.",
    "fields": [
      [
        "fabric_rate_limiter_max_thr",
        0,
        20
      ],
      [
        "fabric_rate_limiter_rate",
        20,
        24
      ],
      [
        "fabric_rate_limiter_inc_value",
        44,
        20
      ]
    ]
  },
  "ics_top_sms_load_balancing_meter_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 32,
    "desc": "SLBM configuration, intended to rate limit words on the fabric SMS interfaces. One config register per SMS interface rate limiter.",
    "fields": [
      [
        "sms_load_balancing_meter_max_thr",
        0,
        12
      ],
      [
        "sms_load_balancing_meter_rate",
        12,
        20
      ]
    ]
  },
  "ics_top_link_load_balancing_meter_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 50,
    "desc": "LLBM configuration, intended to rate limit each fabric link to 100G. One configuration register for 64 LLBMs.",
    "fields": [
      [
        "link_load_balancing_meter_max_thr",
        0,
        16
      ],
      [
        "link_load_balancing_meter_rate",
        16,
        24
      ],
      [
        "link_load_balancing_meter_inc_value",
        40,
        10
      ]
    ]
  },
  "ics_top_link_load_balancing_counter_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 66,
    "desc": "LLBC configuration, counts amount of traffic per link & context (UC/MC). One configuration register for UC or MC LLBCs.",
    "fields": [
      [
        "link_load_balancing_counter_max_thr",
        0,
        16
      ],
      [
        "link_load_balancing_counter_dec_value",
        16,
        16
      ],
      [
        "link_load_balancing_counter_decay_rate",
        32,
        24
      ],
      [
        "link_load_balancing_counter_decay_value",
        56,
        10
      ]
    ]
  },
  "ics_top_load_balancing_general_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 74,
    "desc": "Load balancing scheme general configuration",
    "fields": [
      [
        "header_size_per_packet",
        0,
        8
      ],
      [
        "link_selection_method_lut",
        8,
        64
      ],
      [
        "slbm_limit_enable",
        72,
        1
      ],
      [
        "llbm_limit_enable",
        73,
        1
      ]
    ]
  },
  "ics_top_slbm_quant_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 180,
    "desc": "Load balancing scheme general configuration",
    "fields": [
      [
        "slbm_quant_thr",
        0,
        180
      ]
    ]
  },
  "ics_top_llbm_quant_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 240,
    "desc": "Load balancing scheme general configuration",
    "fields": [
      [
        "llbm_quant_thr",
        0,
        240
      ]
    ]
  },
  "ics_top_llbc_quant_cfg": {
    "type": "register",
    "block": "ics_top",
    "width": 224,
    "desc": "Load balancing scheme general configuration",
    "fields": [
      [
        "uc_llbc_quant_thr",
        0,
        112
      ],
      [
        "mc_llbc_quant_thr",
        112,
        112
      ]
    ]
  },
  "ics_top_link_to_sms_if_map": {
    "type": "register",
    "block": "ics_top",
    "width": 36,
    "desc": "Map link to fabric SMS interface by comparing each IFG's last link",
    "fields": [
      [
        "sms_if6_max_link",
        0,
        6
      ],
      [
        "sms_if7_max_link",
        6,
        6
      ],
      [
        "sms_if8_max_link",
        12,
        6
      ],
      [
        "sms_if9_max_link",
        18,
        6
      ],
      [
        "sms_if10_max_link",
        24,
        6
      ],
      [
        "sms_if11_max_link",
        30,
        6
      ]
    ]
  },
  "ics_top_max_delay_estimation_lut": {
    "type": "memory",
    "block": "ics_top",
    "width": 3,
    "desc": "Max delay estimation LUT",
    "fields": [
      [
        "max_delay_estimation",
        0,
        3
      ]
    ]
  },
  "ics_top_dram_context_pool": {
    "type": "memory",
    "block": "ics_top",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "dram_context_pool_bmp",
        0,
        64
      ]
    ]
  },
  "ics_top_dram_dec_cnt": {
    "type": "memory",
    "block": "ics_top",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "dram_dec_cnt_data",
        0,
        20
      ]
    ]
  },
  "ics_top_dram_inc_cnt": {
    "type": "memory",
    "block": "ics_top",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "dram_inc_cnt_data",
        0,
        20
      ]
    ]
  },
  "mac_pool8_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 27,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "rx_link_status_down_summary",
        1,
        1
      ],
      [
        "rx_pcs_link_status_down_summary",
        2,
        1
      ],
      [
        "rx_pcs_align_status_down_summary",
        3,
        1
      ],
      [
        "rx_pcs_hi_ber_up_summary",
        4,
        1
      ],
      [
        "tx_crc_err_interrupt_register_summary",
        5,
        1
      ],
      [
        "tx_underrun_err_interrupt_register_summary",
        6,
        1
      ],
      [
        "tx_missing_eop_err_interrupt_register_summary",
        7,
        1
      ],
      [
        "rx_code_err_interrupt_register_summary",
        8,
        1
      ],
      [
        "rx_crc_err_interrupt_register_summary",
        9,
        1
      ],
      [
        "rx_invert_crc_err_interrupt_register_summary",
        10,
        1
      ],
      [
        "rx_oversize_err_interrupt_register_summary",
        11,
        1
      ],
      [
        "rx_undersize_err_interrupt_register_summary",
        12,
        1
      ],
      [
        "rx_desk_fif_ovf_interrupt_register0_summary",
        13,
        1
      ],
      [
        "rx_desk_fif_ovf_interrupt_register1_summary",
        14,
        1
      ],
      [
        "rx_desk_fif_ovf_interrupt_register2_summary",
        15,
        1
      ],
      [
        "rx_desk_fif_ovf_interrupt_register3_summary",
        16,
        1
      ],
      [
        "rx_desk_fif_ovf_interrupt_register4_summary",
        17,
        1
      ],
      [
        "rx_desk_fif_ovf_interrupt_register5_summary",
        18,
        1
      ],
      [
        "rx_desk_fif_ovf_interrupt_register6_summary",
        19,
        1
      ],
      [
        "rx_desk_fif_ovf_interrupt_register7_summary",
        20,
        1
      ],
      [
        "rx_pma_sig_ok_loss_interrupt_register_summary",
        21,
        1
      ],
      [
        "rsf_rx_high_ser_interrupt_register_summary",
        22,
        1
      ],
      [
        "rsf_rx_degraded_ser_interrupt_register_summary",
        23,
        1
      ],
      [
        "rsf_rx_rm_degraded_ser_interrupt_register_summary",
        24,
        1
      ],
      [
        "device_time_fif_ne_interrupt_register_summary",
        25,
        1
      ],
      [
        "device_time_override_interrupt_register_summary",
        26,
        1
      ]
    ]
  },
  "mac_pool8_mem_protect_interrupt": {
    "type": "register",
    "block": "mac_pool8",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "mac_pool8_mem_protect_interrupt_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "mac_pool8_counter_timer": {
    "type": "register",
    "block": "mac_pool8",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "mac_pool8_counter_timer_trigger_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "mac_pool8_broadcast_config_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "mac_pool8_memory_prot_bypass": {
    "type": "register",
    "block": "mac_pool8",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "mac_pool8_soft_reset_configuration": {
    "type": "register",
    "block": "mac_pool8",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "mac_pool8_mbist_configuration": {
    "type": "register",
    "block": "mac_pool8",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "mac_pool8_power_down_configuration": {
    "type": "register",
    "block": "mac_pool8",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "mac_pool8_spare_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "mac_pool8_pmro_ctrl": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "mac_pool8_pmro_status": {
    "type": "register",
    "block": "mac_pool8",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "mac_pool8_mirror_bus_conf_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "mac_pool8_mirror_bus_status": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "mac_pool8_device_time_offset_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "mac_pool8_rx_link_status_down": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC RX link status down interrupt. Asserted when link fault is detected after link status was up.",
    "fields": [
      [
        "rx_link_status_down0",
        0,
        1
      ],
      [
        "rx_link_status_down1",
        1,
        1
      ],
      [
        "rx_link_status_down2",
        2,
        1
      ],
      [
        "rx_link_status_down3",
        3,
        1
      ],
      [
        "rx_link_status_down4",
        4,
        1
      ],
      [
        "rx_link_status_down5",
        5,
        1
      ],
      [
        "rx_link_status_down6",
        6,
        1
      ],
      [
        "rx_link_status_down7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_link_status_down_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxLinkStatusDown interrupt register",
    "fields": [
      [
        "rx_link_status_down0_mask",
        0,
        1
      ],
      [
        "rx_link_status_down1_mask",
        1,
        1
      ],
      [
        "rx_link_status_down2_mask",
        2,
        1
      ],
      [
        "rx_link_status_down3_mask",
        3,
        1
      ],
      [
        "rx_link_status_down4_mask",
        4,
        1
      ],
      [
        "rx_link_status_down5_mask",
        5,
        1
      ],
      [
        "rx_link_status_down6_mask",
        6,
        1
      ],
      [
        "rx_link_status_down7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_link_status_down_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxLinkStatusDown interrupt register",
    "fields": [
      [
        "rx_link_status_down0_test",
        0,
        1
      ],
      [
        "rx_link_status_down1_test",
        1,
        1
      ],
      [
        "rx_link_status_down2_test",
        2,
        1
      ],
      [
        "rx_link_status_down3_test",
        3,
        1
      ],
      [
        "rx_link_status_down4_test",
        4,
        1
      ],
      [
        "rx_link_status_down5_test",
        5,
        1
      ],
      [
        "rx_link_status_down6_test",
        6,
        1
      ],
      [
        "rx_link_status_down7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_link_status_down": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "PCS RX link status down interrupt. Asserted when PCS link status goes down after it was up (PCS status == align status & ~hi_ber)",
    "fields": [
      [
        "rx_pcs_link_status_down0",
        0,
        1
      ],
      [
        "rx_pcs_link_status_down1",
        1,
        1
      ],
      [
        "rx_pcs_link_status_down2",
        2,
        1
      ],
      [
        "rx_pcs_link_status_down3",
        3,
        1
      ],
      [
        "rx_pcs_link_status_down4",
        4,
        1
      ],
      [
        "rx_pcs_link_status_down5",
        5,
        1
      ],
      [
        "rx_pcs_link_status_down6",
        6,
        1
      ],
      [
        "rx_pcs_link_status_down7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_link_status_down_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxPcsLinkStatusDown interrupt register",
    "fields": [
      [
        "rx_pcs_link_status_down0_mask",
        0,
        1
      ],
      [
        "rx_pcs_link_status_down1_mask",
        1,
        1
      ],
      [
        "rx_pcs_link_status_down2_mask",
        2,
        1
      ],
      [
        "rx_pcs_link_status_down3_mask",
        3,
        1
      ],
      [
        "rx_pcs_link_status_down4_mask",
        4,
        1
      ],
      [
        "rx_pcs_link_status_down5_mask",
        5,
        1
      ],
      [
        "rx_pcs_link_status_down6_mask",
        6,
        1
      ],
      [
        "rx_pcs_link_status_down7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_link_status_down_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxPcsLinkStatusDown interrupt register",
    "fields": [
      [
        "rx_pcs_link_status_down0_test",
        0,
        1
      ],
      [
        "rx_pcs_link_status_down1_test",
        1,
        1
      ],
      [
        "rx_pcs_link_status_down2_test",
        2,
        1
      ],
      [
        "rx_pcs_link_status_down3_test",
        3,
        1
      ],
      [
        "rx_pcs_link_status_down4_test",
        4,
        1
      ],
      [
        "rx_pcs_link_status_down5_test",
        5,
        1
      ],
      [
        "rx_pcs_link_status_down6_test",
        6,
        1
      ],
      [
        "rx_pcs_link_status_down7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_align_status_down": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "PCS RX link align status down interrupt (align status goes down after it was up).",
    "fields": [
      [
        "rx_pcs_align_status_down0",
        0,
        1
      ],
      [
        "rx_pcs_align_status_down1",
        1,
        1
      ],
      [
        "rx_pcs_align_status_down2",
        2,
        1
      ],
      [
        "rx_pcs_align_status_down3",
        3,
        1
      ],
      [
        "rx_pcs_align_status_down4",
        4,
        1
      ],
      [
        "rx_pcs_align_status_down5",
        5,
        1
      ],
      [
        "rx_pcs_align_status_down6",
        6,
        1
      ],
      [
        "rx_pcs_align_status_down7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_align_status_down_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxPcsAlignStatusDown interrupt register",
    "fields": [
      [
        "rx_pcs_align_status_down0_mask",
        0,
        1
      ],
      [
        "rx_pcs_align_status_down1_mask",
        1,
        1
      ],
      [
        "rx_pcs_align_status_down2_mask",
        2,
        1
      ],
      [
        "rx_pcs_align_status_down3_mask",
        3,
        1
      ],
      [
        "rx_pcs_align_status_down4_mask",
        4,
        1
      ],
      [
        "rx_pcs_align_status_down5_mask",
        5,
        1
      ],
      [
        "rx_pcs_align_status_down6_mask",
        6,
        1
      ],
      [
        "rx_pcs_align_status_down7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_align_status_down_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxPcsAlignStatusDown interrupt register",
    "fields": [
      [
        "rx_pcs_align_status_down0_test",
        0,
        1
      ],
      [
        "rx_pcs_align_status_down1_test",
        1,
        1
      ],
      [
        "rx_pcs_align_status_down2_test",
        2,
        1
      ],
      [
        "rx_pcs_align_status_down3_test",
        3,
        1
      ],
      [
        "rx_pcs_align_status_down4_test",
        4,
        1
      ],
      [
        "rx_pcs_align_status_down5_test",
        5,
        1
      ],
      [
        "rx_pcs_align_status_down6_test",
        6,
        1
      ],
      [
        "rx_pcs_align_status_down7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_hi_ber_up": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "PCS RX hi_ber went up interrupt",
    "fields": [
      [
        "rx_pcs_hi_ber_up0",
        0,
        1
      ],
      [
        "rx_pcs_hi_ber_up1",
        1,
        1
      ],
      [
        "rx_pcs_hi_ber_up2",
        2,
        1
      ],
      [
        "rx_pcs_hi_ber_up3",
        3,
        1
      ],
      [
        "rx_pcs_hi_ber_up4",
        4,
        1
      ],
      [
        "rx_pcs_hi_ber_up5",
        5,
        1
      ],
      [
        "rx_pcs_hi_ber_up6",
        6,
        1
      ],
      [
        "rx_pcs_hi_ber_up7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_hi_ber_up_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxPcsHiBerUp interrupt register",
    "fields": [
      [
        "rx_pcs_hi_ber_up0_mask",
        0,
        1
      ],
      [
        "rx_pcs_hi_ber_up1_mask",
        1,
        1
      ],
      [
        "rx_pcs_hi_ber_up2_mask",
        2,
        1
      ],
      [
        "rx_pcs_hi_ber_up3_mask",
        3,
        1
      ],
      [
        "rx_pcs_hi_ber_up4_mask",
        4,
        1
      ],
      [
        "rx_pcs_hi_ber_up5_mask",
        5,
        1
      ],
      [
        "rx_pcs_hi_ber_up6_mask",
        6,
        1
      ],
      [
        "rx_pcs_hi_ber_up7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_hi_ber_up_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxPcsHiBerUp interrupt register",
    "fields": [
      [
        "rx_pcs_hi_ber_up0_test",
        0,
        1
      ],
      [
        "rx_pcs_hi_ber_up1_test",
        1,
        1
      ],
      [
        "rx_pcs_hi_ber_up2_test",
        2,
        1
      ],
      [
        "rx_pcs_hi_ber_up3_test",
        3,
        1
      ],
      [
        "rx_pcs_hi_ber_up4_test",
        4,
        1
      ],
      [
        "rx_pcs_hi_ber_up5_test",
        5,
        1
      ],
      [
        "rx_pcs_hi_ber_up6_test",
        6,
        1
      ],
      [
        "rx_pcs_hi_ber_up7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_crc_err_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC TX crc error interrupt",
    "fields": [
      [
        "tx_crc_err0",
        0,
        1
      ],
      [
        "tx_crc_err1",
        1,
        1
      ],
      [
        "tx_crc_err2",
        2,
        1
      ],
      [
        "tx_crc_err3",
        3,
        1
      ],
      [
        "tx_crc_err4",
        4,
        1
      ],
      [
        "tx_crc_err5",
        5,
        1
      ],
      [
        "tx_crc_err6",
        6,
        1
      ],
      [
        "tx_crc_err7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_crc_err_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks TxCrcErrInterruptRegister interrupt register",
    "fields": [
      [
        "tx_crc_err0_mask",
        0,
        1
      ],
      [
        "tx_crc_err1_mask",
        1,
        1
      ],
      [
        "tx_crc_err2_mask",
        2,
        1
      ],
      [
        "tx_crc_err3_mask",
        3,
        1
      ],
      [
        "tx_crc_err4_mask",
        4,
        1
      ],
      [
        "tx_crc_err5_mask",
        5,
        1
      ],
      [
        "tx_crc_err6_mask",
        6,
        1
      ],
      [
        "tx_crc_err7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_crc_err_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests TxCrcErrInterruptRegister interrupt register",
    "fields": [
      [
        "tx_crc_err0_test",
        0,
        1
      ],
      [
        "tx_crc_err1_test",
        1,
        1
      ],
      [
        "tx_crc_err2_test",
        2,
        1
      ],
      [
        "tx_crc_err3_test",
        3,
        1
      ],
      [
        "tx_crc_err4_test",
        4,
        1
      ],
      [
        "tx_crc_err5_test",
        5,
        1
      ],
      [
        "tx_crc_err6_test",
        6,
        1
      ],
      [
        "tx_crc_err7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_underrun_err_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC TX underrun interrupt",
    "fields": [
      [
        "tx_underrun_err0",
        0,
        1
      ],
      [
        "tx_underrun_err1",
        1,
        1
      ],
      [
        "tx_underrun_err2",
        2,
        1
      ],
      [
        "tx_underrun_err3",
        3,
        1
      ],
      [
        "tx_underrun_err4",
        4,
        1
      ],
      [
        "tx_underrun_err5",
        5,
        1
      ],
      [
        "tx_underrun_err6",
        6,
        1
      ],
      [
        "tx_underrun_err7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_underrun_err_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks TxUnderrunErrInterruptRegister interrupt register",
    "fields": [
      [
        "tx_underrun_err0_mask",
        0,
        1
      ],
      [
        "tx_underrun_err1_mask",
        1,
        1
      ],
      [
        "tx_underrun_err2_mask",
        2,
        1
      ],
      [
        "tx_underrun_err3_mask",
        3,
        1
      ],
      [
        "tx_underrun_err4_mask",
        4,
        1
      ],
      [
        "tx_underrun_err5_mask",
        5,
        1
      ],
      [
        "tx_underrun_err6_mask",
        6,
        1
      ],
      [
        "tx_underrun_err7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_underrun_err_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests TxUnderrunErrInterruptRegister interrupt register",
    "fields": [
      [
        "tx_underrun_err0_test",
        0,
        1
      ],
      [
        "tx_underrun_err1_test",
        1,
        1
      ],
      [
        "tx_underrun_err2_test",
        2,
        1
      ],
      [
        "tx_underrun_err3_test",
        3,
        1
      ],
      [
        "tx_underrun_err4_test",
        4,
        1
      ],
      [
        "tx_underrun_err5_test",
        5,
        1
      ],
      [
        "tx_underrun_err6_test",
        6,
        1
      ],
      [
        "tx_underrun_err7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_missing_eop_err_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC TX missing end of packet interrupt",
    "fields": [
      [
        "tx_missing_eop_err0",
        0,
        1
      ],
      [
        "tx_missing_eop_err1",
        1,
        1
      ],
      [
        "tx_missing_eop_err2",
        2,
        1
      ],
      [
        "tx_missing_eop_err3",
        3,
        1
      ],
      [
        "tx_missing_eop_err4",
        4,
        1
      ],
      [
        "tx_missing_eop_err5",
        5,
        1
      ],
      [
        "tx_missing_eop_err6",
        6,
        1
      ],
      [
        "tx_missing_eop_err7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_missing_eop_err_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks TxMissingEopErrInterruptRegister interrupt register",
    "fields": [
      [
        "tx_missing_eop_err0_mask",
        0,
        1
      ],
      [
        "tx_missing_eop_err1_mask",
        1,
        1
      ],
      [
        "tx_missing_eop_err2_mask",
        2,
        1
      ],
      [
        "tx_missing_eop_err3_mask",
        3,
        1
      ],
      [
        "tx_missing_eop_err4_mask",
        4,
        1
      ],
      [
        "tx_missing_eop_err5_mask",
        5,
        1
      ],
      [
        "tx_missing_eop_err6_mask",
        6,
        1
      ],
      [
        "tx_missing_eop_err7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_tx_missing_eop_err_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests TxMissingEopErrInterruptRegister interrupt register",
    "fields": [
      [
        "tx_missing_eop_err0_test",
        0,
        1
      ],
      [
        "tx_missing_eop_err1_test",
        1,
        1
      ],
      [
        "tx_missing_eop_err2_test",
        2,
        1
      ],
      [
        "tx_missing_eop_err3_test",
        3,
        1
      ],
      [
        "tx_missing_eop_err4_test",
        4,
        1
      ],
      [
        "tx_missing_eop_err5_test",
        5,
        1
      ],
      [
        "tx_missing_eop_err6_test",
        6,
        1
      ],
      [
        "tx_missing_eop_err7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_code_err_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC RX code error interrupt",
    "fields": [
      [
        "rx_code_err0",
        0,
        1
      ],
      [
        "rx_code_err1",
        1,
        1
      ],
      [
        "rx_code_err2",
        2,
        1
      ],
      [
        "rx_code_err3",
        3,
        1
      ],
      [
        "rx_code_err4",
        4,
        1
      ],
      [
        "rx_code_err5",
        5,
        1
      ],
      [
        "rx_code_err6",
        6,
        1
      ],
      [
        "rx_code_err7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_code_err_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxCodeErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_code_err0_mask",
        0,
        1
      ],
      [
        "rx_code_err1_mask",
        1,
        1
      ],
      [
        "rx_code_err2_mask",
        2,
        1
      ],
      [
        "rx_code_err3_mask",
        3,
        1
      ],
      [
        "rx_code_err4_mask",
        4,
        1
      ],
      [
        "rx_code_err5_mask",
        5,
        1
      ],
      [
        "rx_code_err6_mask",
        6,
        1
      ],
      [
        "rx_code_err7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_code_err_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxCodeErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_code_err0_test",
        0,
        1
      ],
      [
        "rx_code_err1_test",
        1,
        1
      ],
      [
        "rx_code_err2_test",
        2,
        1
      ],
      [
        "rx_code_err3_test",
        3,
        1
      ],
      [
        "rx_code_err4_test",
        4,
        1
      ],
      [
        "rx_code_err5_test",
        5,
        1
      ],
      [
        "rx_code_err6_test",
        6,
        1
      ],
      [
        "rx_code_err7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_crc_err_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC RX crc error interrupt",
    "fields": [
      [
        "rx_crc_err0",
        0,
        1
      ],
      [
        "rx_crc_err1",
        1,
        1
      ],
      [
        "rx_crc_err2",
        2,
        1
      ],
      [
        "rx_crc_err3",
        3,
        1
      ],
      [
        "rx_crc_err4",
        4,
        1
      ],
      [
        "rx_crc_err5",
        5,
        1
      ],
      [
        "rx_crc_err6",
        6,
        1
      ],
      [
        "rx_crc_err7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_crc_err_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxCrcErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_crc_err0_mask",
        0,
        1
      ],
      [
        "rx_crc_err1_mask",
        1,
        1
      ],
      [
        "rx_crc_err2_mask",
        2,
        1
      ],
      [
        "rx_crc_err3_mask",
        3,
        1
      ],
      [
        "rx_crc_err4_mask",
        4,
        1
      ],
      [
        "rx_crc_err5_mask",
        5,
        1
      ],
      [
        "rx_crc_err6_mask",
        6,
        1
      ],
      [
        "rx_crc_err7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_crc_err_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxCrcErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_crc_err0_test",
        0,
        1
      ],
      [
        "rx_crc_err1_test",
        1,
        1
      ],
      [
        "rx_crc_err2_test",
        2,
        1
      ],
      [
        "rx_crc_err3_test",
        3,
        1
      ],
      [
        "rx_crc_err4_test",
        4,
        1
      ],
      [
        "rx_crc_err5_test",
        5,
        1
      ],
      [
        "rx_crc_err6_test",
        6,
        1
      ],
      [
        "rx_crc_err7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_invert_crc_err_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC RX invert crc error interrupt (CRC result == 0xFFFFFFFF)",
    "fields": [
      [
        "rx_invert_crc_err0",
        0,
        1
      ],
      [
        "rx_invert_crc_err1",
        1,
        1
      ],
      [
        "rx_invert_crc_err2",
        2,
        1
      ],
      [
        "rx_invert_crc_err3",
        3,
        1
      ],
      [
        "rx_invert_crc_err4",
        4,
        1
      ],
      [
        "rx_invert_crc_err5",
        5,
        1
      ],
      [
        "rx_invert_crc_err6",
        6,
        1
      ],
      [
        "rx_invert_crc_err7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_invert_crc_err_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxInvertCrcErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_invert_crc_err0_mask",
        0,
        1
      ],
      [
        "rx_invert_crc_err1_mask",
        1,
        1
      ],
      [
        "rx_invert_crc_err2_mask",
        2,
        1
      ],
      [
        "rx_invert_crc_err3_mask",
        3,
        1
      ],
      [
        "rx_invert_crc_err4_mask",
        4,
        1
      ],
      [
        "rx_invert_crc_err5_mask",
        5,
        1
      ],
      [
        "rx_invert_crc_err6_mask",
        6,
        1
      ],
      [
        "rx_invert_crc_err7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_invert_crc_err_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxInvertCrcErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_invert_crc_err0_test",
        0,
        1
      ],
      [
        "rx_invert_crc_err1_test",
        1,
        1
      ],
      [
        "rx_invert_crc_err2_test",
        2,
        1
      ],
      [
        "rx_invert_crc_err3_test",
        3,
        1
      ],
      [
        "rx_invert_crc_err4_test",
        4,
        1
      ],
      [
        "rx_invert_crc_err5_test",
        5,
        1
      ],
      [
        "rx_invert_crc_err6_test",
        6,
        1
      ],
      [
        "rx_invert_crc_err7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_oversize_err_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC RX oversize error interrupt",
    "fields": [
      [
        "rx_oversize_err0",
        0,
        1
      ],
      [
        "rx_oversize_err1",
        1,
        1
      ],
      [
        "rx_oversize_err2",
        2,
        1
      ],
      [
        "rx_oversize_err3",
        3,
        1
      ],
      [
        "rx_oversize_err4",
        4,
        1
      ],
      [
        "rx_oversize_err5",
        5,
        1
      ],
      [
        "rx_oversize_err6",
        6,
        1
      ],
      [
        "rx_oversize_err7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_oversize_err_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxOversizeErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_oversize_err0_mask",
        0,
        1
      ],
      [
        "rx_oversize_err1_mask",
        1,
        1
      ],
      [
        "rx_oversize_err2_mask",
        2,
        1
      ],
      [
        "rx_oversize_err3_mask",
        3,
        1
      ],
      [
        "rx_oversize_err4_mask",
        4,
        1
      ],
      [
        "rx_oversize_err5_mask",
        5,
        1
      ],
      [
        "rx_oversize_err6_mask",
        6,
        1
      ],
      [
        "rx_oversize_err7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_oversize_err_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxOversizeErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_oversize_err0_test",
        0,
        1
      ],
      [
        "rx_oversize_err1_test",
        1,
        1
      ],
      [
        "rx_oversize_err2_test",
        2,
        1
      ],
      [
        "rx_oversize_err3_test",
        3,
        1
      ],
      [
        "rx_oversize_err4_test",
        4,
        1
      ],
      [
        "rx_oversize_err5_test",
        5,
        1
      ],
      [
        "rx_oversize_err6_test",
        6,
        1
      ],
      [
        "rx_oversize_err7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_undersize_err_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC RX undersize error interrupt",
    "fields": [
      [
        "rx_undersize_err0",
        0,
        1
      ],
      [
        "rx_undersize_err1",
        1,
        1
      ],
      [
        "rx_undersize_err2",
        2,
        1
      ],
      [
        "rx_undersize_err3",
        3,
        1
      ],
      [
        "rx_undersize_err4",
        4,
        1
      ],
      [
        "rx_undersize_err5",
        5,
        1
      ],
      [
        "rx_undersize_err6",
        6,
        1
      ],
      [
        "rx_undersize_err7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_undersize_err_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxUndersizeErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_undersize_err0_mask",
        0,
        1
      ],
      [
        "rx_undersize_err1_mask",
        1,
        1
      ],
      [
        "rx_undersize_err2_mask",
        2,
        1
      ],
      [
        "rx_undersize_err3_mask",
        3,
        1
      ],
      [
        "rx_undersize_err4_mask",
        4,
        1
      ],
      [
        "rx_undersize_err5_mask",
        5,
        1
      ],
      [
        "rx_undersize_err6_mask",
        6,
        1
      ],
      [
        "rx_undersize_err7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_undersize_err_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxUndersizeErrInterruptRegister interrupt register",
    "fields": [
      [
        "rx_undersize_err0_test",
        0,
        1
      ],
      [
        "rx_undersize_err1_test",
        1,
        1
      ],
      [
        "rx_undersize_err2_test",
        2,
        1
      ],
      [
        "rx_undersize_err3_test",
        3,
        1
      ],
      [
        "rx_undersize_err4_test",
        4,
        1
      ],
      [
        "rx_undersize_err5_test",
        5,
        1
      ],
      [
        "rx_undersize_err6_test",
        6,
        1
      ],
      [
        "rx_undersize_err7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Lanes deskew fifos overflow interrupt. This indicates lanes skew is more than the maximal supported skew.",
    "fields": [
      [
        "rx_deskew_fif_ovf0_0",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf0_1",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf0_2",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf0_3",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf0_4",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf0_5",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf0_6",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf0_7",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf0_8",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf0_9",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register0_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register masks RxDeskFifOvfInterruptRegister0 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf0_0_mask",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf0_1_mask",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf0_2_mask",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf0_3_mask",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf0_4_mask",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf0_5_mask",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf0_6_mask",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf0_7_mask",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf0_8_mask",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf0_9_mask",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register0_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register tests RxDeskFifOvfInterruptRegister0 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf0_0_test",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf0_1_test",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf0_2_test",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf0_3_test",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf0_4_test",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf0_5_test",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf0_6_test",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf0_7_test",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf0_8_test",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf0_9_test",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register1": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Lanes deskew fifos overflow interrupt. This indicates lanes skew is more than the maximal supported skew.",
    "fields": [
      [
        "rx_deskew_fif_ovf1_0",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf1_1",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf1_2",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf1_3",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf1_4",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf1_5",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf1_6",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf1_7",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf1_8",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf1_9",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register1_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register masks RxDeskFifOvfInterruptRegister1 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf1_0_mask",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf1_1_mask",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf1_2_mask",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf1_3_mask",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf1_4_mask",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf1_5_mask",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf1_6_mask",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf1_7_mask",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf1_8_mask",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf1_9_mask",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register1_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register tests RxDeskFifOvfInterruptRegister1 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf1_0_test",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf1_1_test",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf1_2_test",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf1_3_test",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf1_4_test",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf1_5_test",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf1_6_test",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf1_7_test",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf1_8_test",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf1_9_test",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register2": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Lanes deskew fifos overflow interrupt. This indicates lanes skew is more than the maximal supported skew.",
    "fields": [
      [
        "rx_deskew_fif_ovf2_0",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf2_1",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf2_2",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf2_3",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf2_4",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf2_5",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf2_6",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf2_7",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf2_8",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf2_9",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register2_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register masks RxDeskFifOvfInterruptRegister2 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf2_0_mask",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf2_1_mask",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf2_2_mask",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf2_3_mask",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf2_4_mask",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf2_5_mask",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf2_6_mask",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf2_7_mask",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf2_8_mask",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf2_9_mask",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register2_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register tests RxDeskFifOvfInterruptRegister2 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf2_0_test",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf2_1_test",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf2_2_test",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf2_3_test",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf2_4_test",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf2_5_test",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf2_6_test",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf2_7_test",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf2_8_test",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf2_9_test",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register3": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Lanes deskew fifos overflow interrupt. This indicates lanes skew is more than the maximal supported skew.",
    "fields": [
      [
        "rx_deskew_fif_ovf3_0",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf3_1",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf3_2",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf3_3",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf3_4",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf3_5",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf3_6",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf3_7",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf3_8",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf3_9",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register3_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register masks RxDeskFifOvfInterruptRegister3 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf3_0_mask",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf3_1_mask",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf3_2_mask",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf3_3_mask",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf3_4_mask",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf3_5_mask",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf3_6_mask",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf3_7_mask",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf3_8_mask",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf3_9_mask",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register3_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register tests RxDeskFifOvfInterruptRegister3 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf3_0_test",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf3_1_test",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf3_2_test",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf3_3_test",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf3_4_test",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf3_5_test",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf3_6_test",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf3_7_test",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf3_8_test",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf3_9_test",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register4": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Lanes deskew fifos overflow interrupt. This indicates lanes skew is more than the maximal supported skew.",
    "fields": [
      [
        "rx_deskew_fif_ovf4_0",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf4_1",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf4_2",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf4_3",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf4_4",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf4_5",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf4_6",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf4_7",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf4_8",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf4_9",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register4_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register masks RxDeskFifOvfInterruptRegister4 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf4_0_mask",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf4_1_mask",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf4_2_mask",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf4_3_mask",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf4_4_mask",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf4_5_mask",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf4_6_mask",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf4_7_mask",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf4_8_mask",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf4_9_mask",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register4_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register tests RxDeskFifOvfInterruptRegister4 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf4_0_test",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf4_1_test",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf4_2_test",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf4_3_test",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf4_4_test",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf4_5_test",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf4_6_test",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf4_7_test",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf4_8_test",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf4_9_test",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register5": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Lanes deskew fifos overflow interrupt. This indicates lanes skew is more than the maximal supported skew.",
    "fields": [
      [
        "rx_deskew_fif_ovf5_0",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf5_1",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf5_2",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf5_3",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf5_4",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf5_5",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf5_6",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf5_7",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf5_8",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf5_9",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register5_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register masks RxDeskFifOvfInterruptRegister5 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf5_0_mask",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf5_1_mask",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf5_2_mask",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf5_3_mask",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf5_4_mask",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf5_5_mask",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf5_6_mask",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf5_7_mask",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf5_8_mask",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf5_9_mask",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register5_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register tests RxDeskFifOvfInterruptRegister5 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf5_0_test",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf5_1_test",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf5_2_test",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf5_3_test",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf5_4_test",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf5_5_test",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf5_6_test",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf5_7_test",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf5_8_test",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf5_9_test",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register6": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Lanes deskew fifos overflow interrupt. This indicates lanes skew is more than the maximal supported skew.",
    "fields": [
      [
        "rx_deskew_fif_ovf6_0",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf6_1",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf6_2",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf6_3",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf6_4",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf6_5",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf6_6",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf6_7",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf6_8",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf6_9",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register6_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register masks RxDeskFifOvfInterruptRegister6 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf6_0_mask",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf6_1_mask",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf6_2_mask",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf6_3_mask",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf6_4_mask",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf6_5_mask",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf6_6_mask",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf6_7_mask",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf6_8_mask",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf6_9_mask",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register6_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register tests RxDeskFifOvfInterruptRegister6 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf6_0_test",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf6_1_test",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf6_2_test",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf6_3_test",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf6_4_test",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf6_5_test",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf6_6_test",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf6_7_test",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf6_8_test",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf6_9_test",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register7": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "Lanes deskew fifos overflow interrupt. This indicates lanes skew is more than the maximal supported skew.",
    "fields": [
      [
        "rx_deskew_fif_ovf7_0",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf7_1",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf7_2",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf7_3",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf7_4",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf7_5",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf7_6",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf7_7",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf7_8",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf7_9",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register7_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register masks RxDeskFifOvfInterruptRegister7 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf7_0_mask",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf7_1_mask",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf7_2_mask",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf7_3_mask",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf7_4_mask",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf7_5_mask",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf7_6_mask",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf7_7_mask",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf7_8_mask",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf7_9_mask",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_desk_fif_ovf_interrupt_register7_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "This register tests RxDeskFifOvfInterruptRegister7 interrupt register",
    "fields": [
      [
        "rx_deskew_fif_ovf7_0_test",
        0,
        1
      ],
      [
        "rx_deskew_fif_ovf7_1_test",
        1,
        1
      ],
      [
        "rx_deskew_fif_ovf7_2_test",
        2,
        1
      ],
      [
        "rx_deskew_fif_ovf7_3_test",
        3,
        1
      ],
      [
        "rx_deskew_fif_ovf7_4_test",
        4,
        1
      ],
      [
        "rx_deskew_fif_ovf7_5_test",
        5,
        1
      ],
      [
        "rx_deskew_fif_ovf7_6_test",
        6,
        1
      ],
      [
        "rx_deskew_fif_ovf7_7_test",
        7,
        1
      ],
      [
        "rx_deskew_fif_ovf7_8_test",
        8,
        1
      ],
      [
        "rx_deskew_fif_ovf7_9_test",
        9,
        1
      ]
    ]
  },
  "mac_pool8_rx_pma_sig_ok_loss_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "Signal OK was dropped after it was up",
    "fields": [
      [
        "rx_signal_ok_loss0",
        0,
        1
      ],
      [
        "rx_signal_ok_loss1",
        1,
        1
      ],
      [
        "rx_signal_ok_loss2",
        2,
        1
      ],
      [
        "rx_signal_ok_loss3",
        3,
        1
      ],
      [
        "rx_signal_ok_loss4",
        4,
        1
      ],
      [
        "rx_signal_ok_loss5",
        5,
        1
      ],
      [
        "rx_signal_ok_loss6",
        6,
        1
      ],
      [
        "rx_signal_ok_loss7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pma_sig_ok_loss_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RxPmaSigOkLossInterruptRegister interrupt register",
    "fields": [
      [
        "rx_signal_ok_loss0_mask",
        0,
        1
      ],
      [
        "rx_signal_ok_loss1_mask",
        1,
        1
      ],
      [
        "rx_signal_ok_loss2_mask",
        2,
        1
      ],
      [
        "rx_signal_ok_loss3_mask",
        3,
        1
      ],
      [
        "rx_signal_ok_loss4_mask",
        4,
        1
      ],
      [
        "rx_signal_ok_loss5_mask",
        5,
        1
      ],
      [
        "rx_signal_ok_loss6_mask",
        6,
        1
      ],
      [
        "rx_signal_ok_loss7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rx_pma_sig_ok_loss_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RxPmaSigOkLossInterruptRegister interrupt register",
    "fields": [
      [
        "rx_signal_ok_loss0_test",
        0,
        1
      ],
      [
        "rx_signal_ok_loss1_test",
        1,
        1
      ],
      [
        "rx_signal_ok_loss2_test",
        2,
        1
      ],
      [
        "rx_signal_ok_loss3_test",
        3,
        1
      ],
      [
        "rx_signal_ok_loss4_test",
        4,
        1
      ],
      [
        "rx_signal_ok_loss5_test",
        5,
        1
      ],
      [
        "rx_signal_ok_loss6_test",
        6,
        1
      ],
      [
        "rx_signal_ok_loss7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_high_ser_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "High SER indicated from RS FEC",
    "fields": [
      [
        "rx_high_ser0",
        0,
        1
      ],
      [
        "rx_high_ser1",
        1,
        1
      ],
      [
        "rx_high_ser2",
        2,
        1
      ],
      [
        "rx_high_ser3",
        3,
        1
      ],
      [
        "rx_high_ser4",
        4,
        1
      ],
      [
        "rx_high_ser5",
        5,
        1
      ],
      [
        "rx_high_ser6",
        6,
        1
      ],
      [
        "rx_high_ser7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_high_ser_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RsfRxHighSerInterruptRegister interrupt register",
    "fields": [
      [
        "rx_high_ser0_mask",
        0,
        1
      ],
      [
        "rx_high_ser1_mask",
        1,
        1
      ],
      [
        "rx_high_ser2_mask",
        2,
        1
      ],
      [
        "rx_high_ser3_mask",
        3,
        1
      ],
      [
        "rx_high_ser4_mask",
        4,
        1
      ],
      [
        "rx_high_ser5_mask",
        5,
        1
      ],
      [
        "rx_high_ser6_mask",
        6,
        1
      ],
      [
        "rx_high_ser7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_high_ser_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RsfRxHighSerInterruptRegister interrupt register",
    "fields": [
      [
        "rx_high_ser0_test",
        0,
        1
      ],
      [
        "rx_high_ser1_test",
        1,
        1
      ],
      [
        "rx_high_ser2_test",
        2,
        1
      ],
      [
        "rx_high_ser3_test",
        3,
        1
      ],
      [
        "rx_high_ser4_test",
        4,
        1
      ],
      [
        "rx_high_ser5_test",
        5,
        1
      ],
      [
        "rx_high_ser6_test",
        6,
        1
      ],
      [
        "rx_high_ser7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_degraded_ser_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "Local Degreaded SER indicated from RS FEC (802.3bs, 802.3cd)",
    "fields": [
      [
        "rx_degraded_ser0",
        0,
        1
      ],
      [
        "rx_degraded_ser1",
        1,
        1
      ],
      [
        "rx_degraded_ser2",
        2,
        1
      ],
      [
        "rx_degraded_ser3",
        3,
        1
      ],
      [
        "rx_degraded_ser4",
        4,
        1
      ],
      [
        "rx_degraded_ser5",
        5,
        1
      ],
      [
        "rx_degraded_ser6",
        6,
        1
      ],
      [
        "rx_degraded_ser7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_degraded_ser_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RsfRxDegradedSerInterruptRegister interrupt register",
    "fields": [
      [
        "rx_degraded_ser0_mask",
        0,
        1
      ],
      [
        "rx_degraded_ser1_mask",
        1,
        1
      ],
      [
        "rx_degraded_ser2_mask",
        2,
        1
      ],
      [
        "rx_degraded_ser3_mask",
        3,
        1
      ],
      [
        "rx_degraded_ser4_mask",
        4,
        1
      ],
      [
        "rx_degraded_ser5_mask",
        5,
        1
      ],
      [
        "rx_degraded_ser6_mask",
        6,
        1
      ],
      [
        "rx_degraded_ser7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_degraded_ser_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RsfRxDegradedSerInterruptRegister interrupt register",
    "fields": [
      [
        "rx_degraded_ser0_test",
        0,
        1
      ],
      [
        "rx_degraded_ser1_test",
        1,
        1
      ],
      [
        "rx_degraded_ser2_test",
        2,
        1
      ],
      [
        "rx_degraded_ser3_test",
        3,
        1
      ],
      [
        "rx_degraded_ser4_test",
        4,
        1
      ],
      [
        "rx_degraded_ser5_test",
        5,
        1
      ],
      [
        "rx_degraded_ser6_test",
        6,
        1
      ],
      [
        "rx_degraded_ser7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_rm_degraded_ser_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "Remote Degreaded SER indicated from RS FEC (802.3bs, 802.3cd)",
    "fields": [
      [
        "rx_rm_degraded_ser0",
        0,
        1
      ],
      [
        "rx_rm_degraded_ser1",
        1,
        1
      ],
      [
        "rx_rm_degraded_ser2",
        2,
        1
      ],
      [
        "rx_rm_degraded_ser3",
        3,
        1
      ],
      [
        "rx_rm_degraded_ser4",
        4,
        1
      ],
      [
        "rx_rm_degraded_ser5",
        5,
        1
      ],
      [
        "rx_rm_degraded_ser6",
        6,
        1
      ],
      [
        "rx_rm_degraded_ser7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_rm_degraded_ser_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks RsfRxRmDegradedSerInterruptRegister interrupt register",
    "fields": [
      [
        "rx_rm_degraded_ser0_mask",
        0,
        1
      ],
      [
        "rx_rm_degraded_ser1_mask",
        1,
        1
      ],
      [
        "rx_rm_degraded_ser2_mask",
        2,
        1
      ],
      [
        "rx_rm_degraded_ser3_mask",
        3,
        1
      ],
      [
        "rx_rm_degraded_ser4_mask",
        4,
        1
      ],
      [
        "rx_rm_degraded_ser5_mask",
        5,
        1
      ],
      [
        "rx_rm_degraded_ser6_mask",
        6,
        1
      ],
      [
        "rx_rm_degraded_ser7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rsf_rx_rm_degraded_ser_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests RsfRxRmDegradedSerInterruptRegister interrupt register",
    "fields": [
      [
        "rx_rm_degraded_ser0_test",
        0,
        1
      ],
      [
        "rx_rm_degraded_ser1_test",
        1,
        1
      ],
      [
        "rx_rm_degraded_ser2_test",
        2,
        1
      ],
      [
        "rx_rm_degraded_ser3_test",
        3,
        1
      ],
      [
        "rx_rm_degraded_ser4_test",
        4,
        1
      ],
      [
        "rx_rm_degraded_ser5_test",
        5,
        1
      ],
      [
        "rx_rm_degraded_ser6_test",
        6,
        1
      ],
      [
        "rx_rm_degraded_ser7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_device_time_fif_ne_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "Device Time fifo is not empty.",
    "fields": [
      [
        "device_time_fif_ne0",
        0,
        1
      ],
      [
        "device_time_fif_ne1",
        1,
        1
      ],
      [
        "device_time_fif_ne2",
        2,
        1
      ],
      [
        "device_time_fif_ne3",
        3,
        1
      ],
      [
        "device_time_fif_ne4",
        4,
        1
      ],
      [
        "device_time_fif_ne5",
        5,
        1
      ],
      [
        "device_time_fif_ne6",
        6,
        1
      ],
      [
        "device_time_fif_ne7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_device_time_fif_ne_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks DeviceTimeFifNeInterruptRegister interrupt register",
    "fields": [
      [
        "device_time_fif_ne0_mask",
        0,
        1
      ],
      [
        "device_time_fif_ne1_mask",
        1,
        1
      ],
      [
        "device_time_fif_ne2_mask",
        2,
        1
      ],
      [
        "device_time_fif_ne3_mask",
        3,
        1
      ],
      [
        "device_time_fif_ne4_mask",
        4,
        1
      ],
      [
        "device_time_fif_ne5_mask",
        5,
        1
      ],
      [
        "device_time_fif_ne6_mask",
        6,
        1
      ],
      [
        "device_time_fif_ne7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_device_time_fif_ne_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests DeviceTimeFifNeInterruptRegister interrupt register",
    "fields": [
      [
        "device_time_fif_ne0_test",
        0,
        1
      ],
      [
        "device_time_fif_ne1_test",
        1,
        1
      ],
      [
        "device_time_fif_ne2_test",
        2,
        1
      ],
      [
        "device_time_fif_ne3_test",
        3,
        1
      ],
      [
        "device_time_fif_ne4_test",
        4,
        1
      ],
      [
        "device_time_fif_ne5_test",
        5,
        1
      ],
      [
        "device_time_fif_ne6_test",
        6,
        1
      ],
      [
        "device_time_fif_ne7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_device_time_override_interrupt_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "Device Time Not read by cpu before next packet with record command sent",
    "fields": [
      [
        "device_time_override0",
        0,
        1
      ],
      [
        "device_time_override1",
        1,
        1
      ],
      [
        "device_time_override2",
        2,
        1
      ],
      [
        "device_time_override3",
        3,
        1
      ],
      [
        "device_time_override4",
        4,
        1
      ],
      [
        "device_time_override5",
        5,
        1
      ],
      [
        "device_time_override6",
        6,
        1
      ],
      [
        "device_time_override7",
        7,
        1
      ]
    ]
  },
  "mac_pool8_device_time_override_interrupt_register_mask": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register masks DeviceTimeOverrideInterruptRegister interrupt register",
    "fields": [
      [
        "device_time_override0_mask",
        0,
        1
      ],
      [
        "device_time_override1_mask",
        1,
        1
      ],
      [
        "device_time_override2_mask",
        2,
        1
      ],
      [
        "device_time_override3_mask",
        3,
        1
      ],
      [
        "device_time_override4_mask",
        4,
        1
      ],
      [
        "device_time_override5_mask",
        5,
        1
      ],
      [
        "device_time_override6_mask",
        6,
        1
      ],
      [
        "device_time_override7_mask",
        7,
        1
      ]
    ]
  },
  "mac_pool8_device_time_override_interrupt_register_test": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "This register tests DeviceTimeOverrideInterruptRegister interrupt register",
    "fields": [
      [
        "device_time_override0_test",
        0,
        1
      ],
      [
        "device_time_override1_test",
        1,
        1
      ],
      [
        "device_time_override2_test",
        2,
        1
      ],
      [
        "device_time_override3_test",
        3,
        1
      ],
      [
        "device_time_override4_test",
        4,
        1
      ],
      [
        "device_time_override5_test",
        5,
        1
      ],
      [
        "device_time_override6_test",
        6,
        1
      ],
      [
        "device_time_override7_test",
        7,
        1
      ]
    ]
  },
  "mac_pool8_rstn_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 120,
    "desc": "Soft reset register The fields in this register are encoded as following: 0 - Reset. 1 - Active.",
    "fields": [
      [
        "tx_mac_rstn0",
        0,
        1
      ],
      [
        "tx_mac_rstn1",
        1,
        1
      ],
      [
        "tx_mac_rstn2",
        2,
        1
      ],
      [
        "tx_mac_rstn3",
        3,
        1
      ],
      [
        "tx_mac_rstn4",
        4,
        1
      ],
      [
        "tx_mac_rstn5",
        5,
        1
      ],
      [
        "tx_mac_rstn6",
        6,
        1
      ],
      [
        "tx_mac_rstn7",
        7,
        1
      ],
      [
        "rx_mac_rstn0",
        8,
        1
      ],
      [
        "rx_mac_rstn1",
        9,
        1
      ],
      [
        "rx_mac_rstn2",
        10,
        1
      ],
      [
        "rx_mac_rstn3",
        11,
        1
      ],
      [
        "rx_mac_rstn4",
        12,
        1
      ],
      [
        "rx_mac_rstn5",
        13,
        1
      ],
      [
        "rx_mac_rstn6",
        14,
        1
      ],
      [
        "rx_mac_rstn7",
        15,
        1
      ],
      [
        "tx_rs_rstn0",
        16,
        1
      ],
      [
        "tx_rs_rstn1",
        17,
        1
      ],
      [
        "tx_rs_rstn2",
        18,
        1
      ],
      [
        "tx_rs_rstn3",
        19,
        1
      ],
      [
        "tx_rs_rstn4",
        20,
        1
      ],
      [
        "tx_rs_rstn5",
        21,
        1
      ],
      [
        "tx_rs_rstn6",
        22,
        1
      ],
      [
        "tx_rs_rstn7",
        23,
        1
      ],
      [
        "rx_rs_rstn0",
        24,
        1
      ],
      [
        "rx_rs_rstn1",
        25,
        1
      ],
      [
        "rx_rs_rstn2",
        26,
        1
      ],
      [
        "rx_rs_rstn3",
        27,
        1
      ],
      [
        "rx_rs_rstn4",
        28,
        1
      ],
      [
        "rx_rs_rstn5",
        29,
        1
      ],
      [
        "rx_rs_rstn6",
        30,
        1
      ],
      [
        "rx_rs_rstn7",
        31,
        1
      ],
      [
        "tx_pcs_rstn0",
        32,
        1
      ],
      [
        "tx_pcs_rstn1",
        33,
        1
      ],
      [
        "tx_pcs_rstn2",
        34,
        1
      ],
      [
        "tx_pcs_rstn3",
        35,
        1
      ],
      [
        "tx_pcs_rstn4",
        36,
        1
      ],
      [
        "tx_pcs_rstn5",
        37,
        1
      ],
      [
        "tx_pcs_rstn6",
        38,
        1
      ],
      [
        "tx_pcs_rstn7",
        39,
        1
      ],
      [
        "rx_pcs_rstn0",
        40,
        1
      ],
      [
        "rx_pcs_rstn1",
        41,
        1
      ],
      [
        "rx_pcs_rstn2",
        42,
        1
      ],
      [
        "rx_pcs_rstn3",
        43,
        1
      ],
      [
        "rx_pcs_rstn4",
        44,
        1
      ],
      [
        "rx_pcs_rstn5",
        45,
        1
      ],
      [
        "rx_pcs_rstn6",
        46,
        1
      ],
      [
        "rx_pcs_rstn7",
        47,
        1
      ],
      [
        "rx_pcs_sync_rstn0",
        48,
        1
      ],
      [
        "rx_pcs_sync_rstn1",
        49,
        1
      ],
      [
        "rx_pcs_sync_rstn2",
        50,
        1
      ],
      [
        "rx_pcs_sync_rstn3",
        51,
        1
      ],
      [
        "rx_pcs_sync_rstn4",
        52,
        1
      ],
      [
        "rx_pcs_sync_rstn5",
        53,
        1
      ],
      [
        "rx_pcs_sync_rstn6",
        54,
        1
      ],
      [
        "rx_pcs_sync_rstn7",
        55,
        1
      ],
      [
        "tx_rsf_rstn0",
        56,
        1
      ],
      [
        "tx_rsf_rstn1",
        57,
        1
      ],
      [
        "tx_rsf_rstn2",
        58,
        1
      ],
      [
        "tx_rsf_rstn3",
        59,
        1
      ],
      [
        "tx_rsf_rstn4",
        60,
        1
      ],
      [
        "tx_rsf_rstn5",
        61,
        1
      ],
      [
        "tx_rsf_rstn6",
        62,
        1
      ],
      [
        "tx_rsf_rstn7",
        63,
        1
      ],
      [
        "rx_rsf_rstn0",
        64,
        1
      ],
      [
        "rx_rsf_rstn1",
        65,
        1
      ],
      [
        "rx_rsf_rstn2",
        66,
        1
      ],
      [
        "rx_rsf_rstn3",
        67,
        1
      ],
      [
        "rx_rsf_rstn4",
        68,
        1
      ],
      [
        "rx_rsf_rstn5",
        69,
        1
      ],
      [
        "rx_rsf_rstn6",
        70,
        1
      ],
      [
        "rx_rsf_rstn7",
        71,
        1
      ],
      [
        "tx_pma_core_side_rstn0",
        72,
        1
      ],
      [
        "tx_pma_core_side_rstn1",
        73,
        1
      ],
      [
        "tx_pma_core_side_rstn2",
        74,
        1
      ],
      [
        "tx_pma_core_side_rstn3",
        75,
        1
      ],
      [
        "tx_pma_core_side_rstn4",
        76,
        1
      ],
      [
        "tx_pma_core_side_rstn5",
        77,
        1
      ],
      [
        "tx_pma_core_side_rstn6",
        78,
        1
      ],
      [
        "tx_pma_core_side_rstn7",
        79,
        1
      ],
      [
        "tx_pma_srd_side_rstn0",
        80,
        1
      ],
      [
        "tx_pma_srd_side_rstn1",
        81,
        1
      ],
      [
        "tx_pma_srd_side_rstn2",
        82,
        1
      ],
      [
        "tx_pma_srd_side_rstn3",
        83,
        1
      ],
      [
        "tx_pma_srd_side_rstn4",
        84,
        1
      ],
      [
        "tx_pma_srd_side_rstn5",
        85,
        1
      ],
      [
        "tx_pma_srd_side_rstn6",
        86,
        1
      ],
      [
        "tx_pma_srd_side_rstn7",
        87,
        1
      ],
      [
        "rx_pma_core_side_rstn0",
        88,
        1
      ],
      [
        "rx_pma_core_side_rstn1",
        89,
        1
      ],
      [
        "rx_pma_core_side_rstn2",
        90,
        1
      ],
      [
        "rx_pma_core_side_rstn3",
        91,
        1
      ],
      [
        "rx_pma_core_side_rstn4",
        92,
        1
      ],
      [
        "rx_pma_core_side_rstn5",
        93,
        1
      ],
      [
        "rx_pma_core_side_rstn6",
        94,
        1
      ],
      [
        "rx_pma_core_side_rstn7",
        95,
        1
      ],
      [
        "rx_pma_srd_side_rstn0",
        96,
        1
      ],
      [
        "rx_pma_srd_side_rstn1",
        97,
        1
      ],
      [
        "rx_pma_srd_side_rstn2",
        98,
        1
      ],
      [
        "rx_pma_srd_side_rstn3",
        99,
        1
      ],
      [
        "rx_pma_srd_side_rstn4",
        100,
        1
      ],
      [
        "rx_pma_srd_side_rstn5",
        101,
        1
      ],
      [
        "rx_pma_srd_side_rstn6",
        102,
        1
      ],
      [
        "rx_pma_srd_side_rstn7",
        103,
        1
      ],
      [
        "tx_krf_rstn0",
        104,
        1
      ],
      [
        "tx_krf_rstn1",
        105,
        1
      ],
      [
        "tx_krf_rstn2",
        106,
        1
      ],
      [
        "tx_krf_rstn3",
        107,
        1
      ],
      [
        "tx_krf_rstn4",
        108,
        1
      ],
      [
        "tx_krf_rstn5",
        109,
        1
      ],
      [
        "tx_krf_rstn6",
        110,
        1
      ],
      [
        "tx_krf_rstn7",
        111,
        1
      ],
      [
        "rx_krf_rstn0",
        112,
        1
      ],
      [
        "rx_krf_rstn1",
        113,
        1
      ],
      [
        "rx_krf_rstn2",
        114,
        1
      ],
      [
        "rx_krf_rstn3",
        115,
        1
      ],
      [
        "rx_krf_rstn4",
        116,
        1
      ],
      [
        "rx_krf_rstn5",
        117,
        1
      ],
      [
        "rx_krf_rstn6",
        118,
        1
      ],
      [
        "rx_krf_rstn7",
        119,
        1
      ]
    ]
  },
  "mac_pool8_tx_mac_lanes_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 7,
    "desc": "Define the topology of mac lanes working together.",
    "fields": [
      [
        "tx_2_lanes_mode",
        0,
        4
      ],
      [
        "tx_4_lanes_mode",
        4,
        2
      ],
      [
        "tx_8_lanes_mode",
        6,
        1
      ]
    ]
  },
  "mac_pool8_rx_mac_lanes_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 7,
    "desc": "Define the topology of mac lanes working together.",
    "fields": [
      [
        "rx_2_lanes_mode",
        0,
        4
      ],
      [
        "rx_4_lanes_mode",
        4,
        2
      ],
      [
        "rx_8_lanes_mode",
        6,
        1
      ]
    ]
  },
  "mac_pool8_mlp_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 2,
    "desc": "1T port configurations",
    "fields": [
      [
        "tx_mlp_en",
        0,
        1
      ],
      [
        "rx_mlp_en",
        1,
        1
      ]
    ]
  },
  "mac_pool8_tx_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 15,
    "desc": "General TX configurations. This register holds the main TX configurations per MAC lane.",
    "fields": [
      [
        "tx_port_speed",
        0,
        3
      ],
      [
        "tx_100g_frame_intrlv_en",
        3,
        1
      ],
      [
        "tx_port_nof_srd",
        4,
        2
      ],
      [
        "tx_bypass_scr",
        6,
        1
      ],
      [
        "tx_rsf_scr_enable",
        7,
        1
      ],
      [
        "tx_en_32b_alignment",
        8,
        1
      ],
      [
        "tx_preamble_compression",
        9,
        1
      ],
      [
        "tx_fec_mode",
        10,
        2
      ],
      [
        "tx_oob_intrlv_en",
        12,
        1
      ],
      [
        "tx_fabric_mode",
        13,
        1
      ],
      [
        "tx_rsf_100g_am_cd_style",
        14,
        1
      ]
    ]
  },
  "mac_pool8_rx_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 29,
    "desc": "General RX configurations. This register holds the main RX configurations per MAC lane.",
    "fields": [
      [
        "rx_port_speed",
        0,
        3
      ],
      [
        "rx_100g_frame_intrlv_en",
        3,
        1
      ],
      [
        "rx_port_nof_srd",
        4,
        2
      ],
      [
        "rx_bypass_scr",
        6,
        1
      ],
      [
        "rx_rsf_scr_enable",
        7,
        1
      ],
      [
        "rx_en_32b_alignment",
        8,
        1
      ],
      [
        "rx_preamble_compression",
        9,
        1
      ],
      [
        "rx_fec_mode",
        10,
        2
      ],
      [
        "rx_66b_w_lock_en",
        12,
        1
      ],
      [
        "rx_rsf_single_alm_empty_thd",
        13,
        8
      ],
      [
        "rx_oob_intrlv_en",
        21,
        1
      ],
      [
        "rx_fabric_mode",
        22,
        1
      ],
      [
        "rx_rsf_err_ind_mark_mode",
        23,
        2
      ],
      [
        "rx_am_invalid_cnt_thd",
        25,
        3
      ],
      [
        "rx_high_ber_fsm_act_en",
        28,
        1
      ]
    ]
  },
  "mac_pool8_am_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 35,
    "desc": "Alignment markers configuration register",
    "fields": [
      [
        "rx_am_cfg",
        0,
        17
      ],
      [
        "tx_am_cfg",
        17,
        18
      ]
    ]
  },
  "mac_pool8_mac_lanes_loopback_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 2,
    "desc": "Per MAC lane MII loopback configuration - shared between RX and TX per MAC lane.",
    "fields": [
      [
        "mii_loopback_mode",
        0,
        2
      ]
    ]
  },
  "mac_pool8_pma_loopback_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 2,
    "desc": "Per physical lane PMA loopback configuration - shared between RX and TX per physical ane.",
    "fields": [
      [
        "pma_loopback_mode",
        0,
        2
      ]
    ]
  },
  "mac_pool8_tx_pcs_test_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 4,
    "desc": "PCS TX test patterns configurations",
    "fields": [
      [
        "tx_pcs_test_en",
        0,
        1
      ],
      [
        "tx_pcs_test_mode",
        1,
        2
      ],
      [
        "tx_pcs_data_pattern_sel",
        3,
        1
      ]
    ]
  },
  "mac_pool8_tx_pcs_test_cfg1": {
    "type": "register",
    "block": "mac_pool8",
    "width": 58,
    "desc": "PCS TX test patterns configurations",
    "fields": [
      [
        "tx_pcs_pattern_seed_a",
        0,
        58
      ]
    ]
  },
  "mac_pool8_tx_pcs_test_cfg2": {
    "type": "register",
    "block": "mac_pool8",
    "width": 58,
    "desc": "PCS TX test patterns configurations",
    "fields": [
      [
        "tx_pcs_pattern_seed_b",
        0,
        58
      ]
    ]
  },
  "mac_pool8_rx_pcs_test_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 4,
    "desc": "PCS RX test patterns configurations",
    "fields": [
      [
        "rx_pcs_test_en",
        0,
        1
      ],
      [
        "rx_pcs_test_mode",
        1,
        2
      ],
      [
        "rx_pcs_data_pattern_sel",
        3,
        1
      ]
    ]
  },
  "mac_pool8_rx_pcs_test_counter": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "PCS test mode errors counter",
    "fields": [
      [
        "rx_pcs_test_errors_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_mac_en_cfg_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 8,
    "desc": "MAC RX data isolation register.",
    "fields": [
      [
        "rx_data_en",
        0,
        8
      ]
    ]
  },
  "mac_pool8_rx_mac_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 12,
    "desc": "Per Port MAC RX configurations",
    "fields": [
      [
        "rx_crc_check",
        0,
        1
      ],
      [
        "rx_crc_oob_check",
        1,
        1
      ],
      [
        "rx_oob_intrlv_type_filt_en",
        2,
        1
      ],
      [
        "rx_oob_intrlv_inb_type_filt_en",
        3,
        1
      ],
      [
        "rx_cnt_ka_en",
        4,
        1
      ],
      [
        "rx_crc_strip",
        5,
        1
      ],
      [
        "rx_ctrl_pkts64b60b",
        6,
        1
      ],
      [
        "rx_ctrl_pkts_term",
        7,
        1
      ],
      [
        "rx_ctrl_pkts_term_by_address",
        8,
        1
      ],
      [
        "rx_fc_mode",
        9,
        2
      ],
      [
        "rx_link_interruption_en",
        11,
        1
      ]
    ]
  },
  "mac_pool8_rx_mac_cfg1": {
    "type": "register",
    "block": "mac_pool8",
    "width": 28,
    "desc": "MAC RX configurations.",
    "fields": [
      [
        "rx_max_pkt_size",
        0,
        14
      ],
      [
        "rx_min_pkt_size",
        14,
        14
      ]
    ]
  },
  "mac_pool8_tx_mac_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 12,
    "desc": "MAC TX configurations.",
    "fields": [
      [
        "tx_crc_en",
        0,
        1
      ],
      [
        "tx_crc_oob_en",
        1,
        1
      ],
      [
        "tx_cnt_ka_en",
        2,
        1
      ],
      [
        "tx_fc_mode",
        3,
        2
      ],
      [
        "tx_oob_react_to_fc",
        5,
        1
      ],
      [
        "tx_am_insert_amont",
        6,
        6
      ]
    ]
  },
  "mac_pool8_tx_mac_link_fault_override_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 24,
    "desc": "MAC TX configurations.",
    "fields": [
      [
        "tx_mac_link_fault_override_en",
        0,
        8
      ],
      [
        "tx_mac_link_fault_override_local",
        8,
        8
      ],
      [
        "tx_mac_link_fault_override_remote",
        16,
        8
      ]
    ]
  },
  "mac_pool8_tx_device_time_offset_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "TX device time offset configuration register",
    "fields": [
      [
        "tx_device_time_offset",
        0,
        32
      ]
    ]
  },
  "mac_pool8_tx_oobi_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 33,
    "desc": "OOB inject TX configurations.",
    "fields": [
      [
        "tx_shaper_min_idle_flits_gap",
        0,
        5
      ],
      [
        "tx_oob_intrlv_head_room_flits",
        5,
        5
      ],
      [
        "oob_shaper_period",
        10,
        20
      ],
      [
        "oob_shaper_max_burst_size",
        30,
        3
      ]
    ]
  },
  "mac_pool8_tx_mac_ctrl_sa": {
    "type": "register",
    "block": "mac_pool8",
    "width": 48,
    "desc": "MAC TX control cells source address register.",
    "fields": [
      [
        "tx_mac_sa",
        0,
        48
      ]
    ]
  },
  "mac_pool8_tx_mac_cfg_ipg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 22,
    "desc": "MAC TX IPG configurations.",
    "fields": [
      [
        "tx_ipg_period",
        0,
        11
      ],
      [
        "tx_ipg_burst",
        11,
        11
      ]
    ]
  },
  "mac_pool8_tx_mac_fc_per_xoff_timer": {
    "type": "register",
    "block": "mac_pool8",
    "width": 24,
    "desc": "MAC flow control xoff periodic timer configuration - per port",
    "fields": [
      [
        "tx_fc_per_xoff_timer",
        0,
        16
      ],
      [
        "tx_fc_per_xoff_en",
        16,
        8
      ]
    ]
  },
  "mac_pool8_tx_mac_fc_xoff_timer": {
    "type": "register",
    "block": "mac_pool8",
    "width": 24,
    "desc": "MAC flow control xoff timer configuration - per port",
    "fields": [
      [
        "tx_fc_xoff_timer",
        0,
        16
      ],
      [
        "tx_fc_xoff_en",
        16,
        8
      ]
    ]
  },
  "mac_pool8_tx_mac_fc_per_xon_timer": {
    "type": "register",
    "block": "mac_pool8",
    "width": 24,
    "desc": "MAC flow control xon periodic timer configuration - per port",
    "fields": [
      [
        "tx_fc_per_xon_timer",
        0,
        16
      ],
      [
        "tx_fc_per_xon_en",
        16,
        8
      ]
    ]
  },
  "mac_pool8_tx_mac_fc_xon_timer": {
    "type": "register",
    "block": "mac_pool8",
    "width": 24,
    "desc": "MAC flow control xon timer configuration - per port",
    "fields": [
      [
        "tx_fc_xon_timer",
        0,
        16
      ],
      [
        "tx_fc_xon_en",
        16,
        8
      ]
    ]
  },
  "mac_pool8_rsf_400g_prbs7_scr_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 2,
    "desc": "RS-FEC PRBS7 scrambling configuration",
    "fields": [
      [
        "rx_en_400g_prbs7_scr",
        0,
        1
      ],
      [
        "tx_en_400g_prbs7_scr",
        1,
        1
      ]
    ]
  },
  "mac_pool8_rx_rsf_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 21,
    "desc": "RS-FEC RS configurations.",
    "fields": [
      [
        "rx_rsf_kp4",
        0,
        1
      ],
      [
        "rx_bypass_cor",
        1,
        1
      ],
      [
        "rx_bypass_ind",
        2,
        1
      ],
      [
        "rx_port_bypass_cor",
        3,
        2
      ],
      [
        "rx_port_bypass_ind",
        5,
        2
      ],
      [
        "rx_rsf_port_kp4",
        7,
        2
      ],
      [
        "rx_high_ser_fsm_en_port0",
        9,
        1
      ],
      [
        "rx_high_ser_fsm_en_port1",
        10,
        1
      ],
      [
        "rx_high_ser_fsm_en_act_port0",
        11,
        1
      ],
      [
        "rx_high_ser_fsm_en_act_port1",
        12,
        1
      ],
      [
        "rx_high_ser_fsm_en_gen_link_fault_port0",
        13,
        1
      ],
      [
        "rx_high_ser_fsm_en_gen_link_fault_port1",
        14,
        1
      ],
      [
        "rx_rsf_single_lane_shaper_cfg",
        15,
        6
      ]
    ]
  },
  "mac_pool8_rx_rsf_out_buff_shaper_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 73,
    "desc": "RS-FEC output buffer shaper configuration register",
    "fields": [
      [
        "rx_out_buff_shaper_en",
        0,
        1
      ],
      [
        "rx_out_buff_max_cnt",
        1,
        8
      ],
      [
        "rx_out_buff_shaper_bmp",
        9,
        64
      ]
    ]
  },
  "mac_pool8_rx_high_ser_fsm_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 72,
    "desc": "PCS High SER FSM configurations register.",
    "fields": [
      [
        "rx_high_ser_k_port0",
        0,
        14
      ],
      [
        "rx_high_ser_k_port1",
        14,
        14
      ],
      [
        "rx_high_ser_time_ms_port0",
        28,
        8
      ],
      [
        "rx_high_ser_time_ms_port1",
        36,
        8
      ],
      [
        "rx_high_ser_words_wind0",
        44,
        14
      ],
      [
        "rx_high_ser_words_wind1",
        58,
        14
      ]
    ]
  },
  "mac_pool8_rsf_degraded_ser_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 16,
    "desc": "RS-FEC degraded SER configuration register.",
    "fields": [
      [
        "rx_rsf_degraded_ser_en_port0",
        0,
        1
      ],
      [
        "rx_rsf_degraded_ser_en_port1",
        1,
        1
      ],
      [
        "tx_rsf_degraded_ser_en_port0",
        2,
        1
      ],
      [
        "tx_rsf_degraded_ser_en_port1",
        3,
        1
      ],
      [
        "rx_rsf_rm_degraded_ser_en_port0",
        4,
        1
      ],
      [
        "rx_rsf_rm_degraded_ser_en_port1",
        5,
        1
      ],
      [
        "rx_rsf_rm_degraded_ser_word_idx_port0",
        6,
        5
      ],
      [
        "rx_rsf_rm_degraded_ser_word_idx_port1",
        11,
        5
      ]
    ]
  },
  "mac_pool8_rsf_degraded_ser_cfg1": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RS-FEC degraded SER configuration register.",
    "fields": [
      [
        "rx_rsf_degraded_ser_activate_thd_port0",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rsf_degraded_ser_cfg2": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RS-FEC degraded SER configuration register.",
    "fields": [
      [
        "rx_rsf_degraded_ser_activate_thd_port1",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rsf_degraded_ser_cfg3": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RS-FEC degraded SER configuration register.",
    "fields": [
      [
        "rx_rsf_degraded_ser_deactivate_thd_port0",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rsf_degraded_ser_cfg4": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RS-FEC degraded SER configuration register.",
    "fields": [
      [
        "rx_rsf_degraded_ser_deactivate_thd_port1",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rsf_degraded_ser_cfg5": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RS-FEC degraded SER configuration register.",
    "fields": [
      [
        "rx_rsf_degraded_ser_interval_port0",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rsf_degraded_ser_cfg6": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RS-FEC degraded SER configuration register.",
    "fields": [
      [
        "rx_rsf_degraded_ser_interval_port1",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rsf_ck_cycles_per_1ms_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 24,
    "desc": "RS-FEC degraded SER configuration register.",
    "fields": [
      [
        "rsf_ck_cycles_per_1ms",
        0,
        24
      ]
    ]
  },
  "mac_pool8_rx_ber_fsm_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "PCS High BER FSM configurations register.",
    "fields": [
      [
        "rx_ber_timer_period",
        0,
        24
      ],
      [
        "rx_max_ber_cnt_cfg",
        24,
        8
      ]
    ]
  },
  "mac_pool8_tx_pma_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 64,
    "desc": "General TX configurations. This register holds the main TX configurations per MAC lane.",
    "fields": [
      [
        "tx_async_fif_alm_full_thd0",
        0,
        4
      ],
      [
        "tx_async_fif_alm_full_thd1",
        4,
        4
      ],
      [
        "tx_async_fif_alm_full_thd2",
        8,
        4
      ],
      [
        "tx_async_fif_alm_full_thd3",
        12,
        4
      ],
      [
        "tx_async_fif_alm_full_thd4",
        16,
        4
      ],
      [
        "tx_async_fif_alm_full_thd5",
        20,
        4
      ],
      [
        "tx_async_fif_alm_full_thd6",
        24,
        4
      ],
      [
        "tx_async_fif_alm_full_thd7",
        28,
        4
      ],
      [
        "tx_pam4_mode0",
        32,
        1
      ],
      [
        "tx_pam4_mode1",
        33,
        1
      ],
      [
        "tx_pam4_mode2",
        34,
        1
      ],
      [
        "tx_pam4_mode3",
        35,
        1
      ],
      [
        "tx_pam4_mode4",
        36,
        1
      ],
      [
        "tx_pam4_mode5",
        37,
        1
      ],
      [
        "tx_pam4_mode6",
        38,
        1
      ],
      [
        "tx_pam4_mode7",
        39,
        1
      ],
      [
        "tx_precode_en0",
        40,
        1
      ],
      [
        "tx_precode_en1",
        41,
        1
      ],
      [
        "tx_precode_en2",
        42,
        1
      ],
      [
        "tx_precode_en3",
        43,
        1
      ],
      [
        "tx_precode_en4",
        44,
        1
      ],
      [
        "tx_precode_en5",
        45,
        1
      ],
      [
        "tx_precode_en6",
        46,
        1
      ],
      [
        "tx_precode_en7",
        47,
        1
      ],
      [
        "tx_graycode_en0",
        48,
        1
      ],
      [
        "tx_graycode_en1",
        49,
        1
      ],
      [
        "tx_graycode_en2",
        50,
        1
      ],
      [
        "tx_graycode_en3",
        51,
        1
      ],
      [
        "tx_graycode_en4",
        52,
        1
      ],
      [
        "tx_graycode_en5",
        53,
        1
      ],
      [
        "tx_graycode_en6",
        54,
        1
      ],
      [
        "tx_graycode_en7",
        55,
        1
      ],
      [
        "tx_srd_dwidth0",
        56,
        1
      ],
      [
        "tx_srd_dwidth1",
        57,
        1
      ],
      [
        "tx_srd_dwidth2",
        58,
        1
      ],
      [
        "tx_srd_dwidth3",
        59,
        1
      ],
      [
        "tx_srd_dwidth4",
        60,
        1
      ],
      [
        "tx_srd_dwidth5",
        61,
        1
      ],
      [
        "tx_srd_dwidth6",
        62,
        1
      ],
      [
        "tx_srd_dwidth7",
        63,
        1
      ]
    ]
  },
  "mac_pool8_rx_pma_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 64,
    "desc": "General RX configurations. This register holds the main RX configurations per MAC lane.",
    "fields": [
      [
        "rx_srd0_source",
        0,
        2
      ],
      [
        "rx_srd1_source",
        2,
        2
      ],
      [
        "rx_srd2_source",
        4,
        2
      ],
      [
        "rx_srd3_source",
        6,
        2
      ],
      [
        "rx_srd4_source",
        8,
        2
      ],
      [
        "rx_srd5_source",
        10,
        2
      ],
      [
        "rx_srd6_source",
        12,
        2
      ],
      [
        "rx_srd7_source",
        14,
        2
      ],
      [
        "rx_pam4_mode0",
        16,
        1
      ],
      [
        "rx_pam4_mode1",
        17,
        1
      ],
      [
        "rx_pam4_mode2",
        18,
        1
      ],
      [
        "rx_pam4_mode3",
        19,
        1
      ],
      [
        "rx_pam4_mode4",
        20,
        1
      ],
      [
        "rx_pam4_mode5",
        21,
        1
      ],
      [
        "rx_pam4_mode6",
        22,
        1
      ],
      [
        "rx_pam4_mode7",
        23,
        1
      ],
      [
        "rx_decode_en0",
        24,
        1
      ],
      [
        "rx_decode_en1",
        25,
        1
      ],
      [
        "rx_decode_en2",
        26,
        1
      ],
      [
        "rx_decode_en3",
        27,
        1
      ],
      [
        "rx_decode_en4",
        28,
        1
      ],
      [
        "rx_decode_en5",
        29,
        1
      ],
      [
        "rx_decode_en6",
        30,
        1
      ],
      [
        "rx_decode_en7",
        31,
        1
      ],
      [
        "rx_graycode_en0",
        32,
        1
      ],
      [
        "rx_graycode_en1",
        33,
        1
      ],
      [
        "rx_graycode_en2",
        34,
        1
      ],
      [
        "rx_graycode_en3",
        35,
        1
      ],
      [
        "rx_graycode_en4",
        36,
        1
      ],
      [
        "rx_graycode_en5",
        37,
        1
      ],
      [
        "rx_graycode_en6",
        38,
        1
      ],
      [
        "rx_graycode_en7",
        39,
        1
      ],
      [
        "rx_srd_dwidth0",
        40,
        1
      ],
      [
        "rx_srd_dwidth1",
        41,
        1
      ],
      [
        "rx_srd_dwidth2",
        42,
        1
      ],
      [
        "rx_srd_dwidth3",
        43,
        1
      ],
      [
        "rx_srd_dwidth4",
        44,
        1
      ],
      [
        "rx_srd_dwidth5",
        45,
        1
      ],
      [
        "rx_srd_dwidth6",
        46,
        1
      ],
      [
        "rx_srd_dwidth7",
        47,
        1
      ],
      [
        "rx_sig_ok_ovrd_en0",
        48,
        1
      ],
      [
        "rx_sig_ok_ovrd_en1",
        49,
        1
      ],
      [
        "rx_sig_ok_ovrd_en2",
        50,
        1
      ],
      [
        "rx_sig_ok_ovrd_en3",
        51,
        1
      ],
      [
        "rx_sig_ok_ovrd_en4",
        52,
        1
      ],
      [
        "rx_sig_ok_ovrd_en5",
        53,
        1
      ],
      [
        "rx_sig_ok_ovrd_en6",
        54,
        1
      ],
      [
        "rx_sig_ok_ovrd_en7",
        55,
        1
      ],
      [
        "rx_sig_ok_ovrd_val0",
        56,
        1
      ],
      [
        "rx_sig_ok_ovrd_val1",
        57,
        1
      ],
      [
        "rx_sig_ok_ovrd_val2",
        58,
        1
      ],
      [
        "rx_sig_ok_ovrd_val3",
        59,
        1
      ],
      [
        "rx_sig_ok_ovrd_val4",
        60,
        1
      ],
      [
        "rx_sig_ok_ovrd_val5",
        61,
        1
      ],
      [
        "rx_sig_ok_ovrd_val6",
        62,
        1
      ],
      [
        "rx_sig_ok_ovrd_val7",
        63,
        1
      ]
    ]
  },
  "mac_pool8_rx_pma_max_burst_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 48,
    "desc": "Maximum RX burst size from PMA to upper sublayer.",
    "fields": [
      [
        "rx_max_burst0",
        0,
        6
      ],
      [
        "rx_max_burst1",
        6,
        6
      ],
      [
        "rx_max_burst2",
        12,
        6
      ],
      [
        "rx_max_burst3",
        18,
        6
      ],
      [
        "rx_max_burst4",
        24,
        6
      ],
      [
        "rx_max_burst5",
        30,
        6
      ],
      [
        "rx_max_burst6",
        36,
        6
      ],
      [
        "rx_max_burst7",
        42,
        6
      ]
    ]
  },
  "mac_pool8_tx_pma_test_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 4,
    "desc": "PMA TX test patterns configurations - per physical lane",
    "fields": [
      [
        "tx_pma_test_en",
        0,
        1
      ],
      [
        "tx_pma_test_mode",
        1,
        3
      ]
    ]
  },
  "mac_pool8_tx_pma_test_cfg1": {
    "type": "register",
    "block": "mac_pool8",
    "width": 60,
    "desc": "PMA TX test patterns configurations - per physical lane",
    "fields": [
      [
        "tx_pma_test_pattern",
        0,
        60
      ]
    ]
  },
  "mac_pool8_rx_pma_test_cfg0": {
    "type": "register",
    "block": "mac_pool8",
    "width": 4,
    "desc": "PMA RX test patterns configurations - per physical lane",
    "fields": [
      [
        "rx_pma_test_en",
        0,
        1
      ],
      [
        "rx_pma_test_mode",
        1,
        3
      ]
    ]
  },
  "mac_pool8_rx_pma_test_counter": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "PMA test mode errors counter",
    "fields": [
      [
        "rx_pma_test_errors_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_tx_pma_err_gen_ctrl": {
    "type": "register",
    "block": "mac_pool8",
    "width": 57,
    "desc": "Errors generation control register.",
    "fields": [
      [
        "tx_pma_err_gen_period",
        0,
        48
      ],
      [
        "tx_pma_err_gen_burst",
        48,
        8
      ],
      [
        "tx_pma_err_gen_en",
        56,
        1
      ]
    ]
  },
  "mac_pool8_tx_pma_err_gen_rand_ctrl": {
    "type": "register",
    "block": "mac_pool8",
    "width": 57,
    "desc": "Errors generation register for randomness control.",
    "fields": [
      [
        "tx_pma_err_gen_period_mask",
        0,
        48
      ],
      [
        "tx_pma_err_gen_burst_mask",
        48,
        8
      ],
      [
        "tx_pma_err_gen_fixed_err_pattern",
        56,
        1
      ]
    ]
  },
  "mac_pool8_tx_pma_err_gen_pattern": {
    "type": "register",
    "block": "mac_pool8",
    "width": 60,
    "desc": "Errors generation pattern register.",
    "fields": [
      [
        "tx_pma_err_pattern",
        0,
        60
      ]
    ]
  },
  "mac_pool8_port_mib_counter": {
    "type": "register",
    "block": "mac_pool8",
    "width": 1216,
    "desc": "Counter per port",
    "fields": [
      [
        "tx_mac_frames_ok_cnt",
        0,
        64
      ],
      [
        "tx_mac_bytes_ok_cnt",
        64,
        64
      ],
      [
        "tx_mac_64byte_pkt_cnt",
        128,
        32
      ],
      [
        "tx_mac_65byte_127byte_pkt_cnt",
        160,
        32
      ],
      [
        "tx_mac_128byte_255byte_pkt_cnt",
        192,
        32
      ],
      [
        "tx_mac_256byte_511byte_pkt_cnt",
        224,
        32
      ],
      [
        "tx_mac_512byte_1023byte_pkt_cnt",
        256,
        32
      ],
      [
        "tx_mac_1024byte_1518byte_pkt_cnt",
        288,
        32
      ],
      [
        "tx_mac_1519byte_2500byte_pkt_cnt",
        320,
        32
      ],
      [
        "tx_mac_2501byte_9000byte_pkt_cnt",
        352,
        32
      ],
      [
        "tx_mac_crc_err_cnt",
        384,
        32
      ],
      [
        "tx_mac_missing_eop_err_cnt",
        416,
        32
      ],
      [
        "tx_mac_underrun_err_cnt",
        448,
        32
      ],
      [
        "tx_mac_fc_frames_ok_cnt",
        480,
        32
      ],
      [
        "tx_oob_mac_frames_ok_cnt",
        512,
        32
      ],
      [
        "rx_mac_frames_ok_cnt",
        544,
        64
      ],
      [
        "rx_mac_bytes_ok_cnt",
        608,
        64
      ],
      [
        "rx_mac_64byte_pkt_cnt",
        672,
        32
      ],
      [
        "rx_mac_65byte_127byte_pkt_cnt",
        704,
        32
      ],
      [
        "rx_mac_128byte_255byte_pkt_cnt",
        736,
        32
      ],
      [
        "rx_mac_256byte_511byte_pkt_cnt",
        768,
        32
      ],
      [
        "rx_mac_512byte_1023byte_pkt_cnt",
        800,
        32
      ],
      [
        "rx_mac_1024byte_1518byte_pkt_cnt",
        832,
        32
      ],
      [
        "rx_mac_1519byte_2500byte_pkt_cnt",
        864,
        32
      ],
      [
        "rx_mac_2501byte_9000byte_pkt_cnt",
        896,
        32
      ],
      [
        "rx_mac_invert_crc_cnt",
        928,
        32
      ],
      [
        "rx_mac_crc_err_cnt",
        960,
        32
      ],
      [
        "rx_mac_oversize_err_cnt",
        992,
        32
      ],
      [
        "rx_mac_undersize_err_cnt",
        1024,
        32
      ],
      [
        "rx_mac_code_err_cnt",
        1056,
        32
      ],
      [
        "rx_mac_fc_frames_ok_cnt",
        1088,
        32
      ],
      [
        "rx_mac_fc_frames_err_cnt",
        1120,
        32
      ],
      [
        "rx_oob_mac_frames_ok_cnt",
        1152,
        32
      ],
      [
        "rx_oob_mac_code_err_cnt",
        1184,
        32
      ]
    ]
  },
  "mac_pool8_tx_ts_cmd_record_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Mac TX time stamp command record counter.",
    "fields": [
      [
        "tx_ts_cmd_record_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_tx_ts_cmd_cf_update_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Mac TX time stamp command CF update counter.",
    "fields": [
      [
        "tx_ts_cmd_cf_update_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_tx_ts_cmd_tod_update_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Mac TX time stamp command TOD update counter.",
    "fields": [
      [
        "tx_ts_cmd_tod_update_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_tx_drained_pkt_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Mac TX drained packets counter register.",
    "fields": [
      [
        "tx_drained_pkt_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_errored_blocks_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "PCS RX errored blocks counter.",
    "fields": [
      [
        "rx_errored_blocks_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_oob_mac_type_err_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RX OOB mac type errors counter register",
    "fields": [
      [
        "rx_oob_mac_type_err_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_mac_filt_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RX mac filter counter register.",
    "fields": [
      [
        "rx_mac_filt_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_tx_activity_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 16,
    "desc": "Event register for TX & RX traffic",
    "fields": [
      [
        "rx_pkt_received_port0",
        0,
        1
      ],
      [
        "rx_pkt_received_port1",
        1,
        1
      ],
      [
        "rx_pkt_received_port2",
        2,
        1
      ],
      [
        "rx_pkt_received_port3",
        3,
        1
      ],
      [
        "rx_pkt_received_port4",
        4,
        1
      ],
      [
        "rx_pkt_received_port5",
        5,
        1
      ],
      [
        "rx_pkt_received_port6",
        6,
        1
      ],
      [
        "rx_pkt_received_port7",
        7,
        1
      ],
      [
        "tx_pkt_transmitted_port0",
        8,
        1
      ],
      [
        "tx_pkt_transmitted_port1",
        9,
        1
      ],
      [
        "tx_pkt_transmitted_port2",
        10,
        1
      ],
      [
        "tx_pkt_transmitted_port3",
        11,
        1
      ],
      [
        "tx_pkt_transmitted_port4",
        12,
        1
      ],
      [
        "tx_pkt_transmitted_port5",
        13,
        1
      ],
      [
        "tx_pkt_transmitted_port6",
        14,
        1
      ],
      [
        "tx_pkt_transmitted_port7",
        15,
        1
      ]
    ]
  },
  "mac_pool8_rx_ber_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "PCS RX BER counter.",
    "fields": [
      [
        "rx_ber_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_tx_pma_wr_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Async fifo write count",
    "fields": [
      [
        "tx_async_fif_wr",
        0,
        32
      ]
    ]
  },
  "mac_pool8_tx_pma_wr_wmk_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 5,
    "desc": "Tx Async fifo watermark",
    "fields": [
      [
        "tx_async_fif_stat",
        0,
        5
      ]
    ]
  },
  "mac_pool8_tx_pma_wr_wmk_srd_side_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 5,
    "desc": "Tx Async fifo watermark on serdes side",
    "fields": [
      [
        "pma_tx_wr_wmk_srd_side",
        0,
        5
      ]
    ]
  },
  "mac_pool8_pma_loopback_fifo_wmk_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 2,
    "desc": "Loopback fifo watermark",
    "fields": [
      [
        "lb_fif_wmk",
        0,
        2
      ]
    ]
  },
  "mac_pool8_rx_pma_rd_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Async fifo read count",
    "fields": [
      [
        "rx_async_fif_rd",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_pma_rd_wmk_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 4,
    "desc": "Rx Async fifo watermark",
    "fields": [
      [
        "rx_async_fif_stat",
        0,
        4
      ]
    ]
  },
  "mac_pool8_rx_pma_rd_wmk_srd_side_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 4,
    "desc": "Rx Async fifo watermark on serdes side",
    "fields": [
      [
        "pma_rx_rd_wmk_srd_side",
        0,
        4
      ]
    ]
  },
  "mac_pool8_rx_status_register": {
    "type": "register",
    "block": "mac_pool8",
    "width": 27,
    "desc": "RX Status register - per mac lane",
    "fields": [
      [
        "rx_66b_w_lock_block_lock",
        0,
        10
      ],
      [
        "rx_am_lock",
        10,
        10
      ],
      [
        "rx_link_status",
        20,
        1
      ],
      [
        "rx_link_fault_fsm_status",
        21,
        2
      ],
      [
        "rx_pcs_status",
        23,
        1
      ],
      [
        "rx_high_ber",
        24,
        1
      ],
      [
        "rx_degraded_ser_status",
        25,
        1
      ],
      [
        "rx_rm_degraded_ser_status",
        26,
        1
      ]
    ]
  },
  "mac_pool8_rx_status_lane_mapping": {
    "type": "register",
    "block": "mac_pool8",
    "width": 50,
    "desc": "PCS lanes mapping to deskew fifos - per mac lane",
    "fields": [
      [
        "rx_lane_mapping0",
        0,
        5
      ],
      [
        "rx_lane_mapping1",
        5,
        5
      ],
      [
        "rx_lane_mapping2",
        10,
        5
      ],
      [
        "rx_lane_mapping3",
        15,
        5
      ],
      [
        "rx_lane_mapping4",
        20,
        5
      ],
      [
        "rx_lane_mapping5",
        25,
        5
      ],
      [
        "rx_lane_mapping6",
        30,
        5
      ],
      [
        "rx_lane_mapping7",
        35,
        5
      ],
      [
        "rx_lane_mapping8",
        40,
        5
      ],
      [
        "rx_lane_mapping9",
        45,
        5
      ]
    ]
  },
  "mac_pool8_deskew_fif_status_ctxt_sel_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 4,
    "desc": "Deskew fifo context status selector.",
    "fields": [
      [
        "deskew_fif_status_ctxt_sel",
        0,
        4
      ]
    ]
  },
  "mac_pool8_deskew_fif_status_wmk_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 18,
    "desc": "Deskew fifo watermark register.",
    "fields": [
      [
        "deskew_fif_status_max_wmk",
        0,
        9
      ],
      [
        "deskew_fif_status_min_wmk",
        9,
        9
      ]
    ]
  },
  "mac_pool8_rx_bip_err_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "BIP errors count",
    "fields": [
      [
        "rx_bip_err_cnt",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_cor_cw_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RS-FEC Correctable codeword count",
    "fields": [
      [
        "rx_cor_cw",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_uncor_cw_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "RS-FEC Uncorrectable codeword count",
    "fields": [
      [
        "rx_uncor_cw",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_symb_err_lane0_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "FEC lane 0 errored symbol count",
    "fields": [
      [
        "rx_symb_err_lane0",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_symb_err_lane1_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "FEC lane 1 errored symbol count",
    "fields": [
      [
        "rx_symb_err_lane1",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_symb_err_lane2_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "FEC lane 2 errored symbol count",
    "fields": [
      [
        "rx_symb_err_lane2",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_symb_err_lane3_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "FEC lane 3 errored symbol count",
    "fields": [
      [
        "rx_symb_err_lane3",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_rsf_dbg_cntrs_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 444,
    "desc": "RS-FEC debug counters - Counts statistic related to port selected in: RxRsfDbgCfg",
    "fields": [
      [
        "rx_cw_00_sym_cnt",
        0,
        36
      ],
      [
        "rx_cw_01_sym_cnt",
        36,
        32
      ],
      [
        "rx_cw_02_sym_cnt",
        68,
        32
      ],
      [
        "rx_cw_03_sym_cnt",
        100,
        32
      ],
      [
        "rx_cw_04_sym_cnt",
        132,
        32
      ],
      [
        "rx_cw_05_sym_cnt",
        164,
        16
      ],
      [
        "rx_cw_06_sym_cnt",
        180,
        16
      ],
      [
        "rx_cw_07_sym_cnt",
        196,
        16
      ],
      [
        "rx_cw_08_sym_cnt",
        212,
        16
      ],
      [
        "rx_cw_09_sym_cnt",
        228,
        16
      ],
      [
        "rx_cw_10_sym_cnt",
        244,
        16
      ],
      [
        "rx_cw_11_sym_cnt",
        260,
        16
      ],
      [
        "rx_cw_12_sym_cnt",
        276,
        16
      ],
      [
        "rx_cw_13_sym_cnt",
        292,
        16
      ],
      [
        "rx_cw_14_sym_cnt",
        308,
        16
      ],
      [
        "rx_cw_15_sym_cnt",
        324,
        16
      ],
      [
        "rx_cw_uncor_cnt",
        340,
        16
      ],
      [
        "rx_2_sym_burst_cnt",
        356,
        24
      ],
      [
        "rx_3_sym_burst_cnt",
        380,
        16
      ],
      [
        "rx_4_sym_burst_cnt",
        396,
        16
      ],
      [
        "rx_5_sym_burst_cnt",
        412,
        16
      ],
      [
        "rx_6_sym_burst_cnt",
        428,
        16
      ]
    ]
  },
  "mac_pool8_rx_krf_cfg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 10,
    "desc": "KRF RX configuration - per physical lane",
    "fields": [
      [
        "fec_en_err_to_pcs",
        0,
        1
      ],
      [
        "lock_par_good_thd",
        1,
        4
      ],
      [
        "lock_par_invalid_thd",
        5,
        5
      ]
    ]
  },
  "mac_pool8_rx_krf_status": {
    "type": "register",
    "block": "mac_pool8",
    "width": 1,
    "desc": "KRF lock status",
    "fields": [
      [
        "fec_block_lock",
        0,
        1
      ]
    ]
  },
  "mac_pool8_rx_krf_cor_blocks_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Correctable codeword count",
    "fields": [
      [
        "fec_cor_blocks",
        0,
        32
      ]
    ]
  },
  "mac_pool8_rx_krf_uncor_blocks_cnt_reg": {
    "type": "register",
    "block": "mac_pool8",
    "width": 32,
    "desc": "Uncorrectable codeword count",
    "fields": [
      [
        "fec_uncor_blocks",
        0,
        32
      ]
    ]
  },
  "mac_pool8_device_time_sampled": {
    "type": "register",
    "block": "mac_pool8",
    "width": 36,
    "desc": "Device Time Record fifo - per port  Keeps the device time value of packets transmitted with record command. Fifo holds 8 entries per port and does pop upon read.",
    "fields": [
      [
        "device_time_fif_status",
        0,
        4
      ],
      [
        "device_time",
        4,
        32
      ]
    ]
  },
  "mac_pool8_deskew_fif_a": {
    "type": "memory",
    "block": "mac_pool8",
    "width": 67,
    "desc": "deskew fifo mem",
    "fields": [
      [
        "deskew_fif_data_a",
        0,
        67
      ]
    ]
  },
  "mac_pool8_deskew_fif_b": {
    "type": "memory",
    "block": "mac_pool8",
    "width": 67,
    "desc": "deskew fifo mem",
    "fields": [
      [
        "deskew_fif_data_b",
        0,
        67
      ]
    ]
  },
  "mac_pool8_rsf_dec_ram0": {
    "type": "memory",
    "block": "mac_pool8",
    "width": 120,
    "desc": "RS-FEC decoder ram0",
    "fields": [
      [
        "rsf_dec_ram0_data",
        0,
        120
      ]
    ]
  },
  "mac_pool8_rsf_dec_ram1": {
    "type": "memory",
    "block": "mac_pool8",
    "width": 120,
    "desc": "RS-FEC decoder ram1",
    "fields": [
      [
        "rsf_dec_ram1_data",
        0,
        120
      ]
    ]
  },
  "mac_pool8_rsf_out_buff_mem0": {
    "type": "memory",
    "block": "mac_pool8",
    "width": 66,
    "desc": "RS-FEC output buffer memory.",
    "fields": [
      [
        "rsf_out_buff_mem_data",
        0,
        66
      ]
    ]
  },
  "mac_pool8_rsf_out_buff_mem1": {
    "type": "memory",
    "block": "mac_pool8",
    "width": 63,
    "desc": "RS-FEC output buffer memory.",
    "fields": [
      [
        "rsf_out_buff_mem_data",
        0,
        63
      ]
    ]
  },
  "hbm_chnl_4x_tall_interrupt_register": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_mem_protect_interrupt": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_mem_protect_interrupt_test": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "hbm_wr_channel_data_fifo_first_beat0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_first_beat1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat0_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat1_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo0_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo1_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo0_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo1_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "hbm_lpm_channel_mem0_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "hbm_lpm_channel_mem1_ecc_1b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "hbm_wr_channel_data_fifo_first_beat0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_first_beat1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat0_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat1_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo0_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo1_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo0_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo1_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "hbm_lpm_channel_mem0_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "hbm_lpm_channel_mem1_ecc_2b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "hbm_wr_channel_data_fifo_first_beat0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_first_beat1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat0_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat1_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo0_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo1_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo0_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo1_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "hbm_lpm_channel_mem0_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "hbm_lpm_channel_mem1_ecc_1b_err_initiate",
        15,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "hbm_wr_channel_data_fifo_first_beat0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_first_beat1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat0_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat1_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo0_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo1_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo0_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo1_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "hbm_lpm_channel_mem0_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "hbm_lpm_channel_mem1_ecc_2b_err_initiate",
        15,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_mem_protect_err_status": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "hbm_wr_channel_data_fifo_first_beat0_err_int",
        0,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_first_beat1_err_int",
        1,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat0_err_int",
        2,
        1
      ],
      [
        "hbm_wr_channel_data_fifo_second_beat1_err_int",
        3,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo0_err_int",
        4,
        1
      ],
      [
        "hbm_wr_channel_cmd_fifo1_err_int",
        5,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat0_err_int",
        6,
        1
      ],
      [
        "hbm_rd_channel_data_mem_first_beat1_err_int",
        7,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat0_err_int",
        8,
        1
      ],
      [
        "hbm_rd_channel_data_mem_second_beat1_err_int",
        9,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo0_err_int",
        10,
        1
      ],
      [
        "hbm_rd_channel_cmd_fifo1_err_int",
        11,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo0_err_int",
        12,
        1
      ],
      [
        "hbm_rd_reorder_bank_fifo1_err_int",
        13,
        1
      ],
      [
        "hbm_lpm_channel_mem0_err_int",
        14,
        1
      ],
      [
        "hbm_lpm_channel_mem1_err_int",
        15,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_selected_ser_error_info": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 11,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        9
      ],
      [
        "mem_err_type",
        9,
        2
      ]
    ]
  },
  "hbm_chnl_4x_tall_ser_error_debug_configuration": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_ecc_1b_err_debug": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "hbm_chnl_4x_tall_ecc_2b_err_debug": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "hbm_chnl_4x_tall_counter_timer": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "hbm_chnl_4x_tall_counter_timer_trigger_reg": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_memory_access_timeout": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "hbm_chnl_4x_tall_broadcast_config_reg": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "hbm_chnl_4x_tall_memory_prot_bypass": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_soft_reset_configuration": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_mbist_configuration": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "hbm_chnl_4x_tall_power_down_configuration": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_spare_reg": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "hbm_chnl_4x_tall_pmro_ctrl": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "hbm_chnl_4x_tall_pmro_status": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_mirror_bus_conf_reg": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "hbm_chnl_4x_tall_mirror_bus_status": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "hbm_chnl_4x_tall_device_time_offset_cfg": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_training_done": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 1,
    "desc": "Indicates that HBM training done, ready for mission mode",
    "fields": [
      [
        "training_done",
        0,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_die_type": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 4,
    "desc": "Type of HBM Die",
    "fields": [
      [
        "num_hbms",
        0,
        1
      ],
      [
        "hbm_upper_or_lower",
        1,
        1
      ],
      [
        "large_burst_mode",
        2,
        1
      ],
      [
        "use_rd_path_error_monitor",
        3,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_rd_to_wr_arbitration_config": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 64,
    "desc": "Various fields used in HBMRdToWrArbitrationCriteria",
    "fields": [
      [
        "min_stay_rd_requests",
        0,
        9
      ],
      [
        "min_stay_rd_valid_banks",
        9,
        5
      ],
      [
        "min_move_to_wr_valid_banks",
        14,
        5
      ],
      [
        "min_move_to_wr_requests",
        19,
        8
      ],
      [
        "rd_total_cycles_threshold0",
        27,
        12
      ],
      [
        "rd_total_cycles_threshold1",
        39,
        12
      ],
      [
        "rd_total_cycles_threshold2",
        51,
        12
      ],
      [
        "move_to_wr_on_empty",
        63,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_wr_to_rd_arbitration_config": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 81,
    "desc": "Various fields used in HBMWrToRdArbitrationCriteria",
    "fields": [
      [
        "min_stay_wr_requests",
        0,
        8
      ],
      [
        "min_stay_wr_valid_banks",
        8,
        5
      ],
      [
        "min_move_to_rd_valid_banks",
        13,
        5
      ],
      [
        "min_move_to_rd_requests",
        18,
        9
      ],
      [
        "wr_total_cycles_threshold0",
        27,
        12
      ],
      [
        "wr_total_cycles_threshold1",
        39,
        12
      ],
      [
        "wr_total_cycles_threshold2",
        51,
        12
      ],
      [
        "min_lpm_req_pending_cycles",
        63,
        9
      ],
      [
        "move_to_rd_on_empty",
        72,
        1
      ],
      [
        "min_arb_cycles",
        73,
        8
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_rd_to_wr_arbitration_criteria": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 256,
    "desc": "Configuration for LUT that controls switching from read to write. The 8 criteria in HBMRdToWrArbitrationConfig register are translated to 256b vector, where a 1 means move to write on that combination LUT bit 0: Total number of rd requests (SMS only) <= MinStayRdRequests LUT bit 1: Total number of non-empty rd banks (LPM or SMS data) <=  MinStayRdValidBanks LUT bit 2: Total number of non-empty rd banks (LPM or SMS data) > MinMoveToWrValidBanks LUT bit 3: Total number of rd requests (SMS only) < Total number of write requests LUT bit 4: Total number of write requests > MinMoveToWrRequests LUT bit 5: Total number of non-empty rd banks (LPM or SMS data) <  total number of non-empty wr banks LUT bit 7:6: Total number of cycles elapsed since last switch > RdTotalCyclesThreshold0,1,2",
    "fields": [
      [
        "rd_to_wr_lut",
        0,
        256
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_wr_to_rd_arbitration_criteria": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 512,
    "desc": "Configuration for LUT that controls switching from write to read The 9 criteria in HBMWrToWrArbitrationCriteria register are translated to 256b vector, where a 1 means move to write on that combination LUT bit 0: Total number of wr requests <= MinStayWrRequests LUT bit 1: Total number of non-empty wr banks <=  MinStayWrValidBanks LUT bit 2: Total number of non-empty wr banks > MinMoveToRdValidBanks LUT bit 3: Total number of wr requests < Total number of read requests  (SMS only) LUT bit 4: Total number of read requests  (SMS only) > MinMoveToRdRequests LUT bit 5: Total number of non-empty wr banks  <  total number of non-empty rd banks  (LPM or SMS data) LUT bit 7:6: Total number of cycles elapsed since last switch > RdTotalCyclesThreshold0,1,2 LUT bit 8 : Number of cycles that LPM read request is pending >= MinLpmReqPendingCycles",
    "fields": [
      [
        "wr_to_rd_lut",
        0,
        512
      ]
    ]
  },
  "hbm_chnl_4x_tall_mmu_lpm_read_arbitration": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 2,
    "desc": "Configuration for arbitration between LPM and MMU read requests",
    "fields": [
      [
        "lpm_strict_priority",
        0,
        1
      ],
      [
        "lpm_high_priority",
        1,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_mmu_bank_arbitration": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 9,
    "desc": "Configuration for arbitration between banks in HBM channels",
    "fields": [
      [
        "rd_fifo_priority_threshold",
        0,
        5
      ],
      [
        "wr_fifo_priority_threshold",
        5,
        4
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_timing_params": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 90,
    "desc": "Timing parameters from HBM standard. NOTE: All times are in terms of DRAM clock (nomimal 1 GHZ)! Defaults are according to Samsung spec, 1GHz DFI clock. Cycles must be rounded upwards if division by clock cycle is not integer",
    "fields": [
      [
        "hbm_trcdrd",
        0,
        6
      ],
      [
        "hbm_trcdwr",
        6,
        6
      ],
      [
        "hbm_trrdl",
        12,
        4
      ],
      [
        "hbm_trrds",
        16,
        4
      ],
      [
        "hbm_trp",
        20,
        5
      ],
      [
        "hbm_tccdl",
        25,
        4
      ],
      [
        "hbm_tccds",
        29,
        4
      ],
      [
        "hbm_twtrl",
        33,
        5
      ],
      [
        "hbm_twtrs",
        38,
        5
      ],
      [
        "hbm_trtw",
        43,
        6
      ],
      [
        "hbm_tras",
        49,
        6
      ],
      [
        "hbm_wl",
        55,
        4
      ],
      [
        "hbm_trrefd",
        59,
        4
      ],
      [
        "hbm_trfcsb",
        63,
        8
      ],
      [
        "hbm_trfc",
        71,
        9
      ],
      [
        "hbm_do_single_bank_refresh",
        80,
        1
      ],
      [
        "hbm_refresh_priority_time",
        81,
        9
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_more_timing_parameters": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 31,
    "desc": "Timing parameters from HBM standard. NOTE: All times are in terms of DRAM clock (nomimal 1 GHZ)! Defaults are according to Samsung spec, 1GHz DFI clock. Cycles must be rounded upwards if division by clock cycle is not integer",
    "fields": [
      [
        "hbm_tfaw",
        0,
        5
      ],
      [
        "hbm_tfaw_use_interleaved_pcs",
        5,
        1
      ],
      [
        "hbm_trefi",
        6,
        16
      ],
      [
        "hbm_twr",
        22,
        5
      ],
      [
        "hbm_trtp",
        27,
        4
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_power_down": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 9,
    "desc": "Configuration and timing parameters related to power down of HBM",
    "fields": [
      [
        "enable_power_down",
        0,
        1
      ],
      [
        "hbm_tpd",
        1,
        4
      ],
      [
        "hbm_txp",
        5,
        4
      ]
    ]
  },
  "hbm_chnl_4x_tall_channel_fifo_sizes": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 17,
    "desc": "Sizes of command FIFOs in read/write channels",
    "fields": [
      [
        "write_fifo_size",
        0,
        5
      ],
      [
        "read_fifo_size",
        5,
        6
      ],
      [
        "lpm_result_alm_full",
        11,
        6
      ]
    ]
  },
  "hbm_chnl_4x_tall_debug_counters": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 187,
    "desc": "Various performance counters",
    "fields": [
      [
        "wr_path_flow_control_cycles",
        0,
        32
      ],
      [
        "rd_path_flow_control_cycles",
        32,
        32
      ],
      [
        "rd_response_flow_control_cycles",
        64,
        32
      ],
      [
        "lpm_buffers_full_cycles",
        96,
        8
      ],
      [
        "power_down_cycles",
        104,
        32
      ],
      [
        "read_before_write_cycles",
        136,
        32
      ],
      [
        "total_wr_bank_fifo_fill_watermark",
        168,
        9
      ],
      [
        "total_rd_bank_fifo_fill_watermark",
        177,
        10
      ]
    ]
  },
  "hbm_chnl_4x_tall_rd_wr_arbitration_debug_control": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 33,
    "desc": "Debug registers for read-write arbitration tuning",
    "fields": [
      [
        "rd_wr_arbitration_cycles",
        0,
        32
      ],
      [
        "rd_wr_arbitration_go",
        32,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_rd_wr_arbitration_debug_status": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 64,
    "desc": "Debug registers for read-write arbitration tuning",
    "fields": [
      [
        "write_idle_cycles",
        0,
        32
      ],
      [
        "read_idle_cycles",
        32,
        32
      ]
    ]
  },
  "hbm_chnl_4x_tall_traffic_gen_trans_ctrl": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 71,
    "desc": "Transaction control for HBM Traffic Generator",
    "fields": [
      [
        "use_traffic_gen",
        0,
        1
      ],
      [
        "run_test",
        1,
        1
      ],
      [
        "num_transactions",
        2,
        32
      ],
      [
        "stop_on_error",
        34,
        16
      ],
      [
        "pc_for_stop_on_error",
        50,
        1
      ],
      [
        "writes_before_turnaround",
        51,
        16
      ],
      [
        "idles_btwn_banks",
        67,
        4
      ]
    ]
  },
  "hbm_chnl_4x_tall_traffic_gen_trans_status": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 128,
    "desc": "Transaction status for HBM Traffic Generator",
    "fields": [
      [
        "writes_sent",
        0,
        32
      ],
      [
        "reads_received",
        32,
        32
      ],
      [
        "num_core_clock_cycles",
        64,
        32
      ],
      [
        "num_dfi_clock_cycles",
        96,
        32
      ]
    ]
  },
  "hbm_chnl_4x_tall_traffic_gen_addr_ctrl": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 107,
    "desc": "Address control for HBM Traffic Generator",
    "fields": [
      [
        "num_banks",
        0,
        5
      ],
      [
        "bank_sequence",
        5,
        64
      ],
      [
        "row_change_mode",
        69,
        1
      ],
      [
        "row_col_start",
        70,
        18
      ],
      [
        "row_col_jump",
        88,
        18
      ],
      [
        "row_col_increment",
        106,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_traffic_gen_data_ctrl": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 226,
    "desc": "Data control for HBM Traffic Generator",
    "fields": [
      [
        "data_source",
        0,
        2
      ],
      [
        "data_prbs_seed",
        2,
        32
      ],
      [
        "data_reg0",
        34,
        32
      ],
      [
        "data_reg1",
        66,
        32
      ],
      [
        "data_reg2",
        98,
        32
      ],
      [
        "data_reg3",
        130,
        32
      ],
      [
        "data_reg_seq",
        162,
        64
      ]
    ]
  },
  "hbm_chnl_4x_tall_traffic_gen_error_cntr": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 40,
    "desc": "Error status for HBM Traffic Generator",
    "fields": [
      [
        "data_compare_error_cntr_pc0",
        0,
        16
      ],
      [
        "data_compare_error_cntr_pc1",
        16,
        16
      ],
      [
        "bank_order_error_cntr",
        32,
        8
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_read_error_counters": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 8,
    "desc": "Counters for types of errors seen by read monitor",
    "fields": [
      [
        "unexpected_read_counter",
        0,
        4
      ],
      [
        "missed_read_counter",
        4,
        4
      ]
    ]
  },
  "hbm_chnl_4x_tall_debug_data_bus_register": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        16
      ]
    ]
  },
  "hbm_chnl_4x_tall_debug_data_select_register": {
    "type": "register",
    "block": "hbm_chnl_4x_tall",
    "width": 8,
    "desc": "debug_data_select_register",
    "fields": [
      [
        "debug_data_select",
        0,
        8
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_wr_channel_data_fifo_first_beat": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 520,
    "desc": "HBM Write Channel Data FIFO",
    "fields": [
      [
        "hbm_wr_channel_data_fifo_first_beat_data",
        0,
        520
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_wr_channel_data_fifo_second_beat": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 520,
    "desc": "HBM Write Channel Data FIFO",
    "fields": [
      [
        "hbm_wr_channel_data_fifo_second_beat_data",
        0,
        520
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_wr_channel_cmd_fifo": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 35,
    "desc": "HBM Write Channel Command FIFO ",
    "fields": [
      [
        "hbm_wr_channel_cmd_fifo_data",
        0,
        35
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_rd_channel_data_mem_first_beat": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 512,
    "desc": "HBM Read Channel Data Mem",
    "fields": [
      [
        "hbm_rd_channel_data_mem_first_beat_data",
        0,
        512
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_rd_channel_data_mem_second_beat": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 512,
    "desc": "HBM Read Channel Data Mem",
    "fields": [
      [
        "hbm_rd_channel_data_mem_second_beat_data",
        0,
        512
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_rd_channel_cmd_fifo": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 42,
    "desc": "HBM Read Channel Command FIFO  ",
    "fields": [
      [
        "hbm_rd_channel_cmd_fifo_data",
        0,
        42
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_rd_reorder_bank_fifo": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 16,
    "desc": "HBM Read Reorder Bank FIFO",
    "fields": [
      [
        "hbm_rd_reorder_bank_fifo_data",
        0,
        16
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_lpm_channel_mem": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 73,
    "desc": "HBM LPM Channel memory",
    "fields": [
      [
        "hbm_lpm_channel_mem_data",
        0,
        73
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_cpu_mem_access_ch0": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 1026,
    "desc": "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as 3:0 : col 17:4 : row",
    "fields": [
      [
        "hbm_cpu_mem_access_data",
        0,
        1024
      ],
      [
        "hbm_cpu_mem_access_parity_error",
        1024,
        1
      ],
      [
        "hbm_cpu_mem_access_ecc_error",
        1025,
        1
      ]
    ]
  },
  "hbm_chnl_4x_tall_hbm_cpu_mem_access_ch1": {
    "type": "memory",
    "block": "hbm_chnl_4x_tall",
    "width": 1026,
    "desc": "Indirect access to HBM memory. Writes or reads will block until the access to HBM memory is done. One virtual memory per bank. Address is mapped as 3:0 : col 17:4 : row",
    "fields": [
      [
        "hbm_cpu_mem_access_data",
        0,
        1024
      ],
      [
        "hbm_cpu_mem_access_parity_error",
        1024,
        1
      ],
      [
        "hbm_cpu_mem_access_ecc_error",
        1025,
        1
      ]
    ]
  },
  "mmu_buff_interrupt_register": {
    "type": "register",
    "block": "mmu_buff",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "mmu_buff_mem_protect_interrupt": {
    "type": "register",
    "block": "mmu_buff",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "mmu_buff_mem_protect_interrupt_test": {
    "type": "register",
    "block": "mmu_buff",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "mmu_buff_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "mmu_buff",
    "width": 16,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "mmu_buffer_allocator0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mmu_buffer_allocator1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "mmu_buffer_allocator2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mmu_buffer_allocator3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mmu_buffer_allocator4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "mmu_buffer_allocator5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "mmu_buffer_allocator6_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "mmu_buffer_allocator7_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "mmu_buffer_allocator8_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mmu_buffer_allocator9_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "mmu_buffer_allocator10_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "mmu_buffer_allocator11_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mmu_buffer_allocator12_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mmu_buffer_allocator13_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mmu_buffer_allocator14_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "mmu_buffer_allocator15_ecc_1b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "mmu_buff_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "mmu_buff",
    "width": 16,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "mmu_buffer_allocator0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mmu_buffer_allocator1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "mmu_buffer_allocator2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mmu_buffer_allocator3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mmu_buffer_allocator4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "mmu_buffer_allocator5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "mmu_buffer_allocator6_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "mmu_buffer_allocator7_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "mmu_buffer_allocator8_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mmu_buffer_allocator9_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "mmu_buffer_allocator10_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "mmu_buffer_allocator11_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mmu_buffer_allocator12_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mmu_buffer_allocator13_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mmu_buffer_allocator14_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "mmu_buffer_allocator15_ecc_2b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "mmu_buff_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "mmu_buff",
    "width": 16,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "mmu_buffer_allocator0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "mmu_buffer_allocator1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "mmu_buffer_allocator2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "mmu_buffer_allocator3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "mmu_buffer_allocator4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "mmu_buffer_allocator5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "mmu_buffer_allocator6_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "mmu_buffer_allocator7_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "mmu_buffer_allocator8_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "mmu_buffer_allocator9_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "mmu_buffer_allocator10_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "mmu_buffer_allocator11_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "mmu_buffer_allocator12_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "mmu_buffer_allocator13_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "mmu_buffer_allocator14_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "mmu_buffer_allocator15_ecc_1b_err_initiate",
        15,
        1
      ]
    ]
  },
  "mmu_buff_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "mmu_buff",
    "width": 16,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "mmu_buffer_allocator0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "mmu_buffer_allocator1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "mmu_buffer_allocator2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "mmu_buffer_allocator3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "mmu_buffer_allocator4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "mmu_buffer_allocator5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "mmu_buffer_allocator6_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "mmu_buffer_allocator7_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "mmu_buffer_allocator8_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "mmu_buffer_allocator9_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "mmu_buffer_allocator10_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "mmu_buffer_allocator11_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "mmu_buffer_allocator12_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "mmu_buffer_allocator13_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "mmu_buffer_allocator14_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "mmu_buffer_allocator15_ecc_2b_err_initiate",
        15,
        1
      ]
    ]
  },
  "mmu_buff_mem_protect_err_status": {
    "type": "register",
    "block": "mmu_buff",
    "width": 16,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "mmu_buffer_allocator0_err_int",
        0,
        1
      ],
      [
        "mmu_buffer_allocator1_err_int",
        1,
        1
      ],
      [
        "mmu_buffer_allocator2_err_int",
        2,
        1
      ],
      [
        "mmu_buffer_allocator3_err_int",
        3,
        1
      ],
      [
        "mmu_buffer_allocator4_err_int",
        4,
        1
      ],
      [
        "mmu_buffer_allocator5_err_int",
        5,
        1
      ],
      [
        "mmu_buffer_allocator6_err_int",
        6,
        1
      ],
      [
        "mmu_buffer_allocator7_err_int",
        7,
        1
      ],
      [
        "mmu_buffer_allocator8_err_int",
        8,
        1
      ],
      [
        "mmu_buffer_allocator9_err_int",
        9,
        1
      ],
      [
        "mmu_buffer_allocator10_err_int",
        10,
        1
      ],
      [
        "mmu_buffer_allocator11_err_int",
        11,
        1
      ],
      [
        "mmu_buffer_allocator12_err_int",
        12,
        1
      ],
      [
        "mmu_buffer_allocator13_err_int",
        13,
        1
      ],
      [
        "mmu_buffer_allocator14_err_int",
        14,
        1
      ],
      [
        "mmu_buffer_allocator15_err_int",
        15,
        1
      ]
    ]
  },
  "mmu_buff_selected_ser_error_info": {
    "type": "register",
    "block": "mmu_buff",
    "width": 11,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        9
      ],
      [
        "mem_err_type",
        9,
        2
      ]
    ]
  },
  "mmu_buff_ser_error_debug_configuration": {
    "type": "register",
    "block": "mmu_buff",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "mmu_buff_ecc_1b_err_debug": {
    "type": "register",
    "block": "mmu_buff",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "mmu_buff_ecc_2b_err_debug": {
    "type": "register",
    "block": "mmu_buff",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "mmu_buff_counter_timer": {
    "type": "register",
    "block": "mmu_buff",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "mmu_buff_counter_timer_trigger_reg": {
    "type": "register",
    "block": "mmu_buff",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "mmu_buff_memory_access_timeout": {
    "type": "register",
    "block": "mmu_buff",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "mmu_buff_broadcast_config_reg": {
    "type": "register",
    "block": "mmu_buff",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "mmu_buff_memory_prot_bypass": {
    "type": "register",
    "block": "mmu_buff",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "mmu_buff_soft_reset_configuration": {
    "type": "register",
    "block": "mmu_buff",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "mmu_buff_mbist_configuration": {
    "type": "register",
    "block": "mmu_buff",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "mmu_buff_power_down_configuration": {
    "type": "register",
    "block": "mmu_buff",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "mmu_buff_spare_reg": {
    "type": "register",
    "block": "mmu_buff",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "mmu_buff_pmro_ctrl": {
    "type": "register",
    "block": "mmu_buff",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "mmu_buff_pmro_status": {
    "type": "register",
    "block": "mmu_buff",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "mmu_buff_mirror_bus_conf_reg": {
    "type": "register",
    "block": "mmu_buff",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "mmu_buff_mirror_bus_status": {
    "type": "register",
    "block": "mmu_buff",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "mmu_buff_device_time_offset_cfg": {
    "type": "register",
    "block": "mmu_buff",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "mmu_buff_buffer_alloc_mode": {
    "type": "register",
    "block": "mmu_buff",
    "width": 17,
    "desc": "",
    "fields": [
      [
        "flexible_buffer_alloc",
        0,
        16
      ],
      [
        "use_old_buffer_scheme",
        16,
        1
      ]
    ]
  },
  "mmu_buff_cpu_occupy_buffers": {
    "type": "register",
    "block": "mmu_buff",
    "width": 529,
    "desc": "CPU designates certain buffers not be used by buffer allocator by doing CPU write to buffer allocator memories. Afterwards, CPU must write 1 or 0 per memory line if there are available buffers in that line. Also, total number of free buffers in that memory must be configured",
    "fields": [
      [
        "total_free_buffers",
        0,
        17
      ],
      [
        "valid_memory_lines",
        17,
        512
      ]
    ]
  },
  "mmu_buff_buffer_alloc_status": {
    "type": "register",
    "block": "mmu_buff",
    "width": 17,
    "desc": "Total number of free buffers remaining per buffer allocator memory",
    "fields": [
      [
        "free_buffers_left",
        0,
        17
      ]
    ]
  },
  "mmu_buff_cpu_override_buffers": {
    "type": "register",
    "block": "mmu_buff",
    "width": 17,
    "desc": "CPU access to free up buffers in the buffer allocator. The 4 LSBs of the buffer number serve as selector for buffer allocator , and the other 16b are written here",
    "fields": [
      [
        "cpu_buffer",
        0,
        16
      ],
      [
        "cpu_free_buffer",
        16,
        1
      ]
    ]
  },
  "mmu_buff_mmu_buffer_allocator": {
    "type": "memory",
    "block": "mmu_buff",
    "width": 128,
    "desc": "MMU Free buffer allocator memories",
    "fields": [
      [
        "mmu_buffer_allocator_data",
        0,
        128
      ]
    ]
  },
  "mmu_interrupt_register": {
    "type": "register",
    "block": "mmu",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "mmu_mem_protect_interrupt": {
    "type": "register",
    "block": "mmu",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "mmu_mem_protect_interrupt_test": {
    "type": "register",
    "block": "mmu",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "mmu_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "mmu",
    "width": 7,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "sms_data_fifo_mem0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "sms_data_fifo_mem1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "sms_data_fifo_mem2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "sms_data_fifo_mem3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mmu_dbd_req_fifo_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "lpm_req_id_bucket_mapping0_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "lpm_req_id_bucket_mapping1_ecc_1b_err_interrupt_mask",
        6,
        1
      ]
    ]
  },
  "mmu_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "mmu",
    "width": 7,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "sms_data_fifo_mem0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "sms_data_fifo_mem1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "sms_data_fifo_mem2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "sms_data_fifo_mem3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mmu_dbd_req_fifo_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "lpm_req_id_bucket_mapping0_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "lpm_req_id_bucket_mapping1_ecc_2b_err_interrupt_mask",
        6,
        1
      ]
    ]
  },
  "mmu_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "mmu",
    "width": 7,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "sms_data_fifo_mem0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "sms_data_fifo_mem1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "sms_data_fifo_mem2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "sms_data_fifo_mem3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "mmu_dbd_req_fifo_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "lpm_req_id_bucket_mapping0_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "lpm_req_id_bucket_mapping1_ecc_1b_err_initiate",
        6,
        1
      ]
    ]
  },
  "mmu_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "mmu",
    "width": 7,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "sms_data_fifo_mem0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "sms_data_fifo_mem1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "sms_data_fifo_mem2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "sms_data_fifo_mem3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "mmu_dbd_req_fifo_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "lpm_req_id_bucket_mapping0_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "lpm_req_id_bucket_mapping1_ecc_2b_err_initiate",
        6,
        1
      ]
    ]
  },
  "mmu_mem_protect_err_status": {
    "type": "register",
    "block": "mmu",
    "width": 7,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "sms_data_fifo_mem0_err_int",
        0,
        1
      ],
      [
        "sms_data_fifo_mem1_err_int",
        1,
        1
      ],
      [
        "sms_data_fifo_mem2_err_int",
        2,
        1
      ],
      [
        "sms_data_fifo_mem3_err_int",
        3,
        1
      ],
      [
        "mmu_dbd_req_fifo_err_int",
        4,
        1
      ],
      [
        "lpm_req_id_bucket_mapping0_err_int",
        5,
        1
      ],
      [
        "lpm_req_id_bucket_mapping1_err_int",
        6,
        1
      ]
    ]
  },
  "mmu_selected_ser_error_info": {
    "type": "register",
    "block": "mmu",
    "width": 10,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        8
      ],
      [
        "mem_err_type",
        8,
        2
      ]
    ]
  },
  "mmu_ser_error_debug_configuration": {
    "type": "register",
    "block": "mmu",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "mmu_ecc_1b_err_debug": {
    "type": "register",
    "block": "mmu",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "mmu_ecc_2b_err_debug": {
    "type": "register",
    "block": "mmu",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "mmu_counter_timer": {
    "type": "register",
    "block": "mmu",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "mmu_counter_timer_trigger_reg": {
    "type": "register",
    "block": "mmu",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "mmu_broadcast_config_reg": {
    "type": "register",
    "block": "mmu",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "mmu_memory_prot_bypass": {
    "type": "register",
    "block": "mmu",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "mmu_soft_reset_configuration": {
    "type": "register",
    "block": "mmu",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "mmu_mbist_configuration": {
    "type": "register",
    "block": "mmu",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "mmu_power_down_configuration": {
    "type": "register",
    "block": "mmu",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "mmu_spare_reg": {
    "type": "register",
    "block": "mmu",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "mmu_pmro_ctrl": {
    "type": "register",
    "block": "mmu",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "mmu_pmro_status": {
    "type": "register",
    "block": "mmu",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "mmu_mirror_bus_conf_reg": {
    "type": "register",
    "block": "mmu",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "mmu_mirror_bus_status": {
    "type": "register",
    "block": "mmu",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "mmu_device_time_offset_cfg": {
    "type": "register",
    "block": "mmu",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "mmu_general_interrupt_register": {
    "type": "register",
    "block": "mmu",
    "width": 29,
    "desc": "Interrupt",
    "fields": [
      [
        "hbm_chnls01_interrupt",
        0,
        1
      ],
      [
        "hbm_chnls23_interrupt",
        1,
        1
      ],
      [
        "hbm_chnls45_interrupt",
        2,
        1
      ],
      [
        "hbm_chnls67_interrupt",
        3,
        1
      ],
      [
        "hbm_chnls89_interrupt",
        4,
        1
      ],
      [
        "hbm_chnls1011_interrupt",
        5,
        1
      ],
      [
        "hbm_chnls1213_interrupt",
        6,
        1
      ],
      [
        "hbm_chnls1415_interrupt",
        7,
        1
      ],
      [
        "mmu_has_error_buffer_interrupt",
        8,
        1
      ],
      [
        "lpm_has_error_buffer_interrupt",
        9,
        1
      ],
      [
        "sms_order_fifo_underflow",
        10,
        1
      ],
      [
        "sms_order_fifo_overflow",
        11,
        1
      ],
      [
        "sms_data_fifo_overflow",
        12,
        1
      ],
      [
        "sms_data_fifo_underflow",
        13,
        1
      ],
      [
        "sms_metadata_fifo_overflow",
        14,
        1
      ],
      [
        "sms_metadata_fifo_underflow",
        15,
        1
      ],
      [
        "data_pack_pd_fifo0_underflow",
        16,
        1
      ],
      [
        "data_pack_pd_fifo1_underflow",
        17,
        1
      ],
      [
        "data_pack_pd_fifo0_overflow",
        18,
        1
      ],
      [
        "data_pack_pd_fifo1_overflow",
        19,
        1
      ],
      [
        "lpm0_bypass_fifo_overflow",
        20,
        1
      ],
      [
        "lpm0_bypass_fifo_underflow",
        21,
        1
      ],
      [
        "lpm1_bypass_fifo_overflow",
        22,
        1
      ],
      [
        "lpm1_bypass_fifo_underflow",
        23,
        1
      ],
      [
        "lpm0_arb_fifo_overflow",
        24,
        1
      ],
      [
        "lpm0_arb_fifo_underflow",
        25,
        1
      ],
      [
        "lpm1_arb_fifo_overflow",
        26,
        1
      ],
      [
        "lpm1_arb_fifo_underflow",
        27,
        1
      ],
      [
        "mmu_buff_interrupt",
        28,
        1
      ]
    ]
  },
  "mmu_general_interrupt_register_mask": {
    "type": "register",
    "block": "mmu",
    "width": 29,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "hbm_chnls01_interrupt_mask",
        0,
        1
      ],
      [
        "hbm_chnls23_interrupt_mask",
        1,
        1
      ],
      [
        "hbm_chnls45_interrupt_mask",
        2,
        1
      ],
      [
        "hbm_chnls67_interrupt_mask",
        3,
        1
      ],
      [
        "hbm_chnls89_interrupt_mask",
        4,
        1
      ],
      [
        "hbm_chnls1011_interrupt_mask",
        5,
        1
      ],
      [
        "hbm_chnls1213_interrupt_mask",
        6,
        1
      ],
      [
        "hbm_chnls1415_interrupt_mask",
        7,
        1
      ],
      [
        "mmu_has_error_buffer_interrupt_mask",
        8,
        1
      ],
      [
        "lpm_has_error_buffer_interrupt_mask",
        9,
        1
      ],
      [
        "sms_order_fifo_underflow_mask",
        10,
        1
      ],
      [
        "sms_order_fifo_overflow_mask",
        11,
        1
      ],
      [
        "sms_data_fifo_overflow_mask",
        12,
        1
      ],
      [
        "sms_data_fifo_underflow_mask",
        13,
        1
      ],
      [
        "sms_metadata_fifo_overflow_mask",
        14,
        1
      ],
      [
        "sms_metadata_fifo_underflow_mask",
        15,
        1
      ],
      [
        "data_pack_pd_fifo0_underflow_mask",
        16,
        1
      ],
      [
        "data_pack_pd_fifo1_underflow_mask",
        17,
        1
      ],
      [
        "data_pack_pd_fifo0_overflow_mask",
        18,
        1
      ],
      [
        "data_pack_pd_fifo1_overflow_mask",
        19,
        1
      ],
      [
        "lpm0_bypass_fifo_overflow_mask",
        20,
        1
      ],
      [
        "lpm0_bypass_fifo_underflow_mask",
        21,
        1
      ],
      [
        "lpm1_bypass_fifo_overflow_mask",
        22,
        1
      ],
      [
        "lpm1_bypass_fifo_underflow_mask",
        23,
        1
      ],
      [
        "lpm0_arb_fifo_overflow_mask",
        24,
        1
      ],
      [
        "lpm0_arb_fifo_underflow_mask",
        25,
        1
      ],
      [
        "lpm1_arb_fifo_overflow_mask",
        26,
        1
      ],
      [
        "lpm1_arb_fifo_underflow_mask",
        27,
        1
      ],
      [
        "mmu_buff_interrupt_mask",
        28,
        1
      ]
    ]
  },
  "mmu_general_interrupt_register_test": {
    "type": "register",
    "block": "mmu",
    "width": 29,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "hbm_chnls01_interrupt_test",
        0,
        1
      ],
      [
        "hbm_chnls23_interrupt_test",
        1,
        1
      ],
      [
        "hbm_chnls45_interrupt_test",
        2,
        1
      ],
      [
        "hbm_chnls67_interrupt_test",
        3,
        1
      ],
      [
        "hbm_chnls89_interrupt_test",
        4,
        1
      ],
      [
        "hbm_chnls1011_interrupt_test",
        5,
        1
      ],
      [
        "hbm_chnls1213_interrupt_test",
        6,
        1
      ],
      [
        "hbm_chnls1415_interrupt_test",
        7,
        1
      ],
      [
        "mmu_has_error_buffer_interrupt_test",
        8,
        1
      ],
      [
        "lpm_has_error_buffer_interrupt_test",
        9,
        1
      ],
      [
        "sms_order_fifo_underflow_test",
        10,
        1
      ],
      [
        "sms_order_fifo_overflow_test",
        11,
        1
      ],
      [
        "sms_data_fifo_overflow_test",
        12,
        1
      ],
      [
        "sms_data_fifo_underflow_test",
        13,
        1
      ],
      [
        "sms_metadata_fifo_overflow_test",
        14,
        1
      ],
      [
        "sms_metadata_fifo_underflow_test",
        15,
        1
      ],
      [
        "data_pack_pd_fifo0_underflow_test",
        16,
        1
      ],
      [
        "data_pack_pd_fifo1_underflow_test",
        17,
        1
      ],
      [
        "data_pack_pd_fifo0_overflow_test",
        18,
        1
      ],
      [
        "data_pack_pd_fifo1_overflow_test",
        19,
        1
      ],
      [
        "lpm0_bypass_fifo_overflow_test",
        20,
        1
      ],
      [
        "lpm0_bypass_fifo_underflow_test",
        21,
        1
      ],
      [
        "lpm1_bypass_fifo_overflow_test",
        22,
        1
      ],
      [
        "lpm1_bypass_fifo_underflow_test",
        23,
        1
      ],
      [
        "lpm0_arb_fifo_overflow_test",
        24,
        1
      ],
      [
        "lpm0_arb_fifo_underflow_test",
        25,
        1
      ],
      [
        "lpm1_arb_fifo_overflow_test",
        26,
        1
      ],
      [
        "lpm1_arb_fifo_underflow_test",
        27,
        1
      ],
      [
        "mmu_buff_interrupt_test",
        28,
        1
      ]
    ]
  },
  "mmu_mmu_parameters": {
    "type": "register",
    "block": "mmu",
    "width": 4,
    "desc": "Parameters of MMU",
    "fields": [
      [
        "large_burst_mode",
        0,
        1
      ],
      [
        "use_dbd_error_monitor",
        1,
        1
      ],
      [
        "release_error_buffers",
        2,
        1
      ],
      [
        "use_lpm_double_buckets",
        3,
        1
      ]
    ]
  },
  "mmu_mmu_debug_configs": {
    "type": "register",
    "block": "mmu",
    "width": 9,
    "desc": "Type of HBM Die",
    "fields": [
      [
        "dram_buffer_size",
        0,
        1
      ],
      [
        "lpm_bank_count_threshold",
        1,
        2
      ],
      [
        "sms2_mmu_cbr_depth",
        3,
        6
      ]
    ]
  },
  "mmu_lpm_bypass_config": {
    "type": "register",
    "block": "mmu",
    "width": 7,
    "desc": "Config for LPM bypass, where LPM lookups will be returned to CDB directly",
    "fields": [
      [
        "lpm_bypass_sum_threshold",
        0,
        4
      ],
      [
        "lpm_bypass_single_threshold",
        4,
        3
      ]
    ]
  },
  "mmu_lpm_replication_config": {
    "type": "register",
    "block": "mmu",
    "width": 22,
    "desc": "Offsets added to LPM bucket number in LPM addressing scheme. Used to locate LPM in particular areas of memory, and to do channel load balancing of LPM",
    "fields": [
      [
        "lpm_start_bank_channel_offset",
        0,
        8
      ],
      [
        "lpm_start_row_offset",
        8,
        14
      ]
    ]
  },
  "mmu_error_buffers": {
    "type": "register",
    "block": "mmu",
    "width": 20,
    "desc": "DRAM buffer address which got ECC error from HBM. Not returned to buffer pool. Only valid if corresponding bit in ErrorBufferValid register is high. Filled up cyclically and overwritten with new entries",
    "fields": [
      [
        "error_buffer",
        0,
        20
      ]
    ]
  },
  "mmu_error_buffer_valids": {
    "type": "register",
    "block": "mmu",
    "width": 8,
    "desc": "Valid bits for ErrorBuffers buffers",
    "fields": [
      [
        "error_buffer_valid",
        0,
        8
      ]
    ]
  },
  "mmu_lpm_error_buffers": {
    "type": "register",
    "block": "mmu",
    "width": 19,
    "desc": "Bucket IDs of LPM buckets that had ECC error. Only valid if corresponding bit in LpmErrorBufferValid is high. Filled up cyclically and overwritten with new entries",
    "fields": [
      [
        "lpm_error_buffer",
        0,
        19
      ]
    ]
  },
  "mmu_lpm_error_buffer_valids": {
    "type": "register",
    "block": "mmu",
    "width": 8,
    "desc": "Valid bits for ErrorBuffers buffers",
    "fields": [
      [
        "lpm_error_buffer_valid",
        0,
        8
      ]
    ]
  },
  "mmu_debug_counters": {
    "type": "register",
    "block": "mmu",
    "width": 320,
    "desc": "Various debug counters",
    "fields": [
      [
        "dbd_write_counter",
        0,
        32
      ],
      [
        "dbd_read_counter",
        32,
        32
      ],
      [
        "dbd_read_req_counter",
        64,
        32
      ],
      [
        "network_packets_written_sms0",
        96,
        32
      ],
      [
        "network_packets_written_sms1",
        128,
        32
      ],
      [
        "network_packets_read_sms0",
        160,
        32
      ],
      [
        "network_packets_read_sms1",
        192,
        32
      ],
      [
        "reassembly_pause_cycles",
        224,
        16
      ],
      [
        "dvoq_cbt_not_ready_cycles",
        240,
        8
      ],
      [
        "dics_cbr_not_ready_cycles",
        248,
        8
      ],
      [
        "sms0_data_fifo_full_cycles",
        256,
        32
      ],
      [
        "sms1_data_fifo_full_cycles",
        288,
        32
      ]
    ]
  },
  "mmu_lpm_debug_counters": {
    "type": "register",
    "block": "mmu",
    "width": 128,
    "desc": "Various debug counters for LPM",
    "fields": [
      [
        "lpm_req_counter",
        0,
        32
      ],
      [
        "lpm_double_req_counter",
        32,
        32
      ],
      [
        "lpm_resp_counter",
        64,
        32
      ],
      [
        "lpm_bypass_counter",
        96,
        32
      ]
    ]
  },
  "mmu_lpm_bank_counters": {
    "type": "register",
    "block": "mmu",
    "width": 12,
    "desc": "Counters for LPM bank fullness, measured in MMU shadowed FIFOs (which determine denied)",
    "fields": [
      [
        "lpm_bank_cycles_above_threshold",
        0,
        12
      ]
    ]
  },
  "mmu_error_counters": {
    "type": "register",
    "block": "mmu",
    "width": 96,
    "desc": "Various error counters",
    "fields": [
      [
        "lpm_error_counter",
        0,
        16
      ],
      [
        "dummy_pkt_counter",
        16,
        16
      ],
      [
        "drop_pkt_counter_sms0",
        32,
        16
      ],
      [
        "drop_pkt_counter_sms1",
        48,
        16
      ],
      [
        "mmu_monitor_error_counter",
        64,
        16
      ],
      [
        "error_buffer_counter",
        80,
        16
      ]
    ]
  },
  "mmu_rate_checker_control": {
    "type": "register",
    "block": "mmu",
    "width": 33,
    "desc": "Control for MMU rate checker",
    "fields": [
      [
        "rate_checker_interval",
        0,
        32
      ],
      [
        "rate_checker_go",
        32,
        1
      ]
    ]
  },
  "mmu_rate_checker_result": {
    "type": "register",
    "block": "mmu",
    "width": 82,
    "desc": "Rate checker result",
    "fields": [
      [
        "rate_checker_bytes_written",
        0,
        41
      ],
      [
        "rate_checker_bytes_read",
        41,
        41
      ]
    ]
  },
  "mmu_debug_data_bus_register": {
    "type": "register",
    "block": "mmu",
    "width": 32,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "mmu_debug_data_select_register": {
    "type": "register",
    "block": "mmu",
    "width": 10,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_select",
        0,
        10
      ]
    ]
  },
  "mmu_sms_data_fifo_mem": {
    "type": "memory",
    "block": "mmu",
    "width": 576,
    "desc": "MMU SMS DATA FIFO",
    "fields": [
      [
        "sms_data_fifo_mem_data",
        0,
        576
      ]
    ]
  },
  "mmu_mmu_dbd_req_fifo": {
    "type": "memory",
    "block": "mmu",
    "width": 81,
    "desc": "MMU FIFO of DBD read requests",
    "fields": [
      [
        "mmu_dbd_req_fifo_data",
        0,
        81
      ]
    ]
  },
  "mmu_lpm_req_id_bucket_mapping": {
    "type": "memory",
    "block": "mmu",
    "width": 20,
    "desc": "Mapping of LPM Req ID to bucket number, for error tracking",
    "fields": [
      [
        "lpm_req_id_bucket_mapping_data",
        0,
        20
      ]
    ]
  },
  "cdb_cache_interrupt_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "splitter_cache_interrupt_reg_summary",
        1,
        1
      ],
      [
        "lpm_cache_interrupt_reg_summary",
        2,
        1
      ]
    ]
  },
  "cdb_cache_mem_protect_interrupt": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "cdb_cache_mem_protect_interrupt_test": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "cdb_cache_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "splitter_cache_age_mem_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "splitter_cache_activity_mem_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "splitter_cache_tcam_mem_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "lpm_cache_age_mem_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "lpm_cache_activity_mem_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "lpm_cache_tcam_mem_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "splitter_cache_msb_em_verifier_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "splitter_cache_lsb_em_verifier_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "lpm_cache_msb_em_verifier_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "lpm_cache_lsb_em_verifier_ecc_1b_err_interrupt_mask",
        9,
        1
      ]
    ]
  },
  "cdb_cache_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "splitter_cache_age_mem_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "splitter_cache_activity_mem_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "splitter_cache_tcam_mem_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "lpm_cache_age_mem_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "lpm_cache_activity_mem_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "lpm_cache_tcam_mem_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "splitter_cache_msb_em_verifier_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "splitter_cache_lsb_em_verifier_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "lpm_cache_msb_em_verifier_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "lpm_cache_lsb_em_verifier_ecc_2b_err_interrupt_mask",
        9,
        1
      ]
    ]
  },
  "cdb_cache_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_cache",
    "width": 4,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "splitter_cache_tcam0_parity_err_interrupt_mask",
        0,
        1
      ],
      [
        "splitter_cache_tcam1_parity_err_interrupt_mask",
        1,
        1
      ],
      [
        "lpm_cache_tcam0_parity_err_interrupt_mask",
        2,
        1
      ],
      [
        "lpm_cache_tcam1_parity_err_interrupt_mask",
        3,
        1
      ]
    ]
  },
  "cdb_cache_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "splitter_cache_age_mem_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "splitter_cache_activity_mem_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "splitter_cache_tcam_mem_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "lpm_cache_age_mem_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "lpm_cache_activity_mem_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "lpm_cache_tcam_mem_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "splitter_cache_msb_em_verifier_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "splitter_cache_lsb_em_verifier_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "lpm_cache_msb_em_verifier_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "lpm_cache_lsb_em_verifier_ecc_1b_err_initiate",
        9,
        1
      ]
    ]
  },
  "cdb_cache_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "splitter_cache_age_mem_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "splitter_cache_activity_mem_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "splitter_cache_tcam_mem_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "lpm_cache_age_mem_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "lpm_cache_activity_mem_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "lpm_cache_tcam_mem_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "splitter_cache_msb_em_verifier_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "splitter_cache_lsb_em_verifier_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "lpm_cache_msb_em_verifier_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "lpm_cache_lsb_em_verifier_ecc_2b_err_initiate",
        9,
        1
      ]
    ]
  },
  "cdb_cache_parity_err_initiate_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 4,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "splitter_cache_tcam0_parity_err_initiate",
        0,
        1
      ],
      [
        "splitter_cache_tcam1_parity_err_initiate",
        1,
        1
      ],
      [
        "lpm_cache_tcam0_parity_err_initiate",
        2,
        1
      ],
      [
        "lpm_cache_tcam1_parity_err_initiate",
        3,
        1
      ]
    ]
  },
  "cdb_cache_mem_protect_err_status": {
    "type": "register",
    "block": "cdb_cache",
    "width": 14,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "splitter_cache_age_mem_err_int",
        0,
        1
      ],
      [
        "splitter_cache_activity_mem_err_int",
        1,
        1
      ],
      [
        "splitter_cache_tcam_mem_err_int",
        2,
        1
      ],
      [
        "splitter_cache_tcam0_err_int",
        3,
        1
      ],
      [
        "splitter_cache_tcam1_err_int",
        4,
        1
      ],
      [
        "lpm_cache_age_mem_err_int",
        5,
        1
      ],
      [
        "lpm_cache_activity_mem_err_int",
        6,
        1
      ],
      [
        "lpm_cache_tcam_mem_err_int",
        7,
        1
      ],
      [
        "lpm_cache_tcam0_err_int",
        8,
        1
      ],
      [
        "lpm_cache_tcam1_err_int",
        9,
        1
      ],
      [
        "splitter_cache_msb_em_verifier_err_int",
        10,
        1
      ],
      [
        "splitter_cache_lsb_em_verifier_err_int",
        11,
        1
      ],
      [
        "lpm_cache_msb_em_verifier_err_int",
        12,
        1
      ],
      [
        "lpm_cache_lsb_em_verifier_err_int",
        13,
        1
      ]
    ]
  },
  "cdb_cache_selected_ser_error_info": {
    "type": "register",
    "block": "cdb_cache",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "cdb_cache_ser_error_debug_configuration": {
    "type": "register",
    "block": "cdb_cache",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "cdb_cache_ecc_1b_err_debug": {
    "type": "register",
    "block": "cdb_cache",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_cache_ecc_2b_err_debug": {
    "type": "register",
    "block": "cdb_cache",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_cache_parity_err_debug": {
    "type": "register",
    "block": "cdb_cache",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_cache_tcam_bist_control": {
    "type": "register",
    "block": "cdb_cache",
    "width": 4,
    "desc": "TCAM BIST control",
    "fields": [
      [
        "tcam_strw",
        0,
        2
      ],
      [
        "tcam_bist_rst",
        2,
        1
      ],
      [
        "tcam_bist_run",
        3,
        1
      ]
    ]
  },
  "cdb_cache_tcam_bist_status": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "TCAM BIST pass fail status",
    "fields": [
      [
        "tcam_bist_done_pass_out",
        0,
        4
      ],
      [
        "tcam_bist_done_fail_out",
        4,
        4
      ]
    ]
  },
  "cdb_cache_tcam_scan_period_cfg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "cdb_cache_counter_timer": {
    "type": "register",
    "block": "cdb_cache",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "cdb_cache_counter_timer_trigger_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "cdb_cache_memory_access_timeout": {
    "type": "register",
    "block": "cdb_cache",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "cdb_cache_broadcast_config_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "cdb_cache_memory_prot_bypass": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "cdb_cache_soft_reset_configuration": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "cdb_cache_mbist_configuration": {
    "type": "register",
    "block": "cdb_cache",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "cdb_cache_power_down_configuration": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "cdb_cache_spare_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "cdb_cache_pmro_ctrl": {
    "type": "register",
    "block": "cdb_cache",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "cdb_cache_pmro_status": {
    "type": "register",
    "block": "cdb_cache",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "cdb_cache_mirror_bus_conf_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "cdb_cache_mirror_bus_status": {
    "type": "register",
    "block": "cdb_cache",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "cdb_cache_device_time_offset_cfg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_disable_cache_tcam_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "rxpp lookups in the cache tcam will always result in a miss when this bit is set ",
    "fields": [
      [
        "splitter_cache_disable_cache_tcam",
        0,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_disable_cache_em_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "rxpp lookups in the cache em will always result in a miss when this bit is set ",
    "fields": [
      [
        "splitter_cache_disable_cache_em",
        0,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_insert_period_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of clocks the insert machine will stall between attempts to insert new data to cache.",
    "fields": [
      [
        "splitter_cache_insert_period",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_scan_period_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of clocks the scanner machine will stall between attempts todelete data from the cache.",
    "fields": [
      [
        "splitter_cache_scan_period",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_age_threshold_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 2,
    "desc": "entries with age older than this value will be removed by the scanner.",
    "fields": [
      [
        "splitter_cache_age_threshold",
        0,
        2
      ]
    ]
  },
  "cdb_cache_splitter_cache_activity_threshold_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "entries with activity time stamp older than this value will be removed by the scanner.",
    "fields": [
      [
        "splitter_cache_activity_threshold",
        0,
        6
      ]
    ]
  },
  "cdb_cache_splitter_cache_age_offset_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 5,
    "desc": "the age timestamp is driven from a 32bit register. This value determines the start point from which the age timestamp is taken.",
    "fields": [
      [
        "splitter_cache_age_offset",
        0,
        5
      ]
    ]
  },
  "cdb_cache_splitter_cache_activity_offset_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 5,
    "desc": "the activity timestamp is driven from a 32bit register. This value determines the start point from which the activity timestamp is taken.",
    "fields": [
      [
        "splitter_cache_activity_offset",
        0,
        5
      ]
    ]
  },
  "cdb_cache_splitter_cache_candidates_shift_period_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of clocks the cache-candidates-to-be-written LIFO will stall between shifiting the candidates by 1.",
    "fields": [
      [
        "splitter_cache_candidates_shift_period",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_hash_cfg_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 284,
    "desc": "configures the hash of the EM-s in the cache",
    "fields": [
      [
        "splitter_cache_hash_cfg",
        0,
        284
      ]
    ]
  },
  "cdb_cache_splitter_cache_random_delete_on_hit_entry_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "when a cache entry is hit by rxpp lookup, and an lfsr output value equale to this value - the entry will be deleted. Setting this value to 0 will disable the feature.",
    "fields": [
      [
        "splitter_cache_random_delete_value",
        0,
        8
      ]
    ]
  },
  "cdb_cache_splitter_cache_static_tcam_entry_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 256,
    "desc": "when a cache entry is hit by rxpp lookup, and an lfsr output value equale to this value - the entry will be deleted. Setting this value to 0 will disable the feature.",
    "fields": [
      [
        "splitter_cache_static_tcam_entry",
        0,
        256
      ]
    ]
  },
  "cdb_cache_splitter_cache_em_crc_polynom_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "This is configuration for the EM. Whether it's hash should use a primitive polynom in the CRC or not",
    "fields": [
      [
        "splitter_cache_em_use_primit_poly_cfg",
        0,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_ldb_mapping_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "Maping of logiocal data base to key size index, and to cache profile.",
    "fields": [
      [
        "splitter_cache_ldb_to_key_size_index",
        0,
        1
      ],
      [
        "splitter_cache_ldb_to_cache_profile",
        1,
        2
      ]
    ]
  },
  "cdb_cache_splitter_cache_full_len_per_key_size_index_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "Used  to detemine wheter hit length is full, per key index.",
    "fields": [
      [
        "splitter_cache_full_len_per_key_size_index",
        0,
        8
      ]
    ]
  },
  "cdb_cache_splitter_cache_leaf_indication_location_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "Used  to detemine which bit of the payload is the lpm leaf indication",
    "fields": [
      [
        "splitter_cache_leaf_indication_location",
        0,
        3
      ]
    ]
  },
  "cdb_cache_splitter_cache_from_hbm_location_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 16,
    "desc": "Used  to detemine which bit of the payload is the from-hbm indication",
    "fields": [
      [
        "splitter_cache_from_hbm_location_lpm_reply",
        0,
        8
      ],
      [
        "splitter_cache_from_hbm_location_em_and_lpm_reply",
        8,
        8
      ]
    ]
  },
  "cdb_cache_splitter_cache_max_hbm_entries_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 9,
    "desc": "number of entries reserved for replies that came from the hbm.",
    "fields": [
      [
        "splitter_cache_max_hbm_entries",
        0,
        9
      ]
    ]
  },
  "cdb_cache_splitter_cache_reply_format_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "Used  to detemine which bits of the payload are the format ( lpm only, em only, or both), and the value of the format",
    "fields": [
      [
        "splitter_cache_format_bits_location",
        0,
        4
      ],
      [
        "splitter_cache_lpm_reply_format",
        4,
        2
      ]
    ]
  },
  "cdb_cache_splitter_cache_insert_controls_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "Controls for cache candidates that returned from the CDB. Key for this mapping is  bit 7  - candidate is from HBM bits 6:5 - cache profile bit   4     - EM reply(0) or LPM reply(1) bit   3     - em-cache is full bit   2     - TCAM cache is full  bit   1     - hit  for EM replies only, leaf for LPM replies. bit   0     - full length match, for lpm replies only ",
    "fields": [
      [
        "splitter_cache_insert_to_cache",
        0,
        1
      ],
      [
        "splitter_cache_insert_to_tcam",
        1,
        1
      ],
      [
        "splitter_cache_insert_length",
        2,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_insert_lkp_th_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "splitter_cache_insert_lkp_th",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_stats_cnt": {
    "type": "register",
    "block": "cdb_cache",
    "width": 192,
    "desc": "",
    "fields": [
      [
        "splitter_cache_tcam_hit_cnt",
        0,
        64
      ],
      [
        "splitter_cache_em_hit_cnt",
        64,
        64
      ],
      [
        "splitter_cache_miss_cnt",
        128,
        64
      ]
    ]
  },
  "cdb_cache_splitter_cache_num_of_static_lsb_em_bin0_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of entreis in the EM bin 0 used by the CPU( not handled by the cache)",
    "fields": [
      [
        "splitter_cache_num_of_static_lsb_em_bin0",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_num_of_static_lsb_em_bin1_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of entreis in the EM bin 1 used by the CPU( not handled by the cache)",
    "fields": [
      [
        "splitter_cache_num_of_static_lsb_em_bin1",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_num_of_static_msb_em_bin0_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of entreis in the EM bin 0 used by the CPU( not handled by the cache)",
    "fields": [
      [
        "splitter_cache_num_of_static_msb_em_bin0",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_num_of_static_msb_em_bin1_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of entreis in the EM bin 0 used by the CPU( not handled by the cache)",
    "fields": [
      [
        "splitter_cache_num_of_static_msb_em_bin1",
        0,
        10
      ]
    ]
  },
  "cdb_cache_splitter_cache_cam_miss_en_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "disables hit for EM cam",
    "fields": [
      [
        "splitter_cache_cam_miss_en",
        0,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_duplicate_miss_en_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "disables hit for EM duplicate entries",
    "fields": [
      [
        "splitter_cache_duplicate_miss_en",
        0,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_protect_write_fail_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "disables hit for EM duplicate entries",
    "fields": [
      [
        "splitter_cache_protect_write_fail",
        0,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_protect_write_cam_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "disables hit for EM duplicate entries",
    "fields": [
      [
        "splitter_cache_protect_write_cam",
        0,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_hit_counter_probability_cfg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 36,
    "desc": "sets the probability for incrementing each bit of the hit counter per TCAM entry. Thos counter has 4 bits, and may be incremented when a lookup does hit in the associated entry. The oucmter resets when an entry is writen to the TCAM.",
    "fields": [
      [
        "splitter_cache_inc_bit0_probability",
        0,
        9
      ],
      [
        "splitter_cache_inc_bit1_probability",
        9,
        9
      ],
      [
        "splitter_cache_inc_bit2_probability",
        18,
        9
      ],
      [
        "splitter_cache_inc_bit3_probability",
        27,
        9
      ]
    ]
  },
  "cdb_cache_splitter_cache_cpu_candidates": {
    "type": "register",
    "block": "cdb_cache",
    "width": 52,
    "desc": "candidate to migarte from the HBM to th L2 in the LPm.",
    "fields": [
      [
        "splitter_cache_cpu_candidate0",
        0,
        8
      ],
      [
        "splitter_cache_cpu_candidate1",
        8,
        8
      ],
      [
        "splitter_cache_cpu_candidate2",
        16,
        8
      ],
      [
        "splitter_cache_cpu_candidate3",
        24,
        8
      ],
      [
        "splitter_cache_cpu_candidate0_hit_cnt",
        32,
        4
      ],
      [
        "splitter_cache_cpu_candidate1_hit_cnt",
        36,
        4
      ],
      [
        "splitter_cache_cpu_candidate2_hit_cnt",
        40,
        4
      ],
      [
        "splitter_cache_cpu_candidate3_hit_cnt",
        44,
        4
      ],
      [
        "splitter_cache_cpu_candidate0_valid",
        48,
        1
      ],
      [
        "splitter_cache_cpu_candidate1_valid",
        49,
        1
      ],
      [
        "splitter_cache_cpu_candidate2_valid",
        50,
        1
      ],
      [
        "splitter_cache_cpu_candidate3_valid",
        51,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_interrupt_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "splitter_cache_write_fail",
        0,
        1
      ],
      [
        "splitter_cache_write_cam",
        1,
        1
      ],
      [
        "splitter_cache_msb_em_duplicate_entry",
        2,
        1
      ],
      [
        "splitter_cache_lsb_em_duplicate_entry",
        3,
        1
      ],
      [
        "splitter_cache_msb_em_write_bin_mismatch",
        4,
        1
      ],
      [
        "splitter_cache_lsb_em_write_bin_mismatch",
        5,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_interrupt_reg_mask": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "splitter_cache_write_fail_mask",
        0,
        1
      ],
      [
        "splitter_cache_write_cam_mask",
        1,
        1
      ],
      [
        "splitter_cache_msb_em_duplicate_entry_mask",
        2,
        1
      ],
      [
        "splitter_cache_lsb_em_duplicate_entry_mask",
        3,
        1
      ],
      [
        "splitter_cache_msb_em_write_bin_mismatch_mask",
        4,
        1
      ],
      [
        "splitter_cache_lsb_em_write_bin_mismatch_mask",
        5,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_interrupt_reg_test": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "splitter_cache_write_fail_test",
        0,
        1
      ],
      [
        "splitter_cache_write_cam_test",
        1,
        1
      ],
      [
        "splitter_cache_msb_em_duplicate_entry_test",
        2,
        1
      ],
      [
        "splitter_cache_lsb_em_duplicate_entry_test",
        3,
        1
      ],
      [
        "splitter_cache_msb_em_write_bin_mismatch_test",
        4,
        1
      ],
      [
        "splitter_cache_lsb_em_write_bin_mismatch_test",
        5,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_entries_cnt_wm": {
    "type": "register",
    "block": "cdb_cache",
    "width": 28,
    "desc": "disables hit for EM duplicate entries",
    "fields": [
      [
        "splitter_cache_hbm_entries_cnt",
        0,
        8
      ],
      [
        "splitter_cache_on_chip_tcam_entries_cnt",
        8,
        8
      ],
      [
        "splitter_cache_on_chip_em_entries_cnt",
        16,
        12
      ]
    ]
  },
  "cdb_cache_lpm_cache_disable_cache_tcam_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "rxpp lookups in the cache tcam will always result in a miss when this bit is set ",
    "fields": [
      [
        "lpm_cache_disable_cache_tcam",
        0,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_disable_cache_em_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "rxpp lookups in the cache em will always result in a miss when this bit is set ",
    "fields": [
      [
        "lpm_cache_disable_cache_em",
        0,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_insert_period_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of clocks the insert machine will stall between attempts to insert new data to cache.",
    "fields": [
      [
        "lpm_cache_insert_period",
        0,
        10
      ]
    ]
  },
  "cdb_cache_lpm_cache_scan_period_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of clocks the scanner machine will stall between attempts todelete data from the cache.",
    "fields": [
      [
        "lpm_cache_scan_period",
        0,
        10
      ]
    ]
  },
  "cdb_cache_lpm_cache_age_threshold_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 2,
    "desc": "entries with age older than this value will be removed by the scanner.",
    "fields": [
      [
        "lpm_cache_age_threshold",
        0,
        2
      ]
    ]
  },
  "cdb_cache_lpm_cache_activity_threshold_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "entries with activity time stamp older than this value will be removed by the scanner.",
    "fields": [
      [
        "lpm_cache_activity_threshold",
        0,
        6
      ]
    ]
  },
  "cdb_cache_lpm_cache_age_offset_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 5,
    "desc": "the age timestamp is driven from a 32bit register. This value determines the start point from which the age timestamp is taken.",
    "fields": [
      [
        "lpm_cache_age_offset",
        0,
        5
      ]
    ]
  },
  "cdb_cache_lpm_cache_activity_offset_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 5,
    "desc": "the activity timestamp is driven from a 32bit register. This value determines the start point from which the activity timestamp is taken.",
    "fields": [
      [
        "lpm_cache_activity_offset",
        0,
        5
      ]
    ]
  },
  "cdb_cache_lpm_cache_candidates_shift_period_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of clocks the cache-candidates-to-be-written LIFO will stall between shifiting the candidates by 1.",
    "fields": [
      [
        "lpm_cache_candidates_shift_period",
        0,
        10
      ]
    ]
  },
  "cdb_cache_lpm_cache_hash_cfg_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 284,
    "desc": "configures the hash of the EM-s in the cache",
    "fields": [
      [
        "lpm_cache_hash_cfg",
        0,
        284
      ]
    ]
  },
  "cdb_cache_lpm_cache_random_delete_on_hit_entry_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "when a cache entry is hit by rxpp lookup, and an lfsr output value equale to this value - the entry will be deleted. Setting this value to 0 will disable the feature.",
    "fields": [
      [
        "lpm_cache_random_delete_value",
        0,
        8
      ]
    ]
  },
  "cdb_cache_lpm_cache_static_tcam_entry_register": {
    "type": "register",
    "block": "cdb_cache",
    "width": 256,
    "desc": "when a cache entry is hit by rxpp lookup, and an lfsr output value equale to this value - the entry will be deleted. Setting this value to 0 will disable the feature.",
    "fields": [
      [
        "lpm_cache_static_tcam_entry",
        0,
        256
      ]
    ]
  },
  "cdb_cache_lpm_cache_em_crc_polynom_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "This is configuration for the EM. Whether it's hash should use a primitive polynom in the CRC or not",
    "fields": [
      [
        "lpm_cache_em_use_primit_poly_cfg",
        0,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_ldb_mapping_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "Maping of logiocal data base to key size index, and to cache profile.",
    "fields": [
      [
        "lpm_cache_ldb_to_key_size_index",
        0,
        1
      ],
      [
        "lpm_cache_ldb_to_cache_profile",
        1,
        2
      ]
    ]
  },
  "cdb_cache_lpm_cache_full_len_per_key_size_index_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "Used  to detemine wheter hit length is full, per key index.",
    "fields": [
      [
        "lpm_cache_full_len_per_key_size_index",
        0,
        8
      ]
    ]
  },
  "cdb_cache_lpm_cache_leaf_indication_location_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "Used  to detemine which bit of the payload is the lpm leaf indication",
    "fields": [
      [
        "lpm_cache_leaf_indication_location",
        0,
        3
      ]
    ]
  },
  "cdb_cache_lpm_cache_from_hbm_location_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "Used  to detemine which bit of the payload is the from-hbm indication",
    "fields": [
      [
        "lpm_cache_from_hbm_location_lpm_reply",
        0,
        8
      ]
    ]
  },
  "cdb_cache_lpm_cache_max_hbm_entries_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 9,
    "desc": "number of entries reserved for replies that came from the hbm.",
    "fields": [
      [
        "lpm_cache_max_hbm_entries",
        0,
        9
      ]
    ]
  },
  "cdb_cache_lpm_cache_insert_controls_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 3,
    "desc": "Controls for cache candidates that returned from the CDB. Key for this mapping is  bit 7  - candidate is from HBM bits 6:5 - cache profile bit   4     - EM reply(0) or LPM reply(1) . bit   3     - em-cache is full bit   2     - TCAM cache is full  bit   1     - hit  for EM replies only, leaf for LPM replies. bit   0     - full length match, for lpm replies only  Note - bit 4 must be set for every enrty.",
    "fields": [
      [
        "lpm_cache_insert_to_cache",
        0,
        1
      ],
      [
        "lpm_cache_insert_to_tcam",
        1,
        1
      ],
      [
        "lpm_cache_insert_length",
        2,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_insert_lkp_th_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "lpm_cache_insert_lkp_th",
        0,
        10
      ]
    ]
  },
  "cdb_cache_lpm_cache_stats_cnt": {
    "type": "register",
    "block": "cdb_cache",
    "width": 192,
    "desc": "",
    "fields": [
      [
        "lpm_cache_tcam_hit_cnt",
        0,
        64
      ],
      [
        "lpm_cache_em_hit_cnt",
        64,
        64
      ],
      [
        "lpm_cache_miss_cnt",
        128,
        64
      ]
    ]
  },
  "cdb_cache_lpm_cache_num_of_static_lsb_em_bin0_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of entreis in the EM bin 0 used by the CPU( not handled by the cache)",
    "fields": [
      [
        "lpm_cache_num_of_static_lsb_em_bin0",
        0,
        10
      ]
    ]
  },
  "cdb_cache_lpm_cache_num_of_static_lsb_em_bin1_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of entreis in the EM bin 1 used by the CPU( not handled by the cache)",
    "fields": [
      [
        "lpm_cache_num_of_static_lsb_em_bin1",
        0,
        10
      ]
    ]
  },
  "cdb_cache_lpm_cache_num_of_static_msb_em_bin0_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of entreis in the EM bin 0 used by the CPU( not handled by the cache)",
    "fields": [
      [
        "lpm_cache_num_of_static_msb_em_bin0",
        0,
        10
      ]
    ]
  },
  "cdb_cache_lpm_cache_num_of_static_msb_em_bin1_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 10,
    "desc": "number of entreis in the EM bin 0 used by the CPU( not handled by the cache)",
    "fields": [
      [
        "lpm_cache_num_of_static_msb_em_bin1",
        0,
        10
      ]
    ]
  },
  "cdb_cache_lpm_cache_cam_miss_en_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "disables hit for EM cam",
    "fields": [
      [
        "lpm_cache_cam_miss_en",
        0,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_duplicate_miss_en_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "disables hit for EM duplicate entries",
    "fields": [
      [
        "lpm_cache_duplicate_miss_en",
        0,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_protect_write_fail_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "disables hit for EM duplicate entries",
    "fields": [
      [
        "lpm_cache_protect_write_fail",
        0,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_protect_write_cam_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 1,
    "desc": "disables hit for EM duplicate entries",
    "fields": [
      [
        "lpm_cache_protect_write_cam",
        0,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_hit_counter_probability_cfg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 36,
    "desc": "sets the probability for incrementing each bit of the hit counter per TCAM entry. Thos counter has 4 bits, and may be incremented when a lookup does hit in the associated entry. The oucmter resets when an entry is writen to the TCAM.",
    "fields": [
      [
        "lpm_cache_inc_bit0_probability",
        0,
        9
      ],
      [
        "lpm_cache_inc_bit1_probability",
        9,
        9
      ],
      [
        "lpm_cache_inc_bit2_probability",
        18,
        9
      ],
      [
        "lpm_cache_inc_bit3_probability",
        27,
        9
      ]
    ]
  },
  "cdb_cache_lpm_cache_cpu_candidates": {
    "type": "register",
    "block": "cdb_cache",
    "width": 52,
    "desc": "sets the probability for incrementing each bit of the hit counter per TCAM entry. Thos counter has 4 bits, and may be incremented when a lookup does hit in the associated entry. The oucmter resets when an entry is writen to the TCAM.",
    "fields": [
      [
        "lpm_cache_cpu_candidate0",
        0,
        8
      ],
      [
        "lpm_cache_cpu_candidate1",
        8,
        8
      ],
      [
        "lpm_cache_cpu_candidate2",
        16,
        8
      ],
      [
        "lpm_cache_cpu_candidate3",
        24,
        8
      ],
      [
        "lpm_cache_cpu_candidate0_hit_cnt",
        32,
        4
      ],
      [
        "lpm_cache_cpu_candidate1_hit_cnt",
        36,
        4
      ],
      [
        "lpm_cache_cpu_candidate2_hit_cnt",
        40,
        4
      ],
      [
        "lpm_cache_cpu_candidate3_hit_cnt",
        44,
        4
      ],
      [
        "lpm_cache_cpu_candidate0_valid",
        48,
        1
      ],
      [
        "lpm_cache_cpu_candidate1_valid",
        49,
        1
      ],
      [
        "lpm_cache_cpu_candidate2_valid",
        50,
        1
      ],
      [
        "lpm_cache_cpu_candidate3_valid",
        51,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_interrupt_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "lpm_cache_write_fail",
        0,
        1
      ],
      [
        "lpm_cache_write_cam",
        1,
        1
      ],
      [
        "lpm_cache_msb_em_duplicate_entry",
        2,
        1
      ],
      [
        "lpm_cache_lsb_em_duplicate_entry",
        3,
        1
      ],
      [
        "lpm_cache_msb_em_write_bin_mismatch",
        4,
        1
      ],
      [
        "lpm_cache_lsb_em_write_bin_mismatch",
        5,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_interrupt_reg_mask": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "lpm_cache_write_fail_mask",
        0,
        1
      ],
      [
        "lpm_cache_write_cam_mask",
        1,
        1
      ],
      [
        "lpm_cache_msb_em_duplicate_entry_mask",
        2,
        1
      ],
      [
        "lpm_cache_lsb_em_duplicate_entry_mask",
        3,
        1
      ],
      [
        "lpm_cache_msb_em_write_bin_mismatch_mask",
        4,
        1
      ],
      [
        "lpm_cache_lsb_em_write_bin_mismatch_mask",
        5,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_interrupt_reg_test": {
    "type": "register",
    "block": "cdb_cache",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "lpm_cache_write_fail_test",
        0,
        1
      ],
      [
        "lpm_cache_write_cam_test",
        1,
        1
      ],
      [
        "lpm_cache_msb_em_duplicate_entry_test",
        2,
        1
      ],
      [
        "lpm_cache_lsb_em_duplicate_entry_test",
        3,
        1
      ],
      [
        "lpm_cache_msb_em_write_bin_mismatch_test",
        4,
        1
      ],
      [
        "lpm_cache_lsb_em_write_bin_mismatch_test",
        5,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_entries_cnt_wm": {
    "type": "register",
    "block": "cdb_cache",
    "width": 28,
    "desc": "disables hit for EM duplicate entries",
    "fields": [
      [
        "lpm_cache_hbm_entries_cnt",
        0,
        8
      ],
      [
        "lpm_cache_on_chip_tcam_entries_cnt",
        8,
        8
      ],
      [
        "lpm_cache_on_chip_em_entries_cnt",
        16,
        12
      ]
    ]
  },
  "cdb_cache_splitter_cache_msb_em_per_bank_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 122,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "splitter_cache_msb_em_active_banks",
        0,
        1
      ],
      [
        "splitter_cache_msb_em_hash_key",
        1,
        120
      ],
      [
        "splitter_cache_msb_em_use_primitive_crc",
        121,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_msb_em_per_em_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "splitter_cache_msb_em_key_width",
        0,
        16
      ],
      [
        "splitter_cache_msb_em_auto_bubble_req",
        16,
        1
      ],
      [
        "splitter_cache_msb_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "cdb_cache_splitter_cache_msb_em_cam_wm_max_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "splitter_cache_msb_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "cdb_cache_splitter_cache_msb_em_bank_write_cntr_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "splitter_cache_msb_em_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "cdb_cache_splitter_cache_lsb_em_per_bank_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 186,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "splitter_cache_lsb_em_active_banks",
        0,
        1
      ],
      [
        "splitter_cache_lsb_em_hash_key",
        1,
        184
      ],
      [
        "splitter_cache_lsb_em_use_primitive_crc",
        185,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_lsb_em_per_em_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "splitter_cache_lsb_em_key_width",
        0,
        16
      ],
      [
        "splitter_cache_lsb_em_auto_bubble_req",
        16,
        1
      ],
      [
        "splitter_cache_lsb_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "cdb_cache_splitter_cache_lsb_em_cam_wm_max_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "splitter_cache_lsb_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "cdb_cache_splitter_cache_lsb_em_bank_write_cntr_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "splitter_cache_lsb_em_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "cdb_cache_lpm_cache_msb_em_per_bank_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 146,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "lpm_cache_msb_em_active_banks",
        0,
        1
      ],
      [
        "lpm_cache_msb_em_hash_key",
        1,
        144
      ],
      [
        "lpm_cache_msb_em_use_primitive_crc",
        145,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_msb_em_per_em_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "lpm_cache_msb_em_key_width",
        0,
        16
      ],
      [
        "lpm_cache_msb_em_auto_bubble_req",
        16,
        1
      ],
      [
        "lpm_cache_msb_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "cdb_cache_lpm_cache_msb_em_cam_wm_max_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "lpm_cache_msb_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "cdb_cache_lpm_cache_msb_em_bank_write_cntr_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "lpm_cache_msb_em_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "cdb_cache_lpm_cache_lsb_em_per_bank_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 162,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "lpm_cache_lsb_em_active_banks",
        0,
        1
      ],
      [
        "lpm_cache_lsb_em_hash_key",
        1,
        160
      ],
      [
        "lpm_cache_lsb_em_use_primitive_crc",
        161,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_lsb_em_per_em_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "lpm_cache_lsb_em_key_width",
        0,
        16
      ],
      [
        "lpm_cache_lsb_em_auto_bubble_req",
        16,
        1
      ],
      [
        "lpm_cache_lsb_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "cdb_cache_lpm_cache_lsb_em_cam_wm_max_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "lpm_cache_lsb_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "cdb_cache_lpm_cache_lsb_em_bank_write_cntr_reg": {
    "type": "register",
    "block": "cdb_cache",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "lpm_cache_lsb_em_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "cdb_cache_splitter_cache_age_mem": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 20,
    "desc": "age of entries that resides in one of the EM wrappers. Each mem line holds the following stat per 4 entries : valid(1),type(1,v6 or v4),couple_v6_entry_bin(1),age(2).  Bits [19:15],[14:10] of mem line is for bin1,bin0 in the msb_em, and bits [9:5],[4:0] for bin1,bin0 in the lsb_em.",
    "fields": [
      [
        "cache_age_em_field",
        0,
        20
      ]
    ]
  },
  "cdb_cache_splitter_cache_activity_mem": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 6,
    "desc": "holds the activity timesstamp(last time the entry was hit) per entry in the cache. There are  1k*2 + 1k*2+ 128 entries in the cache",
    "fields": [
      [
        "cache_active_field",
        0,
        6
      ]
    ]
  },
  "cdb_cache_splitter_cache_tcam_mem": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 125,
    "desc": "associated data of the TCAM",
    "fields": [
      [
        "cache_tcam_mem_field",
        0,
        125
      ]
    ]
  },
  "cdb_cache_splitter_cache_tcam": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 142,
    "desc": "TCAM",
    "fields": [
      [
        "splitter_cache_tcam_key",
        0,
        142
      ],
      [
        "splitter_cache_tcam_delete",
        142,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_age_mem": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 20,
    "desc": "age of entries that resides in one of the EM wrappers. Each mem line holds the following stat per 4 entries : valid(1),type(1,v6 or v4),couple_v6_entry_bin(1),age(2).  Bits [19:15],[14:10] of mem line is for bin1,bin0 in the msb_em, and bits [9:5],[4:0] for bin1,bin0 in the lsb_em.",
    "fields": [
      [
        "cache_age_em_field",
        0,
        20
      ]
    ]
  },
  "cdb_cache_lpm_cache_activity_mem": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 6,
    "desc": "holds the activity timesstamp(last time the entry was hit) per entry in the cache. There are  1k*2 + 1k*2+ 128 entries in the cache",
    "fields": [
      [
        "cache_active_ield",
        0,
        6
      ]
    ]
  },
  "cdb_cache_lpm_cache_tcam_mem": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 58,
    "desc": "associated data of the TCAM",
    "fields": [
      [
        "cache_tcam_mem_field",
        0,
        58
      ]
    ]
  },
  "cdb_cache_lpm_cache_tcam": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 142,
    "desc": "TCAM",
    "fields": [
      [
        "lpm_cache_tcam_key",
        0,
        142
      ],
      [
        "lpm_cache_tcam_delete",
        142,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_msb_em_verifier": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 342,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "splitter_cache_msb_em_verifier_data",
        0,
        342
      ]
    ]
  },
  "cdb_cache_splitter_cache_msb_em_valid": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 2,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "splitter_cache_msb_em_valid_data",
        0,
        2
      ]
    ]
  },
  "cdb_cache_splitter_cache_msb_em_cam": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 60,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "splitter_cache_msb_em_cam_payload",
        0,
        125
      ],
      [
        "splitter_cache_msb_em_cam_key",
        125,
        60
      ],
      [
        "splitter_cache_msb_em_cam_valid",
        185,
        1
      ]
    ]
  },
  "cdb_cache_splitter_cache_lsb_em_verifier": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 342,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "splitter_cache_lsb_em_verifier_data",
        0,
        342
      ]
    ]
  },
  "cdb_cache_splitter_cache_lsb_em_valid": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 2,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "splitter_cache_lsb_em_valid_data",
        0,
        2
      ]
    ]
  },
  "cdb_cache_splitter_cache_lsb_em_cam": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 92,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "splitter_cache_lsb_em_cam_payload",
        0,
        125
      ],
      [
        "splitter_cache_lsb_em_cam_key",
        125,
        92
      ],
      [
        "splitter_cache_lsb_em_cam_valid",
        217,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_msb_em_verifier": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 206,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "lpm_cache_msb_em_verifier_data",
        0,
        206
      ]
    ]
  },
  "cdb_cache_lpm_cache_msb_em_valid": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 2,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "lpm_cache_msb_em_valid_data",
        0,
        2
      ]
    ]
  },
  "cdb_cache_lpm_cache_msb_em_cam": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 72,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "lpm_cache_msb_em_cam_payload",
        0,
        58
      ],
      [
        "lpm_cache_msb_em_cam_key",
        58,
        72
      ],
      [
        "lpm_cache_msb_em_cam_valid",
        130,
        1
      ]
    ]
  },
  "cdb_cache_lpm_cache_lsb_em_verifier": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 222,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "lpm_cache_lsb_em_verifier_data",
        0,
        222
      ]
    ]
  },
  "cdb_cache_lpm_cache_lsb_em_valid": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 2,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "lpm_cache_lsb_em_valid_data",
        0,
        2
      ]
    ]
  },
  "cdb_cache_lpm_cache_lsb_em_cam": {
    "type": "memory",
    "block": "cdb_cache",
    "width": 80,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "lpm_cache_lsb_em_cam_payload",
        0,
        66
      ],
      [
        "lpm_cache_lsb_em_cam_key",
        66,
        80
      ],
      [
        "lpm_cache_lsb_em_cam_valid",
        146,
        1
      ]
    ]
  },
  "cdb_core_interrupt_register": {
    "type": "register",
    "block": "cdb_core",
    "width": 9,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "lpm0_shared_sram_1b_err_int_reg_summary",
        1,
        1
      ],
      [
        "lpm1_shared_sram_1b_err_int_reg_summary",
        2,
        1
      ],
      [
        "lpm0_shared_sram_2b_err_int_reg_summary",
        3,
        1
      ],
      [
        "lpm1_shared_sram_2b_err_int_reg_summary",
        4,
        1
      ],
      [
        "em0_shared_sram_err_int_reg_summary",
        5,
        1
      ],
      [
        "em1_shared_sram_err_int_reg_summary",
        6,
        1
      ],
      [
        "lpm0_no_tcam_hit_int_reg_summary",
        7,
        1
      ],
      [
        "lpm1_no_tcam_hit_int_reg_summary",
        8,
        1
      ]
    ]
  },
  "cdb_core_mem_protect_interrupt": {
    "type": "register",
    "block": "cdb_core",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "cdb_core_mem_protect_interrupt_test": {
    "type": "register",
    "block": "cdb_core",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "cdb_core_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_core",
    "width": 90,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "ring0_associated_data_mem0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "ring0_associated_data_mem1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "ring0_associated_data_mem2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "ring0_associated_data_mem3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "ring0_associated_data_mem4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "ring0_associated_data_mem5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "ring0_associated_data_mem6_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "ring0_associated_data_mem7_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "ring0_associated_data_mem8_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "ring0_associated_data_mem9_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ring0_associated_data_mem10_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ring0_associated_data_mem11_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "ring1_associated_data_mem0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "ring1_associated_data_mem1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "ring1_associated_data_mem2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "ring1_associated_data_mem3_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "ring1_associated_data_mem4_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "ring1_associated_data_mem5_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "ring1_associated_data_mem6_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "ring1_associated_data_mem7_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "ring1_associated_data_mem8_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "ring1_associated_data_mem9_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "ring1_associated_data_mem10_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "ring1_associated_data_mem11_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "trie_mem0_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "trie_mem1_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "extnd_trie_mem0_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "extnd_trie_mem1_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "subtrie_mem0_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "subtrie_mem1_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "extnd_subtrie_mem0_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "extnd_subtrie_mem1_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "srams_group00_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "srams_group01_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "srams_group02_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "srams_group03_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "srams_group04_ecc_1b_err_interrupt_mask",
        36,
        1
      ],
      [
        "srams_group05_ecc_1b_err_interrupt_mask",
        37,
        1
      ],
      [
        "srams_group06_ecc_1b_err_interrupt_mask",
        38,
        1
      ],
      [
        "srams_group07_ecc_1b_err_interrupt_mask",
        39,
        1
      ],
      [
        "srams_group08_ecc_1b_err_interrupt_mask",
        40,
        1
      ],
      [
        "srams_group09_ecc_1b_err_interrupt_mask",
        41,
        1
      ],
      [
        "srams_group010_ecc_1b_err_interrupt_mask",
        42,
        1
      ],
      [
        "srams_group011_ecc_1b_err_interrupt_mask",
        43,
        1
      ],
      [
        "srams_group012_ecc_1b_err_interrupt_mask",
        44,
        1
      ],
      [
        "srams_group013_ecc_1b_err_interrupt_mask",
        45,
        1
      ],
      [
        "srams_group014_ecc_1b_err_interrupt_mask",
        46,
        1
      ],
      [
        "srams_group015_ecc_1b_err_interrupt_mask",
        47,
        1
      ],
      [
        "srams_group016_ecc_1b_err_interrupt_mask",
        48,
        1
      ],
      [
        "srams_group017_ecc_1b_err_interrupt_mask",
        49,
        1
      ],
      [
        "srams_group018_ecc_1b_err_interrupt_mask",
        50,
        1
      ],
      [
        "srams_group019_ecc_1b_err_interrupt_mask",
        51,
        1
      ],
      [
        "srams_group020_ecc_1b_err_interrupt_mask",
        52,
        1
      ],
      [
        "srams_group021_ecc_1b_err_interrupt_mask",
        53,
        1
      ],
      [
        "srams_group022_ecc_1b_err_interrupt_mask",
        54,
        1
      ],
      [
        "srams_group023_ecc_1b_err_interrupt_mask",
        55,
        1
      ],
      [
        "srams_group024_ecc_1b_err_interrupt_mask",
        56,
        1
      ],
      [
        "srams_group025_ecc_1b_err_interrupt_mask",
        57,
        1
      ],
      [
        "srams_group026_ecc_1b_err_interrupt_mask",
        58,
        1
      ],
      [
        "srams_group027_ecc_1b_err_interrupt_mask",
        59,
        1
      ],
      [
        "srams_group10_ecc_1b_err_interrupt_mask",
        60,
        1
      ],
      [
        "srams_group11_ecc_1b_err_interrupt_mask",
        61,
        1
      ],
      [
        "srams_group12_ecc_1b_err_interrupt_mask",
        62,
        1
      ],
      [
        "srams_group13_ecc_1b_err_interrupt_mask",
        63,
        1
      ],
      [
        "srams_group14_ecc_1b_err_interrupt_mask",
        64,
        1
      ],
      [
        "srams_group15_ecc_1b_err_interrupt_mask",
        65,
        1
      ],
      [
        "srams_group16_ecc_1b_err_interrupt_mask",
        66,
        1
      ],
      [
        "srams_group17_ecc_1b_err_interrupt_mask",
        67,
        1
      ],
      [
        "srams_group18_ecc_1b_err_interrupt_mask",
        68,
        1
      ],
      [
        "srams_group19_ecc_1b_err_interrupt_mask",
        69,
        1
      ],
      [
        "srams_group110_ecc_1b_err_interrupt_mask",
        70,
        1
      ],
      [
        "srams_group111_ecc_1b_err_interrupt_mask",
        71,
        1
      ],
      [
        "srams_group112_ecc_1b_err_interrupt_mask",
        72,
        1
      ],
      [
        "srams_group113_ecc_1b_err_interrupt_mask",
        73,
        1
      ],
      [
        "srams_group114_ecc_1b_err_interrupt_mask",
        74,
        1
      ],
      [
        "srams_group115_ecc_1b_err_interrupt_mask",
        75,
        1
      ],
      [
        "srams_group116_ecc_1b_err_interrupt_mask",
        76,
        1
      ],
      [
        "srams_group117_ecc_1b_err_interrupt_mask",
        77,
        1
      ],
      [
        "srams_group118_ecc_1b_err_interrupt_mask",
        78,
        1
      ],
      [
        "srams_group119_ecc_1b_err_interrupt_mask",
        79,
        1
      ],
      [
        "srams_group120_ecc_1b_err_interrupt_mask",
        80,
        1
      ],
      [
        "srams_group121_ecc_1b_err_interrupt_mask",
        81,
        1
      ],
      [
        "srams_group122_ecc_1b_err_interrupt_mask",
        82,
        1
      ],
      [
        "srams_group123_ecc_1b_err_interrupt_mask",
        83,
        1
      ],
      [
        "srams_group124_ecc_1b_err_interrupt_mask",
        84,
        1
      ],
      [
        "srams_group125_ecc_1b_err_interrupt_mask",
        85,
        1
      ],
      [
        "srams_group126_ecc_1b_err_interrupt_mask",
        86,
        1
      ],
      [
        "srams_group127_ecc_1b_err_interrupt_mask",
        87,
        1
      ],
      [
        "em0_hit_ecc_1b_err_interrupt_mask",
        88,
        1
      ],
      [
        "em1_hit_ecc_1b_err_interrupt_mask",
        89,
        1
      ]
    ]
  },
  "cdb_core_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_core",
    "width": 90,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "ring0_associated_data_mem0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "ring0_associated_data_mem1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "ring0_associated_data_mem2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "ring0_associated_data_mem3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "ring0_associated_data_mem4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "ring0_associated_data_mem5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "ring0_associated_data_mem6_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "ring0_associated_data_mem7_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "ring0_associated_data_mem8_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "ring0_associated_data_mem9_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ring0_associated_data_mem10_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ring0_associated_data_mem11_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "ring1_associated_data_mem0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "ring1_associated_data_mem1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "ring1_associated_data_mem2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "ring1_associated_data_mem3_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "ring1_associated_data_mem4_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "ring1_associated_data_mem5_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "ring1_associated_data_mem6_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "ring1_associated_data_mem7_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "ring1_associated_data_mem8_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "ring1_associated_data_mem9_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "ring1_associated_data_mem10_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "ring1_associated_data_mem11_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "trie_mem0_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "trie_mem1_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "extnd_trie_mem0_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "extnd_trie_mem1_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "subtrie_mem0_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "subtrie_mem1_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "extnd_subtrie_mem0_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "extnd_subtrie_mem1_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "srams_group00_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "srams_group01_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "srams_group02_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "srams_group03_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "srams_group04_ecc_2b_err_interrupt_mask",
        36,
        1
      ],
      [
        "srams_group05_ecc_2b_err_interrupt_mask",
        37,
        1
      ],
      [
        "srams_group06_ecc_2b_err_interrupt_mask",
        38,
        1
      ],
      [
        "srams_group07_ecc_2b_err_interrupt_mask",
        39,
        1
      ],
      [
        "srams_group08_ecc_2b_err_interrupt_mask",
        40,
        1
      ],
      [
        "srams_group09_ecc_2b_err_interrupt_mask",
        41,
        1
      ],
      [
        "srams_group010_ecc_2b_err_interrupt_mask",
        42,
        1
      ],
      [
        "srams_group011_ecc_2b_err_interrupt_mask",
        43,
        1
      ],
      [
        "srams_group012_ecc_2b_err_interrupt_mask",
        44,
        1
      ],
      [
        "srams_group013_ecc_2b_err_interrupt_mask",
        45,
        1
      ],
      [
        "srams_group014_ecc_2b_err_interrupt_mask",
        46,
        1
      ],
      [
        "srams_group015_ecc_2b_err_interrupt_mask",
        47,
        1
      ],
      [
        "srams_group016_ecc_2b_err_interrupt_mask",
        48,
        1
      ],
      [
        "srams_group017_ecc_2b_err_interrupt_mask",
        49,
        1
      ],
      [
        "srams_group018_ecc_2b_err_interrupt_mask",
        50,
        1
      ],
      [
        "srams_group019_ecc_2b_err_interrupt_mask",
        51,
        1
      ],
      [
        "srams_group020_ecc_2b_err_interrupt_mask",
        52,
        1
      ],
      [
        "srams_group021_ecc_2b_err_interrupt_mask",
        53,
        1
      ],
      [
        "srams_group022_ecc_2b_err_interrupt_mask",
        54,
        1
      ],
      [
        "srams_group023_ecc_2b_err_interrupt_mask",
        55,
        1
      ],
      [
        "srams_group024_ecc_2b_err_interrupt_mask",
        56,
        1
      ],
      [
        "srams_group025_ecc_2b_err_interrupt_mask",
        57,
        1
      ],
      [
        "srams_group026_ecc_2b_err_interrupt_mask",
        58,
        1
      ],
      [
        "srams_group027_ecc_2b_err_interrupt_mask",
        59,
        1
      ],
      [
        "srams_group10_ecc_2b_err_interrupt_mask",
        60,
        1
      ],
      [
        "srams_group11_ecc_2b_err_interrupt_mask",
        61,
        1
      ],
      [
        "srams_group12_ecc_2b_err_interrupt_mask",
        62,
        1
      ],
      [
        "srams_group13_ecc_2b_err_interrupt_mask",
        63,
        1
      ],
      [
        "srams_group14_ecc_2b_err_interrupt_mask",
        64,
        1
      ],
      [
        "srams_group15_ecc_2b_err_interrupt_mask",
        65,
        1
      ],
      [
        "srams_group16_ecc_2b_err_interrupt_mask",
        66,
        1
      ],
      [
        "srams_group17_ecc_2b_err_interrupt_mask",
        67,
        1
      ],
      [
        "srams_group18_ecc_2b_err_interrupt_mask",
        68,
        1
      ],
      [
        "srams_group19_ecc_2b_err_interrupt_mask",
        69,
        1
      ],
      [
        "srams_group110_ecc_2b_err_interrupt_mask",
        70,
        1
      ],
      [
        "srams_group111_ecc_2b_err_interrupt_mask",
        71,
        1
      ],
      [
        "srams_group112_ecc_2b_err_interrupt_mask",
        72,
        1
      ],
      [
        "srams_group113_ecc_2b_err_interrupt_mask",
        73,
        1
      ],
      [
        "srams_group114_ecc_2b_err_interrupt_mask",
        74,
        1
      ],
      [
        "srams_group115_ecc_2b_err_interrupt_mask",
        75,
        1
      ],
      [
        "srams_group116_ecc_2b_err_interrupt_mask",
        76,
        1
      ],
      [
        "srams_group117_ecc_2b_err_interrupt_mask",
        77,
        1
      ],
      [
        "srams_group118_ecc_2b_err_interrupt_mask",
        78,
        1
      ],
      [
        "srams_group119_ecc_2b_err_interrupt_mask",
        79,
        1
      ],
      [
        "srams_group120_ecc_2b_err_interrupt_mask",
        80,
        1
      ],
      [
        "srams_group121_ecc_2b_err_interrupt_mask",
        81,
        1
      ],
      [
        "srams_group122_ecc_2b_err_interrupt_mask",
        82,
        1
      ],
      [
        "srams_group123_ecc_2b_err_interrupt_mask",
        83,
        1
      ],
      [
        "srams_group124_ecc_2b_err_interrupt_mask",
        84,
        1
      ],
      [
        "srams_group125_ecc_2b_err_interrupt_mask",
        85,
        1
      ],
      [
        "srams_group126_ecc_2b_err_interrupt_mask",
        86,
        1
      ],
      [
        "srams_group127_ecc_2b_err_interrupt_mask",
        87,
        1
      ],
      [
        "em0_hit_ecc_2b_err_interrupt_mask",
        88,
        1
      ],
      [
        "em1_hit_ecc_2b_err_interrupt_mask",
        89,
        1
      ]
    ]
  },
  "cdb_core_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_core",
    "width": 32,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "ring0_acl_tcam0_parity_err_interrupt_mask",
        0,
        1
      ],
      [
        "ring0_acl_tcam1_parity_err_interrupt_mask",
        1,
        1
      ],
      [
        "ring0_acl_tcam2_parity_err_interrupt_mask",
        2,
        1
      ],
      [
        "ring0_acl_tcam3_parity_err_interrupt_mask",
        3,
        1
      ],
      [
        "ring0_acl_tcam4_parity_err_interrupt_mask",
        4,
        1
      ],
      [
        "ring0_acl_tcam5_parity_err_interrupt_mask",
        5,
        1
      ],
      [
        "ring0_acl_tcam6_parity_err_interrupt_mask",
        6,
        1
      ],
      [
        "ring0_acl_tcam7_parity_err_interrupt_mask",
        7,
        1
      ],
      [
        "ring1_acl_tcam0_parity_err_interrupt_mask",
        8,
        1
      ],
      [
        "ring1_acl_tcam1_parity_err_interrupt_mask",
        9,
        1
      ],
      [
        "ring1_acl_tcam2_parity_err_interrupt_mask",
        10,
        1
      ],
      [
        "ring1_acl_tcam3_parity_err_interrupt_mask",
        11,
        1
      ],
      [
        "ring1_acl_tcam4_parity_err_interrupt_mask",
        12,
        1
      ],
      [
        "ring1_acl_tcam5_parity_err_interrupt_mask",
        13,
        1
      ],
      [
        "ring1_acl_tcam6_parity_err_interrupt_mask",
        14,
        1
      ],
      [
        "ring1_acl_tcam7_parity_err_interrupt_mask",
        15,
        1
      ],
      [
        "lpm0_tcam0_parity_err_interrupt_mask",
        16,
        1
      ],
      [
        "lpm0_tcam1_parity_err_interrupt_mask",
        17,
        1
      ],
      [
        "lpm0_tcam2_parity_err_interrupt_mask",
        18,
        1
      ],
      [
        "lpm0_tcam3_parity_err_interrupt_mask",
        19,
        1
      ],
      [
        "lpm0_tcam4_parity_err_interrupt_mask",
        20,
        1
      ],
      [
        "lpm0_tcam5_parity_err_interrupt_mask",
        21,
        1
      ],
      [
        "lpm0_tcam6_parity_err_interrupt_mask",
        22,
        1
      ],
      [
        "lpm0_tcam7_parity_err_interrupt_mask",
        23,
        1
      ],
      [
        "lpm1_tcam0_parity_err_interrupt_mask",
        24,
        1
      ],
      [
        "lpm1_tcam1_parity_err_interrupt_mask",
        25,
        1
      ],
      [
        "lpm1_tcam2_parity_err_interrupt_mask",
        26,
        1
      ],
      [
        "lpm1_tcam3_parity_err_interrupt_mask",
        27,
        1
      ],
      [
        "lpm1_tcam4_parity_err_interrupt_mask",
        28,
        1
      ],
      [
        "lpm1_tcam5_parity_err_interrupt_mask",
        29,
        1
      ],
      [
        "lpm1_tcam6_parity_err_interrupt_mask",
        30,
        1
      ],
      [
        "lpm1_tcam7_parity_err_interrupt_mask",
        31,
        1
      ]
    ]
  },
  "cdb_core_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "cdb_core",
    "width": 90,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "ring0_associated_data_mem0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "ring0_associated_data_mem1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "ring0_associated_data_mem2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "ring0_associated_data_mem3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "ring0_associated_data_mem4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "ring0_associated_data_mem5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "ring0_associated_data_mem6_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "ring0_associated_data_mem7_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "ring0_associated_data_mem8_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "ring0_associated_data_mem9_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "ring0_associated_data_mem10_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "ring0_associated_data_mem11_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "ring1_associated_data_mem0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "ring1_associated_data_mem1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "ring1_associated_data_mem2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "ring1_associated_data_mem3_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "ring1_associated_data_mem4_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "ring1_associated_data_mem5_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "ring1_associated_data_mem6_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "ring1_associated_data_mem7_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "ring1_associated_data_mem8_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "ring1_associated_data_mem9_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "ring1_associated_data_mem10_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "ring1_associated_data_mem11_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "trie_mem0_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "trie_mem1_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "extnd_trie_mem0_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "extnd_trie_mem1_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "subtrie_mem0_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "subtrie_mem1_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "extnd_subtrie_mem0_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "extnd_subtrie_mem1_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "srams_group00_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "srams_group01_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "srams_group02_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "srams_group03_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "srams_group04_ecc_1b_err_initiate",
        36,
        1
      ],
      [
        "srams_group05_ecc_1b_err_initiate",
        37,
        1
      ],
      [
        "srams_group06_ecc_1b_err_initiate",
        38,
        1
      ],
      [
        "srams_group07_ecc_1b_err_initiate",
        39,
        1
      ],
      [
        "srams_group08_ecc_1b_err_initiate",
        40,
        1
      ],
      [
        "srams_group09_ecc_1b_err_initiate",
        41,
        1
      ],
      [
        "srams_group010_ecc_1b_err_initiate",
        42,
        1
      ],
      [
        "srams_group011_ecc_1b_err_initiate",
        43,
        1
      ],
      [
        "srams_group012_ecc_1b_err_initiate",
        44,
        1
      ],
      [
        "srams_group013_ecc_1b_err_initiate",
        45,
        1
      ],
      [
        "srams_group014_ecc_1b_err_initiate",
        46,
        1
      ],
      [
        "srams_group015_ecc_1b_err_initiate",
        47,
        1
      ],
      [
        "srams_group016_ecc_1b_err_initiate",
        48,
        1
      ],
      [
        "srams_group017_ecc_1b_err_initiate",
        49,
        1
      ],
      [
        "srams_group018_ecc_1b_err_initiate",
        50,
        1
      ],
      [
        "srams_group019_ecc_1b_err_initiate",
        51,
        1
      ],
      [
        "srams_group020_ecc_1b_err_initiate",
        52,
        1
      ],
      [
        "srams_group021_ecc_1b_err_initiate",
        53,
        1
      ],
      [
        "srams_group022_ecc_1b_err_initiate",
        54,
        1
      ],
      [
        "srams_group023_ecc_1b_err_initiate",
        55,
        1
      ],
      [
        "srams_group024_ecc_1b_err_initiate",
        56,
        1
      ],
      [
        "srams_group025_ecc_1b_err_initiate",
        57,
        1
      ],
      [
        "srams_group026_ecc_1b_err_initiate",
        58,
        1
      ],
      [
        "srams_group027_ecc_1b_err_initiate",
        59,
        1
      ],
      [
        "srams_group10_ecc_1b_err_initiate",
        60,
        1
      ],
      [
        "srams_group11_ecc_1b_err_initiate",
        61,
        1
      ],
      [
        "srams_group12_ecc_1b_err_initiate",
        62,
        1
      ],
      [
        "srams_group13_ecc_1b_err_initiate",
        63,
        1
      ],
      [
        "srams_group14_ecc_1b_err_initiate",
        64,
        1
      ],
      [
        "srams_group15_ecc_1b_err_initiate",
        65,
        1
      ],
      [
        "srams_group16_ecc_1b_err_initiate",
        66,
        1
      ],
      [
        "srams_group17_ecc_1b_err_initiate",
        67,
        1
      ],
      [
        "srams_group18_ecc_1b_err_initiate",
        68,
        1
      ],
      [
        "srams_group19_ecc_1b_err_initiate",
        69,
        1
      ],
      [
        "srams_group110_ecc_1b_err_initiate",
        70,
        1
      ],
      [
        "srams_group111_ecc_1b_err_initiate",
        71,
        1
      ],
      [
        "srams_group112_ecc_1b_err_initiate",
        72,
        1
      ],
      [
        "srams_group113_ecc_1b_err_initiate",
        73,
        1
      ],
      [
        "srams_group114_ecc_1b_err_initiate",
        74,
        1
      ],
      [
        "srams_group115_ecc_1b_err_initiate",
        75,
        1
      ],
      [
        "srams_group116_ecc_1b_err_initiate",
        76,
        1
      ],
      [
        "srams_group117_ecc_1b_err_initiate",
        77,
        1
      ],
      [
        "srams_group118_ecc_1b_err_initiate",
        78,
        1
      ],
      [
        "srams_group119_ecc_1b_err_initiate",
        79,
        1
      ],
      [
        "srams_group120_ecc_1b_err_initiate",
        80,
        1
      ],
      [
        "srams_group121_ecc_1b_err_initiate",
        81,
        1
      ],
      [
        "srams_group122_ecc_1b_err_initiate",
        82,
        1
      ],
      [
        "srams_group123_ecc_1b_err_initiate",
        83,
        1
      ],
      [
        "srams_group124_ecc_1b_err_initiate",
        84,
        1
      ],
      [
        "srams_group125_ecc_1b_err_initiate",
        85,
        1
      ],
      [
        "srams_group126_ecc_1b_err_initiate",
        86,
        1
      ],
      [
        "srams_group127_ecc_1b_err_initiate",
        87,
        1
      ],
      [
        "em0_hit_ecc_1b_err_initiate",
        88,
        1
      ],
      [
        "em1_hit_ecc_1b_err_initiate",
        89,
        1
      ]
    ]
  },
  "cdb_core_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "cdb_core",
    "width": 90,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "ring0_associated_data_mem0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "ring0_associated_data_mem1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "ring0_associated_data_mem2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "ring0_associated_data_mem3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "ring0_associated_data_mem4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "ring0_associated_data_mem5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "ring0_associated_data_mem6_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "ring0_associated_data_mem7_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "ring0_associated_data_mem8_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "ring0_associated_data_mem9_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "ring0_associated_data_mem10_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "ring0_associated_data_mem11_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "ring1_associated_data_mem0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "ring1_associated_data_mem1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "ring1_associated_data_mem2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "ring1_associated_data_mem3_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "ring1_associated_data_mem4_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "ring1_associated_data_mem5_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "ring1_associated_data_mem6_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "ring1_associated_data_mem7_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "ring1_associated_data_mem8_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "ring1_associated_data_mem9_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "ring1_associated_data_mem10_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "ring1_associated_data_mem11_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "trie_mem0_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "trie_mem1_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "extnd_trie_mem0_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "extnd_trie_mem1_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "subtrie_mem0_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "subtrie_mem1_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "extnd_subtrie_mem0_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "extnd_subtrie_mem1_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "srams_group00_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "srams_group01_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "srams_group02_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "srams_group03_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "srams_group04_ecc_2b_err_initiate",
        36,
        1
      ],
      [
        "srams_group05_ecc_2b_err_initiate",
        37,
        1
      ],
      [
        "srams_group06_ecc_2b_err_initiate",
        38,
        1
      ],
      [
        "srams_group07_ecc_2b_err_initiate",
        39,
        1
      ],
      [
        "srams_group08_ecc_2b_err_initiate",
        40,
        1
      ],
      [
        "srams_group09_ecc_2b_err_initiate",
        41,
        1
      ],
      [
        "srams_group010_ecc_2b_err_initiate",
        42,
        1
      ],
      [
        "srams_group011_ecc_2b_err_initiate",
        43,
        1
      ],
      [
        "srams_group012_ecc_2b_err_initiate",
        44,
        1
      ],
      [
        "srams_group013_ecc_2b_err_initiate",
        45,
        1
      ],
      [
        "srams_group014_ecc_2b_err_initiate",
        46,
        1
      ],
      [
        "srams_group015_ecc_2b_err_initiate",
        47,
        1
      ],
      [
        "srams_group016_ecc_2b_err_initiate",
        48,
        1
      ],
      [
        "srams_group017_ecc_2b_err_initiate",
        49,
        1
      ],
      [
        "srams_group018_ecc_2b_err_initiate",
        50,
        1
      ],
      [
        "srams_group019_ecc_2b_err_initiate",
        51,
        1
      ],
      [
        "srams_group020_ecc_2b_err_initiate",
        52,
        1
      ],
      [
        "srams_group021_ecc_2b_err_initiate",
        53,
        1
      ],
      [
        "srams_group022_ecc_2b_err_initiate",
        54,
        1
      ],
      [
        "srams_group023_ecc_2b_err_initiate",
        55,
        1
      ],
      [
        "srams_group024_ecc_2b_err_initiate",
        56,
        1
      ],
      [
        "srams_group025_ecc_2b_err_initiate",
        57,
        1
      ],
      [
        "srams_group026_ecc_2b_err_initiate",
        58,
        1
      ],
      [
        "srams_group027_ecc_2b_err_initiate",
        59,
        1
      ],
      [
        "srams_group10_ecc_2b_err_initiate",
        60,
        1
      ],
      [
        "srams_group11_ecc_2b_err_initiate",
        61,
        1
      ],
      [
        "srams_group12_ecc_2b_err_initiate",
        62,
        1
      ],
      [
        "srams_group13_ecc_2b_err_initiate",
        63,
        1
      ],
      [
        "srams_group14_ecc_2b_err_initiate",
        64,
        1
      ],
      [
        "srams_group15_ecc_2b_err_initiate",
        65,
        1
      ],
      [
        "srams_group16_ecc_2b_err_initiate",
        66,
        1
      ],
      [
        "srams_group17_ecc_2b_err_initiate",
        67,
        1
      ],
      [
        "srams_group18_ecc_2b_err_initiate",
        68,
        1
      ],
      [
        "srams_group19_ecc_2b_err_initiate",
        69,
        1
      ],
      [
        "srams_group110_ecc_2b_err_initiate",
        70,
        1
      ],
      [
        "srams_group111_ecc_2b_err_initiate",
        71,
        1
      ],
      [
        "srams_group112_ecc_2b_err_initiate",
        72,
        1
      ],
      [
        "srams_group113_ecc_2b_err_initiate",
        73,
        1
      ],
      [
        "srams_group114_ecc_2b_err_initiate",
        74,
        1
      ],
      [
        "srams_group115_ecc_2b_err_initiate",
        75,
        1
      ],
      [
        "srams_group116_ecc_2b_err_initiate",
        76,
        1
      ],
      [
        "srams_group117_ecc_2b_err_initiate",
        77,
        1
      ],
      [
        "srams_group118_ecc_2b_err_initiate",
        78,
        1
      ],
      [
        "srams_group119_ecc_2b_err_initiate",
        79,
        1
      ],
      [
        "srams_group120_ecc_2b_err_initiate",
        80,
        1
      ],
      [
        "srams_group121_ecc_2b_err_initiate",
        81,
        1
      ],
      [
        "srams_group122_ecc_2b_err_initiate",
        82,
        1
      ],
      [
        "srams_group123_ecc_2b_err_initiate",
        83,
        1
      ],
      [
        "srams_group124_ecc_2b_err_initiate",
        84,
        1
      ],
      [
        "srams_group125_ecc_2b_err_initiate",
        85,
        1
      ],
      [
        "srams_group126_ecc_2b_err_initiate",
        86,
        1
      ],
      [
        "srams_group127_ecc_2b_err_initiate",
        87,
        1
      ],
      [
        "em0_hit_ecc_2b_err_initiate",
        88,
        1
      ],
      [
        "em1_hit_ecc_2b_err_initiate",
        89,
        1
      ]
    ]
  },
  "cdb_core_parity_err_initiate_register": {
    "type": "register",
    "block": "cdb_core",
    "width": 32,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "ring0_acl_tcam0_parity_err_initiate",
        0,
        1
      ],
      [
        "ring0_acl_tcam1_parity_err_initiate",
        1,
        1
      ],
      [
        "ring0_acl_tcam2_parity_err_initiate",
        2,
        1
      ],
      [
        "ring0_acl_tcam3_parity_err_initiate",
        3,
        1
      ],
      [
        "ring0_acl_tcam4_parity_err_initiate",
        4,
        1
      ],
      [
        "ring0_acl_tcam5_parity_err_initiate",
        5,
        1
      ],
      [
        "ring0_acl_tcam6_parity_err_initiate",
        6,
        1
      ],
      [
        "ring0_acl_tcam7_parity_err_initiate",
        7,
        1
      ],
      [
        "ring1_acl_tcam0_parity_err_initiate",
        8,
        1
      ],
      [
        "ring1_acl_tcam1_parity_err_initiate",
        9,
        1
      ],
      [
        "ring1_acl_tcam2_parity_err_initiate",
        10,
        1
      ],
      [
        "ring1_acl_tcam3_parity_err_initiate",
        11,
        1
      ],
      [
        "ring1_acl_tcam4_parity_err_initiate",
        12,
        1
      ],
      [
        "ring1_acl_tcam5_parity_err_initiate",
        13,
        1
      ],
      [
        "ring1_acl_tcam6_parity_err_initiate",
        14,
        1
      ],
      [
        "ring1_acl_tcam7_parity_err_initiate",
        15,
        1
      ],
      [
        "lpm0_tcam0_parity_err_initiate",
        16,
        1
      ],
      [
        "lpm0_tcam1_parity_err_initiate",
        17,
        1
      ],
      [
        "lpm0_tcam2_parity_err_initiate",
        18,
        1
      ],
      [
        "lpm0_tcam3_parity_err_initiate",
        19,
        1
      ],
      [
        "lpm0_tcam4_parity_err_initiate",
        20,
        1
      ],
      [
        "lpm0_tcam5_parity_err_initiate",
        21,
        1
      ],
      [
        "lpm0_tcam6_parity_err_initiate",
        22,
        1
      ],
      [
        "lpm0_tcam7_parity_err_initiate",
        23,
        1
      ],
      [
        "lpm1_tcam0_parity_err_initiate",
        24,
        1
      ],
      [
        "lpm1_tcam1_parity_err_initiate",
        25,
        1
      ],
      [
        "lpm1_tcam2_parity_err_initiate",
        26,
        1
      ],
      [
        "lpm1_tcam3_parity_err_initiate",
        27,
        1
      ],
      [
        "lpm1_tcam4_parity_err_initiate",
        28,
        1
      ],
      [
        "lpm1_tcam5_parity_err_initiate",
        29,
        1
      ],
      [
        "lpm1_tcam6_parity_err_initiate",
        30,
        1
      ],
      [
        "lpm1_tcam7_parity_err_initiate",
        31,
        1
      ]
    ]
  },
  "cdb_core_mem_protect_err_status": {
    "type": "register",
    "block": "cdb_core",
    "width": 122,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "ring0_associated_data_mem0_err_int",
        0,
        1
      ],
      [
        "ring0_associated_data_mem1_err_int",
        1,
        1
      ],
      [
        "ring0_associated_data_mem2_err_int",
        2,
        1
      ],
      [
        "ring0_associated_data_mem3_err_int",
        3,
        1
      ],
      [
        "ring0_associated_data_mem4_err_int",
        4,
        1
      ],
      [
        "ring0_associated_data_mem5_err_int",
        5,
        1
      ],
      [
        "ring0_associated_data_mem6_err_int",
        6,
        1
      ],
      [
        "ring0_associated_data_mem7_err_int",
        7,
        1
      ],
      [
        "ring0_associated_data_mem8_err_int",
        8,
        1
      ],
      [
        "ring0_associated_data_mem9_err_int",
        9,
        1
      ],
      [
        "ring0_associated_data_mem10_err_int",
        10,
        1
      ],
      [
        "ring0_associated_data_mem11_err_int",
        11,
        1
      ],
      [
        "ring1_associated_data_mem0_err_int",
        12,
        1
      ],
      [
        "ring1_associated_data_mem1_err_int",
        13,
        1
      ],
      [
        "ring1_associated_data_mem2_err_int",
        14,
        1
      ],
      [
        "ring1_associated_data_mem3_err_int",
        15,
        1
      ],
      [
        "ring1_associated_data_mem4_err_int",
        16,
        1
      ],
      [
        "ring1_associated_data_mem5_err_int",
        17,
        1
      ],
      [
        "ring1_associated_data_mem6_err_int",
        18,
        1
      ],
      [
        "ring1_associated_data_mem7_err_int",
        19,
        1
      ],
      [
        "ring1_associated_data_mem8_err_int",
        20,
        1
      ],
      [
        "ring1_associated_data_mem9_err_int",
        21,
        1
      ],
      [
        "ring1_associated_data_mem10_err_int",
        22,
        1
      ],
      [
        "ring1_associated_data_mem11_err_int",
        23,
        1
      ],
      [
        "trie_mem0_err_int",
        24,
        1
      ],
      [
        "trie_mem1_err_int",
        25,
        1
      ],
      [
        "extnd_trie_mem0_err_int",
        26,
        1
      ],
      [
        "extnd_trie_mem1_err_int",
        27,
        1
      ],
      [
        "subtrie_mem0_err_int",
        28,
        1
      ],
      [
        "subtrie_mem1_err_int",
        29,
        1
      ],
      [
        "extnd_subtrie_mem0_err_int",
        30,
        1
      ],
      [
        "extnd_subtrie_mem1_err_int",
        31,
        1
      ],
      [
        "srams_group00_err_int",
        32,
        1
      ],
      [
        "srams_group01_err_int",
        33,
        1
      ],
      [
        "srams_group02_err_int",
        34,
        1
      ],
      [
        "srams_group03_err_int",
        35,
        1
      ],
      [
        "srams_group04_err_int",
        36,
        1
      ],
      [
        "srams_group05_err_int",
        37,
        1
      ],
      [
        "srams_group06_err_int",
        38,
        1
      ],
      [
        "srams_group07_err_int",
        39,
        1
      ],
      [
        "srams_group08_err_int",
        40,
        1
      ],
      [
        "srams_group09_err_int",
        41,
        1
      ],
      [
        "srams_group010_err_int",
        42,
        1
      ],
      [
        "srams_group011_err_int",
        43,
        1
      ],
      [
        "srams_group012_err_int",
        44,
        1
      ],
      [
        "srams_group013_err_int",
        45,
        1
      ],
      [
        "srams_group014_err_int",
        46,
        1
      ],
      [
        "srams_group015_err_int",
        47,
        1
      ],
      [
        "srams_group016_err_int",
        48,
        1
      ],
      [
        "srams_group017_err_int",
        49,
        1
      ],
      [
        "srams_group018_err_int",
        50,
        1
      ],
      [
        "srams_group019_err_int",
        51,
        1
      ],
      [
        "srams_group020_err_int",
        52,
        1
      ],
      [
        "srams_group021_err_int",
        53,
        1
      ],
      [
        "srams_group022_err_int",
        54,
        1
      ],
      [
        "srams_group023_err_int",
        55,
        1
      ],
      [
        "srams_group024_err_int",
        56,
        1
      ],
      [
        "srams_group025_err_int",
        57,
        1
      ],
      [
        "srams_group026_err_int",
        58,
        1
      ],
      [
        "srams_group027_err_int",
        59,
        1
      ],
      [
        "srams_group10_err_int",
        60,
        1
      ],
      [
        "srams_group11_err_int",
        61,
        1
      ],
      [
        "srams_group12_err_int",
        62,
        1
      ],
      [
        "srams_group13_err_int",
        63,
        1
      ],
      [
        "srams_group14_err_int",
        64,
        1
      ],
      [
        "srams_group15_err_int",
        65,
        1
      ],
      [
        "srams_group16_err_int",
        66,
        1
      ],
      [
        "srams_group17_err_int",
        67,
        1
      ],
      [
        "srams_group18_err_int",
        68,
        1
      ],
      [
        "srams_group19_err_int",
        69,
        1
      ],
      [
        "srams_group110_err_int",
        70,
        1
      ],
      [
        "srams_group111_err_int",
        71,
        1
      ],
      [
        "srams_group112_err_int",
        72,
        1
      ],
      [
        "srams_group113_err_int",
        73,
        1
      ],
      [
        "srams_group114_err_int",
        74,
        1
      ],
      [
        "srams_group115_err_int",
        75,
        1
      ],
      [
        "srams_group116_err_int",
        76,
        1
      ],
      [
        "srams_group117_err_int",
        77,
        1
      ],
      [
        "srams_group118_err_int",
        78,
        1
      ],
      [
        "srams_group119_err_int",
        79,
        1
      ],
      [
        "srams_group120_err_int",
        80,
        1
      ],
      [
        "srams_group121_err_int",
        81,
        1
      ],
      [
        "srams_group122_err_int",
        82,
        1
      ],
      [
        "srams_group123_err_int",
        83,
        1
      ],
      [
        "srams_group124_err_int",
        84,
        1
      ],
      [
        "srams_group125_err_int",
        85,
        1
      ],
      [
        "srams_group126_err_int",
        86,
        1
      ],
      [
        "srams_group127_err_int",
        87,
        1
      ],
      [
        "ring0_acl_tcam0_err_int",
        88,
        1
      ],
      [
        "ring0_acl_tcam1_err_int",
        89,
        1
      ],
      [
        "ring0_acl_tcam2_err_int",
        90,
        1
      ],
      [
        "ring0_acl_tcam3_err_int",
        91,
        1
      ],
      [
        "ring0_acl_tcam4_err_int",
        92,
        1
      ],
      [
        "ring0_acl_tcam5_err_int",
        93,
        1
      ],
      [
        "ring0_acl_tcam6_err_int",
        94,
        1
      ],
      [
        "ring0_acl_tcam7_err_int",
        95,
        1
      ],
      [
        "ring1_acl_tcam0_err_int",
        96,
        1
      ],
      [
        "ring1_acl_tcam1_err_int",
        97,
        1
      ],
      [
        "ring1_acl_tcam2_err_int",
        98,
        1
      ],
      [
        "ring1_acl_tcam3_err_int",
        99,
        1
      ],
      [
        "ring1_acl_tcam4_err_int",
        100,
        1
      ],
      [
        "ring1_acl_tcam5_err_int",
        101,
        1
      ],
      [
        "ring1_acl_tcam6_err_int",
        102,
        1
      ],
      [
        "ring1_acl_tcam7_err_int",
        103,
        1
      ],
      [
        "lpm0_tcam0_err_int",
        104,
        1
      ],
      [
        "lpm0_tcam1_err_int",
        105,
        1
      ],
      [
        "lpm0_tcam2_err_int",
        106,
        1
      ],
      [
        "lpm0_tcam3_err_int",
        107,
        1
      ],
      [
        "lpm0_tcam4_err_int",
        108,
        1
      ],
      [
        "lpm0_tcam5_err_int",
        109,
        1
      ],
      [
        "lpm0_tcam6_err_int",
        110,
        1
      ],
      [
        "lpm0_tcam7_err_int",
        111,
        1
      ],
      [
        "lpm1_tcam0_err_int",
        112,
        1
      ],
      [
        "lpm1_tcam1_err_int",
        113,
        1
      ],
      [
        "lpm1_tcam2_err_int",
        114,
        1
      ],
      [
        "lpm1_tcam3_err_int",
        115,
        1
      ],
      [
        "lpm1_tcam4_err_int",
        116,
        1
      ],
      [
        "lpm1_tcam5_err_int",
        117,
        1
      ],
      [
        "lpm1_tcam6_err_int",
        118,
        1
      ],
      [
        "lpm1_tcam7_err_int",
        119,
        1
      ],
      [
        "em0_hit_err_int",
        120,
        1
      ],
      [
        "em1_hit_err_int",
        121,
        1
      ]
    ]
  },
  "cdb_core_selected_ser_error_info": {
    "type": "register",
    "block": "cdb_core",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "cdb_core_ser_error_debug_configuration": {
    "type": "register",
    "block": "cdb_core",
    "width": 8,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        7
      ],
      [
        "reset_memory_errors",
        7,
        1
      ]
    ]
  },
  "cdb_core_ecc_1b_err_debug": {
    "type": "register",
    "block": "cdb_core",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_core_ecc_2b_err_debug": {
    "type": "register",
    "block": "cdb_core",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_core_parity_err_debug": {
    "type": "register",
    "block": "cdb_core",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_core_tcam_bist_control": {
    "type": "register",
    "block": "cdb_core",
    "width": 4,
    "desc": "TCAM BIST control",
    "fields": [
      [
        "tcam_strw",
        0,
        2
      ],
      [
        "tcam_bist_rst",
        2,
        1
      ],
      [
        "tcam_bist_run",
        3,
        1
      ]
    ]
  },
  "cdb_core_tcam_bist_status": {
    "type": "register",
    "block": "cdb_core",
    "width": 96,
    "desc": "TCAM BIST pass fail status",
    "fields": [
      [
        "tcam_bist_done_pass_out",
        0,
        48
      ],
      [
        "tcam_bist_done_fail_out",
        48,
        48
      ]
    ]
  },
  "cdb_core_tcam_scan_period_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "cdb_core_counter_timer": {
    "type": "register",
    "block": "cdb_core",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "cdb_core_counter_timer_trigger_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "cdb_core_memory_access_timeout": {
    "type": "register",
    "block": "cdb_core",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "cdb_core_broadcast_config_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "cdb_core_memory_prot_bypass": {
    "type": "register",
    "block": "cdb_core",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "cdb_core_soft_reset_configuration": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "cdb_core_mbist_configuration": {
    "type": "register",
    "block": "cdb_core",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "cdb_core_power_down_configuration": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "cdb_core_spare_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "cdb_core_pmro_ctrl": {
    "type": "register",
    "block": "cdb_core",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "cdb_core_pmro_status": {
    "type": "register",
    "block": "cdb_core",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "cdb_core_mirror_bus_conf_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "cdb_core_mirror_bus_status": {
    "type": "register",
    "block": "cdb_core",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "cdb_core_device_time_offset_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "cdb_core_ctm_ring0_tcams_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 26,
    "desc": "configuration Per ring. there are 12 tcams,  5 key channels and  7 hit channels  in a ring.",
    "fields": [
      [
        "ring0_tcam_key_ch_sel",
        0,
        3
      ],
      [
        "ring0_tcam_key_shift",
        3,
        2
      ],
      [
        "ring0_tcam_hit_ch_sel",
        5,
        3
      ],
      [
        "ring0_tcam_ldb_access",
        8,
        16
      ],
      [
        "ring0_tcam_index_offset",
        24,
        2
      ]
    ]
  },
  "cdb_core_ctm_ring0_srams_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 16,
    "desc": "Per ring configuration. There are 12 SRAMs and 7 hit channels in a ring.",
    "fields": [
      [
        "ring0_sram_tcam_a_sel",
        0,
        4
      ],
      [
        "ring0_sram_tcam_b_sel",
        4,
        4
      ],
      [
        "ring0_sram_ch_a_sel",
        8,
        3
      ],
      [
        "ring0_sram_ch_b_sel",
        11,
        3
      ],
      [
        "ring0_sram_payload_size",
        14,
        1
      ],
      [
        "ring0_sram_append_16b_of_adjacent_sram",
        15,
        1
      ]
    ]
  },
  "cdb_core_ctm_ring0_result_channel_sram_sel": {
    "type": "register",
    "block": "cdb_core",
    "width": 24,
    "desc": "Per ring configuration. There are 5 result channels in a ring. In case one of srams 0,2,4,6,8,10 is using 16b of next SRAM, the payload will be the concatanated result",
    "fields": [
      [
        "ring0_ch_lsb_sram_sel",
        0,
        12
      ],
      [
        "ring0_ch_msb_sram_sel",
        12,
        12
      ]
    ]
  },
  "cdb_core_ctm_ring0_cascade_general_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 2,
    "desc": "Per ring configuration.",
    "fields": [
      [
        "ring0_cascade_cfg_sel",
        0,
        2
      ]
    ]
  },
  "cdb_core_ctm_ring0_cascade_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 149,
    "desc": "Per ring configuration. There are 4 configuration sets",
    "fields": [
      [
        "ring0_cascade_cfg_use_ch3",
        0,
        1
      ],
      [
        "ring0_cascade_cfg_ch4_mask0",
        1,
        40
      ],
      [
        "ring0_cascade_cfg_ch4_right_shift",
        41,
        6
      ],
      [
        "ring0_cascade_cfg_ch4_mask1",
        47,
        40
      ],
      [
        "ring0_cascade_cfg_ch4_result_mask",
        87,
        16
      ],
      [
        "ring0_cascade_cfg_selected_ch_right_shift",
        103,
        6
      ],
      [
        "ring0_cascade_cfg_selected_ch_mask",
        109,
        40
      ]
    ]
  },
  "cdb_core_ring0_shared_tcam_size_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 2,
    "desc": "Register  per  ACL TCAM bank that supports multiple key sizes. There are 8 TCAMs of that kind, each one is built using 2 LPM TCAMS. indicates which ACL size is supported.",
    "fields": [
      [
        "ring0_shared_tcam_size",
        0,
        2
      ]
    ]
  },
  "cdb_core_ring0_acl_tcam_is_320_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register  per  ACL TCAM bank that supports  key sizes of 160b only. There are 8 TCAMs of that kind",
    "fields": [
      [
        "ring0_acl_tcam_is_320",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm0_tcam_for_ctm": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register  per  LPM's TCAM . TCAM 0-7 are used by LPM. indicates which LPM TCAM belongs to CTM. ",
    "fields": [
      [
        "lpm0_tcam_in_use_of_ctm",
        0,
        1
      ]
    ]
  },
  "cdb_core_ctm_ring0_key_ch_sel": {
    "type": "register",
    "block": "cdb_core",
    "width": 3,
    "desc": "selecets which key will be connected to the ting key-channels",
    "fields": [
      [
        "ring0_key_ch_sel",
        0,
        3
      ]
    ]
  },
  "cdb_core_ctm_ring1_tcams_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 26,
    "desc": "configuration Per ring. there are 12 tcams,  5 key channels and  7 hit channels  in a ring.",
    "fields": [
      [
        "ring1_tcam_key_ch_sel",
        0,
        3
      ],
      [
        "ring1_tcam_key_shift",
        3,
        2
      ],
      [
        "ring1_tcam_hit_ch_sel",
        5,
        3
      ],
      [
        "ring1_tcam_ldb_access",
        8,
        16
      ],
      [
        "ring1_tcam_index_offset",
        24,
        2
      ]
    ]
  },
  "cdb_core_ctm_ring1_srams_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 16,
    "desc": "Per ring configuration. There are 12 SRAMs and 7 hit channels in a ring.",
    "fields": [
      [
        "ring1_sram_tcam_a_sel",
        0,
        4
      ],
      [
        "ring1_sram_tcam_b_sel",
        4,
        4
      ],
      [
        "ring1_sram_ch_a_sel",
        8,
        3
      ],
      [
        "ring1_sram_ch_b_sel",
        11,
        3
      ],
      [
        "ring1_sram_payload_size",
        14,
        1
      ],
      [
        "ring1_sram_append_16b_of_adjacent_sram",
        15,
        1
      ]
    ]
  },
  "cdb_core_ctm_ring1_result_channel_sram_sel": {
    "type": "register",
    "block": "cdb_core",
    "width": 24,
    "desc": "Per ring configuration. There are 5 result channels in a ring. In case one of srams 0,2,4,6,8,10 is using 16b of next SRAM, the payload will be the concatanated result",
    "fields": [
      [
        "ring1_ch_lsb_sram_sel",
        0,
        12
      ],
      [
        "ring1_ch_msb_sram_sel",
        12,
        12
      ]
    ]
  },
  "cdb_core_ctm_ring1_cascade_general_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 2,
    "desc": "Per ring configuration.",
    "fields": [
      [
        "ring1_cascade_cfg_sel",
        0,
        2
      ]
    ]
  },
  "cdb_core_ctm_ring1_cascade_cfg": {
    "type": "register",
    "block": "cdb_core",
    "width": 149,
    "desc": "Per ring configuration. There are 4 configuration sets",
    "fields": [
      [
        "ring1_cascade_cfg_use_ch3",
        0,
        1
      ],
      [
        "ring1_cascade_cfg_ch4_mask0",
        1,
        40
      ],
      [
        "ring1_cascade_cfg_ch4_right_shift",
        41,
        6
      ],
      [
        "ring1_cascade_cfg_ch4_mask1",
        47,
        40
      ],
      [
        "ring1_cascade_cfg_ch4_result_mask",
        87,
        16
      ],
      [
        "ring1_cascade_cfg_selected_ch_right_shift",
        103,
        6
      ],
      [
        "ring1_cascade_cfg_selected_ch_mask",
        109,
        40
      ]
    ]
  },
  "cdb_core_ring1_shared_tcam_size_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 2,
    "desc": "Register  per  ACL TCAM bank that supports multiple key sizes. There are 6 TCAMs of that kind, each one is built using 2 LPM TCAMS. indicates which ACL size is supported.",
    "fields": [
      [
        "ring1_shared_tcam_size",
        0,
        2
      ]
    ]
  },
  "cdb_core_ring1_acl_tcam_is_320_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register  per  ACL TCAM bank that supports  key sizes of 160b only. There are 8 TCAMs of that kind",
    "fields": [
      [
        "ring1_acl_tcam_is_320",
        0,
        1
      ]
    ]
  },
  "cdb_core_ctm_ring1_key_ch_sel": {
    "type": "register",
    "block": "cdb_core",
    "width": 3,
    "desc": "selecets which key will be connected to the ting key-channels",
    "fields": [
      [
        "ring1_key_ch_sel",
        0,
        3
      ]
    ]
  },
  "cdb_core_lpm1_tcam_for_ctm": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register  per  LPM's TCAM . TCAM 0-7 are used by LPM. indicates which LPM TCAM belongs to CTM. ",
    "fields": [
      [
        "lpm1_tcam_in_use_of_ctm",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_cache_mode": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register  for both LPMs",
    "fields": [
      [
        "cache_mode",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_ecc_mode": {
    "type": "register",
    "block": "cdb_core",
    "width": 3,
    "desc": "Register  for both LPMs.",
    "fields": [
      [
        "disable_ecc_decode",
        0,
        3
      ]
    ]
  },
  "cdb_core_lpm_ipv6_on_chip": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register  for both LPMs.",
    "fields": [
      [
        "tcam1_is_for_on_chip_ipv6",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm0_num_of_ipv6_over_80b_tcam_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 5,
    "desc": "Register for a pair of LPM TCAMs (0 & 1, 2 &3 etc.)",
    "fields": [
      [
        "lpm0_num_of_ipv6_over_80b_tcam",
        0,
        5
      ]
    ]
  },
  "cdb_core_lpm1_num_of_ipv6_over_80b_tcam_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 5,
    "desc": "Register for a pair of LPM TCAMs (0 & 1, 2 &3 etc.)",
    "fields": [
      [
        "lpm1_num_of_ipv6_over_80b_tcam",
        0,
        5
      ]
    ]
  },
  "cdb_core_lpm0_ipv6_over_80b_supported_tcam_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register for a pair of LPM TCAMs (0 & 1, 2 &3 etc.)",
    "fields": [
      [
        "lpm0_ipv6_over_80b_supported_in_tcam",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm1_ipv6_over_80b_supported_tcam_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register for a pair of LPM TCAMs (0 & 1, 2 &3 etc.)",
    "fields": [
      [
        "lpm1_ipv6_over_80b_supported_in_tcam",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_tcam_bypass": {
    "type": "register",
    "block": "cdb_core",
    "width": 317,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm_tcam_bypass_index",
        0,
        13
      ],
      [
        "lpm_tcam_bypass_key",
        13,
        142
      ],
      [
        "lpm_tcam_bypass_mask_n",
        155,
        142
      ],
      [
        "lpm_tcam_bypass_subtrie_id",
        297,
        13
      ],
      [
        "lpm_tcam_bypass_subtrie_len",
        310,
        7
      ]
    ]
  },
  "cdb_core_em_configurations": {
    "type": "register",
    "block": "cdb_core",
    "width": 17,
    "desc": "Configurations for the EM",
    "fields": [
      [
        "auto_bubble_req_en",
        0,
        1
      ],
      [
        "bubble_req_threshold",
        1,
        16
      ]
    ]
  },
  "cdb_core_lpm_rd_mod_wr": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm_rd_mod_wr_valid",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_rd_mod_wr_address_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 11,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm_rd_mod_wr_ad",
        0,
        11
      ]
    ]
  },
  "cdb_core_lpm_rd_mod_wr_id_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 6,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm_rd_mod_wr_group_id",
        0,
        5
      ],
      [
        "lpm_rd_mod_wr_bucket_id",
        5,
        1
      ]
    ]
  },
  "cdb_core_lpm_rd_mod_wr_non_entry_data_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 63,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm_rd_mod_wr_non_entry_data",
        0,
        63
      ]
    ]
  },
  "cdb_core_lpm0_rd_mod_wr_group_data_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 93,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm0_rd_mod_wr_group_data",
        0,
        93
      ]
    ]
  },
  "cdb_core_lpm1_rd_mod_wr_group_data_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 93,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm1_rd_mod_wr_group_data",
        0,
        93
      ]
    ]
  },
  "cdb_core_lpm_l2_accessed_buckets_wr": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register for both  LPM-s.",
    "fields": [
      [
        "lpm_l2_accessed_buckets_wr_reg",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_l2_accessed_buckets_status_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 2048,
    "desc": "Register for both  LPM-s.",
    "fields": [
      [
        "lpm_l2_accessed_buckets_status",
        0,
        2048
      ]
    ]
  },
  "cdb_core_lpm_rd_mod_wr_bubble_timer_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 32,
    "desc": "Number of clocks the LPM rd-mod-wr should send bubble request in order to guarntee a single bubble.",
    "fields": [
      [
        "lpm_rd_mod_wr_bubble_timer",
        0,
        32
      ]
    ]
  },
  "cdb_core_lpm_shared_sram_1b_err_int_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm_shared_sram_1b_err_interrupt",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_shared_sram_1b_err_int_reg_mask": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "This register masks lpm[2]_shared_sram_1b_err_int_reg interrupt register",
    "fields": [
      [
        "lpm_shared_sram_1b_err_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_shared_sram_1b_err_int_reg_test": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "This register tests lpm[2]_shared_sram_1b_err_int_reg interrupt register",
    "fields": [
      [
        "lpm_shared_sram_1b_err_interrupt_test",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_shared_sram_2b_err_int_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm_shared_sram_2b_err_interrupt",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_shared_sram_2b_err_int_reg_mask": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "This register masks lpm[2]_shared_sram_2b_err_int_reg interrupt register",
    "fields": [
      [
        "lpm_shared_sram_2b_err_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_shared_sram_2b_err_int_reg_test": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "This register tests lpm[2]_shared_sram_2b_err_int_reg interrupt register",
    "fields": [
      [
        "lpm_shared_sram_2b_err_interrupt_test",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_shared_sram_err_add_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 11,
    "desc": "Register per LPM.",
    "fields": [
      [
        "lpm_shared_sram_err_addr",
        0,
        11
      ]
    ]
  },
  "cdb_core_hash_key_em0": {
    "type": "register",
    "block": "cdb_core",
    "width": 284,
    "desc": "Configurations for the EM0",
    "fields": [
      [
        "hash_key0",
        0,
        284
      ]
    ]
  },
  "cdb_core_hash_key_em1": {
    "type": "register",
    "block": "cdb_core",
    "width": 284,
    "desc": "Configurations for the EM1",
    "fields": [
      [
        "hash_key1",
        0,
        284
      ]
    ]
  },
  "cdb_core_em_key_width": {
    "type": "register",
    "block": "cdb_core",
    "width": 32,
    "desc": "Register for both EM cores.",
    "fields": [
      [
        "key_width",
        0,
        32
      ]
    ]
  },
  "cdb_core_per_em_configurations": {
    "type": "register",
    "block": "cdb_core",
    "width": 56,
    "desc": "Configurations for the EM",
    "fields": [
      [
        "active_banks",
        0,
        28
      ],
      [
        "use_primit_poly",
        28,
        28
      ]
    ]
  },
  "cdb_core_em_shared_sram_err_int_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "em_shared_sram_err_interrupt",
        0,
        1
      ]
    ]
  },
  "cdb_core_em_shared_sram_err_int_reg_mask": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "em_shared_sram_err_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "cdb_core_em_shared_sram_err_int_reg_test": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "em_shared_sram_err_interrupt_test",
        0,
        1
      ]
    ]
  },
  "cdb_core_em_shared_sram_err_add_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "em_shared_sram_err_addr",
        0,
        11
      ]
    ]
  },
  "cdb_core_per_em_wm": {
    "type": "register",
    "block": "cdb_core",
    "width": 8,
    "desc": "Configurations for the EM",
    "fields": [
      [
        "emdb_cam_occup_wm_max",
        0,
        8
      ]
    ]
  },
  "cdb_core_em_cam_hit_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 32,
    "desc": "Hit indication per em cam entry. 32 entries hit inidication.",
    "fields": [
      [
        "em_cam_hit",
        0,
        32
      ]
    ]
  },
  "cdb_core_lpm_no_hbm_crd_event_cnt": {
    "type": "register",
    "block": "cdb_core",
    "width": 64,
    "desc": "countes the number of clocks where lpm core didn\ufffdt have credits to send to the lookup to the  HBM",
    "fields": [
      [
        "lpm_no_hbm_crd_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_core_lpm_hbm_access_cnt_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 64,
    "desc": "number of times the lpm core accessed the hbm",
    "fields": [
      [
        "lpm_hbm_access_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_core_lpm_hbm_denied_no_crd_cnt_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 64,
    "desc": "number of times the lpm core accessed the hbmand got denied due to no cbt credits",
    "fields": [
      [
        "lpm_hbm_denied_no_crd_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_core_lpm_hbm_denied_not_eligible_cnt_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 64,
    "desc": "number of times the lpm core accessed the hbm and got denied due totoo many lpm lookups(hbm+on-chip) in the air",
    "fields": [
      [
        "lpm_hbm_denied_not_eligible_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_core_lpm_no_tcam_hit_int_reg": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "intterrupt for TCAM trie table miss - inidcates wromg configuration",
    "fields": [
      [
        "lpm_no_tcam_hit_int",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_no_tcam_hit_int_reg_mask": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "This register masks lpm[2]_no_tcam_hit_int_reg interrupt register",
    "fields": [
      [
        "lpm_no_tcam_hit_int_mask",
        0,
        1
      ]
    ]
  },
  "cdb_core_lpm_no_tcam_hit_int_reg_test": {
    "type": "register",
    "block": "cdb_core",
    "width": 1,
    "desc": "This register tests lpm[2]_no_tcam_hit_int_reg interrupt register",
    "fields": [
      [
        "lpm_no_tcam_hit_int_test",
        0,
        1
      ]
    ]
  },
  "cdb_core_ring0_associated_data_mem": {
    "type": "memory",
    "block": "cdb_core",
    "width": 32,
    "desc": "Ring0 memories. Total of 24 srams each srams is for assiciated data of 32/64 bits",
    "fields": [
      [
        "ring_mem0_field",
        0,
        32
      ]
    ]
  },
  "cdb_core_ring0_acl_tcam_hit_indication": {
    "type": "memory",
    "block": "cdb_core",
    "width": 1,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "ring0_acl_tcam_hit_indication",
        0,
        1
      ]
    ]
  },
  "cdb_core_ring0_tcam_hit_indication": {
    "type": "memory",
    "block": "cdb_core",
    "width": 1,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "ring0_tcam_hit_indication",
        0,
        1
      ]
    ]
  },
  "cdb_core_ring1_associated_data_mem": {
    "type": "memory",
    "block": "cdb_core",
    "width": 32,
    "desc": "ring1 memories. Total of 24 srams each srams is for assiciated data of 32/64 bits",
    "fields": [
      [
        "ring_mem0_field",
        0,
        32
      ]
    ]
  },
  "cdb_core_ring1_acl_tcam_hit_indication": {
    "type": "memory",
    "block": "cdb_core",
    "width": 1,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "ring1_acl_tcam_hit_indication",
        0,
        1
      ]
    ]
  },
  "cdb_core_ring1_tcam_hit_indication": {
    "type": "memory",
    "block": "cdb_core",
    "width": 1,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "ring1_tcam_hit_indication",
        0,
        1
      ]
    ]
  },
  "cdb_core_trie_mem": {
    "type": "memory",
    "block": "cdb_core",
    "width": 20,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "entry",
        0,
        20
      ]
    ]
  },
  "cdb_core_extnd_trie_mem": {
    "type": "memory",
    "block": "cdb_core",
    "width": 20,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "entry",
        0,
        20
      ]
    ]
  },
  "cdb_core_subtrie_mem": {
    "type": "memory",
    "block": "cdb_core",
    "width": 315,
    "desc": "Some desc for mem2",
    "fields": [
      [
        "entry",
        0,
        315
      ]
    ]
  },
  "cdb_core_extnd_subtrie_mem": {
    "type": "memory",
    "block": "cdb_core",
    "width": 315,
    "desc": "Some desc for mem2",
    "fields": [
      [
        "entry",
        0,
        315
      ]
    ]
  },
  "cdb_core_srams_group0": {
    "type": "memory",
    "block": "cdb_core",
    "width": 110,
    "desc": "Some desc for mem1",
    "fields": [
      [
        "srams0",
        0,
        110
      ]
    ]
  },
  "cdb_core_srams_group1": {
    "type": "memory",
    "block": "cdb_core",
    "width": 110,
    "desc": "Some desc for mem1",
    "fields": [
      [
        "srams1",
        0,
        110
      ]
    ]
  },
  "cdb_core_ring0_acl_tcam": {
    "type": "memory",
    "block": "cdb_core",
    "width": 160,
    "desc": "Some desc for mem1",
    "fields": [
      [
        "ring0_acl_tcam_key",
        0,
        160
      ],
      [
        "ring0_acl_tcam_delete",
        160,
        1
      ]
    ]
  },
  "cdb_core_ring1_acl_tcam": {
    "type": "memory",
    "block": "cdb_core",
    "width": 160,
    "desc": "Some desc for mem1",
    "fields": [
      [
        "ring1_acl_tcam_key",
        0,
        160
      ],
      [
        "ring1_acl_tcam_delete",
        160,
        1
      ]
    ]
  },
  "cdb_core_lpm0_tcam": {
    "type": "memory",
    "block": "cdb_core",
    "width": 40,
    "desc": "Some desc for mem1",
    "fields": [
      [
        "lpm0_tcam_key",
        0,
        40
      ],
      [
        "lpm0_tcam_delete",
        40,
        1
      ]
    ]
  },
  "cdb_core_lpm1_tcam": {
    "type": "memory",
    "block": "cdb_core",
    "width": 40,
    "desc": "Some desc for mem1",
    "fields": [
      [
        "lpm1_tcam_key",
        0,
        40
      ],
      [
        "lpm1_tcam_delete",
        40,
        1
      ]
    ]
  },
  "cdb_core_em_rule_table_tcam": {
    "type": "memory",
    "block": "cdb_core",
    "width": 174,
    "desc": "Large Encapsulation EM database",
    "fields": [
      [
        "em_rule_table_tcam_key_mask",
        0,
        174
      ],
      [
        "em_rule_table_tcam_key",
        174,
        174
      ],
      [
        "em_rule_table_tcam_delete",
        348,
        1
      ]
    ]
  },
  "cdb_core_em_rule_table_tcam_mem": {
    "type": "memory",
    "block": "cdb_core",
    "width": 66,
    "desc": "Large Encapsulation EM database",
    "fields": [
      [
        "field",
        0,
        66
      ]
    ]
  },
  "cdb_core_em_cam": {
    "type": "memory",
    "block": "cdb_core",
    "width": 142,
    "desc": "Large Encapsulation EM database",
    "fields": [
      [
        "em_cam_payload",
        0,
        64
      ],
      [
        "em_cam_key",
        64,
        142
      ],
      [
        "em_cam_valid",
        206,
        1
      ]
    ]
  },
  "cdb_core_em_hit": {
    "type": "memory",
    "block": "cdb_core",
    "width": 64,
    "desc": "Hit indication per em entry. Each memory line holds 64 entries hit inidication",
    "fields": [
      [
        "em_hit_indication",
        0,
        64
      ]
    ]
  },
  "cdb_top_interrupt_register": {
    "type": "register",
    "block": "cdb_top",
    "width": 14,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "cdb_core0_interrupt_summary_reg_summary",
        1,
        1
      ],
      [
        "cdb_core1_interrupt_summary_reg_summary",
        2,
        1
      ],
      [
        "cdb_core2_interrupt_summary_reg_summary",
        3,
        1
      ],
      [
        "cdb_core3_interrupt_summary_reg_summary",
        4,
        1
      ],
      [
        "cdb_core4_interrupt_summary_reg_summary",
        5,
        1
      ],
      [
        "cdb_core5_interrupt_summary_reg_summary",
        6,
        1
      ],
      [
        "cdb_core6_interrupt_summary_reg_summary",
        7,
        1
      ],
      [
        "cdb_core7_interrupt_summary_reg_summary",
        8,
        1
      ],
      [
        "lpm_uneven_load_blance_summary",
        9,
        1
      ],
      [
        "cem_uneven_load_blance_summary",
        10,
        1
      ],
      [
        "aging_overflow_summary",
        11,
        1
      ],
      [
        "bulk_update_overflow_summary",
        12,
        1
      ],
      [
        "arc_interrupt_to_cpu_summary",
        13,
        1
      ]
    ]
  },
  "cdb_top_mem_protect_interrupt": {
    "type": "register",
    "block": "cdb_top",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "cdb_top_mem_protect_interrupt_test": {
    "type": "register",
    "block": "cdb_top",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "cdb_top_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 86,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "counters_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "key_mem0_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "key_mem1_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "key_mem2_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "key_mem3_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "key_mem4_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "key_mem5_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "cdsp_small_cbr_mem0_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "cdsp_small_cbr_mem1_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "cdsp_big_cbr_mem0_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "cdsp_big_cbr_mem1_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "cdsp_big_cbr_mem2_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "cdsp_big_cbr_mem3_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "lpm_key_mem0_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "lpm_key_mem1_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "lpm_key_mem2_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "lpm_key_mem3_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "lpm_key_mem4_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "lpm_key_mem5_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "lpm_big_cbr_mem0_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "lpm_big_cbr_mem1_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "lpm_big_cbr_mem2_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "lpm_big_cbr_mem3_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "lpm_small_cbr_mem0_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "lpm_small_cbr_mem1_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "em_big_cbr_mem0_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "em_big_cbr_mem1_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "em_big_cbr_mem2_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "em_big_cbr_mem3_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "learn_big_cbr_mem0_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "learn_big_cbr_mem1_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "learn_big_cbr_mem2_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "learn_big_cbr_mem3_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "learn_small_cbr_mem0_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "learn_small_cbr_mem1_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "em_payload_mem0_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "em_payload_mem1_ecc_1b_err_interrupt_mask",
        36,
        1
      ],
      [
        "em_payload_mem2_ecc_1b_err_interrupt_mask",
        37,
        1
      ],
      [
        "em_payload_mem3_ecc_1b_err_interrupt_mask",
        38,
        1
      ],
      [
        "em_payload_mem4_ecc_1b_err_interrupt_mask",
        39,
        1
      ],
      [
        "em_payload_mem5_ecc_1b_err_interrupt_mask",
        40,
        1
      ],
      [
        "lpm_payload_mem0_ecc_1b_err_interrupt_mask",
        41,
        1
      ],
      [
        "lpm_payload_mem1_ecc_1b_err_interrupt_mask",
        42,
        1
      ],
      [
        "lpm_payload_mem2_ecc_1b_err_interrupt_mask",
        43,
        1
      ],
      [
        "lpm_payload_mem3_ecc_1b_err_interrupt_mask",
        44,
        1
      ],
      [
        "lpm_payload_mem4_ecc_1b_err_interrupt_mask",
        45,
        1
      ],
      [
        "lpm_payload_mem5_ecc_1b_err_interrupt_mask",
        46,
        1
      ],
      [
        "lpm_group_rate_mem_ecc_1b_err_interrupt_mask",
        47,
        1
      ],
      [
        "clpm_mmxbar0_ecc_1b_err_interrupt_mask",
        48,
        1
      ],
      [
        "clpm_mmxbar1_ecc_1b_err_interrupt_mask",
        49,
        1
      ],
      [
        "clpm_mmxbar2_ecc_1b_err_interrupt_mask",
        50,
        1
      ],
      [
        "clpm_mmxbar3_ecc_1b_err_interrupt_mask",
        51,
        1
      ],
      [
        "clpm_mmxbar4_ecc_1b_err_interrupt_mask",
        52,
        1
      ],
      [
        "clpm_mmxbar5_ecc_1b_err_interrupt_mask",
        53,
        1
      ],
      [
        "clpm_mmxbar6_ecc_1b_err_interrupt_mask",
        54,
        1
      ],
      [
        "clpm_mmxbar7_ecc_1b_err_interrupt_mask",
        55,
        1
      ],
      [
        "clpm_mmxbar8_ecc_1b_err_interrupt_mask",
        56,
        1
      ],
      [
        "clpm_mmxbar9_ecc_1b_err_interrupt_mask",
        57,
        1
      ],
      [
        "clpm_mmxbar10_ecc_1b_err_interrupt_mask",
        58,
        1
      ],
      [
        "clpm_mmxbar11_ecc_1b_err_interrupt_mask",
        59,
        1
      ],
      [
        "cem_age_table_ecc_1b_err_interrupt_mask",
        60,
        1
      ],
      [
        "em_group_rate_mem_ecc_1b_err_interrupt_mask",
        61,
        1
      ],
      [
        "cem_mmxbar0_ecc_1b_err_interrupt_mask",
        62,
        1
      ],
      [
        "cem_mmxbar1_ecc_1b_err_interrupt_mask",
        63,
        1
      ],
      [
        "cem_mmxbar2_ecc_1b_err_interrupt_mask",
        64,
        1
      ],
      [
        "cem_mmxbar3_ecc_1b_err_interrupt_mask",
        65,
        1
      ],
      [
        "cem_mmxbar4_ecc_1b_err_interrupt_mask",
        66,
        1
      ],
      [
        "cem_mmxbar5_ecc_1b_err_interrupt_mask",
        67,
        1
      ],
      [
        "cem_mmxbar6_ecc_1b_err_interrupt_mask",
        68,
        1
      ],
      [
        "cem_mmxbar7_ecc_1b_err_interrupt_mask",
        69,
        1
      ],
      [
        "cem_mmxbar8_ecc_1b_err_interrupt_mask",
        70,
        1
      ],
      [
        "cem_mmxbar9_ecc_1b_err_interrupt_mask",
        71,
        1
      ],
      [
        "cem_mmxbar10_ecc_1b_err_interrupt_mask",
        72,
        1
      ],
      [
        "cem_mmxbar11_ecc_1b_err_interrupt_mask",
        73,
        1
      ],
      [
        "hbm_reply_fifo0_ecc_1b_err_interrupt_mask",
        74,
        1
      ],
      [
        "hbm_reply_fifo1_ecc_1b_err_interrupt_mask",
        75,
        1
      ],
      [
        "hbm_reply_fifo2_ecc_1b_err_interrupt_mask",
        76,
        1
      ],
      [
        "hbm_reply_fifo3_ecc_1b_err_interrupt_mask",
        77,
        1
      ],
      [
        "hbm_reply_fifo4_ecc_1b_err_interrupt_mask",
        78,
        1
      ],
      [
        "hbm_reply_fifo5_ecc_1b_err_interrupt_mask",
        79,
        1
      ],
      [
        "hbm_reply_fifo6_ecc_1b_err_interrupt_mask",
        80,
        1
      ],
      [
        "hbm_reply_fifo7_ecc_1b_err_interrupt_mask",
        81,
        1
      ],
      [
        "hbm_reply_fifo8_ecc_1b_err_interrupt_mask",
        82,
        1
      ],
      [
        "hbm_reply_fifo9_ecc_1b_err_interrupt_mask",
        83,
        1
      ],
      [
        "hbm_reply_fifo10_ecc_1b_err_interrupt_mask",
        84,
        1
      ],
      [
        "hbm_reply_fifo11_ecc_1b_err_interrupt_mask",
        85,
        1
      ]
    ]
  },
  "cdb_top_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 86,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "counters_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "key_mem0_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "key_mem1_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "key_mem2_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "key_mem3_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "key_mem4_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "key_mem5_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "cdsp_small_cbr_mem0_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "cdsp_small_cbr_mem1_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "cdsp_big_cbr_mem0_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "cdsp_big_cbr_mem1_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "cdsp_big_cbr_mem2_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "cdsp_big_cbr_mem3_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "lpm_key_mem0_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "lpm_key_mem1_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "lpm_key_mem2_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "lpm_key_mem3_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "lpm_key_mem4_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "lpm_key_mem5_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "lpm_big_cbr_mem0_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "lpm_big_cbr_mem1_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "lpm_big_cbr_mem2_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "lpm_big_cbr_mem3_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "lpm_small_cbr_mem0_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "lpm_small_cbr_mem1_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "em_big_cbr_mem0_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "em_big_cbr_mem1_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "em_big_cbr_mem2_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "em_big_cbr_mem3_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "learn_big_cbr_mem0_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "learn_big_cbr_mem1_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "learn_big_cbr_mem2_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "learn_big_cbr_mem3_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "learn_small_cbr_mem0_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "learn_small_cbr_mem1_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "em_payload_mem0_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "em_payload_mem1_ecc_2b_err_interrupt_mask",
        36,
        1
      ],
      [
        "em_payload_mem2_ecc_2b_err_interrupt_mask",
        37,
        1
      ],
      [
        "em_payload_mem3_ecc_2b_err_interrupt_mask",
        38,
        1
      ],
      [
        "em_payload_mem4_ecc_2b_err_interrupt_mask",
        39,
        1
      ],
      [
        "em_payload_mem5_ecc_2b_err_interrupt_mask",
        40,
        1
      ],
      [
        "lpm_payload_mem0_ecc_2b_err_interrupt_mask",
        41,
        1
      ],
      [
        "lpm_payload_mem1_ecc_2b_err_interrupt_mask",
        42,
        1
      ],
      [
        "lpm_payload_mem2_ecc_2b_err_interrupt_mask",
        43,
        1
      ],
      [
        "lpm_payload_mem3_ecc_2b_err_interrupt_mask",
        44,
        1
      ],
      [
        "lpm_payload_mem4_ecc_2b_err_interrupt_mask",
        45,
        1
      ],
      [
        "lpm_payload_mem5_ecc_2b_err_interrupt_mask",
        46,
        1
      ],
      [
        "lpm_group_rate_mem_ecc_2b_err_interrupt_mask",
        47,
        1
      ],
      [
        "clpm_mmxbar0_ecc_2b_err_interrupt_mask",
        48,
        1
      ],
      [
        "clpm_mmxbar1_ecc_2b_err_interrupt_mask",
        49,
        1
      ],
      [
        "clpm_mmxbar2_ecc_2b_err_interrupt_mask",
        50,
        1
      ],
      [
        "clpm_mmxbar3_ecc_2b_err_interrupt_mask",
        51,
        1
      ],
      [
        "clpm_mmxbar4_ecc_2b_err_interrupt_mask",
        52,
        1
      ],
      [
        "clpm_mmxbar5_ecc_2b_err_interrupt_mask",
        53,
        1
      ],
      [
        "clpm_mmxbar6_ecc_2b_err_interrupt_mask",
        54,
        1
      ],
      [
        "clpm_mmxbar7_ecc_2b_err_interrupt_mask",
        55,
        1
      ],
      [
        "clpm_mmxbar8_ecc_2b_err_interrupt_mask",
        56,
        1
      ],
      [
        "clpm_mmxbar9_ecc_2b_err_interrupt_mask",
        57,
        1
      ],
      [
        "clpm_mmxbar10_ecc_2b_err_interrupt_mask",
        58,
        1
      ],
      [
        "clpm_mmxbar11_ecc_2b_err_interrupt_mask",
        59,
        1
      ],
      [
        "cem_age_table_ecc_2b_err_interrupt_mask",
        60,
        1
      ],
      [
        "em_group_rate_mem_ecc_2b_err_interrupt_mask",
        61,
        1
      ],
      [
        "cem_mmxbar0_ecc_2b_err_interrupt_mask",
        62,
        1
      ],
      [
        "cem_mmxbar1_ecc_2b_err_interrupt_mask",
        63,
        1
      ],
      [
        "cem_mmxbar2_ecc_2b_err_interrupt_mask",
        64,
        1
      ],
      [
        "cem_mmxbar3_ecc_2b_err_interrupt_mask",
        65,
        1
      ],
      [
        "cem_mmxbar4_ecc_2b_err_interrupt_mask",
        66,
        1
      ],
      [
        "cem_mmxbar5_ecc_2b_err_interrupt_mask",
        67,
        1
      ],
      [
        "cem_mmxbar6_ecc_2b_err_interrupt_mask",
        68,
        1
      ],
      [
        "cem_mmxbar7_ecc_2b_err_interrupt_mask",
        69,
        1
      ],
      [
        "cem_mmxbar8_ecc_2b_err_interrupt_mask",
        70,
        1
      ],
      [
        "cem_mmxbar9_ecc_2b_err_interrupt_mask",
        71,
        1
      ],
      [
        "cem_mmxbar10_ecc_2b_err_interrupt_mask",
        72,
        1
      ],
      [
        "cem_mmxbar11_ecc_2b_err_interrupt_mask",
        73,
        1
      ],
      [
        "hbm_reply_fifo0_ecc_2b_err_interrupt_mask",
        74,
        1
      ],
      [
        "hbm_reply_fifo1_ecc_2b_err_interrupt_mask",
        75,
        1
      ],
      [
        "hbm_reply_fifo2_ecc_2b_err_interrupt_mask",
        76,
        1
      ],
      [
        "hbm_reply_fifo3_ecc_2b_err_interrupt_mask",
        77,
        1
      ],
      [
        "hbm_reply_fifo4_ecc_2b_err_interrupt_mask",
        78,
        1
      ],
      [
        "hbm_reply_fifo5_ecc_2b_err_interrupt_mask",
        79,
        1
      ],
      [
        "hbm_reply_fifo6_ecc_2b_err_interrupt_mask",
        80,
        1
      ],
      [
        "hbm_reply_fifo7_ecc_2b_err_interrupt_mask",
        81,
        1
      ],
      [
        "hbm_reply_fifo8_ecc_2b_err_interrupt_mask",
        82,
        1
      ],
      [
        "hbm_reply_fifo9_ecc_2b_err_interrupt_mask",
        83,
        1
      ],
      [
        "hbm_reply_fifo10_ecc_2b_err_interrupt_mask",
        84,
        1
      ],
      [
        "hbm_reply_fifo11_ecc_2b_err_interrupt_mask",
        85,
        1
      ]
    ]
  },
  "cdb_top_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 13,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "cem_iccm_parity_err_interrupt_mask",
        0,
        1
      ],
      [
        "clpm_group_map_tcam0_parity_err_interrupt_mask",
        1,
        1
      ],
      [
        "clpm_group_map_tcam1_parity_err_interrupt_mask",
        2,
        1
      ],
      [
        "clpm_group_map_tcam2_parity_err_interrupt_mask",
        3,
        1
      ],
      [
        "clpm_group_map_tcam3_parity_err_interrupt_mask",
        4,
        1
      ],
      [
        "clpm_group_map_tcam4_parity_err_interrupt_mask",
        5,
        1
      ],
      [
        "clpm_group_map_tcam5_parity_err_interrupt_mask",
        6,
        1
      ],
      [
        "clpm_group_map_tcam6_parity_err_interrupt_mask",
        7,
        1
      ],
      [
        "clpm_group_map_tcam7_parity_err_interrupt_mask",
        8,
        1
      ],
      [
        "clpm_group_map_tcam8_parity_err_interrupt_mask",
        9,
        1
      ],
      [
        "clpm_group_map_tcam9_parity_err_interrupt_mask",
        10,
        1
      ],
      [
        "clpm_group_map_tcam10_parity_err_interrupt_mask",
        11,
        1
      ],
      [
        "clpm_group_map_tcam11_parity_err_interrupt_mask",
        12,
        1
      ]
    ]
  },
  "cdb_top_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "cdb_top",
    "width": 86,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "counters_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "key_mem0_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "key_mem1_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "key_mem2_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "key_mem3_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "key_mem4_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "key_mem5_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "cdsp_small_cbr_mem0_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "cdsp_small_cbr_mem1_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "cdsp_big_cbr_mem0_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "cdsp_big_cbr_mem1_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "cdsp_big_cbr_mem2_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "cdsp_big_cbr_mem3_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "lpm_key_mem0_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "lpm_key_mem1_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "lpm_key_mem2_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "lpm_key_mem3_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "lpm_key_mem4_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "lpm_key_mem5_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "lpm_big_cbr_mem0_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "lpm_big_cbr_mem1_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "lpm_big_cbr_mem2_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "lpm_big_cbr_mem3_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "lpm_small_cbr_mem0_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "lpm_small_cbr_mem1_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "em_big_cbr_mem0_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "em_big_cbr_mem1_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "em_big_cbr_mem2_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "em_big_cbr_mem3_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "learn_big_cbr_mem0_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "learn_big_cbr_mem1_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "learn_big_cbr_mem2_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "learn_big_cbr_mem3_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "learn_small_cbr_mem0_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "learn_small_cbr_mem1_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "em_payload_mem0_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "em_payload_mem1_ecc_1b_err_initiate",
        36,
        1
      ],
      [
        "em_payload_mem2_ecc_1b_err_initiate",
        37,
        1
      ],
      [
        "em_payload_mem3_ecc_1b_err_initiate",
        38,
        1
      ],
      [
        "em_payload_mem4_ecc_1b_err_initiate",
        39,
        1
      ],
      [
        "em_payload_mem5_ecc_1b_err_initiate",
        40,
        1
      ],
      [
        "lpm_payload_mem0_ecc_1b_err_initiate",
        41,
        1
      ],
      [
        "lpm_payload_mem1_ecc_1b_err_initiate",
        42,
        1
      ],
      [
        "lpm_payload_mem2_ecc_1b_err_initiate",
        43,
        1
      ],
      [
        "lpm_payload_mem3_ecc_1b_err_initiate",
        44,
        1
      ],
      [
        "lpm_payload_mem4_ecc_1b_err_initiate",
        45,
        1
      ],
      [
        "lpm_payload_mem5_ecc_1b_err_initiate",
        46,
        1
      ],
      [
        "lpm_group_rate_mem_ecc_1b_err_initiate",
        47,
        1
      ],
      [
        "clpm_mmxbar0_ecc_1b_err_initiate",
        48,
        1
      ],
      [
        "clpm_mmxbar1_ecc_1b_err_initiate",
        49,
        1
      ],
      [
        "clpm_mmxbar2_ecc_1b_err_initiate",
        50,
        1
      ],
      [
        "clpm_mmxbar3_ecc_1b_err_initiate",
        51,
        1
      ],
      [
        "clpm_mmxbar4_ecc_1b_err_initiate",
        52,
        1
      ],
      [
        "clpm_mmxbar5_ecc_1b_err_initiate",
        53,
        1
      ],
      [
        "clpm_mmxbar6_ecc_1b_err_initiate",
        54,
        1
      ],
      [
        "clpm_mmxbar7_ecc_1b_err_initiate",
        55,
        1
      ],
      [
        "clpm_mmxbar8_ecc_1b_err_initiate",
        56,
        1
      ],
      [
        "clpm_mmxbar9_ecc_1b_err_initiate",
        57,
        1
      ],
      [
        "clpm_mmxbar10_ecc_1b_err_initiate",
        58,
        1
      ],
      [
        "clpm_mmxbar11_ecc_1b_err_initiate",
        59,
        1
      ],
      [
        "cem_age_table_ecc_1b_err_initiate",
        60,
        1
      ],
      [
        "em_group_rate_mem_ecc_1b_err_initiate",
        61,
        1
      ],
      [
        "cem_mmxbar0_ecc_1b_err_initiate",
        62,
        1
      ],
      [
        "cem_mmxbar1_ecc_1b_err_initiate",
        63,
        1
      ],
      [
        "cem_mmxbar2_ecc_1b_err_initiate",
        64,
        1
      ],
      [
        "cem_mmxbar3_ecc_1b_err_initiate",
        65,
        1
      ],
      [
        "cem_mmxbar4_ecc_1b_err_initiate",
        66,
        1
      ],
      [
        "cem_mmxbar5_ecc_1b_err_initiate",
        67,
        1
      ],
      [
        "cem_mmxbar6_ecc_1b_err_initiate",
        68,
        1
      ],
      [
        "cem_mmxbar7_ecc_1b_err_initiate",
        69,
        1
      ],
      [
        "cem_mmxbar8_ecc_1b_err_initiate",
        70,
        1
      ],
      [
        "cem_mmxbar9_ecc_1b_err_initiate",
        71,
        1
      ],
      [
        "cem_mmxbar10_ecc_1b_err_initiate",
        72,
        1
      ],
      [
        "cem_mmxbar11_ecc_1b_err_initiate",
        73,
        1
      ],
      [
        "hbm_reply_fifo0_ecc_1b_err_initiate",
        74,
        1
      ],
      [
        "hbm_reply_fifo1_ecc_1b_err_initiate",
        75,
        1
      ],
      [
        "hbm_reply_fifo2_ecc_1b_err_initiate",
        76,
        1
      ],
      [
        "hbm_reply_fifo3_ecc_1b_err_initiate",
        77,
        1
      ],
      [
        "hbm_reply_fifo4_ecc_1b_err_initiate",
        78,
        1
      ],
      [
        "hbm_reply_fifo5_ecc_1b_err_initiate",
        79,
        1
      ],
      [
        "hbm_reply_fifo6_ecc_1b_err_initiate",
        80,
        1
      ],
      [
        "hbm_reply_fifo7_ecc_1b_err_initiate",
        81,
        1
      ],
      [
        "hbm_reply_fifo8_ecc_1b_err_initiate",
        82,
        1
      ],
      [
        "hbm_reply_fifo9_ecc_1b_err_initiate",
        83,
        1
      ],
      [
        "hbm_reply_fifo10_ecc_1b_err_initiate",
        84,
        1
      ],
      [
        "hbm_reply_fifo11_ecc_1b_err_initiate",
        85,
        1
      ]
    ]
  },
  "cdb_top_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "cdb_top",
    "width": 86,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "counters_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "key_mem0_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "key_mem1_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "key_mem2_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "key_mem3_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "key_mem4_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "key_mem5_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "cdsp_small_cbr_mem0_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "cdsp_small_cbr_mem1_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "cdsp_big_cbr_mem0_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "cdsp_big_cbr_mem1_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "cdsp_big_cbr_mem2_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "cdsp_big_cbr_mem3_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "lpm_key_mem0_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "lpm_key_mem1_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "lpm_key_mem2_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "lpm_key_mem3_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "lpm_key_mem4_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "lpm_key_mem5_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "lpm_big_cbr_mem0_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "lpm_big_cbr_mem1_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "lpm_big_cbr_mem2_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "lpm_big_cbr_mem3_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "lpm_small_cbr_mem0_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "lpm_small_cbr_mem1_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "em_big_cbr_mem0_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "em_big_cbr_mem1_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "em_big_cbr_mem2_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "em_big_cbr_mem3_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "learn_big_cbr_mem0_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "learn_big_cbr_mem1_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "learn_big_cbr_mem2_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "learn_big_cbr_mem3_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "learn_small_cbr_mem0_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "learn_small_cbr_mem1_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "em_payload_mem0_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "em_payload_mem1_ecc_2b_err_initiate",
        36,
        1
      ],
      [
        "em_payload_mem2_ecc_2b_err_initiate",
        37,
        1
      ],
      [
        "em_payload_mem3_ecc_2b_err_initiate",
        38,
        1
      ],
      [
        "em_payload_mem4_ecc_2b_err_initiate",
        39,
        1
      ],
      [
        "em_payload_mem5_ecc_2b_err_initiate",
        40,
        1
      ],
      [
        "lpm_payload_mem0_ecc_2b_err_initiate",
        41,
        1
      ],
      [
        "lpm_payload_mem1_ecc_2b_err_initiate",
        42,
        1
      ],
      [
        "lpm_payload_mem2_ecc_2b_err_initiate",
        43,
        1
      ],
      [
        "lpm_payload_mem3_ecc_2b_err_initiate",
        44,
        1
      ],
      [
        "lpm_payload_mem4_ecc_2b_err_initiate",
        45,
        1
      ],
      [
        "lpm_payload_mem5_ecc_2b_err_initiate",
        46,
        1
      ],
      [
        "lpm_group_rate_mem_ecc_2b_err_initiate",
        47,
        1
      ],
      [
        "clpm_mmxbar0_ecc_2b_err_initiate",
        48,
        1
      ],
      [
        "clpm_mmxbar1_ecc_2b_err_initiate",
        49,
        1
      ],
      [
        "clpm_mmxbar2_ecc_2b_err_initiate",
        50,
        1
      ],
      [
        "clpm_mmxbar3_ecc_2b_err_initiate",
        51,
        1
      ],
      [
        "clpm_mmxbar4_ecc_2b_err_initiate",
        52,
        1
      ],
      [
        "clpm_mmxbar5_ecc_2b_err_initiate",
        53,
        1
      ],
      [
        "clpm_mmxbar6_ecc_2b_err_initiate",
        54,
        1
      ],
      [
        "clpm_mmxbar7_ecc_2b_err_initiate",
        55,
        1
      ],
      [
        "clpm_mmxbar8_ecc_2b_err_initiate",
        56,
        1
      ],
      [
        "clpm_mmxbar9_ecc_2b_err_initiate",
        57,
        1
      ],
      [
        "clpm_mmxbar10_ecc_2b_err_initiate",
        58,
        1
      ],
      [
        "clpm_mmxbar11_ecc_2b_err_initiate",
        59,
        1
      ],
      [
        "cem_age_table_ecc_2b_err_initiate",
        60,
        1
      ],
      [
        "em_group_rate_mem_ecc_2b_err_initiate",
        61,
        1
      ],
      [
        "cem_mmxbar0_ecc_2b_err_initiate",
        62,
        1
      ],
      [
        "cem_mmxbar1_ecc_2b_err_initiate",
        63,
        1
      ],
      [
        "cem_mmxbar2_ecc_2b_err_initiate",
        64,
        1
      ],
      [
        "cem_mmxbar3_ecc_2b_err_initiate",
        65,
        1
      ],
      [
        "cem_mmxbar4_ecc_2b_err_initiate",
        66,
        1
      ],
      [
        "cem_mmxbar5_ecc_2b_err_initiate",
        67,
        1
      ],
      [
        "cem_mmxbar6_ecc_2b_err_initiate",
        68,
        1
      ],
      [
        "cem_mmxbar7_ecc_2b_err_initiate",
        69,
        1
      ],
      [
        "cem_mmxbar8_ecc_2b_err_initiate",
        70,
        1
      ],
      [
        "cem_mmxbar9_ecc_2b_err_initiate",
        71,
        1
      ],
      [
        "cem_mmxbar10_ecc_2b_err_initiate",
        72,
        1
      ],
      [
        "cem_mmxbar11_ecc_2b_err_initiate",
        73,
        1
      ],
      [
        "hbm_reply_fifo0_ecc_2b_err_initiate",
        74,
        1
      ],
      [
        "hbm_reply_fifo1_ecc_2b_err_initiate",
        75,
        1
      ],
      [
        "hbm_reply_fifo2_ecc_2b_err_initiate",
        76,
        1
      ],
      [
        "hbm_reply_fifo3_ecc_2b_err_initiate",
        77,
        1
      ],
      [
        "hbm_reply_fifo4_ecc_2b_err_initiate",
        78,
        1
      ],
      [
        "hbm_reply_fifo5_ecc_2b_err_initiate",
        79,
        1
      ],
      [
        "hbm_reply_fifo6_ecc_2b_err_initiate",
        80,
        1
      ],
      [
        "hbm_reply_fifo7_ecc_2b_err_initiate",
        81,
        1
      ],
      [
        "hbm_reply_fifo8_ecc_2b_err_initiate",
        82,
        1
      ],
      [
        "hbm_reply_fifo9_ecc_2b_err_initiate",
        83,
        1
      ],
      [
        "hbm_reply_fifo10_ecc_2b_err_initiate",
        84,
        1
      ],
      [
        "hbm_reply_fifo11_ecc_2b_err_initiate",
        85,
        1
      ]
    ]
  },
  "cdb_top_parity_err_initiate_register": {
    "type": "register",
    "block": "cdb_top",
    "width": 13,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "cem_iccm_parity_err_initiate",
        0,
        1
      ],
      [
        "clpm_group_map_tcam0_parity_err_initiate",
        1,
        1
      ],
      [
        "clpm_group_map_tcam1_parity_err_initiate",
        2,
        1
      ],
      [
        "clpm_group_map_tcam2_parity_err_initiate",
        3,
        1
      ],
      [
        "clpm_group_map_tcam3_parity_err_initiate",
        4,
        1
      ],
      [
        "clpm_group_map_tcam4_parity_err_initiate",
        5,
        1
      ],
      [
        "clpm_group_map_tcam5_parity_err_initiate",
        6,
        1
      ],
      [
        "clpm_group_map_tcam6_parity_err_initiate",
        7,
        1
      ],
      [
        "clpm_group_map_tcam7_parity_err_initiate",
        8,
        1
      ],
      [
        "clpm_group_map_tcam8_parity_err_initiate",
        9,
        1
      ],
      [
        "clpm_group_map_tcam9_parity_err_initiate",
        10,
        1
      ],
      [
        "clpm_group_map_tcam10_parity_err_initiate",
        11,
        1
      ],
      [
        "clpm_group_map_tcam11_parity_err_initiate",
        12,
        1
      ]
    ]
  },
  "cdb_top_mem_protect_err_status": {
    "type": "register",
    "block": "cdb_top",
    "width": 99,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "cem_iccm_err_int",
        0,
        1
      ],
      [
        "counters_err_int",
        1,
        1
      ],
      [
        "key_mem0_err_int",
        2,
        1
      ],
      [
        "key_mem1_err_int",
        3,
        1
      ],
      [
        "key_mem2_err_int",
        4,
        1
      ],
      [
        "key_mem3_err_int",
        5,
        1
      ],
      [
        "key_mem4_err_int",
        6,
        1
      ],
      [
        "key_mem5_err_int",
        7,
        1
      ],
      [
        "cdsp_small_cbr_mem0_err_int",
        8,
        1
      ],
      [
        "cdsp_small_cbr_mem1_err_int",
        9,
        1
      ],
      [
        "cdsp_big_cbr_mem0_err_int",
        10,
        1
      ],
      [
        "cdsp_big_cbr_mem1_err_int",
        11,
        1
      ],
      [
        "cdsp_big_cbr_mem2_err_int",
        12,
        1
      ],
      [
        "cdsp_big_cbr_mem3_err_int",
        13,
        1
      ],
      [
        "lpm_key_mem0_err_int",
        14,
        1
      ],
      [
        "lpm_key_mem1_err_int",
        15,
        1
      ],
      [
        "lpm_key_mem2_err_int",
        16,
        1
      ],
      [
        "lpm_key_mem3_err_int",
        17,
        1
      ],
      [
        "lpm_key_mem4_err_int",
        18,
        1
      ],
      [
        "lpm_key_mem5_err_int",
        19,
        1
      ],
      [
        "lpm_big_cbr_mem0_err_int",
        20,
        1
      ],
      [
        "lpm_big_cbr_mem1_err_int",
        21,
        1
      ],
      [
        "lpm_big_cbr_mem2_err_int",
        22,
        1
      ],
      [
        "lpm_big_cbr_mem3_err_int",
        23,
        1
      ],
      [
        "lpm_small_cbr_mem0_err_int",
        24,
        1
      ],
      [
        "lpm_small_cbr_mem1_err_int",
        25,
        1
      ],
      [
        "em_big_cbr_mem0_err_int",
        26,
        1
      ],
      [
        "em_big_cbr_mem1_err_int",
        27,
        1
      ],
      [
        "em_big_cbr_mem2_err_int",
        28,
        1
      ],
      [
        "em_big_cbr_mem3_err_int",
        29,
        1
      ],
      [
        "learn_big_cbr_mem0_err_int",
        30,
        1
      ],
      [
        "learn_big_cbr_mem1_err_int",
        31,
        1
      ],
      [
        "learn_big_cbr_mem2_err_int",
        32,
        1
      ],
      [
        "learn_big_cbr_mem3_err_int",
        33,
        1
      ],
      [
        "learn_small_cbr_mem0_err_int",
        34,
        1
      ],
      [
        "learn_small_cbr_mem1_err_int",
        35,
        1
      ],
      [
        "em_payload_mem0_err_int",
        36,
        1
      ],
      [
        "em_payload_mem1_err_int",
        37,
        1
      ],
      [
        "em_payload_mem2_err_int",
        38,
        1
      ],
      [
        "em_payload_mem3_err_int",
        39,
        1
      ],
      [
        "em_payload_mem4_err_int",
        40,
        1
      ],
      [
        "em_payload_mem5_err_int",
        41,
        1
      ],
      [
        "lpm_payload_mem0_err_int",
        42,
        1
      ],
      [
        "lpm_payload_mem1_err_int",
        43,
        1
      ],
      [
        "lpm_payload_mem2_err_int",
        44,
        1
      ],
      [
        "lpm_payload_mem3_err_int",
        45,
        1
      ],
      [
        "lpm_payload_mem4_err_int",
        46,
        1
      ],
      [
        "lpm_payload_mem5_err_int",
        47,
        1
      ],
      [
        "lpm_group_rate_mem_err_int",
        48,
        1
      ],
      [
        "clpm_mmxbar0_err_int",
        49,
        1
      ],
      [
        "clpm_mmxbar1_err_int",
        50,
        1
      ],
      [
        "clpm_mmxbar2_err_int",
        51,
        1
      ],
      [
        "clpm_mmxbar3_err_int",
        52,
        1
      ],
      [
        "clpm_mmxbar4_err_int",
        53,
        1
      ],
      [
        "clpm_mmxbar5_err_int",
        54,
        1
      ],
      [
        "clpm_mmxbar6_err_int",
        55,
        1
      ],
      [
        "clpm_mmxbar7_err_int",
        56,
        1
      ],
      [
        "clpm_mmxbar8_err_int",
        57,
        1
      ],
      [
        "clpm_mmxbar9_err_int",
        58,
        1
      ],
      [
        "clpm_mmxbar10_err_int",
        59,
        1
      ],
      [
        "clpm_mmxbar11_err_int",
        60,
        1
      ],
      [
        "cem_age_table_err_int",
        61,
        1
      ],
      [
        "em_group_rate_mem_err_int",
        62,
        1
      ],
      [
        "cem_mmxbar0_err_int",
        63,
        1
      ],
      [
        "cem_mmxbar1_err_int",
        64,
        1
      ],
      [
        "cem_mmxbar2_err_int",
        65,
        1
      ],
      [
        "cem_mmxbar3_err_int",
        66,
        1
      ],
      [
        "cem_mmxbar4_err_int",
        67,
        1
      ],
      [
        "cem_mmxbar5_err_int",
        68,
        1
      ],
      [
        "cem_mmxbar6_err_int",
        69,
        1
      ],
      [
        "cem_mmxbar7_err_int",
        70,
        1
      ],
      [
        "cem_mmxbar8_err_int",
        71,
        1
      ],
      [
        "cem_mmxbar9_err_int",
        72,
        1
      ],
      [
        "cem_mmxbar10_err_int",
        73,
        1
      ],
      [
        "cem_mmxbar11_err_int",
        74,
        1
      ],
      [
        "clpm_group_map_tcam0_err_int",
        75,
        1
      ],
      [
        "clpm_group_map_tcam1_err_int",
        76,
        1
      ],
      [
        "clpm_group_map_tcam2_err_int",
        77,
        1
      ],
      [
        "clpm_group_map_tcam3_err_int",
        78,
        1
      ],
      [
        "clpm_group_map_tcam4_err_int",
        79,
        1
      ],
      [
        "clpm_group_map_tcam5_err_int",
        80,
        1
      ],
      [
        "clpm_group_map_tcam6_err_int",
        81,
        1
      ],
      [
        "clpm_group_map_tcam7_err_int",
        82,
        1
      ],
      [
        "clpm_group_map_tcam8_err_int",
        83,
        1
      ],
      [
        "clpm_group_map_tcam9_err_int",
        84,
        1
      ],
      [
        "clpm_group_map_tcam10_err_int",
        85,
        1
      ],
      [
        "clpm_group_map_tcam11_err_int",
        86,
        1
      ],
      [
        "hbm_reply_fifo0_err_int",
        87,
        1
      ],
      [
        "hbm_reply_fifo1_err_int",
        88,
        1
      ],
      [
        "hbm_reply_fifo2_err_int",
        89,
        1
      ],
      [
        "hbm_reply_fifo3_err_int",
        90,
        1
      ],
      [
        "hbm_reply_fifo4_err_int",
        91,
        1
      ],
      [
        "hbm_reply_fifo5_err_int",
        92,
        1
      ],
      [
        "hbm_reply_fifo6_err_int",
        93,
        1
      ],
      [
        "hbm_reply_fifo7_err_int",
        94,
        1
      ],
      [
        "hbm_reply_fifo8_err_int",
        95,
        1
      ],
      [
        "hbm_reply_fifo9_err_int",
        96,
        1
      ],
      [
        "hbm_reply_fifo10_err_int",
        97,
        1
      ],
      [
        "hbm_reply_fifo11_err_int",
        98,
        1
      ]
    ]
  },
  "cdb_top_selected_ser_error_info": {
    "type": "register",
    "block": "cdb_top",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "cdb_top_ser_error_debug_configuration": {
    "type": "register",
    "block": "cdb_top",
    "width": 8,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        7
      ],
      [
        "reset_memory_errors",
        7,
        1
      ]
    ]
  },
  "cdb_top_ecc_1b_err_debug": {
    "type": "register",
    "block": "cdb_top",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_top_ecc_2b_err_debug": {
    "type": "register",
    "block": "cdb_top",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_top_parity_err_debug": {
    "type": "register",
    "block": "cdb_top",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "cdb_top_tcam_bist_control": {
    "type": "register",
    "block": "cdb_top",
    "width": 4,
    "desc": "TCAM BIST control",
    "fields": [
      [
        "tcam_strw",
        0,
        2
      ],
      [
        "tcam_bist_rst",
        2,
        1
      ],
      [
        "tcam_bist_run",
        3,
        1
      ]
    ]
  },
  "cdb_top_tcam_bist_status": {
    "type": "register",
    "block": "cdb_top",
    "width": 24,
    "desc": "TCAM BIST pass fail status",
    "fields": [
      [
        "tcam_bist_done_pass_out",
        0,
        12
      ],
      [
        "tcam_bist_done_fail_out",
        12,
        12
      ]
    ]
  },
  "cdb_top_tcam_scan_period_cfg": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "cdb_top_counter_timer": {
    "type": "register",
    "block": "cdb_top",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "cdb_top_counter_timer_trigger_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "cdb_top_memory_access_timeout": {
    "type": "register",
    "block": "cdb_top",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "cdb_top_broadcast_config_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "cdb_top_memory_prot_bypass": {
    "type": "register",
    "block": "cdb_top",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "cdb_top_soft_reset_configuration": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "cdb_top_mbist_configuration": {
    "type": "register",
    "block": "cdb_top",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "cdb_top_power_down_configuration": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "cdb_top_spare_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "cdb_top_pmro_ctrl": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "cdb_top_pmro_status": {
    "type": "register",
    "block": "cdb_top",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "cdb_top_mirror_bus_conf_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "cdb_top_mirror_bus_status": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "cdb_top_device_time_offset_cfg": {
    "type": "register",
    "block": "cdb_top",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "cdb_top_cdb_core_interrupt_summary_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "Per slice configuration. Selects which results from the TCAM return to the silce forward/egress key search. There are 44 result, 5 from each ring, plus 4 results from spanned data base merger - the data base merges does priority decoding on result0 of each ring(there are 8 rings).",
    "fields": [
      [
        "cdb_core_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "cdb_top_cdb_core_interrupt_summary_reg_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register masks cdb_core[8]_interrupt_summary_reg interrupt register",
    "fields": [
      [
        "cdb_core_interrupt_summary_mask",
        0,
        1
      ]
    ]
  },
  "cdb_top_cdb_core_interrupt_summary_reg_test": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register tests cdb_core[8]_interrupt_summary_reg interrupt register",
    "fields": [
      [
        "cdb_core_interrupt_summary_test",
        0,
        1
      ]
    ]
  },
  "cdb_top_slice_result_index_select": {
    "type": "register",
    "block": "cdb_top",
    "width": 30,
    "desc": "Per slice configuration. Selects which results from the TCAM return to the silce forward/egress key search. There are 44 result, 5 from each ring, plus 4 results from spanned data base merger - the data base merges does priority decoding on result0 of each ring(there are 8 rings).",
    "fields": [
      [
        "slice_term_res_select",
        0,
        6
      ],
      [
        "slice_fwd0_res_select",
        6,
        6
      ],
      [
        "slice_fwd1_res_select",
        12,
        6
      ],
      [
        "slice_egr0_res_select",
        18,
        6
      ],
      [
        "slice_egr1_res_select",
        24,
        6
      ]
    ]
  },
  "cdb_top_dbm_join_rings": {
    "type": "register",
    "block": "cdb_top",
    "width": 8,
    "desc": "there are 4 data_base mergers - each one gets an 8 bit bitmap indicating which rings (out of the 8) it will prioritize to one result. Only ring-ch0 of the 5 ring results can be merged - so if you want data base that uese more than 1 ring - make sure it's key goes to ring-ch0",
    "fields": [
      [
        "dbm_use_rings",
        0,
        8
      ]
    ]
  },
  "cdb_top_ring_channel_select": {
    "type": "register",
    "block": "cdb_top",
    "width": 25,
    "desc": "per ring configuration. Maps slices keys to a ring channel. There are 30 slice keys, and 5 ring  channels in each ring(there are 8 rings).  0=slice0_term,  1=slice0_fwd0,  2=slice0_fwd1 3=slice0_egr0, 4=slice0_egr1, 5 =slice1_term 6=slice1_fwd0 ...etc.",
    "fields": [
      [
        "cdb_core_ring_ch0_select",
        0,
        5
      ],
      [
        "cdb_core_ring_ch1_select",
        5,
        5
      ],
      [
        "cdb_core_ring_ch2_select",
        10,
        5
      ],
      [
        "cdb_core_ring_ch3_select",
        15,
        5
      ],
      [
        "cdb_core_ring_ch4_select",
        20,
        5
      ]
    ]
  },
  "cdb_top_max_hbm_req_per_slice_if": {
    "type": "register",
    "block": "cdb_top",
    "width": 8,
    "desc": "number of hbm requests each slice if (12 in total) can send to the HBM",
    "fields": [
      [
        "max_hbm_req_per_slice_interface",
        0,
        8
      ]
    ]
  },
  "cdb_top_lpm_uneven_load_blance": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "Uneven access rate between the LPM instances",
    "fields": [
      [
        "lpm_uneven_load_balance",
        0,
        1
      ]
    ]
  },
  "cdb_top_lpm_uneven_load_blance_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register masks lpm_uneven_load_blance interrupt register",
    "fields": [
      [
        "lpm_uneven_load_balance_mask",
        0,
        1
      ]
    ]
  },
  "cdb_top_lpm_uneven_load_blance_test": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register tests lpm_uneven_load_blance interrupt register",
    "fields": [
      [
        "lpm_uneven_load_balance_test",
        0,
        1
      ]
    ]
  },
  "cdb_top_lpm_access_rate_counters": {
    "type": "register",
    "block": "cdb_top",
    "width": 96,
    "desc": "LPM instance and LPM group access rate counters",
    "fields": [
      [
        "lpm_inst_rate_counter_refresh_period",
        0,
        32
      ],
      [
        "lpm_inst_uneven_load_threshold",
        32,
        32
      ],
      [
        "lpm_group_rate_counter_refresh_period",
        64,
        32
      ]
    ]
  },
  "cdb_top_lpm_access_rate_counters_interrupt": {
    "type": "register",
    "block": "cdb_top",
    "width": 4,
    "desc": "LPM instance and LPM group access rate counters",
    "fields": [
      [
        "uneven_load_balance_lpm_instance",
        0,
        4
      ]
    ]
  },
  "cdb_top_cem_uneven_load_blance": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "Uneven access rate between the EM instances",
    "fields": [
      [
        "cem_uneven_load_balance",
        0,
        1
      ]
    ]
  },
  "cdb_top_cem_uneven_load_blance_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register masks cem_uneven_load_blance interrupt register",
    "fields": [
      [
        "cem_uneven_load_balance_mask",
        0,
        1
      ]
    ]
  },
  "cdb_top_cem_uneven_load_blance_test": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register tests cem_uneven_load_blance interrupt register",
    "fields": [
      [
        "cem_uneven_load_balance_test",
        0,
        1
      ]
    ]
  },
  "cdb_top_cem_group_map_table": {
    "type": "register",
    "block": "cdb_top",
    "width": 4,
    "desc": "Map an EM group to an EM instance",
    "fields": [
      [
        "group_to_em_map",
        0,
        4
      ]
    ]
  },
  "cdb_top_cem_group_crc_init_val": {
    "type": "register",
    "block": "cdb_top",
    "width": 8,
    "desc": "the start vector for the crc to convert key to EM group",
    "fields": [
      [
        "key_to_group_crc_init_val",
        0,
        8
      ]
    ]
  },
  "cdb_top_cem_access_rate_counters": {
    "type": "register",
    "block": "cdb_top",
    "width": 96,
    "desc": "EM instance and EM group access rate counters",
    "fields": [
      [
        "em_inst_rate_counter_refresh_period",
        0,
        32
      ],
      [
        "em_inst_uneven_load_threshold",
        32,
        32
      ],
      [
        "em_group_rate_counter_refresh_period",
        64,
        32
      ]
    ]
  },
  "cdb_top_cem_access_rate_counters_interrupt": {
    "type": "register",
    "block": "cdb_top",
    "width": 4,
    "desc": "EM instance and EM group access rate counters",
    "fields": [
      [
        "uneven_load_balance_em_instance",
        0,
        4
      ]
    ]
  },
  "cdb_top_mng_lrn_wrr_access_ration": {
    "type": "register",
    "block": "cdb_top",
    "width": 14,
    "desc": "weights for the WRR between the management and learn interface",
    "fields": [
      [
        "mng_wrr_weight",
        0,
        7
      ],
      [
        "lrn_wrr_weight",
        7,
        7
      ]
    ]
  },
  "cdb_top_learn_manager_cfg_max_learn_type": {
    "type": "register",
    "block": "cdb_top",
    "width": 2,
    "desc": "Type of learning",
    "fields": [
      [
        "local_learning",
        0,
        1
      ],
      [
        "system_learning",
        1,
        1
      ]
    ]
  },
  "cdb_top_learn_manager_ldb_cfg": {
    "type": "register",
    "block": "cdb_top",
    "width": 7,
    "desc": "configures logical data base (ldb) with and id",
    "fields": [
      [
        "mact_ldb_width",
        0,
        3
      ],
      [
        "mact_ldb",
        3,
        4
      ]
    ]
  },
  "cdb_top_em_key_width": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "The key used by the EM. ",
    "fields": [
      [
        "key_width",
        0,
        32
      ]
    ]
  },
  "cdb_top_active_banks": {
    "type": "register",
    "block": "cdb_top",
    "width": 28,
    "desc": "The active banks of the CEM, 16 EM, each has up to 16 banks",
    "fields": [
      [
        "active_banks",
        0,
        28
      ]
    ]
  },
  "cdb_top_cdsp_reply_format_setting": {
    "type": "register",
    "block": "cdb_top",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "format_result_to_standart",
        0,
        1
      ],
      [
        "em_reply_encoding",
        1,
        2
      ],
      [
        "l3_dlp_reply_encoding",
        3,
        2
      ],
      [
        "host_reply_encoding",
        5,
        2
      ],
      [
        "lpm_reply_encoding",
        7,
        2
      ]
    ]
  },
  "cdb_top_cdsp_default_location_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "default_location",
        0,
        8
      ]
    ]
  },
  "cdb_top_cdsp_em_payload_mapping": {
    "type": "register",
    "block": "cdb_top",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "em_payload_msb_mapping",
        0,
        6
      ]
    ]
  },
  "cdb_top_access_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "arc_access_reg",
        0,
        32
      ]
    ]
  },
  "cdb_top_valid_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "arc_valid_reg",
        0,
        32
      ],
      [
        "arc_valid_reg_mask",
        32,
        32
      ]
    ]
  },
  "cdb_top_bulk_update_regs": {
    "type": "register",
    "block": "cdb_top",
    "width": 53,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "bulk_update_interval",
        0,
        17
      ],
      [
        "bulk_update_cycle",
        17,
        36
      ]
    ]
  },
  "cdb_top_aging_regs": {
    "type": "register",
    "block": "cdb_top",
    "width": 54,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "aging_interval",
        0,
        17
      ],
      [
        "aging_cycle",
        17,
        36
      ],
      [
        "aging_enable",
        53,
        1
      ]
    ]
  },
  "cdb_top_aging_overflow": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "aging_overflow",
        0,
        1
      ]
    ]
  },
  "cdb_top_aging_overflow_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register masks AgingOverflow interrupt register",
    "fields": [
      [
        "aging_overflow_mask",
        0,
        1
      ]
    ]
  },
  "cdb_top_aging_overflow_test": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register tests AgingOverflow interrupt register",
    "fields": [
      [
        "aging_overflow_test",
        0,
        1
      ]
    ]
  },
  "cdb_top_age_refresh_value_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "age_refresh_value",
        0,
        3
      ]
    ]
  },
  "cdb_top_bulk_update_overflow": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "bulk_update_overflow",
        0,
        1
      ]
    ]
  },
  "cdb_top_bulk_update_overflow_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register masks BulkUpdateOverflow interrupt register",
    "fields": [
      [
        "bulk_update_overflow_mask",
        0,
        1
      ]
    ]
  },
  "cdb_top_bulk_update_overflow_test": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register tests BulkUpdateOverflow interrupt register",
    "fields": [
      [
        "bulk_update_overflow_test",
        0,
        1
      ]
    ]
  },
  "cdb_top_arc_interrupt_to_cpu": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "cem_mng2css_interrupt",
        0,
        1
      ]
    ]
  },
  "cdb_top_arc_interrupt_to_cpu_mask": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register masks arc_interrupt_to_cpu interrupt register",
    "fields": [
      [
        "cem_mng2css_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "cdb_top_arc_interrupt_to_cpu_test": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "This register tests arc_interrupt_to_cpu interrupt register",
    "fields": [
      [
        "cem_mng2css_interrupt_test",
        0,
        1
      ]
    ]
  },
  "cdb_top_bulk_update_init_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "bulk_update_init",
        0,
        1
      ]
    ]
  },
  "cdb_top_bulk_update_done_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "bulk_update_done",
        0,
        1
      ]
    ]
  },
  "cdb_top_arc_interrupt_masks": {
    "type": "register",
    "block": "cdb_top",
    "width": 5,
    "desc": "Msak the interrupts genereted towards the ARC core",
    "fields": [
      [
        "interrupt_mask",
        0,
        5
      ]
    ]
  },
  "cdb_top_arc_control_registers": {
    "type": "register",
    "block": "cdb_top",
    "width": 11,
    "desc": "Msak the interrupts genereted towards the ARC core",
    "fields": [
      [
        "run_req",
        0,
        1
      ],
      [
        "halt_req",
        1,
        1
      ],
      [
        "arc_rst",
        2,
        1
      ],
      [
        "arc_num",
        3,
        8
      ]
    ]
  },
  "cdb_top_arc_run_response": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "run_ack",
        0,
        1
      ]
    ]
  },
  "cdb_top_arc_halt_response": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "halt_ack",
        0,
        1
      ]
    ]
  },
  "cdb_top_arc_status_registers": {
    "type": "register",
    "block": "cdb_top",
    "width": 5,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "sys_halt",
        0,
        1
      ],
      [
        "sys_sleep",
        1,
        1
      ],
      [
        "sys_sleep_mode",
        2,
        3
      ]
    ]
  },
  "cdb_top_arc_mem_regs": {
    "type": "register",
    "block": "cdb_top",
    "width": 14,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "ccm_wr",
        0,
        1
      ],
      [
        "access_iccm",
        1,
        1
      ],
      [
        "ccm_addr",
        2,
        12
      ]
    ]
  },
  "cdb_top_arc_mem_ccm_data": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "ccm_data",
        0,
        32
      ]
    ]
  },
  "cdb_top_arc_mem_start": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "CEM ARC usage registers",
    "fields": [
      [
        "start",
        0,
        1
      ]
    ]
  },
  "cdb_top_cdb_debug_data_bus_register": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "cdb_debug_data_bus",
        0,
        64
      ]
    ]
  },
  "cdb_top_cdb_debug_data_select_register": {
    "type": "register",
    "block": "cdb_top",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "cdb_debug_data_select",
        0,
        9
      ]
    ]
  },
  "cdb_top_accessed_hbm_buckets": {
    "type": "register",
    "block": "cdb_top",
    "width": 2440,
    "desc": "collected hbm buckets that were recently accessed bu the LPM cores",
    "fields": [
      [
        "accessed_hbm_buckets_array",
        0,
        2432
      ],
      [
        "accessed_hbm_buckets_num",
        2432,
        8
      ]
    ]
  },
  "cdb_top_hbm_accessed_buckets_wr": {
    "type": "register",
    "block": "cdb_top",
    "width": 1,
    "desc": "Register for controling the cdb_accessed_hbm_buckets register",
    "fields": [
      [
        "hbm_accessed_buckets_wr_data",
        0,
        1
      ]
    ]
  },
  "cdb_top_mmu_bubble_req_cfg_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 10,
    "desc": "Register for controling bubble rate towrads the clpm-mmx due to mmu replies waiting in fifos",
    "fields": [
      [
        "mmu_bubble_req_cfg",
        0,
        10
      ]
    ]
  },
  "cdb_top_clpm_mmx_bubble_per_src_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 9,
    "desc": "Configurtions for the bubbles creation when an HBM reply is waiting to return to the slice ",
    "fields": [
      [
        "clpm_mmx_bubble_per_src_th",
        0,
        8
      ],
      [
        "clpm_mmx_bubble_on_reply_disable",
        8,
        1
      ]
    ]
  },
  "cdb_top_learn_host_cbt_not_rdy_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "countes number of clocks in which learn cbt had no credits for sending learn command to the npu host",
    "fields": [
      [
        "learn_host_cbt_not_rdy_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_clpm_mmu_cbt_not_rdy_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "countes number of clocks in which clpm cbt had no credits for sending lookups to the mmu. Counter per mmu interface",
    "fields": [
      [
        "clpm_mmu_cbt_not_rdy_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_clpm_mmu_cbr_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 4,
    "desc": "maximum occupancy the cbr in the lpm-clpm-mmu if experienced",
    "fields": [
      [
        "clpm_mmu_cbr_wm",
        0,
        4
      ]
    ]
  },
  "cdb_top_rxpp_clpm_cbr_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 7,
    "desc": "maximum occupancy the cbr in the rxpp-clpm if experienced",
    "fields": [
      [
        "rxpp_clpm_cbr_wm",
        0,
        7
      ]
    ]
  },
  "cdb_top_rxpp_splitter_cbr_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 7,
    "desc": "maximum occupancy the cbr in the rxpp-splitter if experienced",
    "fields": [
      [
        "rxpp_splitter_cbr_wm",
        0,
        7
      ]
    ]
  },
  "cdb_top_rxpp_cem_cbr_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 7,
    "desc": "maximum occupancy the cbr in the rxpp-cem if experienced",
    "fields": [
      [
        "rxpp_cem_cbr_wm",
        0,
        7
      ]
    ]
  },
  "cdb_top_rxpp_learn_cbr_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 7,
    "desc": "maximum occupancy the cbr in the rxpp-cem if experienced",
    "fields": [
      [
        "rxpp_learn_cbr_wm",
        0,
        7
      ]
    ]
  },
  "cdb_top_npuh_learn_cbr_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 7,
    "desc": "maximum occupancy the cbr in the npuh-learn if experienced",
    "fields": [
      [
        "npuh_learn_cbr_wm",
        0,
        7
      ]
    ]
  },
  "cdb_top_learn_arc_fifo_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 5,
    "desc": "maximum occupancy the arc fifo of the cdb-learn logic had",
    "fields": [
      [
        "learn_arc_fifo_wm",
        0,
        5
      ]
    ]
  },
  "cdb_top_slice_if_hbm_denied_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of hbm denied each slice if got",
    "fields": [
      [
        "slice_if_hbm_denied_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_slice_if_hbm_miso_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 8,
    "desc": "maximum occupancy the HBM reply 2-in-1-out fifo had, per slice interface.",
    "fields": [
      [
        "slice_if_hbm_miso_wm",
        0,
        8
      ]
    ]
  },
  "cdb_top_hbm_if_req_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup requests sent to the HBM, per GBM interface",
    "fields": [
      [
        "hbm_if_req_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_slice_if_splitter_req_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup requests sent to the splitter, per slice interface",
    "fields": [
      [
        "slice_if_splitter_req_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_slice_if_lpm_req_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup requests sent to the lpm, per slice interface",
    "fields": [
      [
        "slice_if_lpm_req_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_slice_if_em_req_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup requests sent to the em, per slice interface",
    "fields": [
      [
        "slice_if_em_req_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_slice_if_splitter_reply_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup replys sent from the splitter, per slice interface",
    "fields": [
      [
        "slice_if_splitter_reply_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_slice_if_lpm_reply_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup replys sent from the lpm, per slice interface",
    "fields": [
      [
        "slice_if_lpm_reply_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_slice_if_em_reply_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup replys sent from the em, per slice interface",
    "fields": [
      [
        "slice_if_em_reply_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_slice_if_lpm_free_buff_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 9,
    "desc": "number of buffers left in the slice-lpm-if",
    "fields": [
      [
        "slice_if_lpm_free_buff_wm",
        0,
        9
      ]
    ]
  },
  "cdb_top_slice_if_splitter_free_buff_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 9,
    "desc": "number of buffers left in the slice-splitter-if",
    "fields": [
      [
        "slice_if_splitter_free_buff_wm",
        0,
        9
      ]
    ]
  },
  "cdb_top_learn_free_buff_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 5,
    "desc": "number of buffers left in the cdb lerarn",
    "fields": [
      [
        "learn_free_buff_wm",
        0,
        5
      ]
    ]
  },
  "cdb_top_mmu_free_buff_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 9,
    "desc": "number of buffers left in the clpm-mmu if",
    "fields": [
      [
        "mmu_free_buff_wm",
        0,
        9
      ]
    ]
  },
  "cdb_top_slice_if_lpm_delay_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "delay measuremeant on lpm lookups",
    "fields": [
      [
        "slice_if_lpm_delay",
        0,
        32
      ]
    ]
  },
  "cdb_top_slice_if_splitter_delay_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "delay measuremeant on splitter lookups",
    "fields": [
      [
        "slice_if_splitter_delay",
        0,
        32
      ]
    ]
  },
  "cdb_top_slice_if_em_delay_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "delay measuremeant on em lookups",
    "fields": [
      [
        "slice_if_em_delay",
        0,
        32
      ]
    ]
  },
  "cdb_top_mmu_if_delay_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 32,
    "desc": "delay measuremeant on em lookups",
    "fields": [
      [
        "mmu_if_delay",
        0,
        32
      ]
    ]
  },
  "cdb_top_cem_mmx_fifo_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 5,
    "desc": "maximum occupancy the mmx fifos of the cem-mmx",
    "fields": [
      [
        "cem_mmx_fifo_wm",
        0,
        5
      ]
    ]
  },
  "cdb_top_clpm_mmx_fifo_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 5,
    "desc": "maximum occupancy the mmx fifos of the clpm-mmx",
    "fields": [
      [
        "clpm_mmx_fifo_wm",
        0,
        5
      ]
    ]
  },
  "cdb_top_lrn_lkp_req_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup requests sent to the em, per slice interface",
    "fields": [
      [
        "lrn_lkp_req_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_lrn_lkp_reply_cnt_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 64,
    "desc": "number of lookup requests sent to the em, per slice interface",
    "fields": [
      [
        "lrn_lkp_reply_cnt",
        0,
        64
      ]
    ]
  },
  "cdb_top_mmu_if_cbr_wm_reg": {
    "type": "register",
    "block": "cdb_top",
    "width": 7,
    "desc": "max WM of mmu reply CBR",
    "fields": [
      [
        "mmu_if_cbr_wm",
        0,
        7
      ]
    ]
  },
  "cdb_top_cem_iccm": {
    "type": "memory",
    "block": "cdb_top",
    "width": 32,
    "desc": "ICCM for CEM ARC",
    "fields": [
      [
        "iccm_line",
        0,
        32
      ]
    ]
  },
  "cdb_top_cem_dccm": {
    "type": "memory",
    "block": "cdb_top",
    "width": 32,
    "desc": "DCCM for CEM ARC",
    "fields": [
      [
        "dccm_line",
        0,
        32
      ]
    ]
  },
  "cdb_top_counters": {
    "type": "memory",
    "block": "cdb_top",
    "width": 20,
    "desc": "Counters used by the ARC Procedures",
    "fields": [
      [
        "count_line",
        0,
        20
      ]
    ]
  },
  "cdb_top_key_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 156,
    "desc": "for splitter interface",
    "fields": [
      [
        "key_mem_field",
        0,
        156
      ]
    ]
  },
  "cdb_top_cdsp_small_cbr_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 157,
    "desc": "",
    "fields": [
      [
        "cdsp_small_cbr",
        0,
        157
      ]
    ]
  },
  "cdb_top_cdsp_big_cbr_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 157,
    "desc": "",
    "fields": [
      [
        "cdsp_big_cbr",
        0,
        157
      ]
    ]
  },
  "cdb_top_lpm_key_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 156,
    "desc": "for lpm if",
    "fields": [
      [
        "lpm_key_mem_field",
        0,
        156
      ]
    ]
  },
  "cdb_top_lpm_big_cbr_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 155,
    "desc": "",
    "fields": [
      [
        "lpm_big_cbr_mem_field",
        0,
        155
      ]
    ]
  },
  "cdb_top_lpm_small_cbr_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 155,
    "desc": "",
    "fields": [
      [
        "lpm_small_cbr_mem_field",
        0,
        155
      ]
    ]
  },
  "cdb_top_em_big_cbr_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 155,
    "desc": "",
    "fields": [
      [
        "em_big_cbr_mem_field",
        0,
        155
      ]
    ]
  },
  "cdb_top_learn_big_cbr_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 83,
    "desc": "",
    "fields": [
      [
        "learn_big_cbr_mem_field",
        0,
        83
      ]
    ]
  },
  "cdb_top_learn_small_cbr_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 83,
    "desc": "",
    "fields": [
      [
        "learn_small_cbr_mem_field",
        0,
        83
      ]
    ]
  },
  "cdb_top_em_payload_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 65,
    "desc": "",
    "fields": [
      [
        "em_payload_mem_field",
        0,
        65
      ]
    ]
  },
  "cdb_top_lpm_payload_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 68,
    "desc": "",
    "fields": [
      [
        "lpm_payload_mem_field",
        0,
        68
      ]
    ]
  },
  "cdb_top_lpm_inst_rate_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 33,
    "desc": "Some desc for mem2",
    "fields": [
      [
        "lpm_inst_rate_entry",
        0,
        33
      ]
    ]
  },
  "cdb_top_lpm_group_rate_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 33,
    "desc": "Some desc ",
    "fields": [
      [
        "lpm_group_rate_entry",
        0,
        33
      ]
    ]
  },
  "cdb_top_clpm_mmxbar": {
    "type": "memory",
    "block": "cdb_top",
    "width": 155,
    "desc": "Some desc ",
    "fields": [
      [
        "clpm_mmxbar_entry",
        0,
        155
      ]
    ]
  },
  "cdb_top_cem_age_table": {
    "type": "memory",
    "block": "cdb_top",
    "width": 448,
    "desc": "Some desc for mem2",
    "fields": [
      [
        "age",
        0,
        448
      ]
    ]
  },
  "cdb_top_em_inst_rate_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 33,
    "desc": "Some desc for mem2",
    "fields": [
      [
        "rate_cntr",
        0,
        33
      ]
    ]
  },
  "cdb_top_em_group_rate_mem": {
    "type": "memory",
    "block": "cdb_top",
    "width": 33,
    "desc": "Some desc ",
    "fields": [
      [
        "rate",
        0,
        33
      ]
    ]
  },
  "cdb_top_cem_mmxbar": {
    "type": "memory",
    "block": "cdb_top",
    "width": 160,
    "desc": "Some desc ",
    "fields": [
      [
        "mmxbar_entry",
        0,
        160
      ]
    ]
  },
  "cdb_top_clpm_group_map_tcam": {
    "type": "memory",
    "block": "cdb_top",
    "width": 80,
    "desc": "Some desc for mem1",
    "fields": [
      [
        "clpm_group_map_tcam_key",
        0,
        80
      ],
      [
        "clpm_group_map_tcam_delete",
        80,
        1
      ]
    ]
  },
  "cdb_top_clpm_tcam_index_to_lpm_group_map_regs": {
    "type": "memory",
    "block": "cdb_top",
    "width": 7,
    "desc": "maps tcam hit index to group. Later on this group will be mapped to lpm_core",
    "fields": [
      [
        "clpm_group",
        0,
        7
      ]
    ]
  },
  "cdb_top_clpm_group_to_lpm_core_map_regs": {
    "type": "memory",
    "block": "cdb_top",
    "width": 4,
    "desc": "maps lpm group to lpm_core",
    "fields": [
      [
        "lpm_core",
        0,
        4
      ]
    ]
  },
  "cdb_top_hbm_reply_fifo": {
    "type": "memory",
    "block": "cdb_top",
    "width": 76,
    "desc": "Some desc ",
    "fields": [
      [
        "hbm_reply_fifo_entry",
        0,
        76
      ]
    ]
  },
  "fi_interrupt_register": {
    "type": "register",
    "block": "fi",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "fi_engine_interrupts_summary",
        1,
        1
      ]
    ]
  },
  "fi_mem_protect_interrupt": {
    "type": "register",
    "block": "fi",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "fi_mem_protect_interrupt_test": {
    "type": "register",
    "block": "fi",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "fi_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fi",
    "width": 2,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "fi_core_macro_config_table_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "fi_core_tcam_assoc_data_ecc_1b_err_interrupt_mask",
        1,
        1
      ]
    ]
  },
  "fi_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fi",
    "width": 2,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "fi_core_macro_config_table_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "fi_core_tcam_assoc_data_ecc_2b_err_interrupt_mask",
        1,
        1
      ]
    ]
  },
  "fi_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "fi",
    "width": 3,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "fi_engine_header_array_parity_err_interrupt_mask",
        0,
        1
      ],
      [
        "fi_engine_partial_header_parity_err_interrupt_mask",
        1,
        1
      ],
      [
        "fi_core_tcam_parity_err_interrupt_mask",
        2,
        1
      ]
    ]
  },
  "fi_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "fi",
    "width": 2,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "fi_core_macro_config_table_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "fi_core_tcam_assoc_data_ecc_1b_err_initiate",
        1,
        1
      ]
    ]
  },
  "fi_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "fi",
    "width": 2,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "fi_core_macro_config_table_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "fi_core_tcam_assoc_data_ecc_2b_err_initiate",
        1,
        1
      ]
    ]
  },
  "fi_parity_err_initiate_register": {
    "type": "register",
    "block": "fi",
    "width": 3,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "fi_engine_header_array_parity_err_initiate",
        0,
        1
      ],
      [
        "fi_engine_partial_header_parity_err_initiate",
        1,
        1
      ],
      [
        "fi_core_tcam_parity_err_initiate",
        2,
        1
      ]
    ]
  },
  "fi_mem_protect_err_status": {
    "type": "register",
    "block": "fi",
    "width": 5,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "fi_core_macro_config_table_err_int",
        0,
        1
      ],
      [
        "fi_core_tcam_assoc_data_err_int",
        1,
        1
      ],
      [
        "fi_engine_header_array_err_int",
        2,
        1
      ],
      [
        "fi_engine_partial_header_err_int",
        3,
        1
      ],
      [
        "fi_core_tcam_err_int",
        4,
        1
      ]
    ]
  },
  "fi_selected_ser_error_info": {
    "type": "register",
    "block": "fi",
    "width": 9,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        7
      ],
      [
        "mem_err_type",
        7,
        2
      ]
    ]
  },
  "fi_ser_error_debug_configuration": {
    "type": "register",
    "block": "fi",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "fi_ecc_1b_err_debug": {
    "type": "register",
    "block": "fi",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "fi_ecc_2b_err_debug": {
    "type": "register",
    "block": "fi",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "fi_parity_err_debug": {
    "type": "register",
    "block": "fi",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "fi_tcam_bist_control": {
    "type": "register",
    "block": "fi",
    "width": 4,
    "desc": "TCAM BIST control",
    "fields": [
      [
        "tcam_strw",
        0,
        2
      ],
      [
        "tcam_bist_rst",
        2,
        1
      ],
      [
        "tcam_bist_run",
        3,
        1
      ]
    ]
  },
  "fi_tcam_bist_status": {
    "type": "register",
    "block": "fi",
    "width": 2,
    "desc": "TCAM BIST pass fail status",
    "fields": [
      [
        "tcam_bist_done_pass_out",
        0,
        1
      ],
      [
        "tcam_bist_done_fail_out",
        1,
        1
      ]
    ]
  },
  "fi_tcam_scan_period_cfg": {
    "type": "register",
    "block": "fi",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "fi_counter_timer": {
    "type": "register",
    "block": "fi",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "fi_counter_timer_trigger_reg": {
    "type": "register",
    "block": "fi",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "fi_memory_access_timeout": {
    "type": "register",
    "block": "fi",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "fi_broadcast_config_reg": {
    "type": "register",
    "block": "fi",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "fi_memory_prot_bypass": {
    "type": "register",
    "block": "fi",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "fi_soft_reset_configuration": {
    "type": "register",
    "block": "fi",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "fi_mbist_configuration": {
    "type": "register",
    "block": "fi",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "fi_power_down_configuration": {
    "type": "register",
    "block": "fi",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "fi_spare_reg": {
    "type": "register",
    "block": "fi",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "fi_pmro_ctrl": {
    "type": "register",
    "block": "fi",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "fi_pmro_status": {
    "type": "register",
    "block": "fi",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "fi_mirror_bus_conf_reg": {
    "type": "register",
    "block": "fi",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "fi_mirror_bus_status": {
    "type": "register",
    "block": "fi",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "fi_device_time_offset_cfg": {
    "type": "register",
    "block": "fi",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "fi_fis_cfg_max_fi_cycles": {
    "type": "register",
    "block": "fi",
    "width": 5,
    "desc": "Max number of cycles  that a packet may stay in the FI core ",
    "fields": [
      [
        "fis_cfg_max_fi_cycles_r",
        0,
        5
      ]
    ]
  },
  "fi_error_entry_reg": {
    "type": "register",
    "block": "fi",
    "width": 6,
    "desc": "When a memory has multiple parity error on  a memory address, this register is used to remove the address from the FI memory address manager",
    "fields": [
      [
        "dont_return_entry_valid",
        0,
        1
      ],
      [
        "dont_return_entry",
        1,
        5
      ]
    ]
  },
  "fi_ipv4_error_checks": {
    "type": "register",
    "block": "fi",
    "width": 6,
    "desc": "Which error checks to perform for IPv4 headers",
    "fields": [
      [
        "check_ipv4_checksum_error",
        0,
        1
      ],
      [
        "check_ipv4_ttl_error",
        1,
        1
      ],
      [
        "check_ipv4_version_error",
        2,
        1
      ],
      [
        "check_ipv4_ihl_error",
        3,
        1
      ],
      [
        "check_ipv4_total_length_error",
        4,
        1
      ],
      [
        "check_ipv4_sip_mc_error",
        5,
        1
      ]
    ]
  },
  "fi_ethernet_error_checks": {
    "type": "register",
    "block": "fi",
    "width": 2,
    "desc": "Which error checks to perform for Ethernet headers",
    "fields": [
      [
        "check_eth_sa_mc_error",
        0,
        1
      ],
      [
        "check_eth_sa_da_error",
        1,
        1
      ]
    ]
  },
  "fi_debug_data_bus_register": {
    "type": "register",
    "block": "fi",
    "width": 32,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "fi_debug_data_select_register": {
    "type": "register",
    "block": "fi",
    "width": 4,
    "desc": "debug_data_select_register",
    "fields": [
      [
        "debug_data_select",
        0,
        4
      ]
    ]
  },
  "fi_fi_engine_interrupts": {
    "type": "register",
    "block": "fi",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "fi_ttl",
        0,
        1
      ],
      [
        "fi_total_offset",
        1,
        1
      ],
      [
        "fi_header_size",
        2,
        1
      ],
      [
        "fi_array_size",
        3,
        1
      ]
    ]
  },
  "fi_fi_engine_interrupts_mask": {
    "type": "register",
    "block": "fi",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "fi_ttl_mask",
        0,
        1
      ],
      [
        "fi_total_offset_mask",
        1,
        1
      ],
      [
        "fi_header_size_mask",
        2,
        1
      ],
      [
        "fi_array_size_mask",
        3,
        1
      ]
    ]
  },
  "fi_fi_engine_interrupts_test": {
    "type": "register",
    "block": "fi",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "fi_ttl_test",
        0,
        1
      ],
      [
        "fi_total_offset_test",
        1,
        1
      ],
      [
        "fi_header_size_test",
        2,
        1
      ],
      [
        "fi_array_size_test",
        3,
        1
      ]
    ]
  },
  "fi_ipv6_error_checks": {
    "type": "register",
    "block": "fi",
    "width": 4,
    "desc": "Which error checks to perform for IPv6 headers",
    "fields": [
      [
        "check_ipv6_hop_limit_error",
        0,
        1
      ],
      [
        "check_ipv6_version_error",
        1,
        1
      ],
      [
        "check_ipv6_size_error",
        2,
        1
      ],
      [
        "check_ipv6_sip_mc_error",
        3,
        1
      ]
    ]
  },
  "fi_fi_core_macro_config_table": {
    "type": "memory",
    "block": "fi",
    "width": 72,
    "desc": "A memory in FI core that holds instructions that configures FI core",
    "fields": [
      [
        "alu_fs1_offset",
        0,
        6
      ],
      [
        "alu_fs1_valid_bits",
        6,
        4
      ],
      [
        "alu_fs2_offset",
        10,
        6
      ],
      [
        "alu_fs2_valid_bits",
        16,
        4
      ],
      [
        "fs1_const",
        20,
        8
      ],
      [
        "fs2_const",
        28,
        8
      ],
      [
        "alu_mux1_select",
        36,
        1
      ],
      [
        "alu_mux2_select",
        37,
        1
      ],
      [
        "hw_logic_select",
        38,
        3
      ],
      [
        "alu_shift1",
        41,
        4
      ],
      [
        "alu_shift2",
        45,
        5
      ],
      [
        "tcam_key_inst0",
        50,
        11
      ],
      [
        "tcam_key_inst1",
        61,
        11
      ]
    ]
  },
  "fi_fi_core_tcam_assoc_data": {
    "type": "memory",
    "block": "fi",
    "width": 54,
    "desc": "tcam mem",
    "fields": [
      [
        "header_size",
        0,
        6
      ],
      [
        "header_format",
        6,
        8
      ],
      [
        "tcam_mask_hw_logic_header_size",
        14,
        6
      ],
      [
        "tcam_mask_hw_logic_header_format",
        20,
        8
      ],
      [
        "tcam_mask_hw_logic_last_macro",
        28,
        1
      ],
      [
        "tcam_mask_hw_logic_advance_data",
        29,
        1
      ],
      [
        "tcam_mask_alu_header_size",
        30,
        6
      ],
      [
        "tcam_mask_alu_header_format",
        36,
        8
      ],
      [
        "advance_data",
        44,
        1
      ],
      [
        "start_new_layer",
        45,
        1
      ],
      [
        "start_new_header",
        46,
        1
      ],
      [
        "last_macro",
        47,
        1
      ],
      [
        "next_macro",
        48,
        6
      ]
    ]
  },
  "fi_fi_engine_header_array": {
    "type": "memory",
    "block": "fi",
    "width": 180,
    "desc": "A memory in FI engine that holds the packet's resolved data to be transmitted to the FI stage",
    "fields": [
      [
        "header_format_identifier_array_data",
        0,
        160
      ],
      [
        "layer_array_data",
        160,
        10
      ],
      [
        "parity_bits",
        170,
        10
      ]
    ]
  },
  "fi_fi_engine_partial_header": {
    "type": "memory",
    "block": "fi",
    "width": 1150,
    "desc": "A memory in FI engine that holds the header data that entered the FI engine",
    "fields": [
      [
        "fi_engine_partial_header_f",
        0,
        1150
      ]
    ]
  },
  "fi_fi_core_tcam": {
    "type": "memory",
    "block": "fi",
    "width": 40,
    "desc": "FI core TCAM",
    "fields": [
      [
        "fi_core_tcam_delete",
        0,
        1
      ],
      [
        "fi_core_tcam_key",
        1,
        40
      ]
    ]
  },
  "npe_interrupt_register": {
    "type": "register",
    "block": "npe",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "npe_interrupts_summary",
        1,
        1
      ]
    ]
  },
  "npe_mem_protect_interrupt": {
    "type": "register",
    "block": "npe",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "npe_mem_protect_interrupt_test": {
    "type": "register",
    "block": "npe",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "npe_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "npe",
    "width": 41,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "scoper_macro_parity_err_interrupt_mask",
        0,
        1
      ],
      [
        "lookup_keys_selection_macro_parity_err_interrupt_mask",
        1,
        1
      ],
      [
        "lookup_keys_construction_macro_parity_err_interrupt_mask",
        2,
        1
      ],
      [
        "lookup_keys_selection_tcam_parity_err_interrupt_mask",
        3,
        1
      ],
      [
        "lookup_result_memory_a_parity_err_interrupt_mask",
        4,
        1
      ],
      [
        "lookup_result_memory_b_parity_err_interrupt_mask",
        5,
        1
      ],
      [
        "lookup_result_memory_c_parity_err_interrupt_mask",
        6,
        1
      ],
      [
        "lookup_result_memory_d_parity_err_interrupt_mask",
        7,
        1
      ],
      [
        "lookup_memory_a_high_parity_err_interrupt_mask",
        8,
        1
      ],
      [
        "lookup_memory_b_high_parity_err_interrupt_mask",
        9,
        1
      ],
      [
        "lookup_memory_c_high_parity_err_interrupt_mask",
        10,
        1
      ],
      [
        "lookup_memory_d_high_parity_err_interrupt_mask",
        11,
        1
      ],
      [
        "lookup_memory_a_low_parity_err_interrupt_mask",
        12,
        1
      ],
      [
        "lookup_memory_b_low_parity_err_interrupt_mask",
        13,
        1
      ],
      [
        "lookup_memory_c_low_parity_err_interrupt_mask",
        14,
        1
      ],
      [
        "lookup_memory_d_low_parity_err_interrupt_mask",
        15,
        1
      ],
      [
        "resolution_keys_selection_macro_parity_err_interrupt_mask",
        16,
        1
      ],
      [
        "resolution_keys_selection_tcam_low_parity_err_interrupt_mask",
        17,
        1
      ],
      [
        "resolution_keys_selection_tcam_high_parity_err_interrupt_mask",
        18,
        1
      ],
      [
        "pd_update_unified_buckets_control_parity_err_interrupt_mask",
        19,
        1
      ],
      [
        "data_bus_holder_high_parity_err_interrupt_mask",
        20,
        1
      ],
      [
        "data_bus_holder_low_parity_err_interrupt_mask",
        21,
        1
      ],
      [
        "lookup_core_tcam_parity_err_interrupt_mask",
        22,
        1
      ],
      [
        "lvr0_fs_instructions_parity_err_interrupt_mask",
        23,
        1
      ],
      [
        "lvr0_macro_cfg_parity_err_interrupt_mask",
        24,
        1
      ],
      [
        "lvr1_fs_instructions_parity_err_interrupt_mask",
        25,
        1
      ],
      [
        "lvr1_macro_cfg_parity_err_interrupt_mask",
        26,
        1
      ],
      [
        "lvr3_fs_instructions_parity_err_interrupt_mask",
        27,
        1
      ],
      [
        "lvr3_macro_cfg_parity_err_interrupt_mask",
        28,
        1
      ],
      [
        "traps_key_construction_macro_parity_err_interrupt_mask",
        29,
        1
      ],
      [
        "traps_tcam_parity_err_interrupt_mask",
        30,
        1
      ],
      [
        "lvr4_macro_cfg_parity_err_interrupt_mask",
        31,
        1
      ],
      [
        "shared_table0_parity_err_interrupt_mask",
        32,
        1
      ],
      [
        "shared_table1_parity_err_interrupt_mask",
        33,
        1
      ],
      [
        "shared_table2_parity_err_interrupt_mask",
        34,
        1
      ],
      [
        "shared_table3_parity_err_interrupt_mask",
        35,
        1
      ],
      [
        "shared_table4_parity_err_interrupt_mask",
        36,
        1
      ],
      [
        "shared_table5_parity_err_interrupt_mask",
        37,
        1
      ],
      [
        "shared_table6_parity_err_interrupt_mask",
        38,
        1
      ],
      [
        "shared_table7_parity_err_interrupt_mask",
        39,
        1
      ],
      [
        "thread_memory_parity_err_interrupt_mask",
        40,
        1
      ]
    ]
  },
  "npe_parity_err_initiate_register": {
    "type": "register",
    "block": "npe",
    "width": 41,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "scoper_macro_parity_err_initiate",
        0,
        1
      ],
      [
        "lookup_keys_selection_macro_parity_err_initiate",
        1,
        1
      ],
      [
        "lookup_keys_construction_macro_parity_err_initiate",
        2,
        1
      ],
      [
        "lookup_keys_selection_tcam_parity_err_initiate",
        3,
        1
      ],
      [
        "lookup_result_memory_a_parity_err_initiate",
        4,
        1
      ],
      [
        "lookup_result_memory_b_parity_err_initiate",
        5,
        1
      ],
      [
        "lookup_result_memory_c_parity_err_initiate",
        6,
        1
      ],
      [
        "lookup_result_memory_d_parity_err_initiate",
        7,
        1
      ],
      [
        "lookup_memory_a_high_parity_err_initiate",
        8,
        1
      ],
      [
        "lookup_memory_b_high_parity_err_initiate",
        9,
        1
      ],
      [
        "lookup_memory_c_high_parity_err_initiate",
        10,
        1
      ],
      [
        "lookup_memory_d_high_parity_err_initiate",
        11,
        1
      ],
      [
        "lookup_memory_a_low_parity_err_initiate",
        12,
        1
      ],
      [
        "lookup_memory_b_low_parity_err_initiate",
        13,
        1
      ],
      [
        "lookup_memory_c_low_parity_err_initiate",
        14,
        1
      ],
      [
        "lookup_memory_d_low_parity_err_initiate",
        15,
        1
      ],
      [
        "resolution_keys_selection_macro_parity_err_initiate",
        16,
        1
      ],
      [
        "resolution_keys_selection_tcam_low_parity_err_initiate",
        17,
        1
      ],
      [
        "resolution_keys_selection_tcam_high_parity_err_initiate",
        18,
        1
      ],
      [
        "pd_update_unified_buckets_control_parity_err_initiate",
        19,
        1
      ],
      [
        "data_bus_holder_high_parity_err_initiate",
        20,
        1
      ],
      [
        "data_bus_holder_low_parity_err_initiate",
        21,
        1
      ],
      [
        "lookup_core_tcam_parity_err_initiate",
        22,
        1
      ],
      [
        "lvr0_fs_instructions_parity_err_initiate",
        23,
        1
      ],
      [
        "lvr0_macro_cfg_parity_err_initiate",
        24,
        1
      ],
      [
        "lvr1_fs_instructions_parity_err_initiate",
        25,
        1
      ],
      [
        "lvr1_macro_cfg_parity_err_initiate",
        26,
        1
      ],
      [
        "lvr3_fs_instructions_parity_err_initiate",
        27,
        1
      ],
      [
        "lvr3_macro_cfg_parity_err_initiate",
        28,
        1
      ],
      [
        "traps_key_construction_macro_parity_err_initiate",
        29,
        1
      ],
      [
        "traps_tcam_parity_err_initiate",
        30,
        1
      ],
      [
        "lvr4_macro_cfg_parity_err_initiate",
        31,
        1
      ],
      [
        "shared_table0_parity_err_initiate",
        32,
        1
      ],
      [
        "shared_table1_parity_err_initiate",
        33,
        1
      ],
      [
        "shared_table2_parity_err_initiate",
        34,
        1
      ],
      [
        "shared_table3_parity_err_initiate",
        35,
        1
      ],
      [
        "shared_table4_parity_err_initiate",
        36,
        1
      ],
      [
        "shared_table5_parity_err_initiate",
        37,
        1
      ],
      [
        "shared_table6_parity_err_initiate",
        38,
        1
      ],
      [
        "shared_table7_parity_err_initiate",
        39,
        1
      ],
      [
        "thread_memory_parity_err_initiate",
        40,
        1
      ]
    ]
  },
  "npe_mem_protect_err_status": {
    "type": "register",
    "block": "npe",
    "width": 41,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "scoper_macro_err_int",
        0,
        1
      ],
      [
        "lookup_keys_selection_macro_err_int",
        1,
        1
      ],
      [
        "lookup_keys_construction_macro_err_int",
        2,
        1
      ],
      [
        "lookup_keys_selection_tcam_err_int",
        3,
        1
      ],
      [
        "lookup_result_memory_a_err_int",
        4,
        1
      ],
      [
        "lookup_result_memory_b_err_int",
        5,
        1
      ],
      [
        "lookup_result_memory_c_err_int",
        6,
        1
      ],
      [
        "lookup_result_memory_d_err_int",
        7,
        1
      ],
      [
        "lookup_memory_a_high_err_int",
        8,
        1
      ],
      [
        "lookup_memory_b_high_err_int",
        9,
        1
      ],
      [
        "lookup_memory_c_high_err_int",
        10,
        1
      ],
      [
        "lookup_memory_d_high_err_int",
        11,
        1
      ],
      [
        "lookup_memory_a_low_err_int",
        12,
        1
      ],
      [
        "lookup_memory_b_low_err_int",
        13,
        1
      ],
      [
        "lookup_memory_c_low_err_int",
        14,
        1
      ],
      [
        "lookup_memory_d_low_err_int",
        15,
        1
      ],
      [
        "resolution_keys_selection_macro_err_int",
        16,
        1
      ],
      [
        "resolution_keys_selection_tcam_low_err_int",
        17,
        1
      ],
      [
        "resolution_keys_selection_tcam_high_err_int",
        18,
        1
      ],
      [
        "pd_update_unified_buckets_control_err_int",
        19,
        1
      ],
      [
        "data_bus_holder_high_err_int",
        20,
        1
      ],
      [
        "data_bus_holder_low_err_int",
        21,
        1
      ],
      [
        "lookup_core_tcam_err_int",
        22,
        1
      ],
      [
        "lvr0_fs_instructions_err_int",
        23,
        1
      ],
      [
        "lvr0_macro_cfg_err_int",
        24,
        1
      ],
      [
        "lvr1_fs_instructions_err_int",
        25,
        1
      ],
      [
        "lvr1_macro_cfg_err_int",
        26,
        1
      ],
      [
        "lvr3_fs_instructions_err_int",
        27,
        1
      ],
      [
        "lvr3_macro_cfg_err_int",
        28,
        1
      ],
      [
        "traps_key_construction_macro_err_int",
        29,
        1
      ],
      [
        "traps_tcam_err_int",
        30,
        1
      ],
      [
        "lvr4_macro_cfg_err_int",
        31,
        1
      ],
      [
        "shared_table0_err_int",
        32,
        1
      ],
      [
        "shared_table1_err_int",
        33,
        1
      ],
      [
        "shared_table2_err_int",
        34,
        1
      ],
      [
        "shared_table3_err_int",
        35,
        1
      ],
      [
        "shared_table4_err_int",
        36,
        1
      ],
      [
        "shared_table5_err_int",
        37,
        1
      ],
      [
        "shared_table6_err_int",
        38,
        1
      ],
      [
        "shared_table7_err_int",
        39,
        1
      ],
      [
        "thread_memory_err_int",
        40,
        1
      ]
    ]
  },
  "npe_selected_ser_error_info": {
    "type": "register",
    "block": "npe",
    "width": 13,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        11
      ],
      [
        "mem_err_type",
        11,
        2
      ]
    ]
  },
  "npe_ser_error_debug_configuration": {
    "type": "register",
    "block": "npe",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "npe_parity_err_debug": {
    "type": "register",
    "block": "npe",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "npe_tcam_bist_control": {
    "type": "register",
    "block": "npe",
    "width": 4,
    "desc": "TCAM BIST control",
    "fields": [
      [
        "tcam_strw",
        0,
        2
      ],
      [
        "tcam_bist_rst",
        2,
        1
      ],
      [
        "tcam_bist_run",
        3,
        1
      ]
    ]
  },
  "npe_tcam_bist_status": {
    "type": "register",
    "block": "npe",
    "width": 10,
    "desc": "TCAM BIST pass fail status",
    "fields": [
      [
        "tcam_bist_done_pass_out",
        0,
        5
      ],
      [
        "tcam_bist_done_fail_out",
        5,
        5
      ]
    ]
  },
  "npe_tcam_scan_period_cfg": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "npe_counter_timer": {
    "type": "register",
    "block": "npe",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "npe_counter_timer_trigger_reg": {
    "type": "register",
    "block": "npe",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "npe_memory_access_timeout": {
    "type": "register",
    "block": "npe",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "npe_broadcast_config_reg": {
    "type": "register",
    "block": "npe",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "npe_memory_prot_bypass": {
    "type": "register",
    "block": "npe",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "npe_soft_reset_configuration": {
    "type": "register",
    "block": "npe",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "npe_mbist_configuration": {
    "type": "register",
    "block": "npe",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "npe_power_down_configuration": {
    "type": "register",
    "block": "npe",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "npe_spare_reg": {
    "type": "register",
    "block": "npe",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "npe_pmro_ctrl": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "npe_pmro_status": {
    "type": "register",
    "block": "npe",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "npe_mirror_bus_conf_reg": {
    "type": "register",
    "block": "npe",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "npe_mirror_bus_status": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "npe_device_time_offset_cfg": {
    "type": "register",
    "block": "npe",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "npe_debug_data_bus_register": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "npe_debug_data_select_register": {
    "type": "register",
    "block": "npe",
    "width": 10,
    "desc": "debug_data_select_register",
    "fields": [
      [
        "debug_data_select",
        0,
        10
      ]
    ]
  },
  "npe_debug_mcro_id_stack_register": {
    "type": "register",
    "block": "npe",
    "width": 36,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_mcro_id_stack",
        0,
        36
      ]
    ]
  },
  "npe_stop_macro_register": {
    "type": "register",
    "block": "npe",
    "width": 1,
    "desc": "stop macro from performing a loopback",
    "fields": [
      [
        "stop_macro",
        0,
        1
      ]
    ]
  },
  "npe_step_macro_register": {
    "type": "register",
    "block": "npe",
    "width": 1,
    "desc": "continue one loopback",
    "fields": [
      [
        "step_macro",
        0,
        1
      ]
    ]
  },
  "npe_lookup_keys_selection_tcam_ranges": {
    "type": "register",
    "block": "npe",
    "width": 21,
    "desc": "Lookup core keys selection TCAM can be split to 4 buckets. Each field control the begning  of each range. Value of 0 means range is not valid.",
    "fields": [
      [
        "lkp_keys_sel_tcam_range1_start",
        0,
        7
      ],
      [
        "lkp_keys_sel_tcam_range2_start",
        7,
        7
      ],
      [
        "lkp_keys_sel_tcam_range3_start",
        14,
        7
      ]
    ]
  },
  "npe_resolution_keys_selection_bucket0_mask": {
    "type": "register",
    "block": "npe",
    "width": 64,
    "desc": "PD update TCAM holds 30 buckets. Bucket 0, which update the next-NPE-Macro-ID, can hold up to 64 entries. This register control the number of TCAM entries that are associated with bucket 0. ",
    "fields": [
      [
        "resolution_keys_selection_bucket0_mask_data",
        0,
        64
      ]
    ]
  },
  "npe_resolution_keys_selection_bucket_mask": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "PD update TCAM holds 30 buckets. Each of those registers control the number of TCAM entries be that are associated with the corresponded bucket.",
    "fields": [
      [
        "resolution_keys_selection_buckets_mask_bus",
        0,
        32
      ]
    ]
  },
  "npe_ready_in_out_cfg": {
    "type": "register",
    "block": "npe",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "next_ready_to_valid_latency",
        0,
        4
      ],
      [
        "prev_slot_ready_to_slot_used_latency",
        4,
        4
      ]
    ]
  },
  "npe_disable_thread": {
    "type": "register",
    "block": "npe",
    "width": 9,
    "desc": "Used when one of the Thread-index based memories has a continues SER. In this case the relevant Thread-index should be remove from the available pool. ",
    "fields": [
      [
        "disable_thread_valid",
        0,
        1
      ],
      [
        "disable_thread_id",
        1,
        8
      ]
    ]
  },
  "npe_general_cfg": {
    "type": "register",
    "block": "npe",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "my_macro_msbs",
        0,
        2
      ],
      [
        "lookup_core_high_tcam_start",
        2,
        7
      ],
      [
        "enable_counters_header_index_update",
        9,
        1
      ],
      [
        "enable_counters_compensation_index_update",
        10,
        1
      ],
      [
        "select_output_according_to_src",
        11,
        1
      ],
      [
        "enable_lookup_if0_order_keeping",
        12,
        1
      ],
      [
        "lookup_if0_order_keeping_priority_th",
        13,
        8
      ],
      [
        "enable_lookup_if1_order_keeping",
        21,
        1
      ],
      [
        "lookup_if1_order_keeping_priority_th",
        22,
        8
      ],
      [
        "enable_snoop_priority_over_redirect",
        30,
        1
      ],
      [
        "packet_stack_timer_timeout",
        31,
        32
      ],
      [
        "enable_timeout",
        63,
        1
      ]
    ]
  },
  "npe_traps_tcam_cfg": {
    "type": "register",
    "block": "npe",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "traps_redirect_tcam_start",
        0,
        7
      ]
    ]
  },
  "npe_npe_interrupts": {
    "type": "register",
    "block": "npe",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "counters_overflow",
        0,
        1
      ],
      [
        "packet_timeout",
        1,
        1
      ]
    ]
  },
  "npe_npe_interrupts_mask": {
    "type": "register",
    "block": "npe",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "counters_overflow_mask",
        0,
        1
      ],
      [
        "packet_timeout_mask",
        1,
        1
      ]
    ]
  },
  "npe_npe_interrupts_test": {
    "type": "register",
    "block": "npe",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "counters_overflow_test",
        0,
        1
      ],
      [
        "packet_timeout_test",
        1,
        1
      ]
    ]
  },
  "npe_packet_timeout_macro_id_reg": {
    "type": "register",
    "block": "npe",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "packet_timeout_macro_id",
        0,
        8
      ]
    ]
  },
  "npe_lvr_regtcam_use_logical_db_cfg": {
    "type": "register",
    "block": "npe",
    "width": 20,
    "desc": "Bit per register-TCAM. Control if to use logical databse bit when building the register-TCAM key.",
    "fields": [
      [
        "lvr0_regtcam0_use_logical_db_bit",
        0,
        2
      ],
      [
        "lvr0_regtcam1_use_logical_db_bit",
        2,
        2
      ],
      [
        "lvr0_regtcam2_use_logical_db_bit",
        4,
        2
      ],
      [
        "lvr0_regtcam3_use_logical_db_bit",
        6,
        2
      ],
      [
        "lvr1_regtcam0_use_logical_db_bit",
        8,
        2
      ],
      [
        "lvr3_regtcam0_use_logical_db_bit",
        10,
        2
      ],
      [
        "lvr3_regtcam1_use_logical_db_bit",
        12,
        2
      ],
      [
        "lvr3_regtcam2_use_logical_db_bit",
        14,
        2
      ],
      [
        "lvr4_regtcam0_use_logical_db_bit",
        16,
        2
      ],
      [
        "lvr4_regtcam1_use_logical_db_bit",
        18,
        2
      ]
    ]
  },
  "npe_shared_tables_cfg": {
    "type": "register",
    "block": "npe",
    "width": 64,
    "desc": "4 LVRs can access the shared tables (0,1,3,4). Each LVR output 3 keys. This register control over the connectivity of each table to a LVR interface.",
    "fields": [
      [
        "table0_src",
        0,
        4
      ],
      [
        "table1_src",
        4,
        4
      ],
      [
        "table2_src",
        8,
        4
      ],
      [
        "table3_src",
        12,
        4
      ],
      [
        "table4_src",
        16,
        4
      ],
      [
        "table5_src",
        20,
        2
      ],
      [
        "table6_src",
        22,
        2
      ],
      [
        "table7_src",
        24,
        4
      ],
      [
        "lvr0_pld0_src",
        28,
        3
      ],
      [
        "lvr0_pld1_src",
        31,
        3
      ],
      [
        "lvr0_pld2_src",
        34,
        3
      ],
      [
        "lvr1_pld0_src",
        37,
        3
      ],
      [
        "lvr1_pld1_src",
        40,
        3
      ],
      [
        "lvr1_pld2_src",
        43,
        3
      ],
      [
        "lvr3_pld0_src",
        46,
        3
      ],
      [
        "lvr3_pld1_src",
        49,
        3
      ],
      [
        "lvr3_pld2_src",
        52,
        3
      ],
      [
        "lvr4_pld0_src",
        55,
        3
      ],
      [
        "lvr4_pld1_src",
        58,
        3
      ],
      [
        "lvr4_pld2_src",
        61,
        3
      ]
    ]
  },
  "npe_npe_counters": {
    "type": "register",
    "block": "npe",
    "width": 192,
    "desc": "",
    "fields": [
      [
        "incoming_packets_counter",
        0,
        64
      ],
      [
        "loopback_packets_counter",
        64,
        64
      ],
      [
        "outgoing_packets_counter",
        128,
        64
      ]
    ]
  },
  "npe_npe_cbt_if_a_counters": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "cbt_if_a_counter",
        0,
        32
      ]
    ]
  },
  "npe_npe_cbt_if_b_counters": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "cbt_if_b_counter",
        0,
        32
      ]
    ]
  },
  "npe_npe_cbt_if_c_counters": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "cbt_if_c_counter",
        0,
        32
      ]
    ]
  },
  "npe_npe_cbt_if_d_counters": {
    "type": "register",
    "block": "npe",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "cbt_if_d_counter",
        0,
        32
      ]
    ]
  },
  "npe_npe_watermarks": {
    "type": "register",
    "block": "npe",
    "width": 184,
    "desc": "",
    "fields": [
      [
        "loopback_high_fifo_watermark",
        0,
        8
      ],
      [
        "loopback_low_fifo_watermark",
        8,
        8
      ],
      [
        "exit_high_src0_fifo_watermark",
        16,
        8
      ],
      [
        "exit_high_src1_fifo_watermark",
        24,
        8
      ],
      [
        "exit_low_src0_fifo_watermark",
        32,
        8
      ],
      [
        "exit_low_src1_fifo_watermark",
        40,
        8
      ],
      [
        "loopback_high_fifo_min_watermark",
        48,
        8
      ],
      [
        "loopback_low_fifo_min_watermark",
        56,
        8
      ],
      [
        "exit_high_src0_fifo_min_watermark",
        64,
        8
      ],
      [
        "exit_high_src1_fifo_min_watermark",
        72,
        8
      ],
      [
        "exit_low_src0_fifo_min_watermark",
        80,
        8
      ],
      [
        "exit_low_src1_fifo_min_watermark",
        88,
        8
      ],
      [
        "ongoing_lookups_watermark",
        96,
        8
      ],
      [
        "exit_high_src0_fifo_rdy_no_pop_watermark",
        104,
        16
      ],
      [
        "exit_high_src1_fifo_rdy_no_pop_watermark",
        120,
        16
      ],
      [
        "exit_low_src0_fifo_rdy_no_pop_watermark",
        136,
        16
      ],
      [
        "exit_low_src1_fifo_rdy_no_pop_watermark",
        152,
        16
      ],
      [
        "odd_thread_idx_manager_watermark",
        168,
        8
      ],
      [
        "even_thread_idx_manager_watermark",
        176,
        8
      ]
    ]
  },
  "npe_mini_scoper_bit_sel_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 165,
    "desc": "Mini scoper special channel selects each of its 16 bits from the lookup core databus in a bit resolution. This register control the selection of each bit",
    "fields": [
      [
        "mini_scoper_bit_sel",
        0,
        160
      ],
      [
        "mini_scoper_special_channel_offset",
        160,
        5
      ]
    ]
  },
  "npe_lvr0_tcam_profile_expanding_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 36,
    "desc": "8 profiles that control how to access LVR0 TCAM ",
    "fields": [
      [
        "lvr0_tcam_profile_expanding",
        0,
        36
      ]
    ]
  },
  "npe_scoper_macro": {
    "type": "memory",
    "block": "npe",
    "width": 688,
    "desc": "Control which fields the Scoper selects from the NPPD",
    "fields": [
      [
        "scoper_instructions",
        0,
        688
      ]
    ]
  },
  "npe_lookup_keys_selection_macro": {
    "type": "memory",
    "block": "npe",
    "width": 67,
    "desc": "Control per NPE-Macro-ID how to build the key to the keys-selection-TCAM",
    "fields": [
      [
        "tcam_key_instructions",
        0,
        63
      ],
      [
        "bucket_a_lookup_enable",
        63,
        1
      ],
      [
        "bucket_b_lookup_enable",
        64,
        1
      ],
      [
        "bucket_c_lookup_enable",
        65,
        1
      ],
      [
        "bucket_d_lookup_enable",
        66,
        1
      ]
    ]
  },
  "npe_lookup_keys_construction_macro": {
    "type": "memory",
    "block": "npe",
    "width": 232,
    "desc": "",
    "fields": [
      [
        "shared_keys_gen_instructions",
        0,
        230
      ],
      [
        "constant_select",
        230,
        2
      ]
    ]
  },
  "npe_lookup_keys_construction_constants_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "keys_construction_constants",
        0,
        48
      ]
    ]
  },
  "npe_lookup_keys_selection_tcam": {
    "type": "memory",
    "block": "npe",
    "width": 42,
    "desc": "",
    "fields": [
      [
        "lookup_keys_selection_tcam_key",
        0,
        42
      ],
      [
        "lookup_keys_selection_tcam_delete",
        42,
        1
      ]
    ]
  },
  "npe_lookup_keys_construction_low_buckets": {
    "type": "memory",
    "block": "npe",
    "width": 80,
    "desc": "Control the key construction of keys A and B (160 bits)",
    "fields": [
      [
        "indexs",
        0,
        45
      ],
      [
        "bucket_field_select_inst",
        45,
        14
      ],
      [
        "logical_db",
        59,
        7
      ],
      [
        "logical_db_width",
        66,
        3
      ],
      [
        "tag_id",
        69,
        4
      ],
      [
        "key_destination",
        73,
        4
      ],
      [
        "result_index",
        77,
        3
      ]
    ]
  },
  "npe_lookup_keys_construction_high_buckets": {
    "type": "memory",
    "block": "npe",
    "width": 80,
    "desc": "Control the key construction of keys C and D (160 bits)",
    "fields": [
      [
        "indexs",
        0,
        45
      ],
      [
        "bucket_field_select_inst",
        45,
        14
      ],
      [
        "logical_db",
        59,
        7
      ],
      [
        "logical_db_width",
        66,
        3
      ],
      [
        "tag_id",
        69,
        4
      ],
      [
        "key_destination",
        73,
        4
      ],
      [
        "result_index",
        77,
        3
      ]
    ]
  },
  "npe_lookup_a_per_dest_linked_list_fifo_index": {
    "type": "memory",
    "block": "npe",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "per_dest_linked_list_fifo_index",
        0,
        4
      ]
    ]
  },
  "npe_lookup_b_per_dest_linked_list_fifo_index": {
    "type": "memory",
    "block": "npe",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "per_dest_linked_list_fifo_index",
        0,
        4
      ]
    ]
  },
  "npe_lookup_c_per_dest_linked_list_fifo_index": {
    "type": "memory",
    "block": "npe",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "per_dest_linked_list_fifo_index",
        0,
        4
      ]
    ]
  },
  "npe_lookup_d_per_dest_linked_list_fifo_index": {
    "type": "memory",
    "block": "npe",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "per_dest_linked_list_fifo_index",
        0,
        4
      ]
    ]
  },
  "npe_lookup_result_memory_a": {
    "type": "memory",
    "block": "npe",
    "width": 167,
    "desc": "Lookup memory holds the lookup result.",
    "fields": [
      [
        "lookup_result_memory_a_data",
        0,
        167
      ]
    ]
  },
  "npe_lookup_result_memory_b": {
    "type": "memory",
    "block": "npe",
    "width": 167,
    "desc": "Lookup memory holds the lookup result.",
    "fields": [
      [
        "lookup_result_memory_b_data",
        0,
        167
      ]
    ]
  },
  "npe_lookup_result_memory_c": {
    "type": "memory",
    "block": "npe",
    "width": 87,
    "desc": "Lookup memory holds the lookup result.",
    "fields": [
      [
        "lookup_result_memory_c_data",
        0,
        87
      ]
    ]
  },
  "npe_lookup_result_memory_d": {
    "type": "memory",
    "block": "npe",
    "width": 87,
    "desc": "Lookup memory holds the lookup result.",
    "fields": [
      [
        "lookup_result_memory_d_data",
        0,
        87
      ]
    ]
  },
  "npe_lookup_memory_a_high": {
    "type": "memory",
    "block": "npe",
    "width": 167,
    "desc": "Lookup memory holds the lookup key.",
    "fields": [
      [
        "lookup_memory_a_high_data",
        0,
        167
      ]
    ]
  },
  "npe_lookup_memory_b_high": {
    "type": "memory",
    "block": "npe",
    "width": 167,
    "desc": "Lookup memory holds the lookup key.",
    "fields": [
      [
        "lookup_memory_b_high_data",
        0,
        167
      ]
    ]
  },
  "npe_lookup_memory_c_high": {
    "type": "memory",
    "block": "npe",
    "width": 87,
    "desc": "Lookup memory holds the lookup key.",
    "fields": [
      [
        "lookup_memory_c_high_data",
        0,
        87
      ]
    ]
  },
  "npe_lookup_memory_d_high": {
    "type": "memory",
    "block": "npe",
    "width": 87,
    "desc": "Lookup memory holds the lookup key.",
    "fields": [
      [
        "lookup_memory_d_high_data",
        0,
        87
      ]
    ]
  },
  "npe_lookup_memory_a_low": {
    "type": "memory",
    "block": "npe",
    "width": 167,
    "desc": "Lookup memory holds the lookup key.",
    "fields": [
      [
        "lookup_memory_a_low_data",
        0,
        167
      ]
    ]
  },
  "npe_lookup_memory_b_low": {
    "type": "memory",
    "block": "npe",
    "width": 167,
    "desc": "Lookup memory holds the lookup key.",
    "fields": [
      [
        "lookup_memory_b_low_data",
        0,
        167
      ]
    ]
  },
  "npe_lookup_memory_c_low": {
    "type": "memory",
    "block": "npe",
    "width": 87,
    "desc": "Lookup memory holds the lookup key.",
    "fields": [
      [
        "lookup_memory_c_low_data",
        0,
        87
      ]
    ]
  },
  "npe_lookup_memory_d_low": {
    "type": "memory",
    "block": "npe",
    "width": 87,
    "desc": "Lookup memory holds the lookup key.",
    "fields": [
      [
        "lookup_memory_d_low_data",
        0,
        87
      ]
    ]
  },
  "npe_lookup_results_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 41,
    "desc": "control per NPE-Macro-ID: 1. The width in bytes of each lookup result 2. Final Result Shift-value (in channles-resolution)",
    "fields": [
      [
        "lookup_result_a_width",
        0,
        5
      ],
      [
        "lookup_result_b_width",
        5,
        5
      ],
      [
        "lookup_result_c_width",
        10,
        4
      ],
      [
        "lookup_result_d_width",
        14,
        4
      ],
      [
        "lookup_result_shift",
        18,
        5
      ],
      [
        "lookup_use_key_as_result_a_width",
        23,
        5
      ],
      [
        "lookup_use_key_as_result_b_width",
        28,
        5
      ],
      [
        "lookup_use_key_as_result_c_width",
        33,
        4
      ],
      [
        "lookup_use_key_as_result_d_width",
        37,
        4
      ]
    ]
  },
  "npe_resolution_keys_selection_macro": {
    "type": "memory",
    "block": "npe",
    "width": 180,
    "desc": "",
    "fields": [
      [
        "tcam_key_instructions",
        0,
        180
      ]
    ]
  },
  "npe_resolution_keys_selection_tcam_low": {
    "type": "memory",
    "block": "npe",
    "width": 74,
    "desc": "",
    "fields": [
      [
        "resolution_keys_selection_tcam_low_key",
        0,
        74
      ],
      [
        "resolution_keys_selection_tcam_low_delete",
        74,
        1
      ]
    ]
  },
  "npe_resolution_keys_selection_tcam_high": {
    "type": "memory",
    "block": "npe",
    "width": 74,
    "desc": "",
    "fields": [
      [
        "resolution_keys_selection_tcam_high_key",
        0,
        74
      ],
      [
        "resolution_keys_selection_tcam_high_delete",
        74,
        1
      ]
    ]
  },
  "npe_pd_update_instructions": {
    "type": "memory",
    "block": "npe",
    "width": 14,
    "desc": "Instructions to update packet descriptor. The instructions are the associated data of the ResolutionKeysSelectionTcam",
    "fields": [
      [
        "pd_update_instruction",
        0,
        14
      ]
    ]
  },
  "npe_pd_update_unified_buckets_control": {
    "type": "memory",
    "block": "npe",
    "width": 420,
    "desc": "control Per NPE-Macro-ID how to build the unified buckets. ",
    "fields": [
      [
        "pd_update_unified_buckets_control_data",
        0,
        420
      ]
    ]
  },
  "npe_pd_update_macro": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "constant_select",
        0,
        2
      ],
      [
        "default_macro_insruction",
        2,
        14
      ]
    ]
  },
  "npe_pd_update_constants_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 80,
    "desc": "",
    "fields": [
      [
        "pd_update_constants",
        0,
        80
      ]
    ]
  },
  "npe_data_bus_holder_high": {
    "type": "memory",
    "block": "npe",
    "width": 971,
    "desc": "DataBus memory holds the Data-bus when waiting for lookup results and holds the update data before updating the NPPD",
    "fields": [
      [
        "data_bus_holder_data_high",
        0,
        971
      ]
    ]
  },
  "npe_data_bus_holder_low": {
    "type": "memory",
    "block": "npe",
    "width": 971,
    "desc": "DataBus memory holds the Data-bus when waiting for lookup results and holds the update data before updating the NPPD",
    "fields": [
      [
        "data_bus_holder_data_low",
        0,
        971
      ]
    ]
  },
  "npe_mini_scoper_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 135,
    "desc": "select the source of each channel in the data-bus between lookup-core and resolution-core",
    "fields": [
      [
        "mini_scoper_cfg_data",
        0,
        132
      ],
      [
        "mini_scoper_cfg_bit_sel_profile",
        132,
        2
      ],
      [
        "mini_scoper_cfg_use_special_channel",
        134,
        1
      ]
    ]
  },
  "npe_lookup_core_tcam": {
    "type": "memory",
    "block": "npe",
    "width": 140,
    "desc": "LVR 0 TCAM.",
    "fields": [
      [
        "lookup_core_tcam_key",
        0,
        140
      ],
      [
        "lookup_core_tcam_delete",
        140,
        1
      ]
    ]
  },
  "npe_lvr0_fs_instructions": {
    "type": "memory",
    "block": "npe",
    "width": 224,
    "desc": "Per NPE-Macro-ID, control the field extraction for LVR 0. ",
    "fields": [
      [
        "lvr0_fs_inst",
        0,
        222
      ],
      [
        "lvr0_constant_select",
        222,
        2
      ]
    ]
  },
  "npe_lvr0_constants_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "lvr0_constants",
        0,
        48
      ]
    ]
  },
  "npe_lvr0_macro_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 278,
    "desc": "",
    "fields": [
      [
        "lvr0_macro_config",
        0,
        278
      ]
    ]
  },
  "npe_lvr0_reg_tcam0": {
    "type": "memory",
    "block": "npe",
    "width": 20,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr0_reg_tcam0_mask",
        0,
        20
      ],
      [
        "lvr0_reg_tcam0_key",
        20,
        20
      ],
      [
        "lvr0_reg_tcam0_delete",
        40,
        1
      ]
    ]
  },
  "npe_lvr0_reg_tcam0_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr0_reg_tcam0_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_lvr0_reg_tcam1": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr0_reg_tcam1_mask",
        0,
        32
      ],
      [
        "lvr0_reg_tcam1_key",
        32,
        32
      ],
      [
        "lvr0_reg_tcam1_delete",
        64,
        1
      ]
    ]
  },
  "npe_lvr0_reg_tcam1_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr0_reg_tcam1_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_lvr0_reg_tcam2": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr0_reg_tcam2_mask",
        0,
        32
      ],
      [
        "lvr0_reg_tcam2_key",
        32,
        32
      ],
      [
        "lvr0_reg_tcam2_delete",
        64,
        1
      ]
    ]
  },
  "npe_lvr0_reg_tcam2_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr0_reg_tcam2_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_lvr0_reg_tcam3": {
    "type": "memory",
    "block": "npe",
    "width": 40,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr0_reg_tcam3_mask",
        0,
        40
      ],
      [
        "lvr0_reg_tcam3_key",
        40,
        40
      ],
      [
        "lvr0_reg_tcam3_delete",
        80,
        1
      ]
    ]
  },
  "npe_lvr0_reg_tcam3_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr0_reg_tcam3_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_lvr1_fs_instructions": {
    "type": "memory",
    "block": "npe",
    "width": 176,
    "desc": "Per NPE-Macro-ID, control the field extraction for LVR 1. ",
    "fields": [
      [
        "lvr1_fs_inst",
        0,
        174
      ],
      [
        "lvr1_constant_select",
        174,
        2
      ]
    ]
  },
  "npe_lvr1_constants_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "lvr1_constants",
        0,
        48
      ]
    ]
  },
  "npe_lvr1_macro_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 208,
    "desc": "",
    "fields": [
      [
        "lvr1_macro_config",
        0,
        208
      ]
    ]
  },
  "npe_lvr1_reg_tcam0": {
    "type": "memory",
    "block": "npe",
    "width": 48,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr1_reg_tcam0_mask",
        0,
        48
      ],
      [
        "lvr1_reg_tcam0_key",
        48,
        48
      ],
      [
        "lvr1_reg_tcam0_delete",
        96,
        1
      ]
    ]
  },
  "npe_lvr1_reg_tcam0_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr1_reg_tcam0_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_lvr2_per_macro_num_of_bypass_channels": {
    "type": "memory",
    "block": "npe",
    "width": 5,
    "desc": "",
    "fields": [
      [
        "num_of_bypass_channels",
        0,
        5
      ]
    ]
  },
  "npe_lvr3_fs_instructions": {
    "type": "memory",
    "block": "npe",
    "width": 296,
    "desc": "Per NPE-Macro-ID, control the field extraction for LVR 3. ",
    "fields": [
      [
        "lvr3_fs_inst",
        0,
        294
      ],
      [
        "lvr3_constant_select",
        294,
        2
      ]
    ]
  },
  "npe_lvr3_constants_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "lvr3_constants",
        0,
        48
      ]
    ]
  },
  "npe_lvr3_macro_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 320,
    "desc": "",
    "fields": [
      [
        "lvr3_macro_config",
        0,
        320
      ]
    ]
  },
  "npe_lvr3_reg_tcam0": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr3_reg_tcam0_mask",
        0,
        16
      ],
      [
        "lvr3_reg_tcam0_key",
        16,
        16
      ],
      [
        "lvr3_reg_tcam0_delete",
        32,
        1
      ]
    ]
  },
  "npe_lvr3_reg_tcam0_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr3_reg_tcam0_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_lvr3_reg_tcam1": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr3_reg_tcam1_mask",
        0,
        32
      ],
      [
        "lvr3_reg_tcam1_key",
        32,
        32
      ],
      [
        "lvr3_reg_tcam1_delete",
        64,
        1
      ]
    ]
  },
  "npe_lvr3_reg_tcam1_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr3_reg_tcam1_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_lvr3_reg_tcam2": {
    "type": "memory",
    "block": "npe",
    "width": 24,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr3_reg_tcam2_mask",
        0,
        24
      ],
      [
        "lvr3_reg_tcam2_key",
        24,
        24
      ],
      [
        "lvr3_reg_tcam2_delete",
        48,
        1
      ]
    ]
  },
  "npe_lvr3_reg_tcam2_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr3_reg_tcam2_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_traps_key_construction_macro": {
    "type": "memory",
    "block": "npe",
    "width": 225,
    "desc": "",
    "fields": [
      [
        "traps_key_instructions",
        0,
        224
      ],
      [
        "traps_tcam_lookup_en",
        224,
        1
      ]
    ]
  },
  "npe_traps_tcam": {
    "type": "memory",
    "block": "npe",
    "width": 96,
    "desc": "Traps TCAM. Used for checking if Snoop or redirect are needed.",
    "fields": [
      [
        "traps_tcam_key",
        0,
        96
      ],
      [
        "traps_tcam_delete",
        96,
        1
      ]
    ]
  },
  "npe_traps_tcam_mem": {
    "type": "memory",
    "block": "npe",
    "width": 8,
    "desc": "Associated data of the Trap TCAM",
    "fields": [
      [
        "snoop_or_redirect_code",
        0,
        8
      ]
    ]
  },
  "npe_lvr4_fs_instructions": {
    "type": "memory",
    "block": "npe",
    "width": 188,
    "desc": "Per NPE-Macro-ID, control the field extraction for LVR 4. ",
    "fields": [
      [
        "lvr4_fs_inst",
        0,
        186
      ],
      [
        "lvr4_constant_select",
        186,
        2
      ]
    ]
  },
  "npe_lvr4_constants_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "lvr4_constants",
        0,
        48
      ]
    ]
  },
  "npe_lvr4_macro_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 178,
    "desc": "",
    "fields": [
      [
        "lvr4_macro_config",
        0,
        178
      ]
    ]
  },
  "npe_lvr4_reg_tcam0": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr4_reg_tcam0_mask",
        0,
        16
      ],
      [
        "lvr4_reg_tcam0_key",
        16,
        16
      ],
      [
        "lvr4_reg_tcam0_delete",
        32,
        1
      ]
    ]
  },
  "npe_lvr4_reg_tcam0_mem": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr4_reg_tcam0_mem_data",
        0,
        16
      ]
    ]
  },
  "npe_lvr4_reg_tcam1": {
    "type": "memory",
    "block": "npe",
    "width": 16,
    "desc": "Register TCAM based. Used in the LVR process",
    "fields": [
      [
        "lvr4_reg_tcam1_mask",
        0,
        16
      ],
      [
        "lvr4_reg_tcam1_key",
        16,
        16
      ],
      [
        "lvr4_reg_tcam1_delete",
        32,
        1
      ]
    ]
  },
  "npe_lvr4_reg_tcam1_mem": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "Register TCAM based associated data",
    "fields": [
      [
        "lvr4_reg_tcam1_mem_data",
        0,
        32
      ]
    ]
  },
  "npe_lvr5_fs_instructions": {
    "type": "memory",
    "block": "npe",
    "width": 130,
    "desc": "Per NPE-Macro-ID, control the field extraction for LVR 5. ",
    "fields": [
      [
        "lvr5_fs_inst",
        0,
        128
      ],
      [
        "lvr5_constant_select",
        128,
        2
      ]
    ]
  },
  "npe_lvr5_constants_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "lvr5_constants",
        0,
        48
      ]
    ]
  },
  "npe_lvr5_macro_cfg": {
    "type": "memory",
    "block": "npe",
    "width": 93,
    "desc": "",
    "fields": [
      [
        "lvr5_macro_config",
        0,
        93
      ]
    ]
  },
  "npe_shared_table0": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "One of eight shared tables located in the NPE. A table can be accessed from a single LVR according to TableSrc and LvrPldSrc configurations",
    "fields": [
      [
        "shared_table0_data",
        0,
        32
      ]
    ]
  },
  "npe_shared_table1": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "One of seven shared tables located in the NPE. A table can be accessed from a single LVR according to TableSrc and LvrPldSrc configurations",
    "fields": [
      [
        "shared_table1_data",
        0,
        32
      ]
    ]
  },
  "npe_shared_table2": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "One of eight shared tables located in the NPE. A table can be accessed from a single LVR according to TableSrc and LvrPldSrc configurations",
    "fields": [
      [
        "shared_table2_data",
        0,
        32
      ]
    ]
  },
  "npe_shared_table3": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "One of eight shared tables located in the NPE. A table can be accessed from a single LVR according to TableSrc and LvrPldSrc configurations",
    "fields": [
      [
        "shared_table3_data",
        0,
        32
      ]
    ]
  },
  "npe_shared_table4": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "One of eight shared tables located in the NPE. A table can be accessed from a single LVR according to TableSrc and LvrPldSrc configurations",
    "fields": [
      [
        "shared_table7_data",
        0,
        32
      ]
    ]
  },
  "npe_shared_table5": {
    "type": "memory",
    "block": "npe",
    "width": 96,
    "desc": "One of eight shared tables located in the NPE. A table can be accessed from a single LVR according to TableSrc and LvrPldSrc configurations",
    "fields": [
      [
        "shared_table8_data",
        0,
        96
      ]
    ]
  },
  "npe_shared_table6": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "One of eight shared tables located in the NPE. A table can be accessed from a single LVR according to TableSrc and LvrPldSrc configurations",
    "fields": [
      [
        "shared_table9_data",
        0,
        32
      ]
    ]
  },
  "npe_shared_table7": {
    "type": "memory",
    "block": "npe",
    "width": 32,
    "desc": "One of eight shared tables located in the NPE. A table can be accessed from a single LVR according to TableSrc and LvrPldSrc configurations",
    "fields": [
      [
        "shared_table7_data",
        0,
        32
      ]
    ]
  },
  "npe_thread_memory": {
    "type": "memory",
    "block": "npe",
    "width": 1856,
    "desc": "Thread memory holds the NPPD while the packet is processed by the NPE",
    "fields": [
      [
        "thread_memory_data",
        0,
        1856
      ]
    ]
  },
  "npu_host_interrupt_register": {
    "type": "register",
    "block": "npu_host",
    "width": 5,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "read_required_interrupt_summary",
        1,
        1
      ],
      [
        "dropped_massage_summary",
        2,
        1
      ],
      [
        "ene_interrupt_signals_summary",
        3,
        1
      ],
      [
        "em_response_interrupt_summary",
        4,
        1
      ]
    ]
  },
  "npu_host_mem_protect_interrupt": {
    "type": "register",
    "block": "npu_host",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "npu_host_mem_protect_interrupt_test": {
    "type": "register",
    "block": "npu_host",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "npu_host_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "npu_host",
    "width": 12,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "ene_macro_memory_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "rmep_last_time_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "rmep_state_table_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mp_data_table_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "aux_data_table_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "event_queue_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "packet_data_table_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "ene_data_memory_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "eth_mp_em_verifier0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "eth_mp_em_verifier1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "eth_mp_em_verifier2_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "eth_mp_em_verifier3_ecc_1b_err_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "npu_host_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "npu_host",
    "width": 12,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "ene_macro_memory_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "rmep_last_time_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "rmep_state_table_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mp_data_table_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "aux_data_table_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "event_queue_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "packet_data_table_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "ene_data_memory_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "eth_mp_em_verifier0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "eth_mp_em_verifier1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "eth_mp_em_verifier2_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "eth_mp_em_verifier3_ecc_2b_err_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "npu_host_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "npu_host",
    "width": 12,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "ene_macro_memory_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "rmep_last_time_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "rmep_state_table_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "mp_data_table_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "aux_data_table_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "event_queue_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "packet_data_table_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "ene_data_memory_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "eth_mp_em_verifier0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "eth_mp_em_verifier1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "eth_mp_em_verifier2_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "eth_mp_em_verifier3_ecc_1b_err_initiate",
        11,
        1
      ]
    ]
  },
  "npu_host_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "npu_host",
    "width": 12,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "ene_macro_memory_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "rmep_last_time_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "rmep_state_table_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "mp_data_table_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "aux_data_table_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "event_queue_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "packet_data_table_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "ene_data_memory_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "eth_mp_em_verifier0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "eth_mp_em_verifier1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "eth_mp_em_verifier2_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "eth_mp_em_verifier3_ecc_2b_err_initiate",
        11,
        1
      ]
    ]
  },
  "npu_host_mem_protect_err_status": {
    "type": "register",
    "block": "npu_host",
    "width": 12,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "ene_macro_memory_err_int",
        0,
        1
      ],
      [
        "rmep_last_time_err_int",
        1,
        1
      ],
      [
        "rmep_state_table_err_int",
        2,
        1
      ],
      [
        "mp_data_table_err_int",
        3,
        1
      ],
      [
        "aux_data_table_err_int",
        4,
        1
      ],
      [
        "event_queue_err_int",
        5,
        1
      ],
      [
        "packet_data_table_err_int",
        6,
        1
      ],
      [
        "ene_data_memory_err_int",
        7,
        1
      ],
      [
        "eth_mp_em_verifier0_err_int",
        8,
        1
      ],
      [
        "eth_mp_em_verifier1_err_int",
        9,
        1
      ],
      [
        "eth_mp_em_verifier2_err_int",
        10,
        1
      ],
      [
        "eth_mp_em_verifier3_err_int",
        11,
        1
      ]
    ]
  },
  "npu_host_selected_ser_error_info": {
    "type": "register",
    "block": "npu_host",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "npu_host_ser_error_debug_configuration": {
    "type": "register",
    "block": "npu_host",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "npu_host_ecc_1b_err_debug": {
    "type": "register",
    "block": "npu_host",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "npu_host_ecc_2b_err_debug": {
    "type": "register",
    "block": "npu_host",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "npu_host_tcam_scan_period_cfg": {
    "type": "register",
    "block": "npu_host",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "npu_host_counter_timer": {
    "type": "register",
    "block": "npu_host",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "npu_host_counter_timer_trigger_reg": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "npu_host_memory_access_timeout": {
    "type": "register",
    "block": "npu_host",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "npu_host_broadcast_config_reg": {
    "type": "register",
    "block": "npu_host",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "npu_host_memory_prot_bypass": {
    "type": "register",
    "block": "npu_host",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "npu_host_soft_reset_configuration": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "npu_host_mbist_configuration": {
    "type": "register",
    "block": "npu_host",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "npu_host_power_down_configuration": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "npu_host_spare_reg": {
    "type": "register",
    "block": "npu_host",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "npu_host_pmro_ctrl": {
    "type": "register",
    "block": "npu_host",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "npu_host_pmro_status": {
    "type": "register",
    "block": "npu_host",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "npu_host_mirror_bus_conf_reg": {
    "type": "register",
    "block": "npu_host",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "npu_host_mirror_bus_status": {
    "type": "register",
    "block": "npu_host",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "npu_host_device_time_offset_cfg": {
    "type": "register",
    "block": "npu_host",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "npu_host_debug_data_bus_register": {
    "type": "register",
    "block": "npu_host",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "data_bus_reg",
        0,
        32
      ]
    ]
  },
  "npu_host_debug_data_select_register": {
    "type": "register",
    "block": "npu_host",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "debug_data_select",
        0,
        10
      ]
    ]
  },
  "npu_host_lri_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "learn_records_in",
        0,
        64
      ],
      [
        "learn_packets_in",
        64,
        64
      ]
    ]
  },
  "npu_host_npu_host_debug_wm": {
    "type": "register",
    "block": "npu_host",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "free_credits_phase0_wm",
        0,
        8
      ],
      [
        "free_credits_phase1_wm",
        8,
        8
      ],
      [
        "transmission_ready_phase0_wm",
        16,
        8
      ],
      [
        "transmission_ready_phase1_wm",
        24,
        8
      ]
    ]
  },
  "npu_host_lro_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "learn_records_out",
        0,
        64
      ]
    ]
  },
  "npu_host_pin_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "packets_in",
        0,
        64
      ],
      [
        "packets_in_with_error",
        64,
        64
      ]
    ]
  },
  "npu_host_pout_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "packets_out",
        0,
        64
      ],
      [
        "dropped_pacekts_from_npe",
        64,
        64
      ]
    ]
  },
  "npu_host_mps_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "packets_initiated_from_mps",
        0,
        32
      ]
    ]
  },
  "npu_host_sat_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "packets_initiated_from_sats",
        0,
        32
      ]
    ]
  },
  "npu_host_rmes_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "interrupts_initiated_from_rmes",
        0,
        32
      ]
    ]
  },
  "npu_host_evq_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "events_arrived_to_evq",
        0,
        32
      ],
      [
        "events_dropped_in_evq",
        32,
        32
      ]
    ]
  },
  "npu_host_macro_ids": {
    "type": "register",
    "block": "npu_host",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "lri_macro",
        0,
        8
      ],
      [
        "sat_macro",
        8,
        8
      ],
      [
        "mps_macro",
        16,
        8
      ]
    ]
  },
  "npu_host_rmep_timer": {
    "type": "register",
    "block": "npu_host",
    "width": 99,
    "desc": "",
    "fields": [
      [
        "rmep_interval_clocks",
        0,
        32
      ],
      [
        "rmep_cycle_clocks",
        32,
        32
      ],
      [
        "rmep_start_index",
        64,
        13
      ],
      [
        "rmep_end_index",
        77,
        13
      ],
      [
        "rmep_timer_enable",
        90,
        1
      ],
      [
        "rmep_count",
        91,
        8
      ]
    ]
  },
  "npu_host_mp_lm_timer": {
    "type": "register",
    "block": "npu_host",
    "width": 99,
    "desc": "",
    "fields": [
      [
        "mp_lm_interval_clocks",
        0,
        32
      ],
      [
        "mp_lm_cycle_clocks",
        32,
        32
      ],
      [
        "mp_lm_start_index",
        64,
        13
      ],
      [
        "mp_lm_end_index",
        77,
        13
      ],
      [
        "mp_lm_timer_enable",
        90,
        1
      ],
      [
        "mp_lm_count",
        91,
        8
      ]
    ]
  },
  "npu_host_mp_dm_timer": {
    "type": "register",
    "block": "npu_host",
    "width": 99,
    "desc": "",
    "fields": [
      [
        "mp_dm_interval_clocks",
        0,
        32
      ],
      [
        "mp_dm_cycle_clocks",
        32,
        32
      ],
      [
        "mp_dm_start_index",
        64,
        13
      ],
      [
        "mp_dm_end_index",
        77,
        13
      ],
      [
        "mp_dm_timer_enable",
        90,
        1
      ],
      [
        "mp_dm_count",
        91,
        8
      ]
    ]
  },
  "npu_host_mp_ccm_timer": {
    "type": "register",
    "block": "npu_host",
    "width": 99,
    "desc": "",
    "fields": [
      [
        "mp_ccm_interval_clocks",
        0,
        32
      ],
      [
        "mp_ccm_cycle_clocks",
        32,
        32
      ],
      [
        "mp_ccm_start_index",
        64,
        13
      ],
      [
        "mp_ccm_end_index",
        77,
        13
      ],
      [
        "mp_ccm_timer_enable",
        90,
        1
      ],
      [
        "mp_ccm_count",
        91,
        8
      ]
    ]
  },
  "npu_host_sat_timer": {
    "type": "register",
    "block": "npu_host",
    "width": 97,
    "desc": "",
    "fields": [
      [
        "sat_interval_clocks",
        0,
        32
      ],
      [
        "sat_cycle_clocks",
        32,
        32
      ],
      [
        "sat_start_index",
        64,
        12
      ],
      [
        "sat_end_index",
        76,
        12
      ],
      [
        "sat_timer_enable",
        88,
        1
      ],
      [
        "sat_count",
        89,
        8
      ]
    ]
  },
  "npu_host_cpu_q_config_write_adress": {
    "type": "register",
    "block": "npu_host",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "write_adress",
        0,
        11
      ]
    ]
  },
  "npu_host_cpu_q_config_read_adress": {
    "type": "register",
    "block": "npu_host",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "read_address",
        0,
        11
      ]
    ]
  },
  "npu_host_read_required_interrupt": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "new_write_since_read",
        0,
        1
      ]
    ]
  },
  "npu_host_read_required_interrupt_mask": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "new_write_since_read_mask",
        0,
        1
      ]
    ]
  },
  "npu_host_read_required_interrupt_test": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "new_write_since_read_test",
        0,
        1
      ]
    ]
  },
  "npu_host_dropped_massage": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "interrupt",
        0,
        1
      ]
    ]
  },
  "npu_host_dropped_massage_mask": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "interrupt_mask",
        0,
        1
      ]
    ]
  },
  "npu_host_dropped_massage_test": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "interrupt_test",
        0,
        1
      ]
    ]
  },
  "npu_host_scanner_priority": {
    "type": "register",
    "block": "npu_host",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "clocks_until_scanner_prioritized",
        0,
        8
      ]
    ]
  },
  "npu_host_cbt_full_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "lro_not_iready",
        0,
        32
      ],
      [
        "pout_not_iready",
        32,
        32
      ]
    ]
  },
  "npu_host_cfg_lri": {
    "type": "register",
    "block": "npu_host",
    "width": 64,
    "desc": "Max number of cycles  that a packet may stay in the FI core ",
    "fields": [
      [
        "cfg_npu_host_lri_header",
        0,
        32
      ],
      [
        "cfg_npu_host_lri_max_time",
        32,
        32
      ]
    ]
  },
  "npu_host_pin_start_offset_macros": {
    "type": "register",
    "block": "npu_host",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "fi_macro_offset",
        0,
        2
      ],
      [
        "npe_macro_offset",
        2,
        2
      ]
    ]
  },
  "npu_host_scn_out_inject_ifg": {
    "type": "register",
    "block": "npu_host",
    "width": 4,
    "desc": "default target ifg for massages from the scanners (put on the NPPD sent into the NPE)",
    "fields": [
      [
        "scn_inject_ifg",
        0,
        4
      ]
    ]
  },
  "npu_host_max_amount_of_threads_used": {
    "type": "register",
    "block": "npu_host",
    "width": 16,
    "desc": "max amount of thread from the NPE that the npa is allowed to use, per phase",
    "fields": [
      [
        "max_threads_used_phase_0",
        0,
        8
      ],
      [
        "max_threads_used_phase_1",
        8,
        8
      ]
    ]
  },
  "npu_host_ene_debug_counters": {
    "type": "register",
    "block": "npu_host",
    "width": 128,
    "desc": "Counters For Debug",
    "fields": [
      [
        "ene_incoming_headers",
        0,
        64
      ],
      [
        "ene_outgoing_headers",
        64,
        64
      ]
    ]
  },
  "npu_host_ene_interrupt_signals": {
    "type": "register",
    "block": "npu_host",
    "width": 2,
    "desc": "Interrupt signals from the Encapsulation Engines",
    "fields": [
      [
        "ene_ttl_count_expired_int",
        0,
        1
      ],
      [
        "ene_macro_counter_wrap_around_int",
        1,
        1
      ]
    ]
  },
  "npu_host_ene_interrupt_signals_mask": {
    "type": "register",
    "block": "npu_host",
    "width": 2,
    "desc": "This register masks EneInterruptSignals interrupt register",
    "fields": [
      [
        "ene_ttl_count_expired_int_mask",
        0,
        1
      ],
      [
        "ene_macro_counter_wrap_around_int_mask",
        1,
        1
      ]
    ]
  },
  "npu_host_ene_interrupt_signals_test": {
    "type": "register",
    "block": "npu_host",
    "width": 2,
    "desc": "This register tests EneInterruptSignals interrupt register",
    "fields": [
      [
        "ene_ttl_count_expired_int_test",
        0,
        1
      ],
      [
        "ene_macro_counter_wrap_around_int_test",
        1,
        1
      ]
    ]
  },
  "npu_host_ene_debug_water_mark": {
    "type": "register",
    "block": "npu_host",
    "width": 8,
    "desc": "Water Mark For Debug",
    "fields": [
      [
        "ene_max_instruction_per_word",
        0,
        8
      ]
    ]
  },
  "npu_host_ene_debug_ttl_first_accessed_inst": {
    "type": "register",
    "block": "npu_host",
    "width": 8,
    "desc": "First macro pointer for a header, valid in case the processing has hit TTL",
    "fields": [
      [
        "ene_first_inst",
        0,
        8
      ]
    ]
  },
  "npu_host_ene_word_ttl_r": {
    "type": "register",
    "block": "npu_host",
    "width": 8,
    "desc": "Maximum number of instruction allowed per word in the ENE.  When a word has reached the maximum number allowed, the ENE stops processing it.",
    "fields": [
      [
        "ene_word_ttl",
        0,
        8
      ]
    ]
  },
  "npu_host_eth_mp_em_per_bank_reg": {
    "type": "register",
    "block": "npu_host",
    "width": 102,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "eth_mp_em_active_banks",
        0,
        1
      ],
      [
        "eth_mp_em_hash_key",
        1,
        100
      ],
      [
        "eth_mp_em_use_primitive_crc",
        101,
        1
      ]
    ]
  },
  "npu_host_eth_mp_em_per_em_reg": {
    "type": "register",
    "block": "npu_host",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "eth_mp_em_key_width",
        0,
        16
      ],
      [
        "eth_mp_em_auto_bubble_req",
        16,
        1
      ],
      [
        "eth_mp_em_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "npu_host_eth_mp_em_cam_wm_max_reg": {
    "type": "register",
    "block": "npu_host",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "eth_mp_em_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "npu_host_eth_mp_em_access_register": {
    "type": "register",
    "block": "npu_host",
    "width": 110,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "eth_mp_em_access_reg",
        0,
        110
      ]
    ]
  },
  "npu_host_eth_mp_em_response_register": {
    "type": "register",
    "block": "npu_host",
    "width": 110,
    "desc": "EM indirect access data",
    "fields": [
      [
        "eth_mp_em_response_valid",
        0,
        1
      ],
      [
        "eth_mp_em_response_reg",
        1,
        109
      ]
    ]
  },
  "npu_host_em_response_interrupt": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "EM indirect access data is valid",
    "fields": [
      [
        "eth_mp_em_resp",
        0,
        1
      ]
    ]
  },
  "npu_host_em_response_interrupt_mask": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "This register masks EmResponseInterrupt interrupt register",
    "fields": [
      [
        "eth_mp_em_resp_mask",
        0,
        1
      ]
    ]
  },
  "npu_host_em_response_interrupt_test": {
    "type": "register",
    "block": "npu_host",
    "width": 1,
    "desc": "This register tests EmResponseInterrupt interrupt register",
    "fields": [
      [
        "eth_mp_em_resp_test",
        0,
        1
      ]
    ]
  },
  "npu_host_ene_macro_memory": {
    "type": "memory",
    "block": "npu_host",
    "width": 46,
    "desc": "Holds the instructions of the encapsulation macros",
    "fields": [
      [
        "ene_data_fs_width",
        0,
        4
      ],
      [
        "ene_data_fs_offset",
        4,
        8
      ],
      [
        "ene_scratchpad_push_size",
        12,
        8
      ],
      [
        "ene_scratchpad_data_shift",
        20,
        3
      ],
      [
        "enc_left_shift_size_fs_width",
        23,
        3
      ],
      [
        "ene_left_shift_size_fs_offset",
        26,
        8
      ],
      [
        "ene_left_shift_fs_size",
        34,
        4
      ],
      [
        "ene_left_shift_sel",
        38,
        1
      ],
      [
        "ene_store_encap_size",
        39,
        1
      ],
      [
        "ene_store_cs_command",
        40,
        1
      ],
      [
        "ene_start_next_macro",
        41,
        1
      ],
      [
        "ene_op",
        42,
        4
      ]
    ]
  },
  "npu_host_rmep_last_time": {
    "type": "memory",
    "block": "npu_host",
    "width": 32,
    "desc": "Direct table mapping the last time each a CC frame was received from each of the RMEPs",
    "fields": [
      [
        "last_time",
        0,
        32
      ]
    ]
  },
  "npu_host_rmep_state_table": {
    "type": "memory",
    "block": "npu_host",
    "width": 16,
    "desc": "Direct table mapping state (additional data) for each of the RMEPs",
    "fields": [
      [
        "rmep_valid",
        0,
        1
      ],
      [
        "rmep_profile",
        1,
        4
      ],
      [
        "rmep_data",
        5,
        11
      ]
    ]
  },
  "npu_host_interval_mapping": {
    "type": "memory",
    "block": "npu_host",
    "width": 32,
    "desc": "Direct table mapping state (additional data) for each of the RMEPs",
    "fields": [
      [
        "maximum_time",
        0,
        32
      ]
    ]
  },
  "npu_host_mp_data_table": {
    "type": "memory",
    "block": "npu_host",
    "width": 200,
    "desc": "Direct table mapping MP index to the relevant data regarding this mainainance point",
    "fields": [
      [
        "mp_valid",
        0,
        1
      ],
      [
        "aux_ptr",
        1,
        12
      ],
      [
        "ccm_valid",
        13,
        1
      ],
      [
        "lm_valid",
        14,
        1
      ],
      [
        "dm_valid",
        15,
        1
      ],
      [
        "ccm_period",
        16,
        3
      ],
      [
        "ccm_count_phase",
        19,
        12
      ],
      [
        "lm_period",
        31,
        3
      ],
      [
        "lm_count_phase",
        34,
        12
      ],
      [
        "dm_period",
        46,
        3
      ],
      [
        "dm_count_phase",
        49,
        12
      ],
      [
        "data",
        61,
        139
      ]
    ]
  },
  "npu_host_aux_data_table": {
    "type": "memory",
    "block": "npu_host",
    "width": 160,
    "desc": "Direct table mapping MP index to the relevant data regarding this mainainance point",
    "fields": [
      [
        "packet_header_type",
        0,
        8
      ],
      [
        "count_phase",
        8,
        8
      ],
      [
        "data",
        16,
        144
      ]
    ]
  },
  "npu_host_event_queue": {
    "type": "memory",
    "block": "npu_host",
    "width": 61,
    "desc": "events stored for the CPU to read",
    "fields": [
      [
        "event_data",
        0,
        61
      ]
    ]
  },
  "npu_host_packet_data_table": {
    "type": "memory",
    "block": "npu_host",
    "width": 129,
    "desc": "",
    "fields": [
      [
        "next_recycle_valid",
        0,
        1
      ],
      [
        "packet_data",
        1,
        128
      ]
    ]
  },
  "npu_host_max_sat_counter": {
    "type": "memory",
    "block": "npu_host",
    "width": 12,
    "desc": "max per sat type",
    "fields": [
      [
        "max_counter",
        0,
        12
      ]
    ]
  },
  "npu_host_max_ccm_counter": {
    "type": "memory",
    "block": "npu_host",
    "width": 12,
    "desc": "max per profile",
    "fields": [
      [
        "ccm_counter",
        0,
        12
      ]
    ]
  },
  "npu_host_max_lm_counter": {
    "type": "memory",
    "block": "npu_host",
    "width": 12,
    "desc": "max per profile",
    "fields": [
      [
        "lm_counter",
        0,
        12
      ]
    ]
  },
  "npu_host_max_dm_counter": {
    "type": "memory",
    "block": "npu_host",
    "width": 12,
    "desc": "max per profile",
    "fields": [
      [
        "dm_counter",
        0,
        12
      ]
    ]
  },
  "npu_host_ene_data_memory": {
    "type": "memory",
    "block": "npu_host",
    "width": 128,
    "desc": "Holds commonly used big data for the ENE. Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    "fields": [
      [
        "ene_data_memory_line",
        0,
        128
      ]
    ]
  },
  "npu_host_eth_mp_em_verifier": {
    "type": "memory",
    "block": "npu_host",
    "width": 88,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "eth_mp_em_verifier_data",
        0,
        88
      ]
    ]
  },
  "npu_host_eth_mp_em_cam": {
    "type": "memory",
    "block": "npu_host",
    "width": 50,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "eth_mp_em_cam_payload",
        0,
        40
      ],
      [
        "eth_mp_em_cam_key",
        40,
        50
      ],
      [
        "eth_mp_em_cam_valid",
        90,
        1
      ]
    ]
  },
  "rxpp_fwd_interrupt_register": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 6,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "cache_interrupt_reg_summary",
        1,
        1
      ],
      [
        "npes_interrupt_summary_reg_summary",
        2,
        1
      ],
      [
        "flow_cache_queues_interrupt_reg_summary",
        3,
        1
      ],
      [
        "ifg0_flow_cache_queues_and_sna_interrupt_reg_summary",
        4,
        1
      ],
      [
        "ifg1_flow_cache_queues_and_sna_interrupt_reg_summary",
        5,
        1
      ]
    ]
  },
  "rxpp_fwd_mem_protect_interrupt": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rxpp_fwd_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rxpp_fwd_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 5,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "learn_records_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "sna_result_table_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "fec_table_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "from_term_res_lb_key_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cache_idx_to_pkt_ctxt_ecc_1b_err_interrupt_mask",
        4,
        1
      ]
    ]
  },
  "rxpp_fwd_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 5,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "learn_records_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "sna_result_table_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "fec_table_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "from_term_res_lb_key_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cache_idx_to_pkt_ctxt_ecc_2b_err_interrupt_mask",
        4,
        1
      ]
    ]
  },
  "rxpp_fwd_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 2,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "frag0_parity_err_interrupt_mask",
        0,
        1
      ],
      [
        "frag1_parity_err_interrupt_mask",
        1,
        1
      ]
    ]
  },
  "rxpp_fwd_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 5,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "learn_records_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "sna_result_table_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "fec_table_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "from_term_res_lb_key_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "cache_idx_to_pkt_ctxt_ecc_1b_err_initiate",
        4,
        1
      ]
    ]
  },
  "rxpp_fwd_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 5,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "learn_records_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "sna_result_table_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "fec_table_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "from_term_res_lb_key_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "cache_idx_to_pkt_ctxt_ecc_2b_err_initiate",
        4,
        1
      ]
    ]
  },
  "rxpp_fwd_parity_err_initiate_register": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 2,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "frag0_parity_err_initiate",
        0,
        1
      ],
      [
        "frag1_parity_err_initiate",
        1,
        1
      ]
    ]
  },
  "rxpp_fwd_mem_protect_err_status": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 7,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "learn_records_err_int",
        0,
        1
      ],
      [
        "frag0_err_int",
        1,
        1
      ],
      [
        "frag1_err_int",
        2,
        1
      ],
      [
        "sna_result_table_err_int",
        3,
        1
      ],
      [
        "fec_table_err_int",
        4,
        1
      ],
      [
        "from_term_res_lb_key_err_int",
        5,
        1
      ],
      [
        "cache_idx_to_pkt_ctxt_err_int",
        6,
        1
      ]
    ]
  },
  "rxpp_fwd_selected_ser_error_info": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "rxpp_fwd_ser_error_debug_configuration": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "rxpp_fwd_ecc_1b_err_debug": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rxpp_fwd_ecc_2b_err_debug": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rxpp_fwd_parity_err_debug": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "rxpp_fwd_counter_timer": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rxpp_fwd_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_memory_access_timeout": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rxpp_fwd_broadcast_config_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rxpp_fwd_memory_prot_bypass": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rxpp_fwd_soft_reset_configuration": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_mbist_configuration": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rxpp_fwd_power_down_configuration": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_spare_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rxpp_fwd_pmro_ctrl": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rxpp_fwd_pmro_status": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rxpp_fwd_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rxpp_fwd_mirror_bus_status": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rxpp_fwd_device_time_offset_cfg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rxpp_fwd_cache_interrupt_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "interrupt caused by the cache cfg top",
    "fields": [
      [
        "cache_interrupt",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_cache_interrupt_reg_mask": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "This register masks cache_interrupt_reg interrupt register",
    "fields": [
      [
        "cache_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_cache_interrupt_reg_test": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "This register tests cache_interrupt_reg interrupt register",
    "fields": [
      [
        "cache_interrupt_test",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_npes_interrupt_summary_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "npe0_interrupt_summary",
        0,
        1
      ],
      [
        "npe1_interrupt_summary",
        1,
        1
      ],
      [
        "npe2_interrupt_summary",
        2,
        1
      ]
    ]
  },
  "rxpp_fwd_npes_interrupt_summary_reg_mask": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "npe0_interrupt_summary_mask",
        0,
        1
      ],
      [
        "npe1_interrupt_summary_mask",
        1,
        1
      ],
      [
        "npe2_interrupt_summary_mask",
        2,
        1
      ]
    ]
  },
  "rxpp_fwd_npes_interrupt_summary_reg_test": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "npe0_interrupt_summary_test",
        0,
        1
      ],
      [
        "npe1_interrupt_summary_test",
        1,
        1
      ],
      [
        "npe2_interrupt_summary_test",
        2,
        1
      ]
    ]
  },
  "rxpp_fwd_flow_cache_queues_interrupt_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "interrupt caused by the flow cache queues cfg top",
    "fields": [
      [
        "flow_cache_queues_interrupt",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_flow_cache_queues_interrupt_reg_mask": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "This register masks FlowCacheQueuesInterruptReg interrupt register",
    "fields": [
      [
        "flow_cache_queues_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_flow_cache_queues_interrupt_reg_test": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "This register tests FlowCacheQueuesInterruptReg interrupt register",
    "fields": [
      [
        "flow_cache_queues_interrupt_test",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_ifg_flow_cache_queues_and_sna_interrupt_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "Popping a packet context from the cache queues, while the SNA isn't ready for that packet context",
    "fields": [
      [
        "ifg_flow_cache_queues_pop_and_sna_not_ready_interrupt",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_ifg_flow_cache_queues_and_sna_interrupt_reg_mask": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "This register masks Ifg[2]FlowCacheQueuesAndSnaInterruptReg interrupt register",
    "fields": [
      [
        "ifg_flow_cache_queues_pop_and_sna_not_ready_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_ifg_flow_cache_queues_and_sna_interrupt_reg_test": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "This register tests Ifg[2]FlowCacheQueuesAndSnaInterruptReg interrupt register",
    "fields": [
      [
        "ifg_flow_cache_queues_pop_and_sna_not_ready_interrupt_test",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_cfg_tx_header_width": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 4,
    "desc": "Width of the tx header, which is the first part of the packet being stripped before entring the NPU",
    "fields": [
      [
        "cfg_tx_header_width_r",
        0,
        4
      ]
    ]
  },
  "rxpp_fwd_frag_error_entry_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 11,
    "desc": "When the frag memory has multiple parity errors on  a memory address, this register is used to remove the address from the frag memory address manager",
    "fields": [
      [
        "frag_dont_return_entry_valid",
        0,
        1
      ],
      [
        "frag_dont_return_entry",
        1,
        10
      ]
    ]
  },
  "rxpp_fwd_slice_work_mode_cfg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 10,
    "desc": "Working mode of the slice",
    "fields": [
      [
        "slice_work_mode",
        0,
        1
      ],
      [
        "slb_work_mode",
        1,
        1
      ],
      [
        "flow_sig_on_npuh",
        2,
        1
      ],
      [
        "flow_sig_offset_on_npuh",
        3,
        7
      ]
    ]
  },
  "rxpp_fwd_pd_construction_congurations": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 19,
    "desc": "Configurations for constructing the NPU (SMS) header from the Forwarding stage",
    "fields": [
      [
        "soft_sms_header_offset",
        0,
        9
      ],
      [
        "hard_sms_header_size",
        9,
        8
      ],
      [
        "mask_npe_err",
        17,
        1
      ],
      [
        "force_fwd_offset_cmd_to_zero",
        18,
        1
      ]
    ]
  },
  "rxpp_fwd_dual_homing_redirect_destination_cfg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 20,
    "desc": "Change RxPP.FWD_destination to this value, if SNA.dual_homing is set",
    "fields": [
      [
        "dual_homing_redirect_destination",
        0,
        20
      ]
    ]
  },
  "rxpp_fwd_tcam_comp_ldb_to_profile": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 4,
    "desc": "Maps the 5 LSBs of the TCAM key to compression-profile and compression-valid indiaction",
    "fields": [
      [
        "compression_valid",
        0,
        1
      ],
      [
        "compression_profile",
        1,
        3
      ]
    ]
  },
  "rxpp_fwd_tcam_range_compression_profile": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 18,
    "desc": "There are 8 TCAM key compression profiles",
    "fields": [
      [
        "src_offset",
        0,
        6
      ],
      [
        "src_size",
        6,
        4
      ],
      [
        "range_set",
        10,
        2
      ],
      [
        "dst_offset",
        12,
        6
      ]
    ]
  },
  "rxpp_fwd_tcam_range_compression_ranges": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 32,
    "desc": "There are four sets of ranges. Each set has 16 ranges. Each range has an upper limit and a lower limit. A value is inside a range if Value >= Range-Lower-Limit and Value <= Range-Upper-Limit",
    "fields": [
      [
        "range_high_limits",
        0,
        16
      ],
      [
        "range_low_limits",
        16,
        16
      ]
    ]
  },
  "rxpp_fwd_lpm_fec_mapping_configurations": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 12,
    "desc": "Configurations for processing the LPM-result only of the CDB interface",
    "fields": [
      [
        "dest_offset_on_lpm_result",
        0,
        6
      ],
      [
        "default_offset_on_lpm_result",
        6,
        6
      ]
    ]
  },
  "rxpp_fwd_cdb_cache_force_miss_configurations": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 14,
    "desc": "",
    "fields": [
      [
        "cdb_cache_force_miss_splitter_miso_threshold",
        0,
        7
      ],
      [
        "cdb_cache_force_miss_lpm_miso_threshold",
        7,
        7
      ]
    ]
  },
  "rxpp_fwd_lpm_fec_mapping_lsb_renponse_mapping_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 4,
    "desc": "Configurations for the resolution LB key generation, at the output of the FWD NPE lookup access",
    "fields": [
      [
        "lpm_fec_mapping_lsb_renponse_mapping",
        0,
        4
      ]
    ]
  },
  "rxpp_fwd_resolution_load_balancing_conf": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 15,
    "desc": "Configurations for the resolution LB key generation, at the output of the FWD NPE lookup access",
    "fields": [
      [
        "lb_key_mask",
        0,
        4
      ],
      [
        "lb_key_shift",
        4,
        3
      ],
      [
        "lb_key_select",
        7,
        8
      ]
    ]
  },
  "rxpp_fwd_resolution_load_balancing_field_size_conf": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 97,
    "desc": "",
    "fields": [
      [
        "field_size_is_16b",
        0,
        1
      ],
      [
        "lb_key_crc_0_init_key",
        1,
        16
      ],
      [
        "lb_key_crc_1_init_key",
        17,
        16
      ],
      [
        "lb_key_crc_2_init_key",
        33,
        16
      ],
      [
        "lb_key_crc_3_init_key",
        49,
        16
      ],
      [
        "lb_key_crc_4_init_key",
        65,
        16
      ],
      [
        "lb_key_crc_5_init_key",
        81,
        16
      ]
    ]
  },
  "rxpp_fwd_db_splitter_lp_to_mask_conf": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 8,
    "desc": "Map the NPP[13:12] returning from the CDB splitter, to 8 bits mask before inserting to the NPE",
    "fields": [
      [
        "db_splitter_lp_to_mask",
        0,
        8
      ]
    ]
  },
  "rxpp_fwd_ctm_fwd_db_mapping_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 2,
    "desc": "Map the 2 LSBs of the Central TCAM access key, to which DB responses are expected",
    "fields": [
      [
        "ctm_fwd_db_mapping",
        0,
        2
      ]
    ]
  },
  "rxpp_fwd_cbt_not_ready_counters": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 128,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "to_fwd_cem_cbt_not_irdy_cnt",
        0,
        32
      ],
      [
        "to_frag_ifg0_mem_cbt_not_irdy_cnt",
        32,
        32
      ],
      [
        "to_frag_ifg1_mem_cbt_not_irdy_cnt",
        64,
        32
      ],
      [
        "learn_record_buffer_cbt_not_irdy_cnt",
        96,
        32
      ]
    ]
  },
  "rxpp_fwd_dbc_thresholds_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 48,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "ctm_fwd0_container_free_entries_threshold",
        0,
        6
      ],
      [
        "ctm_fwd1_container_free_entries_threshold",
        6,
        6
      ],
      [
        "fwd_cem_container_free_entries_threshold",
        12,
        6
      ],
      [
        "fwd_clpm_res_container_free_entries_threshold",
        18,
        6
      ],
      [
        "fwd_res_container_free_entries_threshold",
        24,
        6
      ],
      [
        "res_container_free_entries_threshold",
        30,
        6
      ],
      [
        "frag_ifg0_mem_container_free_entries_threshold",
        36,
        6
      ],
      [
        "frag_ifg1_mem_container_free_entries_threshold",
        42,
        6
      ]
    ]
  },
  "rxpp_fwd_dbc_container_activate_priority_threshold_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "ctm_fwd0_activate_priority_free_entries_threshold",
        0,
        6
      ],
      [
        "ctm_fwd1_activate_priority_free_entries_threshold",
        6,
        6
      ],
      [
        "fwd_res_activate_priority_free_entries_threshold",
        12,
        6
      ],
      [
        "fwd_cem_activate_priority_free_entries_threshold",
        18,
        6
      ],
      [
        "fwd_clpm_res_activate_priority_free_entries_threshold",
        24,
        6
      ],
      [
        "res_activate_priority_free_entries_threshold",
        30,
        6
      ],
      [
        "frag_ifg0_mem_activate_priority_free_entries_threshold",
        36,
        6
      ],
      [
        "frag_ifg1_mem_activate_priority_free_entries_threshold",
        42,
        6
      ]
    ]
  },
  "rxpp_fwd_dbc_container_deactivate_priority_threshold_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "ctm_fwd0_deactivate_priority_free_entries_threshold",
        0,
        6
      ],
      [
        "ctm_fwd1_deactivate_priority_free_entries_threshold",
        6,
        6
      ],
      [
        "fwd_res_deactivate_priority_free_entries_threshold",
        12,
        6
      ],
      [
        "fwd_cem_deactivate_priority_free_entries_threshold",
        18,
        6
      ],
      [
        "fwd_clpm_res_deactivate_priority_free_entries_threshold",
        24,
        6
      ],
      [
        "res_deactivate_priority_free_entries_threshold",
        30,
        6
      ],
      [
        "frag_ifg0_mem_deactivate_priority_free_entries_threshold",
        36,
        6
      ],
      [
        "frag_ifg1_mem_deactivate_priority_free_entries_threshold",
        42,
        6
      ]
    ]
  },
  "rxpp_fwd_dbc_rate_limiter_period_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 42,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "ctm_fwd_rate_limiter_period",
        0,
        6
      ],
      [
        "fwd_rate_limiter_period",
        6,
        6
      ],
      [
        "fwd_cem_rate_limiter_period",
        12,
        6
      ],
      [
        "fwd_clpm_rate_limiter_period",
        18,
        6
      ],
      [
        "res_access_lb_rate_limiter_period",
        24,
        6
      ],
      [
        "frag_ifg0_mem_rate_limiter_period",
        30,
        6
      ],
      [
        "frag_ifg1_mem_rate_limiter_period",
        36,
        6
      ]
    ]
  },
  "rxpp_fwd_dbc_rate_limiting_event": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "ctm_fwd0_db_container_rate_limit_activated",
        0,
        1
      ],
      [
        "ctm_fwd1_db_container_rate_limit_activated",
        1,
        1
      ],
      [
        "fwd_res_db_container_rate_limit_activated",
        2,
        1
      ],
      [
        "fwd_cem_db_container_rate_limit_activated",
        3,
        1
      ],
      [
        "fwd_clpm_res_db_container_rate_limit_activated",
        4,
        1
      ],
      [
        "res_db_container_rate_limit_activated",
        5,
        1
      ],
      [
        "frag_ifg0_mem_db_container_rate_limit_activated",
        6,
        1
      ],
      [
        "frag_ifg1_mem_db_container_rate_limit_activated",
        7,
        1
      ],
      [
        "splitter_cache_miso_force_miss",
        8,
        1
      ],
      [
        "lpm_cache_miso_force_miss",
        9,
        1
      ]
    ]
  },
  "rxpp_fwd_dbc_container_entries_min_wm": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "ctm_fwd0_db_container_free_entries_min_wm",
        0,
        6
      ],
      [
        "ctm_fwd1_db_container_free_entries_min_wm",
        6,
        6
      ],
      [
        "fwd_res_db_container_free_entries_min_wm",
        12,
        6
      ],
      [
        "fwd_cem_db_container_free_entries_min_wm",
        18,
        6
      ],
      [
        "fwd_clpm_res_db_container_free_entries_min_wm",
        24,
        6
      ],
      [
        "res_db_container_free_entries_min_wm",
        30,
        6
      ],
      [
        "frag_ifg0_mem_db_container_free_entries_min_wm",
        36,
        6
      ],
      [
        "frag_ifg1_mem_db_container_free_entries_min_wm",
        42,
        6
      ]
    ]
  },
  "rxpp_fwd_fwd2out_ic_debug_features": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 87,
    "desc": "",
    "fields": [
      [
        "fwd_0_phase_0_ifg0_req_max_wm",
        0,
        7
      ],
      [
        "fwd_0_phase_1_ifg0_req_max_wm",
        7,
        7
      ],
      [
        "fwd_1_phase_0_ifg0_req_max_wm",
        14,
        7
      ],
      [
        "fwd_1_phase_1_ifg0_req_max_wm",
        21,
        7
      ],
      [
        "fwd_2_phase_0_ifg0_req_max_wm",
        28,
        7
      ],
      [
        "fwd_2_phase_1_ifg0_req_max_wm",
        35,
        7
      ],
      [
        "fwd_0_phase_0_ifg1_req_max_wm",
        42,
        7
      ],
      [
        "fwd_0_phase_1_ifg1_req_max_wm",
        49,
        7
      ],
      [
        "fwd_1_phase_0_ifg1_req_max_wm",
        56,
        7
      ],
      [
        "fwd_1_phase_1_ifg1_req_max_wm",
        63,
        7
      ],
      [
        "fwd_2_phase_0_ifg1_req_max_wm",
        70,
        7
      ],
      [
        "fwd_2_phase_1_ifg1_req_max_wm",
        77,
        7
      ],
      [
        "target_ifg",
        84,
        1
      ],
      [
        "source_fwd_engine",
        85,
        2
      ]
    ]
  },
  "rxpp_fwd_rxpp_sms_debug_features": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "ifg0_sna_out_of_order_stop",
        0,
        1
      ],
      [
        "ifg1_sna_out_of_order_stop",
        1,
        1
      ],
      [
        "ifg0_reassembly_pause",
        2,
        1
      ],
      [
        "ifg1_reassembly_pause",
        3,
        1
      ]
    ]
  },
  "rxpp_fwd_learn_record_drop_event_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "learn_record_drop_event",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_ifg_rxpp_output_ic_events": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "ifg_output_rate_limiting_activated",
        0,
        1
      ],
      [
        "ifg_npe_output_fifo_oversubscription_activated",
        1,
        1
      ],
      [
        "ifg_phase0_consecutive_pops_activated",
        2,
        1
      ],
      [
        "ifg_phase1_consecutive_pops_activated",
        3,
        1
      ]
    ]
  },
  "rxpp_fwd_ifg_rxpp_output_counters": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "ifg_output_sop_counter",
        0,
        64
      ],
      [
        "ifg_drop_counter",
        64,
        64
      ]
    ]
  },
  "rxpp_fwd_ifg_frag_mem_read_events": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "ifg_npe_packet_data_read_starvation_threshold_reached",
        0,
        1
      ],
      [
        "ifg_npe_packet_data_read_unserved_requests_threshold_reached",
        1,
        1
      ],
      [
        "ifg_npe_packet_data_read_oversubscription_reached",
        2,
        1
      ]
    ]
  },
  "rxpp_fwd_rxpp_fwd_fifo_water_marks": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 34,
    "desc": "",
    "fields": [
      [
        "ifg0_backpressure_fifo0_wm",
        0,
        7
      ],
      [
        "ifg1_backpressure_fifo1_wm",
        7,
        7
      ],
      [
        "splitter_cache_miso_max_wm",
        14,
        7
      ],
      [
        "lpm_cache_miso_max_wm",
        21,
        7
      ],
      [
        "learn_record_buffer_fifo_max_wm",
        28,
        6
      ]
    ]
  },
  "rxpp_fwd_ipv4_error_checks": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 6,
    "desc": "Which error checks to perform for IPv4 headers (between termination and forwarding stages)",
    "fields": [
      [
        "check_ipv4_checksum_error",
        0,
        1
      ],
      [
        "check_ipv4_ttl_error",
        1,
        1
      ],
      [
        "check_ipv4_version_error",
        2,
        1
      ],
      [
        "check_ipv4_ihl_error",
        3,
        1
      ],
      [
        "check_ipv4_total_length_error",
        4,
        1
      ],
      [
        "check_ipv4_sip_mc_error",
        5,
        1
      ]
    ]
  },
  "rxpp_fwd_ethernet_error_checks": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 2,
    "desc": "Which error checks to perform for Ethernet headers (between termination and forwarding stages)",
    "fields": [
      [
        "check_eth_sa_mc_error",
        0,
        1
      ],
      [
        "check_eth_sa_da_error",
        1,
        1
      ]
    ]
  },
  "rxpp_fwd_term2fwd_err_header_type_mapping_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 2,
    "desc": "Map the FWD header type (out of termination stage) to network header type, for error checking",
    "fields": [
      [
        "term2fwd_err_header_type_mapping",
        0,
        2
      ]
    ]
  },
  "rxpp_fwd_res_lb_header_type_mapping_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 10,
    "desc": "Configurations for the hardwired Resolution LB Key calculation, between the termination and forwarding stages",
    "fields": [
      [
        "res_lb_key_header_type_mapping",
        0,
        3
      ],
      [
        "res_lb_key_next_header_type_mapping",
        3,
        3
      ],
      [
        "res_lb_key_current_header_type_to_profile_mapping",
        6,
        2
      ],
      [
        "res_lb_key_next_header_type_to_profile_mapping",
        8,
        2
      ]
    ]
  },
  "rxpp_fwd_res_lb_profile_fs_insturctions_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 38,
    "desc": "Maps the current and next header profiles to two field select configurations and a mask",
    "fields": [
      [
        "res_lb_key_fs0_instruction",
        0,
        12
      ],
      [
        "res_lb_key_fs1_instruction",
        12,
        12
      ],
      [
        "res_lb_key_soft_mask_size",
        24,
        7
      ],
      [
        "res_lb_key_soft_mask_offset",
        31,
        7
      ]
    ]
  },
  "rxpp_fwd_res_lb_key_const_config_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 163,
    "desc": "Constant configuration for the hardwired Resolution LB Key calculation, between the termination and forwarding stages",
    "fields": [
      [
        "res_lb_key_hash_shift",
        0,
        3
      ],
      [
        "res_lb_key_key_0_const_add",
        3,
        16
      ],
      [
        "res_lb_key_key_1_const_add",
        19,
        16
      ],
      [
        "res_lb_key_key_2_const_add",
        35,
        16
      ],
      [
        "res_lb_key_key_3_const_add",
        51,
        16
      ],
      [
        "res_lb_key_crc_0_init_key",
        67,
        16
      ],
      [
        "res_lb_key_crc_1_init_key",
        83,
        16
      ],
      [
        "res_lb_key_crc_2_init_key",
        99,
        16
      ],
      [
        "res_lb_key_crc_3_init_key",
        115,
        16
      ],
      [
        "res_lb_key_crc_4_init_key",
        131,
        16
      ],
      [
        "res_lb_key_crc_5_init_key",
        147,
        16
      ]
    ]
  },
  "rxpp_fwd_cache_cbt_threshold_config_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 14,
    "desc": "",
    "fields": [
      [
        "splitter_cache_cbt_threshold",
        0,
        7
      ],
      [
        "lpm_cache_cbt_threshold",
        7,
        7
      ]
    ]
  },
  "rxpp_fwd_fwd2out_ic_config_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 50,
    "desc": "",
    "fields": [
      [
        "fwd2out_ic_rate_limiting_threshold",
        0,
        6
      ],
      [
        "fwd2out_ic_rate_limiting_enabled_when_phase_empty",
        6,
        1
      ],
      [
        "fwd2out_ic_rate_limiting_period",
        7,
        7
      ],
      [
        "fwd2out_ic_max_phase_skew_threshold",
        14,
        8
      ],
      [
        "npe_ifg0_output_fifo_oversubscription_activate_threshold",
        22,
        7
      ],
      [
        "npe_ifg0_output_fifo_oversubscription_deactivate_threshold",
        29,
        7
      ],
      [
        "npe_ifg1_output_fifo_oversubscription_activate_threshold",
        36,
        7
      ],
      [
        "npe_ifg1_output_fifo_oversubscription_deactivate_threshold",
        43,
        7
      ]
    ]
  },
  "rxpp_fwd_sna_timeout_configuration": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 66,
    "desc": "SNA timeout configurations",
    "fields": [
      [
        "sna_timeout_threshold",
        0,
        32
      ],
      [
        "sna_timeout_pd_drop_indication",
        32,
        1
      ],
      [
        "sna_timeout_pd_snr_psn_indication",
        33,
        20
      ],
      [
        "sna_timeout_pd_snr_context_indication",
        53,
        13
      ]
    ]
  },
  "rxpp_fwd_flow_cache_sna_override_values_configurations": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 33,
    "desc": "SNA timeout configurations",
    "fields": [
      [
        "flow_cache_override_pd_snr_psn_indication",
        0,
        20
      ],
      [
        "flow_cache_override_pd_snr_context_indication",
        20,
        13
      ]
    ]
  },
  "rxpp_fwd_cache_queues_vs_npu_arb_configurations": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 15,
    "desc": "",
    "fields": [
      [
        "enable_wrr",
        0,
        1
      ],
      [
        "pop_npu_weight",
        1,
        7
      ],
      [
        "pop_flc_queue_weight",
        8,
        7
      ]
    ]
  },
  "rxpp_fwd_term_to_fwd_hdr_shift_configurations": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "enable_term_to_fwd_header_shift",
        0,
        1
      ],
      [
        "term_to_fwd_header_shift_npl_disable_offset_recalc_indication_offset",
        1,
        6
      ],
      [
        "term_to_fwd_header_shift_highest_header_to_update",
        7,
        4
      ]
    ]
  },
  "rxpp_fwd_npe_packet_data_read_conf": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 23,
    "desc": "",
    "fields": [
      [
        "npe_packet_data_read_starvation_threshold",
        0,
        8
      ],
      [
        "npe_packet_data_read_unserved_requests_threshold",
        8,
        5
      ],
      [
        "npe_packet_data_read_oversubscription_activate_threshold",
        13,
        5
      ],
      [
        "npe_packet_data_read_oversubscription_deactivate_threshold",
        18,
        5
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_indications": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 352,
    "desc": "All Event monitor's outpus (cleared on the same read)",
    "fields": [
      [
        "ifg_event_mon_acc0",
        0,
        64
      ],
      [
        "ifg_event_mon_captured_data",
        64,
        192
      ],
      [
        "ifg_event_mon_time_of_day",
        256,
        32
      ],
      [
        "ifg_event_mon_clock_counter",
        288,
        64
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_enable_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "Debug Event Monitor: Enable indication",
    "fields": [
      [
        "ifg_event_mon_enable",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_field_offset_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 32,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "ifg_event_mon_field0_offset",
        0,
        8
      ],
      [
        "ifg_event_mon_field1_offset",
        8,
        8
      ],
      [
        "ifg_event_mon_field2_offset",
        16,
        8
      ],
      [
        "ifg_event_mon_field3_offset",
        24,
        8
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_field_mask_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 192,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "ifg_event_mon_field0_mask",
        0,
        48
      ],
      [
        "ifg_event_mon_field1_mask",
        48,
        48
      ],
      [
        "ifg_event_mon_field2_mask",
        96,
        48
      ],
      [
        "ifg_event_mon_field3_mask",
        144,
        48
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_field_part_of_and_bitmap": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 4,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'and' condition",
    "fields": [
      [
        "ifg_event_mon_field0_part_of_and_bitmap",
        0,
        1
      ],
      [
        "ifg_event_mon_field1_part_of_and_bitmap",
        1,
        1
      ],
      [
        "ifg_event_mon_field2_part_of_and_bitmap",
        2,
        1
      ],
      [
        "ifg_event_mon_field3_part_of_and_bitmap",
        3,
        1
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_field_part_of_or_bitmap": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 4,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'Or' condition",
    "fields": [
      [
        "ifg_event_mon_field0_part_of_or_bitmap",
        0,
        1
      ],
      [
        "ifg_event_mon_field1_part_of_or_bitmap",
        1,
        1
      ],
      [
        "ifg_event_mon_field2_part_of_or_bitmap",
        2,
        1
      ],
      [
        "ifg_event_mon_field3_part_of_or_bitmap",
        3,
        1
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_compare_mode_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 8,
    "desc": "Event monitor compare mode register per field: 2b00 Equal, 2b01 Not equal, 2b01 Smaller than, 2b11 Greater than",
    "fields": [
      [
        "ifg_event_mon_field0_compare_mode",
        0,
        2
      ],
      [
        "ifg_event_mon_field1_compare_mode",
        2,
        2
      ],
      [
        "ifg_event_mon_field2_compare_mode",
        4,
        2
      ],
      [
        "ifg_event_mon_field3_compare_mode",
        6,
        2
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_compare_value_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 192,
    "desc": "Event monitor: The value which is compared to the masked field",
    "fields": [
      [
        "ifg_event_mon_field0_compare_value",
        0,
        48
      ],
      [
        "ifg_event_mon_field1_compare_value",
        48,
        48
      ],
      [
        "ifg_event_mon_field2_compare_value",
        96,
        48
      ],
      [
        "ifg_event_mon_field3_compare_value",
        144,
        48
      ]
    ]
  },
  "rxpp_fwd_ifg_event_mon_mode_reg": {
    "type": "register",
    "block": "rxpp_fwd",
    "width": 2,
    "desc": "Event monitor: Defines a 'hit' as 1 of 4 options between the '&' and '|' comparators: 00-only 'and'; 01-only 'or' ;10-'and'&'or; 11-'and'|'or' ",
    "fields": [
      [
        "ifg_event_mon_mode",
        0,
        2
      ]
    ]
  },
  "rxpp_fwd_learn_records": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 83,
    "desc": "memory in learn record buffer to hold records until signal from reassebly ",
    "fields": [
      [
        "learn_record",
        0,
        83
      ]
    ]
  },
  "rxpp_fwd_frag": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 3096,
    "desc": "segment_mem_in_rxpp_top",
    "fields": [
      [
        "word_2",
        0,
        1024
      ],
      [
        "word_1",
        1024,
        1024
      ],
      [
        "word_0",
        2048,
        1024
      ],
      [
        "fd",
        3072,
        24
      ]
    ]
  },
  "rxpp_fwd_sna_result_table": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 76,
    "desc": "sna_result_table",
    "fields": [
      [
        "flow_signature",
        0,
        36
      ],
      [
        "snr_outgoing_interface",
        36,
        2
      ],
      [
        "reorder_context_id",
        38,
        13
      ],
      [
        "packet_sequence_number",
        51,
        20
      ],
      [
        "packet_is_eos",
        71,
        1
      ],
      [
        "close_prev_segment",
        72,
        1
      ],
      [
        "dual_homing_redirect",
        73,
        1
      ],
      [
        "is_slb",
        74,
        1
      ],
      [
        "err",
        75,
        1
      ]
    ]
  },
  "rxpp_fwd_fec_table": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 56,
    "desc": "FEC mapping table. Map the 5 LSBs of the LPM destination",
    "fields": [
      [
        "fec",
        0,
        56
      ]
    ]
  },
  "rxpp_fwd_fec_table_access_map_reg": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 1,
    "desc": "Map the 5 MSBs of the LPM destination, to whether FEC Mapping should be performed or not",
    "fields": [
      [
        "fec_table_access_map",
        0,
        1
      ]
    ]
  },
  "rxpp_fwd_snoop_code_to_mirror_cmd0": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 5,
    "desc": "Map the snoop code to mirror command 0",
    "fields": [
      [
        "map",
        0,
        5
      ]
    ]
  },
  "rxpp_fwd_mirror_code_to_mirror_cmd1": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 5,
    "desc": "Map the mirror code to mirror command 1",
    "fields": [
      [
        "map",
        0,
        5
      ]
    ]
  },
  "rxpp_fwd_mirror_code_2_to_mirror_cmd2": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 5,
    "desc": "Map the mirror code to mirror command 1",
    "fields": [
      [
        "map",
        0,
        5
      ]
    ]
  },
  "rxpp_fwd_nppd_dest_to_pd_dest": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 6,
    "desc": "Map the 6 MSBs of NPPD.destination to 6 MSBs of PD.destination",
    "fields": [
      [
        "map",
        0,
        6
      ]
    ]
  },
  "rxpp_fwd_dcf_mirror_cmd_table": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 6,
    "desc": "Map {SNA.Is-SLB(1), DCF-Data(2), NPPD.ECN (1)} to PD.mirror_code1 (if override is set) ",
    "fields": [
      [
        "dcf_mirror_cmd",
        0,
        5
      ],
      [
        "override",
        5,
        1
      ]
    ]
  },
  "rxpp_fwd_from_term_res_lb_key": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 64,
    "desc": "Save the Resolution LB Key calculated between the termination and forwarding stages",
    "fields": [
      [
        "lb_key",
        0,
        64
      ]
    ]
  },
  "rxpp_fwd_cache_idx_to_pkt_ctxt": {
    "type": "memory",
    "block": "rxpp_fwd",
    "width": 10,
    "desc": "segment_mem_in_rxpp_top",
    "fields": [
      [
        "pkt_ctxt",
        0,
        10
      ]
    ]
  },
  "fi_stage_interrupt_register": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "fi_stage_mem_protect_interrupt": {
    "type": "register",
    "block": "fi_stage",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "fi_stage_mem_protect_interrupt_test": {
    "type": "register",
    "block": "fi_stage",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "fi_stage_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "npu_first_macros_table_ecc_1b_err_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "fi_stage_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "npu_first_macros_table_ecc_2b_err_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "fi_stage_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "npu_first_macros_table_ecc_1b_err_initiate",
        0,
        1
      ]
    ]
  },
  "fi_stage_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "npu_first_macros_table_ecc_2b_err_initiate",
        0,
        1
      ]
    ]
  },
  "fi_stage_mem_protect_err_status": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "npu_first_macros_table_err_int",
        0,
        1
      ]
    ]
  },
  "fi_stage_selected_ser_error_info": {
    "type": "register",
    "block": "fi_stage",
    "width": 8,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        6
      ],
      [
        "mem_err_type",
        6,
        2
      ]
    ]
  },
  "fi_stage_ser_error_debug_configuration": {
    "type": "register",
    "block": "fi_stage",
    "width": 2,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        1
      ],
      [
        "reset_memory_errors",
        1,
        1
      ]
    ]
  },
  "fi_stage_ecc_1b_err_debug": {
    "type": "register",
    "block": "fi_stage",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "fi_stage_ecc_2b_err_debug": {
    "type": "register",
    "block": "fi_stage",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "fi_stage_tcam_scan_period_cfg": {
    "type": "register",
    "block": "fi_stage",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "fi_stage_counter_timer": {
    "type": "register",
    "block": "fi_stage",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "fi_stage_counter_timer_trigger_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "fi_stage_memory_access_timeout": {
    "type": "register",
    "block": "fi_stage",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "fi_stage_broadcast_config_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "fi_stage_memory_prot_bypass": {
    "type": "register",
    "block": "fi_stage",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "fi_stage_soft_reset_configuration": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "fi_stage_mbist_configuration": {
    "type": "register",
    "block": "fi_stage",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "fi_stage_power_down_configuration": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "fi_stage_spare_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "fi_stage_pmro_ctrl": {
    "type": "register",
    "block": "fi_stage",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "fi_stage_pmro_status": {
    "type": "register",
    "block": "fi_stage",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "fi_stage_mirror_bus_conf_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "fi_stage_mirror_bus_status": {
    "type": "register",
    "block": "fi_stage",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "fi_stage_device_time_offset_cfg": {
    "type": "register",
    "block": "fi_stage",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "fi_stage_cfg_tx_header_width": {
    "type": "register",
    "block": "fi_stage",
    "width": 4,
    "desc": "Width of the tx header, which is the first part of the packet being stripped before entring the NPU",
    "fields": [
      [
        "cfg_tx_header_width_r",
        0,
        4
      ]
    ]
  },
  "fi_stage_ifg_ready_threshold": {
    "type": "register",
    "block": "fi_stage",
    "width": 12,
    "desc": "The threshold of remaning free entries in the frag memory, before de-asserting the ready towards the IFG",
    "fields": [
      [
        "frag0_mem_threshold_r",
        0,
        6
      ],
      [
        "frag1_mem_threshold_r",
        6,
        6
      ]
    ]
  },
  "fi_stage_fi_input_fifo_ready_threshold_cfg": {
    "type": "register",
    "block": "fi_stage",
    "width": 5,
    "desc": "Threshold before de-asserting the FI input FIFO ready towards IFG",
    "fields": [
      [
        "fi_input_fifo_ready_threshold",
        0,
        5
      ]
    ]
  },
  "fi_stage_ifg_back_pressure_fifo_threshold_cfg": {
    "type": "register",
    "block": "fi_stage",
    "width": 5,
    "desc": "Threshold before de-asserting the FI input FIFO ready towards IFG",
    "fields": [
      [
        "ifg_back_pressure_fifo_almost_full_threshold",
        0,
        5
      ]
    ]
  },
  "fi_stage_stamp_recycle_data_mapping_cfg": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "stamp_recycle_data_mapping",
        0,
        1
      ]
    ]
  },
  "fi_stage_recycle_port_id_conf": {
    "type": "register",
    "block": "fi_stage",
    "width": 5,
    "desc": "Max amount of concecutive cycles that the configurable fi is waiting (and hw fi is sending data out) until cfg fi getts the priority.",
    "fields": [
      [
        "recycle_port_id",
        0,
        5
      ]
    ]
  },
  "fi_stage_term_ifg_debug_features": {
    "type": "register",
    "block": "fi_stage",
    "width": 86,
    "desc": "",
    "fields": [
      [
        "flow_control_to_ifg0",
        0,
        1
      ],
      [
        "flow_control_to_ifg1",
        1,
        1
      ],
      [
        "ifg0_free_threads_min_wm",
        2,
        10
      ],
      [
        "ifg1_free_threads_min_wm",
        12,
        10
      ],
      [
        "ifg0_input_sop_counter",
        22,
        32
      ],
      [
        "ifg1_input_sop_counter",
        54,
        32
      ]
    ]
  },
  "fi_stage_per_ifg_fifos_max_wms": {
    "type": "register",
    "block": "fi_stage",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "ifg_bp_fifo_max_wm",
        0,
        6
      ],
      [
        "ifg_cfg_fi_input_fifo_max_wm",
        6,
        6
      ]
    ]
  },
  "fi_stage_top_debug_data_bus_register": {
    "type": "register",
    "block": "fi_stage",
    "width": 32,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "top_debug_data_bus",
        0,
        32
      ]
    ]
  },
  "fi_stage_top_debug_data_select_register": {
    "type": "register",
    "block": "fi_stage",
    "width": 7,
    "desc": "debug_data_select_register",
    "fields": [
      [
        "top_debug_data_select",
        0,
        7
      ]
    ]
  },
  "fi_stage_hw_fi_levels_macro_ids": {
    "type": "register",
    "block": "fi_stage",
    "width": 72,
    "desc": "",
    "fields": [
      [
        "hw_fi_vlan0_macro_id",
        0,
        6
      ],
      [
        "hw_fi_vlan0_last_macro_id",
        6,
        6
      ],
      [
        "hw_fi_eth_macro_id",
        12,
        6
      ],
      [
        "hw_fi_eth_last_macro_id",
        18,
        6
      ],
      [
        "hw_fi_vlan1_macro_id",
        24,
        6
      ],
      [
        "hw_fi_vlan1_last_macro_id",
        30,
        6
      ],
      [
        "hw_fi_vlan2_macro_id",
        36,
        6
      ],
      [
        "hw_fi_vlan2_last_macro_id",
        42,
        6
      ],
      [
        "hw_fi_ip_macro_id",
        48,
        6
      ],
      [
        "hw_fi_ip_last_macro_id",
        54,
        6
      ],
      [
        "hw_fi_udp_macro_id",
        60,
        6
      ],
      [
        "hw_fi_udp_last_macro_id",
        66,
        6
      ]
    ]
  },
  "fi_stage_hw_fi_ipv4_error_checks": {
    "type": "register",
    "block": "fi_stage",
    "width": 6,
    "desc": "Which error checks to perform for IPv4 headers",
    "fields": [
      [
        "hw_fi_check_ipv4_checksum_error",
        0,
        1
      ],
      [
        "hw_fi_check_ipv4_ttl_error",
        1,
        1
      ],
      [
        "hw_fi_check_ipv4_version_error",
        2,
        1
      ],
      [
        "hw_fi_check_ipv4_ihl_error",
        3,
        1
      ],
      [
        "hw_fi_check_ipv4_total_length_error",
        4,
        1
      ],
      [
        "hw_fi_check_ipv4_sip_mc_error",
        5,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_ipv6_error_checks": {
    "type": "register",
    "block": "fi_stage",
    "width": 7,
    "desc": "Which error checks to perform for IPv6 headers",
    "fields": [
      [
        "hw_fi_check_ipv6_dip_equal_sip_error",
        0,
        1
      ],
      [
        "hw_fi_check_ipv6_hop_limit_error",
        1,
        1
      ],
      [
        "hw_fi_check_ipv6_version_error",
        2,
        1
      ],
      [
        "hw_fi_check_ipv6_size_error",
        3,
        1
      ],
      [
        "hw_fi_check_ipv6_sip_dip0_error",
        4,
        1
      ],
      [
        "hw_fi_check_ipv6_sip_dip1_error",
        5,
        1
      ],
      [
        "hw_fi_check_ipv6_sip_mc_error",
        6,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_cam_miss_invalid_data": {
    "type": "register",
    "block": "fi_stage",
    "width": 6,
    "desc": "The Header type & is layer  the HW-FI will put in case any HW-FI core parses an un-recognised (not configured) next headr type",
    "fields": [
      [
        "hw_fi_invalid_header_type",
        0,
        5
      ],
      [
        "hw_fi_invalid_is_layer",
        5,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_wm_stage": {
    "type": "register",
    "block": "fi_stage",
    "width": 4,
    "desc": "The Header type & is layer  the HW-FI will put in case any HW-FI core parses an un-recognised (not configured) next headr type",
    "fields": [
      [
        "hw_fi_np_macro_fifo_wm",
        0,
        4
      ]
    ]
  },
  "fi_stage_hw_fi_end_of_pipe_last_macro_id": {
    "type": "register",
    "block": "fi_stage",
    "width": 6,
    "desc": "The HW FI will compare the last macro ID it gets (from the last core), and if it is equal to this macro id, it will set Is_Last signal, indicating that we can bypass the configurable FI.",
    "fields": [
      [
        "hw_fi_last_macro_id",
        0,
        6
      ]
    ]
  },
  "fi_stage_hw_fi_max_amount_of_cfg_fi_starvation": {
    "type": "register",
    "block": "fi_stage",
    "width": 7,
    "desc": "Max amount of concecutive cycles that the configurable fi is waiting (and hw fi is sending data out) until cfg fi getts the priority.",
    "fields": [
      [
        "hw_fi_starvation_prevention_activated",
        0,
        1
      ],
      [
        "hw_fi_amount_of_cfg_fi_starvation",
        1,
        6
      ]
    ]
  },
  "fi_stage_hw_fi_counters_stage": {
    "type": "register",
    "block": "fi_stage",
    "width": 384,
    "desc": "",
    "fields": [
      [
        "hw_fi_vlan0_match_counter",
        0,
        64
      ],
      [
        "hw_fi_eth_match_counter",
        64,
        64
      ],
      [
        "hw_fi_vlan1_match_counter",
        128,
        64
      ],
      [
        "hw_fi_vlan2_match_counter",
        192,
        64
      ],
      [
        "hw_fi_ip_match_counter",
        256,
        64
      ],
      [
        "hw_fi_udp_match_counter",
        320,
        64
      ]
    ]
  },
  "fi_stage_hw_fi_miss_in_cam": {
    "type": "register",
    "block": "fi_stage",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "hw_fi_vlan0_miss_in_cam",
        0,
        1
      ],
      [
        "hw_fi_eth_miss_in_cam",
        1,
        1
      ],
      [
        "hw_fi_vlan1_miss_in_cam",
        2,
        1
      ],
      [
        "hw_fi_vlan2_miss_in_cam",
        3,
        1
      ],
      [
        "hw_fi_ip_miss_in_cam",
        4,
        1
      ],
      [
        "hw_fi_udp_miss_in_cam",
        5,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_is_last_cnt": {
    "type": "register",
    "block": "fi_stage",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "hw_fi_is_last_counter",
        0,
        64
      ]
    ]
  },
  "fi_stage_hw_fi_backpressure_event_stage": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "hw_fi_backpressure",
        0,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_debug_data_bus_register": {
    "type": "register",
    "block": "fi_stage",
    "width": 32,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "fi_stage_hw_fi_debug_data_select_register": {
    "type": "register",
    "block": "fi_stage",
    "width": 7,
    "desc": "debug_data_select_register",
    "fields": [
      [
        "debug_data_select",
        0,
        7
      ]
    ]
  },
  "fi_stage_ifg_event_mon_indications": {
    "type": "register",
    "block": "fi_stage",
    "width": 256,
    "desc": "All Event monitor's outpus (cleared on the same read)",
    "fields": [
      [
        "ifg_event_mon_acc0",
        0,
        64
      ],
      [
        "ifg_event_mon_captured_data",
        64,
        96
      ],
      [
        "ifg_event_mon_time_of_day",
        160,
        32
      ],
      [
        "ifg_event_mon_clock_counter",
        192,
        64
      ]
    ]
  },
  "fi_stage_ifg_event_mon_enable_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 1,
    "desc": "Debug Event Monitor: Enable indication",
    "fields": [
      [
        "ifg_event_mon_enable",
        0,
        1
      ]
    ]
  },
  "fi_stage_ifg_event_mon_field_offset_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 32,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "ifg_event_mon_field0_offset",
        0,
        8
      ],
      [
        "ifg_event_mon_field1_offset",
        8,
        8
      ],
      [
        "ifg_event_mon_field2_offset",
        16,
        8
      ],
      [
        "ifg_event_mon_field3_offset",
        24,
        8
      ]
    ]
  },
  "fi_stage_ifg_event_mon_field_mask_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 96,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "ifg_event_mon_field0_mask",
        0,
        24
      ],
      [
        "ifg_event_mon_field1_mask",
        24,
        24
      ],
      [
        "ifg_event_mon_field2_mask",
        48,
        24
      ],
      [
        "ifg_event_mon_field3_mask",
        72,
        24
      ]
    ]
  },
  "fi_stage_ifg_event_mon_field_part_of_and_bitmap": {
    "type": "register",
    "block": "fi_stage",
    "width": 4,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'and' condition",
    "fields": [
      [
        "ifg_event_mon_field0_part_of_and_bitmap",
        0,
        1
      ],
      [
        "ifg_event_mon_field1_part_of_and_bitmap",
        1,
        1
      ],
      [
        "ifg_event_mon_field2_part_of_and_bitmap",
        2,
        1
      ],
      [
        "ifg_event_mon_field3_part_of_and_bitmap",
        3,
        1
      ]
    ]
  },
  "fi_stage_ifg_event_mon_field_part_of_or_bitmap": {
    "type": "register",
    "block": "fi_stage",
    "width": 4,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'Or' condition",
    "fields": [
      [
        "ifg_event_mon_field0_part_of_or_bitmap",
        0,
        1
      ],
      [
        "ifg_event_mon_field1_part_of_or_bitmap",
        1,
        1
      ],
      [
        "ifg_event_mon_field2_part_of_or_bitmap",
        2,
        1
      ],
      [
        "ifg_event_mon_field3_part_of_or_bitmap",
        3,
        1
      ]
    ]
  },
  "fi_stage_ifg_event_mon_compare_mode_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 8,
    "desc": "Event monitor compare mode register per field: 2b00 Equal, 2b01 Not equal, 2b01 Smaller than, 2b11 Greater than",
    "fields": [
      [
        "ifg_event_mon_field0_compare_mode",
        0,
        2
      ],
      [
        "ifg_event_mon_field1_compare_mode",
        2,
        2
      ],
      [
        "ifg_event_mon_field2_compare_mode",
        4,
        2
      ],
      [
        "ifg_event_mon_field3_compare_mode",
        6,
        2
      ]
    ]
  },
  "fi_stage_ifg_event_mon_compare_value_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 96,
    "desc": "Event monitor: The value which is compared to the masked field",
    "fields": [
      [
        "ifg_event_mon_field0_compare_value",
        0,
        24
      ],
      [
        "ifg_event_mon_field1_compare_value",
        24,
        24
      ],
      [
        "ifg_event_mon_field2_compare_value",
        48,
        24
      ],
      [
        "ifg_event_mon_field3_compare_value",
        72,
        24
      ]
    ]
  },
  "fi_stage_ifg_event_mon_mode_reg": {
    "type": "register",
    "block": "fi_stage",
    "width": 2,
    "desc": "Event monitor: Defines a 'hit' as 1 of 4 options between the '&' and '|' comparators: 00-only 'and'; 01-only 'or' ;10-'and'&'or; 11-'and'|'or' ",
    "fields": [
      [
        "ifg_event_mon_mode",
        0,
        2
      ]
    ]
  },
  "fi_stage_npu_first_macros_table": {
    "type": "memory",
    "block": "fi_stage",
    "width": 74,
    "desc": "first macros to fi and np engines",
    "fields": [
      [
        "fi_macro",
        0,
        6
      ],
      [
        "np_marco",
        6,
        6
      ],
      [
        "tag_swap_cmd",
        12,
        2
      ],
      [
        "initial_rx_data",
        14,
        50
      ],
      [
        "first_header_is_layer",
        64,
        1
      ],
      [
        "first_header_type",
        65,
        5
      ],
      [
        "nppd_current_layer_index",
        70,
        4
      ]
    ]
  },
  "fi_stage_recycle_port_macros_table": {
    "type": "memory",
    "block": "fi_stage",
    "width": 40,
    "desc": "first macros to fi and np engines",
    "fields": [
      [
        "fi_macro",
        0,
        6
      ],
      [
        "np_marco",
        6,
        5
      ],
      [
        "tag_swap_cmd",
        11,
        2
      ],
      [
        "initial_rx_data",
        13,
        16
      ],
      [
        "nppd_current_layer_index",
        29,
        4
      ],
      [
        "first_header_is_layer",
        33,
        1
      ],
      [
        "first_header_type",
        34,
        5
      ],
      [
        "override_source_port_table",
        39,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_vlan0_core_ethertype_mapping_cam": {
    "type": "memory",
    "block": "fi_stage",
    "width": 16,
    "desc": "cam that maps the ethertype from the port extender into header type and next macro id.",
    "fields": [
      [
        "hw_fi_vlan0_core_ethertype_mapping_cam_payload",
        0,
        12
      ],
      [
        "hw_fi_vlan0_core_ethertype_mapping_cam_key",
        12,
        16
      ],
      [
        "hw_fi_vlan0_core_ethertype_mapping_cam_valid",
        28,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_eth_core_ethertype_mapping_cam": {
    "type": "memory",
    "block": "fi_stage",
    "width": 16,
    "desc": "cam that maps the ethertype from the ethernet header into header type and next macro id.",
    "fields": [
      [
        "hw_fi_eth_core_ethertype_mapping_cam_payload",
        0,
        12
      ],
      [
        "hw_fi_eth_core_ethertype_mapping_cam_key",
        12,
        16
      ],
      [
        "hw_fi_eth_core_ethertype_mapping_cam_valid",
        28,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_vlan1_core_ethertype_mapping_cam": {
    "type": "memory",
    "block": "fi_stage",
    "width": 16,
    "desc": "cam that maps the ethertype from the 1st vlan header into header type and next macro id.",
    "fields": [
      [
        "hw_fi_vlan1_core_ethertype_mapping_cam_payload",
        0,
        12
      ],
      [
        "hw_fi_vlan1_core_ethertype_mapping_cam_key",
        12,
        16
      ],
      [
        "hw_fi_vlan1_core_ethertype_mapping_cam_valid",
        28,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_vlan2_core_ethertype_mapping_cam": {
    "type": "memory",
    "block": "fi_stage",
    "width": 16,
    "desc": "cam that maps the ethertype from the 2nd vlan header into header type and next macro id.",
    "fields": [
      [
        "hw_fi_vlan2_core_ethertype_mapping_cam_payload",
        0,
        12
      ],
      [
        "hw_fi_vlan2_core_ethertype_mapping_cam_key",
        12,
        16
      ],
      [
        "hw_fi_vlan2_core_ethertype_mapping_cam_valid",
        28,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_ip_core_next_protocol_mapping_cam": {
    "type": "memory",
    "block": "fi_stage",
    "width": 9,
    "desc": "cam that maps the ethertype from the 2nd vlan header into header type and next macro id.",
    "fields": [
      [
        "hw_fi_ip_core_next_protocol_mapping_cam_payload",
        0,
        12
      ],
      [
        "hw_fi_ip_core_next_protocol_mapping_cam_key",
        12,
        9
      ],
      [
        "hw_fi_ip_core_next_protocol_mapping_cam_valid",
        21,
        1
      ]
    ]
  },
  "fi_stage_hw_fi_udp_core_next_protocol_mapping_cam": {
    "type": "memory",
    "block": "fi_stage",
    "width": 16,
    "desc": "cam that maps the udp dest port into header type and next macro id.",
    "fields": [
      [
        "hw_fi_udp_core_next_protocol_mapping_cam_payload",
        0,
        12
      ],
      [
        "hw_fi_udp_core_next_protocol_mapping_cam_key",
        12,
        16
      ],
      [
        "hw_fi_udp_core_next_protocol_mapping_cam_valid",
        28,
        1
      ]
    ]
  },
  "rxpp_term_interrupt_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 4,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "npes_interrupt_summary_reg_summary",
        1,
        1
      ],
      [
        "flc_db_interrupt_summary_reg_summary",
        2,
        1
      ],
      [
        "em_response_interrupt_summary",
        3,
        1
      ]
    ]
  },
  "rxpp_term_mem_protect_interrupt": {
    "type": "register",
    "block": "rxpp_term",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rxpp_term_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rxpp_term",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rxpp_term_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rxpp_term",
    "width": 15,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "link_lp_table_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mymac_sram_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "sm_sram_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "vlan_membership_table_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cache_q_data_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "cache_q_context_ll0_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "cache_q_context_ll1_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "tunnel_termination_table_verifier0_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "tunnel_termination_table_verifier1_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "tunnel_termination_table_verifier2_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "tunnel_termination_table_verifier3_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "tunnel_termination_table_verifier4_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "tunnel_termination_table_verifier5_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "tunnel_termination_table_verifier6_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "tunnel_termination_table_verifier7_ecc_1b_err_interrupt_mask",
        14,
        1
      ]
    ]
  },
  "rxpp_term_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rxpp_term",
    "width": 15,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "link_lp_table_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mymac_sram_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "sm_sram_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "vlan_membership_table_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cache_q_data_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "cache_q_context_ll0_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "cache_q_context_ll1_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "tunnel_termination_table_verifier0_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "tunnel_termination_table_verifier1_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "tunnel_termination_table_verifier2_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "tunnel_termination_table_verifier3_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "tunnel_termination_table_verifier4_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "tunnel_termination_table_verifier5_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "tunnel_termination_table_verifier6_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "tunnel_termination_table_verifier7_ecc_2b_err_interrupt_mask",
        14,
        1
      ]
    ]
  },
  "rxpp_term_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "rxpp_term",
    "width": 2,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "mymac_tcam_parity_err_interrupt_mask",
        0,
        1
      ],
      [
        "sm_tcam_parity_err_interrupt_mask",
        1,
        1
      ]
    ]
  },
  "rxpp_term_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 15,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "link_lp_table_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "mymac_sram_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "sm_sram_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "vlan_membership_table_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "cache_q_data_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "cache_q_context_ll0_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "cache_q_context_ll1_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "tunnel_termination_table_verifier0_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "tunnel_termination_table_verifier1_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "tunnel_termination_table_verifier2_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "tunnel_termination_table_verifier3_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "tunnel_termination_table_verifier4_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "tunnel_termination_table_verifier5_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "tunnel_termination_table_verifier6_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "tunnel_termination_table_verifier7_ecc_1b_err_initiate",
        14,
        1
      ]
    ]
  },
  "rxpp_term_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 15,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "link_lp_table_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "mymac_sram_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "sm_sram_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "vlan_membership_table_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "cache_q_data_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "cache_q_context_ll0_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "cache_q_context_ll1_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "tunnel_termination_table_verifier0_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "tunnel_termination_table_verifier1_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "tunnel_termination_table_verifier2_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "tunnel_termination_table_verifier3_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "tunnel_termination_table_verifier4_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "tunnel_termination_table_verifier5_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "tunnel_termination_table_verifier6_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "tunnel_termination_table_verifier7_ecc_2b_err_initiate",
        14,
        1
      ]
    ]
  },
  "rxpp_term_parity_err_initiate_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 2,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "mymac_tcam_parity_err_initiate",
        0,
        1
      ],
      [
        "sm_tcam_parity_err_initiate",
        1,
        1
      ]
    ]
  },
  "rxpp_term_mem_protect_err_status": {
    "type": "register",
    "block": "rxpp_term",
    "width": 17,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "link_lp_table_err_int",
        0,
        1
      ],
      [
        "mymac_tcam_err_int",
        1,
        1
      ],
      [
        "mymac_sram_err_int",
        2,
        1
      ],
      [
        "sm_tcam_err_int",
        3,
        1
      ],
      [
        "sm_sram_err_int",
        4,
        1
      ],
      [
        "vlan_membership_table_err_int",
        5,
        1
      ],
      [
        "cache_q_data_err_int",
        6,
        1
      ],
      [
        "cache_q_context_ll0_err_int",
        7,
        1
      ],
      [
        "cache_q_context_ll1_err_int",
        8,
        1
      ],
      [
        "tunnel_termination_table_verifier0_err_int",
        9,
        1
      ],
      [
        "tunnel_termination_table_verifier1_err_int",
        10,
        1
      ],
      [
        "tunnel_termination_table_verifier2_err_int",
        11,
        1
      ],
      [
        "tunnel_termination_table_verifier3_err_int",
        12,
        1
      ],
      [
        "tunnel_termination_table_verifier4_err_int",
        13,
        1
      ],
      [
        "tunnel_termination_table_verifier5_err_int",
        14,
        1
      ],
      [
        "tunnel_termination_table_verifier6_err_int",
        15,
        1
      ],
      [
        "tunnel_termination_table_verifier7_err_int",
        16,
        1
      ]
    ]
  },
  "rxpp_term_selected_ser_error_info": {
    "type": "register",
    "block": "rxpp_term",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "rxpp_term_ser_error_debug_configuration": {
    "type": "register",
    "block": "rxpp_term",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "rxpp_term_ecc_1b_err_debug": {
    "type": "register",
    "block": "rxpp_term",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rxpp_term_ecc_2b_err_debug": {
    "type": "register",
    "block": "rxpp_term",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rxpp_term_parity_err_debug": {
    "type": "register",
    "block": "rxpp_term",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "rxpp_term_tcam_bist_control": {
    "type": "register",
    "block": "rxpp_term",
    "width": 4,
    "desc": "TCAM BIST control",
    "fields": [
      [
        "tcam_strw",
        0,
        2
      ],
      [
        "tcam_bist_rst",
        2,
        1
      ],
      [
        "tcam_bist_run",
        3,
        1
      ]
    ]
  },
  "rxpp_term_tcam_bist_status": {
    "type": "register",
    "block": "rxpp_term",
    "width": 4,
    "desc": "TCAM BIST pass fail status",
    "fields": [
      [
        "tcam_bist_done_pass_out",
        0,
        2
      ],
      [
        "tcam_bist_done_fail_out",
        2,
        2
      ]
    ]
  },
  "rxpp_term_tcam_scan_period_cfg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "rxpp_term_counter_timer": {
    "type": "register",
    "block": "rxpp_term",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rxpp_term_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rxpp_term_memory_access_timeout": {
    "type": "register",
    "block": "rxpp_term",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rxpp_term_broadcast_config_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rxpp_term_memory_prot_bypass": {
    "type": "register",
    "block": "rxpp_term",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rxpp_term_soft_reset_configuration": {
    "type": "register",
    "block": "rxpp_term",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rxpp_term_mbist_configuration": {
    "type": "register",
    "block": "rxpp_term",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rxpp_term_power_down_configuration": {
    "type": "register",
    "block": "rxpp_term",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rxpp_term_spare_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rxpp_term_pmro_ctrl": {
    "type": "register",
    "block": "rxpp_term",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rxpp_term_pmro_status": {
    "type": "register",
    "block": "rxpp_term",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rxpp_term_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rxpp_term_mirror_bus_status": {
    "type": "register",
    "block": "rxpp_term",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rxpp_term_device_time_offset_cfg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rxpp_term_npes_interrupt_summary_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 3,
    "desc": "All EMs have finished initializing their memories",
    "fields": [
      [
        "npe0_interrupt_summary",
        0,
        1
      ],
      [
        "npe1_interrupt_summary",
        1,
        1
      ],
      [
        "npe2_interrupt_summary",
        2,
        1
      ]
    ]
  },
  "rxpp_term_npes_interrupt_summary_reg_mask": {
    "type": "register",
    "block": "rxpp_term",
    "width": 3,
    "desc": "This register masks NpesInterruptSummaryReg interrupt register",
    "fields": [
      [
        "npe0_interrupt_summary_mask",
        0,
        1
      ],
      [
        "npe1_interrupt_summary_mask",
        1,
        1
      ],
      [
        "npe2_interrupt_summary_mask",
        2,
        1
      ]
    ]
  },
  "rxpp_term_npes_interrupt_summary_reg_test": {
    "type": "register",
    "block": "rxpp_term",
    "width": 3,
    "desc": "This register tests NpesInterruptSummaryReg interrupt register",
    "fields": [
      [
        "npe0_interrupt_summary_test",
        0,
        1
      ],
      [
        "npe1_interrupt_summary_test",
        1,
        1
      ],
      [
        "npe2_interrupt_summary_test",
        2,
        1
      ]
    ]
  },
  "rxpp_term_flc_db_interrupt_summary_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 1,
    "desc": "All EMs have finished initializing their memories",
    "fields": [
      [
        "flc_db_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "rxpp_term_flc_db_interrupt_summary_reg_mask": {
    "type": "register",
    "block": "rxpp_term",
    "width": 1,
    "desc": "This register masks FlcDbInterruptSummaryReg interrupt register",
    "fields": [
      [
        "flc_db_interrupt_summary_mask",
        0,
        1
      ]
    ]
  },
  "rxpp_term_flc_db_interrupt_summary_reg_test": {
    "type": "register",
    "block": "rxpp_term",
    "width": 1,
    "desc": "This register tests FlcDbInterruptSummaryReg interrupt register",
    "fields": [
      [
        "flc_db_interrupt_summary_test",
        0,
        1
      ]
    ]
  },
  "rxpp_term_em_init_done_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 1,
    "desc": "All EMs have finished initializing their memories",
    "fields": [
      [
        "em_init_done",
        0,
        1
      ]
    ]
  },
  "rxpp_term_slb_work_mode_conf_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slb_mode_enable",
        0,
        1
      ]
    ]
  },
  "rxpp_term_issu_states": {
    "type": "register",
    "block": "rxpp_term",
    "width": 10,
    "desc": "ISSU State per stage and NPE in the RxPP",
    "fields": [
      [
        "rxpp_input_issu_state",
        0,
        1
      ],
      [
        "term0_input_issu_state",
        1,
        1
      ],
      [
        "term1_input_issu_state",
        2,
        1
      ],
      [
        "term2_input_issu_state",
        3,
        1
      ],
      [
        "term0_output_issu_state",
        4,
        1
      ],
      [
        "term1_output_issu_state",
        5,
        1
      ],
      [
        "term2_output_issu_state",
        6,
        1
      ],
      [
        "fwd0_input_issu_state",
        7,
        1
      ],
      [
        "fwd1_input_issu_state",
        8,
        1
      ],
      [
        "fwd2_input_issu_state",
        9,
        1
      ]
    ]
  },
  "rxpp_term_cache_queues_hw_fiv_cfg_fi_configurations": {
    "type": "register",
    "block": "rxpp_term",
    "width": 15,
    "desc": "",
    "fields": [
      [
        "fi_qs_enable_wrr",
        0,
        1
      ],
      [
        "fi_qs_pop_hw_fi_weight",
        1,
        7
      ],
      [
        "fi_qs_pop_conf_fi_weight",
        8,
        7
      ]
    ]
  },
  "rxpp_term_initial_forwarding_offset_config": {
    "type": "register",
    "block": "rxpp_term",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "initial_forwarding_offset",
        0,
        7
      ]
    ]
  },
  "rxpp_term_npe_cancel_inc_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 12,
    "desc": "When an NPE has repetetive parity error on a memory address, this address shouldn't be used.Prior to that,  these registers decrease the number of available threads in an NPE, per phase",
    "fields": [
      [
        "term0_phase0_cancel_inc",
        0,
        1
      ],
      [
        "term1_phase0_cancel_inc",
        1,
        1
      ],
      [
        "term2_phase0_cancel_inc",
        2,
        1
      ],
      [
        "term0_phase1_cancel_inc",
        3,
        1
      ],
      [
        "term1_phase1_cancel_inc",
        4,
        1
      ],
      [
        "term2_phase1_cancel_inc",
        5,
        1
      ],
      [
        "fwd0_phase0_cancel_inc",
        6,
        1
      ],
      [
        "fwd1_phase0_cancel_inc",
        7,
        1
      ],
      [
        "fwd2_phase0_cancel_inc",
        8,
        1
      ],
      [
        "fwd0_phase1_cancel_inc",
        9,
        1
      ],
      [
        "fwd1_phase1_cancel_inc",
        10,
        1
      ],
      [
        "fwd2_phase1_cancel_inc",
        11,
        1
      ]
    ]
  },
  "rxpp_term_fi2cache_ic_debug_features": {
    "type": "register",
    "block": "rxpp_term",
    "width": 15,
    "desc": "",
    "fields": [
      [
        "fi_0_transmit_req_max_wm",
        0,
        7
      ],
      [
        "fi_1_transmit_req_max_wm",
        7,
        7
      ],
      [
        "source_fi",
        14,
        1
      ]
    ]
  },
  "rxpp_term_cache2term_ic_debug_features": {
    "type": "register",
    "block": "rxpp_term",
    "width": 50,
    "desc": "",
    "fields": [
      [
        "cache_db_transmit_req_max_wm",
        0,
        6
      ],
      [
        "term_0_phase_0_free_thread_min_wm",
        6,
        7
      ],
      [
        "term_0_phase_1_free_thread_min_wm",
        13,
        7
      ],
      [
        "term_1_phase_0_free_thread_min_wm",
        20,
        7
      ],
      [
        "term_1_phase_1_free_thread_min_wm",
        27,
        7
      ],
      [
        "term_2_phase_0_free_thread_min_wm",
        34,
        7
      ],
      [
        "term_2_phase_1_free_thread_min_wm",
        41,
        7
      ],
      [
        "target_term_engine",
        48,
        2
      ]
    ]
  },
  "rxpp_term_term2fwd_ic_debug_features": {
    "type": "register",
    "block": "rxpp_term",
    "width": 88,
    "desc": "",
    "fields": [
      [
        "term_0_phase_0_req_max_wm",
        0,
        7
      ],
      [
        "term_0_phase_1_req_max_wm",
        7,
        7
      ],
      [
        "term_1_phase_0_req_max_wm",
        14,
        7
      ],
      [
        "term_1_phase_1_req_max_wm",
        21,
        7
      ],
      [
        "term_2_phase_0_req_max_wm",
        28,
        7
      ],
      [
        "term_2_phase_1_req_max_wm",
        35,
        7
      ],
      [
        "fwd_0_phase_0_free_thread_min_wm",
        42,
        7
      ],
      [
        "fwd_0_phase_1_free_thread_min_wm",
        49,
        7
      ],
      [
        "fwd_1_phase_0_free_thread_min_wm",
        56,
        7
      ],
      [
        "fwd_1_phase_1_free_thread_min_wm",
        63,
        7
      ],
      [
        "fwd_2_phase_0_free_thread_min_wm",
        70,
        7
      ],
      [
        "fwd_2_phase_1_free_thread_min_wm",
        77,
        7
      ],
      [
        "source_term_engine",
        84,
        2
      ],
      [
        "target_fwd_engine",
        86,
        2
      ]
    ]
  },
  "rxpp_term_macdb_sm_tcam_mapping_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 4,
    "desc": "Map the 3 LSBs of the sm_tcam access key, to which DB responses are expected",
    "fields": [
      [
        "macdb_sm_tcam_mapping",
        0,
        4
      ]
    ]
  },
  "rxpp_term_macdb_sm_db0_mapping_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 4,
    "desc": "Map the 5 LSBs of the sm_db0 access key, to which DB responses are expected",
    "fields": [
      [
        "macdb_sm_db0_mapping",
        0,
        4
      ]
    ]
  },
  "rxpp_term_macdb_sm_db1_mapping_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 4,
    "desc": "Map the 5 LSBs of the sm_db1 access key, to which DB responses are expected",
    "fields": [
      [
        "macdb_sm_db1_mapping",
        0,
        4
      ]
    ]
  },
  "rxpp_term_frag_ifg0_mem_req_db_mapping_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 2,
    "desc": "Map the 5 LSBs of the vlan_mapping access key, to which DB responses are expected",
    "fields": [
      [
        "frag_ifg0_mem_req_db_mapping",
        0,
        2
      ]
    ]
  },
  "rxpp_term_frag_ifg1_mem_req_db_mapping_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 2,
    "desc": "Map the 5 LSBs of the vlan_mapping access key, to which DB responses are expected",
    "fields": [
      [
        "frag_ifg1_mem_req_db_mapping",
        0,
        2
      ]
    ]
  },
  "rxpp_term_macdb_vlan_mapping_db_mapping_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 4,
    "desc": "Map the 5 LSBs of the vlan_mapping access key, to which DB responses are expected",
    "fields": [
      [
        "macdb_vlan_mapping_db_mapping",
        0,
        4
      ]
    ]
  },
  "rxpp_term_rxdb_tunnel_termination_db1_mask_cfg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 80,
    "desc": "Slice[6]_tunnel_termination_db1_mask_cfg",
    "fields": [
      [
        "rxdb_tunnel_termination_db1_mask",
        0,
        80
      ]
    ]
  },
  "rxpp_term_rxdb_service_mapping_em_relay_id_offset_cfg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 9,
    "desc": "service_mapping_em_relay_id_offset",
    "fields": [
      [
        "rxdb_service_mapping_tcam_relay_id_offset",
        0,
        9
      ]
    ]
  },
  "rxpp_term_dbc_thresholds_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 111,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "ctm_term_container_free_entries_threshold",
        0,
        6
      ],
      [
        "macdb_link_lp_db_container_free_entries_threshold",
        6,
        5
      ],
      [
        "macdb_link_relay_db_container_free_entries_threshold",
        11,
        6
      ],
      [
        "macdb_lp_from_sm_tcam_container_free_entries_threshold",
        17,
        4
      ],
      [
        "macdb_mymac_em_db_container_free_entries_threshold",
        21,
        6
      ],
      [
        "macdb_mymac_from_sm_tcam_container_free_entries_threshold",
        27,
        5
      ],
      [
        "macdb_relay_from_sm_tcam_container_free_entries_threshold",
        32,
        4
      ],
      [
        "macdb_service_mapping_from_sm_tcam_container_free_entries_threshold",
        36,
        4
      ],
      [
        "macdb_service_lp_db_container_free_entries_threshold",
        40,
        6
      ],
      [
        "macdb_service_relay_db_container_free_entries_threshold",
        46,
        6
      ],
      [
        "macdb_sm_db0_container_free_entries_threshold",
        52,
        6
      ],
      [
        "macdb_sm_db1_container_free_entries_threshold",
        58,
        6
      ],
      [
        "macdb_vlan_mapping_db_container_free_entries_threshold",
        64,
        6
      ],
      [
        "tunnel_termination_db0_container_free_entries_threshold",
        70,
        6
      ],
      [
        "tunnel_termination_db1_container_free_entries_threshold",
        76,
        6
      ],
      [
        "vlan_membership_db_container_free_entries_threshold",
        82,
        5
      ],
      [
        "frag_ifg0_mem_reply_0_container_free_entries_threshold",
        87,
        6
      ],
      [
        "frag_ifg0_mem_reply_1_container_free_entries_threshold",
        93,
        6
      ],
      [
        "frag_ifg1_mem_reply_0_container_free_entries_threshold",
        99,
        6
      ],
      [
        "frag_ifg1_mem_reply_1_container_free_entries_threshold",
        105,
        6
      ]
    ]
  },
  "rxpp_term_dbc_container_activate_priority_threshold_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 111,
    "desc": "",
    "fields": [
      [
        "ctm_term_activate_priority_free_entries_threshold",
        0,
        6
      ],
      [
        "macdb_link_lp_db_activate_priority_free_entries_threshold",
        6,
        5
      ],
      [
        "macdb_link_relay_db_activate_priority_free_entries_threshold",
        11,
        6
      ],
      [
        "macdb_lp_from_sm_tcam_activate_priority_free_entries_threshold",
        17,
        4
      ],
      [
        "macdb_mymac_em_db_activate_priority_free_entries_threshold",
        21,
        6
      ],
      [
        "macdb_mymac_from_sm_tcam_activate_priority_free_entries_threshold",
        27,
        5
      ],
      [
        "macdb_relay_from_sm_tcam_activate_priority_free_entries_threshold",
        32,
        4
      ],
      [
        "macdb_service_mapping_from_sm_tcam_activate_priority_free_entries_threshold",
        36,
        4
      ],
      [
        "macdb_service_lp_db_activate_priority_free_entries_threshold",
        40,
        6
      ],
      [
        "macdb_service_relay_db_activate_priority_free_entries_threshold",
        46,
        6
      ],
      [
        "macdb_sm_db0_activate_priority_free_entries_threshold",
        52,
        6
      ],
      [
        "macdb_sm_db1_activate_priority_free_entries_threshold",
        58,
        6
      ],
      [
        "macdb_vlan_mapping_db_activate_priority_free_entries_threshold",
        64,
        6
      ],
      [
        "tunnel_termination_db0_activate_priority_free_entries_threshold",
        70,
        6
      ],
      [
        "tunnel_termination_db1_activate_priority_free_entries_threshold",
        76,
        6
      ],
      [
        "vlan_membership_db_activate_priority_free_entries_threshold",
        82,
        5
      ],
      [
        "frag_ifg0_mem_reply_0_activate_priority_free_entries_threshold",
        87,
        6
      ],
      [
        "frag_ifg0_mem_reply_1_activate_priority_free_entries_threshold",
        93,
        6
      ],
      [
        "frag_ifg1_mem_reply_0_activate_priority_free_entries_threshold",
        99,
        6
      ],
      [
        "frag_ifg1_mem_reply_1_activate_priority_free_entries_threshold",
        105,
        6
      ]
    ]
  },
  "rxpp_term_dbc_container_deactivate_priority_threshold_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 111,
    "desc": "",
    "fields": [
      [
        "ctm_term_deactivate_priority_free_entries_threshold",
        0,
        6
      ],
      [
        "macdb_link_lp_db_deactivate_priority_free_entries_threshold",
        6,
        5
      ],
      [
        "macdb_link_relay_db_deactivate_priority_free_entries_threshold",
        11,
        6
      ],
      [
        "macdb_lp_from_sm_tcam_deactivate_priority_free_entries_threshold",
        17,
        4
      ],
      [
        "macdb_mymac_em_db_deactivate_priority_free_entries_threshold",
        21,
        6
      ],
      [
        "macdb_mymac_from_sm_tcam_deactivate_priority_free_entries_threshold",
        27,
        5
      ],
      [
        "macdb_relay_from_sm_tcam_deactivate_priority_free_entries_threshold",
        32,
        4
      ],
      [
        "macdb_service_mapping_from_sm_tcam_deactivate_priority_free_entries_threshold",
        36,
        4
      ],
      [
        "macdb_service_lp_db_deactivate_priority_free_entries_threshold",
        40,
        6
      ],
      [
        "macdb_service_relay_db_deactivate_priority_free_entries_threshold",
        46,
        6
      ],
      [
        "macdb_sm_db0_deactivate_priority_free_entries_threshold",
        52,
        6
      ],
      [
        "macdb_sm_db1_deactivate_priority_free_entries_threshold",
        58,
        6
      ],
      [
        "macdb_vlan_mapping_db_deactivate_priority_free_entries_threshold",
        64,
        6
      ],
      [
        "tunnel_termination_db0_deactivate_priority_free_entries_threshold",
        70,
        6
      ],
      [
        "tunnel_termination_db1_deactivate_priority_free_entries_threshold",
        76,
        6
      ],
      [
        "vlan_membership_db_deactivate_priority_free_entries_threshold",
        82,
        5
      ],
      [
        "frag_ifg0_mem_reply_0_deactivate_priority_free_entries_threshold",
        87,
        6
      ],
      [
        "frag_ifg0_mem_reply_1_deactivate_priority_free_entries_threshold",
        93,
        6
      ],
      [
        "frag_ifg1_mem_reply_0_deactivate_priority_free_entries_threshold",
        99,
        6
      ],
      [
        "frag_ifg1_mem_reply_1_deactivate_priority_free_entries_threshold",
        105,
        6
      ]
    ]
  },
  "rxpp_term_dbc_rate_limiter_period_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 96,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "ctm_term_rate_limiter_period",
        0,
        6
      ],
      [
        "macdb_vlan_mapping_db_rate_limiter_period",
        6,
        6
      ],
      [
        "macdb_link_relay_db_rate_limiter_period",
        12,
        6
      ],
      [
        "macdb_mymac_em_db_rate_limiter_period",
        18,
        6
      ],
      [
        "macdb_sm_tcam_db_rate_limiter_period",
        24,
        6
      ],
      [
        "macdb_sm_db0_rate_limiter_period",
        30,
        6
      ],
      [
        "macdb_sm_db1_rate_limiter_period",
        36,
        6
      ],
      [
        "macdb_service_relay_db_rate_limiter_period",
        42,
        6
      ],
      [
        "macdb_service_lp_db_rate_limiter_period",
        48,
        6
      ],
      [
        "macdb_link_lp_db_rate_limiter_period",
        54,
        6
      ],
      [
        "tunnel_termination_db0_rate_limiter_period",
        60,
        6
      ],
      [
        "tunnel_termination_db1_rate_limiter_period",
        66,
        6
      ],
      [
        "vlan_membership_db_rate_limiter_period",
        72,
        6
      ],
      [
        "macdb_mymac_tcam_db_rate_limiter_period",
        78,
        6
      ],
      [
        "frag_ifg0_mem_req_rate_limiter_period",
        84,
        6
      ],
      [
        "frag_ifg1_mem_req_rate_limiter_period",
        90,
        6
      ]
    ]
  },
  "rxpp_term_dbc_rate_limiting_event": {
    "type": "register",
    "block": "rxpp_term",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "ctm_term_db_container_rate_limit_activated",
        0,
        1
      ],
      [
        "macdb_vlan_mapping_db_db_container_rate_limit_activated",
        1,
        1
      ],
      [
        "macdb_link_relay_db_db_container_rate_limit_activated",
        2,
        1
      ],
      [
        "macdb_mymac_em_db_db_container_rate_limit_activated",
        3,
        1
      ],
      [
        "macdb_mymac_from_sm_tcam_db_container_rate_limit_activated",
        4,
        1
      ],
      [
        "macdb_lp_from_sm_tcam_db_container_rate_limit_activated",
        5,
        1
      ],
      [
        "macdb_relay_from_sm_tcam_db_container_rate_limit_activated",
        6,
        1
      ],
      [
        "macdb_service_mapping_from_sm_tcam_db_container_rate_limit_activated",
        7,
        1
      ],
      [
        "macdb_sm_db0_db_container_rate_limit_activated",
        8,
        1
      ],
      [
        "macdb_sm_db1_db_container_rate_limit_activated",
        9,
        1
      ],
      [
        "macdb_service_relay_db_db_container_rate_limit_activated",
        10,
        1
      ],
      [
        "macdb_service_lp_db_db_container_rate_limit_activated",
        11,
        1
      ],
      [
        "macdb_link_lp_db_db_container_rate_limit_activated",
        12,
        1
      ],
      [
        "tunnel_termination_db0_db_container_rate_limit_activated",
        13,
        1
      ],
      [
        "tunnel_termination_db1_db_container_rate_limit_activated",
        14,
        1
      ],
      [
        "vlan_membership_db_db_container_rate_limit_activated",
        15,
        1
      ],
      [
        "frag_ifg0_mem_reply_0_db_container_rate_limit_activated",
        16,
        1
      ],
      [
        "frag_ifg0_mem_reply_1_db_container_rate_limit_activated",
        17,
        1
      ],
      [
        "frag_ifg1_mem_reply_0_db_container_rate_limit_activated",
        18,
        1
      ],
      [
        "frag_ifg1_mem_reply_1_db_container_rate_limit_activated",
        19,
        1
      ]
    ]
  },
  "rxpp_term_dbc_container_entries_min_wm": {
    "type": "register",
    "block": "rxpp_term",
    "width": 111,
    "desc": "",
    "fields": [
      [
        "ctm_term_db_container_free_entries_min_wm",
        0,
        6
      ],
      [
        "macdb_link_lp_db_db_container_free_entries_min_wm",
        6,
        5
      ],
      [
        "macdb_link_relay_db_db_container_free_entries_min_wm",
        11,
        6
      ],
      [
        "macdb_lp_from_sm_tcam_db_container_free_entries_min_wm",
        17,
        4
      ],
      [
        "macdb_mymac_em_db_db_container_free_entries_min_wm",
        21,
        6
      ],
      [
        "macdb_mymac_from_sm_tcam_db_container_free_entries_min_wm",
        27,
        5
      ],
      [
        "macdb_relay_from_sm_tcam_db_container_free_entries_min_wm",
        32,
        4
      ],
      [
        "macdb_service_mapping_from_sm_tcam_db_container_free_entries_min_wm",
        36,
        4
      ],
      [
        "macdb_service_lp_db_db_container_free_entries_min_wm",
        40,
        6
      ],
      [
        "macdb_service_relay_db_db_container_free_entries_min_wm",
        46,
        6
      ],
      [
        "macdb_sm_db0_db_container_free_entries_min_wm",
        52,
        6
      ],
      [
        "macdb_sm_db1_db_container_free_entries_min_wm",
        58,
        6
      ],
      [
        "macdb_vlan_mapping_db_db_container_free_entries_min_wm",
        64,
        6
      ],
      [
        "tunnel_termination_db0_db_container_free_entries_min_wm",
        70,
        6
      ],
      [
        "tunnel_termination_db1_db_container_free_entries_min_wm",
        76,
        6
      ],
      [
        "vlan_membership_db_db_container_free_entries_min_wm",
        82,
        5
      ],
      [
        "frag_ifg0_mem_reply_0_db_container_free_entries_min_wm",
        87,
        6
      ],
      [
        "frag_ifg0_mem_reply_1_db_container_free_entries_min_wm",
        93,
        6
      ],
      [
        "frag_ifg1_mem_reply_0_db_container_free_entries_min_wm",
        99,
        6
      ],
      [
        "frag_ifg1_mem_reply_1_db_container_free_entries_min_wm",
        105,
        6
      ]
    ]
  },
  "rxpp_term_dbc_cbt_not_ready_counters": {
    "type": "register",
    "block": "rxpp_term",
    "width": 448,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "to_macdb_vlan_mapping_db_cbt_not_irdy_cnt",
        0,
        32
      ],
      [
        "to_macdb_link_relay_db_cbt_not_irdy_cnt",
        32,
        32
      ],
      [
        "to_macdb_mymac_em_db_cbt_not_irdy_cnt",
        64,
        32
      ],
      [
        "to_macdb_sm_db1_cbt_not_irdy_cnt",
        96,
        32
      ],
      [
        "to_macdb_service_relay_db_cbt_not_irdy_cnt",
        128,
        32
      ],
      [
        "to_macdb_service_lp_db_cbt_not_irdy_cnt",
        160,
        32
      ],
      [
        "to_macdb_link_lp_db_cbt_not_irdy_cnt",
        192,
        32
      ],
      [
        "to_tunnel_termination_db1_cbt_not_irdy_cnt",
        224,
        32
      ],
      [
        "to_macdb_mymac_tcam_db_cbt_not_irdy_cnt",
        256,
        32
      ],
      [
        "to_frag_ifg0_mem_req_cbt_not_irdy_cnt",
        288,
        32
      ],
      [
        "to_frag_ifg1_mem_req_cbt_not_irdy_cnt",
        320,
        32
      ],
      [
        "to_macdb_sm_db0_cbt_not_irdy_cnt",
        352,
        32
      ],
      [
        "to_macdb_sm_tcam_db_cbt_not_irdy_cnt",
        384,
        32
      ],
      [
        "to_tunnel_termination_db0_cbt_not_irdy_cnt",
        416,
        32
      ]
    ]
  },
  "rxpp_term_bubble_logic_counter_cfg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 35,
    "desc": "",
    "fields": [
      [
        "rxdb_link_lp_input_cbr_num_of_clks_before_forced_bubble",
        0,
        10
      ],
      [
        "rxdb_tt1_input_cbr_num_of_clks_before_forced_bubble_ordy",
        10,
        10
      ],
      [
        "rxdb_tt1_input_cbr_num_of_clks_before_forced_bubble_above_th",
        20,
        10
      ],
      [
        "tt1_to_tt0_threshold",
        30,
        5
      ]
    ]
  },
  "rxpp_term_oversubscription_periods_cfg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 28,
    "desc": "",
    "fields": [
      [
        "npe_output_fifo_oversubscription_long_period_threshold",
        0,
        14
      ],
      [
        "npe_packet_data_read_oversubscription_long_period_threshold",
        14,
        14
      ]
    ]
  },
  "rxpp_term_ifg_oversubscription_periods_wm": {
    "type": "register",
    "block": "rxpp_term",
    "width": 56,
    "desc": "",
    "fields": [
      [
        "ifg_npe_output_fifo_oversubscription_period_max_wm",
        0,
        14
      ],
      [
        "ifg_npe_packet_data_read_oversubscription_period_max_wm",
        14,
        14
      ],
      [
        "ifg_npe_output_fifo_long_oversubscription_period_max_wm",
        28,
        14
      ],
      [
        "ifg_npe_packet_data_read_long_oversubscription_period_max_wm",
        42,
        14
      ]
    ]
  },
  "rxpp_term_ifg_long_oversubscription_events": {
    "type": "register",
    "block": "rxpp_term",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "ifg_npe_output_fifo_long_oversubscription_activated",
        0,
        1
      ],
      [
        "ifg_npe_packet_data_read_long_oversubscription_activated",
        1,
        1
      ]
    ]
  },
  "rxpp_term_debug_data_bus_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 32,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "rxpp_term_debug_data_select_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 6,
    "desc": "debug_data_select_register",
    "fields": [
      [
        "debug_data_select",
        0,
        6
      ]
    ]
  },
  "rxpp_term_debug_fifos_water_marks_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 27,
    "desc": "debug_data_bus_register",
    "fields": [
      [
        "rxdb_tt0_cbr_wm",
        0,
        4
      ],
      [
        "rxdb_tt1_cbr_wm",
        4,
        5
      ],
      [
        "rxdb_link_lp_cbr_wm",
        9,
        5
      ],
      [
        "rxdb_mymac_tcam_cbr_wm",
        14,
        5
      ],
      [
        "rxdb_sm_tcam_cbr_wm",
        19,
        4
      ],
      [
        "rxdb_mymac_from_sm_tcam_fifo_wm",
        23,
        4
      ]
    ]
  },
  "rxpp_term_tunnel_termination_table_per_bank_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 162,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "tunnel_termination_table_active_banks",
        0,
        1
      ],
      [
        "tunnel_termination_table_hash_key",
        1,
        160
      ],
      [
        "tunnel_termination_table_use_primitive_crc",
        161,
        1
      ]
    ]
  },
  "rxpp_term_tunnel_termination_table_per_em_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "tunnel_termination_table_key_width",
        0,
        16
      ],
      [
        "tunnel_termination_table_auto_bubble_req",
        16,
        1
      ],
      [
        "tunnel_termination_table_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "rxpp_term_tunnel_termination_table_cam_wm_max_reg": {
    "type": "register",
    "block": "rxpp_term",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "tunnel_termination_table_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "rxpp_term_tunnel_termination_table_access_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 259,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "tunnel_termination_table_access_reg",
        0,
        259
      ]
    ]
  },
  "rxpp_term_tunnel_termination_table_response_register": {
    "type": "register",
    "block": "rxpp_term",
    "width": 259,
    "desc": "EM indirect access data",
    "fields": [
      [
        "tunnel_termination_table_response_valid",
        0,
        1
      ],
      [
        "tunnel_termination_table_response_reg",
        1,
        258
      ]
    ]
  },
  "rxpp_term_em_response_interrupt": {
    "type": "register",
    "block": "rxpp_term",
    "width": 2,
    "desc": "EM indirect access data is valid",
    "fields": [
      [
        "tunnel_termination_table0_resp",
        0,
        1
      ],
      [
        "tunnel_termination_table1_resp",
        1,
        1
      ]
    ]
  },
  "rxpp_term_em_response_interrupt_mask": {
    "type": "register",
    "block": "rxpp_term",
    "width": 2,
    "desc": "This register masks EmResponseInterrupt interrupt register",
    "fields": [
      [
        "tunnel_termination_table0_resp_mask",
        0,
        1
      ],
      [
        "tunnel_termination_table1_resp_mask",
        1,
        1
      ]
    ]
  },
  "rxpp_term_em_response_interrupt_test": {
    "type": "register",
    "block": "rxpp_term",
    "width": 2,
    "desc": "This register tests EmResponseInterrupt interrupt register",
    "fields": [
      [
        "tunnel_termination_table0_resp_test",
        0,
        1
      ],
      [
        "tunnel_termination_table1_resp_test",
        1,
        1
      ]
    ]
  },
  "rxpp_term_tt0_two_lookups_map": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 2,
    "desc": "tt0_two_lookups_map",
    "fields": [
      [
        "two_lookups_en",
        0,
        1
      ],
      [
        "use_mask_en",
        1,
        1
      ]
    ]
  },
  "rxpp_term_link_lp_table": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 160,
    "desc": "link_lp_table",
    "fields": [
      [
        "link_lp_attributes",
        0,
        160
      ]
    ]
  },
  "rxpp_term_mymac_tcam": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 40,
    "desc": "mymac_tcam",
    "fields": [
      [
        "mymac_tcam_key",
        0,
        40
      ],
      [
        "mymac_tcam_delete",
        40,
        1
      ]
    ]
  },
  "rxpp_term_mymac_sram": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 160,
    "desc": "Tcam's SRAM table (one per slice)",
    "fields": [
      [
        "result",
        0,
        160
      ]
    ]
  },
  "rxpp_term_sm_tcam": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 50,
    "desc": "sm_tcam",
    "fields": [
      [
        "sm_tcam_key",
        0,
        50
      ],
      [
        "sm_tcam_delete",
        50,
        1
      ]
    ]
  },
  "rxpp_term_sm_sram": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 320,
    "desc": "Tcam's SRAM table (one per slice)",
    "fields": [
      [
        "result",
        0,
        320
      ]
    ]
  },
  "rxpp_term_vlan_membership_table": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 32,
    "desc": "vlan_membership_table (logical-depth = 128K)",
    "fields": [
      [
        "vlan_membership_table_field",
        0,
        32
      ]
    ]
  },
  "rxpp_term_cache_q_data": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 26,
    "desc": "Tcam's SRAM table (one per slice)",
    "fields": [
      [
        "result",
        0,
        26
      ]
    ]
  },
  "rxpp_term_cache_q_context_ll": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 10,
    "desc": "Tcam's SRAM table (one per slice)",
    "fields": [
      [
        "result",
        0,
        10
      ]
    ]
  },
  "rxpp_term_input_packet_rate_limiter_configuration_set": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 18,
    "desc": "The configuration set is chosen according to :  {NPE-Output-FIFO-OS-Long-Period, NPE-Packet-Data-Read-FIFO-OS-Long-Period, NPE-Output-FIFO-OS, NPE-Packet-Data-Read-FIFO-OS}",
    "fields": [
      [
        "enable_ifg0_rate_limit",
        0,
        1
      ],
      [
        "enable_ifg1_rate_limit",
        1,
        1
      ],
      [
        "rate_limiter_window_size",
        2,
        8
      ],
      [
        "rate_limiter_number_of_packets",
        10,
        8
      ]
    ]
  },
  "rxpp_term_tunnel_termination_table_verifier": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 240,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "tunnel_termination_table_verifier_data",
        0,
        240
      ]
    ]
  },
  "rxpp_term_tunnel_termination_table_cam": {
    "type": "memory",
    "block": "rxpp_term",
    "width": 80,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "tunnel_termination_table_cam_payload",
        0,
        160
      ],
      [
        "tunnel_termination_table_cam_key",
        160,
        80
      ],
      [
        "tunnel_termination_table_cam_valid",
        240,
        1
      ]
    ]
  },
  "slice_sna_interrupt_register": {
    "type": "register",
    "block": "slice_sna",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "sna_interrupt_array_summary",
        1,
        1
      ]
    ]
  },
  "slice_sna_mem_protect_interrupt": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "slice_sna_mem_protect_interrupt_test": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "slice_sna_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "pp_psn_table_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pp_local_id_table_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "sna_lu_table_ecc_1b_err_interrupt_mask",
        2,
        1
      ]
    ]
  },
  "slice_sna_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "pp_psn_table_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pp_local_id_table_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "sna_lu_table_ecc_2b_err_interrupt_mask",
        2,
        1
      ]
    ]
  },
  "slice_sna_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "pp_psn_table_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "pp_local_id_table_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "sna_lu_table_ecc_1b_err_initiate",
        2,
        1
      ]
    ]
  },
  "slice_sna_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "pp_psn_table_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "pp_local_id_table_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "sna_lu_table_ecc_2b_err_initiate",
        2,
        1
      ]
    ]
  },
  "slice_sna_mem_protect_err_status": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "pp_psn_table_err_int",
        0,
        1
      ],
      [
        "pp_local_id_table_err_int",
        1,
        1
      ],
      [
        "sna_lu_table_err_int",
        2,
        1
      ]
    ]
  },
  "slice_sna_selected_ser_error_info": {
    "type": "register",
    "block": "slice_sna",
    "width": 13,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        11
      ],
      [
        "mem_err_type",
        11,
        2
      ]
    ]
  },
  "slice_sna_ser_error_debug_configuration": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        2
      ],
      [
        "reset_memory_errors",
        2,
        1
      ]
    ]
  },
  "slice_sna_ecc_1b_err_debug": {
    "type": "register",
    "block": "slice_sna",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "slice_sna_ecc_2b_err_debug": {
    "type": "register",
    "block": "slice_sna",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "slice_sna_tcam_scan_period_cfg": {
    "type": "register",
    "block": "slice_sna",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "slice_sna_counter_timer": {
    "type": "register",
    "block": "slice_sna",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "slice_sna_counter_timer_trigger_reg": {
    "type": "register",
    "block": "slice_sna",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "slice_sna_memory_access_timeout": {
    "type": "register",
    "block": "slice_sna",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "slice_sna_broadcast_config_reg": {
    "type": "register",
    "block": "slice_sna",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "slice_sna_memory_prot_bypass": {
    "type": "register",
    "block": "slice_sna",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "slice_sna_soft_reset_configuration": {
    "type": "register",
    "block": "slice_sna",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "slice_sna_mbist_configuration": {
    "type": "register",
    "block": "slice_sna",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "slice_sna_power_down_configuration": {
    "type": "register",
    "block": "slice_sna",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "slice_sna_spare_reg": {
    "type": "register",
    "block": "slice_sna",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "slice_sna_pmro_ctrl": {
    "type": "register",
    "block": "slice_sna",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "slice_sna_pmro_status": {
    "type": "register",
    "block": "slice_sna",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "slice_sna_mirror_bus_conf_reg": {
    "type": "register",
    "block": "slice_sna",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "slice_sna_mirror_bus_status": {
    "type": "register",
    "block": "slice_sna",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "slice_sna_device_time_offset_cfg": {
    "type": "register",
    "block": "slice_sna",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "slice_sna_init_done_status_register": {
    "type": "register",
    "block": "slice_sna",
    "width": 1,
    "desc": "The PSN-Table is being initialized by the design after soft-reset. This register contains the status of the init-sequence.",
    "fields": [
      [
        "init_done_status_r",
        0,
        1
      ]
    ]
  },
  "slice_sna_program_selection_field_select_instraction": {
    "type": "register",
    "block": "slice_sna",
    "width": 9,
    "desc": "6 field-select-instructions to extract data required to construct the key for the program-selection-reg-tcam",
    "fields": [
      [
        "program_selection_fs_instraction",
        0,
        9
      ]
    ]
  },
  "slice_sna_per_slice_cfg_for_sna_modes_selection": {
    "type": "register",
    "block": "slice_sna",
    "width": 6,
    "desc": "SNA has few modes of operation: Slice-mode: for calculation the Sequence-number SNR-Outgoing-IF: calculation is defferent according to the mode. This register contains the general-slice-mode and snr-outgoing-if mode in which the slice is being used",
    "fields": [
      [
        "slice_mode",
        0,
        2
      ],
      [
        "tor_slb_slice_snr_outgoing_if_mode",
        2,
        2
      ],
      [
        "constant_snr_outgoing_if",
        4,
        2
      ]
    ]
  },
  "slice_sna_per_slice_cfg_for_pp_sna_mode": {
    "type": "register",
    "block": "slice_sna",
    "width": 34,
    "desc": "Specific configuration for {Port x Priority}-SNA-Mode",
    "fields": [
      [
        "first_usable_reorder_context_id_in_slice",
        0,
        13
      ],
      [
        "max_valid_psn",
        13,
        20
      ],
      [
        "use_flow_sig_lsbs_as_reorder_context",
        33,
        1
      ]
    ]
  },
  "slice_sna_per_slice_cfg_for_plb_sna_mode": {
    "type": "register",
    "block": "slice_sna",
    "width": 10,
    "desc": "Specific configuration for {SN-PLB}-SNA-Mode * Valid only on CRF-Fabric-Slices",
    "fields": [
      [
        "fabric_header_offset_to_source_identifier_field_in_nibbles",
        0,
        5
      ],
      [
        "fabric_header_offset_to_psn_field_in_nibbles",
        5,
        5
      ]
    ]
  },
  "slice_sna_fs_mode_cfg": {
    "type": "register",
    "block": "slice_sna",
    "width": 2,
    "desc": "According to the Flow-signature, the flow signature is constructed from the flow-vector-hash0 and flow-vector-hash1",
    "fields": [
      [
        "fs_mode",
        0,
        2
      ]
    ]
  },
  "slice_sna_per_slice_cfg_for_sna": {
    "type": "register",
    "block": "slice_sna",
    "width": 2,
    "desc": "General cfg",
    "fields": [
      [
        "use_flow_vector_lsbs_as_flow_signature",
        0,
        1
      ],
      [
        "truncate_reorder_context_lsb",
        1,
        1
      ]
    ]
  },
  "slice_sna_per_slice_cfg_for_slb_sna_mode": {
    "type": "register",
    "block": "slice_sna",
    "width": 99,
    "desc": "Specific configuration for {SLB}-SNA-Mode * Valid only on TOR-SLB-Slices",
    "fields": [
      [
        "dual_homing_mode",
        0,
        2
      ],
      [
        "dual_homing_flow_sig_lsb_bit",
        2,
        1
      ],
      [
        "per_port_slb_enable",
        3,
        64
      ],
      [
        "is_slb_mask",
        67,
        16
      ],
      [
        "is_slb_value",
        83,
        16
      ]
    ]
  },
  "slice_sna_sna_interrupt_array": {
    "type": "register",
    "block": "slice_sna",
    "width": 1,
    "desc": "sna_interrupt_array",
    "fields": [
      [
        "program_selection_reg_tcam_miss",
        0,
        1
      ]
    ]
  },
  "slice_sna_sna_interrupt_array_mask": {
    "type": "register",
    "block": "slice_sna",
    "width": 1,
    "desc": "This register masks sna_interrupt_array interrupt register",
    "fields": [
      [
        "program_selection_reg_tcam_miss_mask",
        0,
        1
      ]
    ]
  },
  "slice_sna_sna_interrupt_array_test": {
    "type": "register",
    "block": "slice_sna",
    "width": 1,
    "desc": "This register tests sna_interrupt_array interrupt register",
    "fields": [
      [
        "program_selection_reg_tcam_miss_test",
        0,
        1
      ]
    ]
  },
  "slice_sna_map_fabric_header_type_to_crf_fabric_slice_sna_mode": {
    "type": "memory",
    "block": "slice_sna",
    "width": 2,
    "desc": "Per fabric-header, there are 3 valid sna-mode. This register maps the fabric-header-type to this mode * Valid only on CRF-Fabric-slices",
    "fields": [
      [
        "crf_fabric_slice_sna_mode",
        0,
        2
      ]
    ]
  },
  "slice_sna_map_tm_header_type": {
    "type": "memory",
    "block": "slice_sna",
    "width": 7,
    "desc": "per tm-header-type, snr-outgoing-if mode and offset to dest-slice * Valid only on CRF-Fabric-slices",
    "fields": [
      [
        "crf_fabric_slice_snr_outgoing_if_mode",
        0,
        1
      ],
      [
        "crf_fabric_slice_offset_to_dest_slice_inside_tm_header_in_bits",
        1,
        6
      ]
    ]
  },
  "slice_sna_map_destination_slice_to_snr_outgoing_if": {
    "type": "memory",
    "block": "slice_sna",
    "width": 2,
    "desc": "per fabric-header.dest-slice (3b), holds snr-outgoing-interface * Valid only on CRF-Fabric-slices, when mode is 'Extracted'",
    "fields": [
      [
        "crf_fabric_slice_mapped_snr_outgoing_if",
        0,
        2
      ]
    ]
  },
  "slice_sna_map_flow_sig_mod_to_snr_outgoing_if": {
    "type": "memory",
    "block": "slice_sna",
    "width": 2,
    "desc": "per ('flow-sig % 3') (2b), holds snr-outgoing-interface * Valid only on TOR-SLB-slices, when mode is 'Flow-sig-Mod'",
    "fields": [
      [
        "tor_slb_slice_mapped_snr_outgoing_if",
        0,
        2
      ]
    ]
  },
  "slice_sna_map_flow_sig_xor_to_snr_outgoing_if": {
    "type": "memory",
    "block": "slice_sna",
    "width": 2,
    "desc": "per (^flow-sig[2:0]) (1b), holds snr-outgoing-interface * Valid only on TOR-SLB-slices, when mode is 'Flow-sig-Xor'",
    "fields": [
      [
        "tor_slb_slice_mapped_snr_outgoing_if",
        0,
        2
      ]
    ]
  },
  "slice_sna_slb_data_extraxtion_reg_tcam": {
    "type": "memory",
    "block": "slice_sna",
    "width": 32,
    "desc": "SLB data extraction reg-tcam",
    "fields": [
      [
        "slb_data_extraxtion_reg_tcam_mask",
        0,
        32
      ],
      [
        "slb_data_extraxtion_reg_tcam_key",
        32,
        32
      ],
      [
        "slb_data_extraxtion_reg_tcam_delete",
        64,
        1
      ]
    ]
  },
  "slice_sna_slb_data_extraxtion_reg_tcam_mem": {
    "type": "memory",
    "block": "slice_sna",
    "width": 33,
    "desc": "SLB data extraction reg-tcam-associated-data: contains the sna-mode and packet-offsets to the slb-required-fields",
    "fields": [
      [
        "tor_slb_slice_sna_mode",
        0,
        1
      ],
      [
        "base_offset_in_bytes",
        1,
        7
      ],
      [
        "additional_offset_for_is_slb_field_in_bits",
        8,
        5
      ],
      [
        "additional_offset_for_ssn_field_in_bits",
        13,
        5
      ],
      [
        "additional_offset_for_eos_field_in_bits",
        18,
        5
      ],
      [
        "additional_offset_for_cps_field_in_bits",
        23,
        5
      ],
      [
        "additional_offset_for_is_dual_homing_field_in_bits",
        28,
        5
      ]
    ]
  },
  "slice_sna_pp_psn_table": {
    "type": "memory",
    "block": "slice_sna",
    "width": 20,
    "desc": "PP-psn-memory. Used in {Port-Prority} mode",
    "fields": [
      [
        "psn",
        0,
        20
      ]
    ]
  },
  "slice_sna_pp_local_id_table": {
    "type": "memory",
    "block": "slice_sna",
    "width": 9,
    "desc": "On PP-mode, the {Port x priority} is mapped to local-id by this table",
    "fields": [
      [
        "local_id",
        0,
        9
      ]
    ]
  },
  "slice_sna_fls_calculation_program_selection_reg_tcam": {
    "type": "memory",
    "block": "slice_sna",
    "width": 40,
    "desc": "Flow-signatur cauculation: Program-selection-reg-tcam",
    "fields": [
      [
        "fls_calculation_program_selection_reg_tcam_mask",
        0,
        40
      ],
      [
        "fls_calculation_program_selection_reg_tcam_key",
        40,
        40
      ],
      [
        "fls_calculation_program_selection_reg_tcam_delete",
        80,
        1
      ]
    ]
  },
  "slice_sna_fls_calculation_program_selection_reg_tcam_mem": {
    "type": "memory",
    "block": "slice_sna",
    "width": 152,
    "desc": " Flow-signatur cauculation: Program-selection-reg-tcam-associated-data: contains 8 field-select instructions:  \ufffd 4 byte resolution \ufffd 32b output \ufffd 4 nibble resolution \ufffd 16b output ",
    "fields": [
      [
        "layer_fs_intruction0",
        0,
        19
      ],
      [
        "layer_fs_intruction1",
        19,
        19
      ],
      [
        "layer_fs_intruction2",
        38,
        19
      ],
      [
        "layer_fs_intruction3",
        57,
        19
      ],
      [
        "layer_fs_intruction4",
        76,
        19
      ],
      [
        "layer_fs_intruction5",
        95,
        19
      ],
      [
        "layer_fs_intruction6",
        114,
        19
      ],
      [
        "layer_fs_intruction7",
        133,
        19
      ]
    ]
  },
  "slice_sna_sna_lu_table": {
    "type": "memory",
    "block": "slice_sna",
    "width": 86,
    "desc": "This table is used to store the extracted sna-data untill the context if in the head of the ifg-order-fifos",
    "fields": [
      [
        "sna_mode",
        0,
        2
      ],
      [
        "flow_signature",
        2,
        36
      ],
      [
        "snr_outgoing_interface",
        38,
        2
      ],
      [
        "pif",
        40,
        5
      ],
      [
        "ifg",
        45,
        1
      ],
      [
        "prior",
        46,
        3
      ],
      [
        "plb_source_identifier",
        49,
        12
      ],
      [
        "plb_psn",
        61,
        20
      ],
      [
        "slb_ssn",
        81,
        2
      ],
      [
        "slb_eos",
        83,
        1
      ],
      [
        "slb_close_prev_segment",
        84,
        1
      ],
      [
        "slb_dual_homing_redirect",
        85,
        1
      ]
    ]
  },
  "ene_cluster_interrupt_register": {
    "type": "register",
    "block": "ene_cluster",
    "width": 13,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "ene_interrupt_signals0_summary",
        1,
        1
      ],
      [
        "ene_interrupt_signals1_summary",
        2,
        1
      ],
      [
        "ene_interrupt_signals2_summary",
        3,
        1
      ],
      [
        "ene_interrupt_signals3_summary",
        4,
        1
      ],
      [
        "ene_interrupt_signals4_summary",
        5,
        1
      ],
      [
        "ene_interrupt_signals5_summary",
        6,
        1
      ],
      [
        "ene_interrupt_signals6_summary",
        7,
        1
      ],
      [
        "ene_interrupt_signals7_summary",
        8,
        1
      ],
      [
        "ene_interrupt_signals8_summary",
        9,
        1
      ],
      [
        "ene_interrupt_signals9_summary",
        10,
        1
      ],
      [
        "ene_interrupt_signals10_summary",
        11,
        1
      ],
      [
        "ene_interrupt_signals11_summary",
        12,
        1
      ]
    ]
  },
  "ene_cluster_mem_protect_interrupt": {
    "type": "register",
    "block": "ene_cluster",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "ene_cluster_mem_protect_interrupt_test": {
    "type": "register",
    "block": "ene_cluster",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "ene_cluster_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "ene_cluster",
    "width": 24,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "ene0_macro_memory_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "ene1_macro_memory_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "ene2_macro_memory_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "ene3_macro_memory_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "ene4_macro_memory_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "ene5_macro_memory_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "ene6_macro_memory_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "ene7_macro_memory_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "ene8_macro_memory_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "ene9_macro_memory_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ene10_macro_memory_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ene11_macro_memory_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "ene0_data_memory_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "ene1_data_memory_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "ene2_data_memory_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "ene3_data_memory_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "ene4_data_memory_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "ene5_data_memory_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "ene6_data_memory_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "ene7_data_memory_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "ene8_data_memory_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "ene9_data_memory_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "ene10_data_memory_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "ene11_data_memory_ecc_1b_err_interrupt_mask",
        23,
        1
      ]
    ]
  },
  "ene_cluster_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "ene_cluster",
    "width": 24,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "ene0_macro_memory_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "ene1_macro_memory_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "ene2_macro_memory_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "ene3_macro_memory_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "ene4_macro_memory_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "ene5_macro_memory_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "ene6_macro_memory_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "ene7_macro_memory_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "ene8_macro_memory_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "ene9_macro_memory_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ene10_macro_memory_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ene11_macro_memory_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "ene0_data_memory_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "ene1_data_memory_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "ene2_data_memory_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "ene3_data_memory_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "ene4_data_memory_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "ene5_data_memory_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "ene6_data_memory_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "ene7_data_memory_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "ene8_data_memory_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "ene9_data_memory_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "ene10_data_memory_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "ene11_data_memory_ecc_2b_err_interrupt_mask",
        23,
        1
      ]
    ]
  },
  "ene_cluster_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "ene_cluster",
    "width": 24,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "ene0_macro_memory_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "ene1_macro_memory_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "ene2_macro_memory_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "ene3_macro_memory_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "ene4_macro_memory_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "ene5_macro_memory_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "ene6_macro_memory_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "ene7_macro_memory_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "ene8_macro_memory_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "ene9_macro_memory_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "ene10_macro_memory_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "ene11_macro_memory_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "ene0_data_memory_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "ene1_data_memory_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "ene2_data_memory_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "ene3_data_memory_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "ene4_data_memory_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "ene5_data_memory_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "ene6_data_memory_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "ene7_data_memory_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "ene8_data_memory_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "ene9_data_memory_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "ene10_data_memory_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "ene11_data_memory_ecc_1b_err_initiate",
        23,
        1
      ]
    ]
  },
  "ene_cluster_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "ene_cluster",
    "width": 24,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "ene0_macro_memory_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "ene1_macro_memory_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "ene2_macro_memory_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "ene3_macro_memory_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "ene4_macro_memory_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "ene5_macro_memory_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "ene6_macro_memory_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "ene7_macro_memory_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "ene8_macro_memory_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "ene9_macro_memory_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "ene10_macro_memory_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "ene11_macro_memory_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "ene0_data_memory_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "ene1_data_memory_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "ene2_data_memory_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "ene3_data_memory_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "ene4_data_memory_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "ene5_data_memory_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "ene6_data_memory_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "ene7_data_memory_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "ene8_data_memory_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "ene9_data_memory_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "ene10_data_memory_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "ene11_data_memory_ecc_2b_err_initiate",
        23,
        1
      ]
    ]
  },
  "ene_cluster_mem_protect_err_status": {
    "type": "register",
    "block": "ene_cluster",
    "width": 24,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "ene0_macro_memory_err_int",
        0,
        1
      ],
      [
        "ene1_macro_memory_err_int",
        1,
        1
      ],
      [
        "ene2_macro_memory_err_int",
        2,
        1
      ],
      [
        "ene3_macro_memory_err_int",
        3,
        1
      ],
      [
        "ene4_macro_memory_err_int",
        4,
        1
      ],
      [
        "ene5_macro_memory_err_int",
        5,
        1
      ],
      [
        "ene6_macro_memory_err_int",
        6,
        1
      ],
      [
        "ene7_macro_memory_err_int",
        7,
        1
      ],
      [
        "ene8_macro_memory_err_int",
        8,
        1
      ],
      [
        "ene9_macro_memory_err_int",
        9,
        1
      ],
      [
        "ene10_macro_memory_err_int",
        10,
        1
      ],
      [
        "ene11_macro_memory_err_int",
        11,
        1
      ],
      [
        "ene0_data_memory_err_int",
        12,
        1
      ],
      [
        "ene1_data_memory_err_int",
        13,
        1
      ],
      [
        "ene2_data_memory_err_int",
        14,
        1
      ],
      [
        "ene3_data_memory_err_int",
        15,
        1
      ],
      [
        "ene4_data_memory_err_int",
        16,
        1
      ],
      [
        "ene5_data_memory_err_int",
        17,
        1
      ],
      [
        "ene6_data_memory_err_int",
        18,
        1
      ],
      [
        "ene7_data_memory_err_int",
        19,
        1
      ],
      [
        "ene8_data_memory_err_int",
        20,
        1
      ],
      [
        "ene9_data_memory_err_int",
        21,
        1
      ],
      [
        "ene10_data_memory_err_int",
        22,
        1
      ],
      [
        "ene11_data_memory_err_int",
        23,
        1
      ]
    ]
  },
  "ene_cluster_selected_ser_error_info": {
    "type": "register",
    "block": "ene_cluster",
    "width": 10,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        8
      ],
      [
        "mem_err_type",
        8,
        2
      ]
    ]
  },
  "ene_cluster_ser_error_debug_configuration": {
    "type": "register",
    "block": "ene_cluster",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "ene_cluster_ecc_1b_err_debug": {
    "type": "register",
    "block": "ene_cluster",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "ene_cluster_ecc_2b_err_debug": {
    "type": "register",
    "block": "ene_cluster",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "ene_cluster_counter_timer": {
    "type": "register",
    "block": "ene_cluster",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "ene_cluster_counter_timer_trigger_reg": {
    "type": "register",
    "block": "ene_cluster",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "ene_cluster_memory_access_timeout": {
    "type": "register",
    "block": "ene_cluster",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "ene_cluster_broadcast_config_reg": {
    "type": "register",
    "block": "ene_cluster",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "ene_cluster_memory_prot_bypass": {
    "type": "register",
    "block": "ene_cluster",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "ene_cluster_soft_reset_configuration": {
    "type": "register",
    "block": "ene_cluster",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "ene_cluster_mbist_configuration": {
    "type": "register",
    "block": "ene_cluster",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "ene_cluster_power_down_configuration": {
    "type": "register",
    "block": "ene_cluster",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "ene_cluster_spare_reg": {
    "type": "register",
    "block": "ene_cluster",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "ene_cluster_pmro_ctrl": {
    "type": "register",
    "block": "ene_cluster",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "ene_cluster_pmro_status": {
    "type": "register",
    "block": "ene_cluster",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "ene_cluster_mirror_bus_conf_reg": {
    "type": "register",
    "block": "ene_cluster",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "ene_cluster_mirror_bus_status": {
    "type": "register",
    "block": "ene_cluster",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "ene_cluster_device_time_offset_cfg": {
    "type": "register",
    "block": "ene_cluster",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "ene_cluster_fabric_mode": {
    "type": "register",
    "block": "ene_cluster",
    "width": 1,
    "desc": "Set the cluster to fabric mode",
    "fields": [
      [
        "fabric_mode_r",
        0,
        1
      ]
    ]
  },
  "ene_cluster_ene_interrupt_signals": {
    "type": "register",
    "block": "ene_cluster",
    "width": 2,
    "desc": "Interrupt signals from the Encapsulation Engines",
    "fields": [
      [
        "ene_ttl_count_expired_int",
        0,
        1
      ],
      [
        "ene_macro_counter_wrap_around_int",
        1,
        1
      ]
    ]
  },
  "ene_cluster_ene_interrupt_signals_mask": {
    "type": "register",
    "block": "ene_cluster",
    "width": 2,
    "desc": "This register masks EneInterruptSignals[12] interrupt register",
    "fields": [
      [
        "ene_ttl_count_expired_int_mask",
        0,
        1
      ],
      [
        "ene_macro_counter_wrap_around_int_mask",
        1,
        1
      ]
    ]
  },
  "ene_cluster_ene_interrupt_signals_test": {
    "type": "register",
    "block": "ene_cluster",
    "width": 2,
    "desc": "This register tests EneInterruptSignals[12] interrupt register",
    "fields": [
      [
        "ene_ttl_count_expired_int_test",
        0,
        1
      ],
      [
        "ene_macro_counter_wrap_around_int_test",
        1,
        1
      ]
    ]
  },
  "ene_cluster_ene_debug_counters": {
    "type": "register",
    "block": "ene_cluster",
    "width": 128,
    "desc": "Counters For Debug",
    "fields": [
      [
        "ene_incoming_headers",
        0,
        64
      ],
      [
        "ene_outgoing_headers",
        64,
        64
      ]
    ]
  },
  "ene_cluster_ene_debug_water_mark": {
    "type": "register",
    "block": "ene_cluster",
    "width": 8,
    "desc": "Water Mark For Debug",
    "fields": [
      [
        "ene_max_instruction_per_word",
        0,
        8
      ]
    ]
  },
  "ene_cluster_ene_debug_ttl_first_accessed_inst": {
    "type": "register",
    "block": "ene_cluster",
    "width": 8,
    "desc": "First macro pointer for a header, valid in case the processing has hit TTL",
    "fields": [
      [
        "ene_first_inst",
        0,
        8
      ]
    ]
  },
  "ene_cluster_ene_cluster_debug_watermark": {
    "type": "register",
    "block": "ene_cluster",
    "width": 4,
    "desc": "Watermark for debug",
    "fields": [
      [
        "max_header_count_in_input_fifo",
        0,
        4
      ]
    ]
  },
  "ene_cluster_ene_word_ttl_r": {
    "type": "register",
    "block": "ene_cluster",
    "width": 8,
    "desc": "Maximum number of instruction allowed per word in the ENE.  When a word has reached the maximum number allowed, the ENE stops processing it.",
    "fields": [
      [
        "ene_word_ttl",
        0,
        8
      ]
    ]
  },
  "ene_cluster_ene_macro_memory": {
    "type": "memory",
    "block": "ene_cluster",
    "width": 46,
    "desc": "Holds the instructions of the encapsulation macros Instruction format for Push to Header/Scratchpad instructions",
    "fields": [
      [
        "ene_data_fs_width",
        0,
        4
      ],
      [
        "ene_data_fs_offset",
        4,
        8
      ],
      [
        "ene_scratchpad_push_size",
        12,
        8
      ],
      [
        "ene_scratchpad_data_shift",
        20,
        3
      ],
      [
        "ene_left_shift_size_fs_width",
        23,
        3
      ],
      [
        "ene_left_shift_size_fs_offset",
        26,
        8
      ],
      [
        "ene_left_shift_fs_size",
        34,
        4
      ],
      [
        "ene_left_shift_sel",
        38,
        1
      ],
      [
        "ene_store_encap_size",
        39,
        1
      ],
      [
        "ene_store_cs_command",
        40,
        1
      ],
      [
        "ene_start_next_macro",
        41,
        1
      ],
      [
        "ene_op",
        42,
        4
      ]
    ]
  },
  "ene_cluster_ene_data_memory": {
    "type": "memory",
    "block": "ene_cluster",
    "width": 128,
    "desc": "Holds commonly used big data for the ENE. Addressed by the 'Push To Scratchpad from Memory' intruction in the ENE",
    "fields": [
      [
        "ene_data_memory_line",
        0,
        128
      ]
    ]
  },
  "txpp_interrupt_register": {
    "type": "register",
    "block": "txpp",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "internal_interrupt_summary",
        1,
        1
      ],
      [
        "em_response_interrupt_summary",
        2,
        1
      ]
    ]
  },
  "txpp_mem_protect_interrupt": {
    "type": "register",
    "block": "txpp",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "txpp_mem_protect_interrupt_test": {
    "type": "register",
    "block": "txpp",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "txpp_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "tod_port_max_delay_and_cong_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "light_fi_npu_encap_lookup0_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "light_fi_npu_encap_lookup1_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "cbr_fifos0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cbr_fifos1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "fwd_qos_mapping0_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "fwd_qos_mapping1_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "encap_qos_mapping0_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "encap_qos_mapping1_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mc_cud_table_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ptp_record_fifo_memory0_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ptp_record_fifo_memory1_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "logical_port_profile_mapping_verifier0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "logical_port_profile_mapping_verifier1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "logical_port_profile_mapping_verifier2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "logical_port_profile_mapping_verifier3_ecc_1b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "txpp_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "tod_port_max_delay_and_cong_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "light_fi_npu_encap_lookup0_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "light_fi_npu_encap_lookup1_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "cbr_fifos0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "cbr_fifos1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "fwd_qos_mapping0_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "fwd_qos_mapping1_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "encap_qos_mapping0_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "encap_qos_mapping1_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mc_cud_table_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "ptp_record_fifo_memory0_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "ptp_record_fifo_memory1_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "logical_port_profile_mapping_verifier0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "logical_port_profile_mapping_verifier1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "logical_port_profile_mapping_verifier2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "logical_port_profile_mapping_verifier3_ecc_2b_err_interrupt_mask",
        15,
        1
      ]
    ]
  },
  "txpp_parity_err_interrupt_register_mask": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Parity Error Interrupt Mask Register",
    "fields": [
      [
        "npu_buffer0_parity_err_interrupt_mask",
        0,
        1
      ],
      [
        "npu_buffer1_parity_err_interrupt_mask",
        1,
        1
      ]
    ]
  },
  "txpp_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "tod_port_max_delay_and_cong_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "light_fi_npu_encap_lookup0_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "light_fi_npu_encap_lookup1_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "cbr_fifos0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "cbr_fifos1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "fwd_qos_mapping0_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "fwd_qos_mapping1_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "encap_qos_mapping0_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "encap_qos_mapping1_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "mc_cud_table_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "ptp_record_fifo_memory0_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "ptp_record_fifo_memory1_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "logical_port_profile_mapping_verifier0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "logical_port_profile_mapping_verifier1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "logical_port_profile_mapping_verifier2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "logical_port_profile_mapping_verifier3_ecc_1b_err_initiate",
        15,
        1
      ]
    ]
  },
  "txpp_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "tod_port_max_delay_and_cong_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "light_fi_npu_encap_lookup0_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "light_fi_npu_encap_lookup1_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "cbr_fifos0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "cbr_fifos1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "fwd_qos_mapping0_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "fwd_qos_mapping1_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "encap_qos_mapping0_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "encap_qos_mapping1_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "mc_cud_table_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "ptp_record_fifo_memory0_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "ptp_record_fifo_memory1_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "logical_port_profile_mapping_verifier0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "logical_port_profile_mapping_verifier1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "logical_port_profile_mapping_verifier2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "logical_port_profile_mapping_verifier3_ecc_2b_err_initiate",
        15,
        1
      ]
    ]
  },
  "txpp_parity_err_initiate_register": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Parity Error Initiator Register",
    "fields": [
      [
        "npu_buffer0_parity_err_initiate",
        0,
        1
      ],
      [
        "npu_buffer1_parity_err_initiate",
        1,
        1
      ]
    ]
  },
  "txpp_mem_protect_err_status": {
    "type": "register",
    "block": "txpp",
    "width": 18,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "tod_port_max_delay_and_cong_err_int",
        0,
        1
      ],
      [
        "light_fi_npu_encap_lookup0_err_int",
        1,
        1
      ],
      [
        "light_fi_npu_encap_lookup1_err_int",
        2,
        1
      ],
      [
        "cbr_fifos0_err_int",
        3,
        1
      ],
      [
        "cbr_fifos1_err_int",
        4,
        1
      ],
      [
        "fwd_qos_mapping0_err_int",
        5,
        1
      ],
      [
        "fwd_qos_mapping1_err_int",
        6,
        1
      ],
      [
        "encap_qos_mapping0_err_int",
        7,
        1
      ],
      [
        "encap_qos_mapping1_err_int",
        8,
        1
      ],
      [
        "npu_buffer0_err_int",
        9,
        1
      ],
      [
        "npu_buffer1_err_int",
        10,
        1
      ],
      [
        "mc_cud_table_err_int",
        11,
        1
      ],
      [
        "ptp_record_fifo_memory0_err_int",
        12,
        1
      ],
      [
        "ptp_record_fifo_memory1_err_int",
        13,
        1
      ],
      [
        "logical_port_profile_mapping_verifier0_err_int",
        14,
        1
      ],
      [
        "logical_port_profile_mapping_verifier1_err_int",
        15,
        1
      ],
      [
        "logical_port_profile_mapping_verifier2_err_int",
        16,
        1
      ],
      [
        "logical_port_profile_mapping_verifier3_err_int",
        17,
        1
      ]
    ]
  },
  "txpp_selected_ser_error_info": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "txpp_ser_error_debug_configuration": {
    "type": "register",
    "block": "txpp",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "txpp_ecc_1b_err_debug": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "txpp_ecc_2b_err_debug": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "txpp_parity_err_debug": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Parity Error Counter",
    "fields": [
      [
        "parity_err_counter",
        0,
        16
      ]
    ]
  },
  "txpp_tcam_scan_period_cfg": {
    "type": "register",
    "block": "txpp",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "txpp_counter_timer": {
    "type": "register",
    "block": "txpp",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "txpp_counter_timer_trigger_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "txpp_memory_access_timeout": {
    "type": "register",
    "block": "txpp",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "txpp_broadcast_config_reg": {
    "type": "register",
    "block": "txpp",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "txpp_memory_prot_bypass": {
    "type": "register",
    "block": "txpp",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "txpp_soft_reset_configuration": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "txpp_mbist_configuration": {
    "type": "register",
    "block": "txpp",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "txpp_power_down_configuration": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "txpp_spare_reg": {
    "type": "register",
    "block": "txpp",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "txpp_pmro_ctrl": {
    "type": "register",
    "block": "txpp",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "txpp_pmro_status": {
    "type": "register",
    "block": "txpp",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "txpp_mirror_bus_conf_reg": {
    "type": "register",
    "block": "txpp",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "txpp_mirror_bus_status": {
    "type": "register",
    "block": "txpp",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "txpp_device_time_offset_cfg": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "txpp_internal_interrupt": {
    "type": "register",
    "block": "txpp",
    "width": 21,
    "desc": "Interrupt register for various interrupts in the TxPP",
    "fields": [
      [
        "ene_cluster0_interrupt",
        0,
        1
      ],
      [
        "ene_cluster1_interrupt",
        1,
        1
      ],
      [
        "npe0_interrupt",
        2,
        1
      ],
      [
        "npe1_interrupt",
        3,
        1
      ],
      [
        "eve0_packet_drop_interrupt",
        4,
        1
      ],
      [
        "eve1_packet_drop_interrupt",
        5,
        1
      ],
      [
        "ifg0_deep_term_excessive_termintaion",
        6,
        1
      ],
      [
        "ifg1_deep_term_excessive_termintaion",
        7,
        1
      ],
      [
        "ifg0_wd2_bit_ecc_err_interrupt",
        8,
        1
      ],
      [
        "ifg1_wd2_bit_ecc_err_interrupt",
        9,
        1
      ],
      [
        "npe_macro_id_tcam_miss_interrupt",
        10,
        1
      ],
      [
        "lfi_nw0_tcam_miss_interrupt",
        11,
        1
      ],
      [
        "lfi_nw1_tcam_miss_interrupt",
        12,
        1
      ],
      [
        "lfi_nw2_tcam_miss_interrupt",
        13,
        1
      ],
      [
        "lfi_nw3_tcam_miss_interrupt",
        14,
        1
      ],
      [
        "mtu_check_fail_interrupt",
        15,
        1
      ],
      [
        "invert_crc_asserted_before_npe0_interrupt",
        16,
        1
      ],
      [
        "invert_crc_asserted_before_npe1_interrupt",
        17,
        1
      ],
      [
        "tx_counters_cache_full_interrupt",
        18,
        1
      ],
      [
        "ptp_record_ifg0_pif_fifo_overflow",
        19,
        1
      ],
      [
        "ptp_record_ifg1_pif_fifo_overflow",
        20,
        1
      ]
    ]
  },
  "txpp_internal_interrupt_mask": {
    "type": "register",
    "block": "txpp",
    "width": 21,
    "desc": "This register masks InternalInterrupt interrupt register",
    "fields": [
      [
        "ene_cluster0_interrupt_mask",
        0,
        1
      ],
      [
        "ene_cluster1_interrupt_mask",
        1,
        1
      ],
      [
        "npe0_interrupt_mask",
        2,
        1
      ],
      [
        "npe1_interrupt_mask",
        3,
        1
      ],
      [
        "eve0_packet_drop_interrupt_mask",
        4,
        1
      ],
      [
        "eve1_packet_drop_interrupt_mask",
        5,
        1
      ],
      [
        "ifg0_deep_term_excessive_termintaion_mask",
        6,
        1
      ],
      [
        "ifg1_deep_term_excessive_termintaion_mask",
        7,
        1
      ],
      [
        "ifg0_wd2_bit_ecc_err_interrupt_mask",
        8,
        1
      ],
      [
        "ifg1_wd2_bit_ecc_err_interrupt_mask",
        9,
        1
      ],
      [
        "npe_macro_id_tcam_miss_interrupt_mask",
        10,
        1
      ],
      [
        "lfi_nw0_tcam_miss_interrupt_mask",
        11,
        1
      ],
      [
        "lfi_nw1_tcam_miss_interrupt_mask",
        12,
        1
      ],
      [
        "lfi_nw2_tcam_miss_interrupt_mask",
        13,
        1
      ],
      [
        "lfi_nw3_tcam_miss_interrupt_mask",
        14,
        1
      ],
      [
        "mtu_check_fail_interrupt_mask",
        15,
        1
      ],
      [
        "invert_crc_asserted_before_npe0_interrupt_mask",
        16,
        1
      ],
      [
        "invert_crc_asserted_before_npe1_interrupt_mask",
        17,
        1
      ],
      [
        "tx_counters_cache_full_interrupt_mask",
        18,
        1
      ],
      [
        "ptp_record_ifg0_pif_fifo_overflow_mask",
        19,
        1
      ],
      [
        "ptp_record_ifg1_pif_fifo_overflow_mask",
        20,
        1
      ]
    ]
  },
  "txpp_internal_interrupt_test": {
    "type": "register",
    "block": "txpp",
    "width": 21,
    "desc": "This register tests InternalInterrupt interrupt register",
    "fields": [
      [
        "ene_cluster0_interrupt_test",
        0,
        1
      ],
      [
        "ene_cluster1_interrupt_test",
        1,
        1
      ],
      [
        "npe0_interrupt_test",
        2,
        1
      ],
      [
        "npe1_interrupt_test",
        3,
        1
      ],
      [
        "eve0_packet_drop_interrupt_test",
        4,
        1
      ],
      [
        "eve1_packet_drop_interrupt_test",
        5,
        1
      ],
      [
        "ifg0_deep_term_excessive_termintaion_test",
        6,
        1
      ],
      [
        "ifg1_deep_term_excessive_termintaion_test",
        7,
        1
      ],
      [
        "ifg0_wd2_bit_ecc_err_interrupt_test",
        8,
        1
      ],
      [
        "ifg1_wd2_bit_ecc_err_interrupt_test",
        9,
        1
      ],
      [
        "npe_macro_id_tcam_miss_interrupt_test",
        10,
        1
      ],
      [
        "lfi_nw0_tcam_miss_interrupt_test",
        11,
        1
      ],
      [
        "lfi_nw1_tcam_miss_interrupt_test",
        12,
        1
      ],
      [
        "lfi_nw2_tcam_miss_interrupt_test",
        13,
        1
      ],
      [
        "lfi_nw3_tcam_miss_interrupt_test",
        14,
        1
      ],
      [
        "mtu_check_fail_interrupt_test",
        15,
        1
      ],
      [
        "invert_crc_asserted_before_npe0_interrupt_test",
        16,
        1
      ],
      [
        "invert_crc_asserted_before_npe1_interrupt_test",
        17,
        1
      ],
      [
        "tx_counters_cache_full_interrupt_test",
        18,
        1
      ],
      [
        "ptp_record_ifg0_pif_fifo_overflow_test",
        19,
        1
      ],
      [
        "ptp_record_ifg1_pif_fifo_overflow_test",
        20,
        1
      ]
    ]
  },
  "txpp_txpp_mems_init_done_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Indication for the end of the init EM and dynamic memories in the TxPP",
    "fields": [
      [
        "txpp_mems_init_done",
        0,
        1
      ]
    ]
  },
  "txpp_debug_ifc_counters": {
    "type": "register",
    "block": "txpp",
    "width": 640,
    "desc": "Counters used for debug features",
    "fields": [
      [
        "txpp_incoming_word_count_ifg0",
        0,
        64
      ],
      [
        "txpp_incoming_word_count_ifg1",
        64,
        64
      ],
      [
        "txpp_incoming_packet_count_ifg0",
        128,
        64
      ],
      [
        "txpp_incoming_packet_count_ifg1",
        192,
        64
      ],
      [
        "txpp_packet_unpacking_count_ifg0",
        256,
        64
      ],
      [
        "txpp_packet_unpacking_count_ifg1",
        320,
        64
      ],
      [
        "txpp_outgoing_word_count_ifg0",
        384,
        64
      ],
      [
        "txpp_outgoing_word_count_ifg1",
        448,
        64
      ],
      [
        "txpp_outgoing_packet_count_ifg0",
        512,
        64
      ],
      [
        "txpp_outgoing_packet_count_ifg1",
        576,
        64
      ]
    ]
  },
  "txpp_debug_drop_counters": {
    "type": "register",
    "block": "txpp",
    "width": 128,
    "desc": "Counters used for debug features",
    "fields": [
      [
        "drop_counter_ifg0",
        0,
        64
      ],
      [
        "drop_counter_ifg1",
        64,
        64
      ]
    ]
  },
  "txpp_debug_npu_counters": {
    "type": "register",
    "block": "txpp",
    "width": 512,
    "desc": "Counters used for debug features",
    "fields": [
      [
        "npu_incoming_word_count_ifg0",
        0,
        64
      ],
      [
        "npu_incoming_word_count_ifg1",
        64,
        64
      ],
      [
        "npu_outgoing_word_count_ifg0",
        128,
        64
      ],
      [
        "npu_outgoing_word_count_ifg1",
        192,
        64
      ],
      [
        "npu_buffer0_write_count",
        256,
        64
      ],
      [
        "npu_buffer1_write_count",
        320,
        64
      ],
      [
        "logical_port_profile_emdb_hits",
        384,
        64
      ],
      [
        "logical_port_profile_emdb_misses",
        448,
        64
      ]
    ]
  },
  "txpp_debug_back_pressure_counters": {
    "type": "register",
    "block": "txpp",
    "width": 640,
    "desc": "Counters used for debug features",
    "fields": [
      [
        "ene_back_pressure_from_non_sop_buffer_counter0",
        0,
        64
      ],
      [
        "ene_back_pressure_from_non_sop_buffer_counter1",
        64,
        64
      ],
      [
        "cbr_back_pressure_from_non_sop_buffer_counter0",
        128,
        64
      ],
      [
        "cbr_back_pressure_from_non_sop_buffer_counter1",
        192,
        64
      ],
      [
        "cbr_back_pressure_from_tx_npu_counter0",
        256,
        64
      ],
      [
        "cbr_back_pressure_from_tx_npu_counter1",
        320,
        64
      ],
      [
        "cbr_back_pressure_contexts_depleted_counter0",
        384,
        64
      ],
      [
        "cbr_back_pressure_contexts_depleted_counter1",
        448,
        64
      ],
      [
        "cbr_full_counter0",
        512,
        64
      ],
      [
        "cbr_full_counter1",
        576,
        64
      ]
    ]
  },
  "txpp_debug_npu_back_pressure_counters": {
    "type": "register",
    "block": "txpp",
    "width": 448,
    "desc": "Counters used for debug features",
    "fields": [
      [
        "fabric_lfi0_back_pressure",
        0,
        64
      ],
      [
        "fabric_lfi1_back_pressure",
        64,
        64
      ],
      [
        "ene_cluster0_out_of_free_slots",
        128,
        64
      ],
      [
        "ene_cluster1_out_of_free_slots",
        192,
        64
      ],
      [
        "both_ene_cluster_out_of_free_slots",
        256,
        64
      ],
      [
        "tx_counters_ifg0_fifo_full",
        320,
        64
      ],
      [
        "tx_counters_ifg1_fifo_full",
        384,
        64
      ]
    ]
  },
  "txpp_debug_tx_counters_counters": {
    "type": "register",
    "block": "txpp",
    "width": 192,
    "desc": "Counters used for debug features",
    "fields": [
      [
        "tx_counters_read_reqs",
        0,
        64
      ],
      [
        "tx_counters_read_resps",
        64,
        64
      ],
      [
        "tx_counters_bubbles",
        128,
        64
      ]
    ]
  },
  "txpp_debug_db_connectivity_counters": {
    "type": "register",
    "block": "txpp",
    "width": 448,
    "desc": "Counters used for debug features",
    "fields": [
      [
        "db_connectivity_large_enc_cbt_out_of_credits",
        0,
        64
      ],
      [
        "db_connectivity_small_enc_cbt_out_of_credits",
        64,
        64
      ],
      [
        "db_connectivity_dip_index_cbt_out_of_credits",
        128,
        64
      ],
      [
        "db_connectivity_l3_dlp0_cbt_out_of_credits",
        192,
        64
      ],
      [
        "db_connectivity_l3_dlp1_cbt_out_of_credits",
        256,
        64
      ],
      [
        "db_connectivity_direct0_nh_cbt_out_of_credits",
        320,
        64
      ],
      [
        "db_connectivity_direct1_adj_cbt_out_of_credits",
        384,
        64
      ]
    ]
  },
  "txpp_txpp_debug_water_mark": {
    "type": "register",
    "block": "txpp",
    "width": 147,
    "desc": "Water Mark For Debug",
    "fields": [
      [
        "min_available_contexts_in_free_buffer_manager0",
        0,
        10
      ],
      [
        "min_available_contexts_in_free_buffer_manager1",
        10,
        10
      ],
      [
        "max_occupancy_of_non_sop_buf0",
        20,
        4
      ],
      [
        "max_occupancy_of_non_sop_buf1",
        24,
        4
      ],
      [
        "max_pending_tx_counter_reqs0",
        28,
        3
      ],
      [
        "max_pending_tx_counter_reqs1",
        31,
        3
      ],
      [
        "min_free_thread_indexes_in_npe0_phase0",
        34,
        8
      ],
      [
        "min_free_thread_indexes_in_npe1_phase0",
        42,
        8
      ],
      [
        "min_free_thread_indexes_in_both_npes_phase0",
        50,
        9
      ],
      [
        "min_free_thread_indexes_in_npe0_phase1",
        59,
        8
      ],
      [
        "min_free_thread_indexes_in_npe1_phase1",
        67,
        8
      ],
      [
        "min_free_thread_indexes_in_both_npes_phase1",
        75,
        9
      ],
      [
        "min_free_slots_in_ene_cluster0",
        84,
        6
      ],
      [
        "min_free_slots_in_ene_cluster1",
        90,
        6
      ],
      [
        "min_free_slots_in_both_ene_clusters",
        96,
        7
      ],
      [
        "max_cbr_occupancy0",
        103,
        6
      ],
      [
        "max_cbr_occupancy1",
        109,
        6
      ],
      [
        "max_packet_in_npe0_phase0_await_for_transmit",
        115,
        8
      ],
      [
        "max_packet_in_npe0_phase1_await_for_transmit",
        123,
        8
      ],
      [
        "max_packet_in_npe1_phase0_await_for_transmit",
        131,
        8
      ],
      [
        "max_packet_in_npe1_phase1_await_for_transmit",
        139,
        8
      ]
    ]
  },
  "txpp_debug_data_bus_register": {
    "type": "register",
    "block": "txpp",
    "width": 32,
    "desc": "Debug register. Data selected by debug_data_select_register",
    "fields": [
      [
        "debug_data_bus",
        0,
        32
      ]
    ]
  },
  "txpp_debug_data_select_register": {
    "type": "register",
    "block": "txpp",
    "width": 9,
    "desc": "Selector for debug features. The debug data is broken to 32 bit, so bigger data is accessed through several select values",
    "fields": [
      [
        "debug_data_select",
        0,
        9
      ]
    ]
  },
  "txpp_debug_npu_buffer0_occupancy_per_pif": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "Keeps count of number of words per Pif stored in NPU Buffer0",
    "fields": [
      [
        "npu_buffer0_occupancy_per_pif",
        0,
        10
      ]
    ]
  },
  "txpp_debug_npu_buffer1_occupancy_per_pif": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "Keeps count of number of words per Pif stored in NPU Buffer1",
    "fields": [
      [
        "npu_buffer1_occupancy_per_pif",
        0,
        10
      ]
    ]
  },
  "txpp_debug_npu_buffer_occupancy_status_th": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "Threshold of capturein the NPU buffer?OccupancyPerPif regs. If total number of pifs stored in the NPU buffer then the occupancy status is stored",
    "fields": [
      [
        "npu_buffer_occupancy_status_th",
        0,
        10
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_indications": {
    "type": "register",
    "block": "txpp",
    "width": 256,
    "desc": "All Event monitor's outputs (cleared on the same read)",
    "fields": [
      [
        "debug_sms0_event_mon_acc0",
        0,
        64
      ],
      [
        "debug_sms0_event_mon_captured_data",
        64,
        96
      ],
      [
        "debug_sms0_event_mon_time_of_day",
        160,
        32
      ],
      [
        "debug_sms0_event_mon_clock_counter",
        192,
        64
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_enable_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Debug Event Monitor: Enable indication",
    "fields": [
      [
        "debug_sms0_event_mon_enable",
        0,
        1
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_field_offset_reg": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "debug_sms0_event_mon_field_offset",
        0,
        8
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_field_mask_reg": {
    "type": "register",
    "block": "txpp",
    "width": 24,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "debug_sms0_event_mon_field_mask",
        0,
        24
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_field_part_of_and_bitmap_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'and' condition",
    "fields": [
      [
        "debug_sms0_event_mon_field_part_of_and_bitmap",
        0,
        1
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_field_part_of_or_bitmap_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'Or' condition",
    "fields": [
      [
        "debug_sms0_event_mon_field_part_of_or_bitmap",
        0,
        1
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_field_compare_mode_reg": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Event monitor compare mode register per field: 2b00 Equal, 2b01 Not equal, 2b01 Smaller than, 2b11 Greater than",
    "fields": [
      [
        "debug_sms0_event_mon_field_compare_mode",
        0,
        2
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_field_compare_value_reg": {
    "type": "register",
    "block": "txpp",
    "width": 24,
    "desc": "Event monitor: The value which is compared to the masked field",
    "fields": [
      [
        "debug_sms0_event_mon_field_compare_value",
        0,
        24
      ]
    ]
  },
  "txpp_debug_sms0_event_mon_mode_reg": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Event monitor: Defines a 'hit' as 1 of 4 options between the '&' and '|' comparators: 00-only 'and'; 01-only 'or' ;10-'and'&'or; 11-'and'|'or' ",
    "fields": [
      [
        "debug_sms0_event_mon_mode",
        0,
        2
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_indications": {
    "type": "register",
    "block": "txpp",
    "width": 256,
    "desc": "All Event monitor's outputs (cleared on the same read)",
    "fields": [
      [
        "debug_sms1_event_mon_acc0",
        0,
        64
      ],
      [
        "debug_sms1_event_mon_captured_data",
        64,
        96
      ],
      [
        "debug_sms1_event_mon_time_of_day",
        160,
        32
      ],
      [
        "debug_sms1_event_mon_clock_counter",
        192,
        64
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_enable_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Debug Event Monitor: Enable indication",
    "fields": [
      [
        "debug_sms1_event_mon_enable",
        0,
        1
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_field_offset_reg": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "debug_sms1_event_mon_field_offset",
        0,
        8
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_field_mask_reg": {
    "type": "register",
    "block": "txpp",
    "width": 24,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "debug_sms1_event_mon_field_mask",
        0,
        24
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_field_part_of_and_bitmap_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'and' condition",
    "fields": [
      [
        "debug_sms1_event_mon_field_part_of_and_bitmap",
        0,
        1
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_field_part_of_or_bitmap_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'Or' condition",
    "fields": [
      [
        "debug_sms1_event_mon_field_part_of_or_bitmap",
        0,
        1
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_field_compare_mode_reg": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Event monitor compare mode register per field: 2b00 Equal, 2b01 Not equal, 2b01 Smaller than, 2b11 Greater than",
    "fields": [
      [
        "debug_sms1_event_mon_field_compare_mode",
        0,
        2
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_field_compare_value_reg": {
    "type": "register",
    "block": "txpp",
    "width": 24,
    "desc": "Event monitor: The value which is compared to the masked field",
    "fields": [
      [
        "debug_sms1_event_mon_field_compare_value",
        0,
        24
      ]
    ]
  },
  "txpp_debug_sms1_event_mon_mode_reg": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Event monitor: Defines a 'hit' as 1 of 4 options between the '&' and '|' comparators: 00-only 'and'; 01-only 'or' ;10-'and'&'or; 11-'and'|'or' ",
    "fields": [
      [
        "debug_sms1_event_mon_mode",
        0,
        2
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_indications": {
    "type": "register",
    "block": "txpp",
    "width": 256,
    "desc": "All Event monitor's outputs (cleared on the same read)",
    "fields": [
      [
        "debug_ifg0_event_mon_acc0",
        0,
        64
      ],
      [
        "debug_ifg0_event_mon_captured_data",
        64,
        96
      ],
      [
        "debug_ifg0_event_mon_time_of_day",
        160,
        32
      ],
      [
        "debug_ifg0_event_mon_clock_counter",
        192,
        64
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_enable_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Debug Event Monitor: Enable indication",
    "fields": [
      [
        "debug_ifg0_event_mon_enable",
        0,
        1
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_field_offset_reg": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "debug_ifg0_event_mon_field_offset",
        0,
        8
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_field_mask_reg": {
    "type": "register",
    "block": "txpp",
    "width": 24,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "debug_ifg0_event_mon_field_mask",
        0,
        24
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_field_part_of_and_bitmap_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'and' condition",
    "fields": [
      [
        "debug_ifg0_event_mon_field_part_of_and_bitmap",
        0,
        1
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_field_part_of_or_bitmap_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'Or' condition",
    "fields": [
      [
        "debug_ifg0_event_mon_field_part_of_or_bitmap",
        0,
        1
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_field_compare_mode_reg": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Event monitor compare mode register per field: 2b00 Equal, 2b01 Not equal, 2b01 Smaller than, 2b11 Greater than",
    "fields": [
      [
        "debug_ifg0_event_mon_field_compare_mode",
        0,
        2
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_field_compare_value_reg": {
    "type": "register",
    "block": "txpp",
    "width": 24,
    "desc": "Event monitor: The value which is compared to the masked field",
    "fields": [
      [
        "debug_ifg0_event_mon_field_compare_value",
        0,
        24
      ]
    ]
  },
  "txpp_debug_ifg0_event_mon_mode_reg": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Event monitor: Defines a 'hit' as 1 of 4 options between the '&' and '|' comparators: 00-only 'and'; 01-only 'or' ;10-'and'&'or; 11-'and'|'or' ",
    "fields": [
      [
        "debug_ifg0_event_mon_mode",
        0,
        2
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_indications": {
    "type": "register",
    "block": "txpp",
    "width": 256,
    "desc": "All Event monitor's outputs (cleared on the same read)",
    "fields": [
      [
        "debug_ifg1_event_mon_acc0",
        0,
        64
      ],
      [
        "debug_ifg1_event_mon_captured_data",
        64,
        96
      ],
      [
        "debug_ifg1_event_mon_time_of_day",
        160,
        32
      ],
      [
        "debug_ifg1_event_mon_clock_counter",
        192,
        64
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_enable_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Debug Event Monitor: Enable indication",
    "fields": [
      [
        "debug_ifg1_event_mon_enable",
        0,
        1
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_field_offset_reg": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "debug_ifg1_event_mon_field_offset",
        0,
        8
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_field_mask_reg": {
    "type": "register",
    "block": "txpp",
    "width": 24,
    "desc": "Event monitor: Mask (and mask) to be performed on each extracted field",
    "fields": [
      [
        "debug_ifg1_event_mon_field_mask",
        0,
        24
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_field_part_of_and_bitmap_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'and' condition",
    "fields": [
      [
        "debug_ifg1_event_mon_field_part_of_and_bitmap",
        0,
        1
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_field_part_of_or_bitmap_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Event monitor: Bit per field; if set the field participate in the 'Or' condition",
    "fields": [
      [
        "debug_ifg1_event_mon_field_part_of_or_bitmap",
        0,
        1
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_field_compare_mode_reg": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Event monitor compare mode register per field: 2b00 Equal, 2b01 Not equal, 2b01 Smaller than, 2b11 Greater than",
    "fields": [
      [
        "debug_ifg1_event_mon_field_compare_mode",
        0,
        2
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_field_compare_value_reg": {
    "type": "register",
    "block": "txpp",
    "width": 24,
    "desc": "Event monitor: The value which is compared to the masked field",
    "fields": [
      [
        "debug_ifg1_event_mon_field_compare_value",
        0,
        24
      ]
    ]
  },
  "txpp_debug_ifg1_event_mon_mode_reg": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Event monitor: Defines a 'hit' as 1 of 4 options between the '&' and '|' comparators: 00-only 'and'; 01-only 'or' ;10-'and'&'or; 11-'and'|'or' ",
    "fields": [
      [
        "debug_ifg1_event_mon_mode",
        0,
        2
      ]
    ]
  },
  "txpp_fabric_mode": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Setting the TxPP to Fabric mode. Logic behaves differently in TxPP directed to network and TxPP directed to the fabric.",
    "fields": [
      [
        "fabric_mode_r",
        0,
        1
      ]
    ]
  },
  "txpp_egress_slice": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Setting the TxPP to Egress mode. Logic behaves differently in Ingress TxPP or Egress TxPP",
    "fields": [
      [
        "egress_slice_r",
        0,
        1
      ]
    ]
  },
  "txpp_sms0_packet_shaper_reg": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Configuration for automatic bubble to the CBR at the entrance to the TxPP",
    "fields": [
      [
        "sms0_packet_shaper_bubble_period",
        0,
        12
      ],
      [
        "sms0_packet_shaper_bubble_length",
        12,
        4
      ]
    ]
  },
  "txpp_sms1_packet_shaper_reg": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Configuration for automatic bubble to the CBR at the entrance to the TxPP",
    "fields": [
      [
        "sms1_packet_shaper_bubble_period",
        0,
        12
      ],
      [
        "sms1_packet_shaper_bubble_length",
        12,
        4
      ]
    ]
  },
  "txpp_source_slice_feature_en_r": {
    "type": "register",
    "block": "txpp",
    "width": 40,
    "desc": "Mapping source slice to feature enable. Allows enabling feature according to the packet's source slice. All fields are bitmaps (3b -> 1b)",
    "fields": [
      [
        "unpacking_source_slice_en_bmp",
        0,
        8
      ],
      [
        "long_termination_source_slice_en_bmp",
        8,
        8
      ],
      [
        "pre_txpp_edit_cmd_source_slice_en_bmp",
        16,
        8
      ],
      [
        "ingress_vlan_edit_source_slice_en_bmp",
        24,
        8
      ],
      [
        "cong_level_extract_source_slice_en_bmp",
        32,
        8
      ]
    ]
  },
  "txpp_congestion_level_tm_header_params": {
    "type": "register",
    "block": "txpp",
    "width": 15,
    "desc": "Congestion level is used for Tx statistics. The congestion level used in the TX statistics should be taken from the ingress device.  When the packet travels through the fabric the congestion level of the ingress device is in the header. Otherwise it is taken from the PD.",
    "fields": [
      [
        "cong_level_tm_cong_experienced_offset",
        0,
        6
      ],
      [
        "cong_level_tm_cong_level_offset",
        6,
        6
      ],
      [
        "cong_level_tm_cong_level_size",
        12,
        3
      ]
    ]
  },
  "txpp_parity_err_block_npu_buffer_context_return": {
    "type": "register",
    "block": "txpp",
    "width": 11,
    "desc": "Blocks re-allocating faulty entry. When a weak entry in the NPU buffer is detected, the SW can block using that entry.  Blocking is done by setting the valid bit to 1 and the return context to the number of entry that should be blocked. Unblocking entries requires resetting of the device. Register is duplicate. instance 0 is for NPU buffer0, instance 1 is for NPU buffer1.",
    "fields": [
      [
        "block_npu_buffer_context_return_valid",
        0,
        1
      ],
      [
        "block_npu_buffer_context_return_context",
        1,
        10
      ]
    ]
  },
  "txpp_pif2ifc_counter_mapping_regs": {
    "type": "register",
    "block": "txpp",
    "width": 5,
    "desc": "Those registers are used to map a PIF id to a reorder fifo and an interface counter. The PIFs are not numbered sequentially and so a PIF id might be greater than the number of reorder FIFOs and interface counters. A translation is used to map the PIF to a correct reorder FIFO / interface counter.",
    "fields": [
      [
        "pif2ifc_counter_mapping",
        0,
        5
      ]
    ]
  },
  "txpp_ifc_counter2pif_mapping_regs": {
    "type": "register",
    "block": "txpp",
    "width": 5,
    "desc": "Those registers are used to map an interface counter to a pif number. This mapping is a reverse mapping to Pif2IfcCounterMappingRegs.  It is used when a interface word counts crosses the allowed threshold and its traffic should be stopped/resumed. Since the counters numbers does not reflect the PIF id, this translation is needed.",
    "fields": [
      [
        "ifc_counter2pif_mapping",
        0,
        5
      ]
    ]
  },
  "txpp_ibm_editing_enable_bmp": {
    "type": "register",
    "block": "txpp",
    "width": 274,
    "desc": "This Register holds fields recognising In Bound Mirroring (IBM) commands from the received CUD. It also holds enable switches to IBM related hardware.",
    "fields": [
      [
        "cud_has_ibm_cmd_bmp",
        0,
        16
      ],
      [
        "cud_ibm_offset_vec",
        16,
        80
      ],
      [
        "cud_unicast_ibm",
        96,
        4
      ],
      [
        "ibm_enable_hw_termination_r",
        100,
        32
      ],
      [
        "ibm_enable_ive_r",
        132,
        32
      ],
      [
        "ibm_partial_mirror",
        164,
        32
      ],
      [
        "ibm_partial_mirror_packet_size",
        196,
        14
      ],
      [
        "ibm_cmd_is_int",
        210,
        32
      ],
      [
        "ibm_cmd_cud_map",
        242,
        32
      ]
    ]
  },
  "txpp_cud_mapping_int_enc_type": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "The Encapsulation type to be assigned to inband telemetry packets in the CUD stage",
    "fields": [
      [
        "cud_mapping_int_enc_type_r",
        0,
        4
      ]
    ]
  },
  "txpp_cud_mapping_dcf_enc_type": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "The Encapsulation type to be assigned to DCF packets in the CUD stage",
    "fields": [
      [
        "cud_mapping_dcf_enc_type_r",
        0,
        4
      ]
    ]
  },
  "txpp_cud_mapping_dcf_cud_values": {
    "type": "register",
    "block": "txpp",
    "width": 54,
    "desc": "In CUD mapping stage. The cud is recognised as DCF if the 4 msbs of the DCF is one of the three values set in this register. If less than three types is required, than two or more fields should be set to the same value.",
    "fields": [
      [
        "cud_mapping_dcf_cud_value0_r",
        0,
        18
      ],
      [
        "cud_mapping_dcf_cud_value1_r",
        18,
        18
      ],
      [
        "cud_mapping_dcf_cud_value2_r",
        36,
        18
      ]
    ]
  },
  "txpp_cud_mapping_mc_bmp": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Multicast indication Bitmap",
    "fields": [
      [
        "cud_mapping_mc_bmp_r",
        0,
        16
      ]
    ]
  },
  "txpp_cud_mapping_enc_data_mask_width": {
    "type": "register",
    "block": "txpp",
    "width": 5,
    "desc": "Width of the mask applied on the encapsulation data before stamping on the NPU header",
    "fields": [
      [
        "cud_mapping_enc_data_mask_width_r",
        0,
        5
      ]
    ]
  },
  "txpp_cud_encap_data_offset": {
    "type": "register",
    "block": "txpp",
    "width": 7,
    "desc": "Offset to the original Enacsulation Data found in the header before CUD mapping stage.",
    "fields": [
      [
        "cud_encap_data_offset_r",
        0,
        7
      ]
    ]
  },
  "txpp_cud_encap_data_type_offset": {
    "type": "register",
    "block": "txpp",
    "width": 7,
    "desc": "Offset to Encapsulation Type in the NPU Header for ingress replicated unicast header (4 bits)",
    "fields": [
      [
        "cud_encap_data_type_offset_r",
        0,
        7
      ]
    ]
  },
  "txpp_cud_encap_data_cud_offset": {
    "type": "register",
    "block": "txpp",
    "width": 7,
    "desc": "Offset to CUD id in the NPU header for ingress replicated unicast packets (24 bits)",
    "fields": [
      [
        "cud_encap_data_cud_offset_r",
        0,
        7
      ]
    ]
  },
  "txpp_cud_encap_data_type_mc_cud_value": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "Value of Encapsulation Type that corresponds to Ingress Replicated Unicast",
    "fields": [
      [
        "cud_encap_data_type_mc_cud_value_r",
        0,
        4
      ]
    ]
  },
  "txpp_cud_ibm_msb_value": {
    "type": "register",
    "block": "txpp",
    "width": 5,
    "desc": "IBM constructed cud 5 msbs",
    "fields": [
      [
        "cud_ibm_msb_value_r",
        0,
        5
      ]
    ]
  },
  "txpp_fwd_qos_mapping_enable": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Fwd Qos mapping Enable",
    "fields": [
      [
        "fwd_qos_mapping_enable_r",
        0,
        1
      ]
    ]
  },
  "txpp_encap_qos_mapping_enable": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Encapsulation Qos mapping Enable",
    "fields": [
      [
        "encap_qos_mapping_enable_r",
        0,
        1
      ]
    ]
  },
  "txpp_npe_mid_res_txpp_mid_prefix": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Value of the 2 bit prefix for txpp npe mid",
    "fields": [
      [
        "npe_mid_res_txpp_mid_prefix_r",
        0,
        2
      ]
    ]
  },
  "txpp_source_slice2_first_lfi_mid_bmp_r": {
    "type": "register",
    "block": "txpp",
    "width": 48,
    "desc": "Maps {source slice (3 bits), second packet from a packed packet indicaton (1bit)} to the first LFI stage (3 bits) to process the header",
    "fields": [
      [
        "source_slice2_first_lfi_mid_bmp",
        0,
        48
      ]
    ]
  },
  "txpp_current_layer_bit_index": {
    "type": "register",
    "block": "txpp",
    "width": 64,
    "desc": "Translate the first header type of the SOP word (4 bits) to the first layer to be processed in the NPU (4 bits)",
    "fields": [
      [
        "current_layer_bit_index_bmp",
        0,
        64
      ]
    ]
  },
  "txpp_mtu_check_pif": {
    "type": "register",
    "block": "txpp",
    "width": 37,
    "desc": "Maximum Transmission unit check configuration per PIF. If MTU check is on for a pif, and the packet size is greater than the MTU size then the packet should be dropped.",
    "fields": [
      [
        "mtu_check_enable",
        0,
        1
      ],
      [
        "mtu_check_size",
        1,
        14
      ],
      [
        "mtu_check_unschedule_recycle_code",
        15,
        2
      ],
      [
        "mtu_check_drop_packet",
        17,
        1
      ],
      [
        "mtu_check_fail_counter_pointer",
        18,
        19
      ]
    ]
  },
  "txpp_mtu_tx_to_rx_rcy_data_r": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Tx to Rx Data to be sent in case of MTU fail",
    "fields": [
      [
        "mtu_tx_to_rx_rcy_data",
        0,
        8
      ]
    ]
  },
  "txpp_force_counters_compensation_index_r": {
    "type": "register",
    "block": "txpp",
    "width": 9,
    "desc": "Forces Compensation index for each of the Tx counters request. Tx Counter logic selects the compensation value of each counter from a value in the NPPD. This register is used to override the selection with a pre-determined values",
    "fields": [
      [
        "force_counters_compensation_index_valid",
        0,
        1
      ],
      [
        "forced_compensation_index_value_ctr0",
        1,
        2
      ],
      [
        "forced_compensation_index_value_ctr1",
        3,
        2
      ],
      [
        "forced_compensation_index_value_ctr2",
        5,
        2
      ],
      [
        "forced_compensation_index_value_ctr3",
        7,
        2
      ]
    ]
  },
  "txpp_pending_tx_counter_req_in_fifo_threshold": {
    "type": "register",
    "block": "txpp",
    "width": 3,
    "desc": "Maximum amount of pending tx counters reqs per IFG allowed in the TxPP. Exceeding this number will stop issuing Sop words for the correspoinding IFG.",
    "fields": [
      [
        "pending_tx_counter_req_in_fifo_threshold_r",
        0,
        3
      ]
    ]
  },
  "txpp_non_sop_in_fifo_threshold": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "Maximum amount of non-sop fragments allowed in the Non-Sop Fifo. When the threshold is not exceeded writing to the NPU Buffer has strict priority for SOP Words. When the threshold is exceeded the Non-SOP words has strict priority over SOP words.",
    "fields": [
      [
        "non_sop_in_fifo_threshold_r",
        0,
        4
      ]
    ]
  },
  "txpp_npu_buffer_full_threshold": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "Maximal number of words (from all interfaces) allowed in the TxPP per IFG.",
    "fields": [
      [
        "npu_buffer_full_threshold_r",
        0,
        10
      ]
    ]
  },
  "txpp_ifg0_ifc_word_mem_alloc": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "Maximal number of words from txpp's first sms2txpp interface allowed in the TxPP per interface.",
    "fields": [
      [
        "ifg0_ifc_word_mem_alloc_r",
        0,
        10
      ]
    ]
  },
  "txpp_ifg1_ifc_word_mem_alloc": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "Maximal number of words from txpp's second sms2txpp interface allowed in the TxPP per interface.",
    "fields": [
      [
        "ifg1_ifc_word_mem_alloc_r",
        0,
        10
      ]
    ]
  },
  "txpp_light_fi_npu_sms_msb_align": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Enables aligning the NPU header to the msb of the SOP word when exiting the light FI",
    "fields": [
      [
        "light_fi_npu_sms_msb_align_r",
        0,
        1
      ]
    ]
  },
  "txpp_light_fi_fabric_lookup": {
    "type": "register",
    "block": "txpp",
    "width": 608,
    "desc": "Register Lookup table for the fabric stage in the light FI. Each field contains 16 entries",
    "fields": [
      [
        "fabric_lookup_header_format_arr",
        0,
        128
      ],
      [
        "fabric_lookup_next_header_format_arr",
        128,
        128
      ],
      [
        "fabric_lookup_npe_mid_valid_arr",
        256,
        16
      ],
      [
        "fabric_lookup_npe_mid_arr",
        272,
        128
      ],
      [
        "fabric_lookup_next_fi_mid_arr",
        400,
        48
      ],
      [
        "fabric_lookup_is_protocol_arr",
        448,
        16
      ],
      [
        "fabric_lookup_next_is_protocol_arr",
        464,
        16
      ],
      [
        "fabric_lookup_base_size_arr",
        480,
        112
      ],
      [
        "fabric_lookup_use_size_arr",
        592,
        16
      ]
    ]
  },
  "txpp_light_fi_tm_lookup": {
    "type": "register",
    "block": "txpp",
    "width": 608,
    "desc": "Register Lookup table for the TM stage in the light FI. Each field contains 16 entries",
    "fields": [
      [
        "tm_lookup_header_format_arr",
        0,
        128
      ],
      [
        "tm_lookup_next_header_format_arr",
        128,
        128
      ],
      [
        "tm_lookup_npe_mid_valid_arr",
        256,
        16
      ],
      [
        "tm_lookup_npe_mid_arr",
        272,
        128
      ],
      [
        "tm_lookup_next_fi_mid_arr",
        400,
        48
      ],
      [
        "tm_lookup_is_protocol_arr",
        448,
        16
      ],
      [
        "tm_lookup_next_is_protocol_arr",
        464,
        16
      ],
      [
        "tm_lookup_base_size_arr",
        480,
        112
      ],
      [
        "tm_lookup_use_size_arr",
        592,
        16
      ]
    ]
  },
  "txpp_issu_use_cfg_value": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Determines the origin of the ISSU to be used at the light FI. A SOP word may leave the light FI if the NPU has a slot to receive it and if the ISSU of the NPU agrees with the ISSU of the light FI. This register determines the origin of the light FI issu. It may be taken from the SOP word going through the light FI or from configuration register IncomingFragIssu_r",
    "fields": [
      [
        "issu_use_cfg_value_r",
        0,
        1
      ]
    ]
  },
  "txpp_incoming_frag_issu": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Issu state for incoming fragments",
    "fields": [
      [
        "incoming_frag_issu_r",
        0,
        1
      ]
    ]
  },
  "txpp_npe_output_grant_to_valid_latency": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "number of cycles between transmit grant to the npe and the reception of the sop word from the npe",
    "fields": [
      [
        "npe_output_grant_to_valid_latency_r",
        0,
        4
      ]
    ]
  },
  "txpp_npe_total_eligible_slots": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Maximal Number of SOP words allowed in the NPE (per phase). This register uses to limit the number of SOP in the NPE in case of a bad entry in the NPE.",
    "fields": [
      [
        "npe_total_eligible_slots_npe_phase0",
        0,
        8
      ],
      [
        "npe_total_eligible_slots_npe_phase1",
        8,
        8
      ]
    ]
  },
  "txpp_npe_input_ready_to_valid_latency": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "number of cycles between receiving ready from the NPE and the NPE getting valid signal",
    "fields": [
      [
        "npe_input_lfi_ready_to_valid_latency_r",
        0,
        4
      ],
      [
        "npe_input_nw_lfi_ready_to_valid_latency_r",
        4,
        4
      ]
    ]
  },
  "txpp_npe_input_used_to_pop_latency": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "number of cycles between receiving ready from the NPE and sending valid",
    "fields": [
      [
        "npe_input_used_to_pop_latency_r",
        0,
        4
      ]
    ]
  },
  "txpp_npe_issu": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Issu State of the NPU",
    "fields": [
      [
        "npe_incoming_issu_r",
        0,
        2
      ]
    ]
  },
  "txpp_long_termination_en": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Maps Header type to long termination enable",
    "fields": [
      [
        "long_termination_en_bmp",
        0,
        16
      ]
    ]
  },
  "txpp_pre_edit_header_offset_r": {
    "type": "register",
    "block": "txpp",
    "width": 6,
    "desc": "Offset to the TxPP pre editor header",
    "fields": [
      [
        "pre_edit_header_offset",
        0,
        6
      ]
    ]
  },
  "txpp_pre_edit_en_r": {
    "type": "register",
    "block": "txpp",
    "width": 48,
    "desc": "Enable registers for TxPP pre editing",
    "fields": [
      [
        "pre_edit_npu_header_type_en",
        0,
        16
      ],
      [
        "pre_edit_ibm_en",
        16,
        32
      ]
    ]
  },
  "txpp_pre_edit_command_map_bmp": {
    "type": "register",
    "block": "txpp",
    "width": 3,
    "desc": "Maps the original command from the TxPP pre edit header, npu header type enable and  the IBM enable to a new pre edit command and fwd offset recalc enable",
    "fields": [
      [
        "pre_edit_command_map",
        0,
        2
      ],
      [
        "pre_edit_fwd_offset_recalc_en_map",
        2,
        1
      ]
    ]
  },
  "txpp_header_type_sms_fwd_off_off": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Reserved",
    "fields": [
      [
        "header_type_sms_fwd_off_off_r",
        0,
        8
      ]
    ]
  },
  "txpp_header_type_npu_sms_size": {
    "type": "register",
    "block": "txpp",
    "width": 3,
    "desc": "Encoded size of the NPU Header",
    "fields": [
      [
        "header_type_npu_sms_size_r",
        0,
        3
      ]
    ]
  },
  "txpp_fwd_term_sms_hdr_rotate_hdr_en": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Enabling the moving of the NPU header to the LSB of the SOP word before of the Encapsulation Engines",
    "fields": [
      [
        "fwd_term_sms_hdr_rotate_hdr_en_r",
        0,
        1
      ]
    ]
  },
  "txpp_copy_cud_npe_mid_sms_hdr_on_rotated_hdr": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Replacing the NPU header after the light FI with the NPU header from the CUD mapping. In network mode, the SOP word goes through the NW light FI and the CUD mapping and NPE macro Id resolution stage in parallel. Since the CUD mapping may change the NPU header, the HW can take the NPU header from the CUD mapping and replace it into the SOP word.",
    "fields": [
      [
        "copy_cud_npe_mid_sms_hdr_on_rotated_hdr_r",
        0,
        1
      ]
    ]
  },
  "txpp_header_type_npu_sms_ive_cmd_offset": {
    "type": "register",
    "block": "txpp",
    "width": 7,
    "desc": "Offset to ingress vlan editing offset within the NPU header.",
    "fields": [
      [
        "header_type_npu_sms_ive_cmd_offset_r",
        0,
        7
      ]
    ]
  },
  "txpp_header_type_npu_sms_ive_pcp_dei_offset": {
    "type": "register",
    "block": "txpp",
    "width": 7,
    "desc": "Offset to PCP DEI offset within the NPU header.",
    "fields": [
      [
        "header_type_npu_sms_ive_pcp_dei_offset_r",
        0,
        7
      ]
    ]
  },
  "txpp_ingress_vlan_editing_en": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Maps Header type to ive enable",
    "fields": [
      [
        "ingress_vlan_editing_en_bmp",
        0,
        16
      ]
    ]
  },
  "txpp_ingress_vlan_editing_new_npu_header_type_r": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "Type of an NPU header the logic subtitute after performing IVE. After a SOP word with IVE command finishes the vlan editing, the IVE logic changes it's type to NPU header without IVE type so in case the packet goes through another TxPP (in linecard mode for example) than it won't be edited a second time.",
    "fields": [
      [
        "ingress_vlan_editing_new_npu_header_type",
        0,
        4
      ]
    ]
  },
  "txpp_ive_fwd_data_has_ive": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Translates forward type (4 bit) to IVE en (1 bit). Relevant only for NPU headers with IVE.",
    "fields": [
      [
        "ive_fwd_data_has_ive_r",
        0,
        16
      ]
    ]
  },
  "txpp_vlan_editing_push2_cmd_value": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "Reserved",
    "fields": [
      [
        "vlan_editing_push2_cmd_value_r",
        0,
        4
      ]
    ]
  },
  "txpp_post_ene_ipv4_delta_offset_correction": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Correction to the ipv4 delta value coming from the ENE. The ENE may provide a delta to the beginning of an IPv4 header encapsulated in the SOP word. This field allows to add correction of the offset if the encasulation macro add data beyond the IPv4.",
    "fields": [
      [
        "post_ene_ipv4_delta_offset_correction_r",
        0,
        8
      ]
    ]
  },
  "txpp_ctm_egr_logical_db_result_mapping": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Maps the 3 LSBs of the Central TCAM access key, to which DB responses are expected",
    "fields": [
      [
        "ctm_egr_logical_db_result_mapping_r",
        0,
        8
      ]
    ]
  },
  "txpp_encdb_l3_dlp0_logical_db_result_mapping": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "Maps the 2 LSBs of the L3 DLP0 access key, to which DB responses are expected",
    "fields": [
      [
        "encdb_l3_dlp0_logical_db_result_mapping_r",
        0,
        4
      ]
    ]
  },
  "txpp_encdb_l3_dlp1_logical_db_result_mapping": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "Maps the 2 LSBs of the L3 DLP0 access key, to which DB responses are expected",
    "fields": [
      [
        "encdb_l3_dlp1_logical_db_result_mapping_r",
        0,
        4
      ]
    ]
  },
  "txpp_encdb_large_enc_em_logical_db_result_mapping": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Maps the 3 LSBs of the Large Enc access key, to which DB responses are expected",
    "fields": [
      [
        "encdb_large_enc_em_logical_db_result_mapping_r",
        0,
        8
      ]
    ]
  },
  "txpp_encdb_small_enc_em_logical_db_result_mapping": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Maps the 3 LSBs of the Small Enc access key, to which DB responses are expected",
    "fields": [
      [
        "encdb_small_enc_em_logical_db_result_mapping_r",
        0,
        8
      ]
    ]
  },
  "txpp_external_memory_prot_bypass": {
    "type": "register",
    "block": "txpp",
    "width": 2,
    "desc": "Reserved",
    "fields": [
      [
        "external_cif_prot_gen_bypass",
        0,
        1
      ],
      [
        "external_cif_prot_fix_bypass",
        1,
        1
      ]
    ]
  },
  "txpp_stamp_cud_on_eve": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Enables stamping the tx CUD on the EVE position. The stamping is done prior to the packet entering the NPE. This allows the NPE to use the information and afterwards issue an EVE command.",
    "fields": [
      [
        "stamp_cud_on_eve_r",
        0,
        1
      ]
    ]
  },
  "txpp_eve_stage_en_signals": {
    "type": "register",
    "block": "txpp",
    "width": 17,
    "desc": "Enable signals for the EVE signals",
    "fields": [
      [
        "eve_en_r",
        0,
        1
      ],
      [
        "eve_stage_fwd_type_to_ipv4_cs_en_bmp",
        1,
        16
      ]
    ]
  },
  "txpp_vlan_editing_cfg_mode": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "Reserved",
    "fields": [
      [
        "ingress_vlan_editing_cfg_mode_r",
        0,
        2
      ],
      [
        "egress_vlan_editing_cfg_mode_r",
        2,
        2
      ]
    ]
  },
  "txpp_egress_vlan_editing_pkt_filter": {
    "type": "register",
    "block": "txpp",
    "width": 82,
    "desc": "Packet format filter related register",
    "fields": [
      [
        "eve_pkt_filter_outer_tag_filter_en",
        0,
        1
      ],
      [
        "eve_pkt_filter_inner_tag_filter_en",
        1,
        1
      ],
      [
        "eve_pkt_filter_outer_tag_cmd_offset",
        2,
        8
      ],
      [
        "eve_pkt_filter_inner_tag_cmd_offset",
        10,
        8
      ],
      [
        "eve_pkt_filter_tpid0",
        18,
        16
      ],
      [
        "eve_pkt_filter_tpid1",
        34,
        16
      ],
      [
        "eve_pkt_filter_tpid2",
        50,
        16
      ],
      [
        "eve_pkt_filter_tpid3",
        66,
        16
      ]
    ]
  },
  "txpp_eve_drop_vlan_eth_type_reg": {
    "type": "register",
    "block": "txpp",
    "width": 17,
    "desc": "EVE Drop registers. The logic checks the vality of the op code against the number of VLAN tags in the packet. The logic identifies a ethernet type as a TPID if it matches one of the values in this register",
    "fields": [
      [
        "eve_drop_vlan_eth_type_valid",
        0,
        1
      ],
      [
        "eve_drop_vlan_eth_type_value",
        1,
        16
      ]
    ]
  },
  "txpp_eve_drop_interrupt_drop_mapping": {
    "type": "register",
    "block": "txpp",
    "width": 128,
    "desc": "EVE Drop registers. Maps {op code (4), Vlan1 exists, Vlan2 Exists} to interrupt and drop packet indications.",
    "fields": [
      [
        "eve_drop_interrupt_bmp",
        0,
        64
      ],
      [
        "eve_drop_drop_bmp",
        64,
        64
      ]
    ]
  },
  "txpp_light_fi_stages_cfg": {
    "type": "register",
    "block": "txpp",
    "width": 21,
    "desc": "lightFI stage configuration register. For stages 4-7 only LightFiUpdateHeaderType is relevant",
    "fields": [
      [
        "light_fi_next_protocol_or_type_offset",
        0,
        6
      ],
      [
        "light_fi_next_protocol_or_type_width",
        6,
        3
      ],
      [
        "light_fi_size_offset",
        9,
        6
      ],
      [
        "light_fi_size_width",
        15,
        4
      ],
      [
        "light_fi_update_header_type",
        19,
        1
      ],
      [
        "light_fi_update_is_protocol_layer",
        20,
        1
      ]
    ]
  },
  "txpp_ingress_vlan_editing_tpid_mapping": {
    "type": "register",
    "block": "txpp",
    "width": 128,
    "desc": "Mapping from TPID profile (2 bits) to TPID (16 bits) for vlan editing",
    "fields": [
      [
        "ive_new_tpid1",
        0,
        64
      ],
      [
        "ive_new_tpid2",
        64,
        64
      ]
    ]
  },
  "txpp_tcam_comp_ldb_to_profile": {
    "type": "register",
    "block": "txpp",
    "width": 4,
    "desc": "Working mode of the slice",
    "fields": [
      [
        "compression_valid",
        0,
        1
      ],
      [
        "compression_profile",
        1,
        3
      ]
    ]
  },
  "txpp_tcam_range_compression_profile": {
    "type": "register",
    "block": "txpp",
    "width": 18,
    "desc": "Working mode of the slice",
    "fields": [
      [
        "src_offset",
        0,
        6
      ],
      [
        "src_size",
        6,
        4
      ],
      [
        "range_set",
        10,
        2
      ],
      [
        "dst_offset",
        12,
        6
      ]
    ]
  },
  "txpp_tcam_range_compression_ranges": {
    "type": "register",
    "block": "txpp",
    "width": 32,
    "desc": "Working mode of the slice",
    "fields": [
      [
        "range_high_limits",
        0,
        16
      ],
      [
        "range_low_limits",
        16,
        16
      ]
    ]
  },
  "txpp_tod_gen_regs": {
    "type": "register",
    "block": "txpp",
    "width": 48,
    "desc": "Tod genaration related register. Tod value may be loaded from outside the TxPP. The loading process is that the new tod value is first written to TodGenNewLoadedPacificTod and then a load signal is sent directly to the tod logic. The new TOD takes effect after the amount of cycles defined in TodGenLoadCmdDelay.",
    "fields": [
      [
        "tod_gen_new_loaded_pacific_tod",
        0,
        32
      ],
      [
        "tod_gen_load_cmd_delay",
        32,
        16
      ]
    ]
  },
  "txpp_tod_delay_measurement_threshold": {
    "type": "register",
    "block": "txpp",
    "width": 176,
    "desc": "Delay threshold for ECN marking. A threshold value (22 bits) per Traffic class (8 entries)",
    "fields": [
      [
        "tod_delay_measurement_threshold_r",
        0,
        176
      ]
    ]
  },
  "txpp_tod_npu_header_ssp_offset_r": {
    "type": "register",
    "block": "txpp",
    "width": 7,
    "desc": "Position of the Source System Port in the NPU header",
    "fields": [
      [
        "tod_npu_header_ssp_offset",
        0,
        7
      ]
    ]
  },
  "txpp_tod_stats_top_delay_values": {
    "type": "register",
    "block": "txpp",
    "width": 288,
    "desc": "Keeps the Top 8 delays experienced. For each value the SSP, IFG, PIF, TC and Cong level is kept",
    "fields": [
      [
        "tod_stats_top_delay_valid_vec",
        0,
        8
      ],
      [
        "tod_stats_top_delay_value_vec",
        8,
        72
      ],
      [
        "tod_stats_top_delay_payload_vec",
        80,
        208
      ]
    ]
  },
  "txpp_tod_stats_top_cong_level_values": {
    "type": "register",
    "block": "txpp",
    "width": 288,
    "desc": "Keeps the Top 8 congestion levels experienced. For each value the SSP, IFG, PIF, TC and Cong level is kept",
    "fields": [
      [
        "tod_stats_top_cong_level_valid_vec",
        0,
        8
      ],
      [
        "tod_stats_top_cong_level_value_vec",
        8,
        32
      ],
      [
        "tod_stats_top_cong_level_payload_vec",
        40,
        248
      ]
    ]
  },
  "txpp_cong_on_if_delay_above_th": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "ECN marking cause cong on marking",
    "fields": [
      [
        "cong_on_if_delay_above_th_r",
        0,
        1
      ]
    ]
  },
  "txpp_ptp_constant_time_reg": {
    "type": "register",
    "block": "txpp",
    "width": 65,
    "desc": "Constant values to be pushed on PTP protocol fields.",
    "fields": [
      [
        "ptp_constant_time_enable",
        0,
        1
      ],
      [
        "ptp_constant_time_tod",
        1,
        32
      ],
      [
        "ptp_constant_time_device_time",
        33,
        32
      ]
    ]
  },
  "txpp_ptp_header_offset_reg": {
    "type": "register",
    "block": "txpp",
    "width": 7,
    "desc": "Offset to PTP Header in the SOP word for record command. Byte resolution",
    "fields": [
      [
        "ptp_header_offset",
        0,
        7
      ]
    ]
  },
  "txpp_ptp_record_ifg0_pif_fifo_status": {
    "type": "register",
    "block": "txpp",
    "width": 77,
    "desc": "Holds status (First Entry, Entry Count) for each PIF fifo. Reading the status of a PIF fifo pops the top entry. ",
    "fields": [
      [
        "ptp_record_ifg0_pif_fifo_first_entry",
        0,
        73
      ],
      [
        "ptp_record_ifg0_pif_fifo_entry_count",
        73,
        4
      ]
    ]
  },
  "txpp_ptp_record_ifg0_pif_fifo_reset_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Signals the reseting of a PIF FIFO. Writing 1'b1 to the register resets the FIFO.",
    "fields": [
      [
        "ptp_record_ifg0_pif_fifo_reset",
        0,
        1
      ]
    ]
  },
  "txpp_ptp_record_ifg0_pif_fifo_overflow_counter_reg": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "reserved",
    "fields": [
      [
        "ptp_record_ifg0_pif_fifo_overflow_counter",
        0,
        10
      ]
    ]
  },
  "txpp_ptp_record_ifg1_pif_fifo_status": {
    "type": "register",
    "block": "txpp",
    "width": 77,
    "desc": "Holds status (First Entry, Entry Count) for each PIF fifo. Reading the status of a PIF fifo pops the top entry. ",
    "fields": [
      [
        "ptp_record_ifg1_pif_fifo_first_entry",
        0,
        73
      ],
      [
        "ptp_record_ifg1_pif_fifo_entry_count",
        73,
        4
      ]
    ]
  },
  "txpp_ptp_record_ifg1_pif_fifo_reset_reg": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "Signals the reseting of a PIF FIFO. Writing 1'b1 to the register resets the FIFO.",
    "fields": [
      [
        "ptp_record_ifg1_pif_fifo_reset",
        0,
        1
      ]
    ]
  },
  "txpp_ptp_record_ifg1_pif_fifo_overflow_counter_reg": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "Counting the number of attempts to write into the PIF Fifo when it was full ",
    "fields": [
      [
        "ptp_record_ifg1_pif_fifo_overflow_counter",
        0,
        10
      ]
    ]
  },
  "txpp_time_stamp_cmd_translation": {
    "type": "register",
    "block": "txpp",
    "width": 144,
    "desc": "Translates from time stamp command (4 bits) to logic controls (9 bits). Each control entry is built as follows: {operation(4), UDP-offset-select(1), update-UDP-CS(1), reset-UDP-CS(1), Ifg TS cmd(2)}",
    "fields": [
      [
        "time_stamp_cmd_translation_bmp",
        0,
        144
      ]
    ]
  },
  "txpp_counter_stamp_enable": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Translates Loss measurement command (4 bits) to Packet counter stamping Enable (1 bit). Uses only Rx LM counters.",
    "fields": [
      [
        "counter_stamp_enable_bmp",
        0,
        16
      ]
    ]
  },
  "txpp_counter_stamp_width": {
    "type": "register",
    "block": "txpp",
    "width": 16,
    "desc": "Translates Loss measurement command (4 bits) to stamping width (1 bit). Uses for RX and Tx LM counters.",
    "fields": [
      [
        "counter_stamp_width_bmp",
        0,
        16
      ]
    ]
  },
  "txpp_dbc_threshold_free_entries_thershold": {
    "type": "register",
    "block": "txpp",
    "width": 57,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "encdb_large_enc_em_container_free_entries_threshold",
        0,
        6
      ],
      [
        "encdb_small_enc_em_container_free_entries_threshold",
        6,
        6
      ],
      [
        "encdb_dip_index_container_free_entries_threshold",
        12,
        6
      ],
      [
        "encdb_l3_dlp0_container_free_entries_threshold",
        18,
        5
      ],
      [
        "encdb_l3_dlp1_container_free_entries_threshold",
        23,
        5
      ],
      [
        "encdb_direct0_nh_container_free_entries_threshold",
        28,
        6
      ],
      [
        "encdb_direct1_adj_container_free_entries_threshold",
        34,
        5
      ],
      [
        "encdb_ctm_egr0_container_free_entries_threshold",
        39,
        6
      ],
      [
        "encdb_ctm_egr1_container_free_entries_threshold",
        45,
        6
      ],
      [
        "encdb_vlan_membership_db_container_free_entries_threshold",
        51,
        6
      ]
    ]
  },
  "txpp_dbc_activate_priority_free_entries_thershold": {
    "type": "register",
    "block": "txpp",
    "width": 57,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "encdb_large_enc_em_activate_priority_free_entries_threshold",
        0,
        6
      ],
      [
        "encdb_small_enc_em_activate_priority_free_entries_threshold",
        6,
        6
      ],
      [
        "encdb_dip_index_activate_priority_free_entries_threshold",
        12,
        6
      ],
      [
        "encdb_l3_dlp0_activate_priority_free_entries_threshold",
        18,
        5
      ],
      [
        "encdb_l3_dlp1_activate_priority_free_entries_threshold",
        23,
        5
      ],
      [
        "encdb_direct0_nh_activate_priority_free_entries_threshold",
        28,
        6
      ],
      [
        "encdb_direct1_adj_activate_priority_free_entries_threshold",
        34,
        5
      ],
      [
        "ctm_egr0_activate_priority_free_entries_threshold",
        39,
        6
      ],
      [
        "ctm_egr1_activate_priority_free_entries_threshold",
        45,
        6
      ],
      [
        "vlan_membership_db_activate_priority_free_entries_threshold",
        51,
        6
      ]
    ]
  },
  "txpp_dbc_deactivate_priority_free_entries_thershold": {
    "type": "register",
    "block": "txpp",
    "width": 57,
    "desc": "The number of remaining free entries in the DB result container, before the lookup access rate of relevant DBs is reduced to 1 every 2 clocks",
    "fields": [
      [
        "encdb_large_enc_em_deactivate_priority_free_entries_threshold",
        0,
        6
      ],
      [
        "encdb_small_enc_em_deactivate_priority_free_entries_threshold",
        6,
        6
      ],
      [
        "encdb_dip_index_deactivate_priority_free_entries_threshold",
        12,
        6
      ],
      [
        "encdb_l3_dlp0_deactivate_priority_free_entries_threshold",
        18,
        5
      ],
      [
        "encdb_l3_dlp1_deactivate_priority_free_entries_threshold",
        23,
        5
      ],
      [
        "encdb_direct0_nh_deactivate_priority_free_entries_threshold",
        28,
        6
      ],
      [
        "encdb_direct1_adj_deactivate_priority_free_entries_threshold",
        34,
        5
      ],
      [
        "ctm_egr0_deactivate_priority_free_entries_threshold",
        39,
        6
      ],
      [
        "ctm_egr1_deactivate_priority_free_entries_threshold",
        45,
        6
      ],
      [
        "vlan_membership_db_deactivate_priority_free_entries_threshold",
        51,
        6
      ]
    ]
  },
  "txpp_dbc_rate_limit_activated": {
    "type": "register",
    "block": "txpp",
    "width": 10,
    "desc": "indicates limiting of sending rate to the DBs",
    "fields": [
      [
        "encdb_large_enc_em_db_container_rate_limit_activated",
        0,
        1
      ],
      [
        "encdb_small_enc_em_db_container_rate_limit_activated",
        1,
        1
      ],
      [
        "encdb_dip_index_db_container_rate_limit_activated",
        2,
        1
      ],
      [
        "encdb_l3_dlp0_db_container_rate_limit_activated",
        3,
        1
      ],
      [
        "encdb_l3_dlp1_db_container_rate_limit_activated",
        4,
        1
      ],
      [
        "encdb_direct0_nh_db_container_rate_limit_activated",
        5,
        1
      ],
      [
        "encdb_direct1_adj_db_container_rate_limit_activated",
        6,
        1
      ],
      [
        "ctm_egr0_db_container_rate_limit_activated",
        7,
        1
      ],
      [
        "ctm_egr1_db_container_rate_limit_activated",
        8,
        1
      ],
      [
        "vlan_membership_db_db_container_rate_limit_activated",
        9,
        1
      ]
    ]
  },
  "txpp_dbc_rate_limiter_period": {
    "type": "register",
    "block": "txpp",
    "width": 54,
    "desc": "indicates limiting of sending rate to the DBs",
    "fields": [
      [
        "encdb_large_enc_em_rate_limiter_period",
        0,
        6
      ],
      [
        "encdb_small_enc_em_rate_limiter_period",
        6,
        6
      ],
      [
        "encdb_dip_index_rate_limiter_period",
        12,
        6
      ],
      [
        "encdb_l3_dlp0_rate_limiter_period",
        18,
        6
      ],
      [
        "encdb_l3_dlp1_rate_limiter_period",
        24,
        6
      ],
      [
        "encdb_direct0_nh_rate_limiter_period",
        30,
        6
      ],
      [
        "encdb_direct1_adj_rate_limiter_period",
        36,
        6
      ],
      [
        "ctm_egr_rate_limiter_period",
        42,
        6
      ],
      [
        "vlan_membership_db_rate_limiter_period",
        48,
        6
      ]
    ]
  },
  "txpp_dbc_rate_free_entries_min_wm": {
    "type": "register",
    "block": "txpp",
    "width": 57,
    "desc": "Debug Feature - Min watermark for DB containers",
    "fields": [
      [
        "encdb_large_enc_em_db_container_free_entries_min_wm",
        0,
        6
      ],
      [
        "encdb_small_enc_em_db_container_free_entries_min_wm",
        6,
        6
      ],
      [
        "encdb_dip_index_db_container_free_entries_min_wm",
        12,
        6
      ],
      [
        "encdb_l3_dlp0_db_container_free_entries_min_wm",
        18,
        5
      ],
      [
        "encdb_l3_dlp1_db_container_free_entries_min_wm",
        23,
        5
      ],
      [
        "encdb_direct0_nh_db_container_free_entries_min_wm",
        28,
        6
      ],
      [
        "encdb_direct1_adj_db_container_free_entries_min_wm",
        34,
        5
      ],
      [
        "ctm_egr0_db_container_free_entries_min_wm",
        39,
        6
      ],
      [
        "ctm_egr1_db_container_free_entries_min_wm",
        45,
        6
      ],
      [
        "vlan_membership_db_db_container_free_entries_min_wm",
        51,
        6
      ]
    ]
  },
  "txpp_tod_device_time_udp_cs_offset": {
    "type": "register",
    "block": "txpp",
    "width": 7,
    "desc": "Offset to the UDP CS from the Time stamp command in the NPU header. Value may be negative. There are two offset, the correct one is chosen using the time_stamp_cmd_translation_bmp translation",
    "fields": [
      [
        "tod_device_time_udp_cs_offset_r",
        0,
        7
      ]
    ]
  },
  "txpp_unpacking_en_size": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "Fabric word unpacker configuration registers.",
    "fields": [
      [
        "unpacking_en",
        0,
        1
      ],
      [
        "unpacking_size_off",
        1,
        7
      ]
    ]
  },
  "txpp_logical_port_profile_mapping_per_bank_reg": {
    "type": "register",
    "block": "txpp",
    "width": 42,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "logical_port_profile_mapping_active_banks",
        0,
        1
      ],
      [
        "logical_port_profile_mapping_hash_key",
        1,
        40
      ],
      [
        "logical_port_profile_mapping_use_primitive_crc",
        41,
        1
      ]
    ]
  },
  "txpp_logical_port_profile_mapping_per_em_reg": {
    "type": "register",
    "block": "txpp",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "logical_port_profile_mapping_key_width",
        0,
        16
      ],
      [
        "logical_port_profile_mapping_auto_bubble_req",
        16,
        1
      ],
      [
        "logical_port_profile_mapping_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "txpp_logical_port_profile_mapping_cam_wm_max_reg": {
    "type": "register",
    "block": "txpp",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "logical_port_profile_mapping_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "txpp_logical_port_profile_mapping_access_register": {
    "type": "register",
    "block": "txpp",
    "width": 65,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "logical_port_profile_mapping_access_reg",
        0,
        65
      ]
    ]
  },
  "txpp_logical_port_profile_mapping_response_register": {
    "type": "register",
    "block": "txpp",
    "width": 65,
    "desc": "EM indirect access data",
    "fields": [
      [
        "logical_port_profile_mapping_response_valid",
        0,
        1
      ],
      [
        "logical_port_profile_mapping_response_reg",
        1,
        64
      ]
    ]
  },
  "txpp_em_response_interrupt": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "EM indirect access data is valid",
    "fields": [
      [
        "logical_port_profile_mapping_resp",
        0,
        1
      ]
    ]
  },
  "txpp_em_response_interrupt_mask": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "This register masks EmResponseInterrupt interrupt register",
    "fields": [
      [
        "logical_port_profile_mapping_resp_mask",
        0,
        1
      ]
    ]
  },
  "txpp_em_response_interrupt_test": {
    "type": "register",
    "block": "txpp",
    "width": 1,
    "desc": "This register tests EmResponseInterrupt interrupt register",
    "fields": [
      [
        "logical_port_profile_mapping_resp_test",
        0,
        1
      ]
    ]
  },
  "txpp_tod_tc_delay_ifg0_histogram_cfg": {
    "type": "register",
    "block": "txpp",
    "width": 168,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "tod_tc_delay_ifg0_histogram_th0",
        0,
        24
      ],
      [
        "tod_tc_delay_ifg0_histogram_th1",
        24,
        24
      ],
      [
        "tod_tc_delay_ifg0_histogram_th2",
        48,
        24
      ],
      [
        "tod_tc_delay_ifg0_histogram_th3",
        72,
        24
      ],
      [
        "tod_tc_delay_ifg0_histogram_th4",
        96,
        24
      ],
      [
        "tod_tc_delay_ifg0_histogram_th5",
        120,
        24
      ],
      [
        "tod_tc_delay_ifg0_histogram_th6",
        144,
        24
      ]
    ]
  },
  "txpp_tod_tc_delay_ifg0_histogram_status": {
    "type": "register",
    "block": "txpp",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "tod_tc_delay_ifg0_histogram_value0",
        0,
        32
      ],
      [
        "tod_tc_delay_ifg0_histogram_overflow0",
        32,
        1
      ],
      [
        "tod_tc_delay_ifg0_histogram_value1",
        33,
        32
      ],
      [
        "tod_tc_delay_ifg0_histogram_overflow1",
        65,
        1
      ],
      [
        "tod_tc_delay_ifg0_histogram_value2",
        66,
        32
      ],
      [
        "tod_tc_delay_ifg0_histogram_overflow2",
        98,
        1
      ],
      [
        "tod_tc_delay_ifg0_histogram_value3",
        99,
        32
      ],
      [
        "tod_tc_delay_ifg0_histogram_overflow3",
        131,
        1
      ],
      [
        "tod_tc_delay_ifg0_histogram_value4",
        132,
        32
      ],
      [
        "tod_tc_delay_ifg0_histogram_overflow4",
        164,
        1
      ],
      [
        "tod_tc_delay_ifg0_histogram_value5",
        165,
        32
      ],
      [
        "tod_tc_delay_ifg0_histogram_overflow5",
        197,
        1
      ],
      [
        "tod_tc_delay_ifg0_histogram_value6",
        198,
        32
      ],
      [
        "tod_tc_delay_ifg0_histogram_overflow6",
        230,
        1
      ],
      [
        "tod_tc_delay_ifg0_histogram_value7",
        231,
        32
      ],
      [
        "tod_tc_delay_ifg0_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "txpp_tod_tc_delay_ifg0_histogram_max_wmk_reg": {
    "type": "register",
    "block": "txpp",
    "width": 56,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "tod_tc_delay_ifg0_histogram_max_wmk",
        0,
        24
      ],
      [
        "tod_tc_delay_ifg0_histogram_max_wmk_time",
        24,
        32
      ]
    ]
  },
  "txpp_tod_tc_delay_ifg1_histogram_cfg": {
    "type": "register",
    "block": "txpp",
    "width": 168,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "tod_tc_delay_ifg1_histogram_th0",
        0,
        24
      ],
      [
        "tod_tc_delay_ifg1_histogram_th1",
        24,
        24
      ],
      [
        "tod_tc_delay_ifg1_histogram_th2",
        48,
        24
      ],
      [
        "tod_tc_delay_ifg1_histogram_th3",
        72,
        24
      ],
      [
        "tod_tc_delay_ifg1_histogram_th4",
        96,
        24
      ],
      [
        "tod_tc_delay_ifg1_histogram_th5",
        120,
        24
      ],
      [
        "tod_tc_delay_ifg1_histogram_th6",
        144,
        24
      ]
    ]
  },
  "txpp_tod_tc_delay_ifg1_histogram_status": {
    "type": "register",
    "block": "txpp",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "tod_tc_delay_ifg1_histogram_value0",
        0,
        32
      ],
      [
        "tod_tc_delay_ifg1_histogram_overflow0",
        32,
        1
      ],
      [
        "tod_tc_delay_ifg1_histogram_value1",
        33,
        32
      ],
      [
        "tod_tc_delay_ifg1_histogram_overflow1",
        65,
        1
      ],
      [
        "tod_tc_delay_ifg1_histogram_value2",
        66,
        32
      ],
      [
        "tod_tc_delay_ifg1_histogram_overflow2",
        98,
        1
      ],
      [
        "tod_tc_delay_ifg1_histogram_value3",
        99,
        32
      ],
      [
        "tod_tc_delay_ifg1_histogram_overflow3",
        131,
        1
      ],
      [
        "tod_tc_delay_ifg1_histogram_value4",
        132,
        32
      ],
      [
        "tod_tc_delay_ifg1_histogram_overflow4",
        164,
        1
      ],
      [
        "tod_tc_delay_ifg1_histogram_value5",
        165,
        32
      ],
      [
        "tod_tc_delay_ifg1_histogram_overflow5",
        197,
        1
      ],
      [
        "tod_tc_delay_ifg1_histogram_value6",
        198,
        32
      ],
      [
        "tod_tc_delay_ifg1_histogram_overflow6",
        230,
        1
      ],
      [
        "tod_tc_delay_ifg1_histogram_value7",
        231,
        32
      ],
      [
        "tod_tc_delay_ifg1_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "txpp_tod_tc_delay_ifg1_histogram_max_wmk_reg": {
    "type": "register",
    "block": "txpp",
    "width": 56,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "tod_tc_delay_ifg1_histogram_max_wmk",
        0,
        24
      ],
      [
        "tod_tc_delay_ifg1_histogram_max_wmk_time",
        24,
        32
      ]
    ]
  },
  "txpp_ifg0_sop_word_latency_histogram_cfg": {
    "type": "register",
    "block": "txpp",
    "width": 105,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "ifg0_sop_word_latency_histogram_th0",
        0,
        15
      ],
      [
        "ifg0_sop_word_latency_histogram_th1",
        15,
        15
      ],
      [
        "ifg0_sop_word_latency_histogram_th2",
        30,
        15
      ],
      [
        "ifg0_sop_word_latency_histogram_th3",
        45,
        15
      ],
      [
        "ifg0_sop_word_latency_histogram_th4",
        60,
        15
      ],
      [
        "ifg0_sop_word_latency_histogram_th5",
        75,
        15
      ],
      [
        "ifg0_sop_word_latency_histogram_th6",
        90,
        15
      ]
    ]
  },
  "txpp_ifg0_sop_word_latency_histogram_status": {
    "type": "register",
    "block": "txpp",
    "width": 392,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "ifg0_sop_word_latency_histogram_value0",
        0,
        48
      ],
      [
        "ifg0_sop_word_latency_histogram_overflow0",
        48,
        1
      ],
      [
        "ifg0_sop_word_latency_histogram_value1",
        49,
        48
      ],
      [
        "ifg0_sop_word_latency_histogram_overflow1",
        97,
        1
      ],
      [
        "ifg0_sop_word_latency_histogram_value2",
        98,
        48
      ],
      [
        "ifg0_sop_word_latency_histogram_overflow2",
        146,
        1
      ],
      [
        "ifg0_sop_word_latency_histogram_value3",
        147,
        48
      ],
      [
        "ifg0_sop_word_latency_histogram_overflow3",
        195,
        1
      ],
      [
        "ifg0_sop_word_latency_histogram_value4",
        196,
        48
      ],
      [
        "ifg0_sop_word_latency_histogram_overflow4",
        244,
        1
      ],
      [
        "ifg0_sop_word_latency_histogram_value5",
        245,
        48
      ],
      [
        "ifg0_sop_word_latency_histogram_overflow5",
        293,
        1
      ],
      [
        "ifg0_sop_word_latency_histogram_value6",
        294,
        48
      ],
      [
        "ifg0_sop_word_latency_histogram_overflow6",
        342,
        1
      ],
      [
        "ifg0_sop_word_latency_histogram_value7",
        343,
        48
      ],
      [
        "ifg0_sop_word_latency_histogram_overflow7",
        391,
        1
      ]
    ]
  },
  "txpp_ifg0_sop_word_latency_histogram_max_wmk_reg": {
    "type": "register",
    "block": "txpp",
    "width": 47,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "ifg0_sop_word_latency_histogram_max_wmk",
        0,
        15
      ],
      [
        "ifg0_sop_word_latency_histogram_max_wmk_time",
        15,
        32
      ]
    ]
  },
  "txpp_ifg1_sop_word_latency_histogram_cfg": {
    "type": "register",
    "block": "txpp",
    "width": 105,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "ifg1_sop_word_latency_histogram_th0",
        0,
        15
      ],
      [
        "ifg1_sop_word_latency_histogram_th1",
        15,
        15
      ],
      [
        "ifg1_sop_word_latency_histogram_th2",
        30,
        15
      ],
      [
        "ifg1_sop_word_latency_histogram_th3",
        45,
        15
      ],
      [
        "ifg1_sop_word_latency_histogram_th4",
        60,
        15
      ],
      [
        "ifg1_sop_word_latency_histogram_th5",
        75,
        15
      ],
      [
        "ifg1_sop_word_latency_histogram_th6",
        90,
        15
      ]
    ]
  },
  "txpp_ifg1_sop_word_latency_histogram_status": {
    "type": "register",
    "block": "txpp",
    "width": 392,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "ifg1_sop_word_latency_histogram_value0",
        0,
        48
      ],
      [
        "ifg1_sop_word_latency_histogram_overflow0",
        48,
        1
      ],
      [
        "ifg1_sop_word_latency_histogram_value1",
        49,
        48
      ],
      [
        "ifg1_sop_word_latency_histogram_overflow1",
        97,
        1
      ],
      [
        "ifg1_sop_word_latency_histogram_value2",
        98,
        48
      ],
      [
        "ifg1_sop_word_latency_histogram_overflow2",
        146,
        1
      ],
      [
        "ifg1_sop_word_latency_histogram_value3",
        147,
        48
      ],
      [
        "ifg1_sop_word_latency_histogram_overflow3",
        195,
        1
      ],
      [
        "ifg1_sop_word_latency_histogram_value4",
        196,
        48
      ],
      [
        "ifg1_sop_word_latency_histogram_overflow4",
        244,
        1
      ],
      [
        "ifg1_sop_word_latency_histogram_value5",
        245,
        48
      ],
      [
        "ifg1_sop_word_latency_histogram_overflow5",
        293,
        1
      ],
      [
        "ifg1_sop_word_latency_histogram_value6",
        294,
        48
      ],
      [
        "ifg1_sop_word_latency_histogram_overflow6",
        342,
        1
      ],
      [
        "ifg1_sop_word_latency_histogram_value7",
        343,
        48
      ],
      [
        "ifg1_sop_word_latency_histogram_overflow7",
        391,
        1
      ]
    ]
  },
  "txpp_ifg1_sop_word_latency_histogram_max_wmk_reg": {
    "type": "register",
    "block": "txpp",
    "width": 47,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "ifg1_sop_word_latency_histogram_max_wmk",
        0,
        15
      ],
      [
        "ifg1_sop_word_latency_histogram_max_wmk_time",
        15,
        32
      ]
    ]
  },
  "txpp_tod_port_max_delay_and_cong": {
    "type": "memory",
    "block": "txpp",
    "width": 52,
    "desc": "Memory that holds the max delay and max congestion level per IFG per PIF per TC. When a max delay is being registered, the SSP and the congestion level of the packet are registered as well. When a max congestion level is being registered, the SSP and the delay of the packet are registered as well. Addressing the memory: (ifg num*208)+(pif*8)+TC",
    "fields": [
      [
        "max_delay_quantized_delay",
        0,
        9
      ],
      [
        "max_delay_ssp",
        9,
        13
      ],
      [
        "max_delay_congestion_level",
        22,
        4
      ],
      [
        "max_cong_congestion_level",
        26,
        4
      ],
      [
        "max_cong_ssp",
        30,
        13
      ],
      [
        "max_cong_quantized_delay",
        43,
        9
      ]
    ]
  },
  "txpp_ingress_vlan_editing_control": {
    "type": "memory",
    "block": "txpp",
    "width": 15,
    "desc": "Translates Vlan editing command to logic controls",
    "fields": [
      [
        "ive_vid1_select",
        0,
        2
      ],
      [
        "ive_vid2_select",
        2,
        2
      ],
      [
        "ive_pcp_dei1_select",
        4,
        2
      ],
      [
        "ive_pcp_dei2_select",
        6,
        2
      ],
      [
        "ive_tpid1_select",
        8,
        2
      ],
      [
        "ive_tpid2_select",
        10,
        2
      ],
      [
        "ive_delta",
        12,
        3
      ]
    ]
  },
  "txpp_delay_measurement_cmd": {
    "type": "memory",
    "block": "txpp",
    "width": 6,
    "desc": "Translates pif and traffic class to delay measurement command. Uses for max delay measurement and delay histograms",
    "fields": [
      [
        "mapped_traffic_class",
        0,
        3
      ],
      [
        "ignore_tc_for_max_delay",
        3,
        1
      ],
      [
        "ignore_tc_for_max_congestion",
        4,
        1
      ],
      [
        "eligible_for_global_delay_measurement",
        5,
        1
      ]
    ]
  },
  "txpp_mc_copy_id_map": {
    "type": "memory",
    "block": "txpp",
    "width": 13,
    "desc": "This memory is used in CUD mapping stage, for the case where the MC copy ID is the encapsulation data. Accessing this memory is done by the 6 MSBs of the MC copy ID",
    "fields": [
      [
        "expanded_cud_msb",
        0,
        8
      ],
      [
        "encap_type",
        8,
        4
      ],
      [
        "map_cud",
        12,
        1
      ]
    ]
  },
  "txpp_encap_data_source_select": {
    "type": "memory",
    "block": "txpp",
    "width": 30,
    "desc": "This memory uses to detemine the size and position of the CUD components in the encapsulation data. All shift are made inside the encapsulation data.",
    "fields": [
      [
        "expanded_cud_size",
        0,
        5
      ],
      [
        "expanded_cud_shift",
        5,
        5
      ],
      [
        "mapped_cud_size",
        10,
        5
      ],
      [
        "mapped_cud_shift",
        15,
        5
      ],
      [
        "encap_data_size",
        20,
        5
      ],
      [
        "encap_data_shift",
        25,
        5
      ]
    ]
  },
  "txpp_light_fi_npu_base_lookup": {
    "type": "memory",
    "block": "txpp",
    "width": 38,
    "desc": "Register Lookup table for the NPU base stage in the light FI.",
    "fields": [
      [
        "npu_base_lookup_header_format",
        0,
        8
      ],
      [
        "npu_base_lookup_next_header_format",
        8,
        8
      ],
      [
        "npu_base_npe_mid_valid",
        16,
        1
      ],
      [
        "npu_base_npe_mid",
        17,
        8
      ],
      [
        "npu_base_next_fi_mid",
        25,
        3
      ],
      [
        "npu_base_is_protocol",
        28,
        1
      ],
      [
        "npu_base_next_is_protocol",
        29,
        1
      ],
      [
        "npu_base_base_size",
        30,
        7
      ],
      [
        "npu_base_use_size",
        37,
        1
      ]
    ]
  },
  "txpp_light_fi_npu_encap_lookup": {
    "type": "memory",
    "block": "txpp",
    "width": 37,
    "desc": "Register Lookup table for the NPU Encap stage in the light FI.",
    "fields": [
      [
        "npu_encap_next_stage_protocol_or_type_offset",
        0,
        6
      ],
      [
        "npu_encap_next_stage_size_offset",
        6,
        6
      ],
      [
        "npu_encap_next_stage_size_width",
        12,
        4
      ],
      [
        "npu_encap_spare",
        16,
        21
      ]
    ]
  },
  "txpp_npe_macro_selection_map": {
    "type": "memory",
    "block": "txpp",
    "width": 16,
    "desc": "Maps the forwarding and encapsulation types to offsets to a data fields in the Macro resolution input data.  The data fields are used as part of the key to tne NPE macro ID resolution TCAM ",
    "fields": [
      [
        "field_a_offset",
        0,
        8
      ],
      [
        "field_b_offset",
        8,
        8
      ]
    ]
  },
  "txpp_npe_mid_res_tcam": {
    "type": "memory",
    "block": "txpp",
    "width": 25,
    "desc": "NPE macro id res tcam. Uses for determining the first NPE macro to execute. Valid only for network mode.",
    "fields": [
      [
        "npe_mid_res_tcam_mask",
        0,
        25
      ],
      [
        "npe_mid_res_tcam_key",
        25,
        25
      ],
      [
        "npe_mid_res_tcam_delete",
        50,
        1
      ]
    ]
  },
  "txpp_npe_mid_res_tcam_mem": {
    "type": "memory",
    "block": "txpp",
    "width": 6,
    "desc": "NPE macro id res tcam associated data",
    "fields": [
      [
        "npe_mid_res_tcam_header_format",
        0,
        6
      ]
    ]
  },
  "txpp_cbr_fifos": {
    "type": "memory",
    "block": "txpp",
    "width": 1204,
    "desc": "Memory for the CBR in the incoming SMS interface",
    "fields": [
      [
        "cbr_fifos_word",
        0,
        1024
      ],
      [
        "cbr_fifos_pd",
        1024,
        168
      ],
      [
        "cbr_fifos_fd",
        1192,
        12
      ]
    ]
  },
  "txpp_light_fi_nw_lookup_table_tcam": {
    "type": "memory",
    "block": "txpp",
    "width": 21,
    "desc": "light fi nw lookup table tcam",
    "fields": [
      [
        "light_fi_nw_lookup_table_tcam_mask",
        0,
        21
      ],
      [
        "light_fi_nw_lookup_table_tcam_key",
        21,
        21
      ],
      [
        "light_fi_nw_lookup_table_tcam_delete",
        42,
        1
      ]
    ]
  },
  "txpp_light_fi_nw_lookup_table_tcam_mem": {
    "type": "memory",
    "block": "txpp",
    "width": 45,
    "desc": "light fi nw lookup table tcam associated data",
    "fields": [
      [
        "light_fi_nw_lookup_table_tcam_header_format",
        0,
        8
      ],
      [
        "light_fi_nw_lookup_table_tcam_next_header_format",
        8,
        8
      ],
      [
        "light_fi_nw_lookup_table_tcam_next_fi_mid",
        16,
        3
      ],
      [
        "light_fi_nw_lookup_table_tcam_is_protocol_layer",
        19,
        1
      ],
      [
        "light_fi_nw_lookup_table_tcam_next_is_protocol_layer",
        20,
        1
      ],
      [
        "light_fi_nw_lookup_table_tcam_base_size",
        21,
        7
      ],
      [
        "light_fi_nw_lookup_table_tcam_use_size",
        28,
        1
      ],
      [
        "light_fi_nw_lookup_table_tcam_next_stage_protocol_or_type_offset",
        29,
        6
      ],
      [
        "light_fi_nw_lookup_table_tcam_next_stage_size_offset",
        35,
        6
      ],
      [
        "light_fi_nw_lookup_table_tcam_next_stage_size_width",
        41,
        4
      ]
    ]
  },
  "txpp_fwd_qos_mapping": {
    "type": "memory",
    "block": "txpp",
    "width": 56,
    "desc": "Hold Forward Quality of Service tags",
    "fields": [
      [
        "fwd_qos_tag",
        0,
        56
      ]
    ]
  },
  "txpp_encap_qos_mapping": {
    "type": "memory",
    "block": "txpp",
    "width": 56,
    "desc": "Hold Encapsulation Quality of Service tags",
    "fields": [
      [
        "encap_qos_tag",
        0,
        56
      ]
    ]
  },
  "txpp_npu_buffer": {
    "type": "memory",
    "block": "txpp",
    "width": 1582,
    "desc": "Buffer for words waiting for reordering",
    "fields": [
      [
        "npu_buffer_word",
        0,
        1536
      ],
      [
        "npu_buffer_wd",
        1536,
        39
      ],
      [
        "npu_buffer_wd_ecc",
        1575,
        7
      ]
    ]
  },
  "txpp_mc_cud_table": {
    "type": "memory",
    "block": "txpp",
    "width": 121,
    "desc": "This table maps a CUD to an encapsulation data",
    "fields": [
      [
        "mapped_encapsulation_data",
        0,
        120
      ],
      [
        "cud_is_narrow",
        120,
        1
      ]
    ]
  },
  "txpp_logical_port_profile_dlp_offset_and_mask": {
    "type": "memory",
    "block": "txpp",
    "width": 11,
    "desc": "Maps fwd and encap header types to an offset to the DLP and mask and new value to its MSBs",
    "fields": [
      [
        "logical_port_profile_dlp_offset",
        0,
        5
      ],
      [
        "logical_port_profile_dlp_mask",
        5,
        4
      ],
      [
        "logical_port_profile_dlp_type",
        9,
        2
      ]
    ]
  },
  "txpp_pre_txpp_edit_profile_mem": {
    "type": "memory",
    "block": "txpp",
    "width": 25,
    "desc": "Maps Pre-TxPP-Edit-Profile to a Pre-TxPP-Edit-Command",
    "fields": [
      [
        "pre_txpp_edit_profile_mem_field_a_offset",
        0,
        9
      ],
      [
        "pre_txpp_edit_profile_mem_copy_dest_offset",
        9,
        8
      ],
      [
        "pre_txpp_edit_profile_mem_field_a_size",
        17,
        5
      ],
      [
        "pre_txpp_edit_profile_mem_command",
        22,
        3
      ]
    ]
  },
  "txpp_ptp_record_fifo_memory": {
    "type": "memory",
    "block": "txpp",
    "width": 73,
    "desc": "Memory used for implementing the FIFO per pifs for PTP record format. A memory per IFG. Each pif is designated with 8 consecutive entries in the memory starting in address 8*pif num ",
    "fields": [
      [
        "ptp_record_entry",
        0,
        73
      ]
    ]
  },
  "txpp_logical_port_profile_mapping_verifier": {
    "type": "memory",
    "block": "txpp",
    "width": 40,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "logical_port_profile_mapping_verifier_data",
        0,
        40
      ]
    ]
  },
  "txpp_logical_port_profile_mapping_cam": {
    "type": "memory",
    "block": "txpp",
    "width": 20,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "logical_port_profile_mapping_cam_payload",
        0,
        24
      ],
      [
        "logical_port_profile_mapping_cam_key",
        24,
        20
      ],
      [
        "logical_port_profile_mapping_cam_valid",
        44,
        1
      ]
    ]
  },
  "pdoq_empd_interrupt_register": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_summary",
        1,
        1
      ]
    ]
  },
  "pdoq_empd_mem_protect_interrupt": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pdoq_empd_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pdoq_empd_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 9,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "fbm_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pdm_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "emdb_verifier0_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "emdb_verifier1_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "emdb_verifier2_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "emdb_verifier3_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "emdb_verifier4_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "emdb_verifier5_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "emdb_verifier6_ecc_1b_err_interrupt_mask",
        8,
        1
      ]
    ]
  },
  "pdoq_empd_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 9,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "fbm_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pdm_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "emdb_verifier0_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "emdb_verifier1_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "emdb_verifier2_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "emdb_verifier3_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "emdb_verifier4_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "emdb_verifier5_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "emdb_verifier6_ecc_2b_err_interrupt_mask",
        8,
        1
      ]
    ]
  },
  "pdoq_empd_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 9,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "fbm_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "pdm_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "emdb_verifier0_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "emdb_verifier1_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "emdb_verifier2_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "emdb_verifier3_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "emdb_verifier4_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "emdb_verifier5_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "emdb_verifier6_ecc_1b_err_initiate",
        8,
        1
      ]
    ]
  },
  "pdoq_empd_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 9,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "fbm_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "pdm_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "emdb_verifier0_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "emdb_verifier1_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "emdb_verifier2_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "emdb_verifier3_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "emdb_verifier4_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "emdb_verifier5_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "emdb_verifier6_ecc_2b_err_initiate",
        8,
        1
      ]
    ]
  },
  "pdoq_empd_mem_protect_err_status": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 9,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "fbm_err_int",
        0,
        1
      ],
      [
        "pdm_err_int",
        1,
        1
      ],
      [
        "emdb_verifier0_err_int",
        2,
        1
      ],
      [
        "emdb_verifier1_err_int",
        3,
        1
      ],
      [
        "emdb_verifier2_err_int",
        4,
        1
      ],
      [
        "emdb_verifier3_err_int",
        5,
        1
      ],
      [
        "emdb_verifier4_err_int",
        6,
        1
      ],
      [
        "emdb_verifier5_err_int",
        7,
        1
      ],
      [
        "emdb_verifier6_err_int",
        8,
        1
      ]
    ]
  },
  "pdoq_empd_selected_ser_error_info": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "pdoq_empd_ser_error_debug_configuration": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "pdoq_empd_ecc_1b_err_debug": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_empd_ecc_2b_err_debug": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_empd_tcam_scan_period_cfg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "pdoq_empd_counter_timer": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pdoq_empd_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pdoq_empd_memory_access_timeout": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "pdoq_empd_broadcast_config_reg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pdoq_empd_memory_prot_bypass": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pdoq_empd_soft_reset_configuration": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pdoq_empd_mbist_configuration": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pdoq_empd_power_down_configuration": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pdoq_empd_spare_reg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pdoq_empd_pmro_ctrl": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pdoq_empd_pmro_status": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pdoq_empd_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pdoq_empd_mirror_bus_status": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pdoq_empd_device_time_offset_cfg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pdoq_empd_general_interrupt": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 1,
    "desc": "aaa",
    "fields": [
      [
        "emdb_duplicate_entry",
        0,
        1
      ]
    ]
  },
  "pdoq_empd_general_interrupt_mask": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 1,
    "desc": "This register masks GeneralInterrupt interrupt register",
    "fields": [
      [
        "emdb_duplicate_entry_mask",
        0,
        1
      ]
    ]
  },
  "pdoq_empd_general_interrupt_test": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 1,
    "desc": "This register tests GeneralInterrupt interrupt register",
    "fields": [
      [
        "emdb_duplicate_entry_test",
        0,
        1
      ]
    ]
  },
  "pdoq_empd_internal_fifo_alm_full": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 27,
    "desc": "Fifos almost full configuration",
    "fields": [
      [
        "del_req_fifo_alm_full_cfg",
        0,
        5
      ],
      [
        "fbm_alm_empty_th",
        5,
        11
      ],
      [
        "fbm_reduce_rate_th",
        16,
        11
      ]
    ]
  },
  "pdoq_empd_fbm_configurations": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 230,
    "desc": "FBM init configurations",
    "fields": [
      [
        "fbm_init",
        0,
        1
      ],
      [
        "fbm_working_mode",
        1,
        1
      ],
      [
        "fbm_total_buffers",
        2,
        12
      ],
      [
        "fbm_not_empty_entry",
        14,
        216
      ]
    ]
  },
  "pdoq_empd_empd_debug": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 33,
    "desc": "aaa",
    "fields": [
      [
        "read_access_cnt",
        0,
        16
      ],
      [
        "write_access_cnt",
        16,
        16
      ],
      [
        "fbm_full",
        32,
        1
      ]
    ]
  },
  "pdoq_empd_fbm_debug": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 24,
    "desc": "FBM debug",
    "fields": [
      [
        "fbm_min_value",
        0,
        12
      ],
      [
        "fbm_inst_value",
        12,
        12
      ]
    ]
  },
  "pdoq_empd_write_fail_debug": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 82,
    "desc": "aaa",
    "fields": [
      [
        "last_write_fail_valid",
        0,
        1
      ],
      [
        "last_key",
        1,
        24
      ],
      [
        "last_data",
        25,
        57
      ]
    ]
  },
  "pdoq_empd_write_fail_debug_counter": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 16,
    "desc": "aaa",
    "fields": [
      [
        "write_fail_cnt",
        0,
        16
      ]
    ]
  },
  "pdoq_empd_emdb_per_bank_reg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 50,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "emdb_active_banks",
        0,
        1
      ],
      [
        "emdb_hash_key",
        1,
        48
      ],
      [
        "emdb_use_primitive_crc",
        49,
        1
      ]
    ]
  },
  "pdoq_empd_emdb_per_em_reg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "emdb_key_width",
        0,
        16
      ],
      [
        "emdb_auto_bubble_req",
        16,
        1
      ],
      [
        "emdb_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "pdoq_empd_emdb_cam_wm_max_reg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "emdb_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "pdoq_empd_emdb_bank_write_cntr_reg": {
    "type": "register",
    "block": "pdoq_empd",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "emdb_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "pdoq_empd_fbm": {
    "type": "memory",
    "block": "pdoq_empd",
    "width": 16,
    "desc": "bitmap memory for the free buffer manager",
    "fields": [
      [
        "fbm_data",
        0,
        16
      ]
    ]
  },
  "pdoq_empd_pdm": {
    "type": "memory",
    "block": "pdoq_empd",
    "width": 141,
    "desc": "payload memory for each EM",
    "fields": [
      [
        "pdm_data",
        0,
        141
      ]
    ]
  },
  "pdoq_empd_emdb_verifier": {
    "type": "memory",
    "block": "pdoq_empd",
    "width": 68,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "emdb_verifier_data",
        0,
        68
      ]
    ]
  },
  "pdoq_empd_emdb_valid": {
    "type": "memory",
    "block": "pdoq_empd",
    "width": 2,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "emdb_valid_data",
        0,
        2
      ]
    ]
  },
  "pdoq_empd_emdb_cam": {
    "type": "memory",
    "block": "pdoq_empd",
    "width": 24,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "emdb_cam_payload",
        0,
        12
      ],
      [
        "emdb_cam_key",
        12,
        24
      ],
      [
        "emdb_cam_valid",
        36,
        1
      ]
    ]
  },
  "pdoq_fdoq_interrupt_register": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_summary",
        1,
        1
      ]
    ]
  },
  "pdoq_fdoq_mem_protect_interrupt": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pdoq_fdoq_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pdoq_fdoq_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 6,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "pdif_fifo_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pdif_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "pdif_em_fail_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "fdll_req_fifo_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "fdll_del_req_fifo_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "fdll_reply_fifo_ecc_1b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "pdoq_fdoq_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 6,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "pdif_fifo_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pdif_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "pdif_em_fail_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "fdll_req_fifo_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "fdll_del_req_fifo_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "fdll_reply_fifo_ecc_2b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "pdoq_fdoq_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 6,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "pdif_fifo_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "pdif_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "pdif_em_fail_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "fdll_req_fifo_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "fdll_del_req_fifo_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "fdll_reply_fifo_ecc_1b_err_initiate",
        5,
        1
      ]
    ]
  },
  "pdoq_fdoq_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 6,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "pdif_fifo_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "pdif_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "pdif_em_fail_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "fdll_req_fifo_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "fdll_del_req_fifo_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "fdll_reply_fifo_ecc_2b_err_initiate",
        5,
        1
      ]
    ]
  },
  "pdoq_fdoq_mem_protect_err_status": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 6,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "pdif_fifo_err_int",
        0,
        1
      ],
      [
        "pdif_err_int",
        1,
        1
      ],
      [
        "pdif_em_fail_err_int",
        2,
        1
      ],
      [
        "fdll_req_fifo_err_int",
        3,
        1
      ],
      [
        "fdll_del_req_fifo_err_int",
        4,
        1
      ],
      [
        "fdll_reply_fifo_err_int",
        5,
        1
      ]
    ]
  },
  "pdoq_fdoq_selected_ser_error_info": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 13,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        11
      ],
      [
        "mem_err_type",
        11,
        2
      ]
    ]
  },
  "pdoq_fdoq_ser_error_debug_configuration": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "pdoq_fdoq_ecc_1b_err_debug": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_fdoq_ecc_2b_err_debug": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_fdoq_counter_timer": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pdoq_fdoq_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pdoq_fdoq_memory_access_timeout": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "pdoq_fdoq_broadcast_config_reg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pdoq_fdoq_memory_prot_bypass": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pdoq_fdoq_soft_reset_configuration": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pdoq_fdoq_mbist_configuration": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pdoq_fdoq_power_down_configuration": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pdoq_fdoq_spare_reg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pdoq_fdoq_pmro_ctrl": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pdoq_fdoq_pmro_status": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pdoq_fdoq_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pdoq_fdoq_mirror_bus_status": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pdoq_fdoq_device_time_offset_cfg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pdoq_fdoq_general_interrupt": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 1,
    "desc": "FDOQ interrupt register",
    "fields": [
      [
        "fdll_context_fifo_ovf",
        0,
        1
      ]
    ]
  },
  "pdoq_fdoq_general_interrupt_mask": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 1,
    "desc": "This register masks GeneralInterrupt interrupt register",
    "fields": [
      [
        "fdll_context_fifo_ovf_mask",
        0,
        1
      ]
    ]
  },
  "pdoq_fdoq_general_interrupt_test": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 1,
    "desc": "This register tests GeneralInterrupt interrupt register",
    "fields": [
      [
        "fdll_context_fifo_ovf_test",
        0,
        1
      ]
    ]
  },
  "pdoq_fdoq_fdoq_pdif_fifo_alm_full_th": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 5,
    "desc": "Internal FDOQ fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "pdif_fifo_alm_full_th",
        0,
        5
      ]
    ]
  },
  "pdoq_fdoq_fodq_total_ifg_thresholds": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 38,
    "desc": "FDOQ maintains packet and byte counters per IFG. The register sets flow control thresholds of these counters. The flow control stops relevant TxSCH.",
    "fields": [
      [
        "fdoq_total_pds_ifg_th",
        0,
        12
      ],
      [
        "fdoq_total_bytes_ifg_th",
        12,
        26
      ]
    ]
  },
  "pdoq_fdoq_fdoq_general_configuration": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 74,
    "desc": "General FDOQ configurations, see description of each field.",
    "fields": [
      [
        "unpack_pd_enable",
        0,
        6
      ],
      [
        "slice_mode",
        6,
        4
      ],
      [
        "mlp_mode",
        10,
        4
      ],
      [
        "fabric_fast_link_enable",
        14,
        6
      ],
      [
        "txpp_fc_enable",
        20,
        1
      ],
      [
        "delete_sp_disable",
        21,
        1
      ],
      [
        "fcm_rcy_map",
        22,
        52
      ]
    ]
  },
  "pdoq_fdoq_arbiter_weights": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 13,
    "desc": "Define weights of WFQ between delete and non delete at PDIF read stage",
    "fields": [
      [
        "arb_non_delete_sp_en",
        0,
        1
      ],
      [
        "arb_delete_weight",
        1,
        6
      ],
      [
        "arb_non_delete_weight",
        7,
        6
      ]
    ]
  },
  "pdoq_fdoq_ifg_credit_init": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 69,
    "desc": "Initiation of IFG Tx buffer credit counter",
    "fields": [
      [
        "ifg_credit_init_enable",
        0,
        52
      ],
      [
        "ifg_credit_init_value",
        52,
        17
      ]
    ]
  },
  "pdoq_fdoq_phantom_configuration": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 60,
    "desc": "Phantom Q configurations",
    "fields": [
      [
        "phantom_enable",
        0,
        52
      ],
      [
        "phantom_tc_bitmap",
        52,
        8
      ]
    ]
  },
  "pdoq_fdoq_partial_mirror_configuration": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 41,
    "desc": "Configurations for partial mirror copies",
    "fields": [
      [
        "partial_mirror",
        0,
        32
      ],
      [
        "partial_mirror_size",
        32,
        9
      ]
    ]
  },
  "pdoq_fdoq_sms_read_rate_limiter": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 17,
    "desc": "Limits rate of FD read transactions towards SMS",
    "fields": [
      [
        "sms_read_rate",
        0,
        11
      ],
      [
        "sms_read_rate_inc_value",
        11,
        3
      ],
      [
        "sms_read_rate_max_bucket",
        14,
        3
      ]
    ]
  },
  "pdoq_fdoq_sms_read_window_limiter": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 24,
    "desc": "Limits rate of FD read transactions towards SMS by bubbling the pipe.",
    "fields": [
      [
        "sms_read_window",
        0,
        12
      ],
      [
        "sms_read_num_of_grants",
        12,
        12
      ]
    ]
  },
  "pdoq_fdoq_sms_packet_shaper_cfg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 14,
    "desc": "Limit packet rate at the output of the FDLL request FIFO. One configuration for both SMS interfaces.",
    "fields": [
      [
        "sms_packet_shaper_rate",
        0,
        10
      ],
      [
        "sms_packet_shaper_max_tb",
        10,
        3
      ],
      [
        "sms_packet_shaper_en",
        13,
        1
      ]
    ]
  },
  "pdoq_fdoq_almost_full_configuration": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 20,
    "desc": "Internal FDOQ fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "fcm_tx_buffer_alm_full",
        0,
        6
      ],
      [
        "fdll_req_alm_full",
        6,
        4
      ],
      [
        "fdll_del_req_alm_full",
        10,
        4
      ],
      [
        "em_fail_fifo_alm_full",
        14,
        6
      ]
    ]
  },
  "pdoq_fdoq_fdoq_in_last_pd_sel_cfg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 4,
    "desc": "Last normal and write fail packet descriptors bit select configuration at FDOQ in stage",
    "fields": [
      [
        "fdoq_in_last_pd_sel",
        0,
        4
      ]
    ]
  },
  "pdoq_fdoq_fdoq_in_last_pd_data": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 32,
    "desc": "Last normal and write fail packet descriptors selected data",
    "fields": [
      [
        "fdoq_in_last_pd",
        0,
        32
      ]
    ]
  },
  "pdoq_fdoq_fdoq_out_last_pd_sel_cfg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 4,
    "desc": "Last packet and fragment descriptors bit select configuration at FDOQ to SMS interface",
    "fields": [
      [
        "fdoq_out_last_pd_sel",
        0,
        4
      ]
    ]
  },
  "pdoq_fdoq_fdoq_out_last_pd_data": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 32,
    "desc": "Last normal and write fail packet descriptors selected data",
    "fields": [
      [
        "fdoq_out_last_pd",
        0,
        32
      ]
    ]
  },
  "pdoq_fdoq_internal_debug_cfg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 12,
    "desc": "Internal FDOQ debug settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "fdll_cbt_alm_full_cfg",
        0,
        5
      ],
      [
        "sms_cbt_alm_full_cfg",
        5,
        6
      ],
      [
        "ignore_tx_credits",
        11,
        1
      ]
    ]
  },
  "pdoq_fdoq_cbt_not_ready_counter": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 96,
    "desc": "Counters of back pressure clocks of the outgoing interfaces",
    "fields": [
      [
        "fdll_cbt_not_ready_cnt",
        0,
        32
      ],
      [
        "sms0_cbt_not_ready_cnt",
        32,
        32
      ],
      [
        "sms1_cbt_not_ready_cnt",
        64,
        32
      ]
    ]
  },
  "pdoq_fdoq_internal_fifo_debug": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 29,
    "desc": "Fifos watermarks",
    "fields": [
      [
        "fdll_req_fifo_wmk0",
        0,
        7
      ],
      [
        "fdll_req_fifo_wmk1",
        7,
        7
      ],
      [
        "fdll_del_req_fifo_wmk",
        14,
        8
      ],
      [
        "fdll_wr_fail_req_fifo_wmk",
        22,
        7
      ]
    ]
  },
  "pdoq_fdoq_ifg_credit_debug_cfg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 6,
    "desc": "Selector for IFG Tx buffer credit counter debug",
    "fields": [
      [
        "ifg_credit_select",
        0,
        6
      ]
    ]
  },
  "pdoq_fdoq_ifg_credit_debug": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 86,
    "desc": "Selected IFG Tx buffer credit counter debug",
    "fields": [
      [
        "ifg_credit_status",
        0,
        17
      ],
      [
        "ifg_credit_min_wmk",
        17,
        17
      ],
      [
        "ifg_credit_flow_control",
        34,
        52
      ]
    ]
  },
  "pdoq_fdoq_txpp_flow_control_debug": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 52,
    "desc": "TxPP per interface flow control sticky status",
    "fields": [
      [
        "txpp_flow_control",
        0,
        52
      ]
    ]
  },
  "pdoq_fdoq_pdif_debug_cfg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 6,
    "desc": "Selector for PD interface fifos debug",
    "fields": [
      [
        "pdif_select",
        0,
        6
      ]
    ]
  },
  "pdoq_fdoq_pdif_status_debug": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 49,
    "desc": "Selected PDIF fifo status debug",
    "fields": [
      [
        "pdif_pd_status",
        0,
        12
      ],
      [
        "pdif_pd_wmk",
        12,
        12
      ],
      [
        "pdif_byte_wmk",
        24,
        25
      ]
    ]
  },
  "pdoq_fdoq_pdif_fc_debug": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 106,
    "desc": "PDIF flow control sticky status",
    "fields": [
      [
        "pdif_alm_full",
        0,
        54
      ],
      [
        "pdif_fc_sch",
        54,
        52
      ]
    ]
  },
  "pdoq_fdoq_total_counter_debug_cfg": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 1,
    "desc": "Selector for FDOQ total counters debug",
    "fields": [
      [
        "total_counter_select",
        0,
        1
      ]
    ]
  },
  "pdoq_fdoq_total_counter_debug": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 40,
    "desc": "Selected total FDOQ counter debug",
    "fields": [
      [
        "total_pd_counter_wmk",
        0,
        12
      ],
      [
        "total_byte_counter_wmk",
        12,
        26
      ],
      [
        "total_counter_fc",
        38,
        2
      ]
    ]
  },
  "pdoq_fdoq_pdif_fifo_reset_port": {
    "type": "register",
    "block": "pdoq_fdoq",
    "width": 52,
    "desc": "Reset pulse per port to PDIF FIFO, allows change of port rate under traffic",
    "fields": [
      [
        "pdif_fifo_reset_per_port",
        0,
        52
      ]
    ]
  },
  "pdoq_fdoq_pdif_fifo": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 15,
    "desc": "Pdif fifo memory, stores packet size and dual PD indication. Partitioned by configuration to 41 fifos, 1 for delete and 20 fifos per each IFG.",
    "fields": [
      [
        "pdif_fifo_data",
        0,
        15
      ]
    ]
  },
  "pdoq_fdoq_pdif": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 198,
    "desc": "Pdif PD memory, stores the entire PD. Address is the same address as PdifFifo memory",
    "fields": [
      [
        "pdif_data",
        0,
        198
      ]
    ]
  },
  "pdoq_fdoq_pdif_em_fail": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 51,
    "desc": "Pdif write fail fifo, stores the PD that suffered PDOQ write fail",
    "fields": [
      [
        "packet_size",
        0,
        14
      ],
      [
        "ucdv",
        14,
        14
      ],
      [
        "packet_id",
        28,
        19
      ],
      [
        "cgm_counter_type",
        47,
        3
      ],
      [
        "dual_pd",
        50,
        1
      ]
    ]
  },
  "pdoq_fdoq_fdll_req_fifo": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 215,
    "desc": "FDLL request fifo per IFG - PD and controls. Stores PDs and FDs of fragments that pend FDLL buffer pointer.",
    "fields": [
      [
        "fdll_req_fifo_data",
        0,
        215
      ]
    ]
  },
  "pdoq_fdoq_fdll_del_req_fifo": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 54,
    "desc": "FDLL request fifo per Delete and Write fail - PD and controls. Stores PDs and FDs of fragments that pend FDLL buffer pointer.",
    "fields": [
      [
        "sop",
        0,
        1
      ],
      [
        "eop",
        1,
        1
      ],
      [
        "packet_size",
        2,
        14
      ],
      [
        "ucdv",
        16,
        14
      ],
      [
        "packet_id",
        30,
        19
      ],
      [
        "cgm_counter_type",
        49,
        3
      ],
      [
        "access_fdll",
        52,
        1
      ],
      [
        "dual_pd",
        53,
        1
      ]
    ]
  },
  "pdoq_fdoq_fdll_reply_fifo": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 20,
    "desc": "FDLL reply fifo - buffer pointer and found indication",
    "fields": [
      [
        "fdll_reply_fifo_data",
        0,
        20
      ]
    ]
  },
  "pdoq_fdoq_pdif_fifo_size": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 12,
    "desc": "Pdif fifo size configuration. 26 fifos are for each IFG and 1 fifo for delete. Summation of all fifo sizes should be equal or less than 1792.",
    "fields": [
      [
        "pdif_fifo_size_data",
        0,
        12
      ]
    ]
  },
  "pdoq_fdoq_pdif_fifo_size_start_addr": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 11,
    "desc": "Pdif fifo start address configuration. 26 fifos are for each IFG and 1 fifo for delete. Overlaps are not allowed, meaning, Fifo start address n + Fifo size n should be < Fifo start address n+1",
    "fields": [
      [
        "pdif_fifo_size_start_addr_data",
        0,
        11
      ]
    ]
  },
  "pdoq_fdoq_fdoq_ifg_calendar": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 5,
    "desc": "FDOQ interface arbiter per IFG. Work conserving RR is applied on the calendar entries. Each entry represents IFG interface. The interface may appear several times in t he calendar, depends on its speed. The calendar is configured automatically by SW based on all IFG ports",
    "fields": [
      [
        "fdoq_ifg_calendar_data",
        0,
        5
      ]
    ]
  },
  "pdoq_fdoq_pd_if_fifos_thresholds_profile": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 3,
    "desc": "Map IFG interface to profile for PdIfFifosThresholds",
    "fields": [
      [
        "pdif_th_profile",
        0,
        3
      ]
    ]
  },
  "pdoq_fdoq_pd_if_fifos_thresholds": {
    "type": "memory",
    "block": "pdoq_fdoq",
    "width": 37,
    "desc": "Pdif fifo thresholds, if crossed, flow control is set to TxSCH. Profile for (1200G, 800G, 400G, 200G, 100G, 50G, 40G, RCY 600G)",
    "fields": [
      [
        "pdif_pds_th",
        0,
        12
      ],
      [
        "pdif_bytes_th",
        12,
        25
      ]
    ]
  },
  "pdoq_interrupt_register": {
    "type": "register",
    "block": "pdoq",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "pdoq_mem_protect_interrupt": {
    "type": "register",
    "block": "pdoq",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pdoq_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pdoq",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pdoq_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq",
    "width": 32,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "wrrqsn_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "wrsn_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "wrbc_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "rdrqsn_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "rdsn_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "rdbc_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "rqm_free_fifo_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "crbal_a_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "crbal_b_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "enq_qsize_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "deq_qsize_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "retrans_filter_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "oq_ifc_mapping_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "pfc_mapping_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "eligible_status_a_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "eligible_status_b_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "read_request_fifo_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "read_report_fifo_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "oq_pir_token_bucket0_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "oq_pir_token_bucket1_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "oq_pir_token_bucket_cfg0_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "oq_pir_token_bucket_cfg1_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "oqpg_cir_token_bucket0_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "oqpg_cir_token_bucket1_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg0_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg1_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "tpse_wfq_rr_desc0_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "tpse_wfq_rr_desc1_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "uc_mc_wfq_cfg0_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "uc_mc_wfq_cfg1_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "uc_mc_wfq_desc0_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "uc_mc_wfq_desc1_ecc_1b_err_interrupt_mask",
        31,
        1
      ]
    ]
  },
  "pdoq_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq",
    "width": 32,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "wrrqsn_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "wrsn_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "wrbc_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "rdrqsn_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "rdsn_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "rdbc_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "rqm_free_fifo_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "crbal_a_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "crbal_b_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "enq_qsize_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "deq_qsize_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "retrans_filter_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "oq_ifc_mapping_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "pfc_mapping_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "eligible_status_a_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "eligible_status_b_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "read_request_fifo_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "read_report_fifo_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "oq_pir_token_bucket0_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "oq_pir_token_bucket1_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "oq_pir_token_bucket_cfg0_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "oq_pir_token_bucket_cfg1_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "oqpg_cir_token_bucket0_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "oqpg_cir_token_bucket1_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg0_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg1_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "tpse_wfq_rr_desc0_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "tpse_wfq_rr_desc1_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "uc_mc_wfq_cfg0_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "uc_mc_wfq_cfg1_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "uc_mc_wfq_desc0_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "uc_mc_wfq_desc1_ecc_2b_err_interrupt_mask",
        31,
        1
      ]
    ]
  },
  "pdoq_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pdoq",
    "width": 32,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "wrrqsn_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "wrsn_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "wrbc_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "rdrqsn_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "rdsn_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "rdbc_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "rqm_free_fifo_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "crbal_a_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "crbal_b_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "enq_qsize_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "deq_qsize_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "retrans_filter_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "oq_ifc_mapping_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "pfc_mapping_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "eligible_status_a_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "eligible_status_b_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "read_request_fifo_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "read_report_fifo_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "oq_pir_token_bucket0_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "oq_pir_token_bucket1_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "oq_pir_token_bucket_cfg0_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "oq_pir_token_bucket_cfg1_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "oqpg_cir_token_bucket0_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "oqpg_cir_token_bucket1_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg0_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg1_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "tpse_wfq_rr_desc0_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "tpse_wfq_rr_desc1_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "uc_mc_wfq_cfg0_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "uc_mc_wfq_cfg1_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "uc_mc_wfq_desc0_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "uc_mc_wfq_desc1_ecc_1b_err_initiate",
        31,
        1
      ]
    ]
  },
  "pdoq_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pdoq",
    "width": 32,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "wrrqsn_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "wrsn_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "wrbc_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "rdrqsn_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "rdsn_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "rdbc_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "rqm_free_fifo_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "crbal_a_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "crbal_b_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "enq_qsize_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "deq_qsize_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "retrans_filter_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "oq_ifc_mapping_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "pfc_mapping_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "eligible_status_a_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "eligible_status_b_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "read_request_fifo_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "read_report_fifo_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "oq_pir_token_bucket0_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "oq_pir_token_bucket1_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "oq_pir_token_bucket_cfg0_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "oq_pir_token_bucket_cfg1_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "oqpg_cir_token_bucket0_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "oqpg_cir_token_bucket1_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg0_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg1_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "tpse_wfq_rr_desc0_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "tpse_wfq_rr_desc1_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "uc_mc_wfq_cfg0_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "uc_mc_wfq_cfg1_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "uc_mc_wfq_desc0_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "uc_mc_wfq_desc1_ecc_2b_err_initiate",
        31,
        1
      ]
    ]
  },
  "pdoq_mem_protect_err_status": {
    "type": "register",
    "block": "pdoq",
    "width": 32,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "wrrqsn_err_int",
        0,
        1
      ],
      [
        "wrsn_err_int",
        1,
        1
      ],
      [
        "wrbc_err_int",
        2,
        1
      ],
      [
        "rdrqsn_err_int",
        3,
        1
      ],
      [
        "rdsn_err_int",
        4,
        1
      ],
      [
        "rdbc_err_int",
        5,
        1
      ],
      [
        "rqm_free_fifo_err_int",
        6,
        1
      ],
      [
        "crbal_a_err_int",
        7,
        1
      ],
      [
        "crbal_b_err_int",
        8,
        1
      ],
      [
        "enq_qsize_err_int",
        9,
        1
      ],
      [
        "deq_qsize_err_int",
        10,
        1
      ],
      [
        "retrans_filter_err_int",
        11,
        1
      ],
      [
        "oq_ifc_mapping_err_int",
        12,
        1
      ],
      [
        "pfc_mapping_err_int",
        13,
        1
      ],
      [
        "eligible_status_a_err_int",
        14,
        1
      ],
      [
        "eligible_status_b_err_int",
        15,
        1
      ],
      [
        "read_request_fifo_err_int",
        16,
        1
      ],
      [
        "read_report_fifo_err_int",
        17,
        1
      ],
      [
        "oq_pir_token_bucket0_err_int",
        18,
        1
      ],
      [
        "oq_pir_token_bucket1_err_int",
        19,
        1
      ],
      [
        "oq_pir_token_bucket_cfg0_err_int",
        20,
        1
      ],
      [
        "oq_pir_token_bucket_cfg1_err_int",
        21,
        1
      ],
      [
        "oqpg_cir_token_bucket0_err_int",
        22,
        1
      ],
      [
        "oqpg_cir_token_bucket1_err_int",
        23,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg0_err_int",
        24,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg1_err_int",
        25,
        1
      ],
      [
        "tpse_wfq_rr_desc0_err_int",
        26,
        1
      ],
      [
        "tpse_wfq_rr_desc1_err_int",
        27,
        1
      ],
      [
        "uc_mc_wfq_cfg0_err_int",
        28,
        1
      ],
      [
        "uc_mc_wfq_cfg1_err_int",
        29,
        1
      ],
      [
        "uc_mc_wfq_desc0_err_int",
        30,
        1
      ],
      [
        "uc_mc_wfq_desc1_err_int",
        31,
        1
      ]
    ]
  },
  "pdoq_selected_ser_error_info": {
    "type": "register",
    "block": "pdoq",
    "width": 12,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        10
      ],
      [
        "mem_err_type",
        10,
        2
      ]
    ]
  },
  "pdoq_ser_error_debug_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "pdoq_ecc_1b_err_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_ecc_2b_err_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_counter_timer": {
    "type": "register",
    "block": "pdoq",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pdoq_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pdoq_memory_access_timeout": {
    "type": "register",
    "block": "pdoq",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "pdoq_broadcast_config_reg": {
    "type": "register",
    "block": "pdoq",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pdoq_memory_prot_bypass": {
    "type": "register",
    "block": "pdoq",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pdoq_soft_reset_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pdoq_mbist_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pdoq_power_down_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pdoq_spare_reg": {
    "type": "register",
    "block": "pdoq",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pdoq_pmro_ctrl": {
    "type": "register",
    "block": "pdoq",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pdoq_pmro_status": {
    "type": "register",
    "block": "pdoq",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pdoq_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pdoq",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pdoq_mirror_bus_status": {
    "type": "register",
    "block": "pdoq",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pdoq_device_time_offset_cfg": {
    "type": "register",
    "block": "pdoq",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pdoq_general_interrupt_register": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "Interrupt",
    "fields": [
      [
        "some_interrupt0",
        0,
        1
      ]
    ]
  },
  "pdoq_general_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "some_interrupt0_mask",
        0,
        1
      ]
    ]
  },
  "pdoq_general_interrupt_register_test": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "some_interrupt0_test",
        0,
        1
      ]
    ]
  },
  "pdoq_oqc_init_status": {
    "type": "register",
    "block": "pdoq",
    "width": 2,
    "desc": "Status of OQ contoller initiation",
    "fields": [
      [
        "wqm_init_active",
        0,
        1
      ],
      [
        "rqm_init_active",
        1,
        1
      ]
    ]
  },
  "pdoq_fabric_link_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 18,
    "desc": "Fabric link queueing configuration",
    "fields": [
      [
        "plb_uch_offset",
        0,
        3
      ],
      [
        "plb_ucl_offset",
        3,
        3
      ],
      [
        "plb_mc_offset",
        6,
        3
      ],
      [
        "send_all_ts_header_th",
        9,
        9
      ]
    ]
  },
  "pdoq_pdoq_credit_value": {
    "type": "register",
    "block": "pdoq",
    "width": 13,
    "desc": "PDOQ Transmit Scheduler credit value configuration",
    "fields": [
      [
        "credit_value",
        0,
        13
      ]
    ]
  },
  "pdoq_oq_crbal_th_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 205,
    "desc": "Per OQ profile Credit Balance configurations",
    "fields": [
      [
        "max_credit_balance",
        0,
        64
      ],
      [
        "max_empty_credit_balance",
        64,
        64
      ],
      [
        "max_negative_credit_balance",
        128,
        64
      ],
      [
        "max_empty_lfsr_mask",
        192,
        13
      ]
    ]
  },
  "pdoq_dqc_general_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 87,
    "desc": "Dequeue controller general configuration",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ],
      [
        "retransmit_delay",
        4,
        13
      ],
      [
        "all_credit_elig",
        17,
        1
      ],
      [
        "slow_read_request_th",
        18,
        4
      ],
      [
        "delete_pdif_th",
        22,
        9
      ],
      [
        "lc_compensation_map",
        31,
        36
      ],
      [
        "fabric_slice_bitmap",
        67,
        6
      ],
      [
        "fabric_packet_fixed_compensation",
        73,
        7
      ],
      [
        "local_packet_fixed_compensation",
        80,
        7
      ]
    ]
  },
  "pdoq_dqc_eligible_arbiter": {
    "type": "register",
    "block": "pdoq",
    "width": 47,
    "desc": "Define weights of WFQ between delete and non delete and delete SP thresholds",
    "fields": [
      [
        "elig_arb_non_delete_sp_en",
        0,
        1
      ],
      [
        "elig_arb_delete_weight",
        1,
        6
      ],
      [
        "elig_arb_non_delete_weight",
        7,
        6
      ],
      [
        "elig_arb_delete_sp_pd_th",
        13,
        15
      ],
      [
        "elig_arb_delete_sp_buffer_th",
        28,
        19
      ]
    ]
  },
  "pdoq_pfc_polarity_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "PFC polarity received from IFG",
    "fields": [
      [
        "pfc_polarity",
        0,
        1
      ]
    ]
  },
  "pdoq_mark_counter_reg": {
    "type": "register",
    "block": "pdoq",
    "width": 16,
    "desc": "FCN marking counter",
    "fields": [
      [
        "mark_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_tpse_shaper_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 70,
    "desc": "TPSE shaper total parameters",
    "fields": [
      [
        "tpse_pir_shaper_rate",
        0,
        24
      ],
      [
        "tpse_pir_shaper_max_bucket",
        24,
        8
      ],
      [
        "tpse_pir_shaper_incr_value",
        32,
        3
      ],
      [
        "tpse_cir_shaper_rate",
        35,
        24
      ],
      [
        "tpse_cir_shaper_max_bucket",
        59,
        8
      ],
      [
        "tpse_cir_shaper_incr_value",
        67,
        3
      ]
    ]
  },
  "pdoq_tpse_oqpg_mapping_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 442,
    "desc": "OQ to OQPG mapping",
    "fields": [
      [
        "tpse_oqpg_map",
        0,
        442
      ]
    ]
  },
  "pdoq_tpse_general_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 52,
    "desc": "Defines TPSE configurations and scheduling scheme",
    "fields": [
      [
        "tpse_priority_propagation",
        0,
        26
      ],
      [
        "tpse_priority_type",
        26,
        26
      ]
    ]
  },
  "pdoq_tpse_cir_shaper_update": {
    "type": "register",
    "block": "pdoq",
    "width": 8,
    "desc": "Manual specific shaper initiation, used for shaper open",
    "fields": [
      [
        "tpse_cir_shaper_update_client",
        0,
        8
      ]
    ]
  },
  "pdoq_tpse_pir_shaper_update": {
    "type": "register",
    "block": "pdoq",
    "width": 8,
    "desc": "Manual specific shaper initiation, used for shaper open",
    "fields": [
      [
        "tpse_pir_shaper_update_client",
        0,
        8
      ]
    ]
  },
  "pdoq_tpse_cir_shaper_tb_empty_access": {
    "type": "register",
    "block": "pdoq",
    "width": 9,
    "desc": "CPU Write access to TPSE CIR shaper TB empty indication",
    "fields": [
      [
        "tpse_cir_shaper_tb_empty_value",
        0,
        1
      ],
      [
        "tpse_cir_shaper_tb_empty_client",
        1,
        8
      ]
    ]
  },
  "pdoq_tpse_pir_shaper_tb_empty_access": {
    "type": "register",
    "block": "pdoq",
    "width": 9,
    "desc": "CPU Write access to TPSE PIR shaper TB empty indication",
    "fields": [
      [
        "tpse_pir_shaper_tb_empty_value",
        0,
        1
      ],
      [
        "tpse_pir_shaper_tb_empty_client",
        1,
        8
      ]
    ]
  },
  "pdoq_tpse_cir_shaper_init": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "Manual shaper initiation, can be used when SCH is idle",
    "fields": [
      [
        "tpse_cir_shaper_init_done",
        0,
        1
      ]
    ]
  },
  "pdoq_tpse_pir_shaper_init": {
    "type": "register",
    "block": "pdoq",
    "width": 1,
    "desc": "Manual shaper initiation, can be used when SCH is idle",
    "fields": [
      [
        "tpse_pir_shaper_init_done",
        0,
        1
      ]
    ]
  },
  "pdoq_ifse_general_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 180,
    "desc": "Defines IFSE configurations and scheduling scheme",
    "fields": [
      [
        "ifg_credit_generator_rate",
        0,
        18
      ],
      [
        "ifg_credit_generator_max_bucket",
        18,
        6
      ],
      [
        "tpse2ifc_map",
        24,
        130
      ],
      [
        "ifse_eir_shaper_mode",
        154,
        26
      ]
    ]
  },
  "pdoq_ifse_wfq_cir_weights": {
    "type": "register",
    "block": "pdoq",
    "width": 6,
    "desc": "Defines IFSE CIR WFQ weights",
    "fields": [
      [
        "ifse_wfq_cir_weight",
        0,
        6
      ]
    ]
  },
  "pdoq_ifse_wfq_eir_weights": {
    "type": "register",
    "block": "pdoq",
    "width": 6,
    "desc": "Defines IFSE EIR WFQ weights",
    "fields": [
      [
        "ifse_wfq_eir_weight",
        0,
        6
      ]
    ]
  },
  "pdoq_ifse_cir_shaper_rate_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 18,
    "desc": "IFSE CIR shaper rate parameters",
    "fields": [
      [
        "ifse_cir_shaper_rate",
        0,
        18
      ]
    ]
  },
  "pdoq_ifse_cir_shaper_max_bucket_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 8,
    "desc": "IFSE CIR shaper max bucket parameters",
    "fields": [
      [
        "ifse_cir_shaper_max_bucket",
        0,
        8
      ]
    ]
  },
  "pdoq_ifse_pir_shaper_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 18,
    "desc": "IFSE PIR shaper parameters",
    "fields": [
      [
        "ifse_pir_shaper_rate",
        0,
        18
      ]
    ]
  },
  "pdoq_ifse_pir_shaper_max_bucket_configuration": {
    "type": "register",
    "block": "pdoq",
    "width": 8,
    "desc": "IFSE PIR shaper max bucket parameters",
    "fields": [
      [
        "ifse_pir_shaper_max_bucket",
        0,
        8
      ]
    ]
  },
  "pdoq_internal_fifo_alm_full": {
    "type": "register",
    "block": "pdoq",
    "width": 47,
    "desc": "Fifos almost full configuration",
    "fields": [
      [
        "rqm2em_alm_full_cfg",
        0,
        6
      ],
      [
        "crbal_fifo_alm_full",
        6,
        5
      ],
      [
        "deq_per_ifg_fifo_alm_full",
        11,
        4
      ],
      [
        "credit_grant_alm_full",
        15,
        3
      ],
      [
        "read_req_alm_full",
        18,
        4
      ],
      [
        "read_report_alm_full",
        22,
        5
      ],
      [
        "rqm_rd_req_alm_full_cfg",
        27,
        5
      ],
      [
        "rqm_deq_req_alm_full_cfg",
        32,
        5
      ],
      [
        "rqm_del_deq_alm_full_cfg",
        37,
        4
      ],
      [
        "wqm_input_alm_full_cfg",
        41,
        1
      ],
      [
        "wqm_cbt_alm_full_cfg",
        42,
        5
      ]
    ]
  },
  "pdoq_max_queues": {
    "type": "register",
    "block": "pdoq",
    "width": 148,
    "desc": "4 Queues with instantaneous max Q byte size",
    "fields": [
      [
        "max_queue0",
        0,
        10
      ],
      [
        "max_size0",
        10,
        27
      ],
      [
        "max_queue1",
        37,
        10
      ],
      [
        "max_size1",
        47,
        27
      ],
      [
        "max_queue2",
        74,
        10
      ],
      [
        "max_size2",
        84,
        27
      ],
      [
        "max_queue3",
        111,
        10
      ],
      [
        "max_size3",
        121,
        27
      ]
    ]
  },
  "pdoq_max_queue_size_status": {
    "type": "register",
    "block": "pdoq",
    "width": 37,
    "desc": "Holds Queue and size of with max size",
    "fields": [
      [
        "max_queue_size",
        0,
        27
      ],
      [
        "max_queue_number",
        27,
        10
      ]
    ]
  },
  "pdoq_max_delete_queue_size_status": {
    "type": "register",
    "block": "pdoq",
    "width": 27,
    "desc": "aaa",
    "fields": [
      [
        "max_delete_queue_size",
        0,
        27
      ]
    ]
  },
  "pdoq_rebound_counters": {
    "type": "register",
    "block": "pdoq",
    "width": 48,
    "desc": "Rebound counters per level",
    "fields": [
      [
        "tpse_rebound_cnt",
        0,
        16
      ],
      [
        "uc_mc_rebound_cnt",
        16,
        16
      ],
      [
        "credit_return_cnt",
        32,
        16
      ]
    ]
  },
  "pdoq_tpse_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 54,
    "desc": "TPSE internal debug",
    "fields": [
      [
        "tpse_cir_request_state",
        0,
        27
      ],
      [
        "tpse_eir_request_state",
        27,
        27
      ]
    ]
  },
  "pdoq_lost_credit_counter": {
    "type": "register",
    "block": "pdoq",
    "width": 8,
    "desc": "Internal lost credit counter",
    "fields": [
      [
        "tpse_lost_credit_cnt",
        0,
        8
      ]
    ]
  },
  "pdoq_internal_fifo_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 42,
    "desc": "Fifos debug",
    "fields": [
      [
        "crbal_fifo_ovf",
        0,
        1
      ],
      [
        "crbal_fifo_unf",
        1,
        1
      ],
      [
        "crbal_fifo_wmk",
        2,
        6
      ],
      [
        "read_req_fifo_ovf",
        8,
        1
      ],
      [
        "read_req_fifo_unf",
        9,
        1
      ],
      [
        "read_req_fifo_wmk",
        10,
        9
      ],
      [
        "read_report_fifo_ovf",
        19,
        1
      ],
      [
        "read_report_fifo_wmk",
        20,
        5
      ],
      [
        "read_report_fifo_not_ready_cnt",
        25,
        16
      ],
      [
        "rqm_delete_fifo_full",
        41,
        1
      ]
    ]
  },
  "pdoq_eligible_debug_cfg": {
    "type": "register",
    "block": "pdoq",
    "width": 4,
    "desc": "Eligible list debug",
    "fields": [
      [
        "eligible_status_select",
        0,
        4
      ]
    ]
  },
  "pdoq_eligible_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 64,
    "desc": "Eligible list debug",
    "fields": [
      [
        "eligible_status",
        0,
        32
      ],
      [
        "eligible_event",
        32,
        32
      ]
    ]
  },
  "pdoq_pfc_debug_cfg": {
    "type": "register",
    "block": "pdoq",
    "width": 4,
    "desc": "PFC debug",
    "fields": [
      [
        "pfc_status_select",
        0,
        4
      ]
    ]
  },
  "pdoq_pfc_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 32,
    "desc": "PFC debug",
    "fields": [
      [
        "pfc_status",
        0,
        32
      ]
    ]
  },
  "pdoq_retransmit_filter_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 108,
    "desc": "Fifos debug",
    "fields": [
      [
        "retransmit_not_found_cnt",
        0,
        16
      ],
      [
        "retransmit_write_fail_cnt",
        16,
        16
      ],
      [
        "retransmit_crbal_cnt",
        32,
        16
      ],
      [
        "retransmit_filtered_cnt",
        48,
        16
      ],
      [
        "retransmit_last_event",
        64,
        1
      ],
      [
        "retransmit_last_queue",
        65,
        10
      ],
      [
        "retransmit_last_reason",
        75,
        1
      ],
      [
        "retransmit_duration_cnt",
        76,
        16
      ],
      [
        "retransmit_duration_del_cnt",
        92,
        16
      ]
    ]
  },
  "pdoq_active_queues_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 20,
    "desc": "Number ofactive queues debug",
    "fields": [
      [
        "num_active_queues_status",
        0,
        10
      ],
      [
        "num_active_queues_wmk",
        10,
        10
      ]
    ]
  },
  "pdoq_read_request_limiter": {
    "type": "register",
    "block": "pdoq",
    "width": 24,
    "desc": "This register enables to limit the rate of read requests sent out by the eligible list. Slice rate limiter",
    "fields": [
      [
        "read_request_window",
        0,
        12
      ],
      [
        "read_request_num_of_grants",
        12,
        12
      ]
    ]
  },
  "pdoq_oq_statistics_debug_cfg": {
    "type": "register",
    "block": "pdoq",
    "width": 10,
    "desc": "This register selects which OQ to monitor in OqStatisticsDebug register.",
    "fields": [
      [
        "oq_statistics_cfg",
        0,
        10
      ]
    ]
  },
  "pdoq_oq_statistics_debug": {
    "type": "register",
    "block": "pdoq",
    "width": 93,
    "desc": "Specific OQ debugging, selected by OqStatisticsDebugCfg register.",
    "fields": [
      [
        "oq_statistics_max_queue_pkt_size",
        0,
        15
      ],
      [
        "oq_statistics_max_queue_buff_size",
        15,
        19
      ],
      [
        "oq_statistics_max_queue_byte_size",
        34,
        27
      ],
      [
        "oq_statistics_max_queue_credit_balance",
        61,
        16
      ],
      [
        "oq_statistics_min_queue_credit_balance",
        77,
        16
      ]
    ]
  },
  "pdoq_wrrqsn": {
    "type": "memory",
    "block": "pdoq",
    "width": 15,
    "desc": "Write request sequence number, entry per queue. Each entry is initialized to the entry number (in order to prevent pressure on the first exact-match core). The sequence number is incremented by the write-queue-manager (RMW) every enqueue-command, R+W (Two ports) memory.",
    "fields": [
      [
        "wrrqsn_data",
        0,
        15
      ]
    ]
  },
  "pdoq_wrsn": {
    "type": "memory",
    "block": "pdoq",
    "width": 15,
    "desc": "Write sequence number, entry per queue, each entry is initialized to the entry number.  The sequence number increments every write report (read-increment-write) and read every De-queue command, 2R+W memory. ",
    "fields": [
      [
        "wrsn_data",
        0,
        15
      ]
    ]
  },
  "pdoq_wrbc": {
    "type": "memory",
    "block": "pdoq",
    "width": 46,
    "desc": "Write bytes count, entry per queue, initialized to 0.  The write bytes count is incremented (RMW) in packet size every write-report and read every dequeue-command, 2R+W memory.",
    "fields": [
      [
        "wrbc_data",
        0,
        27
      ],
      [
        "wrbuff_data",
        27,
        19
      ]
    ]
  },
  "pdoq_rdrqsn": {
    "type": "memory",
    "block": "pdoq",
    "width": 15,
    "desc": "Read request sequence number, entry per queue, each entry is initialized to the entry number. The sequence number is incremented (RMW) every read-request command and written to an old sequence number value in case the ICS asks for retransmit (on dequeue-command).",
    "fields": [
      [
        "rdrqsn_data",
        0,
        15
      ]
    ]
  },
  "pdoq_rdsn": {
    "type": "memory",
    "block": "pdoq",
    "width": 15,
    "desc": "Read sequence number, entry per queue, each entry is initialized to the entry number.  The sequence number is incremented every dequeue-command from the ICS and read every enqueue-command by the write-queue-manager. ",
    "fields": [
      [
        "rdsn_data",
        0,
        15
      ]
    ]
  },
  "pdoq_rdbc": {
    "type": "memory",
    "block": "pdoq",
    "width": 46,
    "desc": "Read bytes count, entry per queue, initialized to 0. The read bytes count is incremented (RMW) with the packet size every dequeue-command from the ICS, and read every enqueue-command, 2R+W memory.",
    "fields": [
      [
        "rdbc_data",
        0,
        27
      ],
      [
        "rdbuff_data",
        27,
        19
      ]
    ]
  },
  "pdoq_rqm_free_fifo": {
    "type": "memory",
    "block": "pdoq",
    "width": 30,
    "desc": "fifo for dequeue between RQM and the EMs",
    "fields": [
      [
        "rqm_fifo_dat_bank",
        0,
        4
      ],
      [
        "rqm_fifo_dat_idx",
        4,
        14
      ],
      [
        "rqm_fifo_dat_buf",
        18,
        12
      ]
    ]
  },
  "pdoq_crbal_a": {
    "type": "memory",
    "block": "pdoq",
    "width": 16,
    "desc": "Credit balance memory for IFG0 queues",
    "fields": [
      [
        "credit_balance_a_data",
        0,
        16
      ]
    ]
  },
  "pdoq_crbal_b": {
    "type": "memory",
    "block": "pdoq",
    "width": 16,
    "desc": "Credit balance memory for IFG1 queues",
    "fields": [
      [
        "credit_balance_b_data",
        0,
        16
      ]
    ]
  },
  "pdoq_enq_qsize": {
    "type": "memory",
    "block": "pdoq",
    "width": 27,
    "desc": "Queue byte size memory of ENQ reports",
    "fields": [
      [
        "enq_qsize_data",
        0,
        27
      ]
    ]
  },
  "pdoq_deq_qsize": {
    "type": "memory",
    "block": "pdoq",
    "width": 27,
    "desc": "Queue byte size memory of DEQ reports",
    "fields": [
      [
        "deq_qsize_data",
        0,
        27
      ]
    ]
  },
  "pdoq_retrans_filter": {
    "type": "memory",
    "block": "pdoq",
    "width": 16,
    "desc": "Retransmit filter - stores last PD SN per Queue, and filter status",
    "fields": [
      [
        "filter_active",
        0,
        1
      ],
      [
        "filtered_sn",
        1,
        15
      ]
    ]
  },
  "pdoq_oq_ifc_mapping": {
    "type": "memory",
    "block": "pdoq",
    "width": 15,
    "desc": "OQ Map Data",
    "fields": [
      [
        "dest_pif",
        0,
        5
      ],
      [
        "txpp_map_data",
        5,
        8
      ],
      [
        "fcn_profile",
        13,
        2
      ]
    ]
  },
  "pdoq_oq_profile": {
    "type": "memory",
    "block": "pdoq",
    "width": 3,
    "desc": "Per OQ profile, used by Dequeue controller",
    "fields": [
      [
        "oq_profile_data",
        0,
        3
      ]
    ]
  },
  "pdoq_pfc_mapping": {
    "type": "memory",
    "block": "pdoq",
    "width": 68,
    "desc": "PFC mapping confugration",
    "fields": [
      [
        "pfc_oq_number",
        0,
        36
      ],
      [
        "pfc_tc_map",
        36,
        32
      ]
    ]
  },
  "pdoq_fcn": {
    "type": "memory",
    "block": "pdoq",
    "width": 16,
    "desc": "Stores FCN marking data received from TxCGM per OQ",
    "fields": [
      [
        "fcn_data",
        0,
        16
      ]
    ]
  },
  "pdoq_fcn_oqg": {
    "type": "memory",
    "block": "pdoq",
    "width": 1,
    "desc": "Stores FCN marking data received from TxCGM per OQG",
    "fields": [
      [
        "fcn_oqg_data",
        0,
        1
      ]
    ]
  },
  "pdoq_eligible_status_a": {
    "type": "memory",
    "block": "pdoq",
    "width": 16,
    "desc": "Store number of inflight PDs and PD size per Q for eligible list use, IFG0 queues",
    "fields": [
      [
        "inflight_counter",
        0,
        8
      ],
      [
        "pd_qsize",
        8,
        8
      ]
    ]
  },
  "pdoq_eligible_status_b": {
    "type": "memory",
    "block": "pdoq",
    "width": 16,
    "desc": "Store number of inflight PDs and PD size per Q for eligible list use, IFG1 queues",
    "fields": [
      [
        "inflight_counter",
        0,
        8
      ],
      [
        "pd_qsize",
        8,
        8
      ]
    ]
  },
  "pdoq_read_request_fifo": {
    "type": "memory",
    "block": "pdoq",
    "width": 10,
    "desc": "Data pending for Read controller",
    "fields": [
      [
        "read_request_qnum",
        0,
        10
      ]
    ]
  },
  "pdoq_read_report_fifo": {
    "type": "memory",
    "block": "pdoq",
    "width": 183,
    "desc": "Data received from Read controller",
    "fields": [
      [
        "read_report_pd",
        0,
        141
      ],
      [
        "read_report_sn",
        141,
        15
      ],
      [
        "read_report_index",
        156,
        14
      ],
      [
        "read_report_ptr",
        170,
        12
      ],
      [
        "read_report_found",
        182,
        1
      ]
    ]
  },
  "pdoq_read_rate_limiter": {
    "type": "memory",
    "block": "pdoq",
    "width": 7,
    "desc": "Packet rate limitation for Read access",
    "fields": [
      [
        "read_rate_limiter_data",
        0,
        7
      ]
    ]
  },
  "pdoq_oqg_to_link_map": {
    "type": "memory",
    "block": "pdoq",
    "width": 5,
    "desc": "Maps OQG to Fabric Link 0..23",
    "fields": [
      [
        "oqg_to_link_mapdata",
        0,
        5
      ]
    ]
  },
  "pdoq_oq_pir_token_bucket": {
    "type": "memory",
    "block": "pdoq",
    "width": 10,
    "desc": "Value of the token bucket shaper, entry per OQ",
    "fields": [
      [
        "oq_pir_token_bucket_value",
        0,
        10
      ]
    ]
  },
  "pdoq_oq_pir_token_bucket_cfg": {
    "type": "memory",
    "block": "pdoq",
    "width": 19,
    "desc": "Token Bucket Configuration - defines ratio of OqseShaperRate that will be allocated to VSC",
    "fields": [
      [
        "oq_pir_rate_mantissa",
        0,
        5
      ],
      [
        "oq_pir_rate_exponent",
        5,
        5
      ],
      [
        "oq_pir_max_bucket_value",
        10,
        9
      ]
    ]
  },
  "pdoq_oq_pir_token_bucket_link_list": {
    "type": "memory",
    "block": "pdoq",
    "width": 8,
    "desc": "Token Bucket Linked List used for OQ PIR shaper, entry per OQ",
    "fields": [
      [
        "oq_pir_tb_link_pointer",
        0,
        8
      ]
    ]
  },
  "pdoq_oqpg_cir_token_bucket": {
    "type": "memory",
    "block": "pdoq",
    "width": 10,
    "desc": "Value of the token bucket shaper, entry per OQPG",
    "fields": [
      [
        "oqpg_cir_token_bucket_value",
        0,
        10
      ]
    ]
  },
  "pdoq_oqpg_cir_token_bucket_cfg": {
    "type": "memory",
    "block": "pdoq",
    "width": 19,
    "desc": "Token Bucket Configuration - defines ratio of OqseShaperRate that will be allocated to VSC",
    "fields": [
      [
        "oqpg_cir_rate_mantissa",
        0,
        5
      ],
      [
        "oqpg_cir_rate_exponent",
        5,
        5
      ],
      [
        "oqpg_cir_max_bucket_value",
        10,
        9
      ]
    ]
  },
  "pdoq_oqpg_cir_token_bucket_link_list": {
    "type": "memory",
    "block": "pdoq",
    "width": 8,
    "desc": "Token Bucket Linked List used for OQPG CIR shaper, entry per OQPG",
    "fields": [
      [
        "oqpg_cir_tb_link_pointer",
        0,
        8
      ]
    ]
  },
  "pdoq_tpse_wfq_cfg": {
    "type": "memory",
    "block": "pdoq",
    "width": 48,
    "desc": "Definition of WFQ weights of TPSEs",
    "fields": [
      [
        "tpse_wfq_weight0",
        0,
        6
      ],
      [
        "tpse_wfq_weight1",
        6,
        6
      ],
      [
        "tpse_wfq_weight2",
        12,
        6
      ],
      [
        "tpse_wfq_weight3",
        18,
        6
      ],
      [
        "tpse_wfq_weight4",
        24,
        6
      ],
      [
        "tpse_wfq_weight5",
        30,
        6
      ],
      [
        "tpse_wfq_weight6",
        36,
        6
      ],
      [
        "tpse_wfq_weight7",
        42,
        6
      ]
    ]
  },
  "pdoq_tpse_wfq_rr_desc": {
    "type": "memory",
    "block": "pdoq",
    "width": 72,
    "desc": "Internal TPSE WFQ descriptor",
    "fields": [
      [
        "tpse_wfq_priority0",
        0,
        8
      ],
      [
        "tpse_wfq_priority1",
        8,
        8
      ],
      [
        "tpse_wfq_priority2",
        16,
        8
      ],
      [
        "tpse_wfq_priority3",
        24,
        8
      ],
      [
        "tpse_wfq_priority4",
        32,
        8
      ],
      [
        "tpse_wfq_priority5",
        40,
        8
      ],
      [
        "tpse_wfq_priority6",
        48,
        8
      ],
      [
        "tpse_wfq_priority7",
        56,
        8
      ],
      [
        "tpse_rr_last_state",
        64,
        8
      ]
    ]
  },
  "pdoq_uc_mc_wfq_cfg": {
    "type": "memory",
    "block": "pdoq",
    "width": 12,
    "desc": "Definition of WFQ weights of UC MC Q pair",
    "fields": [
      [
        "uc_wfq_weight",
        0,
        6
      ],
      [
        "mc_wfq_weight",
        6,
        6
      ]
    ]
  },
  "pdoq_uc_mc_wfq_desc": {
    "type": "memory",
    "block": "pdoq",
    "width": 16,
    "desc": "Internal UC MC WFQ descriptor",
    "fields": [
      [
        "uc_wfq_priority",
        0,
        8
      ],
      [
        "mc_wfq_priority",
        8,
        8
      ]
    ]
  },
  "pdoq_shared_mem_interrupt_register": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 4,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "pdoq_slice_interrupts_summary",
        1,
        1
      ],
      [
        "fdoq_slice_interrupts_summary",
        2,
        1
      ],
      [
        "empd_interrupts_summary",
        3,
        1
      ]
    ]
  },
  "pdoq_shared_mem_mem_protect_interrupt": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pdoq_shared_mem_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pdoq_shared_mem_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 29,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "rd_req_fifo0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "rd_req_fifo1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "rd_req_fifo2_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "rd_req_fifo3_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "rd_req_fifo4_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "rd_req_fifo5_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "rd_result_fifo0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "rd_result_fifo1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "rd_result_fifo2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "rd_result_fifo3_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "rd_result_fifo4_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "rd_result_fifo5_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "dram_fdll_req_fifo_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "dram_delete_fdll_req_fifo_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "dram_fdll_reply_fifo_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "dram_delete_fdll_reply_fifo_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "dpd_fifo_ecc_1b_err_interrupt_mask",
        28,
        1
      ]
    ]
  },
  "pdoq_shared_mem_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 29,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "rd_req_fifo0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "rd_req_fifo1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "rd_req_fifo2_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "rd_req_fifo3_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "rd_req_fifo4_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "rd_req_fifo5_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "rd_result_fifo0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "rd_result_fifo1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "rd_result_fifo2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "rd_result_fifo3_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "rd_result_fifo4_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "rd_result_fifo5_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "dram_fdll_req_fifo_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "dram_delete_fdll_req_fifo_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "dram_fdll_reply_fifo_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "dram_delete_fdll_reply_fifo_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "dpd_fifo_ecc_2b_err_interrupt_mask",
        28,
        1
      ]
    ]
  },
  "pdoq_shared_mem_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 29,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "rd_req_fifo0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "rd_req_fifo1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "rd_req_fifo2_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "rd_req_fifo3_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "rd_req_fifo4_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "rd_req_fifo5_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "rd_result_fifo0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "rd_result_fifo1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "rd_result_fifo2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "rd_result_fifo3_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "rd_result_fifo4_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "rd_result_fifo5_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "dram_fdll_req_fifo_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "dram_delete_fdll_req_fifo_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "dram_fdll_reply_fifo_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "dram_delete_fdll_reply_fifo_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "dpd_fifo_ecc_1b_err_initiate",
        28,
        1
      ]
    ]
  },
  "pdoq_shared_mem_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 29,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "rd_req_fifo0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "rd_req_fifo1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "rd_req_fifo2_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "rd_req_fifo3_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "rd_req_fifo4_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "rd_req_fifo5_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "rd_result_fifo0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "rd_result_fifo1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "rd_result_fifo2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "rd_result_fifo3_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "rd_result_fifo4_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "rd_result_fifo5_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "dram_fdll_req_fifo_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "dram_delete_fdll_req_fifo_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "dram_fdll_reply_fifo_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "dram_delete_fdll_reply_fifo_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "dpd_fifo_ecc_2b_err_initiate",
        28,
        1
      ]
    ]
  },
  "pdoq_shared_mem_mem_protect_err_status": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 29,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "wr_req_fifo0_err_int",
        0,
        1
      ],
      [
        "wr_req_fifo1_err_int",
        1,
        1
      ],
      [
        "wr_req_fifo2_err_int",
        2,
        1
      ],
      [
        "wr_req_fifo3_err_int",
        3,
        1
      ],
      [
        "wr_req_fifo4_err_int",
        4,
        1
      ],
      [
        "wr_req_fifo5_err_int",
        5,
        1
      ],
      [
        "rd_req_fifo0_err_int",
        6,
        1
      ],
      [
        "rd_req_fifo1_err_int",
        7,
        1
      ],
      [
        "rd_req_fifo2_err_int",
        8,
        1
      ],
      [
        "rd_req_fifo3_err_int",
        9,
        1
      ],
      [
        "rd_req_fifo4_err_int",
        10,
        1
      ],
      [
        "rd_req_fifo5_err_int",
        11,
        1
      ],
      [
        "rd_result_fifo0_err_int",
        12,
        1
      ],
      [
        "rd_result_fifo1_err_int",
        13,
        1
      ],
      [
        "rd_result_fifo2_err_int",
        14,
        1
      ],
      [
        "rd_result_fifo3_err_int",
        15,
        1
      ],
      [
        "rd_result_fifo4_err_int",
        16,
        1
      ],
      [
        "rd_result_fifo5_err_int",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_err_int",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_err_int",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_err_int",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_err_int",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_err_int",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_err_int",
        23,
        1
      ],
      [
        "dram_fdll_req_fifo_err_int",
        24,
        1
      ],
      [
        "dram_delete_fdll_req_fifo_err_int",
        25,
        1
      ],
      [
        "dram_fdll_reply_fifo_err_int",
        26,
        1
      ],
      [
        "dram_delete_fdll_reply_fifo_err_int",
        27,
        1
      ],
      [
        "dpd_fifo_err_int",
        28,
        1
      ]
    ]
  },
  "pdoq_shared_mem_selected_ser_error_info": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 10,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        8
      ],
      [
        "mem_err_type",
        8,
        2
      ]
    ]
  },
  "pdoq_shared_mem_ser_error_debug_configuration": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "pdoq_shared_mem_ecc_1b_err_debug": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_shared_mem_ecc_2b_err_debug": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdoq_shared_mem_counter_timer": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pdoq_shared_mem_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pdoq_shared_mem_memory_access_timeout": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "pdoq_shared_mem_broadcast_config_reg": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pdoq_shared_mem_memory_prot_bypass": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pdoq_shared_mem_soft_reset_configuration": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pdoq_shared_mem_mbist_configuration": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pdoq_shared_mem_power_down_configuration": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pdoq_shared_mem_spare_reg": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pdoq_shared_mem_pmro_ctrl": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pdoq_shared_mem_pmro_status": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pdoq_shared_mem_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pdoq_shared_mem_mirror_bus_status": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pdoq_shared_mem_device_time_offset_cfg": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pdoq_shared_mem_pdoq_slice_interrupts": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 6,
    "desc": "Per PDOQ slice interrupt",
    "fields": [
      [
        "pdoq_slice_interrupt0",
        0,
        1
      ],
      [
        "pdoq_slice_interrupt1",
        1,
        1
      ],
      [
        "pdoq_slice_interrupt2",
        2,
        1
      ],
      [
        "pdoq_slice_interrupt3",
        3,
        1
      ],
      [
        "pdoq_slice_interrupt4",
        4,
        1
      ],
      [
        "pdoq_slice_interrupt5",
        5,
        1
      ]
    ]
  },
  "pdoq_shared_mem_pdoq_slice_interrupts_mask": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 6,
    "desc": "This register masks PdoqSliceInterrupts interrupt register",
    "fields": [
      [
        "pdoq_slice_interrupt0_mask",
        0,
        1
      ],
      [
        "pdoq_slice_interrupt1_mask",
        1,
        1
      ],
      [
        "pdoq_slice_interrupt2_mask",
        2,
        1
      ],
      [
        "pdoq_slice_interrupt3_mask",
        3,
        1
      ],
      [
        "pdoq_slice_interrupt4_mask",
        4,
        1
      ],
      [
        "pdoq_slice_interrupt5_mask",
        5,
        1
      ]
    ]
  },
  "pdoq_shared_mem_pdoq_slice_interrupts_test": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 6,
    "desc": "This register tests PdoqSliceInterrupts interrupt register",
    "fields": [
      [
        "pdoq_slice_interrupt0_test",
        0,
        1
      ],
      [
        "pdoq_slice_interrupt1_test",
        1,
        1
      ],
      [
        "pdoq_slice_interrupt2_test",
        2,
        1
      ],
      [
        "pdoq_slice_interrupt3_test",
        3,
        1
      ],
      [
        "pdoq_slice_interrupt4_test",
        4,
        1
      ],
      [
        "pdoq_slice_interrupt5_test",
        5,
        1
      ]
    ]
  },
  "pdoq_shared_mem_fdoq_slice_interrupts": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 6,
    "desc": "aaa",
    "fields": [
      [
        "fdoq_slice_interrupt0",
        0,
        1
      ],
      [
        "fdoq_slice_interrupt1",
        1,
        1
      ],
      [
        "fdoq_slice_interrupt2",
        2,
        1
      ],
      [
        "fdoq_slice_interrupt3",
        3,
        1
      ],
      [
        "fdoq_slice_interrupt4",
        4,
        1
      ],
      [
        "fdoq_slice_interrupt5",
        5,
        1
      ]
    ]
  },
  "pdoq_shared_mem_fdoq_slice_interrupts_mask": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 6,
    "desc": "This register masks FdoqSliceInterrupts interrupt register",
    "fields": [
      [
        "fdoq_slice_interrupt0_mask",
        0,
        1
      ],
      [
        "fdoq_slice_interrupt1_mask",
        1,
        1
      ],
      [
        "fdoq_slice_interrupt2_mask",
        2,
        1
      ],
      [
        "fdoq_slice_interrupt3_mask",
        3,
        1
      ],
      [
        "fdoq_slice_interrupt4_mask",
        4,
        1
      ],
      [
        "fdoq_slice_interrupt5_mask",
        5,
        1
      ]
    ]
  },
  "pdoq_shared_mem_fdoq_slice_interrupts_test": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 6,
    "desc": "This register tests FdoqSliceInterrupts interrupt register",
    "fields": [
      [
        "fdoq_slice_interrupt0_test",
        0,
        1
      ],
      [
        "fdoq_slice_interrupt1_test",
        1,
        1
      ],
      [
        "fdoq_slice_interrupt2_test",
        2,
        1
      ],
      [
        "fdoq_slice_interrupt3_test",
        3,
        1
      ],
      [
        "fdoq_slice_interrupt4_test",
        4,
        1
      ],
      [
        "fdoq_slice_interrupt5_test",
        5,
        1
      ]
    ]
  },
  "pdoq_shared_mem_empd_interrupts": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 16,
    "desc": "aaa",
    "fields": [
      [
        "empd_interrupt0",
        0,
        1
      ],
      [
        "empd_interrupt1",
        1,
        1
      ],
      [
        "empd_interrupt2",
        2,
        1
      ],
      [
        "empd_interrupt3",
        3,
        1
      ],
      [
        "empd_interrupt4",
        4,
        1
      ],
      [
        "empd_interrupt5",
        5,
        1
      ],
      [
        "empd_interrupt6",
        6,
        1
      ],
      [
        "empd_interrupt7",
        7,
        1
      ],
      [
        "empd_interrupt8",
        8,
        1
      ],
      [
        "empd_interrupt9",
        9,
        1
      ],
      [
        "empd_interrupt10",
        10,
        1
      ],
      [
        "empd_interrupt11",
        11,
        1
      ],
      [
        "empd_interrupt12",
        12,
        1
      ],
      [
        "empd_interrupt13",
        13,
        1
      ],
      [
        "empd_interrupt14",
        14,
        1
      ],
      [
        "empd_interrupt15",
        15,
        1
      ]
    ]
  },
  "pdoq_shared_mem_empd_interrupts_mask": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 16,
    "desc": "This register masks EmpdInterrupts interrupt register",
    "fields": [
      [
        "empd_interrupt0_mask",
        0,
        1
      ],
      [
        "empd_interrupt1_mask",
        1,
        1
      ],
      [
        "empd_interrupt2_mask",
        2,
        1
      ],
      [
        "empd_interrupt3_mask",
        3,
        1
      ],
      [
        "empd_interrupt4_mask",
        4,
        1
      ],
      [
        "empd_interrupt5_mask",
        5,
        1
      ],
      [
        "empd_interrupt6_mask",
        6,
        1
      ],
      [
        "empd_interrupt7_mask",
        7,
        1
      ],
      [
        "empd_interrupt8_mask",
        8,
        1
      ],
      [
        "empd_interrupt9_mask",
        9,
        1
      ],
      [
        "empd_interrupt10_mask",
        10,
        1
      ],
      [
        "empd_interrupt11_mask",
        11,
        1
      ],
      [
        "empd_interrupt12_mask",
        12,
        1
      ],
      [
        "empd_interrupt13_mask",
        13,
        1
      ],
      [
        "empd_interrupt14_mask",
        14,
        1
      ],
      [
        "empd_interrupt15_mask",
        15,
        1
      ]
    ]
  },
  "pdoq_shared_mem_empd_interrupts_test": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 16,
    "desc": "This register tests EmpdInterrupts interrupt register",
    "fields": [
      [
        "empd_interrupt0_test",
        0,
        1
      ],
      [
        "empd_interrupt1_test",
        1,
        1
      ],
      [
        "empd_interrupt2_test",
        2,
        1
      ],
      [
        "empd_interrupt3_test",
        3,
        1
      ],
      [
        "empd_interrupt4_test",
        4,
        1
      ],
      [
        "empd_interrupt5_test",
        5,
        1
      ],
      [
        "empd_interrupt6_test",
        6,
        1
      ],
      [
        "empd_interrupt7_test",
        7,
        1
      ],
      [
        "empd_interrupt8_test",
        8,
        1
      ],
      [
        "empd_interrupt9_test",
        9,
        1
      ],
      [
        "empd_interrupt10_test",
        10,
        1
      ],
      [
        "empd_interrupt11_test",
        11,
        1
      ],
      [
        "empd_interrupt12_test",
        12,
        1
      ],
      [
        "empd_interrupt13_test",
        13,
        1
      ],
      [
        "empd_interrupt14_test",
        14,
        1
      ],
      [
        "empd_interrupt15_test",
        15,
        1
      ]
    ]
  },
  "pdoq_shared_mem_internal_fifo_alm_full": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 21,
    "desc": "Fifos almost full configuration",
    "fields": [
      [
        "rd_req_alm_full_cfg",
        0,
        4
      ],
      [
        "wr_req_alm_full_cfg",
        4,
        4
      ],
      [
        "reorder_alm_full_cfg",
        8,
        8
      ],
      [
        "rqm_fifo_alm_full",
        16,
        5
      ]
    ]
  },
  "pdoq_shared_mem_dram_packing_configuration": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 6,
    "desc": "DRAM slice packing configurations",
    "fields": [
      [
        "dram_header_size",
        0,
        6
      ]
    ]
  },
  "pdoq_shared_mem_dram_almost_full_configuration": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 4,
    "desc": "Fifos almost full configuration",
    "fields": [
      [
        "dram_fdll_req_alm_full",
        0,
        4
      ]
    ]
  },
  "pdoq_shared_mem_sms_read_rate_limiter": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 18,
    "desc": "Limits rate of FD read transactions towards SMS",
    "fields": [
      [
        "sms_read_rate",
        0,
        11
      ],
      [
        "sms_read_rate_inc_value",
        11,
        3
      ],
      [
        "sms_read_rate_max_bucket",
        14,
        3
      ],
      [
        "sms_bubble_enable",
        17,
        1
      ]
    ]
  },
  "pdoq_shared_mem_slice_mode_configuration": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 4,
    "desc": "Slice mode configuration",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ]
    ]
  },
  "pdoq_shared_mem_pdoq_last_pd_sel_cfg": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 5,
    "desc": "Last PD Select Debug",
    "fields": [
      [
        "pdoq_last_pd_sel",
        0,
        5
      ]
    ]
  },
  "pdoq_shared_mem_pdoq_last_pd_data": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 32,
    "desc": "Last PD Debug",
    "fields": [
      [
        "pdoq_last_pd",
        0,
        32
      ]
    ]
  },
  "pdoq_shared_mem_internal_debug_cfg": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 17,
    "desc": "Internal debug",
    "fields": [
      [
        "fdll_cbt_alm_full_cfg",
        0,
        5
      ],
      [
        "sms_cbt_alm_full_cfg",
        5,
        6
      ],
      [
        "empd_reduce_rate_cfg",
        11,
        6
      ]
    ]
  },
  "pdoq_shared_mem_cbt_not_ready_counter": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 96,
    "desc": "Counts number of not ready clocks of CBT",
    "fields": [
      [
        "fdll_cbt_not_ready_cnt",
        0,
        32
      ],
      [
        "sms0_cbt_not_ready_cnt",
        32,
        32
      ],
      [
        "sms1_cbt_not_ready_cnt",
        64,
        32
      ]
    ]
  },
  "pdoq_shared_mem_debug_pd_field_cfg": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 305,
    "desc": "PD debugger",
    "fields": [
      [
        "debug_pd_field_value",
        0,
        151
      ],
      [
        "debug_pd_field_mask",
        151,
        151
      ],
      [
        "debug_pd_field_slice",
        302,
        3
      ]
    ]
  },
  "pdoq_shared_mem_debug_pd_field_status": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 96,
    "desc": "PD debug counters",
    "fields": [
      [
        "debug_pd_field_cnt",
        0,
        32
      ],
      [
        "debug_pd_total_pd_cnt",
        32,
        32
      ],
      [
        "debug_pd_total_byte_cnt",
        64,
        32
      ]
    ]
  },
  "pdoq_shared_mem_shr_debug": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 32,
    "desc": "Counts number of not ready clocks of CBT",
    "fields": [
      [
        "write_not_ready_cnt",
        0,
        16
      ],
      [
        "read_not_ready_cnt",
        16,
        16
      ]
    ]
  },
  "pdoq_shared_mem_dram_slice_debug": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 24,
    "desc": "Counts number of not ready clocks of CBT",
    "fields": [
      [
        "fdll_req_fifo_wmk",
        0,
        8
      ],
      [
        "fdll_delete_req_fifo_wmk",
        8,
        8
      ],
      [
        "dpd_fifo_wmk",
        16,
        8
      ]
    ]
  },
  "pdoq_shared_mem_dram_slice_counters": {
    "type": "register",
    "block": "pdoq_shared_mem",
    "width": 176,
    "desc": "Debug counters of PDOQ DRAM slice",
    "fields": [
      [
        "good_packets_counter",
        0,
        48
      ],
      [
        "good_bytes_counter",
        48,
        64
      ],
      [
        "dropped_packets_counter",
        112,
        32
      ],
      [
        "dram_packets_counter",
        144,
        32
      ]
    ]
  },
  "pdoq_shared_mem_wr_req_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 165,
    "desc": "Write request from slice to EMPD - key and PD",
    "fields": [
      [
        "wr_req_fifodata",
        0,
        165
      ]
    ]
  },
  "pdoq_shared_mem_rd_req_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 24,
    "desc": "Read request from slice to EMPD - key",
    "fields": [
      [
        "rd_req_fifodata",
        0,
        24
      ]
    ]
  },
  "pdoq_shared_mem_rd_result_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 196,
    "desc": "Read result from EMPD to slice - PD and controls",
    "fields": [
      [
        "rd_result_fifodata",
        0,
        196
      ]
    ]
  },
  "pdoq_shared_mem_pre_shr_wr_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 141,
    "desc": "PDs received from TxCGM",
    "fields": [
      [
        "pre_shr_wr_fifodata",
        0,
        141
      ]
    ]
  },
  "pdoq_shared_mem_dram_fdll_req_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 132,
    "desc": "FDLL request fifo - PD and controls",
    "fields": [
      [
        "dram_fdll_req_fifo_data",
        0,
        132
      ]
    ]
  },
  "pdoq_shared_mem_dram_delete_fdll_req_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 62,
    "desc": "FDLL request fifo for deleted PDs - PD and controls",
    "fields": [
      [
        "dram_delete_fdll_req_fifo_data",
        0,
        62
      ]
    ]
  },
  "pdoq_shared_mem_dram_fdll_reply_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 20,
    "desc": "FDLL reply fifo - buffer pointer and found indication",
    "fields": [
      [
        "dram_fdll_reply_fifo_data",
        0,
        20
      ]
    ]
  },
  "pdoq_shared_mem_dram_delete_fdll_reply_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 20,
    "desc": "FDLL reply fifo  for deleted PDs - buffer pointer and found indication",
    "fields": [
      [
        "dram_delete_fdll_reply_fifo_data",
        0,
        20
      ]
    ]
  },
  "pdoq_shared_mem_dpd_fifo": {
    "type": "memory",
    "block": "pdoq_shared_mem",
    "width": 31,
    "desc": "Dram packet descriptor fifo",
    "fields": [
      [
        "num_sop",
        0,
        5
      ],
      [
        "size",
        5,
        14
      ],
      [
        "compensation_size",
        19,
        12
      ]
    ]
  },
  "pdvoq_empd_interrupt_register": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "pdvoq_empd_mem_protect_interrupt": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pdvoq_empd_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pdvoq_empd_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 9,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "fbmmem_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pdm_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "write_fail_fifo_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "emdb_verifier0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "emdb_verifier1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "emdb_verifier2_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "emdb_verifier3_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "emdb_verifier4_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "emdb_verifier5_ecc_1b_err_interrupt_mask",
        8,
        1
      ]
    ]
  },
  "pdvoq_empd_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 9,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "fbmmem_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "pdm_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "write_fail_fifo_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "emdb_verifier0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "emdb_verifier1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "emdb_verifier2_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "emdb_verifier3_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "emdb_verifier4_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "emdb_verifier5_ecc_2b_err_interrupt_mask",
        8,
        1
      ]
    ]
  },
  "pdvoq_empd_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 9,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "fbmmem_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "pdm_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "write_fail_fifo_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "emdb_verifier0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "emdb_verifier1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "emdb_verifier2_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "emdb_verifier3_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "emdb_verifier4_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "emdb_verifier5_ecc_1b_err_initiate",
        8,
        1
      ]
    ]
  },
  "pdvoq_empd_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 9,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "fbmmem_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "pdm_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "write_fail_fifo_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "emdb_verifier0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "emdb_verifier1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "emdb_verifier2_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "emdb_verifier3_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "emdb_verifier4_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "emdb_verifier5_ecc_2b_err_initiate",
        8,
        1
      ]
    ]
  },
  "pdvoq_empd_mem_protect_err_status": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 9,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "fbmmem_err_int",
        0,
        1
      ],
      [
        "pdm_err_int",
        1,
        1
      ],
      [
        "write_fail_fifo_err_int",
        2,
        1
      ],
      [
        "emdb_verifier0_err_int",
        3,
        1
      ],
      [
        "emdb_verifier1_err_int",
        4,
        1
      ],
      [
        "emdb_verifier2_err_int",
        5,
        1
      ],
      [
        "emdb_verifier3_err_int",
        6,
        1
      ],
      [
        "emdb_verifier4_err_int",
        7,
        1
      ],
      [
        "emdb_verifier5_err_int",
        8,
        1
      ]
    ]
  },
  "pdvoq_empd_selected_ser_error_info": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "pdvoq_empd_ser_error_debug_configuration": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "pdvoq_empd_ecc_1b_err_debug": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdvoq_empd_ecc_2b_err_debug": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdvoq_empd_tcam_scan_period_cfg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "pdvoq_empd_counter_timer": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pdvoq_empd_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pdvoq_empd_memory_access_timeout": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "pdvoq_empd_broadcast_config_reg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pdvoq_empd_memory_prot_bypass": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pdvoq_empd_soft_reset_configuration": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pdvoq_empd_mbist_configuration": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pdvoq_empd_power_down_configuration": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pdvoq_empd_spare_reg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pdvoq_empd_pmro_ctrl": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pdvoq_empd_pmro_status": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pdvoq_empd_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pdvoq_empd_mirror_bus_status": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pdvoq_empd_device_time_offset_cfg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pdvoq_empd_almost_full": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 26,
    "desc": "",
    "fields": [
      [
        "del_req_fifo_alm_full_cfg",
        0,
        4
      ],
      [
        "wr_fail_fifo_alm_full_cfg",
        4,
        6
      ],
      [
        "fbm_alm_empty_slowdown_writes_th",
        10,
        8
      ],
      [
        "fbm_alm_empty_stop_new_writes_th",
        18,
        8
      ]
    ]
  },
  "pdvoq_empd_status": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "init_done",
        0,
        1
      ],
      [
        "wr_fail_fifo_status",
        1,
        6
      ]
    ]
  },
  "pdvoq_empd_fbm_configurations": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 156,
    "desc": "FBM init configurations",
    "fields": [
      [
        "fbm_init",
        0,
        1
      ],
      [
        "fbm_working_mode",
        1,
        1
      ],
      [
        "fbm_total_buffers",
        2,
        14
      ],
      [
        "fbm_not_empty_entry",
        16,
        140
      ]
    ]
  },
  "pdvoq_empd_emdb_per_bank_reg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 54,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "emdb_active_banks",
        0,
        1
      ],
      [
        "emdb_hash_key",
        1,
        52
      ],
      [
        "emdb_use_primitive_crc",
        53,
        1
      ]
    ]
  },
  "pdvoq_empd_emdb_per_em_reg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "emdb_key_width",
        0,
        16
      ],
      [
        "emdb_auto_bubble_req",
        16,
        1
      ],
      [
        "emdb_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "pdvoq_empd_emdb_cam_wm_max_reg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "emdb_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "pdvoq_empd_emdb_bank_write_cntr_reg": {
    "type": "register",
    "block": "pdvoq_empd",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "emdb_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "pdvoq_empd_fbmmem": {
    "type": "memory",
    "block": "pdvoq_empd",
    "width": 64,
    "desc": "bitmap memory for the free buffer manager",
    "fields": [
      [
        "fbmdata",
        0,
        64
      ]
    ]
  },
  "pdvoq_empd_pdm": {
    "type": "memory",
    "block": "pdvoq_empd",
    "width": 143,
    "desc": "payload memory for each EM",
    "fields": [
      [
        "pdmdata",
        0,
        143
      ]
    ]
  },
  "pdvoq_empd_write_fail_fifo": {
    "type": "memory",
    "block": "pdvoq_empd",
    "width": 84,
    "desc": "delete VOQ fifo",
    "fields": [
      [
        "write_fail_pd",
        0,
        84
      ]
    ]
  },
  "pdvoq_empd_emdb_verifier": {
    "type": "memory",
    "block": "pdvoq_empd",
    "width": 152,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "emdb_verifier_data",
        0,
        152
      ]
    ]
  },
  "pdvoq_empd_emdb_valid": {
    "type": "memory",
    "block": "pdvoq_empd",
    "width": 4,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "emdb_valid_data",
        0,
        4
      ]
    ]
  },
  "pdvoq_empd_emdb_cam": {
    "type": "memory",
    "block": "pdvoq_empd",
    "width": 26,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "emdb_cam_payload",
        0,
        14
      ],
      [
        "emdb_cam_key",
        14,
        26
      ],
      [
        "emdb_cam_valid",
        40,
        1
      ]
    ]
  },
  "pdvoq_slice_interrupt_register": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "pdvoq_slice_mem_protect_interrupt": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pdvoq_slice_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pdvoq_slice_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 53,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "rdrqsn_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "rdsn_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "rdbc_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "rdbufcnt_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "wrrqsn_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "wrsn_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "wrbc_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "wrbufcnt_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "voq2context_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "cand_rel_fifo_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "in_cand_rel_fifo_set_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "in_cand_rel_fifo_clr_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "context_release_eligible_set_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "context_release_eligible_clr_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "context_in_dram_set_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "context_in_dram_clr_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "context_map_valid_set_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "context_map_valid_clr_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "contextfbm_bmp_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "new_voq_set_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "new_voq_clr_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "voq_properties_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "static_mapping_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "context_allocate_set_master_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "context_allocate_set_slave_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "context_allocate_clr_master_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "context_allocate_clr_slave_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "context_allocate_grant_set_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "context_allocate_grant_clr_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "context2voq_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "rqm_free_fifo_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "voqcgm_profile_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "buffers_consumption_lut_for_enq_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "pd_consumption_lut_for_enq_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "voq_enq_rpt_size_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "voq_deq_rpt_size_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "last_rpt_enq_set_mem_ecc_1b_err_interrupt_mask",
        36,
        1
      ],
      [
        "last_rpt_enq_set_mem_extra_ecc_1b_err_interrupt_mask",
        37,
        1
      ],
      [
        "last_rpt_enq_clr_mem_ecc_1b_err_interrupt_mask",
        38,
        1
      ],
      [
        "last_rpt_enq_clr_mem_extra_ecc_1b_err_interrupt_mask",
        39,
        1
      ],
      [
        "voq_tenq_head_enq_ecc_1b_err_interrupt_mask",
        40,
        1
      ],
      [
        "voq_tenq_head_rd_ecc_1b_err_interrupt_mask",
        41,
        1
      ],
      [
        "voq_tenq_head_msb_enq_ecc_1b_err_interrupt_mask",
        42,
        1
      ],
      [
        "voq_tenq_head_msb_rd_ecc_1b_err_interrupt_mask",
        43,
        1
      ],
      [
        "head_time_enq_set_mem_ecc_1b_err_interrupt_mask",
        44,
        1
      ],
      [
        "head_time_enq_set_mem_extra_ecc_1b_err_interrupt_mask",
        45,
        1
      ],
      [
        "head_time_enq_clr_mem_ecc_1b_err_interrupt_mask",
        46,
        1
      ],
      [
        "head_time_enq_clr_mem_extra_ecc_1b_err_interrupt_mask",
        47,
        1
      ],
      [
        "is_aging_set_mem_ecc_1b_err_interrupt_mask",
        48,
        1
      ],
      [
        "is_aging_clr_mem_ecc_1b_err_interrupt_mask",
        49,
        1
      ],
      [
        "admission_result_dram_ecc_1b_err_interrupt_mask",
        50,
        1
      ],
      [
        "drop_green_probability_selector_ecc_1b_err_interrupt_mask",
        51,
        1
      ],
      [
        "drop_yellow_probability_selector_ecc_1b_err_interrupt_mask",
        52,
        1
      ]
    ]
  },
  "pdvoq_slice_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 53,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "rdrqsn_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "rdsn_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "rdbc_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "rdbufcnt_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "wrrqsn_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "wrsn_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "wrbc_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "wrbufcnt_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "voq2context_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "cand_rel_fifo_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "in_cand_rel_fifo_set_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "in_cand_rel_fifo_clr_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "context_release_eligible_set_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "context_release_eligible_clr_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "context_in_dram_set_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "context_in_dram_clr_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "context_map_valid_set_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "context_map_valid_clr_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "contextfbm_bmp_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "new_voq_set_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "new_voq_clr_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "voq_properties_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "static_mapping_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "context_allocate_set_master_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "context_allocate_set_slave_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "context_allocate_clr_master_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "context_allocate_clr_slave_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "context_allocate_grant_set_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "context_allocate_grant_clr_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "context2voq_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "rqm_free_fifo_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "voqcgm_profile_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "buffers_consumption_lut_for_enq_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "pd_consumption_lut_for_enq_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "voq_enq_rpt_size_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "voq_deq_rpt_size_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "last_rpt_enq_set_mem_ecc_2b_err_interrupt_mask",
        36,
        1
      ],
      [
        "last_rpt_enq_set_mem_extra_ecc_2b_err_interrupt_mask",
        37,
        1
      ],
      [
        "last_rpt_enq_clr_mem_ecc_2b_err_interrupt_mask",
        38,
        1
      ],
      [
        "last_rpt_enq_clr_mem_extra_ecc_2b_err_interrupt_mask",
        39,
        1
      ],
      [
        "voq_tenq_head_enq_ecc_2b_err_interrupt_mask",
        40,
        1
      ],
      [
        "voq_tenq_head_rd_ecc_2b_err_interrupt_mask",
        41,
        1
      ],
      [
        "voq_tenq_head_msb_enq_ecc_2b_err_interrupt_mask",
        42,
        1
      ],
      [
        "voq_tenq_head_msb_rd_ecc_2b_err_interrupt_mask",
        43,
        1
      ],
      [
        "head_time_enq_set_mem_ecc_2b_err_interrupt_mask",
        44,
        1
      ],
      [
        "head_time_enq_set_mem_extra_ecc_2b_err_interrupt_mask",
        45,
        1
      ],
      [
        "head_time_enq_clr_mem_ecc_2b_err_interrupt_mask",
        46,
        1
      ],
      [
        "head_time_enq_clr_mem_extra_ecc_2b_err_interrupt_mask",
        47,
        1
      ],
      [
        "is_aging_set_mem_ecc_2b_err_interrupt_mask",
        48,
        1
      ],
      [
        "is_aging_clr_mem_ecc_2b_err_interrupt_mask",
        49,
        1
      ],
      [
        "admission_result_dram_ecc_2b_err_interrupt_mask",
        50,
        1
      ],
      [
        "drop_green_probability_selector_ecc_2b_err_interrupt_mask",
        51,
        1
      ],
      [
        "drop_yellow_probability_selector_ecc_2b_err_interrupt_mask",
        52,
        1
      ]
    ]
  },
  "pdvoq_slice_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 53,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "rdrqsn_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "rdsn_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "rdbc_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "rdbufcnt_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "wrrqsn_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "wrsn_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "wrbc_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "wrbufcnt_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "voq2context_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "cand_rel_fifo_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "in_cand_rel_fifo_set_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "in_cand_rel_fifo_clr_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "context_release_eligible_set_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "context_release_eligible_clr_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "context_in_dram_set_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "context_in_dram_clr_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "context_map_valid_set_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "context_map_valid_clr_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "contextfbm_bmp_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "new_voq_set_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "new_voq_clr_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "voq_properties_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "static_mapping_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "context_allocate_set_master_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "context_allocate_set_slave_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "context_allocate_clr_master_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "context_allocate_clr_slave_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "context_allocate_grant_set_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "context_allocate_grant_clr_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "context2voq_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "rqm_free_fifo_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "voqcgm_profile_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "buffers_consumption_lut_for_enq_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "pd_consumption_lut_for_enq_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "voq_enq_rpt_size_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "voq_deq_rpt_size_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "last_rpt_enq_set_mem_ecc_1b_err_initiate",
        36,
        1
      ],
      [
        "last_rpt_enq_set_mem_extra_ecc_1b_err_initiate",
        37,
        1
      ],
      [
        "last_rpt_enq_clr_mem_ecc_1b_err_initiate",
        38,
        1
      ],
      [
        "last_rpt_enq_clr_mem_extra_ecc_1b_err_initiate",
        39,
        1
      ],
      [
        "voq_tenq_head_enq_ecc_1b_err_initiate",
        40,
        1
      ],
      [
        "voq_tenq_head_rd_ecc_1b_err_initiate",
        41,
        1
      ],
      [
        "voq_tenq_head_msb_enq_ecc_1b_err_initiate",
        42,
        1
      ],
      [
        "voq_tenq_head_msb_rd_ecc_1b_err_initiate",
        43,
        1
      ],
      [
        "head_time_enq_set_mem_ecc_1b_err_initiate",
        44,
        1
      ],
      [
        "head_time_enq_set_mem_extra_ecc_1b_err_initiate",
        45,
        1
      ],
      [
        "head_time_enq_clr_mem_ecc_1b_err_initiate",
        46,
        1
      ],
      [
        "head_time_enq_clr_mem_extra_ecc_1b_err_initiate",
        47,
        1
      ],
      [
        "is_aging_set_mem_ecc_1b_err_initiate",
        48,
        1
      ],
      [
        "is_aging_clr_mem_ecc_1b_err_initiate",
        49,
        1
      ],
      [
        "admission_result_dram_ecc_1b_err_initiate",
        50,
        1
      ],
      [
        "drop_green_probability_selector_ecc_1b_err_initiate",
        51,
        1
      ],
      [
        "drop_yellow_probability_selector_ecc_1b_err_initiate",
        52,
        1
      ]
    ]
  },
  "pdvoq_slice_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 53,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "rdrqsn_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "rdsn_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "rdbc_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "rdbufcnt_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "wrrqsn_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "wrsn_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "wrbc_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "wrbufcnt_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "voq2context_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "cand_rel_fifo_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "in_cand_rel_fifo_set_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "in_cand_rel_fifo_clr_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "context_release_eligible_set_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "context_release_eligible_clr_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "context_in_dram_set_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "context_in_dram_clr_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "context_map_valid_set_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "context_map_valid_clr_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "contextfbm_bmp_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "new_voq_set_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "new_voq_clr_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "voq_properties_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "static_mapping_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "context_allocate_set_master_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "context_allocate_set_slave_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "context_allocate_clr_master_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "context_allocate_clr_slave_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "context_allocate_grant_set_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "context_allocate_grant_clr_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "context2voq_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "rqm_free_fifo_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "voqcgm_profile_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "buffers_consumption_lut_for_enq_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "pd_consumption_lut_for_enq_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "voq_enq_rpt_size_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "voq_deq_rpt_size_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "last_rpt_enq_set_mem_ecc_2b_err_initiate",
        36,
        1
      ],
      [
        "last_rpt_enq_set_mem_extra_ecc_2b_err_initiate",
        37,
        1
      ],
      [
        "last_rpt_enq_clr_mem_ecc_2b_err_initiate",
        38,
        1
      ],
      [
        "last_rpt_enq_clr_mem_extra_ecc_2b_err_initiate",
        39,
        1
      ],
      [
        "voq_tenq_head_enq_ecc_2b_err_initiate",
        40,
        1
      ],
      [
        "voq_tenq_head_rd_ecc_2b_err_initiate",
        41,
        1
      ],
      [
        "voq_tenq_head_msb_enq_ecc_2b_err_initiate",
        42,
        1
      ],
      [
        "voq_tenq_head_msb_rd_ecc_2b_err_initiate",
        43,
        1
      ],
      [
        "head_time_enq_set_mem_ecc_2b_err_initiate",
        44,
        1
      ],
      [
        "head_time_enq_set_mem_extra_ecc_2b_err_initiate",
        45,
        1
      ],
      [
        "head_time_enq_clr_mem_ecc_2b_err_initiate",
        46,
        1
      ],
      [
        "head_time_enq_clr_mem_extra_ecc_2b_err_initiate",
        47,
        1
      ],
      [
        "is_aging_set_mem_ecc_2b_err_initiate",
        48,
        1
      ],
      [
        "is_aging_clr_mem_ecc_2b_err_initiate",
        49,
        1
      ],
      [
        "admission_result_dram_ecc_2b_err_initiate",
        50,
        1
      ],
      [
        "drop_green_probability_selector_ecc_2b_err_initiate",
        51,
        1
      ],
      [
        "drop_yellow_probability_selector_ecc_2b_err_initiate",
        52,
        1
      ]
    ]
  },
  "pdvoq_slice_mem_protect_err_status": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 53,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "rdrqsn_err_int",
        0,
        1
      ],
      [
        "rdsn_err_int",
        1,
        1
      ],
      [
        "rdbc_err_int",
        2,
        1
      ],
      [
        "rdbufcnt_err_int",
        3,
        1
      ],
      [
        "wrrqsn_err_int",
        4,
        1
      ],
      [
        "wrsn_err_int",
        5,
        1
      ],
      [
        "wrbc_err_int",
        6,
        1
      ],
      [
        "wrbufcnt_err_int",
        7,
        1
      ],
      [
        "voq2context_err_int",
        8,
        1
      ],
      [
        "cand_rel_fifo_err_int",
        9,
        1
      ],
      [
        "in_cand_rel_fifo_set_err_int",
        10,
        1
      ],
      [
        "in_cand_rel_fifo_clr_err_int",
        11,
        1
      ],
      [
        "context_release_eligible_set_err_int",
        12,
        1
      ],
      [
        "context_release_eligible_clr_err_int",
        13,
        1
      ],
      [
        "context_in_dram_set_err_int",
        14,
        1
      ],
      [
        "context_in_dram_clr_err_int",
        15,
        1
      ],
      [
        "context_map_valid_set_err_int",
        16,
        1
      ],
      [
        "context_map_valid_clr_err_int",
        17,
        1
      ],
      [
        "contextfbm_bmp_err_int",
        18,
        1
      ],
      [
        "new_voq_set_err_int",
        19,
        1
      ],
      [
        "new_voq_clr_err_int",
        20,
        1
      ],
      [
        "voq_properties_err_int",
        21,
        1
      ],
      [
        "static_mapping_err_int",
        22,
        1
      ],
      [
        "context_allocate_set_master_err_int",
        23,
        1
      ],
      [
        "context_allocate_set_slave_err_int",
        24,
        1
      ],
      [
        "context_allocate_clr_master_err_int",
        25,
        1
      ],
      [
        "context_allocate_clr_slave_err_int",
        26,
        1
      ],
      [
        "context_allocate_grant_set_err_int",
        27,
        1
      ],
      [
        "context_allocate_grant_clr_err_int",
        28,
        1
      ],
      [
        "context2voq_err_int",
        29,
        1
      ],
      [
        "rqm_free_fifo_err_int",
        30,
        1
      ],
      [
        "voqcgm_profile_err_int",
        31,
        1
      ],
      [
        "buffers_consumption_lut_for_enq_err_int",
        32,
        1
      ],
      [
        "pd_consumption_lut_for_enq_err_int",
        33,
        1
      ],
      [
        "voq_enq_rpt_size_err_int",
        34,
        1
      ],
      [
        "voq_deq_rpt_size_err_int",
        35,
        1
      ],
      [
        "last_rpt_enq_set_mem_err_int",
        36,
        1
      ],
      [
        "last_rpt_enq_set_mem_extra_err_int",
        37,
        1
      ],
      [
        "last_rpt_enq_clr_mem_err_int",
        38,
        1
      ],
      [
        "last_rpt_enq_clr_mem_extra_err_int",
        39,
        1
      ],
      [
        "voq_tenq_head_enq_err_int",
        40,
        1
      ],
      [
        "voq_tenq_head_rd_err_int",
        41,
        1
      ],
      [
        "voq_tenq_head_msb_enq_err_int",
        42,
        1
      ],
      [
        "voq_tenq_head_msb_rd_err_int",
        43,
        1
      ],
      [
        "head_time_enq_set_mem_err_int",
        44,
        1
      ],
      [
        "head_time_enq_set_mem_extra_err_int",
        45,
        1
      ],
      [
        "head_time_enq_clr_mem_err_int",
        46,
        1
      ],
      [
        "head_time_enq_clr_mem_extra_err_int",
        47,
        1
      ],
      [
        "is_aging_set_mem_err_int",
        48,
        1
      ],
      [
        "is_aging_clr_mem_err_int",
        49,
        1
      ],
      [
        "admission_result_dram_err_int",
        50,
        1
      ],
      [
        "drop_green_probability_selector_err_int",
        51,
        1
      ],
      [
        "drop_yellow_probability_selector_err_int",
        52,
        1
      ]
    ]
  },
  "pdvoq_slice_selected_ser_error_info": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 18,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        16
      ],
      [
        "mem_err_type",
        16,
        2
      ]
    ]
  },
  "pdvoq_slice_ser_error_debug_configuration": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "pdvoq_slice_ecc_1b_err_debug": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdvoq_slice_ecc_2b_err_debug": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdvoq_slice_counter_timer": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pdvoq_slice_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pdvoq_slice_memory_access_timeout": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "pdvoq_slice_broadcast_config_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pdvoq_slice_memory_prot_bypass": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pdvoq_slice_soft_reset_configuration": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pdvoq_slice_mbist_configuration": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pdvoq_slice_power_down_configuration": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pdvoq_slice_spare_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pdvoq_slice_pmro_ctrl": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pdvoq_slice_pmro_status": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pdvoq_slice_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pdvoq_slice_mirror_bus_status": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_device_time_offset_cfg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pdvoq_slice_general_interrupt_register": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 8,
    "desc": "Interrupt",
    "fields": [
      [
        "rd_req_fifo_oveflow",
        0,
        1
      ],
      [
        "deq_req_fifo_overflow",
        1,
        1
      ],
      [
        "in_fifo_overflow",
        2,
        1
      ],
      [
        "dram_release_fifo_overflow",
        3,
        1
      ],
      [
        "ics_return_fifo_overflow",
        4,
        1
      ],
      [
        "cpu_return_fifo_overflow",
        5,
        1
      ],
      [
        "back_to_tail_fifo_overflow",
        6,
        1
      ],
      [
        "from_dram_cgm_fifo_overflow",
        7,
        1
      ]
    ]
  },
  "pdvoq_slice_general_interrupt_register_mask": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 8,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "rd_req_fifo_oveflow_mask",
        0,
        1
      ],
      [
        "deq_req_fifo_overflow_mask",
        1,
        1
      ],
      [
        "in_fifo_overflow_mask",
        2,
        1
      ],
      [
        "dram_release_fifo_overflow_mask",
        3,
        1
      ],
      [
        "ics_return_fifo_overflow_mask",
        4,
        1
      ],
      [
        "cpu_return_fifo_overflow_mask",
        5,
        1
      ],
      [
        "back_to_tail_fifo_overflow_mask",
        6,
        1
      ],
      [
        "from_dram_cgm_fifo_overflow_mask",
        7,
        1
      ]
    ]
  },
  "pdvoq_slice_general_interrupt_register_test": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 8,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "rd_req_fifo_oveflow_test",
        0,
        1
      ],
      [
        "deq_req_fifo_overflow_test",
        1,
        1
      ],
      [
        "in_fifo_overflow_test",
        2,
        1
      ],
      [
        "dram_release_fifo_overflow_test",
        3,
        1
      ],
      [
        "ics_return_fifo_overflow_test",
        4,
        1
      ],
      [
        "cpu_return_fifo_overflow_test",
        5,
        1
      ],
      [
        "back_to_tail_fifo_overflow_test",
        6,
        1
      ],
      [
        "from_dram_cgm_fifo_overflow_test",
        7,
        1
      ]
    ]
  },
  "pdvoq_slice_status_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 6,
    "desc": "Status",
    "fields": [
      [
        "init_active",
        0,
        6
      ]
    ]
  },
  "pdvoq_slice_debug_counters": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 140,
    "desc": "",
    "fields": [
      [
        "tsmon2pdvoq_count",
        0,
        20
      ],
      [
        "delete_no_context_count",
        20,
        20
      ],
      [
        "enqueue_rpt_count",
        40,
        20
      ],
      [
        "read_req_count",
        60,
        20
      ],
      [
        "dequeue_req_count",
        80,
        20
      ],
      [
        "dequeue_req_retransmit_count",
        100,
        20
      ],
      [
        "dequeue_rpt_count",
        120,
        20
      ]
    ]
  },
  "pdvoq_slice_fifos_debug_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 104,
    "desc": "",
    "fields": [
      [
        "rd_req_fifo_stat",
        0,
        5
      ],
      [
        "deq_req_fifo_stat",
        5,
        6
      ],
      [
        "in_fifo_stat",
        11,
        6
      ],
      [
        "dram_release_fifo_stat",
        17,
        6
      ],
      [
        "ics_return_fifo_stat",
        23,
        6
      ],
      [
        "cpu_return_fifo_stat",
        29,
        3
      ],
      [
        "back_to_tail_fifo_stat",
        32,
        5
      ],
      [
        "context_release_fifo_stat",
        37,
        13
      ],
      [
        "pool_fbm_stat",
        50,
        13
      ],
      [
        "delete_context_qsize",
        63,
        14
      ],
      [
        "tsmon2pdvoq_cbr_status",
        77,
        5
      ],
      [
        "total_pds_in_slice",
        82,
        17
      ],
      [
        "from_dram_cgm_fifo_stat",
        99,
        5
      ]
    ]
  },
  "pdvoq_slice_cmap_th_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 112,
    "desc": "Status",
    "fields": [
      [
        "context_pool_low_th",
        0,
        12
      ],
      [
        "context_pool_ret_th",
        12,
        12
      ],
      [
        "release_fifo_high_th",
        24,
        11
      ],
      [
        "total_free_buf",
        35,
        13
      ],
      [
        "not_empty_entry",
        48,
        64
      ]
    ]
  },
  "pdvoq_slice_slice_mode_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ]
    ]
  },
  "pdvoq_slice_almost_full_conf": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 56,
    "desc": "",
    "fields": [
      [
        "rqm2em_alm_full_cfg",
        0,
        6
      ],
      [
        "release_alm_full_cfg",
        6,
        5
      ],
      [
        "dram_release_alm_full_cfg",
        11,
        5
      ],
      [
        "ics_release_alm_full_cfg",
        16,
        5
      ],
      [
        "back_to_tail_alm_full_cfg",
        21,
        4
      ],
      [
        "rqm_del_deq_alm_full_cfg",
        25,
        5
      ],
      [
        "rqm_deq_req_alm_full_cfg",
        30,
        6
      ],
      [
        "rqm_rd_req_alm_full_cfg",
        36,
        5
      ],
      [
        "wqm_input_alm_full_cfg",
        41,
        6
      ],
      [
        "wqm_cbt_alm_full_cfg",
        47,
        5
      ],
      [
        "from_dram_cgm_alm_full_cfg",
        52,
        4
      ]
    ]
  },
  "pdvoq_slice_general_conf": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "ignore_cgm",
        0,
        1
      ],
      [
        "ucdv_discard_en",
        1,
        1
      ],
      [
        "fbm_rstn_cfg",
        2,
        1
      ]
    ]
  },
  "pdvoq_slice_compensation_per_ifg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 79,
    "desc": "",
    "fields": [
      [
        "ifg_per_source_if",
        0,
        64
      ],
      [
        "ifg0_compensation",
        64,
        7
      ],
      [
        "ifg1_compensation",
        71,
        7
      ],
      [
        "fabric_slice",
        78,
        1
      ]
    ]
  },
  "pdvoq_slice_dynamic_mapping_conf": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 89,
    "desc": "",
    "fields": [
      [
        "dynamic_mapping_th0",
        0,
        12
      ],
      [
        "dynamic_mapping_th1",
        12,
        12
      ],
      [
        "dynamic_mapping_profile",
        24,
        64
      ],
      [
        "chicken_context_release_en",
        88,
        1
      ]
    ]
  },
  "pdvoq_slice_cpu_return_context": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "return_context",
        0,
        12
      ]
    ]
  },
  "pdvoq_slice_cpu_return_context_status": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 1,
    "desc": "Status",
    "fields": [
      [
        "return_ready",
        0,
        1
      ]
    ]
  },
  "pdvoq_slice_bypass_select_cfg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 273,
    "desc": "Configurations for VOQ bypass select",
    "fields": [
      [
        "context_bypass_msb",
        0,
        16
      ],
      [
        "context_bypass_enable",
        16,
        256
      ],
      [
        "mc_packets_bypass_enable",
        272,
        1
      ]
    ]
  },
  "pdvoq_slice_deq_req_scrubber": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 50,
    "desc": "Deq req scrubber machine configuration",
    "fields": [
      [
        "deq_req_scrubber_en",
        0,
        1
      ],
      [
        "deq_req_scrubber_only_fifo",
        1,
        1
      ],
      [
        "deq_req_scrubber_min_period",
        2,
        12
      ],
      [
        "deq_req_scrubber_between_scans_delay",
        14,
        12
      ],
      [
        "deq_req_scrubber_max_context",
        26,
        12
      ],
      [
        "deq_req_scrubber_free_context_th",
        38,
        12
      ]
    ]
  },
  "pdvoq_slice_delete_queue_counter_id": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 3,
    "desc": "See field's description",
    "fields": [
      [
        "delete_counter_id",
        0,
        3
      ]
    ]
  },
  "pdvoq_slice_slice_cgm_profile": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 3,
    "desc": "CGM Global Configs",
    "fields": [
      [
        "counter_id",
        0,
        3
      ]
    ]
  },
  "pdvoq_slice_buffers_consumption_lut_for_deq": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 8,
    "desc": "LUT for dequeue marking in VOQ-CGM based on Buffer Consumption. Index in Array is {Profile,BufferAvailableLevel} Profile is 5 bits BufferAvailableLevel is quantized to 2 bits.",
    "fields": [
      [
        "deq_buffer_congestion_mark",
        0,
        8
      ]
    ]
  },
  "pdvoq_slice_pd_consumption_lut_for_deq": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 128,
    "desc": "LUT for dequeue marking in VOQ-CGM based on Pd Consumption. Decision is taken from offset {Profile,PktAvailableLevel} Profile is 5 bits PktAvailableLevel is quantized to 2 bits.",
    "fields": [
      [
        "deq_pkt_congestion_mark",
        0,
        128
      ]
    ]
  },
  "pdvoq_slice_voq_cgm_aging_machine_cnf": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 7,
    "desc": "ConfigRegisters for aging machine",
    "fields": [
      [
        "voq_cgm_aging_start_offset",
        0,
        6
      ],
      [
        "voq_cgm_aging_disable",
        6,
        1
      ]
    ]
  },
  "pdvoq_slice_voq_cgm_enq_time_fifo_cfg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 1,
    "desc": "Config Register for fifo that stores the enq time of a PD between read report and Deq Cmd ",
    "fields": [
      [
        "bypass_enq_time_fifo",
        0,
        1
      ]
    ]
  },
  "pdvoq_slice_voq_cgm_chicken_reg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "chicken_dram_cgm_updates_arb",
        0,
        1
      ],
      [
        "chicken_queue_is_evicted_dis",
        1,
        1
      ],
      [
        "chicken_en_wred_on_evicted",
        2,
        1
      ]
    ]
  },
  "pdvoq_slice_cgm_profile2_evicted_profile": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "Reduce bit usage by mapping 5 bit CGM Profile to 2 bit Evicted Profile",
    "fields": [
      [
        "evicted_profile",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_cong_exp_control": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 128,
    "desc": "Congestion experienced control register",
    "fields": [
      [
        "cong_exp_per_profile_th",
        0,
        128
      ]
    ]
  },
  "pdvoq_slice_voq_cgm_cfg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "use_tc_in_lut",
        0,
        1
      ]
    ]
  },
  "pdvoq_slice_trap_cfg": {
    "type": "register",
    "block": "pdvoq_slice",
    "width": 344,
    "desc": "Trap feature configuration register",
    "fields": [
      [
        "trap_context_num",
        0,
        12
      ],
      [
        "trap_context_profile",
        12,
        5
      ],
      [
        "trap_context_buf_th",
        17,
        14
      ],
      [
        "trap_context_pkt_th",
        31,
        14
      ],
      [
        "trap_bucket_mode",
        45,
        1
      ],
      [
        "trap_bucket_rate",
        46,
        24
      ],
      [
        "trap_bucket_max_size",
        70,
        24
      ],
      [
        "trap_bucket_high_th",
        94,
        24
      ],
      [
        "trap_bucket_token_size",
        118,
        14
      ],
      [
        "trap_probability_th",
        132,
        16
      ],
      [
        "trap_probability_pd_size0_th",
        148,
        16
      ],
      [
        "trap_probability_pd_size1_th",
        164,
        16
      ],
      [
        "trap_probability_pd_size2_th",
        180,
        16
      ],
      [
        "trap_probability_pd_size3_th",
        196,
        16
      ],
      [
        "trap_probability_pd_size4_th",
        212,
        16
      ],
      [
        "trap_probability_pd_size5_th",
        228,
        16
      ],
      [
        "trap_voq_range",
        244,
        64
      ],
      [
        "trap_en_per_drop_code",
        308,
        32
      ],
      [
        "trap_lfsr_seed",
        340,
        4
      ]
    ]
  },
  "pdvoq_slice_rdrqsn": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 14,
    "desc": "Read request sequence number, entry per queue, each entry is initialized to the entry number. The sequence number is incremented (RMW) every read-request command and written to an old sequence number value in case the ICS asks for retransmit (on dequeue-command).",
    "fields": [
      [
        "rdrqsndata",
        0,
        14
      ]
    ]
  },
  "pdvoq_slice_rdsn": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 14,
    "desc": "Read sequence number, entry per queue, each entry is initialized to the entry number.  The sequence number is incremented every dequeue-command from the ICS and read every enqueue-command by the write-queue-manager. ",
    "fields": [
      [
        "rdsndata",
        0,
        14
      ]
    ]
  },
  "pdvoq_slice_rdbc": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 23,
    "desc": "Read bytes count, entry per queue, initialized to 0. The read bytes count is incremented (RMW) with the packet size every dequeue-command from the ICS, and read every enqueue-command, 2R+W memory.",
    "fields": [
      [
        "rdbcdata",
        0,
        23
      ]
    ]
  },
  "pdvoq_slice_rdbufcnt": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 14,
    "desc": "Similar to rdbc but in SMS buffers. CGM need to know the queue size in SMS buffer units. SMS buffer is 384B.",
    "fields": [
      [
        "rdbufcntdata",
        0,
        14
      ]
    ]
  },
  "pdvoq_slice_wrrqsn": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 14,
    "desc": "Write request sequence number, entry per queue. Each entry is initialized to the entry number (in order to prevent pressure on the first exact-match core). The sequence number is incremented by the write-queue-manager (RMW) every enqueue-command, R+W (Two ports) memory.",
    "fields": [
      [
        "wrrqsndata",
        0,
        14
      ]
    ]
  },
  "pdvoq_slice_wrsn": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 14,
    "desc": "Write sequence number, entry per queue, each entry is initialized to the entry number.  The sequence number increments every write report (read-increment-write) and read every De-queue command, 2R+W memory. ",
    "fields": [
      [
        "wrsndata",
        0,
        14
      ]
    ]
  },
  "pdvoq_slice_wrbc": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 23,
    "desc": "Write bytes count, entry per queue, initialized to 0.  The write bytes count is incremented (RMW) in packet size every write-report and read every dequeue-command, 2R+W memory.",
    "fields": [
      [
        "wrbcdata",
        0,
        23
      ]
    ]
  },
  "pdvoq_slice_wrbufcnt": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 14,
    "desc": "Similar to wrbc but in SMS buffers. CGM need to know the queue size in SMS buffer units. SMS buffer is 384B.",
    "fields": [
      [
        "wrbufcntdata",
        0,
        14
      ]
    ]
  },
  "pdvoq_slice_voq2context": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 12,
    "desc": "context per voq. Managed by the context mapper.  Read by ICS when it receives credit-grant and need to translate the VOQ\\# to context.",
    "fields": [
      [
        "voq2context_data",
        0,
        12
      ]
    ]
  },
  "pdvoq_slice_cand_rel_fifo": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 12,
    "desc": "Fifo to hold context\\# released by the ICS",
    "fields": [
      [
        "context_to_release",
        0,
        12
      ]
    ]
  },
  "pdvoq_slice_in_cand_rel_fifo_set": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "The context resides in the CandRelFifo - set-clear-read to prevent double entries in the fifo",
    "fields": [
      [
        "ctx_rel_set",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_in_cand_rel_fifo_clr": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "The context resides in the CandRelFifo - set-clear-read to prevent double entries in the fifo",
    "fields": [
      [
        "ctx_rel_clr",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_context_release_eligible_set": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "The context is empty and thus ready for release SCRP",
    "fields": [
      [
        "ctx_rel_elgbl_set",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_context_release_eligible_clr": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "The context is empty and thus ready for release SCRP",
    "fields": [
      [
        "ctx_rel_elgbl_clr",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_context_in_dram_set": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "The context is in the DRAM and thus it is not ready for release SCR",
    "fields": [
      [
        "ctx_in_dram_set",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_context_in_dram_clr": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "The context is in the DRAM and thus it is not ready for release SCR",
    "fields": [
      [
        "ctx_in_dram_clr",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_context_map_valid_set": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "The context is mapped to VOQ (SCR)",
    "fields": [
      [
        "ctx_map_valid_set",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_context_map_valid_clr": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "The context is mapped to VOQ (SCR)",
    "fields": [
      [
        "ctx_map_valid_clr",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_contextfbm_bmp": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "bitmap memory for the free buffer manager",
    "fields": [
      [
        "contextfbm_bmpdata",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_new_voq_set": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "new_voq_set_bits",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_new_voq_clr": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "new_voq_clr_bits",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_voq_properties": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 128,
    "desc": "context per voq. Managed by the context mapper.  Read by ICS when it receives credit-grant and need to translate the VOQ\\# to context.",
    "fields": [
      [
        "profile",
        0,
        128
      ]
    ]
  },
  "pdvoq_slice_static_mapping": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "Mark the static context so they want be reused - returned to the pool",
    "fields": [
      [
        "static_mapping_bitmap",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_context_allocate_set_master": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "bitmap_a",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_context_allocate_set_slave": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "bitmap_b",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_context_allocate_clr_master": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "bitmap_c",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_context_allocate_clr_slave": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "bitmap_d",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_context_allocate_grant_set": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "credit allocate read port for credit grant",
    "fields": [
      [
        "bitmap_e",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_context_allocate_grant_clr": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "credit allocate read port for credit grant",
    "fields": [
      [
        "bitmap_f",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_context2voq": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 16,
    "desc": "credit allocate read port for credit grant",
    "fields": [
      [
        "context2voq_bits",
        0,
        16
      ]
    ]
  },
  "pdvoq_slice_rqm_free_fifo": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 33,
    "desc": "fifo for dequeue between RQM and the EMCs",
    "fields": [
      [
        "rqm_fifo_dat_bank",
        0,
        4
      ],
      [
        "rqm_fifo_dat_idx",
        4,
        15
      ],
      [
        "rqm_fifo_dat_buf",
        19,
        14
      ]
    ]
  },
  "pdvoq_slice_voqcgm_profile": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 5,
    "desc": "CGM profile per context used by voq_cgm",
    "fields": [
      [
        "cgm_profile",
        0,
        5
      ]
    ]
  },
  "pdvoq_slice_profile_buff_region_thresholds": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 210,
    "desc": "Per Profile Thresholds for max queue size in buffers to be included in Region X. i.e. if QsizeBuffRegion0 < QsizeBuff <= QsizeBuffRegion1 then the region is 1. If QsizeBuffRegion14 < QsizeBuff the region is 5",
    "fields": [
      [
        "qsize_buff_region",
        0,
        210
      ]
    ]
  },
  "pdvoq_slice_profile_pkt_region_thresholds": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 98,
    "desc": "Per Profile Thresholds for max queue size in PDs to be included in Region X. i.e. if QsizePktRegion0 < QsizePkts <= QsizePktRegion1 then the region is 1. If QsizePktRegion6 < QsizePkts the region is 7",
    "fields": [
      [
        "qsize_pkt_region",
        0,
        98
      ]
    ]
  },
  "pdvoq_slice_profile_pkt_enq_time_region_thresholds": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 120,
    "desc": "Per Profile Thresholds for Voq-Delay to be in Region X. i.e. if PdEnqTimeRegion0 < Qdelay <= PdEnqTimeRegion1 then region is 1. If PdEnqTimeRegion14 < Qdelay region is 15",
    "fields": [
      [
        "pkt_enq_time_region",
        0,
        120
      ]
    ]
  },
  "pdvoq_slice_buffers_consumption_lut_for_enq": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 176,
    "desc": "CGM Enqueue test LUT for queue size in buffers. The result of the test is a 3 bit decision for each of DropGreen, DropYellow, a 2 bit decision for CongestionMark, the decision is mapped to a probability threshold and then tested against a randomly generated value to decide if the relevant action is performed. In addition there is a 1 bit decision for EvictToDram. For drop green and drop yellow, the value 0 means no drop, and 7 means always drop, on all other values the relevant probablity LUT is accessed and the probability threshold for drop is calculated. For congestion marking, the value 0 means no marking, on 1,2 and 3 the relevant probability LUT is accessed and the probability threshold for marking is calculated. Every entry in memory holds 16 values for each decision type and the final decision is selected based on the 4 bit quantized queue delay level. Address in memory is: {Profile,RxpdrIngressCounterRegion,VoqSizeBuffersLevel} Profile is 5 bits. RxpdrIngressCounterRegion is 2 bits of Rxpdr's CounterA Utilization level. VoqSizeBuffersLevel is 4 bits and is the quantized queue size in buffers based on ProfileBuffRegionThresholds Memory.",
    "fields": [
      [
        "drop_green",
        0,
        48
      ],
      [
        "drop_yellow",
        48,
        48
      ],
      [
        "evict_to_dram",
        96,
        16
      ],
      [
        "mark_green",
        112,
        32
      ],
      [
        "mark_yellow",
        144,
        32
      ]
    ]
  },
  "pdvoq_slice_pd_consumption_lut_for_enq": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 80,
    "desc": "CGM Enqueue test LUT for queue size in PDs. The result of the test is a decision for DropGreen, DropYellow and CongestionMark. Every entry in memory holds 16 bits for each decision type and the final decision is selected based on the 4 bit quantized queue delay level. Address in memory is: {Profile,PdvoqPdCounter0Level,VoqSizePdsLevel} CGM logic implemented in memory. Profile is 5 bits. PdvoqPdCounter0Level is 2 bits of PDVOQ's PD Counter 0  Utilization level. VoqSizePdsLevel is 3 bits and is the quantized queue size in PDs based on ProfilePktRegionThresholds Memory.",
    "fields": [
      [
        "drop_green",
        0,
        16
      ],
      [
        "drop_yellow",
        16,
        16
      ],
      [
        "evict_to_dram",
        32,
        16
      ],
      [
        "mark_green",
        48,
        16
      ],
      [
        "mark_yellow",
        64,
        16
      ]
    ]
  },
  "pdvoq_slice_voq_enq_rpt_size": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 7,
    "desc": "Enq Report Qsize region per context for Enq pipe",
    "fields": [
      [
        "buff_region",
        0,
        4
      ],
      [
        "pkt_region",
        4,
        3
      ]
    ]
  },
  "pdvoq_slice_voq_deq_rpt_size": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 7,
    "desc": "Deq Report Qsize region per context for Enq pipe",
    "fields": [
      [
        "buff_region",
        0,
        4
      ],
      [
        "pkt_region",
        4,
        3
      ]
    ]
  },
  "pdvoq_slice_last_rpt_enq_set_mem": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Set part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "enq_valid",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_last_rpt_enq_set_mem_extra": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Set part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "enq_valid",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_last_rpt_enq_clr_mem": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Clr part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "deq_valid",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_last_rpt_enq_clr_mem_extra": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Clr part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "deq_valid",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_voq_tenq_head_enq": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 8,
    "desc": "Enq time for CGM",
    "fields": [
      [
        "t_enq",
        0,
        8
      ]
    ]
  },
  "pdvoq_slice_voq_tenq_head_rd": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 8,
    "desc": "Voq Head time for CGM",
    "fields": [
      [
        "t_enq",
        0,
        8
      ]
    ]
  },
  "pdvoq_slice_voq_tenq_head_msb_enq": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 2,
    "desc": "Enq time for CGM",
    "fields": [
      [
        "t_enq",
        0,
        2
      ]
    ]
  },
  "pdvoq_slice_voq_tenq_head_msb_rd": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 2,
    "desc": "Voq Head time for CGM",
    "fields": [
      [
        "t_enq",
        0,
        2
      ]
    ]
  },
  "pdvoq_slice_head_time_enq_set_mem": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Set part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "enq_valid",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_head_time_enq_set_mem_extra": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Set part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "enq_valid",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_head_time_enq_clr_mem": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Clr part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "deq_valid",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_head_time_enq_clr_mem_extra": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Clr part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "deq_valid",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_is_aging_set_mem": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Set part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "aging",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_is_aging_clr_mem": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 32,
    "desc": "Set part of Set Clear Red Memory Needs to be initiated to 0",
    "fields": [
      [
        "aging",
        0,
        32
      ]
    ]
  },
  "pdvoq_slice_admission_result_dram": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 8,
    "desc": "Dram Admission Result Memory",
    "fields": [
      [
        "admission_result",
        0,
        2
      ],
      [
        "marking_result",
        2,
        2
      ],
      [
        "wred_region",
        4,
        4
      ]
    ]
  },
  "pdvoq_slice_prob_lut": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 17,
    "desc": "This table contain 32 values for WRED. Each value is a 17 bits probablity threshold, the address is calculated through the relevant dereference table.",
    "fields": [
      [
        "probability_entry",
        0,
        17
      ]
    ]
  },
  "pdvoq_slice_drop_green_probability_selector": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 30,
    "desc": "This table is used to calculate the drop probability of green packets. The 5 bit output is then used as address to the dereference table ProbLut to retrieve the actual 17 bits probability threshold. The address is packed as {PacketSizeRange, Profile} Each address contains 6 entries and DropGreenProbabilityLevel selects the entry. PacketSizeRange is a 3 bits fixed quantization of the size in bytes of the current packet, the quantization is  0 - up to 127 bytes 1 - 128 bytes to 255 bytes 2 - 256 bytes to 511 bytes 3 - 512 bytes to 1k-1 bytes 4 - 1k bytes to 2k-1 bytes 5 - 2k bytes and up 6,7 - unused Profile is 5 bits and is the CGM profile for this VOQ. DropGreenProbabilityLevel is 3 bit and is a result of the output of BuffersConsumptionLutForEnq for DropGreen. DropGreenProbabilityLevel relevant values are 1 through 6. Reminder : DropGreen == 0 means never drop and DropGreen == 7 means always drop.",
    "fields": [
      [
        "drop_green_probability_select",
        0,
        30
      ]
    ]
  },
  "pdvoq_slice_drop_yellow_probability_selector": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 30,
    "desc": "This table is used to calculate the drop probability of Yellow packets. The 5 bit output is then used as address to the dereference table ProbLut to retrieve the actual 17 bits probability threshold. The address is packed as {PacketSizeRange, Profile} Each address contains 6 entries and DropYellowProbabilityLevel selects the entry. PacketSizeRange is a 3 bits fixed quantization of the size in bytes of the current packet, the quantization is  0 - up to 127 bytes 1 - 128 bytes to 255 bytes 2 - 256 bytes to 511 bytes 3 - 512 bytes to 1k-1 bytes 4 - 1k bytes to 2k-1 bytes 5 - 2k bytes and up 6,7 - unused Profile is 5 bits and is the CGM profile for this VOQ. DropYellowProbabilityLevel is 3 bit and is a result of the output of BuffersConsumptionLutForEnq for DropYellow. DropYellowProbabilityLevel relevant values are 1 through 6. Reminder : DropYellow == 0 means never drop and DropYellow == 7 means always drop.",
    "fields": [
      [
        "drop_yellow_probability_select",
        0,
        30
      ]
    ]
  },
  "pdvoq_slice_mark_probability_selector": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 30,
    "desc": "This table is used to calculate the congestion marking probability of packets. The 5 bit output is then used as address to the dereference table ProbLut to retrieve the actual 17 bits probability threshold. The address is packed as {PacketSizeRange, Profile} MarkProbabilityLevel selects entry is used. PacketSizeRange is a 3 bits fixed quantization of the size in bytes of the current packet, the quantization is  0 - up to 127 bytes 1 - 128 bytes to 255 bytes 2 - 256 bytes to 511 bytes 3 - 512 bytes to 1k-1 bytes 4 - 1k bytes to 2k-1 bytes 5 - 2k bytes and up 6,7 - unused Profile is 5 bits and is the CGM profile for this VOQ. MarkProbabilityLevel is 2 bit and is a result of the output of BuffersConsumptionLutForEnq for CongestionMark such that  0 - Mark ==  1 1 - Mark == 2 2 - Mark == 3  Reminder : Mark == 0 means never mark.",
    "fields": [
      [
        "mark_green_select",
        0,
        15
      ],
      [
        "mark_yellow_select",
        15,
        15
      ]
    ]
  },
  "pdvoq_slice_evicted_buffers_consumption_lut": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 2,
    "desc": "CGM Enqueue test LUT for queue size in buffers for evicted queues. The result of the test is a 1 bit decision for each of DropGreen, DropYellow. Address in memory is: {TotalEvictedBuffers,EvictedProfile,RxpdrIngressCounterRegion,VoqSizeBuffersLevel} TotalEvictedBuffers - 2 bit level of total DRAM bound SMS buffers. EvictedProfile is 2 bits profile resulting from mapping the CGM profile to the EvictedProfile. RxpdrIngressCounterRegion is 2 bits of Rxpdr's CounterA Utilization level. VoqSizeBuffersLevel is 4 bits and is the quantized queue size in buffers based on ProfileBuffRegionThresholds Memory.",
    "fields": [
      [
        "drop_green",
        0,
        1
      ],
      [
        "drop_yellow",
        1,
        1
      ]
    ]
  },
  "pdvoq_slice_evicted_ok_lut": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 2,
    "desc": "CGM Enqueue test LUT for eviction decision based on available DRAM context level and total DRAM bound SMS buffers.. The result of the test is a 1 bit indication of prevent eviction to DRAM and another 1 bit indication of drop PD on evict decision. Address in memory is: {TotalEvictedBuffers,FreeDRAMContextLevel,Profile} TotalEvictedBuffers - 2 bit level of total DRAM bound SMS buffers. Profile is 5 bits CGM profile. ",
    "fields": [
      [
        "eviction_ok",
        0,
        1
      ],
      [
        "drop_on_eviction",
        1,
        1
      ]
    ]
  },
  "pdvoq_slice_dram_wred_lut": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 20,
    "desc": "DRAM WRED probability selector LUT. The result of the test is a 5 bit index into ProbLut to select probability of each action. Actions are DropGreen, DropYellow, MarkGreen, MarkYellow. Address in memory is: {Profile,PacketSizeRange,DramWredBufferFillLevel} Profile is 5 bits CGM profile. PacketSizeRange is 3 bits as described in DropGreenProbabilitySelector DramWredBufferFillLevel - 4 bit quantized average queue size in DRAM for WRED. ",
    "fields": [
      [
        "drop_green_prob_idx",
        0,
        5
      ],
      [
        "drop_yellow_prob_idx",
        5,
        5
      ],
      [
        "mark_green_prob_idx",
        10,
        5
      ],
      [
        "mark_yellow_prob_idx",
        15,
        5
      ]
    ]
  },
  "pdvoq_slice_deq_buffers_consumption_lut": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "LUT for determining congestion level on packets at dequeue from PDVOQ buffers fill level Address is {Profile,BufferAvailableLevel,VoqBufferFillLevel} Profile is 5 bits BufferAvailableLevel is quantized to 2 bits. VoqSizeBuffersLevel is 4 bits and is the quantized queue size in buffers based on ProfileBuffRegionThresholds Memory.",
    "fields": [
      [
        "congestion_level",
        0,
        64
      ]
    ]
  },
  "pdvoq_slice_deq_p_ds_consumption_lut": {
    "type": "memory",
    "block": "pdvoq_slice",
    "width": 64,
    "desc": "LUT for determining congestion level on packets at dequeue from PDVOQ based on PD fill level. Address is {Profile,PdPoolAvailableLevel,VoqPdFillLevel} Profile is 5 bits PdPoolAvailableLevel is quantized to 2 bits. VoqPdFillLevel is 3 bits and is the quantized queue size in Pds.",
    "fields": [
      [
        "congestion_level",
        0,
        64
      ]
    ]
  },
  "pdvoq_shared_mma_interrupt_register": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ],
      [
        "cgm_counter_overflow_int_summary",
        2,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_mem_protect_interrupt": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 36,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "rd_req_fifo0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "rd_req_fifo1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "rd_req_fifo2_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "rd_req_fifo3_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "rd_req_fifo4_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "rd_req_fifo5_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "rd_result_fifo0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "rd_result_fifo1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "rd_result_fifo2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "rd_result_fifo3_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "rd_result_fifo4_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "rd_result_fifo5_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "delete_context_fifo0_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "delete_context_fifo1_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "delete_context_fifo2_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "delete_context_fifo3_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "delete_context_fifo4_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "delete_context_fifo5_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "voq_bypass_fifo0_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "voq_bypass_fifo1_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "voq_bypass_fifo2_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "voq_bypass_fifo3_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "voq_bypass_fifo4_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "voq_bypass_fifo5_ecc_1b_err_interrupt_mask",
        35,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 36,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "rd_req_fifo0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "rd_req_fifo1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "rd_req_fifo2_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "rd_req_fifo3_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "rd_req_fifo4_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "rd_req_fifo5_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "rd_result_fifo0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "rd_result_fifo1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "rd_result_fifo2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "rd_result_fifo3_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "rd_result_fifo4_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "rd_result_fifo5_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "delete_context_fifo0_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "delete_context_fifo1_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "delete_context_fifo2_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "delete_context_fifo3_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "delete_context_fifo4_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "delete_context_fifo5_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "voq_bypass_fifo0_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "voq_bypass_fifo1_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "voq_bypass_fifo2_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "voq_bypass_fifo3_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "voq_bypass_fifo4_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "voq_bypass_fifo5_ecc_2b_err_interrupt_mask",
        35,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 36,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "rd_req_fifo0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "rd_req_fifo1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "rd_req_fifo2_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "rd_req_fifo3_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "rd_req_fifo4_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "rd_req_fifo5_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "rd_result_fifo0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "rd_result_fifo1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "rd_result_fifo2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "rd_result_fifo3_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "rd_result_fifo4_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "rd_result_fifo5_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "delete_context_fifo0_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "delete_context_fifo1_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "delete_context_fifo2_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "delete_context_fifo3_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "delete_context_fifo4_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "delete_context_fifo5_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "voq_bypass_fifo0_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "voq_bypass_fifo1_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "voq_bypass_fifo2_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "voq_bypass_fifo3_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "voq_bypass_fifo4_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "voq_bypass_fifo5_ecc_1b_err_initiate",
        35,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 36,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "wr_req_fifo0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "wr_req_fifo1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "wr_req_fifo2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "wr_req_fifo3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "wr_req_fifo4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "wr_req_fifo5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "rd_req_fifo0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "rd_req_fifo1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "rd_req_fifo2_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "rd_req_fifo3_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "rd_req_fifo4_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "rd_req_fifo5_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "rd_result_fifo0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "rd_result_fifo1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "rd_result_fifo2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "rd_result_fifo3_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "rd_result_fifo4_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "rd_result_fifo5_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "delete_context_fifo0_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "delete_context_fifo1_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "delete_context_fifo2_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "delete_context_fifo3_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "delete_context_fifo4_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "delete_context_fifo5_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "voq_bypass_fifo0_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "voq_bypass_fifo1_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "voq_bypass_fifo2_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "voq_bypass_fifo3_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "voq_bypass_fifo4_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "voq_bypass_fifo5_ecc_2b_err_initiate",
        35,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_mem_protect_err_status": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 36,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "wr_req_fifo0_err_int",
        0,
        1
      ],
      [
        "wr_req_fifo1_err_int",
        1,
        1
      ],
      [
        "wr_req_fifo2_err_int",
        2,
        1
      ],
      [
        "wr_req_fifo3_err_int",
        3,
        1
      ],
      [
        "wr_req_fifo4_err_int",
        4,
        1
      ],
      [
        "wr_req_fifo5_err_int",
        5,
        1
      ],
      [
        "rd_req_fifo0_err_int",
        6,
        1
      ],
      [
        "rd_req_fifo1_err_int",
        7,
        1
      ],
      [
        "rd_req_fifo2_err_int",
        8,
        1
      ],
      [
        "rd_req_fifo3_err_int",
        9,
        1
      ],
      [
        "rd_req_fifo4_err_int",
        10,
        1
      ],
      [
        "rd_req_fifo5_err_int",
        11,
        1
      ],
      [
        "rd_result_fifo0_err_int",
        12,
        1
      ],
      [
        "rd_result_fifo1_err_int",
        13,
        1
      ],
      [
        "rd_result_fifo2_err_int",
        14,
        1
      ],
      [
        "rd_result_fifo3_err_int",
        15,
        1
      ],
      [
        "rd_result_fifo4_err_int",
        16,
        1
      ],
      [
        "rd_result_fifo5_err_int",
        17,
        1
      ],
      [
        "pre_shr_wr_fifo0_err_int",
        18,
        1
      ],
      [
        "pre_shr_wr_fifo1_err_int",
        19,
        1
      ],
      [
        "pre_shr_wr_fifo2_err_int",
        20,
        1
      ],
      [
        "pre_shr_wr_fifo3_err_int",
        21,
        1
      ],
      [
        "pre_shr_wr_fifo4_err_int",
        22,
        1
      ],
      [
        "pre_shr_wr_fifo5_err_int",
        23,
        1
      ],
      [
        "delete_context_fifo0_err_int",
        24,
        1
      ],
      [
        "delete_context_fifo1_err_int",
        25,
        1
      ],
      [
        "delete_context_fifo2_err_int",
        26,
        1
      ],
      [
        "delete_context_fifo3_err_int",
        27,
        1
      ],
      [
        "delete_context_fifo4_err_int",
        28,
        1
      ],
      [
        "delete_context_fifo5_err_int",
        29,
        1
      ],
      [
        "voq_bypass_fifo0_err_int",
        30,
        1
      ],
      [
        "voq_bypass_fifo1_err_int",
        31,
        1
      ],
      [
        "voq_bypass_fifo2_err_int",
        32,
        1
      ],
      [
        "voq_bypass_fifo3_err_int",
        33,
        1
      ],
      [
        "voq_bypass_fifo4_err_int",
        34,
        1
      ],
      [
        "voq_bypass_fifo5_err_int",
        35,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_selected_ser_error_info": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 10,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        8
      ],
      [
        "mem_err_type",
        8,
        2
      ]
    ]
  },
  "pdvoq_shared_mma_ser_error_debug_configuration": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_ecc_1b_err_debug": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdvoq_shared_mma_ecc_2b_err_debug": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pdvoq_shared_mma_counter_timer": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pdvoq_shared_mma_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_broadcast_config_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pdvoq_shared_mma_memory_prot_bypass": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_soft_reset_configuration": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_mbist_configuration": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pdvoq_shared_mma_power_down_configuration": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_spare_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pdvoq_shared_mma_pmro_ctrl": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pdvoq_shared_mma_pmro_status": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pdvoq_shared_mma_mirror_bus_status": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pdvoq_shared_mma_device_time_offset_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pdvoq_shared_mma_general_interrupt_register": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 2,
    "desc": "Interrupt",
    "fields": [
      [
        "delete_context_fifo_overflow",
        0,
        1
      ],
      [
        "pre_shr_fifo_overflow",
        1,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_general_interrupt_register_mask": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 2,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "delete_context_fifo_overflow_mask",
        0,
        1
      ],
      [
        "pre_shr_fifo_overflow_mask",
        1,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_general_interrupt_register_test": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 2,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "delete_context_fifo_overflow_test",
        0,
        1
      ],
      [
        "pre_shr_fifo_overflow_test",
        1,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_slice_mode_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ]
    ]
  },
  "pdvoq_shared_mma_debug_counters": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "read_rpt_count",
        0,
        16
      ]
    ]
  },
  "pdvoq_shared_mma_debug_fifo_stat": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 22,
    "desc": "",
    "fields": [
      [
        "delete_context_fifo_size",
        0,
        7
      ],
      [
        "dequeue_marking_fifo_stat",
        7,
        10
      ],
      [
        "rqm_to_shr_fifo_stat",
        17,
        5
      ]
    ]
  },
  "pdvoq_shared_mma_last_in_pd": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd",
        0,
        32
      ]
    ]
  },
  "pdvoq_shared_mma_debug_conf": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "pd_mux_sel",
        0,
        6
      ]
    ]
  },
  "pdvoq_shared_mma_global_conf": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 27,
    "desc": "Global Config",
    "fields": [
      [
        "enq_time_units",
        0,
        1
      ],
      [
        "delete_context_priority_weight",
        1,
        4
      ],
      [
        "delete_context_high_priority",
        5,
        8
      ],
      [
        "delete_context_max_qsize",
        13,
        8
      ],
      [
        "empd_slowdown_rate",
        21,
        5
      ],
      [
        "enable_database_alm_full",
        26,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_compensation_per_ifg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 88,
    "desc": "",
    "fields": [
      [
        "ifg_per_source_if",
        0,
        64
      ],
      [
        "ifg0_compensation",
        64,
        7
      ],
      [
        "ifg1_compensation",
        71,
        7
      ],
      [
        "use_sch_comp_for_counters",
        78,
        1
      ],
      [
        "fabric_slice",
        79,
        1
      ],
      [
        "override_sch_comp",
        80,
        1
      ],
      [
        "override_sch_comp_val",
        81,
        7
      ]
    ]
  },
  "pdvoq_shared_mma_almost_full_conf": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 39,
    "desc": "Global Config",
    "fields": [
      [
        "mma_req_alm_full_th",
        0,
        4
      ],
      [
        "reorder_alm_full_cfg",
        4,
        8
      ],
      [
        "rqm_to_shr_fifo_alm_full_th",
        12,
        5
      ],
      [
        "dequeue_marking_fifo_alm_full_th",
        17,
        9
      ],
      [
        "pre_shr_fifo_alm_full_th",
        26,
        6
      ],
      [
        "delete_context_fifo_alm_full_th",
        32,
        7
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_overflow_int": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 1,
    "desc": "Overflow/Underflow Interrupt",
    "fields": [
      [
        "cgm_counter_overflow",
        0,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_overflow_int_mask": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 1,
    "desc": "This register masks CgmCounterOverflowInt interrupt register",
    "fields": [
      [
        "cgm_counter_overflow_mask",
        0,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_overflow_int_test": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 1,
    "desc": "This register tests CgmCounterOverflowInt interrupt register",
    "fields": [
      [
        "cgm_counter_overflow_test",
        0,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_thresholds": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 108,
    "desc": "Thresholds for CGM drop per pool",
    "fields": [
      [
        "total_th",
        0,
        18
      ],
      [
        "uc_th",
        18,
        18
      ],
      [
        "mc_th",
        36,
        18
      ],
      [
        "ms_uc_th",
        54,
        18
      ],
      [
        "ms_mc_th",
        72,
        18
      ],
      [
        "ms_uc_sch_th",
        90,
        18
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counters_max": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 72,
    "desc": "Max Values for CGM per pool counter. Crossing the value will raise interrupt",
    "fields": [
      [
        "uc_max_value",
        0,
        18
      ],
      [
        "mc_max_value",
        18,
        18
      ],
      [
        "ms_uc_max_value",
        36,
        18
      ],
      [
        "ms_mc_max_value",
        54,
        18
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_values": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 72,
    "desc": "Current values for cgm counters",
    "fields": [
      [
        "counter_uc",
        0,
        18
      ],
      [
        "counter_mc",
        18,
        18
      ],
      [
        "counter_ms_uc",
        36,
        18
      ],
      [
        "counter_ms_mc",
        54,
        18
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_pool_available_region": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 216,
    "desc": "Free level thresholds for UC region to determine PD pool available level ",
    "fields": [
      [
        "uc_region0",
        0,
        18
      ],
      [
        "uc_region1",
        18,
        18
      ],
      [
        "uc_region2",
        36,
        18
      ],
      [
        "mc_region0",
        54,
        18
      ],
      [
        "mc_region1",
        72,
        18
      ],
      [
        "mc_region2",
        90,
        18
      ],
      [
        "ms_uc_region0",
        108,
        18
      ],
      [
        "ms_uc_region1",
        126,
        18
      ],
      [
        "ms_uc_region2",
        144,
        18
      ],
      [
        "ms_mc_region0",
        162,
        18
      ],
      [
        "ms_mc_region1",
        180,
        18
      ],
      [
        "ms_mc_region2",
        198,
        18
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_wmk": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 72,
    "desc": "Watermark values of counters",
    "fields": [
      [
        "counter_uc_wmk",
        0,
        18
      ],
      [
        "counter_mc_wmk",
        18,
        18
      ],
      [
        "counter_ms_uc_wmk",
        36,
        18
      ],
      [
        "counter_ms_mc_wmk",
        54,
        18
      ]
    ]
  },
  "pdvoq_shared_mma_voq_counter_range": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 64,
    "desc": "Define voq range for instrumentation counters.  4 Per Slice Counter is enabled if either the range matches or the profile map matches. ",
    "fields": [
      [
        "min_voq",
        0,
        16
      ],
      [
        "max_voq",
        16,
        16
      ],
      [
        "count_en_profile",
        32,
        32
      ]
    ]
  },
  "pdvoq_shared_mma_voq_counters": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 264,
    "desc": "voq statistics",
    "fields": [
      [
        "enqueued_packets",
        0,
        48
      ],
      [
        "dropped_packets",
        48,
        24
      ],
      [
        "ecn_marked_packets",
        72,
        24
      ],
      [
        "fcn_marked_packets",
        96,
        24
      ],
      [
        "enqueued_bytes",
        120,
        54
      ],
      [
        "dropped_bytes",
        174,
        30
      ],
      [
        "ecn_marked_bytes",
        204,
        30
      ],
      [
        "fcn_marked_bytes",
        234,
        30
      ]
    ]
  },
  "pdvoq_shared_mma_congestion_tracking_counter_set_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 64,
    "desc": "Voq range per slice per counter set to enable the functionality of: LargestVoqBuf LargestVoqPkt MaxCongLevelVoq DropCountVoq",
    "fields": [
      [
        "counter_set0_min_voq",
        0,
        16
      ],
      [
        "counter_set0_max_voq",
        16,
        16
      ],
      [
        "counter_set1_min_voq",
        32,
        16
      ],
      [
        "counter_set1_max_voq",
        48,
        16
      ]
    ]
  },
  "pdvoq_shared_mma_largest_voq_buf": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 240,
    "desc": "Largest Voq in buffers watermark, 4 per slice",
    "fields": [
      [
        "counter_set0_largest_voq_buf_num",
        0,
        64
      ],
      [
        "counter_set0_largest_voq_buf_size",
        64,
        56
      ],
      [
        "counter_set1_largest_voq_buf_num",
        120,
        64
      ],
      [
        "counter_set1_largest_voq_buf_size",
        184,
        56
      ]
    ]
  },
  "pdvoq_shared_mma_largest_voq_pkt": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 240,
    "desc": "Largest Voq in PDs watermark, 4 per slice",
    "fields": [
      [
        "counter_set0_largest_voq_pkt_num",
        0,
        64
      ],
      [
        "counter_set0_largest_voq_pkt_size",
        64,
        56
      ],
      [
        "counter_set1_largest_voq_pkt_num",
        120,
        64
      ],
      [
        "counter_set1_largest_voq_pkt_size",
        184,
        56
      ]
    ]
  },
  "pdvoq_shared_mma_max_cong_level_voq": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 160,
    "desc": "Highest congestion level encountered watermark, 4 per slice",
    "fields": [
      [
        "counter_set0_max_cong_level_voq_num",
        0,
        64
      ],
      [
        "counter_set0_max_cong_level_voq_value",
        64,
        16
      ],
      [
        "counter_set1_max_cong_level_voq_num",
        80,
        64
      ],
      [
        "counter_set1_max_cong_level_voq_value",
        144,
        16
      ]
    ]
  },
  "pdvoq_shared_mma_drop_count_voq": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 770,
    "desc": "Count number of dropped packets per VOQ up to 8 VOQs per slice",
    "fields": [
      [
        "counter_set0_drop_count_voq_num",
        0,
        128
      ],
      [
        "counter_set0_drop_count_voq_value",
        128,
        256
      ],
      [
        "counter_set0_voq_with_drop_ovf",
        384,
        1
      ],
      [
        "counter_set1_drop_count_voq_num",
        385,
        128
      ],
      [
        "counter_set1_drop_count_voq_value",
        513,
        256
      ],
      [
        "counter_set1_voq_with_drop_ovf",
        769,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_voq_bypass_fifo_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 12,
    "desc": "VOQ bypass FIFO global configurations",
    "fields": [
      [
        "stop_bypass_threshold",
        0,
        6
      ],
      [
        "bypass_fifo_alm_full_cfg",
        6,
        6
      ]
    ]
  },
  "pdvoq_shared_mma_voq_bypass_fifo_debug": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 14,
    "desc": "VOQ bypass FIFO debug per slice",
    "fields": [
      [
        "voq_bypass_fifo_status",
        0,
        7
      ],
      [
        "voq_bypass_fifo_max_wmk",
        7,
        7
      ]
    ]
  },
  "pdvoq_shared_mma_voq_drop_counters": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 576,
    "desc": "per reason drop counters",
    "fields": [
      [
        "evicted_buffers_drop_yellow",
        0,
        48
      ],
      [
        "evicted_buffers_drop_green",
        48,
        48
      ],
      [
        "sms_buffers_drop_green",
        96,
        48
      ],
      [
        "sms_buffers_drop_yellow",
        144,
        48
      ],
      [
        "sms_pkts_drop_yellow",
        192,
        48
      ],
      [
        "sms_pkts_drop_green",
        240,
        48
      ],
      [
        "dram_lut_drop_yellow",
        288,
        48
      ],
      [
        "dram_lut_drop_green",
        336,
        48
      ],
      [
        "dram_wred_drop_yellow",
        384,
        48
      ],
      [
        "dram_wred_drop_green",
        432,
        48
      ],
      [
        "pd_pool_ovf_drop",
        480,
        48
      ],
      [
        "evict_not_ok_drop",
        528,
        48
      ]
    ]
  },
  "pdvoq_shared_mma_compensation_polarity_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "compensation_polarity",
        0,
        6
      ]
    ]
  },
  "pdvoq_shared_mma_trap_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "trap_voq_cfg",
        0,
        16
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_uc_hist_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 134,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "cgm_counter_uc_hist_th0",
        0,
        17
      ],
      [
        "cgm_counter_uc_hist_th1",
        17,
        17
      ],
      [
        "cgm_counter_uc_hist_th2",
        34,
        17
      ],
      [
        "cgm_counter_uc_hist_th3",
        51,
        17
      ],
      [
        "cgm_counter_uc_hist_th4",
        68,
        17
      ],
      [
        "cgm_counter_uc_hist_th5",
        85,
        17
      ],
      [
        "cgm_counter_uc_hist_th6",
        102,
        17
      ],
      [
        "cgm_counter_uc_hist_time_interval",
        119,
        15
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_uc_hist_status": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "cgm_counter_uc_hist_value0",
        0,
        32
      ],
      [
        "cgm_counter_uc_hist_overflow0",
        32,
        1
      ],
      [
        "cgm_counter_uc_hist_value1",
        33,
        32
      ],
      [
        "cgm_counter_uc_hist_overflow1",
        65,
        1
      ],
      [
        "cgm_counter_uc_hist_value2",
        66,
        32
      ],
      [
        "cgm_counter_uc_hist_overflow2",
        98,
        1
      ],
      [
        "cgm_counter_uc_hist_value3",
        99,
        32
      ],
      [
        "cgm_counter_uc_hist_overflow3",
        131,
        1
      ],
      [
        "cgm_counter_uc_hist_value4",
        132,
        32
      ],
      [
        "cgm_counter_uc_hist_overflow4",
        164,
        1
      ],
      [
        "cgm_counter_uc_hist_value5",
        165,
        32
      ],
      [
        "cgm_counter_uc_hist_overflow5",
        197,
        1
      ],
      [
        "cgm_counter_uc_hist_value6",
        198,
        32
      ],
      [
        "cgm_counter_uc_hist_overflow6",
        230,
        1
      ],
      [
        "cgm_counter_uc_hist_value7",
        231,
        32
      ],
      [
        "cgm_counter_uc_hist_overflow7",
        263,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_uc_hist_max_wmk_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 49,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "cgm_counter_uc_hist_max_wmk",
        0,
        17
      ],
      [
        "cgm_counter_uc_hist_max_wmk_time",
        17,
        32
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_mc_hist_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 134,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "cgm_counter_mc_hist_th0",
        0,
        17
      ],
      [
        "cgm_counter_mc_hist_th1",
        17,
        17
      ],
      [
        "cgm_counter_mc_hist_th2",
        34,
        17
      ],
      [
        "cgm_counter_mc_hist_th3",
        51,
        17
      ],
      [
        "cgm_counter_mc_hist_th4",
        68,
        17
      ],
      [
        "cgm_counter_mc_hist_th5",
        85,
        17
      ],
      [
        "cgm_counter_mc_hist_th6",
        102,
        17
      ],
      [
        "cgm_counter_mc_hist_time_interval",
        119,
        15
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_mc_hist_status": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "cgm_counter_mc_hist_value0",
        0,
        32
      ],
      [
        "cgm_counter_mc_hist_overflow0",
        32,
        1
      ],
      [
        "cgm_counter_mc_hist_value1",
        33,
        32
      ],
      [
        "cgm_counter_mc_hist_overflow1",
        65,
        1
      ],
      [
        "cgm_counter_mc_hist_value2",
        66,
        32
      ],
      [
        "cgm_counter_mc_hist_overflow2",
        98,
        1
      ],
      [
        "cgm_counter_mc_hist_value3",
        99,
        32
      ],
      [
        "cgm_counter_mc_hist_overflow3",
        131,
        1
      ],
      [
        "cgm_counter_mc_hist_value4",
        132,
        32
      ],
      [
        "cgm_counter_mc_hist_overflow4",
        164,
        1
      ],
      [
        "cgm_counter_mc_hist_value5",
        165,
        32
      ],
      [
        "cgm_counter_mc_hist_overflow5",
        197,
        1
      ],
      [
        "cgm_counter_mc_hist_value6",
        198,
        32
      ],
      [
        "cgm_counter_mc_hist_overflow6",
        230,
        1
      ],
      [
        "cgm_counter_mc_hist_value7",
        231,
        32
      ],
      [
        "cgm_counter_mc_hist_overflow7",
        263,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_mc_hist_max_wmk_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 49,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "cgm_counter_mc_hist_max_wmk",
        0,
        17
      ],
      [
        "cgm_counter_mc_hist_max_wmk_time",
        17,
        32
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_ms_uc_hist_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 134,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "cgm_counter_ms_uc_hist_th0",
        0,
        17
      ],
      [
        "cgm_counter_ms_uc_hist_th1",
        17,
        17
      ],
      [
        "cgm_counter_ms_uc_hist_th2",
        34,
        17
      ],
      [
        "cgm_counter_ms_uc_hist_th3",
        51,
        17
      ],
      [
        "cgm_counter_ms_uc_hist_th4",
        68,
        17
      ],
      [
        "cgm_counter_ms_uc_hist_th5",
        85,
        17
      ],
      [
        "cgm_counter_ms_uc_hist_th6",
        102,
        17
      ],
      [
        "cgm_counter_ms_uc_hist_time_interval",
        119,
        15
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_ms_uc_hist_status": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "cgm_counter_ms_uc_hist_value0",
        0,
        32
      ],
      [
        "cgm_counter_ms_uc_hist_overflow0",
        32,
        1
      ],
      [
        "cgm_counter_ms_uc_hist_value1",
        33,
        32
      ],
      [
        "cgm_counter_ms_uc_hist_overflow1",
        65,
        1
      ],
      [
        "cgm_counter_ms_uc_hist_value2",
        66,
        32
      ],
      [
        "cgm_counter_ms_uc_hist_overflow2",
        98,
        1
      ],
      [
        "cgm_counter_ms_uc_hist_value3",
        99,
        32
      ],
      [
        "cgm_counter_ms_uc_hist_overflow3",
        131,
        1
      ],
      [
        "cgm_counter_ms_uc_hist_value4",
        132,
        32
      ],
      [
        "cgm_counter_ms_uc_hist_overflow4",
        164,
        1
      ],
      [
        "cgm_counter_ms_uc_hist_value5",
        165,
        32
      ],
      [
        "cgm_counter_ms_uc_hist_overflow5",
        197,
        1
      ],
      [
        "cgm_counter_ms_uc_hist_value6",
        198,
        32
      ],
      [
        "cgm_counter_ms_uc_hist_overflow6",
        230,
        1
      ],
      [
        "cgm_counter_ms_uc_hist_value7",
        231,
        32
      ],
      [
        "cgm_counter_ms_uc_hist_overflow7",
        263,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_ms_uc_hist_max_wmk_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 49,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "cgm_counter_ms_uc_hist_max_wmk",
        0,
        17
      ],
      [
        "cgm_counter_ms_uc_hist_max_wmk_time",
        17,
        32
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_ms_mc_hist_cfg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 134,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "cgm_counter_ms_mc_hist_th0",
        0,
        17
      ],
      [
        "cgm_counter_ms_mc_hist_th1",
        17,
        17
      ],
      [
        "cgm_counter_ms_mc_hist_th2",
        34,
        17
      ],
      [
        "cgm_counter_ms_mc_hist_th3",
        51,
        17
      ],
      [
        "cgm_counter_ms_mc_hist_th4",
        68,
        17
      ],
      [
        "cgm_counter_ms_mc_hist_th5",
        85,
        17
      ],
      [
        "cgm_counter_ms_mc_hist_th6",
        102,
        17
      ],
      [
        "cgm_counter_ms_mc_hist_time_interval",
        119,
        15
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_ms_mc_hist_status": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "cgm_counter_ms_mc_hist_value0",
        0,
        32
      ],
      [
        "cgm_counter_ms_mc_hist_overflow0",
        32,
        1
      ],
      [
        "cgm_counter_ms_mc_hist_value1",
        33,
        32
      ],
      [
        "cgm_counter_ms_mc_hist_overflow1",
        65,
        1
      ],
      [
        "cgm_counter_ms_mc_hist_value2",
        66,
        32
      ],
      [
        "cgm_counter_ms_mc_hist_overflow2",
        98,
        1
      ],
      [
        "cgm_counter_ms_mc_hist_value3",
        99,
        32
      ],
      [
        "cgm_counter_ms_mc_hist_overflow3",
        131,
        1
      ],
      [
        "cgm_counter_ms_mc_hist_value4",
        132,
        32
      ],
      [
        "cgm_counter_ms_mc_hist_overflow4",
        164,
        1
      ],
      [
        "cgm_counter_ms_mc_hist_value5",
        165,
        32
      ],
      [
        "cgm_counter_ms_mc_hist_overflow5",
        197,
        1
      ],
      [
        "cgm_counter_ms_mc_hist_value6",
        198,
        32
      ],
      [
        "cgm_counter_ms_mc_hist_overflow6",
        230,
        1
      ],
      [
        "cgm_counter_ms_mc_hist_value7",
        231,
        32
      ],
      [
        "cgm_counter_ms_mc_hist_overflow7",
        263,
        1
      ]
    ]
  },
  "pdvoq_shared_mma_cgm_counter_ms_mc_hist_max_wmk_reg": {
    "type": "register",
    "block": "pdvoq_shared_mma",
    "width": 49,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "cgm_counter_ms_mc_hist_max_wmk",
        0,
        17
      ],
      [
        "cgm_counter_ms_mc_hist_max_wmk_time",
        17,
        32
      ]
    ]
  },
  "pdvoq_shared_mma_wr_req_fifo": {
    "type": "memory",
    "block": "pdvoq_shared_mma",
    "width": 174,
    "desc": "",
    "fields": [
      [
        "wr_req_fifodata",
        0,
        174
      ]
    ]
  },
  "pdvoq_shared_mma_rd_req_fifo": {
    "type": "memory",
    "block": "pdvoq_shared_mma",
    "width": 25,
    "desc": "",
    "fields": [
      [
        "rd_req_fifodata",
        0,
        25
      ]
    ]
  },
  "pdvoq_shared_mma_rd_result_fifo": {
    "type": "memory",
    "block": "pdvoq_shared_mma",
    "width": 202,
    "desc": "",
    "fields": [
      [
        "rd_result_fifodata",
        0,
        202
      ]
    ]
  },
  "pdvoq_shared_mma_pre_shr_wr_fifo": {
    "type": "memory",
    "block": "pdvoq_shared_mma",
    "width": 135,
    "desc": "",
    "fields": [
      [
        "pre_shr_wr_fifodata",
        0,
        135
      ]
    ]
  },
  "pdvoq_shared_mma_delete_context_fifo": {
    "type": "memory",
    "block": "pdvoq_shared_mma",
    "width": 91,
    "desc": "",
    "fields": [
      [
        "delete_context_fifodata",
        0,
        91
      ]
    ]
  },
  "pdvoq_shared_mma_voq_bypass_fifo": {
    "type": "memory",
    "block": "pdvoq_shared_mma",
    "width": 147,
    "desc": "",
    "fields": [
      [
        "voq_bypass_fifodata",
        0,
        147
      ]
    ]
  },
  "reassembly_interrupt_register": {
    "type": "register",
    "block": "reassembly",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "reassembly_mem_protect_interrupt": {
    "type": "register",
    "block": "reassembly",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "reassembly_mem_protect_interrupt_test": {
    "type": "register",
    "block": "reassembly",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "reassembly_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "reassembly",
    "width": 20,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "context_table0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "context_table1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "context_table2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "context_table3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "context_table4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "context_table5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "out_pd_fifo0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "out_pd_fifo1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "out_pd_fifo2_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "out_pd_fifo3_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "out_pd_fifo4_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "out_pd_fifo5_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "in_fifo0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "in_fifo1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "in_fifo2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "in_fifo3_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "in_fifo4_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "in_fifo5_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "dram_in_fifo_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "dram_out_pd_fifo_ecc_1b_err_interrupt_mask",
        19,
        1
      ]
    ]
  },
  "reassembly_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "reassembly",
    "width": 20,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "context_table0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "context_table1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "context_table2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "context_table3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "context_table4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "context_table5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "out_pd_fifo0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "out_pd_fifo1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "out_pd_fifo2_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "out_pd_fifo3_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "out_pd_fifo4_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "out_pd_fifo5_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "in_fifo0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "in_fifo1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "in_fifo2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "in_fifo3_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "in_fifo4_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "in_fifo5_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "dram_in_fifo_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "dram_out_pd_fifo_ecc_2b_err_interrupt_mask",
        19,
        1
      ]
    ]
  },
  "reassembly_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "reassembly",
    "width": 20,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "context_table0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "context_table1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "context_table2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "context_table3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "context_table4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "context_table5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "out_pd_fifo0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "out_pd_fifo1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "out_pd_fifo2_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "out_pd_fifo3_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "out_pd_fifo4_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "out_pd_fifo5_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "in_fifo0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "in_fifo1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "in_fifo2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "in_fifo3_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "in_fifo4_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "in_fifo5_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "dram_in_fifo_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "dram_out_pd_fifo_ecc_1b_err_initiate",
        19,
        1
      ]
    ]
  },
  "reassembly_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "reassembly",
    "width": 20,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "context_table0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "context_table1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "context_table2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "context_table3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "context_table4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "context_table5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "out_pd_fifo0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "out_pd_fifo1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "out_pd_fifo2_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "out_pd_fifo3_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "out_pd_fifo4_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "out_pd_fifo5_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "in_fifo0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "in_fifo1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "in_fifo2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "in_fifo3_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "in_fifo4_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "in_fifo5_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "dram_in_fifo_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "dram_out_pd_fifo_ecc_2b_err_initiate",
        19,
        1
      ]
    ]
  },
  "reassembly_mem_protect_err_status": {
    "type": "register",
    "block": "reassembly",
    "width": 20,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "context_table0_err_int",
        0,
        1
      ],
      [
        "context_table1_err_int",
        1,
        1
      ],
      [
        "context_table2_err_int",
        2,
        1
      ],
      [
        "context_table3_err_int",
        3,
        1
      ],
      [
        "context_table4_err_int",
        4,
        1
      ],
      [
        "context_table5_err_int",
        5,
        1
      ],
      [
        "out_pd_fifo0_err_int",
        6,
        1
      ],
      [
        "out_pd_fifo1_err_int",
        7,
        1
      ],
      [
        "out_pd_fifo2_err_int",
        8,
        1
      ],
      [
        "out_pd_fifo3_err_int",
        9,
        1
      ],
      [
        "out_pd_fifo4_err_int",
        10,
        1
      ],
      [
        "out_pd_fifo5_err_int",
        11,
        1
      ],
      [
        "in_fifo0_err_int",
        12,
        1
      ],
      [
        "in_fifo1_err_int",
        13,
        1
      ],
      [
        "in_fifo2_err_int",
        14,
        1
      ],
      [
        "in_fifo3_err_int",
        15,
        1
      ],
      [
        "in_fifo4_err_int",
        16,
        1
      ],
      [
        "in_fifo5_err_int",
        17,
        1
      ],
      [
        "dram_in_fifo_err_int",
        18,
        1
      ],
      [
        "dram_out_pd_fifo_err_int",
        19,
        1
      ]
    ]
  },
  "reassembly_selected_ser_error_info": {
    "type": "register",
    "block": "reassembly",
    "width": 12,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        10
      ],
      [
        "mem_err_type",
        10,
        2
      ]
    ]
  },
  "reassembly_ser_error_debug_configuration": {
    "type": "register",
    "block": "reassembly",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "reassembly_ecc_1b_err_debug": {
    "type": "register",
    "block": "reassembly",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "reassembly_ecc_2b_err_debug": {
    "type": "register",
    "block": "reassembly",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "reassembly_counter_timer": {
    "type": "register",
    "block": "reassembly",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "reassembly_counter_timer_trigger_reg": {
    "type": "register",
    "block": "reassembly",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "reassembly_memory_access_timeout": {
    "type": "register",
    "block": "reassembly",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "reassembly_broadcast_config_reg": {
    "type": "register",
    "block": "reassembly",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "reassembly_memory_prot_bypass": {
    "type": "register",
    "block": "reassembly",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "reassembly_soft_reset_configuration": {
    "type": "register",
    "block": "reassembly",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "reassembly_mbist_configuration": {
    "type": "register",
    "block": "reassembly",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "reassembly_power_down_configuration": {
    "type": "register",
    "block": "reassembly",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "reassembly_spare_reg": {
    "type": "register",
    "block": "reassembly",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "reassembly_pmro_ctrl": {
    "type": "register",
    "block": "reassembly",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "reassembly_pmro_status": {
    "type": "register",
    "block": "reassembly",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "reassembly_mirror_bus_conf_reg": {
    "type": "register",
    "block": "reassembly",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "reassembly_mirror_bus_status": {
    "type": "register",
    "block": "reassembly",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "reassembly_device_time_offset_cfg": {
    "type": "register",
    "block": "reassembly",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "reassembly_reassembly_conf_reg1": {
    "type": "register",
    "block": "reassembly",
    "width": 41,
    "desc": "This register was used for tuning parameters during the design phase. The value of these fields is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "ll_db_write_fifo_full_threshold",
        0,
        4
      ],
      [
        "in_fifo_ifg_pause_threshold",
        4,
        8
      ],
      [
        "in_fifo_rxpp_pause_threshold",
        12,
        8
      ],
      [
        "out_pd_fifo_full_threshold",
        20,
        7
      ],
      [
        "out_pd_control_fifo_full_threshold",
        27,
        7
      ],
      [
        "slice_disable_context_release",
        34,
        1
      ],
      [
        "slice_reassembly_credit_delay",
        35,
        5
      ],
      [
        "slice_disable_wait_for_fdll_credit",
        40,
        1
      ]
    ]
  },
  "reassembly_reassembly_slice_counters": {
    "type": "register",
    "block": "reassembly",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "incoming_packet_counter_slice",
        0,
        32
      ]
    ]
  },
  "reassembly_reassembly_counters": {
    "type": "register",
    "block": "reassembly",
    "width": 52,
    "desc": "",
    "fields": [
      [
        "slb_buffer_counter",
        0,
        19
      ],
      [
        "slb_buffer_counter_wraparound",
        19,
        1
      ],
      [
        "slb_drop_pkt_counter",
        20,
        32
      ]
    ]
  },
  "reassembly_slice_mode_reg": {
    "type": "register",
    "block": "reassembly",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ]
    ]
  },
  "reassembly_reassembly_pkt_rate_conf": {
    "type": "register",
    "block": "reassembly",
    "width": 24,
    "desc": "This register enables to limit the rate of packets that are sent from the reassembly to the next block.",
    "fields": [
      [
        "slice_pkt_rate_window",
        0,
        12
      ],
      [
        "slice_pkt_rate_num_of_pkts",
        12,
        12
      ]
    ]
  },
  "reassembly_reassembly_cgm_conf": {
    "type": "register",
    "block": "reassembly",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "reorder_slb_buffers_threshold",
        0,
        19
      ],
      [
        "slb_max_snr_context",
        19,
        13
      ]
    ]
  },
  "reassembly_status_register": {
    "type": "register",
    "block": "reassembly",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "reassembly_reassembly_last_in_pd_fd": {
    "type": "register",
    "block": "reassembly",
    "width": 80,
    "desc": "",
    "fields": [
      [
        "reassembly_last_incoming_pd",
        0,
        32
      ],
      [
        "reassembly_last_incoming_fd",
        32,
        16
      ],
      [
        "reassembly_last_incoming_dram_pd",
        48,
        16
      ],
      [
        "reassembly_last_incoming_dram_fd",
        64,
        16
      ]
    ]
  },
  "reassembly_reassembly_debug_conf": {
    "type": "register",
    "block": "reassembly",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd_mux_sel",
        0,
        6
      ],
      [
        "last_incoming_fd_mux_sel",
        6,
        5
      ],
      [
        "last_incoming_dram_pd_mux_sel",
        11,
        3
      ],
      [
        "last_incoming_dram_fd_mux_sel",
        14,
        2
      ]
    ]
  },
  "reassembly_reassembly_debug_reg": {
    "type": "register",
    "block": "reassembly",
    "width": 17,
    "desc": "",
    "fields": [
      [
        "slice_free_context_count",
        0,
        10
      ],
      [
        "slice_context_manager_empty",
        10,
        1
      ],
      [
        "slice_pause_to_ifg",
        11,
        1
      ],
      [
        "slice_pause_to_rxpp",
        12,
        1
      ],
      [
        "slice_out_pd_fifo_full",
        13,
        1
      ],
      [
        "slice_out_pd_control_fifo_full",
        14,
        1
      ],
      [
        "slice_fdll_fifo_full",
        15,
        1
      ],
      [
        "slice_in_fifo_overflow",
        16,
        1
      ]
    ]
  },
  "reassembly_debug_pd_field_cfg": {
    "type": "register",
    "block": "reassembly",
    "width": 4,
    "desc": "PD debugger",
    "fields": [
      [
        "debug_pd_field_slice",
        0,
        3
      ],
      [
        "debug_pd_halt_trafic_on_match",
        3,
        1
      ]
    ]
  },
  "reassembly_debug_pd_field_status": {
    "type": "register",
    "block": "reassembly",
    "width": 96,
    "desc": "PD debug counters",
    "fields": [
      [
        "debug_pd_field_cnt",
        0,
        32
      ],
      [
        "debug_pd_total_pd_cnt",
        32,
        32
      ],
      [
        "debug_pd_total_byte_cnt",
        64,
        32
      ]
    ]
  },
  "reassembly_cbt_not_ready_counters": {
    "type": "register",
    "block": "reassembly",
    "width": 120,
    "desc": "Counters counting number of cc CBT was not ready",
    "fields": [
      [
        "slice_ifg0_not_ready",
        0,
        20
      ],
      [
        "slice_ifg1_not_ready",
        20,
        20
      ],
      [
        "slice_rx_meter_not_ready",
        40,
        48
      ],
      [
        "slice_fdll_not_ready",
        88,
        32
      ]
    ]
  },
  "reassembly_slb_buff_histogram_cfg": {
    "type": "register",
    "block": "reassembly",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "slb_buff_histogram_th0",
        0,
        19
      ],
      [
        "slb_buff_histogram_th1",
        19,
        19
      ],
      [
        "slb_buff_histogram_th2",
        38,
        19
      ],
      [
        "slb_buff_histogram_th3",
        57,
        19
      ],
      [
        "slb_buff_histogram_th4",
        76,
        19
      ],
      [
        "slb_buff_histogram_th5",
        95,
        19
      ],
      [
        "slb_buff_histogram_th6",
        114,
        19
      ],
      [
        "slb_buff_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "reassembly_slb_buff_histogram_status": {
    "type": "register",
    "block": "reassembly",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "slb_buff_histogram_value0",
        0,
        32
      ],
      [
        "slb_buff_histogram_overflow0",
        32,
        1
      ],
      [
        "slb_buff_histogram_value1",
        33,
        32
      ],
      [
        "slb_buff_histogram_overflow1",
        65,
        1
      ],
      [
        "slb_buff_histogram_value2",
        66,
        32
      ],
      [
        "slb_buff_histogram_overflow2",
        98,
        1
      ],
      [
        "slb_buff_histogram_value3",
        99,
        32
      ],
      [
        "slb_buff_histogram_overflow3",
        131,
        1
      ],
      [
        "slb_buff_histogram_value4",
        132,
        32
      ],
      [
        "slb_buff_histogram_overflow4",
        164,
        1
      ],
      [
        "slb_buff_histogram_value5",
        165,
        32
      ],
      [
        "slb_buff_histogram_overflow5",
        197,
        1
      ],
      [
        "slb_buff_histogram_value6",
        198,
        32
      ],
      [
        "slb_buff_histogram_overflow6",
        230,
        1
      ],
      [
        "slb_buff_histogram_value7",
        231,
        32
      ],
      [
        "slb_buff_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "reassembly_slb_buff_histogram_max_wmk_reg": {
    "type": "register",
    "block": "reassembly",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "slb_buff_histogram_max_wmk",
        0,
        19
      ],
      [
        "slb_buff_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "reassembly_context_table": {
    "type": "memory",
    "block": "reassembly",
    "width": 300,
    "desc": "The Context Table keeps track of the pakcet fragments and combines it to a PD that is sent to the pipe when the packet is received completely.",
    "fields": [
      [
        "status",
        0,
        2
      ],
      [
        "packet_size",
        2,
        14
      ],
      [
        "packet_id",
        16,
        19
      ],
      [
        "fragment_seq_num",
        35,
        5
      ],
      [
        "pd",
        40,
        258
      ],
      [
        "drop",
        298,
        1
      ],
      [
        "crc_error",
        299,
        1
      ]
    ]
  },
  "reassembly_dram_context_table": {
    "type": "memory",
    "block": "reassembly",
    "width": 300,
    "desc": "Holds a 2 entries for the reassmebly of the DRAM slice",
    "fields": [
      [
        "dram_context_table_entry",
        0,
        300
      ]
    ]
  },
  "reassembly_context_manager": {
    "type": "memory",
    "block": "reassembly",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "context_available",
        0,
        16
      ]
    ]
  },
  "reassembly_out_pd_fifo": {
    "type": "memory",
    "block": "reassembly",
    "width": 291,
    "desc": "",
    "fields": [
      [
        "out_pd_fifo_data",
        0,
        291
      ]
    ]
  },
  "reassembly_in_fifo": {
    "type": "memory",
    "block": "reassembly",
    "width": 300,
    "desc": "",
    "fields": [
      [
        "in_fifo_data",
        0,
        300
      ]
    ]
  },
  "reassembly_source_port_map_table": {
    "type": "memory",
    "block": "reassembly",
    "width": 6,
    "desc": "Table per slice",
    "fields": [
      [
        "source_port_map",
        0,
        6
      ]
    ]
  },
  "reassembly_debug_pd_field_value_cfg": {
    "type": "memory",
    "block": "reassembly",
    "width": 291,
    "desc": "",
    "fields": [
      [
        "debug_pd_field_value",
        0,
        291
      ]
    ]
  },
  "reassembly_debug_pd_field_mask_cfg": {
    "type": "memory",
    "block": "reassembly",
    "width": 291,
    "desc": "",
    "fields": [
      [
        "debug_pd_field_mask",
        0,
        291
      ]
    ]
  },
  "reassembly_dram_in_fifo": {
    "type": "memory",
    "block": "reassembly",
    "width": 132,
    "desc": "",
    "fields": [
      [
        "dram_in_fifo_data",
        0,
        132
      ]
    ]
  },
  "reassembly_dram_out_pd_fifo": {
    "type": "memory",
    "block": "reassembly",
    "width": 137,
    "desc": "",
    "fields": [
      [
        "dram_out_pd_fifo_data",
        0,
        137
      ]
    ]
  },
  "nw_reorder_block_interrupt_register": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "nw_reorder_block_mem_protect_interrupt": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "nw_reorder_block_mem_protect_interrupt_test": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "nw_reorder_block_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 12,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "nw_connection_table_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "out_pd_fifo_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "nw_exact_match_fbm0_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "nw_exact_match_fbm1_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "nw_exact_match_pd_memory_narrow_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "nw_exact_match_pd_memory_wide_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "event_chain2_connection_table_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "connection2_event_chain_table_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "nw_exact_match_verifier0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "nw_exact_match_verifier1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "nw_exact_match_verifier2_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "nw_exact_match_verifier3_ecc_1b_err_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "nw_reorder_block_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 12,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "nw_connection_table_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "out_pd_fifo_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "nw_exact_match_fbm0_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "nw_exact_match_fbm1_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "nw_exact_match_pd_memory_narrow_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "nw_exact_match_pd_memory_wide_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "event_chain2_connection_table_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "connection2_event_chain_table_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "nw_exact_match_verifier0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "nw_exact_match_verifier1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "nw_exact_match_verifier2_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "nw_exact_match_verifier3_ecc_2b_err_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "nw_reorder_block_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 12,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "nw_connection_table_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "out_pd_fifo_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "nw_exact_match_fbm0_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "nw_exact_match_fbm1_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "nw_exact_match_pd_memory_narrow_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "nw_exact_match_pd_memory_wide_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "event_chain2_connection_table_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "connection2_event_chain_table_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "nw_exact_match_verifier0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "nw_exact_match_verifier1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "nw_exact_match_verifier2_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "nw_exact_match_verifier3_ecc_1b_err_initiate",
        11,
        1
      ]
    ]
  },
  "nw_reorder_block_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 12,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "nw_connection_table_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "out_pd_fifo_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "nw_exact_match_fbm0_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "nw_exact_match_fbm1_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "nw_exact_match_pd_memory_narrow_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "nw_exact_match_pd_memory_wide_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "event_chain2_connection_table_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "connection2_event_chain_table_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "nw_exact_match_verifier0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "nw_exact_match_verifier1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "nw_exact_match_verifier2_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "nw_exact_match_verifier3_ecc_2b_err_initiate",
        11,
        1
      ]
    ]
  },
  "nw_reorder_block_mem_protect_err_status": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 12,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "nw_connection_table_err_int",
        0,
        1
      ],
      [
        "out_pd_fifo_err_int",
        1,
        1
      ],
      [
        "nw_exact_match_fbm0_err_int",
        2,
        1
      ],
      [
        "nw_exact_match_fbm1_err_int",
        3,
        1
      ],
      [
        "nw_exact_match_pd_memory_narrow_err_int",
        4,
        1
      ],
      [
        "nw_exact_match_pd_memory_wide_err_int",
        5,
        1
      ],
      [
        "event_chain2_connection_table_err_int",
        6,
        1
      ],
      [
        "connection2_event_chain_table_err_int",
        7,
        1
      ],
      [
        "nw_exact_match_verifier0_err_int",
        8,
        1
      ],
      [
        "nw_exact_match_verifier1_err_int",
        9,
        1
      ],
      [
        "nw_exact_match_verifier2_err_int",
        10,
        1
      ],
      [
        "nw_exact_match_verifier3_err_int",
        11,
        1
      ]
    ]
  },
  "nw_reorder_block_selected_ser_error_info": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "nw_reorder_block_ser_error_debug_configuration": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "nw_reorder_block_ecc_1b_err_debug": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "nw_reorder_block_ecc_2b_err_debug": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "nw_reorder_block_tcam_scan_period_cfg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "nw_reorder_block_counter_timer": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "nw_reorder_block_counter_timer_trigger_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "nw_reorder_block_memory_access_timeout": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "nw_reorder_block_broadcast_config_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "nw_reorder_block_memory_prot_bypass": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "nw_reorder_block_soft_reset_configuration": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "nw_reorder_block_mbist_configuration": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "nw_reorder_block_power_down_configuration": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "nw_reorder_block_spare_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "nw_reorder_block_pmro_ctrl": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "nw_reorder_block_pmro_status": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "nw_reorder_block_mirror_bus_conf_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "nw_reorder_block_mirror_bus_status": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "nw_reorder_block_device_time_offset_cfg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "nw_reorder_block_block_general_configurations": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 33,
    "desc": "",
    "fields": [
      [
        "block_num_of_reorder_blocks",
        0,
        3
      ],
      [
        "my_slice_number",
        3,
        3
      ],
      [
        "block_reorder_block_number",
        6,
        3
      ],
      [
        "slice_mode",
        9,
        4
      ],
      [
        "block_pp_reorder_min_connection_number",
        13,
        13
      ],
      [
        "reset_done_fifo_full_thr",
        26,
        5
      ],
      [
        "packet_loss_detection_using_skew_enable",
        31,
        1
      ],
      [
        "disable_assured_read_in_slb",
        32,
        1
      ]
    ]
  },
  "nw_reorder_block_block_events_register": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "connection_reached_max_size",
        0,
        1
      ],
      [
        "write_failed",
        1,
        1
      ],
      [
        "assured_read_buffer_manager_empty",
        2,
        1
      ],
      [
        "event_chain_full",
        3,
        1
      ]
    ]
  },
  "nw_reorder_block_block_reset_configuration": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 13,
    "desc": "",
    "fields": [
      [
        "block_full_scan_reset_enable",
        0,
        1
      ],
      [
        "block_reset_done_value",
        1,
        12
      ]
    ]
  },
  "nw_reorder_block_block_assured_read_configuration": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 25,
    "desc": "",
    "fields": [
      [
        "block_assured_read_counter_threshold",
        0,
        5
      ],
      [
        "block_assured_read_trig_value",
        5,
        12
      ],
      [
        "block_assured_read_seq_num_addition",
        17,
        8
      ]
    ]
  },
  "nw_reorder_block_block_init_configuration": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 19,
    "desc": "",
    "fields": [
      [
        "block_num_of_pkts_required_for_init",
        0,
        12
      ],
      [
        "block_time_interval_required_for_init",
        12,
        7
      ]
    ]
  },
  "nw_reorder_block_block_skew_configurations": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 25,
    "desc": "",
    "fields": [
      [
        "block_t_value",
        0,
        7
      ],
      [
        "block_w_value",
        7,
        7
      ],
      [
        "block_lower_skew_counter_threshold",
        14,
        4
      ],
      [
        "block_skew_measurement_addition",
        18,
        7
      ]
    ]
  },
  "nw_reorder_block_block_skew_measurement_conf": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 26,
    "desc": "",
    "fields": [
      [
        "block_skew_meas_connection_number",
        0,
        13
      ],
      [
        "block_skew_meas_connection_un_mask",
        13,
        13
      ]
    ]
  },
  "nw_reorder_block_block_skew_measurement_results": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "block_skew_meas_con_max_skew",
        0,
        7
      ]
    ]
  },
  "nw_reorder_block_block_slb_configurations": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 37,
    "desc": "",
    "fields": [
      [
        "reorder_mode_slb",
        0,
        1
      ],
      [
        "slb_reset_delay",
        1,
        6
      ],
      [
        "slb_max_events_thr",
        7,
        8
      ],
      [
        "slb_event_pipe_out_fifo_full_thr",
        15,
        10
      ],
      [
        "slb_max_connection_number",
        25,
        12
      ]
    ]
  },
  "nw_reorder_block_block_max_con": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 112,
    "desc": "",
    "fields": [
      [
        "block_max_connection0",
        0,
        13
      ],
      [
        "block_max_size0",
        13,
        15
      ],
      [
        "block_max_connection1",
        28,
        13
      ],
      [
        "block_max_size1",
        41,
        15
      ],
      [
        "block_max_connection2",
        56,
        13
      ],
      [
        "block_max_size2",
        69,
        15
      ],
      [
        "block_max_connection3",
        84,
        13
      ],
      [
        "block_max_size3",
        97,
        15
      ]
    ]
  },
  "nw_reorder_block_block_dropped_pkt_configuration": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "block_drop_packets_during_reset",
        0,
        1
      ],
      [
        "block_drop_old_packets",
        1,
        1
      ],
      [
        "block_drop_packets_not_in_range",
        2,
        1
      ],
      [
        "block_dropped_packets_weight",
        3,
        8
      ],
      [
        "block_max_dropped_packets_threshold",
        11,
        8
      ],
      [
        "block_drop_duplicate_packets",
        19,
        1
      ]
    ]
  },
  "nw_reorder_block_block_status_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 28,
    "desc": "",
    "fields": [
      [
        "max_reorder_connection_size",
        0,
        15
      ],
      [
        "max_reorder_connection",
        15,
        13
      ]
    ]
  },
  "nw_reorder_block_block_capture_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 13,
    "desc": "",
    "fields": [
      [
        "slb_connection_with_error",
        0,
        13
      ]
    ]
  },
  "nw_reorder_block_em_fbm_config_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 97,
    "desc": "",
    "fields": [
      [
        "em_fbm_working_mode",
        0,
        1
      ],
      [
        "em_fbm_total_free_buffers",
        1,
        12
      ],
      [
        "em_fbm_not_empty_entry",
        13,
        48
      ],
      [
        "em_fbm_init",
        61,
        1
      ],
      [
        "em_fbm_almost_empty_thr",
        62,
        12
      ],
      [
        "em_fbm_drain_mode_thr",
        74,
        13
      ],
      [
        "em_fbm_rate_limit_thr",
        87,
        10
      ]
    ]
  },
  "nw_reorder_block_reorder_block_debug_counters": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 106,
    "desc": "",
    "fields": [
      [
        "duplicated_entry_counter",
        0,
        10
      ],
      [
        "drop_counter_seq_num_below_exp",
        10,
        16
      ],
      [
        "drop_counter_seq_num_not_in_range",
        26,
        16
      ],
      [
        "drop_counter_new_pkt_during_reset",
        42,
        16
      ],
      [
        "drop_counter_slb_pkt_from_prev_segment",
        58,
        16
      ],
      [
        "drop_counter_pkt_from_emdb_during_reset",
        74,
        16
      ],
      [
        "drop_new_packet_due_to_fbm_almost_empty",
        90,
        16
      ]
    ]
  },
  "nw_reorder_block_reorder_block_slb_counters": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "unexpected_prev_segment_error",
        0,
        16
      ],
      [
        "more_than_one_owner_error",
        16,
        16
      ],
      [
        "complete_segement_loss_error",
        32,
        16
      ],
      [
        "reuse_sequence_error",
        48,
        16
      ]
    ]
  },
  "nw_reorder_block_reorder_block_last_drop_debug": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 56,
    "desc": "Last packet dropped in reorder block stage 1 information",
    "fields": [
      [
        "drop_reason",
        0,
        2
      ],
      [
        "drop_connection",
        2,
        13
      ],
      [
        "drop_psn",
        15,
        20
      ],
      [
        "expected_psn",
        35,
        20
      ],
      [
        "owner_bit",
        55,
        1
      ]
    ]
  },
  "nw_reorder_block_reorder_write_fail_debug": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 33,
    "desc": "Last packet dropped in reorder block stage 1 information",
    "fields": [
      [
        "write_fail_connection",
        0,
        13
      ],
      [
        "write_fail_psn",
        13,
        20
      ]
    ]
  },
  "nw_reorder_block_reorder_duplicate_packet_debug": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 33,
    "desc": "Last packet dropped in reorder block stage 1 information",
    "fields": [
      [
        "duplicate_connection",
        0,
        13
      ],
      [
        "duplicate_psn",
        13,
        20
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_per_bank_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 58,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "nw_exact_match_active_banks",
        0,
        1
      ],
      [
        "nw_exact_match_hash_key",
        1,
        56
      ],
      [
        "nw_exact_match_use_primitive_crc",
        57,
        1
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_per_em_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "nw_exact_match_key_width",
        0,
        16
      ],
      [
        "nw_exact_match_auto_bubble_req",
        16,
        1
      ],
      [
        "nw_exact_match_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_cam_wm_max_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "nw_exact_match_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_bank_write_cntr_reg": {
    "type": "register",
    "block": "nw_reorder_block",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "nw_exact_match_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "nw_reorder_block_nw_connection_table": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 112,
    "desc": "",
    "fields": [
      [
        "nw_connection_table_data",
        0,
        112
      ]
    ]
  },
  "nw_reorder_block_out_pd_fifo": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 163,
    "desc": "",
    "fields": [
      [
        "out_pd_fifo_data",
        0,
        163
      ]
    ]
  },
  "nw_reorder_block_reorder_alg_pd_fifo": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 160,
    "desc": "",
    "fields": [
      [
        "reorder_alg_pd_fifo_data",
        0,
        160
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_fbm": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "nw_exact_match_fbm_data",
        0,
        64
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_pd_memory_narrow": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 113,
    "desc": "In FE and FB slice the PD is significantly wider but the reorder requires less PDs - thus the PD memory is split to a wide part  and a narrow part.",
    "fields": [
      [
        "nw_exact_match_pd_memory_data_narrow",
        0,
        113
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_pd_memory_wide": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 49,
    "desc": "In FE and FB the PD is significantly wider but the reorde requires less PDs - thus the PD memory is split to a wide part  and a narrow part.",
    "fields": [
      [
        "nw_exact_match_pd_memory_data_wide",
        0,
        49
      ]
    ]
  },
  "nw_reorder_block_event_chain2_connection_table": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 18,
    "desc": "Holds 2 entries in line to reduce ECC bits",
    "fields": [
      [
        "entry0_current_ssn",
        0,
        2
      ],
      [
        "entry0_close_ssn_when_done",
        2,
        4
      ],
      [
        "entry0_current_ssn_owner",
        6,
        1
      ],
      [
        "entry0_re_use",
        7,
        1
      ],
      [
        "entry0_error",
        8,
        1
      ],
      [
        "entry1_current_ssn",
        9,
        2
      ],
      [
        "entry1_close_ssn_when_done",
        11,
        4
      ],
      [
        "entry1_current_ssn_owner",
        15,
        1
      ],
      [
        "entry1_re_use",
        16,
        1
      ],
      [
        "entry1_error",
        17,
        1
      ]
    ]
  },
  "nw_reorder_block_connection2_event_chain_table": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "stored_ssn",
        0,
        4
      ]
    ]
  },
  "nw_reorder_block_skew_measurement_table": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 40,
    "desc": "",
    "fields": [
      [
        "skew_measurement_table_entry",
        0,
        40
      ]
    ]
  },
  "nw_reorder_block_connection_profile_table": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "profile_num",
        0,
        3
      ]
    ]
  },
  "nw_reorder_block_profile_config_table": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "connection_pd_threshold",
        0,
        11
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_verifier": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 234,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "nw_exact_match_verifier_data",
        0,
        234
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_valid": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 6,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "nw_exact_match_valid_data",
        0,
        6
      ]
    ]
  },
  "nw_reorder_block_nw_exact_match_cam": {
    "type": "memory",
    "block": "nw_reorder_block",
    "width": 28,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "nw_exact_match_cam_payload",
        0,
        13
      ],
      [
        "nw_exact_match_cam_key",
        13,
        28
      ],
      [
        "nw_exact_match_cam_valid",
        41,
        1
      ]
    ]
  },
  "nw_reorder_interrupt_register": {
    "type": "register",
    "block": "nw_reorder",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "reorder_global_interrupt_summary",
        1,
        1
      ]
    ]
  },
  "nw_reorder_mem_protect_interrupt": {
    "type": "register",
    "block": "nw_reorder",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "nw_reorder_mem_protect_interrupt_test": {
    "type": "register",
    "block": "nw_reorder",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "nw_reorder_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "nw_reorder",
    "width": 35,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "fifo0_new_pkts0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "fifo0_new_pkts2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "fifo0_new_pkts3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "fifo0_new_pkts4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "fifo0_new_pkts5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "fifo1_new_pkts0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "fifo1_new_pkts1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "fifo1_new_pkts2_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "fifo1_new_pkts3_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "fifo1_new_pkts4_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "fifo1_new_pkts5_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mma_fifo0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mma_fifo1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mma_fifo2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo0_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo1_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo2_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo3_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo4_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo5_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo6_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo7_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo8_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "nw_slice_out_valid_fifo0_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "nw_slice_out_valid_fifo1_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "nw_slice_out_valid_fifo2_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "nw_reorder_rd_fifo0_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "nw_reorder_rd_fifo1_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "nw_reorder_rd_fifo2_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "nw_reorder_rd_fifo3_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "nw_reorder_rd_fifo4_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "nw_reorder_rd_fifo5_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "slb_free_connections_manager_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "slb_reset_was_sent_ecc_1b_err_interrupt_mask",
        34,
        1
      ]
    ]
  },
  "nw_reorder_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "nw_reorder",
    "width": 35,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "fifo0_new_pkts0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "fifo0_new_pkts2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "fifo0_new_pkts3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "fifo0_new_pkts4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "fifo0_new_pkts5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "fifo1_new_pkts0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "fifo1_new_pkts1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "fifo1_new_pkts2_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "fifo1_new_pkts3_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "fifo1_new_pkts4_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "fifo1_new_pkts5_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mma_fifo0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mma_fifo1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mma_fifo2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo0_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo1_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo2_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo3_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo4_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo5_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo6_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo7_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo8_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "nw_slice_out_valid_fifo0_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "nw_slice_out_valid_fifo1_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "nw_slice_out_valid_fifo2_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "nw_reorder_rd_fifo0_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "nw_reorder_rd_fifo1_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "nw_reorder_rd_fifo2_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "nw_reorder_rd_fifo3_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "nw_reorder_rd_fifo4_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "nw_reorder_rd_fifo5_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "slb_free_connections_manager_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "slb_reset_was_sent_ecc_2b_err_interrupt_mask",
        34,
        1
      ]
    ]
  },
  "nw_reorder_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "nw_reorder",
    "width": 35,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "fifo0_new_pkts0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "fifo0_new_pkts2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "fifo0_new_pkts3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "fifo0_new_pkts4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "fifo0_new_pkts5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "fifo1_new_pkts0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "fifo1_new_pkts1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "fifo1_new_pkts2_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "fifo1_new_pkts3_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "fifo1_new_pkts4_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "fifo1_new_pkts5_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "mma_fifo0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "mma_fifo1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "mma_fifo2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo0_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo1_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo2_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo3_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo4_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo5_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo6_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo7_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo8_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "nw_slice_out_valid_fifo0_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "nw_slice_out_valid_fifo1_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "nw_slice_out_valid_fifo2_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "nw_reorder_rd_fifo0_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "nw_reorder_rd_fifo1_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "nw_reorder_rd_fifo2_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "nw_reorder_rd_fifo3_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "nw_reorder_rd_fifo4_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "nw_reorder_rd_fifo5_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "slb_free_connections_manager_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "slb_reset_was_sent_ecc_1b_err_initiate",
        34,
        1
      ]
    ]
  },
  "nw_reorder_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "nw_reorder",
    "width": 35,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "fifo0_new_pkts0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "fifo0_new_pkts2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "fifo0_new_pkts3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "fifo0_new_pkts4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "fifo0_new_pkts5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "fifo1_new_pkts0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "fifo1_new_pkts1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "fifo1_new_pkts2_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "fifo1_new_pkts3_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "fifo1_new_pkts4_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "fifo1_new_pkts5_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "mma_fifo0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "mma_fifo1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "mma_fifo2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo0_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo1_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo2_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo3_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo4_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo5_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo6_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo7_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo8_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "nw_slice_out_valid_fifo0_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "nw_slice_out_valid_fifo1_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "nw_slice_out_valid_fifo2_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "nw_reorder_rd_fifo0_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "nw_reorder_rd_fifo1_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "nw_reorder_rd_fifo2_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "nw_reorder_rd_fifo3_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "nw_reorder_rd_fifo4_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "nw_reorder_rd_fifo5_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "slb_free_connections_manager_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "slb_reset_was_sent_ecc_2b_err_initiate",
        34,
        1
      ]
    ]
  },
  "nw_reorder_mem_protect_err_status": {
    "type": "register",
    "block": "nw_reorder",
    "width": 35,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "fifo0_new_pkts0_err_int",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_err_int",
        1,
        1
      ],
      [
        "fifo0_new_pkts2_err_int",
        2,
        1
      ],
      [
        "fifo0_new_pkts3_err_int",
        3,
        1
      ],
      [
        "fifo0_new_pkts4_err_int",
        4,
        1
      ],
      [
        "fifo0_new_pkts5_err_int",
        5,
        1
      ],
      [
        "fifo1_new_pkts0_err_int",
        6,
        1
      ],
      [
        "fifo1_new_pkts1_err_int",
        7,
        1
      ],
      [
        "fifo1_new_pkts2_err_int",
        8,
        1
      ],
      [
        "fifo1_new_pkts3_err_int",
        9,
        1
      ],
      [
        "fifo1_new_pkts4_err_int",
        10,
        1
      ],
      [
        "fifo1_new_pkts5_err_int",
        11,
        1
      ],
      [
        "mma_fifo0_err_int",
        12,
        1
      ],
      [
        "mma_fifo1_err_int",
        13,
        1
      ],
      [
        "mma_fifo2_err_int",
        14,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo0_err_int",
        15,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo1_err_int",
        16,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo2_err_int",
        17,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo3_err_int",
        18,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo4_err_int",
        19,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo5_err_int",
        20,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo6_err_int",
        21,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo7_err_int",
        22,
        1
      ],
      [
        "nw_src_slice_trg_slice_pd_fifo8_err_int",
        23,
        1
      ],
      [
        "nw_slice_out_valid_fifo0_err_int",
        24,
        1
      ],
      [
        "nw_slice_out_valid_fifo1_err_int",
        25,
        1
      ],
      [
        "nw_slice_out_valid_fifo2_err_int",
        26,
        1
      ],
      [
        "nw_reorder_rd_fifo0_err_int",
        27,
        1
      ],
      [
        "nw_reorder_rd_fifo1_err_int",
        28,
        1
      ],
      [
        "nw_reorder_rd_fifo2_err_int",
        29,
        1
      ],
      [
        "nw_reorder_rd_fifo3_err_int",
        30,
        1
      ],
      [
        "nw_reorder_rd_fifo4_err_int",
        31,
        1
      ],
      [
        "nw_reorder_rd_fifo5_err_int",
        32,
        1
      ],
      [
        "slb_free_connections_manager_err_int",
        33,
        1
      ],
      [
        "slb_reset_was_sent_err_int",
        34,
        1
      ]
    ]
  },
  "nw_reorder_selected_ser_error_info": {
    "type": "register",
    "block": "nw_reorder",
    "width": 13,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        11
      ],
      [
        "mem_err_type",
        11,
        2
      ]
    ]
  },
  "nw_reorder_ser_error_debug_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "nw_reorder_ecc_1b_err_debug": {
    "type": "register",
    "block": "nw_reorder",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "nw_reorder_ecc_2b_err_debug": {
    "type": "register",
    "block": "nw_reorder",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "nw_reorder_counter_timer": {
    "type": "register",
    "block": "nw_reorder",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "nw_reorder_counter_timer_trigger_reg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "nw_reorder_memory_access_timeout": {
    "type": "register",
    "block": "nw_reorder",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "nw_reorder_broadcast_config_reg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "nw_reorder_memory_prot_bypass": {
    "type": "register",
    "block": "nw_reorder",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "nw_reorder_soft_reset_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "nw_reorder_mbist_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "nw_reorder_power_down_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "nw_reorder_spare_reg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "nw_reorder_pmro_ctrl": {
    "type": "register",
    "block": "nw_reorder",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "nw_reorder_pmro_status": {
    "type": "register",
    "block": "nw_reorder",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "nw_reorder_mirror_bus_conf_reg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "nw_reorder_mirror_bus_status": {
    "type": "register",
    "block": "nw_reorder",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "nw_reorder_device_time_offset_cfg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "nw_reorder_reorder_global_reg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "reorder_init_done",
        0,
        1
      ]
    ]
  },
  "nw_reorder_global_config_reg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 25,
    "desc": "",
    "fields": [
      [
        "buff_count_enable",
        0,
        6
      ],
      [
        "reorder_max_buff_thr",
        6,
        19
      ]
    ]
  },
  "nw_reorder_reorder_global_interrupt": {
    "type": "register",
    "block": "nw_reorder",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "nw_reorder_block0_interrupt",
        0,
        1
      ],
      [
        "nw_reorder_block1_interrupt",
        1,
        1
      ],
      [
        "nw_reorder_block2_interrupt",
        2,
        1
      ],
      [
        "nw_reorder_block3_interrupt",
        3,
        1
      ],
      [
        "nw_reorder_block4_interrupt",
        4,
        1
      ],
      [
        "nw_reorder_block5_interrupt",
        5,
        1
      ],
      [
        "pp_reorder_slice0_interrupt",
        6,
        1
      ],
      [
        "pp_reorder_slice1_interrupt",
        7,
        1
      ],
      [
        "pp_reorder_slice2_interrupt",
        8,
        1
      ]
    ]
  },
  "nw_reorder_reorder_global_interrupt_mask": {
    "type": "register",
    "block": "nw_reorder",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "nw_reorder_block0_interrupt_mask",
        0,
        1
      ],
      [
        "nw_reorder_block1_interrupt_mask",
        1,
        1
      ],
      [
        "nw_reorder_block2_interrupt_mask",
        2,
        1
      ],
      [
        "nw_reorder_block3_interrupt_mask",
        3,
        1
      ],
      [
        "nw_reorder_block4_interrupt_mask",
        4,
        1
      ],
      [
        "nw_reorder_block5_interrupt_mask",
        5,
        1
      ],
      [
        "pp_reorder_slice0_interrupt_mask",
        6,
        1
      ],
      [
        "pp_reorder_slice1_interrupt_mask",
        7,
        1
      ],
      [
        "pp_reorder_slice2_interrupt_mask",
        8,
        1
      ]
    ]
  },
  "nw_reorder_reorder_global_interrupt_test": {
    "type": "register",
    "block": "nw_reorder",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "nw_reorder_block0_interrupt_test",
        0,
        1
      ],
      [
        "nw_reorder_block1_interrupt_test",
        1,
        1
      ],
      [
        "nw_reorder_block2_interrupt_test",
        2,
        1
      ],
      [
        "nw_reorder_block3_interrupt_test",
        3,
        1
      ],
      [
        "nw_reorder_block4_interrupt_test",
        4,
        1
      ],
      [
        "nw_reorder_block5_interrupt_test",
        5,
        1
      ],
      [
        "pp_reorder_slice0_interrupt_test",
        6,
        1
      ],
      [
        "pp_reorder_slice1_interrupt_test",
        7,
        1
      ],
      [
        "pp_reorder_slice2_interrupt_test",
        8,
        1
      ]
    ]
  },
  "nw_reorder_slice_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 41,
    "desc": "",
    "fields": [
      [
        "slice_my_slice_number",
        0,
        3
      ],
      [
        "slice_ifg0_max_source_port_number",
        3,
        6
      ],
      [
        "slice_reorder_block_num_offset",
        9,
        3
      ],
      [
        "slice_mode",
        12,
        4
      ],
      [
        "slice_reorder_block_sel_mode",
        16,
        2
      ],
      [
        "slice_outgoing_slice_setting_enable",
        18,
        1
      ],
      [
        "slice_outgoing_slice_set_value",
        19,
        2
      ],
      [
        "slice_pp_reorder_min_connection_number",
        21,
        13
      ],
      [
        "slice_backpressure_mode",
        34,
        1
      ],
      [
        "slice_reorder_full_prevention_enable",
        35,
        1
      ],
      [
        "slice_reorder_full_prevention_rate_limiting",
        36,
        4
      ],
      [
        "slice_bypass_fifo_sp_en",
        40,
        1
      ]
    ]
  },
  "nw_reorder_block_general_configurations": {
    "type": "register",
    "block": "nw_reorder",
    "width": 28,
    "desc": "",
    "fields": [
      [
        "block_reorder_block_number",
        0,
        3
      ],
      [
        "block_rd_fifo_thr_to_receive_strict_prio",
        3,
        10
      ],
      [
        "block_enable_masking_pd_for_assured_read_rd",
        13,
        1
      ],
      [
        "block_pp_reorder_min_connection_number",
        14,
        13
      ],
      [
        "block_reorder_mode",
        27,
        1
      ]
    ]
  },
  "nw_reorder_block_thresholds_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 34,
    "desc": "",
    "fields": [
      [
        "block_new_pkts_fifo_not_ready_threshold",
        0,
        7
      ],
      [
        "block_neighbor_reorder_rd_fifo_full_thr",
        7,
        10
      ],
      [
        "block_out_pd_fifo_full_thr",
        17,
        7
      ],
      [
        "block_stage1_rd_fifo_full_thr",
        24,
        5
      ],
      [
        "block_stage2_rd_fifo_full_thr",
        29,
        5
      ]
    ]
  },
  "nw_reorder_block_aging_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "block_aging_enable",
        0,
        1
      ],
      [
        "block_aging_interval",
        1,
        7
      ]
    ]
  },
  "nw_reorder_block_debug_features": {
    "type": "register",
    "block": "nw_reorder",
    "width": 52,
    "desc": "",
    "fields": [
      [
        "block_sw_generated_rd_trig",
        0,
        1
      ],
      [
        "block_sw_generated_rd",
        1,
        51
      ]
    ]
  },
  "nw_reorder_slb_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 63,
    "desc": "",
    "fields": [
      [
        "reorder_fcm_pds_thr",
        0,
        17
      ],
      [
        "reorder_slb_free_connections_thr",
        17,
        13
      ],
      [
        "reorder_slb_reset_con_weight",
        30,
        13
      ],
      [
        "reorder_slb_reset_con_thr",
        43,
        20
      ]
    ]
  },
  "nw_reorder_slb_block_configuration": {
    "type": "register",
    "block": "nw_reorder",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "slb_block_event_pipe_rd_fifo_alm_full_thr",
        0,
        6
      ],
      [
        "slb_block_reorder_alg_event_fifo_alm_full_thr",
        6,
        6
      ]
    ]
  },
  "nw_reorder_reorder_counters_reg0": {
    "type": "register",
    "block": "nw_reorder",
    "width": 80,
    "desc": "",
    "fields": [
      [
        "reorder_blocks_drop_counter",
        0,
        32
      ],
      [
        "reorder_max_buffers_thr_drop_counter",
        32,
        32
      ],
      [
        "slb_reset_counter",
        64,
        16
      ]
    ]
  },
  "nw_reorder_reorder_counters_reg1": {
    "type": "register",
    "block": "nw_reorder",
    "width": 74,
    "desc": "",
    "fields": [
      [
        "reorder_out_fifos_buffers_counter",
        0,
        19
      ],
      [
        "reorder_total_buffers_counter",
        19,
        19
      ],
      [
        "reorder_max_total_buffers_counter",
        38,
        19
      ],
      [
        "reorder_max_pds_in_fb_slices_counter",
        57,
        17
      ]
    ]
  },
  "nw_reorder_reorder_last_in_pd": {
    "type": "register",
    "block": "nw_reorder",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "reorder_last_incoming_pd",
        0,
        16
      ]
    ]
  },
  "nw_reorder_reorder_debug_conf": {
    "type": "register",
    "block": "nw_reorder",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd_mux_sel",
        0,
        6
      ]
    ]
  },
  "nw_reorder_reorder_events_register": {
    "type": "register",
    "block": "nw_reorder",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "slb_context_manager_empty",
        0,
        1
      ],
      [
        "fcm_reorder_error",
        1,
        1
      ],
      [
        "src_slice_trg_slice_pd_fifo_full",
        2,
        1
      ]
    ]
  },
  "nw_reorder_block_events_register": {
    "type": "register",
    "block": "nw_reorder",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "block_reorder_block_to_sn_dist_not_ready",
        0,
        1
      ],
      [
        "block_rd_man_arb_pd_fifo_full",
        1,
        1
      ],
      [
        "block_rd_man_stage1_rd_fifo_full",
        2,
        1
      ],
      [
        "block_rd_man_stage2_rd_fifo_full",
        3,
        1
      ],
      [
        "block_rd_man_neigh_reorder_rd_fifo_full",
        4,
        1
      ],
      [
        "block_rd_man_event_chain_fifo_full",
        5,
        1
      ]
    ]
  },
  "nw_reorder_slice_events_register": {
    "type": "register",
    "block": "nw_reorder",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slice_reorder_rate_limiter_activated",
        0,
        1
      ]
    ]
  },
  "nw_reorder_global_status_register": {
    "type": "register",
    "block": "nw_reorder",
    "width": 26,
    "desc": "",
    "fields": [
      [
        "slb_fbm_number_of_free_connections",
        0,
        13
      ],
      [
        "slb_fbm_free_connections_min_wmk",
        13,
        13
      ]
    ]
  },
  "nw_reorder_reorder_block_status_reg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 31,
    "desc": "",
    "fields": [
      [
        "block_rd_fifo_max_wmk",
        0,
        10
      ],
      [
        "block_pd_fifo0_max_wmk",
        10,
        7
      ],
      [
        "block_pd_fifo1_max_wmk",
        17,
        7
      ],
      [
        "block_out_pd_fifo_full_consecutive_cc_max_wmk",
        24,
        7
      ]
    ]
  },
  "nw_reorder_rxpdr_cbt_not_rdy_counter": {
    "type": "register",
    "block": "nw_reorder",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "rxpdr_cbt_not_rdy_cnt",
        0,
        32
      ]
    ]
  },
  "nw_reorder_reorder_buff_histogram_cfg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "reorder_buff_histogram_th0",
        0,
        19
      ],
      [
        "reorder_buff_histogram_th1",
        19,
        19
      ],
      [
        "reorder_buff_histogram_th2",
        38,
        19
      ],
      [
        "reorder_buff_histogram_th3",
        57,
        19
      ],
      [
        "reorder_buff_histogram_th4",
        76,
        19
      ],
      [
        "reorder_buff_histogram_th5",
        95,
        19
      ],
      [
        "reorder_buff_histogram_th6",
        114,
        19
      ],
      [
        "reorder_buff_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "nw_reorder_reorder_buff_histogram_status": {
    "type": "register",
    "block": "nw_reorder",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "reorder_buff_histogram_value0",
        0,
        32
      ],
      [
        "reorder_buff_histogram_overflow0",
        32,
        1
      ],
      [
        "reorder_buff_histogram_value1",
        33,
        32
      ],
      [
        "reorder_buff_histogram_overflow1",
        65,
        1
      ],
      [
        "reorder_buff_histogram_value2",
        66,
        32
      ],
      [
        "reorder_buff_histogram_overflow2",
        98,
        1
      ],
      [
        "reorder_buff_histogram_value3",
        99,
        32
      ],
      [
        "reorder_buff_histogram_overflow3",
        131,
        1
      ],
      [
        "reorder_buff_histogram_value4",
        132,
        32
      ],
      [
        "reorder_buff_histogram_overflow4",
        164,
        1
      ],
      [
        "reorder_buff_histogram_value5",
        165,
        32
      ],
      [
        "reorder_buff_histogram_overflow5",
        197,
        1
      ],
      [
        "reorder_buff_histogram_value6",
        198,
        32
      ],
      [
        "reorder_buff_histogram_overflow6",
        230,
        1
      ],
      [
        "reorder_buff_histogram_value7",
        231,
        32
      ],
      [
        "reorder_buff_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "nw_reorder_reorder_buff_histogram_max_wmk_reg": {
    "type": "register",
    "block": "nw_reorder",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "reorder_buff_histogram_max_wmk",
        0,
        19
      ],
      [
        "reorder_buff_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "nw_reorder_fifo0_new_pkts": {
    "type": "memory",
    "block": "nw_reorder",
    "width": 215,
    "desc": "",
    "fields": [
      [
        "fifo0_data",
        0,
        215
      ]
    ]
  },
  "nw_reorder_fifo1_new_pkts": {
    "type": "memory",
    "block": "nw_reorder",
    "width": 215,
    "desc": "",
    "fields": [
      [
        "fifo1_data",
        0,
        215
      ]
    ]
  },
  "nw_reorder_mma_fifo": {
    "type": "memory",
    "block": "nw_reorder",
    "width": 196,
    "desc": "",
    "fields": [
      [
        "mma_fifo_data",
        0,
        196
      ]
    ]
  },
  "nw_reorder_nw_src_slice_trg_slice_pd_fifo": {
    "type": "memory",
    "block": "nw_reorder",
    "width": 160,
    "desc": "",
    "fields": [
      [
        "nw_src_slice_trg_slice_pd_fifo_data",
        0,
        160
      ]
    ]
  },
  "nw_reorder_nw_slice_out_valid_fifo": {
    "type": "memory",
    "block": "nw_reorder",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "nw_slice_out_valid_fifo_data",
        0,
        9
      ]
    ]
  },
  "nw_reorder_nw_reorder_rd_fifo": {
    "type": "memory",
    "block": "nw_reorder",
    "width": 51,
    "desc": "",
    "fields": [
      [
        "nw_reorder_rd_fifo_data",
        0,
        51
      ]
    ]
  },
  "nw_reorder_slb_free_connections_manager": {
    "type": "memory",
    "block": "nw_reorder",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "slb_connection_available",
        0,
        64
      ]
    ]
  },
  "nw_reorder_slb_reset_was_sent": {
    "type": "memory",
    "block": "nw_reorder",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "slb_connection_was_reset",
        0,
        64
      ]
    ]
  },
  "pp_reorder_slice_interrupt_register": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "pp_reorder_slice_mem_protect_interrupt": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "pp_reorder_slice_mem_protect_interrupt_test": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "pp_reorder_slice_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 26,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "fifo0_new_pkts0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "fifo1_new_pkts0_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "fifo1_new_pkts1_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "pp_reorder_rd_fifo0_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "pp_reorder_rd_fifo1_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "pp_connection_table0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pp_connection_table1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "out_pd_fifo0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "out_pd_fifo1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow0_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow1_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "pp_exact_match_verifier0_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "pp_exact_match_verifier1_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "pp_exact_match_verifier2_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "pp_exact_match_verifier3_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pp_exact_match_verifier4_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pp_exact_match_verifier5_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pp_exact_match_verifier6_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "pp_exact_match_verifier7_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "pp_exact_match_verifier8_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "pp_exact_match_verifier9_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "pp_exact_match_verifier10_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "pp_exact_match_verifier11_ecc_1b_err_interrupt_mask",
        25,
        1
      ]
    ]
  },
  "pp_reorder_slice_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 26,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "fifo0_new_pkts0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "fifo1_new_pkts0_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "fifo1_new_pkts1_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "pp_reorder_rd_fifo0_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "pp_reorder_rd_fifo1_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "pp_connection_table0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "pp_connection_table1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "out_pd_fifo0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "out_pd_fifo1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow0_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow1_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "pp_exact_match_verifier0_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "pp_exact_match_verifier1_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "pp_exact_match_verifier2_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "pp_exact_match_verifier3_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pp_exact_match_verifier4_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pp_exact_match_verifier5_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pp_exact_match_verifier6_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "pp_exact_match_verifier7_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "pp_exact_match_verifier8_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "pp_exact_match_verifier9_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "pp_exact_match_verifier10_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "pp_exact_match_verifier11_ecc_2b_err_interrupt_mask",
        25,
        1
      ]
    ]
  },
  "pp_reorder_slice_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 26,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "fifo0_new_pkts0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "fifo1_new_pkts0_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "fifo1_new_pkts1_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "pp_reorder_rd_fifo0_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "pp_reorder_rd_fifo1_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "pp_connection_table0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "pp_connection_table1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "out_pd_fifo0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "out_pd_fifo1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow0_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow1_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "pp_exact_match_verifier0_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "pp_exact_match_verifier1_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "pp_exact_match_verifier2_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "pp_exact_match_verifier3_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "pp_exact_match_verifier4_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "pp_exact_match_verifier5_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "pp_exact_match_verifier6_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "pp_exact_match_verifier7_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "pp_exact_match_verifier8_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "pp_exact_match_verifier9_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "pp_exact_match_verifier10_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "pp_exact_match_verifier11_ecc_1b_err_initiate",
        25,
        1
      ]
    ]
  },
  "pp_reorder_slice_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 26,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "fifo0_new_pkts0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "fifo1_new_pkts0_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "fifo1_new_pkts1_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "pp_reorder_rd_fifo0_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "pp_reorder_rd_fifo1_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "pp_connection_table0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "pp_connection_table1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "out_pd_fifo0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "out_pd_fifo1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow0_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow1_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "pp_exact_match_verifier0_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "pp_exact_match_verifier1_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "pp_exact_match_verifier2_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "pp_exact_match_verifier3_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "pp_exact_match_verifier4_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "pp_exact_match_verifier5_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "pp_exact_match_verifier6_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "pp_exact_match_verifier7_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "pp_exact_match_verifier8_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "pp_exact_match_verifier9_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "pp_exact_match_verifier10_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "pp_exact_match_verifier11_ecc_2b_err_initiate",
        25,
        1
      ]
    ]
  },
  "pp_reorder_slice_mem_protect_err_status": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 26,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "fifo0_new_pkts0_err_int",
        0,
        1
      ],
      [
        "fifo0_new_pkts1_err_int",
        1,
        1
      ],
      [
        "fifo1_new_pkts0_err_int",
        2,
        1
      ],
      [
        "fifo1_new_pkts1_err_int",
        3,
        1
      ],
      [
        "pp_reorder_rd_fifo0_err_int",
        4,
        1
      ],
      [
        "pp_reorder_rd_fifo1_err_int",
        5,
        1
      ],
      [
        "pp_connection_table0_err_int",
        6,
        1
      ],
      [
        "pp_connection_table1_err_int",
        7,
        1
      ],
      [
        "out_pd_fifo0_err_int",
        8,
        1
      ],
      [
        "out_pd_fifo1_err_int",
        9,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow0_err_int",
        10,
        1
      ],
      [
        "pp_exact_match_pd_memory_narrow1_err_int",
        11,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide0_err_int",
        12,
        1
      ],
      [
        "pp_exact_match_pd_memory_wide1_err_int",
        13,
        1
      ],
      [
        "pp_exact_match_verifier0_err_int",
        14,
        1
      ],
      [
        "pp_exact_match_verifier1_err_int",
        15,
        1
      ],
      [
        "pp_exact_match_verifier2_err_int",
        16,
        1
      ],
      [
        "pp_exact_match_verifier3_err_int",
        17,
        1
      ],
      [
        "pp_exact_match_verifier4_err_int",
        18,
        1
      ],
      [
        "pp_exact_match_verifier5_err_int",
        19,
        1
      ],
      [
        "pp_exact_match_verifier6_err_int",
        20,
        1
      ],
      [
        "pp_exact_match_verifier7_err_int",
        21,
        1
      ],
      [
        "pp_exact_match_verifier8_err_int",
        22,
        1
      ],
      [
        "pp_exact_match_verifier9_err_int",
        23,
        1
      ],
      [
        "pp_exact_match_verifier10_err_int",
        24,
        1
      ],
      [
        "pp_exact_match_verifier11_err_int",
        25,
        1
      ]
    ]
  },
  "pp_reorder_slice_selected_ser_error_info": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 13,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        11
      ],
      [
        "mem_err_type",
        11,
        2
      ]
    ]
  },
  "pp_reorder_slice_ser_error_debug_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "pp_reorder_slice_ecc_1b_err_debug": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "pp_reorder_slice_ecc_2b_err_debug": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "pp_reorder_slice_tcam_scan_period_cfg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "pp_reorder_slice_counter_timer": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "pp_reorder_slice_counter_timer_trigger_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "pp_reorder_slice_memory_access_timeout": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "pp_reorder_slice_broadcast_config_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "pp_reorder_slice_memory_prot_bypass": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "pp_reorder_slice_soft_reset_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "pp_reorder_slice_mbist_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "pp_reorder_slice_power_down_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "pp_reorder_slice_spare_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "pp_reorder_slice_pmro_ctrl": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "pp_reorder_slice_pmro_status": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "pp_reorder_slice_mirror_bus_conf_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "pp_reorder_slice_mirror_bus_status": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "pp_reorder_slice_device_time_offset_cfg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "pp_reorder_slice_reorder_global_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "reorder_init_done",
        0,
        1
      ]
    ]
  },
  "pp_reorder_slice_slice_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "slice_my_slice_number",
        0,
        3
      ],
      [
        "slice_ifg0_max_source_port_number",
        3,
        6
      ],
      [
        "slice_reorder_block_num_offset",
        9,
        3
      ],
      [
        "slice_mode",
        12,
        4
      ],
      [
        "slice_reorder_block_sel_mode",
        16,
        2
      ],
      [
        "reorder_full_prevention_enable",
        18,
        1
      ],
      [
        "reorder_full_prevention_rate_limiting",
        19,
        4
      ],
      [
        "bypass_fifo_sp_en",
        23,
        1
      ]
    ]
  },
  "pp_reorder_slice_block_general_configurations": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 38,
    "desc": "",
    "fields": [
      [
        "block_reorder_block_number",
        0,
        3
      ],
      [
        "block_rd_fifo_thr_to_receive_strict_prio",
        3,
        10
      ],
      [
        "block_enable_masking_pd_for_assured_read_rd",
        13,
        1
      ],
      [
        "block_pp_reorder_min_connection_number",
        14,
        13
      ],
      [
        "block_num_of_reorder_blocks",
        27,
        3
      ],
      [
        "block_my_slice_number",
        30,
        3
      ],
      [
        "block_slice_mode",
        33,
        4
      ],
      [
        "slice_packet_loss_detection_using_skew_enable",
        37,
        1
      ]
    ]
  },
  "pp_reorder_slice_block_thresholds_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "block_new_pkts_fifo_not_ready_threshold",
        0,
        7
      ],
      [
        "block_neighbor_reorder_rd_fifo_full_thr",
        7,
        8
      ],
      [
        "block_out_pd_fifo_full_thr",
        15,
        7
      ],
      [
        "block_stage1_rd_fifo_full_thr",
        22,
        5
      ],
      [
        "block_stage2_rd_fifo_full_thr",
        27,
        5
      ]
    ]
  },
  "pp_reorder_slice_block_aging_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "block_aging_enable",
        0,
        1
      ],
      [
        "block_aging_interval",
        1,
        7
      ]
    ]
  },
  "pp_reorder_slice_block_events_register": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 9,
    "desc": "",
    "fields": [
      [
        "block_connection_reached_max_size",
        0,
        1
      ],
      [
        "block_write_failed",
        1,
        1
      ],
      [
        "block_assured_read_buffer_manager_empty",
        2,
        1
      ],
      [
        "block_reorder_block_to_sn_dist_not_ready",
        3,
        1
      ],
      [
        "block_rd_man_arb_pd_fifo_full",
        4,
        1
      ],
      [
        "block_rd_man_stage1_rd_fifo_full",
        5,
        1
      ],
      [
        "block_rd_man_stage2_rd_fifo_full",
        6,
        1
      ],
      [
        "block_rd_man_neigh_reorder_rd_fifo_full",
        7,
        1
      ],
      [
        "block_rd_man_event_chain_fifo_full",
        8,
        1
      ]
    ]
  },
  "pp_reorder_slice_slice_events_register": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slice_reorder_rate_limiter_activated",
        0,
        1
      ]
    ]
  },
  "pp_reorder_slice_block_reset_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 13,
    "desc": "",
    "fields": [
      [
        "block_full_scan_reset_enable",
        0,
        1
      ],
      [
        "block_reset_done_value",
        1,
        12
      ]
    ]
  },
  "pp_reorder_slice_block_assured_read_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 25,
    "desc": "",
    "fields": [
      [
        "block_assured_read_counter_threshold",
        0,
        5
      ],
      [
        "block_assured_read_trig_value",
        5,
        12
      ],
      [
        "block_assured_read_seq_num_addition",
        17,
        8
      ]
    ]
  },
  "pp_reorder_slice_block_init_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 19,
    "desc": "",
    "fields": [
      [
        "block_num_of_pkts_required_for_init",
        0,
        12
      ],
      [
        "block_time_interval_required_for_init",
        12,
        7
      ]
    ]
  },
  "pp_reorder_slice_block_skew_configurations": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "block_skew_measurement_addition",
        0,
        7
      ]
    ]
  },
  "pp_reorder_slice_block_max_con": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 92,
    "desc": "Defines the skew of the block",
    "fields": [
      [
        "block_max_connection0",
        0,
        8
      ],
      [
        "block_max_size0",
        8,
        15
      ],
      [
        "block_max_connection1",
        23,
        8
      ],
      [
        "block_max_size1",
        31,
        15
      ],
      [
        "block_max_connection2",
        46,
        8
      ],
      [
        "block_max_size2",
        54,
        15
      ],
      [
        "block_max_connection3",
        69,
        8
      ],
      [
        "block_max_size3",
        77,
        15
      ]
    ]
  },
  "pp_reorder_slice_block_status_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 23,
    "desc": "",
    "fields": [
      [
        "block_max_reorder_connection_size",
        0,
        15
      ],
      [
        "block_max_reorder_connection",
        15,
        8
      ]
    ]
  },
  "pp_reorder_slice_block_dropped_pkt_configuration": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "block_drop_packets_during_reset",
        0,
        1
      ],
      [
        "block_drop_old_packets",
        1,
        1
      ],
      [
        "block_drop_packets_not_in_range",
        2,
        1
      ],
      [
        "block_dropped_packets_weight",
        3,
        8
      ],
      [
        "block_max_dropped_packets_threshold",
        11,
        8
      ],
      [
        "block_drop_duplicate_packets",
        19,
        1
      ]
    ]
  },
  "pp_reorder_slice_block_debug_features": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 52,
    "desc": "",
    "fields": [
      [
        "block_sw_generated_rd_trig",
        0,
        1
      ],
      [
        "block_sw_generated_rd",
        1,
        51
      ]
    ]
  },
  "pp_reorder_slice_reorder_last_in_pd": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "reorder_last_incoming_pd",
        0,
        16
      ]
    ]
  },
  "pp_reorder_slice_reorder_debug_conf": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd_mux_sel",
        0,
        4
      ]
    ]
  },
  "pp_reorder_slice_em_fbm_config_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 62,
    "desc": "",
    "fields": [
      [
        "em_fbm_working_mode",
        0,
        1
      ],
      [
        "em_fbm_total_free_buffers",
        1,
        11
      ],
      [
        "em_fbm_not_empty_entry",
        12,
        16
      ],
      [
        "em_fbm_init",
        28,
        1
      ],
      [
        "em_fbm_almost_empty_thr",
        29,
        11
      ],
      [
        "em_fbm_drain_mode_thr",
        40,
        11
      ],
      [
        "em_fbm_rate_limit_thr",
        51,
        11
      ]
    ]
  },
  "pp_reorder_slice_reorder_block_debug_counters": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 106,
    "desc": "",
    "fields": [
      [
        "block_duplicated_entry_counter",
        0,
        10
      ],
      [
        "block_drop_counter_seq_num_below_exp",
        10,
        16
      ],
      [
        "block_drop_counter_seq_num_not_in_range",
        26,
        16
      ],
      [
        "block_drop_counter_new_pkt_during_reset",
        42,
        16
      ],
      [
        "block_drop_counter_slb_pkt_from_prev_segment",
        58,
        16
      ],
      [
        "block_drop_counter_pkt_from_emdb_during_reset",
        74,
        16
      ],
      [
        "block_drop_new_packet_due_to_fbm_almost_empty",
        90,
        16
      ]
    ]
  },
  "pp_reorder_slice_reorder_block_status_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 29,
    "desc": "",
    "fields": [
      [
        "block_rd_fifo_max_wmk",
        0,
        8
      ],
      [
        "block_pd_fifo0_max_wmk",
        8,
        7
      ],
      [
        "block_pd_fifo1_max_wmk",
        15,
        7
      ],
      [
        "block_out_pd_fifo_full_consecutive_cc_max_wmk",
        22,
        7
      ]
    ]
  },
  "pp_reorder_slice_reorder_block_last_drop_debug": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 51,
    "desc": "Last packet dropped in reorder block stage 1 information",
    "fields": [
      [
        "block_drop_reason",
        0,
        2
      ],
      [
        "block_drop_connection",
        2,
        8
      ],
      [
        "block_drop_psn",
        10,
        20
      ],
      [
        "block_expected_psn",
        30,
        20
      ],
      [
        "block_owner_bit",
        50,
        1
      ]
    ]
  },
  "pp_reorder_slice_reorder_write_fail_debug": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 28,
    "desc": "Last packet that write failed in the EMDB. This is valid only when write fail event occurred.",
    "fields": [
      [
        "block_write_fail_connection",
        0,
        8
      ],
      [
        "block_write_fail_psn",
        8,
        20
      ]
    ]
  },
  "pp_reorder_slice_reorder_duplicate_packet_debug": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 28,
    "desc": "Last packet the EMDB returned duplicate entry on.",
    "fields": [
      [
        "block_duplicate_connection",
        0,
        8
      ],
      [
        "block_duplicate_psn",
        8,
        20
      ]
    ]
  },
  "pp_reorder_slice_rxpdr_cbt_not_rdy_counter": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "rxpdr_cbt_not_rdy_cnt",
        0,
        32
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_per_bank_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 42,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "pp_exact_match_active_banks",
        0,
        1
      ],
      [
        "pp_exact_match_hash_key",
        1,
        40
      ],
      [
        "pp_exact_match_use_primitive_crc",
        41,
        1
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_per_em_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "pp_exact_match_key_width",
        0,
        16
      ],
      [
        "pp_exact_match_auto_bubble_req",
        16,
        1
      ],
      [
        "pp_exact_match_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_cam_wm_max_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "pp_exact_match_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_bank_write_cntr_reg": {
    "type": "register",
    "block": "pp_reorder_slice",
    "width": 64,
    "desc": "EM bank debug indications, see fields description",
    "fields": [
      [
        "pp_exact_match_bank_write_cntr",
        0,
        64
      ]
    ]
  },
  "pp_reorder_slice_fifo0_new_pkts": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 215,
    "desc": "",
    "fields": [
      [
        "fifo0_data",
        0,
        215
      ]
    ]
  },
  "pp_reorder_slice_fifo1_new_pkts": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 215,
    "desc": "",
    "fields": [
      [
        "fifo1_data",
        0,
        215
      ]
    ]
  },
  "pp_reorder_slice_pp_reorder_rd_fifo": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 51,
    "desc": "",
    "fields": [
      [
        "pp_reorder_rd_fifo_data",
        0,
        51
      ]
    ]
  },
  "pp_reorder_slice_pp_connection_table": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 112,
    "desc": "",
    "fields": [
      [
        "pp_connection_table_data",
        0,
        112
      ]
    ]
  },
  "pp_reorder_slice_out_pd_fifo": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 163,
    "desc": "",
    "fields": [
      [
        "out_pd_fifo_data",
        0,
        163
      ]
    ]
  },
  "pp_reorder_slice_reorder_alg_pd_fifo": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 160,
    "desc": "",
    "fields": [
      [
        "reorder_alg_pd_fifo_data",
        0,
        160
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_fbm": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 64,
    "desc": "",
    "fields": [
      [
        "pp_exact_match_fbm_data",
        0,
        64
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_pd_memory_narrow": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 111,
    "desc": "In FE and FB the PD is significantly wider but the reorder requires less PDs - thus the PD memory is split to a wide part  and a narrow part.",
    "fields": [
      [
        "pp_exact_match_pd_memory_data_narrow",
        0,
        111
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_pd_memory_wide": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 49,
    "desc": "In FE and FB the PD is significantly wider but the reorde requires less PDs - thus the PD memory is split to a wide part  and a narrow part.",
    "fields": [
      [
        "pp_exact_match_pd_memory_data_wide",
        0,
        49
      ]
    ]
  },
  "pp_reorder_slice_connection_profile_table": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "profile_num",
        0,
        3
      ]
    ]
  },
  "pp_reorder_slice_profile_config_table": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 11,
    "desc": "",
    "fields": [
      [
        "connection_pd_threshold",
        0,
        11
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_verifier": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 112,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "pp_exact_match_verifier_data",
        0,
        112
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_valid": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 4,
    "desc": "Bitmap of consumed EM entries, bit per entry",
    "fields": [
      [
        "pp_exact_match_valid_data",
        0,
        4
      ]
    ]
  },
  "pp_reorder_slice_pp_exact_match_cam": {
    "type": "memory",
    "block": "pp_reorder_slice",
    "width": 20,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "pp_exact_match_cam_payload",
        0,
        10
      ],
      [
        "pp_exact_match_cam_key",
        10,
        20
      ],
      [
        "pp_exact_match_cam_valid",
        30,
        1
      ]
    ]
  },
  "rx_cgm_interrupt_register": {
    "type": "register",
    "block": "rx_cgm",
    "width": 7,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "rx_cgm_interrupt_reg10_summary",
        1,
        1
      ],
      [
        "rx_cgm_interrupt_reg11_summary",
        2,
        1
      ],
      [
        "rx_cgm_interrupt_reg12_summary",
        3,
        1
      ],
      [
        "rx_cgm_interrupt_reg13_summary",
        4,
        1
      ],
      [
        "rx_cgm_interrupt_reg14_summary",
        5,
        1
      ],
      [
        "rx_cgm_interrupt_reg15_summary",
        6,
        1
      ]
    ]
  },
  "rx_cgm_mem_protect_interrupt": {
    "type": "register",
    "block": "rx_cgm",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rx_cgm_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rx_cgm",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rx_cgm_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_cgm",
    "width": 18,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "sq_counters_table0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "sq_counters_table1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "sq_counters_table2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "sq_counters_table3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "sq_counters_table4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "sq_counters_table5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "source_cgm_policy_lut0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "source_cgm_policy_lut1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "source_cgm_policy_lut2_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "source_cgm_policy_lut3_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "source_cgm_policy_lut4_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "source_cgm_policy_lut5_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "drop_counters_ssp_tc0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "drop_counters_ssp_tc1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "drop_counters_ssp_tc2_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "drop_counters_ssp_tc3_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "drop_counters_ssp_tc4_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "drop_counters_ssp_tc5_ecc_1b_err_interrupt_mask",
        17,
        1
      ]
    ]
  },
  "rx_cgm_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_cgm",
    "width": 18,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "sq_counters_table0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "sq_counters_table1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "sq_counters_table2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "sq_counters_table3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "sq_counters_table4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "sq_counters_table5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "source_cgm_policy_lut0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "source_cgm_policy_lut1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "source_cgm_policy_lut2_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "source_cgm_policy_lut3_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "source_cgm_policy_lut4_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "source_cgm_policy_lut5_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "drop_counters_ssp_tc0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "drop_counters_ssp_tc1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "drop_counters_ssp_tc2_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "drop_counters_ssp_tc3_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "drop_counters_ssp_tc4_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "drop_counters_ssp_tc5_ecc_2b_err_interrupt_mask",
        17,
        1
      ]
    ]
  },
  "rx_cgm_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rx_cgm",
    "width": 18,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "sq_counters_table0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "sq_counters_table1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "sq_counters_table2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "sq_counters_table3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "sq_counters_table4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "sq_counters_table5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "source_cgm_policy_lut0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "source_cgm_policy_lut1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "source_cgm_policy_lut2_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "source_cgm_policy_lut3_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "source_cgm_policy_lut4_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "source_cgm_policy_lut5_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "drop_counters_ssp_tc0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "drop_counters_ssp_tc1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "drop_counters_ssp_tc2_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "drop_counters_ssp_tc3_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "drop_counters_ssp_tc4_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "drop_counters_ssp_tc5_ecc_1b_err_initiate",
        17,
        1
      ]
    ]
  },
  "rx_cgm_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rx_cgm",
    "width": 18,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "sq_counters_table0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "sq_counters_table1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "sq_counters_table2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "sq_counters_table3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "sq_counters_table4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "sq_counters_table5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "source_cgm_policy_lut0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "source_cgm_policy_lut1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "source_cgm_policy_lut2_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "source_cgm_policy_lut3_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "source_cgm_policy_lut4_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "source_cgm_policy_lut5_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "drop_counters_ssp_tc0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "drop_counters_ssp_tc1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "drop_counters_ssp_tc2_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "drop_counters_ssp_tc3_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "drop_counters_ssp_tc4_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "drop_counters_ssp_tc5_ecc_2b_err_initiate",
        17,
        1
      ]
    ]
  },
  "rx_cgm_mem_protect_err_status": {
    "type": "register",
    "block": "rx_cgm",
    "width": 18,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "sq_counters_table0_err_int",
        0,
        1
      ],
      [
        "sq_counters_table1_err_int",
        1,
        1
      ],
      [
        "sq_counters_table2_err_int",
        2,
        1
      ],
      [
        "sq_counters_table3_err_int",
        3,
        1
      ],
      [
        "sq_counters_table4_err_int",
        4,
        1
      ],
      [
        "sq_counters_table5_err_int",
        5,
        1
      ],
      [
        "source_cgm_policy_lut0_err_int",
        6,
        1
      ],
      [
        "source_cgm_policy_lut1_err_int",
        7,
        1
      ],
      [
        "source_cgm_policy_lut2_err_int",
        8,
        1
      ],
      [
        "source_cgm_policy_lut3_err_int",
        9,
        1
      ],
      [
        "source_cgm_policy_lut4_err_int",
        10,
        1
      ],
      [
        "source_cgm_policy_lut5_err_int",
        11,
        1
      ],
      [
        "drop_counters_ssp_tc0_err_int",
        12,
        1
      ],
      [
        "drop_counters_ssp_tc1_err_int",
        13,
        1
      ],
      [
        "drop_counters_ssp_tc2_err_int",
        14,
        1
      ],
      [
        "drop_counters_ssp_tc3_err_int",
        15,
        1
      ],
      [
        "drop_counters_ssp_tc4_err_int",
        16,
        1
      ],
      [
        "drop_counters_ssp_tc5_err_int",
        17,
        1
      ]
    ]
  },
  "rx_cgm_selected_ser_error_info": {
    "type": "register",
    "block": "rx_cgm",
    "width": 11,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        9
      ],
      [
        "mem_err_type",
        9,
        2
      ]
    ]
  },
  "rx_cgm_ser_error_debug_configuration": {
    "type": "register",
    "block": "rx_cgm",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "rx_cgm_ecc_1b_err_debug": {
    "type": "register",
    "block": "rx_cgm",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_cgm_ecc_2b_err_debug": {
    "type": "register",
    "block": "rx_cgm",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_cgm_counter_timer": {
    "type": "register",
    "block": "rx_cgm",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rx_cgm_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rx_cgm_memory_access_timeout": {
    "type": "register",
    "block": "rx_cgm",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rx_cgm_broadcast_config_reg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rx_cgm_memory_prot_bypass": {
    "type": "register",
    "block": "rx_cgm",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rx_cgm_soft_reset_configuration": {
    "type": "register",
    "block": "rx_cgm",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rx_cgm_mbist_configuration": {
    "type": "register",
    "block": "rx_cgm",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rx_cgm_power_down_configuration": {
    "type": "register",
    "block": "rx_cgm",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rx_cgm_spare_reg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rx_cgm_pmro_ctrl": {
    "type": "register",
    "block": "rx_cgm",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rx_cgm_pmro_status": {
    "type": "register",
    "block": "rx_cgm",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rx_cgm_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rx_cgm_mirror_bus_status": {
    "type": "register",
    "block": "rx_cgm",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rx_cgm_device_time_offset_cfg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rx_cgm_status_register": {
    "type": "register",
    "block": "rx_cgm",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "rxcgm_init_done",
        0,
        1
      ]
    ]
  },
  "rx_cgm_global_configuration": {
    "type": "register",
    "block": "rx_cgm",
    "width": 61,
    "desc": "",
    "fields": [
      [
        "slice_cbt_threshold",
        0,
        6
      ],
      [
        "slice_drop_voq",
        6,
        16
      ],
      [
        "slice_inc_msg_fifo_alm_full_thr",
        22,
        6
      ],
      [
        "slice_update_pipe_arb_mode",
        28,
        1
      ],
      [
        "slice_hr_management_mode",
        29,
        1
      ],
      [
        "slice_disable_rx_cgm",
        30,
        1
      ],
      [
        "slice_drop_pkts_count_en",
        31,
        1
      ],
      [
        "slice_enable_fast_drop_after_xon",
        32,
        1
      ],
      [
        "slice_scrubber_window",
        33,
        14
      ],
      [
        "slice_scrubber_enable",
        47,
        1
      ],
      [
        "slice_scrubber_force_gap_thr",
        48,
        6
      ],
      [
        "slice_clear_drop_counter_ctc_ctcg",
        54,
        1
      ],
      [
        "slice_clear_drop_counter_sq_sqg",
        55,
        1
      ],
      [
        "slice_clear_drop_counter_hr",
        56,
        1
      ],
      [
        "slice_count_dram_buffers",
        57,
        1
      ],
      [
        "slice_count_packets_with_ucdv_to_dram",
        58,
        1
      ],
      [
        "slice_count_two_dram_buffers_jumbo_packets",
        59,
        1
      ],
      [
        "slice_protect_from_negative_wraparound",
        60,
        1
      ]
    ]
  },
  "rx_cgm_counters_top_config": {
    "type": "register",
    "block": "rx_cgm",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "protect_from_negative_wraparound",
        0,
        1
      ]
    ]
  },
  "rx_cgm_source_cgm_policy_lut_map": {
    "type": "register",
    "block": "rx_cgm",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "slice_source_cgm_policy_lut_map",
        0,
        32
      ]
    ]
  },
  "rx_cgm_rx_cgm_interrupt_reg1": {
    "type": "register",
    "block": "rx_cgm",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slice_local_u_ser_counter_wrap_around",
        0,
        1
      ]
    ]
  },
  "rx_cgm_rx_cgm_interrupt_reg1_mask": {
    "type": "register",
    "block": "rx_cgm",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slice_local_u_ser_counter_wrap_around_mask",
        0,
        1
      ]
    ]
  },
  "rx_cgm_rx_cgm_interrupt_reg1_test": {
    "type": "register",
    "block": "rx_cgm",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slice_local_u_ser_counter_wrap_around_test",
        0,
        1
      ]
    ]
  },
  "rx_cgm_statistic_cgm_configurations": {
    "type": "register",
    "block": "rx_cgm",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "slice_statistic_update_rate_mask",
        0,
        4
      ]
    ]
  },
  "rx_cgm_rx_cgm_counters": {
    "type": "register",
    "block": "rx_cgm",
    "width": 48,
    "desc": "",
    "fields": [
      [
        "slice_flow_control_fifo_lost_update",
        0,
        16
      ],
      [
        "slice_inc_fifo_lost_updates",
        16,
        16
      ],
      [
        "slice_flow_control_tsmon",
        32,
        16
      ]
    ]
  },
  "rx_cgm_rx_cgm_status": {
    "type": "register",
    "block": "rx_cgm",
    "width": 304,
    "desc": "All counters are in one regsiter to enable reading all of them together",
    "fields": [
      [
        "sq_group0_counter",
        0,
        19
      ],
      [
        "sq_group1_counter",
        19,
        19
      ],
      [
        "sq_group2_counter",
        38,
        19
      ],
      [
        "sq_group3_counter",
        57,
        19
      ],
      [
        "ctc_group0_counter",
        76,
        19
      ],
      [
        "ctc_group1_counter",
        95,
        19
      ],
      [
        "ctc_group2_counter",
        114,
        19
      ],
      [
        "ctc_group3_counter",
        133,
        19
      ],
      [
        "ctc0_counter",
        152,
        19
      ],
      [
        "ctc1_counter",
        171,
        19
      ],
      [
        "ctc2_counter",
        190,
        19
      ],
      [
        "ctc3_counter",
        209,
        19
      ],
      [
        "ctc4_counter",
        228,
        19
      ],
      [
        "ctc5_counter",
        247,
        19
      ],
      [
        "ctc6_counter",
        266,
        19
      ],
      [
        "ctc7_counter",
        285,
        19
      ]
    ]
  },
  "rx_cgm_rx_cgm_drop_counters_ctc_sq_hr": {
    "type": "register",
    "block": "rx_cgm",
    "width": 96,
    "desc": "",
    "fields": [
      [
        "slice_drop_counter_ctc_ctcg",
        0,
        32
      ],
      [
        "slice_drop_counter_sq_sqg",
        32,
        32
      ],
      [
        "slice_drop_counter_hr",
        64,
        32
      ]
    ]
  },
  "rx_cgm_rx_cgm_drop_counters0": {
    "type": "register",
    "block": "rx_cgm",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "cgm_tc_drop_counter",
        0,
        16
      ]
    ]
  },
  "rx_cgm_rx_cgm_drop_counters1": {
    "type": "register",
    "block": "rx_cgm",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "sq_drop_counter",
        0,
        16
      ]
    ]
  },
  "rx_cgm_slice_mode_reg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "cgm_slice_mode",
        0,
        4
      ]
    ]
  },
  "rx_cgm_rx_cgm_last_in_pd": {
    "type": "register",
    "block": "rx_cgm",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "rx_cgm_last_incoming_pd",
        0,
        32
      ]
    ]
  },
  "rx_cgm_rx_cgm_debug_conf": {
    "type": "register",
    "block": "rx_cgm",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd_mux_sel",
        0,
        6
      ]
    ]
  },
  "rx_cgm_sqg_histogram_cfg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "sqg_histogram_th0",
        0,
        19
      ],
      [
        "sqg_histogram_th1",
        19,
        19
      ],
      [
        "sqg_histogram_th2",
        38,
        19
      ],
      [
        "sqg_histogram_th3",
        57,
        19
      ],
      [
        "sqg_histogram_th4",
        76,
        19
      ],
      [
        "sqg_histogram_th5",
        95,
        19
      ],
      [
        "sqg_histogram_th6",
        114,
        19
      ],
      [
        "sqg_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "rx_cgm_sqg_histogram_status": {
    "type": "register",
    "block": "rx_cgm",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "sqg_histogram_value0",
        0,
        32
      ],
      [
        "sqg_histogram_overflow0",
        32,
        1
      ],
      [
        "sqg_histogram_value1",
        33,
        32
      ],
      [
        "sqg_histogram_overflow1",
        65,
        1
      ],
      [
        "sqg_histogram_value2",
        66,
        32
      ],
      [
        "sqg_histogram_overflow2",
        98,
        1
      ],
      [
        "sqg_histogram_value3",
        99,
        32
      ],
      [
        "sqg_histogram_overflow3",
        131,
        1
      ],
      [
        "sqg_histogram_value4",
        132,
        32
      ],
      [
        "sqg_histogram_overflow4",
        164,
        1
      ],
      [
        "sqg_histogram_value5",
        165,
        32
      ],
      [
        "sqg_histogram_overflow5",
        197,
        1
      ],
      [
        "sqg_histogram_value6",
        198,
        32
      ],
      [
        "sqg_histogram_overflow6",
        230,
        1
      ],
      [
        "sqg_histogram_value7",
        231,
        32
      ],
      [
        "sqg_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "rx_cgm_sqg_histogram_max_wmk_reg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "sqg_histogram_max_wmk",
        0,
        19
      ],
      [
        "sqg_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "rx_cgm_ctc_group_histogram_cfg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "ctc_group_histogram_th0",
        0,
        19
      ],
      [
        "ctc_group_histogram_th1",
        19,
        19
      ],
      [
        "ctc_group_histogram_th2",
        38,
        19
      ],
      [
        "ctc_group_histogram_th3",
        57,
        19
      ],
      [
        "ctc_group_histogram_th4",
        76,
        19
      ],
      [
        "ctc_group_histogram_th5",
        95,
        19
      ],
      [
        "ctc_group_histogram_th6",
        114,
        19
      ],
      [
        "ctc_group_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "rx_cgm_ctc_group_histogram_status": {
    "type": "register",
    "block": "rx_cgm",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "ctc_group_histogram_value0",
        0,
        32
      ],
      [
        "ctc_group_histogram_overflow0",
        32,
        1
      ],
      [
        "ctc_group_histogram_value1",
        33,
        32
      ],
      [
        "ctc_group_histogram_overflow1",
        65,
        1
      ],
      [
        "ctc_group_histogram_value2",
        66,
        32
      ],
      [
        "ctc_group_histogram_overflow2",
        98,
        1
      ],
      [
        "ctc_group_histogram_value3",
        99,
        32
      ],
      [
        "ctc_group_histogram_overflow3",
        131,
        1
      ],
      [
        "ctc_group_histogram_value4",
        132,
        32
      ],
      [
        "ctc_group_histogram_overflow4",
        164,
        1
      ],
      [
        "ctc_group_histogram_value5",
        165,
        32
      ],
      [
        "ctc_group_histogram_overflow5",
        197,
        1
      ],
      [
        "ctc_group_histogram_value6",
        198,
        32
      ],
      [
        "ctc_group_histogram_overflow6",
        230,
        1
      ],
      [
        "ctc_group_histogram_value7",
        231,
        32
      ],
      [
        "ctc_group_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "rx_cgm_ctc_group_histogram_max_wmk_reg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "ctc_group_histogram_max_wmk",
        0,
        19
      ],
      [
        "ctc_group_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "rx_cgm_ctc_histogram_cfg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "ctc_histogram_th0",
        0,
        19
      ],
      [
        "ctc_histogram_th1",
        19,
        19
      ],
      [
        "ctc_histogram_th2",
        38,
        19
      ],
      [
        "ctc_histogram_th3",
        57,
        19
      ],
      [
        "ctc_histogram_th4",
        76,
        19
      ],
      [
        "ctc_histogram_th5",
        95,
        19
      ],
      [
        "ctc_histogram_th6",
        114,
        19
      ],
      [
        "ctc_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "rx_cgm_ctc_histogram_status": {
    "type": "register",
    "block": "rx_cgm",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "ctc_histogram_value0",
        0,
        32
      ],
      [
        "ctc_histogram_overflow0",
        32,
        1
      ],
      [
        "ctc_histogram_value1",
        33,
        32
      ],
      [
        "ctc_histogram_overflow1",
        65,
        1
      ],
      [
        "ctc_histogram_value2",
        66,
        32
      ],
      [
        "ctc_histogram_overflow2",
        98,
        1
      ],
      [
        "ctc_histogram_value3",
        99,
        32
      ],
      [
        "ctc_histogram_overflow3",
        131,
        1
      ],
      [
        "ctc_histogram_value4",
        132,
        32
      ],
      [
        "ctc_histogram_overflow4",
        164,
        1
      ],
      [
        "ctc_histogram_value5",
        165,
        32
      ],
      [
        "ctc_histogram_overflow5",
        197,
        1
      ],
      [
        "ctc_histogram_value6",
        198,
        32
      ],
      [
        "ctc_histogram_overflow6",
        230,
        1
      ],
      [
        "ctc_histogram_value7",
        231,
        32
      ],
      [
        "ctc_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "rx_cgm_ctc_histogram_max_wmk_reg": {
    "type": "register",
    "block": "rx_cgm",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "ctc_histogram_max_wmk",
        0,
        19
      ],
      [
        "ctc_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "rx_cgm_sq_counters_table": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 40,
    "desc": "",
    "fields": [
      [
        "slice_sq_buffer_counter",
        0,
        19
      ],
      [
        "slice_sq_timer_valid",
        19,
        1
      ],
      [
        "slice_sq_hr_timer_or_hr_counter",
        20,
        19
      ],
      [
        "slice_sq_state",
        39,
        1
      ]
    ]
  },
  "rx_cgm_ctc_map_lut": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 5,
    "desc": "",
    "fields": [
      [
        "slice_cgm_tc",
        0,
        3
      ],
      [
        "slice_cgm_tc_group",
        3,
        2
      ]
    ]
  },
  "rx_cgm_sq_map_table": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 15,
    "desc": "",
    "fields": [
      [
        "slice_map_mode",
        0,
        3
      ],
      [
        "slice_base_sq_counter",
        3,
        9
      ],
      [
        "slice_ctc_ptr",
        12,
        3
      ]
    ]
  },
  "rx_cgm_sq_map_lut": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "slice_counter_offset",
        0,
        3
      ]
    ]
  },
  "rx_cgm_ssp_sub_port_map": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "slice_ssp_sub_port_map",
        0,
        2
      ]
    ]
  },
  "rx_cgm_profile_map_table": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 36,
    "desc": "",
    "fields": [
      [
        "slice_entry0_sq_group",
        0,
        2
      ],
      [
        "slice_entry0_sq_profile",
        2,
        4
      ],
      [
        "slice_entry0_sq_drop_cnt_index",
        6,
        3
      ],
      [
        "slice_entry1_sq_group",
        9,
        2
      ],
      [
        "slice_entry1_sq_profile",
        11,
        4
      ],
      [
        "slice_entry1_sq_drop_cnt_index",
        15,
        3
      ],
      [
        "slice_entry2_sq_group",
        18,
        2
      ],
      [
        "slice_entry2_sq_profile",
        20,
        4
      ],
      [
        "slice_entry2_sq_drop_cnt_index",
        24,
        3
      ],
      [
        "slice_entry3_sq_group",
        27,
        2
      ],
      [
        "slice_entry3_sq_profile",
        29,
        4
      ],
      [
        "slice_entry3_sq_drop_cnt_index",
        33,
        3
      ]
    ]
  },
  "rx_cgm_sq_group_profile_lut": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 57,
    "desc": "",
    "fields": [
      [
        "slice_sq_group_thr0",
        0,
        19
      ],
      [
        "slice_sq_group_thr1",
        19,
        19
      ],
      [
        "slice_sq_group_thr2",
        38,
        19
      ]
    ]
  },
  "rx_cgm_sq_profile_lut": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 76,
    "desc": "",
    "fields": [
      [
        "slice_sq_thr0",
        0,
        19
      ],
      [
        "slice_sq_thr1",
        19,
        19
      ],
      [
        "slice_sq_thr2",
        38,
        19
      ],
      [
        "slice_hr_threshold_or_timer_max",
        57,
        19
      ]
    ]
  },
  "rx_cgm_ctc_profile_lut": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 38,
    "desc": "",
    "fields": [
      [
        "slice_ctc_green_thr",
        0,
        19
      ],
      [
        "slice_ctc_yellow_thr",
        19,
        19
      ]
    ]
  },
  "rx_cgm_ctc_group_profile_lut": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 38,
    "desc": "",
    "fields": [
      [
        "slice_ctc_group_green_thr",
        0,
        19
      ],
      [
        "slice_ctc_group_yellow_thr",
        19,
        19
      ]
    ]
  },
  "rx_cgm_source_cgm_policy_lut": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 12,
    "desc": "The index to the table is: {CounterAStatus[1:0], SQDiscrete[1:0], SQGroupDiscrete[1:0], SQ Profile[3:0]} Parsing of entries based on SourceCgmPolicyLutMap",
    "fields": [
      [
        "slice_source_cgm_policy_lut_entry0",
        0,
        3
      ],
      [
        "slice_source_cgm_policy_lut_entry1",
        3,
        3
      ],
      [
        "slice_source_cgm_policy_lut_entry2",
        6,
        3
      ],
      [
        "slice_source_cgm_policy_lut_entry3",
        9,
        3
      ]
    ]
  },
  "rx_cgm_sq_status_table": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "slice_entry0_sq_status",
        0,
        2
      ],
      [
        "slice_entry0_sq_hr_drop",
        2,
        1
      ],
      [
        "slice_entry1_sq_status",
        3,
        2
      ],
      [
        "slice_entry1_sq_hr_drop",
        5,
        1
      ],
      [
        "slice_entry2_sq_status",
        6,
        2
      ],
      [
        "slice_entry2_sq_hr_drop",
        8,
        1
      ],
      [
        "slice_entry3_sq_status",
        9,
        2
      ],
      [
        "slice_entry3_sq_hr_drop",
        11,
        1
      ]
    ]
  },
  "rx_cgm_source_if_to_port_map": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 7,
    "desc": "",
    "fields": [
      [
        "slice_source_port",
        0,
        5
      ],
      [
        "slice_ifg_num",
        5,
        1
      ],
      [
        "slice_fc_enable",
        6,
        1
      ]
    ]
  },
  "rx_cgm_drop_counters_ssp_tc": {
    "type": "memory",
    "block": "rx_cgm",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "slice_drop_counters_ssp_tc",
        0,
        32
      ]
    ]
  },
  "rx_meter_block_interrupt_register": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 1,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ]
    ]
  },
  "rx_meter_block_mem_protect_interrupt": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rx_meter_block_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rx_meter_block_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 15,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "meters_table0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "meters_table1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "meters_table2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "meters_attribute_table0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "meters_attribute_table1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "meters_attribute_table2_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "meters_state_table0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "meters_state_table1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "meters_state_table2_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "meter_shaper_configuration_table0_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "meter_shaper_configuration_table1_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "meter_shaper_configuration_table2_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "meter_shaper_linked_list_table0_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "meter_shaper_linked_list_table1_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "meter_shaper_linked_list_table2_ecc_1b_err_interrupt_mask",
        14,
        1
      ]
    ]
  },
  "rx_meter_block_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 15,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "meters_table0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "meters_table1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "meters_table2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "meters_attribute_table0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "meters_attribute_table1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "meters_attribute_table2_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "meters_state_table0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "meters_state_table1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "meters_state_table2_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "meter_shaper_configuration_table0_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "meter_shaper_configuration_table1_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "meter_shaper_configuration_table2_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "meter_shaper_linked_list_table0_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "meter_shaper_linked_list_table1_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "meter_shaper_linked_list_table2_ecc_2b_err_interrupt_mask",
        14,
        1
      ]
    ]
  },
  "rx_meter_block_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 15,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "meters_table0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "meters_table1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "meters_table2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "meters_attribute_table0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "meters_attribute_table1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "meters_attribute_table2_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "meters_state_table0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "meters_state_table1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "meters_state_table2_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "meter_shaper_configuration_table0_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "meter_shaper_configuration_table1_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "meter_shaper_configuration_table2_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "meter_shaper_linked_list_table0_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "meter_shaper_linked_list_table1_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "meter_shaper_linked_list_table2_ecc_1b_err_initiate",
        14,
        1
      ]
    ]
  },
  "rx_meter_block_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 15,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "meters_table0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "meters_table1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "meters_table2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "meters_attribute_table0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "meters_attribute_table1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "meters_attribute_table2_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "meters_state_table0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "meters_state_table1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "meters_state_table2_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "meter_shaper_configuration_table0_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "meter_shaper_configuration_table1_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "meter_shaper_configuration_table2_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "meter_shaper_linked_list_table0_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "meter_shaper_linked_list_table1_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "meter_shaper_linked_list_table2_ecc_2b_err_initiate",
        14,
        1
      ]
    ]
  },
  "rx_meter_block_mem_protect_err_status": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 15,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "meters_table0_err_int",
        0,
        1
      ],
      [
        "meters_table1_err_int",
        1,
        1
      ],
      [
        "meters_table2_err_int",
        2,
        1
      ],
      [
        "meters_attribute_table0_err_int",
        3,
        1
      ],
      [
        "meters_attribute_table1_err_int",
        4,
        1
      ],
      [
        "meters_attribute_table2_err_int",
        5,
        1
      ],
      [
        "meters_state_table0_err_int",
        6,
        1
      ],
      [
        "meters_state_table1_err_int",
        7,
        1
      ],
      [
        "meters_state_table2_err_int",
        8,
        1
      ],
      [
        "meter_shaper_configuration_table0_err_int",
        9,
        1
      ],
      [
        "meter_shaper_configuration_table1_err_int",
        10,
        1
      ],
      [
        "meter_shaper_configuration_table2_err_int",
        11,
        1
      ],
      [
        "meter_shaper_linked_list_table0_err_int",
        12,
        1
      ],
      [
        "meter_shaper_linked_list_table1_err_int",
        13,
        1
      ],
      [
        "meter_shaper_linked_list_table2_err_int",
        14,
        1
      ]
    ]
  },
  "rx_meter_block_selected_ser_error_info": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 14,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        12
      ],
      [
        "mem_err_type",
        12,
        2
      ]
    ]
  },
  "rx_meter_block_ser_error_debug_configuration": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "rx_meter_block_ecc_1b_err_debug": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_meter_block_ecc_2b_err_debug": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_meter_block_counter_timer": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rx_meter_block_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rx_meter_block_memory_access_timeout": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rx_meter_block_broadcast_config_reg": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rx_meter_block_memory_prot_bypass": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rx_meter_block_soft_reset_configuration": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rx_meter_block_mbist_configuration": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rx_meter_block_power_down_configuration": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rx_meter_block_spare_reg": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rx_meter_block_pmro_ctrl": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rx_meter_block_pmro_status": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rx_meter_block_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rx_meter_block_mirror_bus_status": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rx_meter_block_device_time_offset_cfg": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rx_meter_block_meter_block_configuration": {
    "type": "register",
    "block": "rx_meter_block",
    "width": 27,
    "desc": "",
    "fields": [
      [
        "block_token_size",
        0,
        5
      ],
      [
        "block_shaper_fifo_pause_thr",
        5,
        5
      ],
      [
        "block_exact_pkt_count_mode_dec",
        10,
        17
      ]
    ]
  },
  "rx_meter_block_meters_table": {
    "type": "memory",
    "block": "rx_meter_block",
    "width": 88,
    "desc": "",
    "fields": [
      [
        "table_entry0_commited_meter",
        0,
        22
      ],
      [
        "table_entry0_excess_meter",
        22,
        22
      ],
      [
        "table_entry1_commited_meter",
        44,
        22
      ],
      [
        "table_entry1_excess_meter",
        66,
        22
      ]
    ]
  },
  "rx_meter_block_meters_attribute_table": {
    "type": "memory",
    "block": "rx_meter_block",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "table_entry0_profile",
        0,
        4
      ],
      [
        "table_entry0_meter_decision_mapping_profile",
        4,
        2
      ],
      [
        "table_entry1_profile",
        6,
        4
      ],
      [
        "table_entry1_meter_decision_mapping_profile",
        10,
        2
      ],
      [
        "table_entry2_profile",
        12,
        4
      ],
      [
        "table_entry2_meter_decision_mapping_profile",
        16,
        2
      ],
      [
        "table_entry3_profile",
        18,
        4
      ],
      [
        "table_entry3_meter_decision_mapping_profile",
        22,
        2
      ]
    ]
  },
  "rx_meter_block_meters_state_table": {
    "type": "memory",
    "block": "rx_meter_block",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "meters_state_entry0_color_aware_mode",
        0,
        1
      ],
      [
        "meters_state_entry0_meter_mode",
        1,
        1
      ],
      [
        "meters_state_entry0_meter_decision_mapping_profile",
        2,
        2
      ],
      [
        "meters_state_entry0_commited_above_zero",
        4,
        1
      ],
      [
        "meters_state_entry0_excess_above_zero",
        5,
        1
      ],
      [
        "meters_state_entry1_color_aware_mode",
        6,
        1
      ],
      [
        "meters_state_entry1_meter_mode",
        7,
        1
      ],
      [
        "meters_state_entry1_meter_decision_mapping_profile",
        8,
        2
      ],
      [
        "meters_state_entry1_commited_above_zero",
        10,
        1
      ],
      [
        "meters_state_entry1_excess_above_zero",
        11,
        1
      ]
    ]
  },
  "rx_meter_block_meter_profile_table": {
    "type": "memory",
    "block": "rx_meter_block",
    "width": 39,
    "desc": "",
    "fields": [
      [
        "meter_profile_meter_count_mode",
        0,
        1
      ],
      [
        "meter_profile_meter_mode",
        1,
        1
      ],
      [
        "meter_profile_color_aware_mode",
        2,
        1
      ],
      [
        "meter_profile_cbs",
        3,
        18
      ],
      [
        "meter_profile_ebs",
        21,
        18
      ]
    ]
  },
  "rx_meter_block_meter_shaper_configuration_table": {
    "type": "memory",
    "block": "rx_meter_block",
    "width": 40,
    "desc": "",
    "fields": [
      [
        "meter_shaper_configuration_entry0_cir_weight",
        0,
        10
      ],
      [
        "meter_shaper_configuration_entry0_eir_weight",
        10,
        10
      ],
      [
        "meter_shaper_configuration_entry1_cir_weight",
        20,
        10
      ],
      [
        "meter_shaper_configuration_entry1_eir_weight",
        30,
        10
      ]
    ]
  },
  "rx_meter_block_meter_shaper_linked_list_table": {
    "type": "memory",
    "block": "rx_meter_block",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "meter_shaper_linked_list",
        0,
        12
      ]
    ]
  },
  "rx_meter_interrupt_register": {
    "type": "register",
    "block": "rx_meter",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "meter_blocks_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "rx_meter_mem_protect_interrupt": {
    "type": "register",
    "block": "rx_meter",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rx_meter_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rx_meter",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rx_meter_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_meter",
    "width": 78,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "meters_table0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "meters_table1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "meters_table2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "meters_table3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "meters_attribute_table0_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "meters_attribute_table1_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "meters_attribute_table2_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "meters_attribute_table3_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "meters_state_table0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "meters_state_table1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "meters_state_table2_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "meters_state_table3_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "meters_state_table4_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "meters_state_table5_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "meters_state_table6_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "meters_state_table7_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "meters_state_table8_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "meters_state_table9_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "meters_state_table10_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "meters_state_table11_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "meters_state_table12_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "meters_state_table13_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "meters_state_table14_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "meters_state_table15_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "meters_state_table16_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "meters_state_table17_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "meters_state_table18_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "meters_state_table19_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "meters_state_table20_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "meters_state_table21_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "meters_state_table22_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "meters_state_table23_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "meters_token_table0_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "meters_token_table1_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "meters_token_table2_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "meters_token_table3_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "meters_bw_sensing_table0_ecc_1b_err_interrupt_mask",
        36,
        1
      ],
      [
        "meters_bw_sensing_table1_ecc_1b_err_interrupt_mask",
        37,
        1
      ],
      [
        "meters_bw_sensing_table2_ecc_1b_err_interrupt_mask",
        38,
        1
      ],
      [
        "meters_bw_sensing_table3_ecc_1b_err_interrupt_mask",
        39,
        1
      ],
      [
        "inactive_buckets_table0_ecc_1b_err_interrupt_mask",
        40,
        1
      ],
      [
        "inactive_buckets_table1_ecc_1b_err_interrupt_mask",
        41,
        1
      ],
      [
        "inactive_buckets_table2_ecc_1b_err_interrupt_mask",
        42,
        1
      ],
      [
        "inactive_buckets_table3_ecc_1b_err_interrupt_mask",
        43,
        1
      ],
      [
        "counter_pair_table0_ecc_1b_err_interrupt_mask",
        44,
        1
      ],
      [
        "counter_pair_table1_ecc_1b_err_interrupt_mask",
        45,
        1
      ],
      [
        "counter_pair_table2_ecc_1b_err_interrupt_mask",
        46,
        1
      ],
      [
        "counter_pair_table3_ecc_1b_err_interrupt_mask",
        47,
        1
      ],
      [
        "port_counter_pair_table0_ecc_1b_err_interrupt_mask",
        48,
        1
      ],
      [
        "port_counter_pair_table1_ecc_1b_err_interrupt_mask",
        49,
        1
      ],
      [
        "port_counter_pair_table2_ecc_1b_err_interrupt_mask",
        50,
        1
      ],
      [
        "port_counter_pair_table3_ecc_1b_err_interrupt_mask",
        51,
        1
      ],
      [
        "port_counter_pair_table4_ecc_1b_err_interrupt_mask",
        52,
        1
      ],
      [
        "port_counter_pair_table5_ecc_1b_err_interrupt_mask",
        53,
        1
      ],
      [
        "port_counter_pair_table6_ecc_1b_err_interrupt_mask",
        54,
        1
      ],
      [
        "port_counter_pair_table7_ecc_1b_err_interrupt_mask",
        55,
        1
      ],
      [
        "port_counter_pair_table8_ecc_1b_err_interrupt_mask",
        56,
        1
      ],
      [
        "port_counter_pair_table9_ecc_1b_err_interrupt_mask",
        57,
        1
      ],
      [
        "port_counter_pair_table10_ecc_1b_err_interrupt_mask",
        58,
        1
      ],
      [
        "port_counter_pair_table11_ecc_1b_err_interrupt_mask",
        59,
        1
      ],
      [
        "meter_shaper_configuration_table0_ecc_1b_err_interrupt_mask",
        60,
        1
      ],
      [
        "meter_shaper_configuration_table1_ecc_1b_err_interrupt_mask",
        61,
        1
      ],
      [
        "meter_shaper_configuration_table2_ecc_1b_err_interrupt_mask",
        62,
        1
      ],
      [
        "meter_shaper_configuration_table3_ecc_1b_err_interrupt_mask",
        63,
        1
      ],
      [
        "meter_shaper_linked_list_table0_ecc_1b_err_interrupt_mask",
        64,
        1
      ],
      [
        "meter_shaper_linked_list_table1_ecc_1b_err_interrupt_mask",
        65,
        1
      ],
      [
        "meter_shaper_linked_list_table2_ecc_1b_err_interrupt_mask",
        66,
        1
      ],
      [
        "meter_shaper_linked_list_table3_ecc_1b_err_interrupt_mask",
        67,
        1
      ],
      [
        "packet_marking_balance_table0_ecc_1b_err_interrupt_mask",
        68,
        1
      ],
      [
        "packet_marking_balance_table1_ecc_1b_err_interrupt_mask",
        69,
        1
      ],
      [
        "packet_marking_balance_table2_ecc_1b_err_interrupt_mask",
        70,
        1
      ],
      [
        "packet_marking_balance_table3_ecc_1b_err_interrupt_mask",
        71,
        1
      ],
      [
        "packet_marking_balance_table4_ecc_1b_err_interrupt_mask",
        72,
        1
      ],
      [
        "packet_marking_balance_table5_ecc_1b_err_interrupt_mask",
        73,
        1
      ],
      [
        "central_packet_marking_table_ecc_1b_err_interrupt_mask",
        74,
        1
      ],
      [
        "central_packet_marking_config_table_ecc_1b_err_interrupt_mask",
        75,
        1
      ],
      [
        "bw_dist_msg_gen_fifo_ecc_1b_err_interrupt_mask",
        76,
        1
      ],
      [
        "msg_gen_conf_table_ecc_1b_err_interrupt_mask",
        77,
        1
      ]
    ]
  },
  "rx_meter_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_meter",
    "width": 78,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "meters_table0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "meters_table1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "meters_table2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "meters_table3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "meters_attribute_table0_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "meters_attribute_table1_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "meters_attribute_table2_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "meters_attribute_table3_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "meters_state_table0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "meters_state_table1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "meters_state_table2_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "meters_state_table3_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "meters_state_table4_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "meters_state_table5_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "meters_state_table6_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "meters_state_table7_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "meters_state_table8_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "meters_state_table9_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "meters_state_table10_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "meters_state_table11_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "meters_state_table12_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "meters_state_table13_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "meters_state_table14_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "meters_state_table15_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "meters_state_table16_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "meters_state_table17_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "meters_state_table18_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "meters_state_table19_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "meters_state_table20_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "meters_state_table21_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "meters_state_table22_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "meters_state_table23_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "meters_token_table0_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "meters_token_table1_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "meters_token_table2_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "meters_token_table3_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "meters_bw_sensing_table0_ecc_2b_err_interrupt_mask",
        36,
        1
      ],
      [
        "meters_bw_sensing_table1_ecc_2b_err_interrupt_mask",
        37,
        1
      ],
      [
        "meters_bw_sensing_table2_ecc_2b_err_interrupt_mask",
        38,
        1
      ],
      [
        "meters_bw_sensing_table3_ecc_2b_err_interrupt_mask",
        39,
        1
      ],
      [
        "inactive_buckets_table0_ecc_2b_err_interrupt_mask",
        40,
        1
      ],
      [
        "inactive_buckets_table1_ecc_2b_err_interrupt_mask",
        41,
        1
      ],
      [
        "inactive_buckets_table2_ecc_2b_err_interrupt_mask",
        42,
        1
      ],
      [
        "inactive_buckets_table3_ecc_2b_err_interrupt_mask",
        43,
        1
      ],
      [
        "counter_pair_table0_ecc_2b_err_interrupt_mask",
        44,
        1
      ],
      [
        "counter_pair_table1_ecc_2b_err_interrupt_mask",
        45,
        1
      ],
      [
        "counter_pair_table2_ecc_2b_err_interrupt_mask",
        46,
        1
      ],
      [
        "counter_pair_table3_ecc_2b_err_interrupt_mask",
        47,
        1
      ],
      [
        "port_counter_pair_table0_ecc_2b_err_interrupt_mask",
        48,
        1
      ],
      [
        "port_counter_pair_table1_ecc_2b_err_interrupt_mask",
        49,
        1
      ],
      [
        "port_counter_pair_table2_ecc_2b_err_interrupt_mask",
        50,
        1
      ],
      [
        "port_counter_pair_table3_ecc_2b_err_interrupt_mask",
        51,
        1
      ],
      [
        "port_counter_pair_table4_ecc_2b_err_interrupt_mask",
        52,
        1
      ],
      [
        "port_counter_pair_table5_ecc_2b_err_interrupt_mask",
        53,
        1
      ],
      [
        "port_counter_pair_table6_ecc_2b_err_interrupt_mask",
        54,
        1
      ],
      [
        "port_counter_pair_table7_ecc_2b_err_interrupt_mask",
        55,
        1
      ],
      [
        "port_counter_pair_table8_ecc_2b_err_interrupt_mask",
        56,
        1
      ],
      [
        "port_counter_pair_table9_ecc_2b_err_interrupt_mask",
        57,
        1
      ],
      [
        "port_counter_pair_table10_ecc_2b_err_interrupt_mask",
        58,
        1
      ],
      [
        "port_counter_pair_table11_ecc_2b_err_interrupt_mask",
        59,
        1
      ],
      [
        "meter_shaper_configuration_table0_ecc_2b_err_interrupt_mask",
        60,
        1
      ],
      [
        "meter_shaper_configuration_table1_ecc_2b_err_interrupt_mask",
        61,
        1
      ],
      [
        "meter_shaper_configuration_table2_ecc_2b_err_interrupt_mask",
        62,
        1
      ],
      [
        "meter_shaper_configuration_table3_ecc_2b_err_interrupt_mask",
        63,
        1
      ],
      [
        "meter_shaper_linked_list_table0_ecc_2b_err_interrupt_mask",
        64,
        1
      ],
      [
        "meter_shaper_linked_list_table1_ecc_2b_err_interrupt_mask",
        65,
        1
      ],
      [
        "meter_shaper_linked_list_table2_ecc_2b_err_interrupt_mask",
        66,
        1
      ],
      [
        "meter_shaper_linked_list_table3_ecc_2b_err_interrupt_mask",
        67,
        1
      ],
      [
        "packet_marking_balance_table0_ecc_2b_err_interrupt_mask",
        68,
        1
      ],
      [
        "packet_marking_balance_table1_ecc_2b_err_interrupt_mask",
        69,
        1
      ],
      [
        "packet_marking_balance_table2_ecc_2b_err_interrupt_mask",
        70,
        1
      ],
      [
        "packet_marking_balance_table3_ecc_2b_err_interrupt_mask",
        71,
        1
      ],
      [
        "packet_marking_balance_table4_ecc_2b_err_interrupt_mask",
        72,
        1
      ],
      [
        "packet_marking_balance_table5_ecc_2b_err_interrupt_mask",
        73,
        1
      ],
      [
        "central_packet_marking_table_ecc_2b_err_interrupt_mask",
        74,
        1
      ],
      [
        "central_packet_marking_config_table_ecc_2b_err_interrupt_mask",
        75,
        1
      ],
      [
        "bw_dist_msg_gen_fifo_ecc_2b_err_interrupt_mask",
        76,
        1
      ],
      [
        "msg_gen_conf_table_ecc_2b_err_interrupt_mask",
        77,
        1
      ]
    ]
  },
  "rx_meter_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rx_meter",
    "width": 78,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "meters_table0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "meters_table1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "meters_table2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "meters_table3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "meters_attribute_table0_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "meters_attribute_table1_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "meters_attribute_table2_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "meters_attribute_table3_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "meters_state_table0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "meters_state_table1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "meters_state_table2_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "meters_state_table3_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "meters_state_table4_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "meters_state_table5_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "meters_state_table6_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "meters_state_table7_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "meters_state_table8_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "meters_state_table9_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "meters_state_table10_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "meters_state_table11_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "meters_state_table12_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "meters_state_table13_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "meters_state_table14_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "meters_state_table15_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "meters_state_table16_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "meters_state_table17_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "meters_state_table18_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "meters_state_table19_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "meters_state_table20_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "meters_state_table21_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "meters_state_table22_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "meters_state_table23_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "meters_token_table0_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "meters_token_table1_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "meters_token_table2_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "meters_token_table3_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "meters_bw_sensing_table0_ecc_1b_err_initiate",
        36,
        1
      ],
      [
        "meters_bw_sensing_table1_ecc_1b_err_initiate",
        37,
        1
      ],
      [
        "meters_bw_sensing_table2_ecc_1b_err_initiate",
        38,
        1
      ],
      [
        "meters_bw_sensing_table3_ecc_1b_err_initiate",
        39,
        1
      ],
      [
        "inactive_buckets_table0_ecc_1b_err_initiate",
        40,
        1
      ],
      [
        "inactive_buckets_table1_ecc_1b_err_initiate",
        41,
        1
      ],
      [
        "inactive_buckets_table2_ecc_1b_err_initiate",
        42,
        1
      ],
      [
        "inactive_buckets_table3_ecc_1b_err_initiate",
        43,
        1
      ],
      [
        "counter_pair_table0_ecc_1b_err_initiate",
        44,
        1
      ],
      [
        "counter_pair_table1_ecc_1b_err_initiate",
        45,
        1
      ],
      [
        "counter_pair_table2_ecc_1b_err_initiate",
        46,
        1
      ],
      [
        "counter_pair_table3_ecc_1b_err_initiate",
        47,
        1
      ],
      [
        "port_counter_pair_table0_ecc_1b_err_initiate",
        48,
        1
      ],
      [
        "port_counter_pair_table1_ecc_1b_err_initiate",
        49,
        1
      ],
      [
        "port_counter_pair_table2_ecc_1b_err_initiate",
        50,
        1
      ],
      [
        "port_counter_pair_table3_ecc_1b_err_initiate",
        51,
        1
      ],
      [
        "port_counter_pair_table4_ecc_1b_err_initiate",
        52,
        1
      ],
      [
        "port_counter_pair_table5_ecc_1b_err_initiate",
        53,
        1
      ],
      [
        "port_counter_pair_table6_ecc_1b_err_initiate",
        54,
        1
      ],
      [
        "port_counter_pair_table7_ecc_1b_err_initiate",
        55,
        1
      ],
      [
        "port_counter_pair_table8_ecc_1b_err_initiate",
        56,
        1
      ],
      [
        "port_counter_pair_table9_ecc_1b_err_initiate",
        57,
        1
      ],
      [
        "port_counter_pair_table10_ecc_1b_err_initiate",
        58,
        1
      ],
      [
        "port_counter_pair_table11_ecc_1b_err_initiate",
        59,
        1
      ],
      [
        "meter_shaper_configuration_table0_ecc_1b_err_initiate",
        60,
        1
      ],
      [
        "meter_shaper_configuration_table1_ecc_1b_err_initiate",
        61,
        1
      ],
      [
        "meter_shaper_configuration_table2_ecc_1b_err_initiate",
        62,
        1
      ],
      [
        "meter_shaper_configuration_table3_ecc_1b_err_initiate",
        63,
        1
      ],
      [
        "meter_shaper_linked_list_table0_ecc_1b_err_initiate",
        64,
        1
      ],
      [
        "meter_shaper_linked_list_table1_ecc_1b_err_initiate",
        65,
        1
      ],
      [
        "meter_shaper_linked_list_table2_ecc_1b_err_initiate",
        66,
        1
      ],
      [
        "meter_shaper_linked_list_table3_ecc_1b_err_initiate",
        67,
        1
      ],
      [
        "packet_marking_balance_table0_ecc_1b_err_initiate",
        68,
        1
      ],
      [
        "packet_marking_balance_table1_ecc_1b_err_initiate",
        69,
        1
      ],
      [
        "packet_marking_balance_table2_ecc_1b_err_initiate",
        70,
        1
      ],
      [
        "packet_marking_balance_table3_ecc_1b_err_initiate",
        71,
        1
      ],
      [
        "packet_marking_balance_table4_ecc_1b_err_initiate",
        72,
        1
      ],
      [
        "packet_marking_balance_table5_ecc_1b_err_initiate",
        73,
        1
      ],
      [
        "central_packet_marking_table_ecc_1b_err_initiate",
        74,
        1
      ],
      [
        "central_packet_marking_config_table_ecc_1b_err_initiate",
        75,
        1
      ],
      [
        "bw_dist_msg_gen_fifo_ecc_1b_err_initiate",
        76,
        1
      ],
      [
        "msg_gen_conf_table_ecc_1b_err_initiate",
        77,
        1
      ]
    ]
  },
  "rx_meter_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rx_meter",
    "width": 78,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "meters_table0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "meters_table1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "meters_table2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "meters_table3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "meters_attribute_table0_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "meters_attribute_table1_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "meters_attribute_table2_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "meters_attribute_table3_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "meters_state_table0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "meters_state_table1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "meters_state_table2_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "meters_state_table3_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "meters_state_table4_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "meters_state_table5_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "meters_state_table6_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "meters_state_table7_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "meters_state_table8_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "meters_state_table9_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "meters_state_table10_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "meters_state_table11_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "meters_state_table12_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "meters_state_table13_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "meters_state_table14_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "meters_state_table15_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "meters_state_table16_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "meters_state_table17_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "meters_state_table18_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "meters_state_table19_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "meters_state_table20_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "meters_state_table21_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "meters_state_table22_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "meters_state_table23_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "meters_token_table0_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "meters_token_table1_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "meters_token_table2_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "meters_token_table3_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "meters_bw_sensing_table0_ecc_2b_err_initiate",
        36,
        1
      ],
      [
        "meters_bw_sensing_table1_ecc_2b_err_initiate",
        37,
        1
      ],
      [
        "meters_bw_sensing_table2_ecc_2b_err_initiate",
        38,
        1
      ],
      [
        "meters_bw_sensing_table3_ecc_2b_err_initiate",
        39,
        1
      ],
      [
        "inactive_buckets_table0_ecc_2b_err_initiate",
        40,
        1
      ],
      [
        "inactive_buckets_table1_ecc_2b_err_initiate",
        41,
        1
      ],
      [
        "inactive_buckets_table2_ecc_2b_err_initiate",
        42,
        1
      ],
      [
        "inactive_buckets_table3_ecc_2b_err_initiate",
        43,
        1
      ],
      [
        "counter_pair_table0_ecc_2b_err_initiate",
        44,
        1
      ],
      [
        "counter_pair_table1_ecc_2b_err_initiate",
        45,
        1
      ],
      [
        "counter_pair_table2_ecc_2b_err_initiate",
        46,
        1
      ],
      [
        "counter_pair_table3_ecc_2b_err_initiate",
        47,
        1
      ],
      [
        "port_counter_pair_table0_ecc_2b_err_initiate",
        48,
        1
      ],
      [
        "port_counter_pair_table1_ecc_2b_err_initiate",
        49,
        1
      ],
      [
        "port_counter_pair_table2_ecc_2b_err_initiate",
        50,
        1
      ],
      [
        "port_counter_pair_table3_ecc_2b_err_initiate",
        51,
        1
      ],
      [
        "port_counter_pair_table4_ecc_2b_err_initiate",
        52,
        1
      ],
      [
        "port_counter_pair_table5_ecc_2b_err_initiate",
        53,
        1
      ],
      [
        "port_counter_pair_table6_ecc_2b_err_initiate",
        54,
        1
      ],
      [
        "port_counter_pair_table7_ecc_2b_err_initiate",
        55,
        1
      ],
      [
        "port_counter_pair_table8_ecc_2b_err_initiate",
        56,
        1
      ],
      [
        "port_counter_pair_table9_ecc_2b_err_initiate",
        57,
        1
      ],
      [
        "port_counter_pair_table10_ecc_2b_err_initiate",
        58,
        1
      ],
      [
        "port_counter_pair_table11_ecc_2b_err_initiate",
        59,
        1
      ],
      [
        "meter_shaper_configuration_table0_ecc_2b_err_initiate",
        60,
        1
      ],
      [
        "meter_shaper_configuration_table1_ecc_2b_err_initiate",
        61,
        1
      ],
      [
        "meter_shaper_configuration_table2_ecc_2b_err_initiate",
        62,
        1
      ],
      [
        "meter_shaper_configuration_table3_ecc_2b_err_initiate",
        63,
        1
      ],
      [
        "meter_shaper_linked_list_table0_ecc_2b_err_initiate",
        64,
        1
      ],
      [
        "meter_shaper_linked_list_table1_ecc_2b_err_initiate",
        65,
        1
      ],
      [
        "meter_shaper_linked_list_table2_ecc_2b_err_initiate",
        66,
        1
      ],
      [
        "meter_shaper_linked_list_table3_ecc_2b_err_initiate",
        67,
        1
      ],
      [
        "packet_marking_balance_table0_ecc_2b_err_initiate",
        68,
        1
      ],
      [
        "packet_marking_balance_table1_ecc_2b_err_initiate",
        69,
        1
      ],
      [
        "packet_marking_balance_table2_ecc_2b_err_initiate",
        70,
        1
      ],
      [
        "packet_marking_balance_table3_ecc_2b_err_initiate",
        71,
        1
      ],
      [
        "packet_marking_balance_table4_ecc_2b_err_initiate",
        72,
        1
      ],
      [
        "packet_marking_balance_table5_ecc_2b_err_initiate",
        73,
        1
      ],
      [
        "central_packet_marking_table_ecc_2b_err_initiate",
        74,
        1
      ],
      [
        "central_packet_marking_config_table_ecc_2b_err_initiate",
        75,
        1
      ],
      [
        "bw_dist_msg_gen_fifo_ecc_2b_err_initiate",
        76,
        1
      ],
      [
        "msg_gen_conf_table_ecc_2b_err_initiate",
        77,
        1
      ]
    ]
  },
  "rx_meter_mem_protect_err_status": {
    "type": "register",
    "block": "rx_meter",
    "width": 78,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "meters_table0_err_int",
        0,
        1
      ],
      [
        "meters_table1_err_int",
        1,
        1
      ],
      [
        "meters_table2_err_int",
        2,
        1
      ],
      [
        "meters_table3_err_int",
        3,
        1
      ],
      [
        "meters_attribute_table0_err_int",
        4,
        1
      ],
      [
        "meters_attribute_table1_err_int",
        5,
        1
      ],
      [
        "meters_attribute_table2_err_int",
        6,
        1
      ],
      [
        "meters_attribute_table3_err_int",
        7,
        1
      ],
      [
        "meters_state_table0_err_int",
        8,
        1
      ],
      [
        "meters_state_table1_err_int",
        9,
        1
      ],
      [
        "meters_state_table2_err_int",
        10,
        1
      ],
      [
        "meters_state_table3_err_int",
        11,
        1
      ],
      [
        "meters_state_table4_err_int",
        12,
        1
      ],
      [
        "meters_state_table5_err_int",
        13,
        1
      ],
      [
        "meters_state_table6_err_int",
        14,
        1
      ],
      [
        "meters_state_table7_err_int",
        15,
        1
      ],
      [
        "meters_state_table8_err_int",
        16,
        1
      ],
      [
        "meters_state_table9_err_int",
        17,
        1
      ],
      [
        "meters_state_table10_err_int",
        18,
        1
      ],
      [
        "meters_state_table11_err_int",
        19,
        1
      ],
      [
        "meters_state_table12_err_int",
        20,
        1
      ],
      [
        "meters_state_table13_err_int",
        21,
        1
      ],
      [
        "meters_state_table14_err_int",
        22,
        1
      ],
      [
        "meters_state_table15_err_int",
        23,
        1
      ],
      [
        "meters_state_table16_err_int",
        24,
        1
      ],
      [
        "meters_state_table17_err_int",
        25,
        1
      ],
      [
        "meters_state_table18_err_int",
        26,
        1
      ],
      [
        "meters_state_table19_err_int",
        27,
        1
      ],
      [
        "meters_state_table20_err_int",
        28,
        1
      ],
      [
        "meters_state_table21_err_int",
        29,
        1
      ],
      [
        "meters_state_table22_err_int",
        30,
        1
      ],
      [
        "meters_state_table23_err_int",
        31,
        1
      ],
      [
        "meters_token_table0_err_int",
        32,
        1
      ],
      [
        "meters_token_table1_err_int",
        33,
        1
      ],
      [
        "meters_token_table2_err_int",
        34,
        1
      ],
      [
        "meters_token_table3_err_int",
        35,
        1
      ],
      [
        "meters_bw_sensing_table0_err_int",
        36,
        1
      ],
      [
        "meters_bw_sensing_table1_err_int",
        37,
        1
      ],
      [
        "meters_bw_sensing_table2_err_int",
        38,
        1
      ],
      [
        "meters_bw_sensing_table3_err_int",
        39,
        1
      ],
      [
        "inactive_buckets_table0_err_int",
        40,
        1
      ],
      [
        "inactive_buckets_table1_err_int",
        41,
        1
      ],
      [
        "inactive_buckets_table2_err_int",
        42,
        1
      ],
      [
        "inactive_buckets_table3_err_int",
        43,
        1
      ],
      [
        "counter_pair_table0_err_int",
        44,
        1
      ],
      [
        "counter_pair_table1_err_int",
        45,
        1
      ],
      [
        "counter_pair_table2_err_int",
        46,
        1
      ],
      [
        "counter_pair_table3_err_int",
        47,
        1
      ],
      [
        "port_counter_pair_table0_err_int",
        48,
        1
      ],
      [
        "port_counter_pair_table1_err_int",
        49,
        1
      ],
      [
        "port_counter_pair_table2_err_int",
        50,
        1
      ],
      [
        "port_counter_pair_table3_err_int",
        51,
        1
      ],
      [
        "port_counter_pair_table4_err_int",
        52,
        1
      ],
      [
        "port_counter_pair_table5_err_int",
        53,
        1
      ],
      [
        "port_counter_pair_table6_err_int",
        54,
        1
      ],
      [
        "port_counter_pair_table7_err_int",
        55,
        1
      ],
      [
        "port_counter_pair_table8_err_int",
        56,
        1
      ],
      [
        "port_counter_pair_table9_err_int",
        57,
        1
      ],
      [
        "port_counter_pair_table10_err_int",
        58,
        1
      ],
      [
        "port_counter_pair_table11_err_int",
        59,
        1
      ],
      [
        "meter_shaper_configuration_table0_err_int",
        60,
        1
      ],
      [
        "meter_shaper_configuration_table1_err_int",
        61,
        1
      ],
      [
        "meter_shaper_configuration_table2_err_int",
        62,
        1
      ],
      [
        "meter_shaper_configuration_table3_err_int",
        63,
        1
      ],
      [
        "meter_shaper_linked_list_table0_err_int",
        64,
        1
      ],
      [
        "meter_shaper_linked_list_table1_err_int",
        65,
        1
      ],
      [
        "meter_shaper_linked_list_table2_err_int",
        66,
        1
      ],
      [
        "meter_shaper_linked_list_table3_err_int",
        67,
        1
      ],
      [
        "packet_marking_balance_table0_err_int",
        68,
        1
      ],
      [
        "packet_marking_balance_table1_err_int",
        69,
        1
      ],
      [
        "packet_marking_balance_table2_err_int",
        70,
        1
      ],
      [
        "packet_marking_balance_table3_err_int",
        71,
        1
      ],
      [
        "packet_marking_balance_table4_err_int",
        72,
        1
      ],
      [
        "packet_marking_balance_table5_err_int",
        73,
        1
      ],
      [
        "central_packet_marking_table_err_int",
        74,
        1
      ],
      [
        "central_packet_marking_config_table_err_int",
        75,
        1
      ],
      [
        "bw_dist_msg_gen_fifo_err_int",
        76,
        1
      ],
      [
        "msg_gen_conf_table_err_int",
        77,
        1
      ]
    ]
  },
  "rx_meter_selected_ser_error_info": {
    "type": "register",
    "block": "rx_meter",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "rx_meter_ser_error_debug_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 8,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        7
      ],
      [
        "reset_memory_errors",
        7,
        1
      ]
    ]
  },
  "rx_meter_ecc_1b_err_debug": {
    "type": "register",
    "block": "rx_meter",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_meter_ecc_2b_err_debug": {
    "type": "register",
    "block": "rx_meter",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_meter_counter_timer": {
    "type": "register",
    "block": "rx_meter",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rx_meter_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rx_meter_memory_access_timeout": {
    "type": "register",
    "block": "rx_meter",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rx_meter_broadcast_config_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rx_meter_memory_prot_bypass": {
    "type": "register",
    "block": "rx_meter",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rx_meter_soft_reset_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rx_meter_mbist_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rx_meter_power_down_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rx_meter_spare_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rx_meter_pmro_ctrl": {
    "type": "register",
    "block": "rx_meter",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rx_meter_pmro_status": {
    "type": "register",
    "block": "rx_meter",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rx_meter_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rx_meter_mirror_bus_status": {
    "type": "register",
    "block": "rx_meter",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rx_meter_device_time_offset_cfg": {
    "type": "register",
    "block": "rx_meter",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rx_meter_meter_blocks_interrupt_register": {
    "type": "register",
    "block": "rx_meter",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "exact_rx_meter_cluster0_interrupt",
        0,
        1
      ],
      [
        "exact_rx_meter_cluster1_interrupt",
        1,
        1
      ],
      [
        "exact_rx_meter_cluster2_interrupt",
        2,
        1
      ],
      [
        "exact_rx_meter_cluster3_interrupt",
        3,
        1
      ],
      [
        "start_rate_fix_fifo0_overflow",
        4,
        1
      ],
      [
        "start_rate_fix_fifo1_overflow",
        5,
        1
      ],
      [
        "start_rate_fix_fifo2_overflow",
        6,
        1
      ],
      [
        "start_rate_fix_fifo3_overflow",
        7,
        1
      ]
    ]
  },
  "rx_meter_meter_blocks_interrupt_register_mask": {
    "type": "register",
    "block": "rx_meter",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "exact_rx_meter_cluster0_interrupt_mask",
        0,
        1
      ],
      [
        "exact_rx_meter_cluster1_interrupt_mask",
        1,
        1
      ],
      [
        "exact_rx_meter_cluster2_interrupt_mask",
        2,
        1
      ],
      [
        "exact_rx_meter_cluster3_interrupt_mask",
        3,
        1
      ],
      [
        "start_rate_fix_fifo0_overflow_mask",
        4,
        1
      ],
      [
        "start_rate_fix_fifo1_overflow_mask",
        5,
        1
      ],
      [
        "start_rate_fix_fifo2_overflow_mask",
        6,
        1
      ],
      [
        "start_rate_fix_fifo3_overflow_mask",
        7,
        1
      ]
    ]
  },
  "rx_meter_meter_blocks_interrupt_register_test": {
    "type": "register",
    "block": "rx_meter",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "exact_rx_meter_cluster0_interrupt_test",
        0,
        1
      ],
      [
        "exact_rx_meter_cluster1_interrupt_test",
        1,
        1
      ],
      [
        "exact_rx_meter_cluster2_interrupt_test",
        2,
        1
      ],
      [
        "exact_rx_meter_cluster3_interrupt_test",
        3,
        1
      ],
      [
        "start_rate_fix_fifo0_overflow_test",
        4,
        1
      ],
      [
        "start_rate_fix_fifo1_overflow_test",
        5,
        1
      ],
      [
        "start_rate_fix_fifo2_overflow_test",
        6,
        1
      ],
      [
        "start_rate_fix_fifo3_overflow_test",
        7,
        1
      ]
    ]
  },
  "rx_meter_status_register": {
    "type": "register",
    "block": "rx_meter",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "rx_meter_init_done",
        0,
        1
      ]
    ]
  },
  "rx_meter_global_conf_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "slice_bypass_rx_meter",
        0,
        1
      ],
      [
        "slice_mode",
        1,
        4
      ],
      [
        "slice_bw_consumption_mode",
        5,
        1
      ],
      [
        "slice_trusted_red_color",
        6,
        2
      ]
    ]
  },
  "rx_meter_global_conf_register2": {
    "type": "register",
    "block": "rx_meter",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "slice_exact_meter_result_map",
        0,
        128
      ]
    ]
  },
  "rx_meter_global_conf_register3": {
    "type": "register",
    "block": "rx_meter",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "slice_stat_meter_result_map",
        0,
        128
      ]
    ]
  },
  "rx_meter_statistical_meter_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "slice_statistic_mode",
        0,
        2
      ],
      [
        "slice_marked_packet_weight",
        2,
        2
      ],
      [
        "slice_un_marked_packet_weight",
        4,
        2
      ],
      [
        "slice_marked_packet_threshold",
        6,
        2
      ],
      [
        "slice_coef_mode",
        8,
        4
      ]
    ]
  },
  "rx_meter_exact_meter_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "slice_exact_block_en",
        0,
        12
      ]
    ]
  },
  "rx_meter_meter_block_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 21,
    "desc": "",
    "fields": [
      [
        "block_scrubber_window",
        0,
        8
      ],
      [
        "block_disable_scrubber",
        8,
        1
      ],
      [
        "block_shaper_fifo_pause_thr",
        9,
        5
      ],
      [
        "block_token_size_resolution",
        14,
        2
      ],
      [
        "block_statistic_mode",
        16,
        2
      ],
      [
        "block_rate_fix_alm_full_cfg",
        18,
        3
      ]
    ]
  },
  "rx_meter_rate_limiter_block_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "rate_limiter_block_token_size",
        0,
        7
      ],
      [
        "rate_limiter_block_shaper_fifo_pause_thr",
        7,
        5
      ]
    ]
  },
  "rx_meter_global_rate_limiter_block_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "global_rate_limiter_block_token_size",
        0,
        7
      ],
      [
        "global_rate_limiter_block_shaper_fifo_pause_thr",
        7,
        5
      ]
    ]
  },
  "rx_meter_distributed_meters_bucket_conf_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 42,
    "desc": "This register is used in distributed meters to enable the CPU to make changes in the meter bucket size.",
    "fields": [
      [
        "block_meter",
        0,
        11
      ],
      [
        "block_bucket",
        11,
        1
      ],
      [
        "block_command",
        12,
        1
      ],
      [
        "block_value",
        13,
        28
      ],
      [
        "block_trig",
        41,
        1
      ]
    ]
  },
  "rx_meter_distributed_meters_token_conf_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 25,
    "desc": "",
    "fields": [
      [
        "block_token_conf_meter",
        0,
        11
      ],
      [
        "block_token_conf_bucket",
        11,
        1
      ],
      [
        "block_token_conf_command",
        12,
        2
      ],
      [
        "block_token_conf_inc_dec_value",
        14,
        5
      ],
      [
        "block_token_conf_nominal_value",
        19,
        5
      ],
      [
        "block_token_conf_trig",
        24,
        1
      ]
    ]
  },
  "rx_meter_distributed_meters_bw_sensing_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 50,
    "desc": "The BW sensing mechanism is sensing the state of the bucket upon token grants events.",
    "fields": [
      [
        "block_full_detection_weight",
        0,
        8
      ],
      [
        "block_not_full_detection_weight",
        8,
        8
      ],
      [
        "block_empty_detection_weight",
        16,
        8
      ],
      [
        "block_not_empty_detection_weight",
        24,
        8
      ],
      [
        "block_bw_sensing_msg_trig_thr",
        32,
        8
      ],
      [
        "block_min_token",
        40,
        5
      ],
      [
        "block_grant_token",
        45,
        5
      ]
    ]
  },
  "rx_meter_bw_dist_configuration": {
    "type": "register",
    "block": "rx_meter",
    "width": 46,
    "desc": "",
    "fields": [
      [
        "device_marked_packet_threshold",
        0,
        13
      ],
      [
        "bw_dist_msg_gen_fifo_num_of_msg_in_pkt",
        13,
        7
      ],
      [
        "bw_dist_msg_gen_timer_thr",
        20,
        14
      ],
      [
        "bw_dist_msg_ifg_enable",
        34,
        12
      ]
    ]
  },
  "rx_meter_bw_dist_debug": {
    "type": "register",
    "block": "rx_meter",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "bw_dist_flow_control_counter",
        0,
        16
      ]
    ]
  },
  "rx_meter_msg_gen_shared_fifo": {
    "type": "register",
    "block": "rx_meter",
    "width": 13,
    "desc": "The msg generator manages 8 FIFOs in a shared memory.",
    "fields": [
      [
        "fifo_size",
        0,
        7
      ],
      [
        "fifo_start_addr",
        7,
        6
      ]
    ]
  },
  "rx_meter_rx_meter_last_in_pd": {
    "type": "register",
    "block": "rx_meter",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "rx_meter_last_incoming_pd",
        0,
        32
      ]
    ]
  },
  "rx_meter_rx_meter_debug_conf": {
    "type": "register",
    "block": "rx_meter",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd_mux_sel",
        0,
        6
      ]
    ]
  },
  "rx_meter_rx_meter_stat_block_debug_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "block_lost_msg",
        0,
        1
      ]
    ]
  },
  "rx_meter_rx_meter_debug_reg": {
    "type": "register",
    "block": "rx_meter",
    "width": 37,
    "desc": "",
    "fields": [
      [
        "slice_drop_pkts_counter",
        0,
        16
      ],
      [
        "slice_flow_control_counter",
        16,
        20
      ],
      [
        "slice_pipe_pd_fifo_full",
        36,
        1
      ]
    ]
  },
  "rx_meter_meters_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 112,
    "desc": "",
    "fields": [
      [
        "table_entry0_commited_meter",
        0,
        28
      ],
      [
        "table_entry0_excess_meter",
        28,
        28
      ],
      [
        "table_entry1_commited_meter",
        56,
        28
      ],
      [
        "table_entry1_excess_meter",
        84,
        28
      ]
    ]
  },
  "rx_meter_meters_attribute_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "table_entry0_profile",
        0,
        4
      ],
      [
        "table_entry0_meter_decision_mapping_profile",
        4,
        2
      ],
      [
        "table_entry1_profile",
        6,
        4
      ],
      [
        "table_entry1_meter_decision_mapping_profile",
        10,
        2
      ],
      [
        "table_entry2_profile",
        12,
        4
      ],
      [
        "table_entry2_meter_decision_mapping_profile",
        16,
        2
      ],
      [
        "table_entry3_profile",
        18,
        4
      ],
      [
        "table_entry3_meter_decision_mapping_profile",
        22,
        2
      ]
    ]
  },
  "rx_meter_meters_state_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 14,
    "desc": "",
    "fields": [
      [
        "meters_state_entry0_is_cascade",
        0,
        1
      ],
      [
        "meters_state_entry0_color_aware_mode",
        1,
        1
      ],
      [
        "meters_state_entry0_meter_mode",
        2,
        1
      ],
      [
        "meters_state_entry0_meter_decision_mapping_profile",
        3,
        2
      ],
      [
        "meters_state_entry0_commited_above_zero",
        5,
        1
      ],
      [
        "meters_state_entry0_excess_above_zero",
        6,
        1
      ],
      [
        "meters_state_entry1_is_cascade",
        7,
        1
      ],
      [
        "meters_state_entry1_color_aware_mode",
        8,
        1
      ],
      [
        "meters_state_entry1_meter_mode",
        9,
        1
      ],
      [
        "meters_state_entry1_meter_decision_mapping_profile",
        10,
        2
      ],
      [
        "meters_state_entry1_commited_above_zero",
        12,
        1
      ],
      [
        "meters_state_entry1_excess_above_zero",
        13,
        1
      ]
    ]
  },
  "rx_meter_meters_token_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 40,
    "desc": "",
    "fields": [
      [
        "table_entry0_token_size",
        0,
        5
      ],
      [
        "table_entry1_token_size",
        5,
        5
      ],
      [
        "table_entry2_token_size",
        10,
        5
      ],
      [
        "table_entry3_token_size",
        15,
        5
      ],
      [
        "table_entry4_token_size",
        20,
        5
      ],
      [
        "table_entry5_token_size",
        25,
        5
      ],
      [
        "table_entry6_token_size",
        30,
        5
      ],
      [
        "table_entry7_token_size",
        35,
        5
      ]
    ]
  },
  "rx_meter_meters_bw_sensing_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 72,
    "desc": "",
    "fields": [
      [
        "table_entry0_commited_bw_sensing_cnt",
        0,
        8
      ],
      [
        "table_entry0_commited_detect_full_bucket",
        8,
        1
      ],
      [
        "table_entry0_excess_bw_sensing_cnt",
        9,
        8
      ],
      [
        "table_entry0_excess_detect_full_bucket",
        17,
        1
      ],
      [
        "table_entry1_commited_bw_sensing_cnt",
        18,
        8
      ],
      [
        "table_entry1_commited_detect_full_bucket",
        26,
        1
      ],
      [
        "table_entry1_excess_bw_sensing_cnt",
        27,
        8
      ],
      [
        "table_entry1_excess_detect_full_bucket",
        35,
        1
      ],
      [
        "table_entry2_commited_bw_sensing_cnt",
        36,
        8
      ],
      [
        "table_entry2_commited_detect_full_bucket",
        44,
        1
      ],
      [
        "table_entry2_excess_bw_sensing_cnt",
        45,
        8
      ],
      [
        "table_entry2_excess_detect_full_bucket",
        53,
        1
      ],
      [
        "table_entry3_commited_bw_sensing_cnt",
        54,
        8
      ],
      [
        "table_entry3_commited_detect_full_bucket",
        62,
        1
      ],
      [
        "table_entry3_excess_bw_sensing_cnt",
        63,
        8
      ],
      [
        "table_entry3_excess_detect_full_bucket",
        71,
        1
      ]
    ]
  },
  "rx_meter_inactive_buckets_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "table_entry0_scrubber_en",
        0,
        1
      ],
      [
        "table_entry0_age",
        1,
        1
      ],
      [
        "table_entry0_inactive",
        2,
        1
      ],
      [
        "table_entry1_scrubber_en",
        3,
        1
      ],
      [
        "table_entry1_age",
        4,
        1
      ],
      [
        "table_entry1_inactive",
        5,
        1
      ],
      [
        "table_entry2_scrubber_en",
        6,
        1
      ],
      [
        "table_entry2_age",
        7,
        1
      ],
      [
        "table_entry2_inactive",
        8,
        1
      ],
      [
        "table_entry3_scrubber_en",
        9,
        1
      ],
      [
        "table_entry3_age",
        10,
        1
      ],
      [
        "table_entry3_inactive",
        11,
        1
      ],
      [
        "table_entry4_scrubber_en",
        12,
        1
      ],
      [
        "table_entry4_age",
        13,
        1
      ],
      [
        "table_entry4_inactive",
        14,
        1
      ],
      [
        "table_entry5_scrubber_en",
        15,
        1
      ],
      [
        "table_entry5_age",
        16,
        1
      ],
      [
        "table_entry5_inactive",
        17,
        1
      ],
      [
        "table_entry6_scrubber_en",
        18,
        1
      ],
      [
        "table_entry6_age",
        19,
        1
      ],
      [
        "table_entry6_inactive",
        20,
        1
      ],
      [
        "table_entry7_scrubber_en",
        21,
        1
      ],
      [
        "table_entry7_age",
        22,
        1
      ],
      [
        "table_entry7_inactive",
        23,
        1
      ]
    ]
  },
  "rx_meter_exact_meter_decision_mapping_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 7,
    "desc": "Accessing the table using the following address:\ufffd {ifg_number, exact_meter_decision_map_profile, packet_color_after_rate_limiting, exact_meter_result}",
    "fields": [
      [
        "exact_meter_decision_meter_drop",
        0,
        1
      ],
      [
        "exact_meter_decision_cgm_rx_dp",
        1,
        1
      ],
      [
        "exact_meter_decision_outgoing_color",
        2,
        2
      ],
      [
        "exact_meter_decision_rx_counter_color",
        4,
        2
      ],
      [
        "exact_meter_decision_congestion_experienced",
        6,
        1
      ]
    ]
  },
  "rx_meter_stat_meter_decision_mapping_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 7,
    "desc": "Accessing the table using the following address:\ufffd {stat_meters_bank, stat_meter_decision_map_profile, exact_meter_to_stat_meter_color, stat_meter_result}",
    "fields": [
      [
        "stat_meter_decision_meter_drop",
        0,
        1
      ],
      [
        "stat_meter_decision_cgm_rx_dp",
        1,
        1
      ],
      [
        "stat_meter_decision_outgoing_color",
        2,
        2
      ],
      [
        "stat_meter_decision_rx_counter_color",
        4,
        2
      ],
      [
        "stat_meter_decision_congestion_experienced",
        6,
        1
      ]
    ]
  },
  "rx_meter_stat_meter_pkt_count_fix_lut": {
    "type": "memory",
    "block": "rx_meter",
    "width": 17,
    "desc": "Accessing the table using the following address:\ufffd int((pkt_size + rand(0..31)) / 32)",
    "fields": [
      [
        "stat_meter_pkt_count_fix_lut_dat",
        0,
        17
      ]
    ]
  },
  "rx_meter_counter_pair_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 384,
    "desc": "",
    "fields": [
      [
        "green_byte_count",
        0,
        62
      ],
      [
        "green_pkt_count",
        62,
        66
      ],
      [
        "yellow_byte_count",
        128,
        62
      ],
      [
        "yellow_pkt_count",
        190,
        66
      ],
      [
        "red_byte_count",
        256,
        62
      ],
      [
        "red_pkt_count",
        318,
        66
      ]
    ]
  },
  "rx_meter_port_counter_pair_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 244,
    "desc": "",
    "fields": [
      [
        "pass_byte_count",
        0,
        64
      ],
      [
        "pass_pkt_count",
        64,
        58
      ],
      [
        "drop_byte_count",
        122,
        64
      ],
      [
        "drop_pkt_count",
        186,
        58
      ]
    ]
  },
  "rx_meter_global_counter_pair_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 244,
    "desc": "",
    "fields": [
      [
        "global_pass_byte_count",
        0,
        64
      ],
      [
        "global_pass_pkt_count",
        64,
        58
      ],
      [
        "global_drop_byte_count",
        122,
        64
      ],
      [
        "global_drop_pkt_count",
        186,
        58
      ]
    ]
  },
  "rx_meter_meter_profile_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 39,
    "desc": "",
    "fields": [
      [
        "meter_profile_meter_count_mode",
        0,
        1
      ],
      [
        "meter_profile_meter_mode",
        1,
        1
      ],
      [
        "meter_profile_color_aware_mode",
        2,
        1
      ],
      [
        "meter_profile_cbs",
        3,
        18
      ],
      [
        "meter_profile_ebs",
        21,
        18
      ]
    ]
  },
  "rx_meter_distributed_meter_profile_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 74,
    "desc": "",
    "fields": [
      [
        "meter_profile_is_cascade",
        0,
        1
      ],
      [
        "profile_commited_token_grant_thr",
        1,
        18
      ],
      [
        "profile_commited_token_release_thr",
        19,
        18
      ],
      [
        "profile_excess_token_grant_thr",
        37,
        18
      ],
      [
        "profile_excess_token_release_thr",
        55,
        18
      ],
      [
        "profile_is_dist_meter",
        73,
        1
      ]
    ]
  },
  "rx_meter_meter_shaper_configuration_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 40,
    "desc": "",
    "fields": [
      [
        "meter_shaper_configuration_entry0_cir_weight",
        0,
        10
      ],
      [
        "meter_shaper_configuration_entry0_eir_weight",
        10,
        10
      ],
      [
        "meter_shaper_configuration_entry1_cir_weight",
        20,
        10
      ],
      [
        "meter_shaper_configuration_entry1_eir_weight",
        30,
        10
      ]
    ]
  },
  "rx_meter_meter_shaper_linked_list_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 12,
    "desc": "",
    "fields": [
      [
        "meter_shaper_linked_list",
        0,
        12
      ]
    ]
  },
  "rx_meter_rate_limiters_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 22,
    "desc": "This table should be initialized by SW\ufffdto the max bucket size.",
    "fields": [
      [
        "rate_limiters_commited_bucket",
        0,
        22
      ]
    ]
  },
  "rx_meter_rate_limiters_attribute_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "rate_limiters_profile",
        0,
        4
      ]
    ]
  },
  "rx_meter_rate_limiters_state_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "rate_limiters_state_commited_above_zero",
        0,
        1
      ]
    ]
  },
  "rx_meter_rate_limiters_profile_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "rate_limiters_profile_cbs",
        0,
        10
      ]
    ]
  },
  "rx_meter_rate_limiter_shaper_configuration_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "rate_limiter_shaper_configuration_cir_weight",
        0,
        10
      ]
    ]
  },
  "rx_meter_rate_limiter_shaper_linked_list_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 8,
    "desc": "",
    "fields": [
      [
        "rate_limiter_shaper_linked_list",
        0,
        8
      ]
    ]
  },
  "rx_meter_global_rate_limiters_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 22,
    "desc": "This table should be initialized by SW\ufffdto the max bucket size.",
    "fields": [
      [
        "global_rate_limiters_commited_bucket",
        0,
        22
      ]
    ]
  },
  "rx_meter_global_rate_limiters_attribute_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "global_rate_limiters_profile",
        0,
        3
      ]
    ]
  },
  "rx_meter_global_rate_limiters_state_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "global_rate_limiters_state_commited_above_zero",
        0,
        1
      ]
    ]
  },
  "rx_meter_global_rate_limiters_profile_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "global_rate_limiters_profile_cbs",
        0,
        10
      ]
    ]
  },
  "rx_meter_global_rate_limiter_shaper_configuration_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "global_rate_limiter_shaper_configuration_cir_weight",
        0,
        10
      ]
    ]
  },
  "rx_meter_global_rate_limiter_shaper_linked_list_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "global_rate_limiter_shaper_linked_list",
        0,
        3
      ]
    ]
  },
  "rx_meter_pipe_pd_fifo": {
    "type": "memory",
    "block": "rx_meter",
    "width": 292,
    "desc": "",
    "fields": [
      [
        "slice_pipe_pd_fifo",
        0,
        292
      ]
    ]
  },
  "rx_meter_if_source_port_config": {
    "type": "memory",
    "block": "rx_meter",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "slice_ifg",
        0,
        1
      ],
      [
        "slice_header_bytes_dec",
        1,
        4
      ],
      [
        "slice_local_port_num",
        5,
        5
      ]
    ]
  },
  "rx_meter_bank_offset_map": {
    "type": "memory",
    "block": "rx_meter",
    "width": 7,
    "desc": "mapping of bank offset {cmp0[`PTR_BANK_OFFSET+:`PTR_BANK_WIDTH], ifg} to new 7-bit value ",
    "fields": [
      [
        "slice_bank_offset_map",
        0,
        7
      ]
    ]
  },
  "rx_meter_packet_marking_balance_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 56,
    "desc": "",
    "fields": [
      [
        "table_entry0_balance",
        0,
        7
      ],
      [
        "table_entry1_balance",
        7,
        7
      ],
      [
        "table_entry2_balance",
        14,
        7
      ],
      [
        "table_entry3_balance",
        21,
        7
      ],
      [
        "table_entry4_balance",
        28,
        7
      ],
      [
        "table_entry5_balance",
        35,
        7
      ],
      [
        "table_entry6_balance",
        42,
        7
      ],
      [
        "table_entry7_balance",
        49,
        7
      ]
    ]
  },
  "rx_meter_central_packet_marking_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 104,
    "desc": "The central marking table that sums the counting from all slices.",
    "fields": [
      [
        "entry0_marking_cnt",
        0,
        13
      ],
      [
        "entry1_marking_cnt",
        13,
        13
      ],
      [
        "entry2_marking_cnt",
        26,
        13
      ],
      [
        "entry3_marking_cnt",
        39,
        13
      ],
      [
        "entry4_marking_cnt",
        52,
        13
      ],
      [
        "entry5_marking_cnt",
        65,
        13
      ],
      [
        "entry6_marking_cnt",
        78,
        13
      ],
      [
        "entry7_marking_cnt",
        91,
        13
      ]
    ]
  },
  "rx_meter_central_packet_marking_config_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 16,
    "desc": "",
    "fields": [
      [
        "entry0_dist_meter_en",
        0,
        1
      ],
      [
        "entry1_dist_meter_en",
        1,
        1
      ],
      [
        "entry2_dist_meter_en",
        2,
        1
      ],
      [
        "entry3_dist_meter_en",
        3,
        1
      ],
      [
        "entry4_dist_meter_en",
        4,
        1
      ],
      [
        "entry5_dist_meter_en",
        5,
        1
      ],
      [
        "entry6_dist_meter_en",
        6,
        1
      ],
      [
        "entry7_dist_meter_en",
        7,
        1
      ],
      [
        "entry8_dist_meter_en",
        8,
        1
      ],
      [
        "entry9_dist_meter_en",
        9,
        1
      ],
      [
        "entry10_dist_meter_en",
        10,
        1
      ],
      [
        "entry11_dist_meter_en",
        11,
        1
      ],
      [
        "entry12_dist_meter_en",
        12,
        1
      ],
      [
        "entry13_dist_meter_en",
        13,
        1
      ],
      [
        "entry14_dist_meter_en",
        14,
        1
      ],
      [
        "entry15_dist_meter_en",
        15,
        1
      ]
    ]
  },
  "rx_meter_bw_dist_msg_gen_fifo": {
    "type": "memory",
    "block": "rx_meter",
    "width": 96,
    "desc": "The FIFOs holds the BW requeset/release messages that should be sent to the BW broker. The 8 FIFOs are imlemented in one memory, each FIFO holds meassages to one of 8 BW brokers.",
    "fields": [
      [
        "data",
        0,
        96
      ]
    ]
  },
  "rx_meter_msg_gen_conf_table": {
    "type": "memory",
    "block": "rx_meter",
    "width": 90,
    "desc": "",
    "fields": [
      [
        "entry0_broker_id",
        0,
        3
      ],
      [
        "entry0_user_info",
        3,
        42
      ],
      [
        "entry1_broker_id",
        45,
        3
      ],
      [
        "entry1_user_info",
        48,
        42
      ]
    ]
  },
  "rx_meter_bw_broker_packet_header": {
    "type": "memory",
    "block": "rx_meter",
    "width": 401,
    "desc": "",
    "fields": [
      [
        "ip_version",
        0,
        1
      ],
      [
        "ipv4_header",
        1,
        160
      ],
      [
        "ipv6_header",
        161,
        160
      ],
      [
        "udp_header",
        321,
        64
      ],
      [
        "tor_id",
        385,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_interrupt_register": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "slice_interrupt_register0_summary",
        1,
        1
      ],
      [
        "slice_interrupt_register1_summary",
        2,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_mem_protect_interrupt": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 17,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "multicast_bitmap_db0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "multicast_bitmap_db1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "dsp_lookup_table_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "pd_memory0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "pd_memory1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "fe_broadcast_bmp_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "fe_rep_res_req_fifo0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "fe_rep_res_req_fifo1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "rx_rep_queues0_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "rx_rep_queues1_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "frt_table_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table0_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table1_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "uc_pipe_out_fifo0_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "uc_pipe_out_fifo1_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "mc_pipe_out_fifo0_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "mc_pipe_out_fifo1_ecc_1b_err_interrupt_mask",
        16,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 17,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "multicast_bitmap_db0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "multicast_bitmap_db1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "dsp_lookup_table_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "pd_memory0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "pd_memory1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "fe_broadcast_bmp_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "fe_rep_res_req_fifo0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "fe_rep_res_req_fifo1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "rx_rep_queues0_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "rx_rep_queues1_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "frt_table_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table0_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table1_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "uc_pipe_out_fifo0_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "uc_pipe_out_fifo1_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "mc_pipe_out_fifo0_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "mc_pipe_out_fifo1_ecc_2b_err_interrupt_mask",
        16,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 17,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "multicast_bitmap_db0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "multicast_bitmap_db1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "dsp_lookup_table_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "pd_memory0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "pd_memory1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "fe_broadcast_bmp_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "fe_rep_res_req_fifo0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "fe_rep_res_req_fifo1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "rx_rep_queues0_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "rx_rep_queues1_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "frt_table_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table0_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table1_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "uc_pipe_out_fifo0_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "uc_pipe_out_fifo1_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "mc_pipe_out_fifo0_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "mc_pipe_out_fifo1_ecc_1b_err_initiate",
        16,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 17,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "multicast_bitmap_db0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "multicast_bitmap_db1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "dsp_lookup_table_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "pd_memory0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "pd_memory1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "fe_broadcast_bmp_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "fe_rep_res_req_fifo0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "fe_rep_res_req_fifo1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "rx_rep_queues0_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "rx_rep_queues1_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "frt_table_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table0_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table1_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "uc_pipe_out_fifo0_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "uc_pipe_out_fifo1_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "mc_pipe_out_fifo0_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "mc_pipe_out_fifo1_ecc_2b_err_initiate",
        16,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_mem_protect_err_status": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 17,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "multicast_bitmap_db0_err_int",
        0,
        1
      ],
      [
        "multicast_bitmap_db1_err_int",
        1,
        1
      ],
      [
        "dsp_lookup_table_err_int",
        2,
        1
      ],
      [
        "pd_memory0_err_int",
        3,
        1
      ],
      [
        "pd_memory1_err_int",
        4,
        1
      ],
      [
        "fe_broadcast_bmp_err_int",
        5,
        1
      ],
      [
        "fe_rep_res_req_fifo0_err_int",
        6,
        1
      ],
      [
        "fe_rep_res_req_fifo1_err_int",
        7,
        1
      ],
      [
        "rx_rep_queues0_err_int",
        8,
        1
      ],
      [
        "rx_rep_queues1_err_int",
        9,
        1
      ],
      [
        "frt_table_err_int",
        10,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table0_err_int",
        11,
        1
      ],
      [
        "fe_uc_link_bundle_desc_table1_err_int",
        12,
        1
      ],
      [
        "uc_pipe_out_fifo0_err_int",
        13,
        1
      ],
      [
        "uc_pipe_out_fifo1_err_int",
        14,
        1
      ],
      [
        "mc_pipe_out_fifo0_err_int",
        15,
        1
      ],
      [
        "mc_pipe_out_fifo1_err_int",
        16,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_selected_ser_error_info": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 15,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        13
      ],
      [
        "mem_err_type",
        13,
        2
      ]
    ]
  },
  "rx_pdr_2_slices_ser_error_debug_configuration": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_ecc_1b_err_debug": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_ecc_2b_err_debug": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_counter_timer": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rx_pdr_2_slices_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_memory_access_timeout": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rx_pdr_2_slices_broadcast_config_reg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rx_pdr_2_slices_memory_prot_bypass": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_soft_reset_configuration": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_mbist_configuration": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_power_down_configuration": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_spare_reg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rx_pdr_2_slices_pmro_ctrl": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rx_pdr_2_slices_pmro_status": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rx_pdr_2_slices_mirror_bus_status": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rx_pdr_2_slices_device_time_offset_cfg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rx_pdr_2_slices_status_register": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_slice_interrupt_register": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slice_tr_lc_sa_mc_pipe_emdb_entry_not_found",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_slice_interrupt_register_mask": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slice_tr_lc_sa_mc_pipe_emdb_entry_not_found_mask",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_slice_interrupt_register_test": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "slice_tr_lc_sa_mc_pipe_emdb_entry_not_found_test",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_rxrqs_configurations": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 38,
    "desc": "The RXRQs are 4 FIFOs that hold PDs before the replication process. See Slice[n]RxrqSelectionMode configuration for more details. All used RXRQs should have at least 2 entries. (since RxrqAlmFullTh equals 1)",
    "fields": [
      [
        "slice0_rxrq_fifo_size",
        0,
        10
      ],
      [
        "slice0_rxrq_start_addr",
        10,
        9
      ],
      [
        "slice1_rxrq_fifo_size",
        19,
        10
      ],
      [
        "slice1_rxrq_start_addr",
        29,
        9
      ]
    ]
  },
  "rx_pdr_2_slices_rxrqs_alm_full_configurations": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "slice_rxrq_alm_full_th",
        0,
        10
      ]
    ]
  },
  "rx_pdr_2_slices_ib_mirror_configurations": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 42,
    "desc": "",
    "fields": [
      [
        "slice_ib_mirror_mc_ucdv_value",
        0,
        14
      ],
      [
        "slice_mirror_to_source_cmd0",
        14,
        5
      ],
      [
        "slice_mirror_to_source_cmd0_enable",
        19,
        1
      ],
      [
        "slice_mirror_to_source_cmd1",
        20,
        5
      ],
      [
        "slice_mirror_to_source_cmd1_enable",
        25,
        1
      ],
      [
        "slice_mirror_to_source_cmd2",
        26,
        5
      ],
      [
        "slice_mirror_to_source_cmd2_enable",
        31,
        1
      ],
      [
        "slice_rxrq0_thr_for_ibm_cmd_cancellation",
        32,
        10
      ]
    ]
  },
  "rx_pdr_2_slices_mc_bmp_configurations": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 20,
    "desc": "",
    "fields": [
      [
        "slice_mc_bmp_mask_bitmap",
        0,
        6
      ],
      [
        "slice_bmp_ucdv",
        6,
        14
      ]
    ]
  },
  "rx_pdr_2_slices_slice_global_configuration": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 122,
    "desc": "",
    "fields": [
      [
        "slice_drop_voq_number",
        0,
        16
      ],
      [
        "slice_counter_e_drop_voq_number",
        16,
        16
      ],
      [
        "slice_disable_trap",
        32,
        1
      ],
      [
        "slice_plb_mode",
        33,
        1
      ],
      [
        "slice_device_type",
        34,
        2
      ],
      [
        "slice_disable_cache",
        36,
        1
      ],
      [
        "slice_rxrqs_arb_mode",
        37,
        1
      ],
      [
        "slice_rxrqs_arb_wrr0_cl0_weight",
        38,
        5
      ],
      [
        "slice_rxrqs_arb_wrr0_cl1_weight",
        43,
        5
      ],
      [
        "slice_rxrqs_arb_wrr0_cl2_weight",
        48,
        5
      ],
      [
        "slice_mode",
        53,
        4
      ],
      [
        "slice_rxrq_selection_mode",
        57,
        1
      ],
      [
        "slice_mc_cache_reset_counter_val",
        58,
        13
      ],
      [
        "slice_mc_cache_reset_trig",
        71,
        1
      ],
      [
        "slice_uc_pipe_out_fifo_alm_full_thr",
        72,
        6
      ],
      [
        "slice_uc_pipe_out_fifo_mask_thr",
        78,
        6
      ],
      [
        "slice_mc_pipe_out_fifo_alm_full_thr",
        84,
        6
      ],
      [
        "slice_mc_pipe_out_fifo_mask_thr",
        90,
        6
      ],
      [
        "slice56_fabric_links_en",
        96,
        1
      ],
      [
        "slice_out_arb_mode",
        97,
        1
      ],
      [
        "slice_out_arb_wrr_uc_weight",
        98,
        5
      ],
      [
        "slice_out_arb_wrr_mc_weight",
        103,
        5
      ],
      [
        "slice_req_fifo_alm_full_thr",
        108,
        7
      ],
      [
        "slice_rxpdr2_rxcgm_cbt_alm_full_thr",
        115,
        5
      ],
      [
        "slice_recycle_mc_bitmap_mcid_msb_on",
        120,
        1
      ],
      [
        "slice_make_one_copy_when_rxrq_cross_thr",
        121,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_lfsr_configuration": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 72,
    "desc": "",
    "fields": [
      [
        "slice_tap_mode1",
        0,
        4
      ],
      [
        "slice_tap_mode2",
        4,
        4
      ],
      [
        "slice_seed1",
        8,
        32
      ],
      [
        "slice_seed2",
        40,
        32
      ]
    ]
  },
  "rx_pdr_2_slices_slice_global_configuration2": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 108,
    "desc": "",
    "fields": [
      [
        "slice_all_reachable",
        0,
        108
      ]
    ]
  },
  "rx_pdr_2_slices_fe_configurations_reg1": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 132,
    "desc": "",
    "fields": [
      [
        "slice_fe_valid_broadcast_bmp_vector",
        0,
        108
      ],
      [
        "slice_src_link_is_fe1",
        108,
        24
      ]
    ]
  },
  "rx_pdr_2_slices_fe_configurations_reg2": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 62,
    "desc": "",
    "fields": [
      [
        "slice_rep_res_mc_backpressure_en",
        0,
        1
      ],
      [
        "slice_slice0_max_link_number",
        1,
        7
      ],
      [
        "slice_slice1_max_link_number",
        8,
        7
      ],
      [
        "slice_slice2_max_link_number",
        15,
        7
      ],
      [
        "slice_slice3_max_link_number",
        22,
        7
      ],
      [
        "slice_slice4_max_link_number",
        29,
        7
      ],
      [
        "slice_slice5_max_link_number",
        36,
        7
      ],
      [
        "slice_txpdr_bmp_ucdv",
        43,
        14
      ],
      [
        "slice_fe_uc_lb_enable",
        57,
        1
      ],
      [
        "slice_fe_mc_lb_enable",
        58,
        1
      ],
      [
        "slice_enable_flbt_flow_control_for_mc",
        59,
        1
      ],
      [
        "slice_drop_mc_due_to_flbt_flow_control",
        60,
        1
      ],
      [
        "slice_disable_mc_fe_links_bmp_table_access",
        61,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_fe_configurations_reg3": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 108,
    "desc": "",
    "fields": [
      [
        "slice_fe_eligible_fabric_links",
        0,
        108
      ]
    ]
  },
  "rx_pdr_2_slices_slice_to_min_link_map": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 42,
    "desc": "Map each slice to its first link",
    "fields": [
      [
        "slice_slice_min_link",
        0,
        42
      ]
    ]
  },
  "rx_pdr_2_slices_tr_lc_sa_configurations_reg1": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 92,
    "desc": "",
    "fields": [
      [
        "slice_mc_emdb_range0_min_voq",
        0,
        16
      ],
      [
        "slice_mc_emdb_range0_max_voq",
        16,
        16
      ],
      [
        "slice_mc_emdb_range1_min_voq",
        32,
        16
      ],
      [
        "slice_mc_emdb_range1_max_voq",
        48,
        16
      ],
      [
        "slice_mc_emdb_range0_ucdv",
        64,
        14
      ],
      [
        "slice_mc_emdb_range1_ucdv",
        78,
        14
      ]
    ]
  },
  "rx_pdr_2_slices_tr_lc_sa_configurations_reg2": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 92,
    "desc": "",
    "fields": [
      [
        "slice_mc_emdb_range2_min_voq",
        0,
        16
      ],
      [
        "slice_mc_emdb_range2_max_voq",
        16,
        16
      ],
      [
        "slice_mc_emdb_range3_min_voq",
        32,
        16
      ],
      [
        "slice_mc_emdb_range3_max_voq",
        48,
        16
      ],
      [
        "slice_mc_emdb_range2_ucdv",
        64,
        14
      ],
      [
        "slice_mc_emdb_range3_ucdv",
        78,
        14
      ]
    ]
  },
  "rx_pdr_2_slices_tr_lc_sa_configurations_reg3": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 92,
    "desc": "",
    "fields": [
      [
        "slice_mc_emdb_range4_min_voq",
        0,
        16
      ],
      [
        "slice_mc_emdb_range4_max_voq",
        16,
        16
      ],
      [
        "slice_mc_emdb_range5_min_voq",
        32,
        16
      ],
      [
        "slice_mc_emdb_range5_max_voq",
        48,
        16
      ],
      [
        "slice_mc_emdb_range4_ucdv",
        64,
        14
      ],
      [
        "slice_mc_emdb_range5_ucdv",
        78,
        14
      ]
    ]
  },
  "rx_pdr_2_slices_tr_lc_sa_configurations_reg4": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 18,
    "desc": "",
    "fields": [
      [
        "slice_mc_emdb_txpdr_mcid_thr",
        0,
        18
      ]
    ]
  },
  "rx_pdr_2_slices_rx_pdr_last_in_pd": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 32,
    "desc": "",
    "fields": [
      [
        "rx_pdr_last_incoming_pd",
        0,
        32
      ]
    ]
  },
  "rx_pdr_2_slices_rx_pdr_debug_conf": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "last_incoming_pd_mux_sel",
        0,
        4
      ]
    ]
  },
  "rx_pdr_2_slices_rxrqs_debug_reg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 43,
    "desc": "",
    "fields": [
      [
        "rxrq_max_fill_level",
        0,
        10
      ],
      [
        "rxrq_cancel_ib_mirror_cmd",
        10,
        1
      ],
      [
        "rxrq_drop_counter",
        11,
        32
      ]
    ]
  },
  "rx_pdr_2_slices_rxpdr_cgm_drop_counter_reg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 128,
    "desc": "",
    "fields": [
      [
        "slice_counter_a_drop_counter",
        0,
        32
      ],
      [
        "slice_counter_b_drop_counter",
        32,
        32
      ],
      [
        "slice_counter_e_drop_counter",
        64,
        32
      ],
      [
        "slice_counter_g_drop_counter",
        96,
        32
      ]
    ]
  },
  "rx_pdr_2_slices_rxpdr_debug_reg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 77,
    "desc": "Debug register",
    "fields": [
      [
        "slice_drop_packet_due_to_full_rxrq",
        0,
        1
      ],
      [
        "slice_drop_packet_due_to_group_size_zero",
        1,
        1
      ],
      [
        "slice_bmp_without_valid_bits_drop",
        2,
        1
      ],
      [
        "slice_drop_due_to_mc_fe_links_bmp_not_ready",
        3,
        1
      ],
      [
        "slice_last_pd_voq",
        4,
        16
      ],
      [
        "slice_last_pd_cud",
        20,
        22
      ],
      [
        "slice_last_pd_cgm_counter_type",
        42,
        3
      ],
      [
        "slice_rx_cgm_cbt_not_ready",
        45,
        32
      ]
    ]
  },
  "rx_pdr_2_slices_rx_pdr_pkt_rate_conf": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 24,
    "desc": "",
    "fields": [
      [
        "slice_pkt_rate_window",
        0,
        12
      ],
      [
        "slice_pkt_rate_num_of_pkts",
        12,
        12
      ]
    ]
  },
  "rx_pdr_2_slices_rx_pdr_debug_conf_reg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 10,
    "desc": "",
    "fields": [
      [
        "slice_limit_pds",
        0,
        10
      ]
    ]
  },
  "rx_pdr_2_slices_dsp_lookup_table_bubble_req_cfg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "Bubble request configurations for DspLookupTable memory",
    "fields": [
      [
        "dsp_lookup_table_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_fe_broadcast_bmp_bubble_req_cfg": {
    "type": "register",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "Bubble request configurations for FeBroadcastBmp memory",
    "fields": [
      [
        "fe_broadcast_bmp_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_multicast_bitmap_db": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 96,
    "desc": "Parsing when entry is bitmap To create a MCID that creates no copies - configure the entry to bitmap with all SliceBitmaps set to 0.",
    "fields": [
      [
        "entry0_mc_bmp_slice_bitmap",
        0,
        6
      ],
      [
        "entry0_mc_bmp_bitmap_indicator",
        6,
        5
      ],
      [
        "entry0_mc_bmp_counter_a_inc_en",
        11,
        1
      ],
      [
        "entry1_mc_bmp_slice_bitmap",
        12,
        6
      ],
      [
        "entry1_mc_bmp_bitmap_indicator",
        18,
        5
      ],
      [
        "entry1_mc_bmp_counter_a_inc_en",
        23,
        1
      ],
      [
        "entry2_mc_bmp_slice_bitmap",
        24,
        6
      ],
      [
        "entry2_mc_bmp_bitmap_indicator",
        30,
        5
      ],
      [
        "entry2_mc_bmp_counter_a_inc_en",
        35,
        1
      ],
      [
        "entry3_mc_bmp_slice_bitmap",
        36,
        6
      ],
      [
        "entry3_mc_bmp_bitmap_indicator",
        42,
        5
      ],
      [
        "entry3_mc_bmp_counter_a_inc_en",
        47,
        1
      ],
      [
        "entry4_mc_bmp_slice_bitmap",
        48,
        6
      ],
      [
        "entry4_mc_bmp_bitmap_indicator",
        54,
        5
      ],
      [
        "entry4_mc_bmp_counter_a_inc_en",
        59,
        1
      ],
      [
        "entry5_mc_bmp_slice_bitmap",
        60,
        6
      ],
      [
        "entry5_mc_bmp_bitmap_indicator",
        66,
        5
      ],
      [
        "entry5_mc_bmp_counter_a_inc_en",
        71,
        1
      ],
      [
        "entry6_mc_bmp_slice_bitmap",
        72,
        6
      ],
      [
        "entry6_mc_bmp_bitmap_indicator",
        78,
        5
      ],
      [
        "entry6_mc_bmp_counter_a_inc_en",
        83,
        1
      ],
      [
        "entry7_mc_bmp_slice_bitmap",
        84,
        6
      ],
      [
        "entry7_mc_bmp_bitmap_indicator",
        90,
        5
      ],
      [
        "entry7_mc_bmp_counter_a_inc_en",
        95,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_dsp_lookup_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 112,
    "desc": "Serves 2 slices. Holds 4 entries in line",
    "fields": [
      [
        "entry0_dsp_table_dest_dev",
        0,
        9
      ],
      [
        "entry0_dsp_table_base_voq_num",
        9,
        16
      ],
      [
        "entry0_dsp_table_tc_map_profile",
        25,
        3
      ],
      [
        "entry1_dsp_table_dest_dev",
        28,
        9
      ],
      [
        "entry1_dsp_table_base_voq_num",
        37,
        16
      ],
      [
        "entry1_dsp_table_tc_map_profile",
        53,
        3
      ],
      [
        "entry2_dsp_table_dest_dev",
        56,
        9
      ],
      [
        "entry2_dsp_table_base_voq_num",
        65,
        16
      ],
      [
        "entry2_dsp_table_tc_map_profile",
        81,
        3
      ],
      [
        "entry3_dsp_table_dest_dev",
        84,
        9
      ],
      [
        "entry3_dsp_table_base_voq_num",
        93,
        16
      ],
      [
        "entry3_dsp_table_tc_map_profile",
        109,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_ib_mirror_cmd_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 49,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_base_voq",
        0,
        16
      ],
      [
        "slice_dest_dev",
        16,
        9
      ],
      [
        "slice_tc_map_profile",
        25,
        3
      ],
      [
        "slice_mirror_to_dest",
        28,
        1
      ],
      [
        "slice_ignore_in_rxrq_sel",
        29,
        1
      ],
      [
        "slice_is_mc",
        30,
        1
      ],
      [
        "slice_sampling_prob",
        31,
        18
      ]
    ]
  },
  "rx_pdr_2_slices_tc_to_prio_map": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_tc_to_prio",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_pd_memory": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 160,
    "desc": "",
    "fields": [
      [
        "slice_pd",
        0,
        160
      ]
    ]
  },
  "rx_pdr_2_slices_fe_broadcast_bmp": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 108,
    "desc": "Serves 2 slices",
    "fields": [
      [
        "table_links_bmp",
        0,
        108
      ]
    ]
  },
  "rx_pdr_2_slices_fe_rep_res_req_fifo": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 100,
    "desc": "Acts as Fe RepRes req FIFO in FE and as MC EMDB req FIFO in TR/LC/SA modes",
    "fields": [
      [
        "fe_rep_res_req_fifo_data",
        0,
        100
      ]
    ]
  },
  "rx_pdr_2_slices_rx_rep_queues": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 185,
    "desc": "4 rep queues - implemented with one memory shared ",
    "fields": [
      [
        "slice_rx_rep_queue_data",
        0,
        185
      ]
    ]
  },
  "rx_pdr_2_slices_rx_rep_queues_extra_bits": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 2,
    "desc": "Continuation of RxRepQueues memory",
    "fields": [
      [
        "slice_rx_rep_queue_data_extra_bits",
        0,
        2
      ]
    ]
  },
  "rx_pdr_2_slices_rx_rep_queues_thresholds": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 20,
    "desc": "Thresholds for dropping PDs based on RXRQ fill level",
    "fields": [
      [
        "slice_rx_rep_queue_threshold0",
        0,
        10
      ],
      [
        "slice_rx_rep_queue_threshold1",
        10,
        10
      ]
    ]
  },
  "rx_pdr_2_slices_packet_drop_priority_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 2,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_packet_drop_priority",
        0,
        2
      ]
    ]
  },
  "rx_pdr_2_slices_frt_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 108,
    "desc": "3 tables each with 2R ports that will serve 2 slices Serves the TR/SA/LC UC pipe (54 bits) and the FE UC pipe as FRT table (108 bits)",
    "fields": [
      [
        "frt_table_fabric_links",
        0,
        108
      ]
    ]
  },
  "rx_pdr_2_slices_dsp_tc_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 4,
    "desc": "Table per slice Table is accesses with {TC Map Profile[2:0], TC[2:0]}",
    "fields": [
      [
        "dsp_tc_map_tc_offset",
        0,
        3
      ],
      [
        "dsp_tc_map_is_flb",
        3,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_flb_link_to_voq_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "Table per slice - used by the FE and TR/LC/SA pipes",
    "fields": [
      [
        "flb_link_base_voq",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_fb_link_to_link_bundle_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 6,
    "desc": "Table per slice",
    "fields": [
      [
        "table_bundle_num",
        0,
        6
      ]
    ]
  },
  "rx_pdr_2_slices_uc_ib_mirror_tc_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 4,
    "desc": "Table per slice Table is accesses with {TC Map Profile[2:0], TC[2:0]}",
    "fields": [
      [
        "uc_ib_mirror_map_tc_offset",
        0,
        3
      ],
      [
        "uc_ib_mirror_map_is_flb",
        3,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_mc_emdb_tc_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Table per slice Accessed with {TC Map Profile[1:0],TC[2:0]}",
    "fields": [
      [
        "mc_emdb_tc_map_tc_offset",
        0,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_mc_bitmap_tc_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Table per slice Accessed with {TC Map Profile[1:0],TC[2:0]}",
    "fields": [
      [
        "mc_bitmap_tc_map_tc_offset",
        0,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_mc_tc_is_flb_map": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_mc_tc_is_flb",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_fe_uc_link_bundle_desc_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 88,
    "desc": "",
    "fields": [
      [
        "slice_bundle_link0",
        0,
        7
      ],
      [
        "slice_bundle_link0_bc",
        7,
        15
      ],
      [
        "slice_bundle_link1",
        22,
        7
      ],
      [
        "slice_bundle_link1_bc",
        29,
        15
      ],
      [
        "slice_bundle_link2",
        44,
        7
      ],
      [
        "slice_bundle_link2_bc",
        51,
        15
      ],
      [
        "slice_bundle_link3",
        66,
        7
      ],
      [
        "slice_bundle_link3_bc",
        73,
        15
      ]
    ]
  },
  "rx_pdr_2_slices_fe_rlb_uc_tx_fb_link_to_oq_map": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 9,
    "desc": "Mapping from Tx fabric link to OQ in RLB UC",
    "fields": [
      [
        "table_base_oq",
        0,
        9
      ]
    ]
  },
  "rx_pdr_2_slices_pd_mem_free_buff_manager": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 32,
    "desc": "PD-Memory Free-Buffer-Manager",
    "fields": [
      [
        "slice_pd_buffer",
        0,
        32
      ]
    ]
  },
  "rx_pdr_2_slices_ms_voq_fabric_context_offset": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_ms_voq_fabric_context_offset",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_dest_slice_voq_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "Table per slice",
    "fields": [
      [
        "table_dest_slice_voq",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_mirror_mc_tc_is_flb": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "Table per slice",
    "fields": [
      [
        "table_mirror_mc_tc_is_flb",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_source_port_mirror_lut": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "Table per slice",
    "fields": [
      [
        "table_src_port_mirror_voq",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_mirror_mc_bitmap_base_voq_lut": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 19,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_mirror_mc_bitmap_base_voq",
        0,
        16
      ],
      [
        "slice_mirror_mc_bitmap_tc_map_profile",
        16,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_mc_ib_mirror_tc_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Table per slice",
    "fields": [
      [
        "mc_ib_mirror_map_tc_offset",
        0,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_source_if2_port_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 5,
    "desc": "Table per slice",
    "fields": [
      [
        "source_if_table_port",
        0,
        5
      ]
    ]
  },
  "rx_pdr_2_slices_mc_bitmap_base_voq_lut": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 18,
    "desc": "Table per slice Used in TR/LC/SA MC pipe, used in PLB MC-BMP processing.",
    "fields": [
      [
        "slice_mc_bitmap_base_voq",
        0,
        16
      ],
      [
        "slice_mc_bitmap_tc_map_profile",
        16,
        2
      ]
    ]
  },
  "rx_pdr_2_slices_flb_mc_bitmap_tc_map": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_flb_mc_bitmap_tc_offset",
        0,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_oq_fabric_context_offset": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 9,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_oq_fabric_context_offset",
        0,
        9
      ]
    ]
  },
  "rx_pdr_2_slices_fe_txrq_tc_map": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_fe_txrq_tc_offset",
        0,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_mc_flb_tx_slice_voq_map": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 16,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_mc_flb_tx_slice_voq_offset",
        0,
        16
      ]
    ]
  },
  "rx_pdr_2_slices_out_color_and_tc_to_thr_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_counter_a_threshold",
        0,
        1
      ],
      [
        "slice_counter_b_threshold",
        1,
        1
      ],
      [
        "slice_counter_e_threshold",
        2,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_source_if_is_recycle_map_table": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 1,
    "desc": "Table per slice",
    "fields": [
      [
        "source_if_table_is_recycle",
        0,
        1
      ]
    ]
  },
  "rx_pdr_2_slices_mirror_flb_multicast_tc_map": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 3,
    "desc": "Table per slice",
    "fields": [
      [
        "slice_mirror_flb_multicast_tc_offset",
        0,
        3
      ]
    ]
  },
  "rx_pdr_2_slices_uc_pipe_out_fifo": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 71,
    "desc": "",
    "fields": [
      [
        "uc_pipe_out_fifo_data",
        0,
        71
      ]
    ]
  },
  "rx_pdr_2_slices_mc_pipe_out_fifo": {
    "type": "memory",
    "block": "rx_pdr_2_slices",
    "width": 71,
    "desc": "",
    "fields": [
      [
        "mc_pipe_out_fifo_data",
        0,
        71
      ]
    ]
  },
  "rx_pdr_interrupt_register": {
    "type": "register",
    "block": "rx_pdr",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "rxpdr_global_interrupt_reg_summary",
        1,
        1
      ]
    ]
  },
  "rx_pdr_mem_protect_interrupt": {
    "type": "register",
    "block": "rx_pdr",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rx_pdr_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rx_pdr",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rx_pdr_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_pdr",
    "width": 12,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "shared_mem_rd_result_fifo0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "shared_mem_rd_result_fifo1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "shared_mem_rd_result_fifo2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "shared_mem_rd_result_fifo3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "shared_mem_rd_result_fifo4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "shared_mem_rd_result_fifo5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "shared_mem_rd_result_fifo6_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "shared_mem_rd_result_fifo7_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "shared_mem_rd_result_fifo8_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "shared_mem_rd_result_fifo9_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "shared_mem_rd_result_fifo10_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "shared_mem_rd_result_fifo11_ecc_1b_err_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "rx_pdr_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_pdr",
    "width": 12,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "shared_mem_rd_result_fifo0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "shared_mem_rd_result_fifo1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "shared_mem_rd_result_fifo2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "shared_mem_rd_result_fifo3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "shared_mem_rd_result_fifo4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "shared_mem_rd_result_fifo5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "shared_mem_rd_result_fifo6_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "shared_mem_rd_result_fifo7_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "shared_mem_rd_result_fifo8_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "shared_mem_rd_result_fifo9_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "shared_mem_rd_result_fifo10_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "shared_mem_rd_result_fifo11_ecc_2b_err_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "rx_pdr_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rx_pdr",
    "width": 12,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "shared_mem_rd_result_fifo0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "shared_mem_rd_result_fifo1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "shared_mem_rd_result_fifo2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "shared_mem_rd_result_fifo3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "shared_mem_rd_result_fifo4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "shared_mem_rd_result_fifo5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "shared_mem_rd_result_fifo6_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "shared_mem_rd_result_fifo7_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "shared_mem_rd_result_fifo8_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "shared_mem_rd_result_fifo9_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "shared_mem_rd_result_fifo10_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "shared_mem_rd_result_fifo11_ecc_1b_err_initiate",
        11,
        1
      ]
    ]
  },
  "rx_pdr_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rx_pdr",
    "width": 12,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "shared_mem_rd_result_fifo0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "shared_mem_rd_result_fifo1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "shared_mem_rd_result_fifo2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "shared_mem_rd_result_fifo3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "shared_mem_rd_result_fifo4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "shared_mem_rd_result_fifo5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "shared_mem_rd_result_fifo6_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "shared_mem_rd_result_fifo7_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "shared_mem_rd_result_fifo8_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "shared_mem_rd_result_fifo9_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "shared_mem_rd_result_fifo10_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "shared_mem_rd_result_fifo11_ecc_2b_err_initiate",
        11,
        1
      ]
    ]
  },
  "rx_pdr_mem_protect_err_status": {
    "type": "register",
    "block": "rx_pdr",
    "width": 12,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "shared_mem_rd_result_fifo0_err_int",
        0,
        1
      ],
      [
        "shared_mem_rd_result_fifo1_err_int",
        1,
        1
      ],
      [
        "shared_mem_rd_result_fifo2_err_int",
        2,
        1
      ],
      [
        "shared_mem_rd_result_fifo3_err_int",
        3,
        1
      ],
      [
        "shared_mem_rd_result_fifo4_err_int",
        4,
        1
      ],
      [
        "shared_mem_rd_result_fifo5_err_int",
        5,
        1
      ],
      [
        "shared_mem_rd_result_fifo6_err_int",
        6,
        1
      ],
      [
        "shared_mem_rd_result_fifo7_err_int",
        7,
        1
      ],
      [
        "shared_mem_rd_result_fifo8_err_int",
        8,
        1
      ],
      [
        "shared_mem_rd_result_fifo9_err_int",
        9,
        1
      ],
      [
        "shared_mem_rd_result_fifo10_err_int",
        10,
        1
      ],
      [
        "shared_mem_rd_result_fifo11_err_int",
        11,
        1
      ]
    ]
  },
  "rx_pdr_selected_ser_error_info": {
    "type": "register",
    "block": "rx_pdr",
    "width": 8,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        6
      ],
      [
        "mem_err_type",
        6,
        2
      ]
    ]
  },
  "rx_pdr_ser_error_debug_configuration": {
    "type": "register",
    "block": "rx_pdr",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "rx_pdr_ecc_1b_err_debug": {
    "type": "register",
    "block": "rx_pdr",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_pdr_ecc_2b_err_debug": {
    "type": "register",
    "block": "rx_pdr",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_pdr_counter_timer": {
    "type": "register",
    "block": "rx_pdr",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rx_pdr_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rx_pdr_memory_access_timeout": {
    "type": "register",
    "block": "rx_pdr",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rx_pdr_broadcast_config_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rx_pdr_memory_prot_bypass": {
    "type": "register",
    "block": "rx_pdr",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rx_pdr_soft_reset_configuration": {
    "type": "register",
    "block": "rx_pdr",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rx_pdr_mbist_configuration": {
    "type": "register",
    "block": "rx_pdr",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rx_pdr_power_down_configuration": {
    "type": "register",
    "block": "rx_pdr",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rx_pdr_spare_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rx_pdr_pmro_ctrl": {
    "type": "register",
    "block": "rx_pdr",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rx_pdr_pmro_status": {
    "type": "register",
    "block": "rx_pdr",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rx_pdr_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rx_pdr_mirror_bus_status": {
    "type": "register",
    "block": "rx_pdr",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rx_pdr_device_time_offset_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rx_pdr_status_register": {
    "type": "register",
    "block": "rx_pdr",
    "width": 1,
    "desc": "",
    "fields": [
      [
        "init_done",
        0,
        1
      ]
    ]
  },
  "rx_pdr_rxpdr_global_interrupt_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 5,
    "desc": "",
    "fields": [
      [
        "shared_db0_inetrrupt_summary",
        0,
        1
      ],
      [
        "shared_db1_inetrrupt_summary",
        1,
        1
      ],
      [
        "slices01_inetrrupt_summary",
        2,
        1
      ],
      [
        "slices23_inetrrupt_summary",
        3,
        1
      ],
      [
        "slices45_inetrrupt_summary",
        4,
        1
      ]
    ]
  },
  "rx_pdr_rxpdr_global_interrupt_reg_mask": {
    "type": "register",
    "block": "rx_pdr",
    "width": 5,
    "desc": "",
    "fields": [
      [
        "shared_db0_inetrrupt_summary_mask",
        0,
        1
      ],
      [
        "shared_db1_inetrrupt_summary_mask",
        1,
        1
      ],
      [
        "slices01_inetrrupt_summary_mask",
        2,
        1
      ],
      [
        "slices23_inetrrupt_summary_mask",
        3,
        1
      ],
      [
        "slices45_inetrrupt_summary_mask",
        4,
        1
      ]
    ]
  },
  "rx_pdr_rxpdr_global_interrupt_reg_test": {
    "type": "register",
    "block": "rx_pdr",
    "width": 5,
    "desc": "",
    "fields": [
      [
        "shared_db0_inetrrupt_summary_test",
        0,
        1
      ],
      [
        "shared_db1_inetrrupt_summary_test",
        1,
        1
      ],
      [
        "slices01_inetrrupt_summary_test",
        2,
        1
      ],
      [
        "slices23_inetrrupt_summary_test",
        3,
        1
      ],
      [
        "slices45_inetrrupt_summary_test",
        4,
        1
      ]
    ]
  },
  "rx_pdr_global_configuration": {
    "type": "register",
    "block": "rx_pdr",
    "width": 3,
    "desc": "",
    "fields": [
      [
        "device_type",
        0,
        2
      ],
      [
        "mc_db_interface_selection_mode",
        2,
        1
      ]
    ]
  },
  "rx_pdr_counters_thresholds_reg1": {
    "type": "register",
    "block": "rx_pdr",
    "width": 114,
    "desc": "Counter A counts Ingress Unicast Buffers. Buffers consumed by packets in the ingress pipe before they were scheduled by the credit scheduler to the egress Oqs.",
    "fields": [
      [
        "voq_cgm_counter_a_thr0",
        0,
        19
      ],
      [
        "voq_cgm_counter_a_thr1",
        19,
        19
      ],
      [
        "voq_cgm_counter_a_thr2",
        38,
        19
      ],
      [
        "rx_cgm_counter_a_thr0",
        57,
        19
      ],
      [
        "rx_cgm_counter_a_thr1",
        76,
        19
      ],
      [
        "rx_cgm_counter_a_thr2",
        95,
        19
      ]
    ]
  },
  "rx_pdr_counters_thresholds_reg2": {
    "type": "register",
    "block": "rx_pdr",
    "width": 114,
    "desc": "Counter B counts buffers consumed by multicast packets, with replication not to OQ level. Counter G - counts buffers consumed by mirror copies of packets which there forwarding copies is counted in counter A. Counter B - counts buffers consumed by multicast packets, with replication not to OQ level",
    "fields": [
      [
        "counter_a_drop_thr0",
        0,
        19
      ],
      [
        "counter_a_drop_thr1",
        19,
        19
      ],
      [
        "counter_sum_b_e_g_a_ingress_uc_drop_thr",
        38,
        19
      ],
      [
        "counter_g_ibm_drop_thr",
        57,
        19
      ],
      [
        "counter_sum_b_e_g_ibm_drop_thr",
        76,
        19
      ],
      [
        "counter_sum_b_e_g_a_ibm_drop_thr",
        95,
        19
      ]
    ]
  },
  "rx_pdr_counters_thresholds_reg3": {
    "type": "register",
    "block": "rx_pdr",
    "width": 76,
    "desc": "",
    "fields": [
      [
        "counter_b_drop_thr0",
        0,
        19
      ],
      [
        "counter_b_drop_thr1",
        19,
        19
      ],
      [
        "counter_sum_b_e_g_ingress_mc_drop_thr",
        38,
        19
      ],
      [
        "counter_sum_b_e_g_a_ingress_mc_drop_thr",
        57,
        19
      ]
    ]
  },
  "rx_pdr_counters_thresholds_reg4": {
    "type": "register",
    "block": "rx_pdr",
    "width": 133,
    "desc": "",
    "fields": [
      [
        "counter_e_drop_thr0",
        0,
        19
      ],
      [
        "counter_e_drop_thr1",
        19,
        19
      ],
      [
        "counter_sum_b_e_g_plb_mc_drop_thr",
        38,
        19
      ],
      [
        "counter_sum_b_e_g_a_plb_mc_drop_thr",
        57,
        19
      ],
      [
        "counter_sum_b_e_txcgm_drop_thr0",
        76,
        19
      ],
      [
        "counter_sum_b_e_txcgm_drop_thr1",
        95,
        19
      ],
      [
        "counter_sum_b_e_txcgm_drop_thr2",
        114,
        19
      ]
    ]
  },
  "rx_pdr_cgm_counters_status": {
    "type": "register",
    "block": "rx_pdr",
    "width": 76,
    "desc": "",
    "fields": [
      [
        "counter_a",
        0,
        19
      ],
      [
        "counter_b",
        19,
        19
      ],
      [
        "counter_e",
        38,
        19
      ],
      [
        "counter_g",
        57,
        19
      ]
    ]
  },
  "rx_pdr_mc_emdb_override_conf_reg0": {
    "type": "register",
    "block": "rx_pdr",
    "width": 2,
    "desc": " ",
    "fields": [
      [
        "set_mc_emdb_override_valid",
        0,
        2
      ]
    ]
  },
  "rx_pdr_mc_emdb_override_conf_reg1": {
    "type": "register",
    "block": "rx_pdr",
    "width": 104,
    "desc": " ",
    "fields": [
      [
        "set_mc_emdb_override_data",
        0,
        72
      ],
      [
        "set_mc_emdb_override_key",
        72,
        32
      ]
    ]
  },
  "rx_pdr_slice_config_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 7,
    "desc": " ",
    "fields": [
      [
        "slice_rxpdr2_txpdr_cbt_alm_full_thr",
        0,
        7
      ]
    ]
  },
  "rx_pdr_slice_debug_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 32,
    "desc": "Debug register",
    "fields": [
      [
        "slice_rxpdr2_txpdr_cbt_not_ready",
        0,
        32
      ]
    ]
  },
  "rx_pdr_link_to_sms_if_map": {
    "type": "register",
    "block": "rx_pdr",
    "width": 84,
    "desc": "Map link to fabric SMS interface",
    "fields": [
      [
        "sms_if_max_link",
        0,
        84
      ]
    ]
  },
  "rx_pdr_sms_load_balancing_meter_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 32,
    "desc": "SLBM configuration, intended to rate limit words on the fabric SMS interfaces. One config register per SMS interface rate limiter.",
    "fields": [
      [
        "sms_load_balancing_meter_max_thr",
        0,
        12
      ],
      [
        "sms_load_balancing_meter_rate",
        12,
        20
      ]
    ]
  },
  "rx_pdr_link_load_balancing_meter_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 50,
    "desc": "LLBM configuration, intended to rate limit each fabric link to 100G or 200G. Lower register is for lower 44 links (200G) and upper register is for upper 64 links (100G)",
    "fields": [
      [
        "link_load_balancing_meter_max_thr",
        0,
        16
      ],
      [
        "link_load_balancing_meter_rate",
        16,
        24
      ],
      [
        "link_load_balancing_meter_inc_value",
        40,
        10
      ]
    ]
  },
  "rx_pdr_link_load_balancing_counter_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 66,
    "desc": "LLBC configuration, counts amount of traffic per link & context (UC/MC). Lower two registers are for lower 44 links (200G) and upper two registers are for upper 64 links (100G) Among each two - lower register is for UC LLBC and upper register is for MC LLBC i.e. order is {MC1, UC1, MC0, UC0}",
    "fields": [
      [
        "link_load_balancing_counter_max_thr",
        0,
        16
      ],
      [
        "link_load_balancing_counter_dec_value",
        16,
        16
      ],
      [
        "link_load_balancing_counter_decay_rate",
        32,
        24
      ],
      [
        "link_load_balancing_counter_decay_value",
        56,
        10
      ]
    ]
  },
  "rx_pdr_load_balancing_general_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 66,
    "desc": "Load balancing scheme general configuration",
    "fields": [
      [
        "link_selection_method_lut",
        0,
        64
      ],
      [
        "enable_llbm_flow_control",
        64,
        1
      ],
      [
        "enable_slbm_flow_control",
        65,
        1
      ]
    ]
  },
  "rx_pdr_link_type_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 108,
    "desc": "",
    "fields": [
      [
        "link_type_bitmap",
        0,
        108
      ]
    ]
  },
  "rx_pdr_slbm_quant_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 180,
    "desc": "Load balancing scheme general configuration",
    "fields": [
      [
        "slbm_quant_thr",
        0,
        180
      ]
    ]
  },
  "rx_pdr_llbm_quant_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 240,
    "desc": "Load balancing scheme general configuration Lower register is for 200G links and upper register is for 100G links",
    "fields": [
      [
        "llbm_quant_thr",
        0,
        240
      ]
    ]
  },
  "rx_pdr_llbc_quant_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 224,
    "desc": "Load balancing scheme general configuration",
    "fields": [
      [
        "uc_llbc_quant_thr",
        0,
        112
      ],
      [
        "mc_llbc_quant_thr",
        112,
        112
      ]
    ]
  },
  "rx_pdr_shared_memory_out_fifo_not_ready_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 6,
    "desc": "",
    "fields": [
      [
        "shared_memory_out_fifo_not_ready",
        0,
        6
      ]
    ]
  },
  "rx_pdr_shared_memory_out_fifo_almost_full_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "shared_memory_out_fifo_almost_full",
        0,
        2
      ]
    ]
  },
  "rx_pdr_counter_a_histogram_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "counter_a_histogram_th0",
        0,
        19
      ],
      [
        "counter_a_histogram_th1",
        19,
        19
      ],
      [
        "counter_a_histogram_th2",
        38,
        19
      ],
      [
        "counter_a_histogram_th3",
        57,
        19
      ],
      [
        "counter_a_histogram_th4",
        76,
        19
      ],
      [
        "counter_a_histogram_th5",
        95,
        19
      ],
      [
        "counter_a_histogram_th6",
        114,
        19
      ],
      [
        "counter_a_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "rx_pdr_counter_a_histogram_status": {
    "type": "register",
    "block": "rx_pdr",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "counter_a_histogram_value0",
        0,
        32
      ],
      [
        "counter_a_histogram_overflow0",
        32,
        1
      ],
      [
        "counter_a_histogram_value1",
        33,
        32
      ],
      [
        "counter_a_histogram_overflow1",
        65,
        1
      ],
      [
        "counter_a_histogram_value2",
        66,
        32
      ],
      [
        "counter_a_histogram_overflow2",
        98,
        1
      ],
      [
        "counter_a_histogram_value3",
        99,
        32
      ],
      [
        "counter_a_histogram_overflow3",
        131,
        1
      ],
      [
        "counter_a_histogram_value4",
        132,
        32
      ],
      [
        "counter_a_histogram_overflow4",
        164,
        1
      ],
      [
        "counter_a_histogram_value5",
        165,
        32
      ],
      [
        "counter_a_histogram_overflow5",
        197,
        1
      ],
      [
        "counter_a_histogram_value6",
        198,
        32
      ],
      [
        "counter_a_histogram_overflow6",
        230,
        1
      ],
      [
        "counter_a_histogram_value7",
        231,
        32
      ],
      [
        "counter_a_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "rx_pdr_counter_a_histogram_max_wmk_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "counter_a_histogram_max_wmk",
        0,
        19
      ],
      [
        "counter_a_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "rx_pdr_counter_b_histogram_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "counter_b_histogram_th0",
        0,
        19
      ],
      [
        "counter_b_histogram_th1",
        19,
        19
      ],
      [
        "counter_b_histogram_th2",
        38,
        19
      ],
      [
        "counter_b_histogram_th3",
        57,
        19
      ],
      [
        "counter_b_histogram_th4",
        76,
        19
      ],
      [
        "counter_b_histogram_th5",
        95,
        19
      ],
      [
        "counter_b_histogram_th6",
        114,
        19
      ],
      [
        "counter_b_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "rx_pdr_counter_b_histogram_status": {
    "type": "register",
    "block": "rx_pdr",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "counter_b_histogram_value0",
        0,
        32
      ],
      [
        "counter_b_histogram_overflow0",
        32,
        1
      ],
      [
        "counter_b_histogram_value1",
        33,
        32
      ],
      [
        "counter_b_histogram_overflow1",
        65,
        1
      ],
      [
        "counter_b_histogram_value2",
        66,
        32
      ],
      [
        "counter_b_histogram_overflow2",
        98,
        1
      ],
      [
        "counter_b_histogram_value3",
        99,
        32
      ],
      [
        "counter_b_histogram_overflow3",
        131,
        1
      ],
      [
        "counter_b_histogram_value4",
        132,
        32
      ],
      [
        "counter_b_histogram_overflow4",
        164,
        1
      ],
      [
        "counter_b_histogram_value5",
        165,
        32
      ],
      [
        "counter_b_histogram_overflow5",
        197,
        1
      ],
      [
        "counter_b_histogram_value6",
        198,
        32
      ],
      [
        "counter_b_histogram_overflow6",
        230,
        1
      ],
      [
        "counter_b_histogram_value7",
        231,
        32
      ],
      [
        "counter_b_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "rx_pdr_counter_b_histogram_max_wmk_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "counter_b_histogram_max_wmk",
        0,
        19
      ],
      [
        "counter_b_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "rx_pdr_counter_g_histogram_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "counter_g_histogram_th0",
        0,
        19
      ],
      [
        "counter_g_histogram_th1",
        19,
        19
      ],
      [
        "counter_g_histogram_th2",
        38,
        19
      ],
      [
        "counter_g_histogram_th3",
        57,
        19
      ],
      [
        "counter_g_histogram_th4",
        76,
        19
      ],
      [
        "counter_g_histogram_th5",
        95,
        19
      ],
      [
        "counter_g_histogram_th6",
        114,
        19
      ],
      [
        "counter_g_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "rx_pdr_counter_g_histogram_status": {
    "type": "register",
    "block": "rx_pdr",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "counter_g_histogram_value0",
        0,
        32
      ],
      [
        "counter_g_histogram_overflow0",
        32,
        1
      ],
      [
        "counter_g_histogram_value1",
        33,
        32
      ],
      [
        "counter_g_histogram_overflow1",
        65,
        1
      ],
      [
        "counter_g_histogram_value2",
        66,
        32
      ],
      [
        "counter_g_histogram_overflow2",
        98,
        1
      ],
      [
        "counter_g_histogram_value3",
        99,
        32
      ],
      [
        "counter_g_histogram_overflow3",
        131,
        1
      ],
      [
        "counter_g_histogram_value4",
        132,
        32
      ],
      [
        "counter_g_histogram_overflow4",
        164,
        1
      ],
      [
        "counter_g_histogram_value5",
        165,
        32
      ],
      [
        "counter_g_histogram_overflow5",
        197,
        1
      ],
      [
        "counter_g_histogram_value6",
        198,
        32
      ],
      [
        "counter_g_histogram_overflow6",
        230,
        1
      ],
      [
        "counter_g_histogram_value7",
        231,
        32
      ],
      [
        "counter_g_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "rx_pdr_counter_g_histogram_max_wmk_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "counter_g_histogram_max_wmk",
        0,
        19
      ],
      [
        "counter_g_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "rx_pdr_counter_e_histogram_cfg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 143,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "counter_e_histogram_th0",
        0,
        19
      ],
      [
        "counter_e_histogram_th1",
        19,
        19
      ],
      [
        "counter_e_histogram_th2",
        38,
        19
      ],
      [
        "counter_e_histogram_th3",
        57,
        19
      ],
      [
        "counter_e_histogram_th4",
        76,
        19
      ],
      [
        "counter_e_histogram_th5",
        95,
        19
      ],
      [
        "counter_e_histogram_th6",
        114,
        19
      ],
      [
        "counter_e_histogram_time_interval",
        133,
        10
      ]
    ]
  },
  "rx_pdr_counter_e_histogram_status": {
    "type": "register",
    "block": "rx_pdr",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "counter_e_histogram_value0",
        0,
        32
      ],
      [
        "counter_e_histogram_overflow0",
        32,
        1
      ],
      [
        "counter_e_histogram_value1",
        33,
        32
      ],
      [
        "counter_e_histogram_overflow1",
        65,
        1
      ],
      [
        "counter_e_histogram_value2",
        66,
        32
      ],
      [
        "counter_e_histogram_overflow2",
        98,
        1
      ],
      [
        "counter_e_histogram_value3",
        99,
        32
      ],
      [
        "counter_e_histogram_overflow3",
        131,
        1
      ],
      [
        "counter_e_histogram_value4",
        132,
        32
      ],
      [
        "counter_e_histogram_overflow4",
        164,
        1
      ],
      [
        "counter_e_histogram_value5",
        165,
        32
      ],
      [
        "counter_e_histogram_overflow5",
        197,
        1
      ],
      [
        "counter_e_histogram_value6",
        198,
        32
      ],
      [
        "counter_e_histogram_overflow6",
        230,
        1
      ],
      [
        "counter_e_histogram_value7",
        231,
        32
      ],
      [
        "counter_e_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "rx_pdr_counter_e_histogram_max_wmk_reg": {
    "type": "register",
    "block": "rx_pdr",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "counter_e_histogram_max_wmk",
        0,
        19
      ],
      [
        "counter_e_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "rx_pdr_max_delay_estimation_lut": {
    "type": "memory",
    "block": "rx_pdr",
    "width": 3,
    "desc": "Max delay estimation LUT",
    "fields": [
      [
        "max_delay_estimation",
        0,
        3
      ]
    ]
  },
  "rx_pdr_shared_mem_rd_req_fifo": {
    "type": "memory",
    "block": "rx_pdr",
    "width": 32,
    "desc": "The data holds the key since it is larger than the address to the McFeLinksBmp",
    "fields": [
      [
        "mc_emdb_key_entry_number",
        0,
        11
      ],
      [
        "mc_emdb_key_mcid",
        11,
        16
      ],
      [
        "mc_emdb_key_src_is_recycle",
        27,
        1
      ],
      [
        "mc_emdb_key_slice_orientation",
        28,
        3
      ],
      [
        "mc_emdb_key_is_tx_pdr",
        31,
        1
      ]
    ]
  },
  "rx_pdr_shared_mem_rd_result_fifo": {
    "type": "memory",
    "block": "rx_pdr",
    "width": 109,
    "desc": "The FIFO holds the data returning from the McFeLinksBmp because it is larger than the data from the MC Emdb",
    "fields": [
      [
        "mc_fe_links_bmp_data",
        0,
        109
      ]
    ]
  },
  "rx_pdr_shared_db_interrupt_register": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 3,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "shared_db_interrupt_reg_summary",
        1,
        1
      ],
      [
        "em_response_interrupt_summary",
        2,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_mem_protect_interrupt": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_mem_protect_interrupt_test": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 4,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "shared_db_verifier0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "shared_db_verifier1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "shared_db_verifier2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "shared_db_verifier3_ecc_1b_err_interrupt_mask",
        3,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 4,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "shared_db_verifier0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "shared_db_verifier1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "shared_db_verifier2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "shared_db_verifier3_ecc_2b_err_interrupt_mask",
        3,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 4,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "shared_db_verifier0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "shared_db_verifier1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "shared_db_verifier2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "shared_db_verifier3_ecc_1b_err_initiate",
        3,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 4,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "shared_db_verifier0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "shared_db_verifier1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "shared_db_verifier2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "shared_db_verifier3_ecc_2b_err_initiate",
        3,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_mem_protect_err_status": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 4,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "shared_db_verifier0_err_int",
        0,
        1
      ],
      [
        "shared_db_verifier1_err_int",
        1,
        1
      ],
      [
        "shared_db_verifier2_err_int",
        2,
        1
      ],
      [
        "shared_db_verifier3_err_int",
        3,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_selected_ser_error_info": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 17,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        15
      ],
      [
        "mem_err_type",
        15,
        2
      ]
    ]
  },
  "rx_pdr_shared_db_ser_error_debug_configuration": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 3,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        2
      ],
      [
        "reset_memory_errors",
        2,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_ecc_1b_err_debug": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_pdr_shared_db_ecc_2b_err_debug": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "rx_pdr_shared_db_tcam_scan_period_cfg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 32,
    "desc": "Configures period of TCAM scan for SER, set 0 to disable",
    "fields": [
      [
        "tcam_scan_period",
        0,
        32
      ]
    ]
  },
  "rx_pdr_shared_db_counter_timer": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "rx_pdr_shared_db_counter_timer_trigger_reg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_memory_access_timeout": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "rx_pdr_shared_db_broadcast_config_reg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "rx_pdr_shared_db_memory_prot_bypass": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_soft_reset_configuration": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_mbist_configuration": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "rx_pdr_shared_db_power_down_configuration": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_spare_reg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "rx_pdr_shared_db_pmro_ctrl": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "rx_pdr_shared_db_pmro_status": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_mirror_bus_conf_reg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "rx_pdr_shared_db_mirror_bus_status": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "rx_pdr_shared_db_device_time_offset_cfg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_interrupt_reg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "lookup_a_error",
        0,
        1
      ],
      [
        "lookup_b_error",
        1,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_interrupt_reg_mask": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "lookup_a_error_mask",
        0,
        1
      ],
      [
        "lookup_b_error_mask",
        1,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_interrupt_reg_test": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "lookup_a_error_test",
        0,
        1
      ],
      [
        "lookup_b_error_test",
        1,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_global_configuration": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 2,
    "desc": "",
    "fields": [
      [
        "device_type",
        0,
        2
      ]
    ]
  },
  "rx_pdr_shared_db_fe_links_bmp_table_conf": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 4,
    "desc": "",
    "fields": [
      [
        "dis_ecc_check_fe_links_bmp",
        0,
        4
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_per_bank_reg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 66,
    "desc": "EM bank configurations, see fields description",
    "fields": [
      [
        "shared_db_active_banks",
        0,
        1
      ],
      [
        "shared_db_hash_key",
        1,
        64
      ],
      [
        "shared_db_use_primitive_crc",
        65,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_per_em_reg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 33,
    "desc": "EM configurations, see fields description",
    "fields": [
      [
        "shared_db_key_width",
        0,
        16
      ],
      [
        "shared_db_auto_bubble_req",
        16,
        1
      ],
      [
        "shared_db_bubble_req_threshold",
        17,
        16
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_cam_wm_max_reg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 8,
    "desc": "EM debug indications, see fields description",
    "fields": [
      [
        "shared_db_cam_wm_max",
        0,
        8
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_access_register": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 127,
    "desc": "EM indirect access configurations",
    "fields": [
      [
        "shared_db_access_reg",
        0,
        127
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_response_register": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 127,
    "desc": "EM indirect access data",
    "fields": [
      [
        "shared_db_response_valid",
        0,
        1
      ],
      [
        "shared_db_response_reg",
        1,
        126
      ]
    ]
  },
  "rx_pdr_shared_db_em_response_interrupt": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 1,
    "desc": "EM indirect access data is valid",
    "fields": [
      [
        "shared_db_resp",
        0,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_em_response_interrupt_mask": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 1,
    "desc": "This register masks EmResponseInterrupt interrupt register",
    "fields": [
      [
        "shared_db_resp_mask",
        0,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_em_response_interrupt_test": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 1,
    "desc": "This register tests EmResponseInterrupt interrupt register",
    "fields": [
      [
        "shared_db_resp_test",
        0,
        1
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_verifier_bubble_req_cfg": {
    "type": "register",
    "block": "rx_pdr_shared_db",
    "width": 16,
    "desc": "Bubble request configurations for SharedDbVerifier[n] memory",
    "fields": [
      [
        "shared_db_verifier_bubble_timer_cfg",
        0,
        16
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_verifier": {
    "type": "memory",
    "block": "rx_pdr_shared_db",
    "width": 91,
    "desc": "Holds the verifier and the payload of the EM entry",
    "fields": [
      [
        "shared_db_verifier_data",
        0,
        99
      ]
    ]
  },
  "rx_pdr_shared_db_shared_db_cam": {
    "type": "memory",
    "block": "rx_pdr_shared_db",
    "width": 32,
    "desc": "EM fallback CAM",
    "fields": [
      [
        "shared_db_cam_payload",
        0,
        72
      ],
      [
        "shared_db_cam_key",
        72,
        32
      ],
      [
        "shared_db_cam_valid",
        104,
        1
      ]
    ]
  },
  "sch_interrupt_register": {
    "type": "register",
    "block": "sch",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "sch_mem_protect_interrupt": {
    "type": "register",
    "block": "sch",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "sch_mem_protect_interrupt_test": {
    "type": "register",
    "block": "sch",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "sch_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "sch",
    "width": 37,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "vsc_credit_deficit_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "vsc_token_bucket_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "vsc_token_bucket_empty_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "vsc_token_bucket_cfg_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "vsc_token_bucket_link_list_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "vsc_backoff_state_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "vsc_backoff_fifo_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "vsc_pending_update_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "vsc_map_cfg_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "vscc_cir_link_list_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "vscc_eir_link_list_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "vscc_cir_linked_flag_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "vscc_eir_linked_flag_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "oqse_cfg_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "oqse_ll_desc_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "oqse_wfq_desc_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "oqse_wfq_wakeup_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "oqse_request_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "oqse_pending_update_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "oqse_cir_token_bucket_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "oqse_eir_token_bucket_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "oqse_cir_token_bucket_cfg_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "oqse_eir_token_bucket_cfg_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "oqse_cir_token_bucket_link_list_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "oqse_eir_token_bucket_link_list_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "oqse_cir_linked_flag_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "oqse_eir_linked_flag_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "oqse_map_cfg_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "lpse_wfq_weight_map_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "oqse_cir_link_list_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "oqse_eir_link_list_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "lpse_wfq_desc_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "oq_pir_token_bucket_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "oq_pir_token_bucket_cfg_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "oqpg_cir_token_bucket_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "tpse_wfq_rr_desc_ecc_1b_err_interrupt_mask",
        36,
        1
      ]
    ]
  },
  "sch_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "sch",
    "width": 37,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "vsc_credit_deficit_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "vsc_token_bucket_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "vsc_token_bucket_empty_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "vsc_token_bucket_cfg_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "vsc_token_bucket_link_list_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "vsc_backoff_state_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "vsc_backoff_fifo_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "vsc_pending_update_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "vsc_map_cfg_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "vscc_cir_link_list_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "vscc_eir_link_list_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "vscc_cir_linked_flag_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "vscc_eir_linked_flag_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "oqse_cfg_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "oqse_ll_desc_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "oqse_wfq_desc_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "oqse_wfq_wakeup_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "oqse_request_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "oqse_pending_update_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "oqse_cir_token_bucket_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "oqse_eir_token_bucket_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "oqse_cir_token_bucket_cfg_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "oqse_eir_token_bucket_cfg_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "oqse_cir_token_bucket_link_list_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "oqse_eir_token_bucket_link_list_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "oqse_cir_linked_flag_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "oqse_eir_linked_flag_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "oqse_map_cfg_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "lpse_wfq_weight_map_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "oqse_cir_link_list_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "oqse_eir_link_list_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "lpse_wfq_desc_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "oq_pir_token_bucket_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "oq_pir_token_bucket_cfg_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "oqpg_cir_token_bucket_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "tpse_wfq_rr_desc_ecc_2b_err_interrupt_mask",
        36,
        1
      ]
    ]
  },
  "sch_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "sch",
    "width": 37,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "vsc_credit_deficit_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "vsc_token_bucket_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "vsc_token_bucket_empty_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "vsc_token_bucket_cfg_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "vsc_token_bucket_link_list_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "vsc_backoff_state_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "vsc_backoff_fifo_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "vsc_pending_update_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "vsc_map_cfg_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "vscc_cir_link_list_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "vscc_eir_link_list_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "vscc_cir_linked_flag_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "vscc_eir_linked_flag_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "oqse_cfg_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "oqse_ll_desc_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "oqse_wfq_desc_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "oqse_wfq_wakeup_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "oqse_request_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "oqse_pending_update_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "oqse_cir_token_bucket_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "oqse_eir_token_bucket_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "oqse_cir_token_bucket_cfg_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "oqse_eir_token_bucket_cfg_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "oqse_cir_token_bucket_link_list_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "oqse_eir_token_bucket_link_list_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "oqse_cir_linked_flag_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "oqse_eir_linked_flag_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "oqse_map_cfg_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "lpse_wfq_weight_map_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "oqse_cir_link_list_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "oqse_eir_link_list_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "lpse_wfq_desc_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "oq_pir_token_bucket_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "oq_pir_token_bucket_cfg_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "oqpg_cir_token_bucket_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "tpse_wfq_rr_desc_ecc_1b_err_initiate",
        36,
        1
      ]
    ]
  },
  "sch_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "sch",
    "width": 37,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "vsc_credit_deficit_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "vsc_token_bucket_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "vsc_token_bucket_empty_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "vsc_token_bucket_cfg_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "vsc_token_bucket_link_list_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "vsc_backoff_state_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "vsc_backoff_fifo_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "vsc_pending_update_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "vsc_map_cfg_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "vscc_cir_link_list_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "vscc_eir_link_list_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "vscc_cir_linked_flag_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "vscc_eir_linked_flag_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "oqse_cfg_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "oqse_ll_desc_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "oqse_wfq_desc_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "oqse_wfq_wakeup_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "oqse_request_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "oqse_pending_update_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "oqse_cir_token_bucket_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "oqse_eir_token_bucket_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "oqse_cir_token_bucket_cfg_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "oqse_eir_token_bucket_cfg_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "oqse_cir_token_bucket_link_list_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "oqse_eir_token_bucket_link_list_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "oqse_cir_linked_flag_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "oqse_eir_linked_flag_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "oqse_map_cfg_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "lpse_wfq_weight_map_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "oqse_cir_link_list_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "oqse_eir_link_list_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "lpse_wfq_desc_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "oq_pir_token_bucket_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "oq_pir_token_bucket_cfg_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "oqpg_cir_token_bucket_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "tpse_wfq_rr_desc_ecc_2b_err_initiate",
        36,
        1
      ]
    ]
  },
  "sch_mem_protect_err_status": {
    "type": "register",
    "block": "sch",
    "width": 37,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "vsc_credit_deficit_err_int",
        0,
        1
      ],
      [
        "vsc_token_bucket_err_int",
        1,
        1
      ],
      [
        "vsc_token_bucket_empty_err_int",
        2,
        1
      ],
      [
        "vsc_token_bucket_cfg_err_int",
        3,
        1
      ],
      [
        "vsc_token_bucket_link_list_err_int",
        4,
        1
      ],
      [
        "vsc_backoff_state_err_int",
        5,
        1
      ],
      [
        "vsc_backoff_fifo_err_int",
        6,
        1
      ],
      [
        "vsc_pending_update_err_int",
        7,
        1
      ],
      [
        "vsc_map_cfg_err_int",
        8,
        1
      ],
      [
        "vscc_cir_link_list_err_int",
        9,
        1
      ],
      [
        "vscc_eir_link_list_err_int",
        10,
        1
      ],
      [
        "vscc_cir_linked_flag_err_int",
        11,
        1
      ],
      [
        "vscc_eir_linked_flag_err_int",
        12,
        1
      ],
      [
        "oqse_cfg_err_int",
        13,
        1
      ],
      [
        "oqse_ll_desc_err_int",
        14,
        1
      ],
      [
        "oqse_wfq_desc_err_int",
        15,
        1
      ],
      [
        "oqse_wfq_wakeup_err_int",
        16,
        1
      ],
      [
        "oqse_request_err_int",
        17,
        1
      ],
      [
        "oqse_pending_update_err_int",
        18,
        1
      ],
      [
        "oqse_cir_token_bucket_err_int",
        19,
        1
      ],
      [
        "oqse_eir_token_bucket_err_int",
        20,
        1
      ],
      [
        "oqse_cir_token_bucket_cfg_err_int",
        21,
        1
      ],
      [
        "oqse_eir_token_bucket_cfg_err_int",
        22,
        1
      ],
      [
        "oqse_cir_token_bucket_link_list_err_int",
        23,
        1
      ],
      [
        "oqse_eir_token_bucket_link_list_err_int",
        24,
        1
      ],
      [
        "oqse_cir_linked_flag_err_int",
        25,
        1
      ],
      [
        "oqse_eir_linked_flag_err_int",
        26,
        1
      ],
      [
        "oqse_map_cfg_err_int",
        27,
        1
      ],
      [
        "lpse_wfq_weight_map_err_int",
        28,
        1
      ],
      [
        "oqse_cir_link_list_err_int",
        29,
        1
      ],
      [
        "oqse_eir_link_list_err_int",
        30,
        1
      ],
      [
        "lpse_wfq_desc_err_int",
        31,
        1
      ],
      [
        "oq_pir_token_bucket_err_int",
        32,
        1
      ],
      [
        "oq_pir_token_bucket_cfg_err_int",
        33,
        1
      ],
      [
        "oqpg_cir_token_bucket_err_int",
        34,
        1
      ],
      [
        "oqpg_cir_token_bucket_cfg_err_int",
        35,
        1
      ],
      [
        "tpse_wfq_rr_desc_err_int",
        36,
        1
      ]
    ]
  },
  "sch_selected_ser_error_info": {
    "type": "register",
    "block": "sch",
    "width": 17,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        15
      ],
      [
        "mem_err_type",
        15,
        2
      ]
    ]
  },
  "sch_ser_error_debug_configuration": {
    "type": "register",
    "block": "sch",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "sch_ecc_1b_err_debug": {
    "type": "register",
    "block": "sch",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "sch_ecc_2b_err_debug": {
    "type": "register",
    "block": "sch",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "sch_counter_timer": {
    "type": "register",
    "block": "sch",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "sch_counter_timer_trigger_reg": {
    "type": "register",
    "block": "sch",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "sch_memory_access_timeout": {
    "type": "register",
    "block": "sch",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "sch_broadcast_config_reg": {
    "type": "register",
    "block": "sch",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "sch_memory_prot_bypass": {
    "type": "register",
    "block": "sch",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "sch_soft_reset_configuration": {
    "type": "register",
    "block": "sch",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "sch_mbist_configuration": {
    "type": "register",
    "block": "sch",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "sch_power_down_configuration": {
    "type": "register",
    "block": "sch",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "sch_spare_reg": {
    "type": "register",
    "block": "sch",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "sch_pmro_ctrl": {
    "type": "register",
    "block": "sch",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "sch_pmro_status": {
    "type": "register",
    "block": "sch",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "sch_mirror_bus_conf_reg": {
    "type": "register",
    "block": "sch",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "sch_mirror_bus_status": {
    "type": "register",
    "block": "sch",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "sch_device_time_offset_cfg": {
    "type": "register",
    "block": "sch",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "sch_general_interrupt_register": {
    "type": "register",
    "block": "sch",
    "width": 2,
    "desc": "SCH interrupt register",
    "fields": [
      [
        "speculative_grant",
        0,
        1
      ],
      [
        "illegal_req_vsc",
        1,
        1
      ]
    ]
  },
  "sch_general_interrupt_register_mask": {
    "type": "register",
    "block": "sch",
    "width": 2,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "speculative_grant_mask",
        0,
        1
      ],
      [
        "illegal_req_vsc_mask",
        1,
        1
      ]
    ]
  },
  "sch_general_interrupt_register_test": {
    "type": "register",
    "block": "sch",
    "width": 2,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "speculative_grant_test",
        0,
        1
      ],
      [
        "illegal_req_vsc_test",
        1,
        1
      ]
    ]
  },
  "sch_general_configuration": {
    "type": "register",
    "block": "sch",
    "width": 3,
    "desc": "Scheduler general configuration register, see fields description",
    "fields": [
      [
        "oqse_grant_rate",
        0,
        1
      ],
      [
        "lpse_grant_rate",
        1,
        1
      ],
      [
        "logical_port_map_value_enable",
        2,
        1
      ]
    ]
  },
  "sch_oqse_shaper_configuration": {
    "type": "register",
    "block": "sch",
    "width": 35,
    "desc": "OQSE shaper total parameters",
    "fields": [
      [
        "oqse_shaper_rate",
        0,
        24
      ],
      [
        "oqse_shaper_max_bucket",
        24,
        8
      ],
      [
        "oqse_shaper_incr_value",
        32,
        3
      ]
    ]
  },
  "sch_slow_rate_configuration": {
    "type": "register",
    "block": "sch",
    "width": 39,
    "desc": "Slow rate definition",
    "fields": [
      [
        "slow_rate_enable",
        0,
        1
      ],
      [
        "slow_rate",
        1,
        24
      ],
      [
        "slow_second_round_enable",
        25,
        1
      ],
      [
        "slow_rcy_enable",
        26,
        1
      ],
      [
        "slow_rcy_th",
        27,
        11
      ],
      [
        "slow_no_rcy_enable",
        38,
        1
      ]
    ]
  },
  "sch_lpse_shaper_configuration": {
    "type": "register",
    "block": "sch",
    "width": 70,
    "desc": "LPSE shaper total parameters",
    "fields": [
      [
        "lpse_cir_shaper_rate",
        0,
        24
      ],
      [
        "lpse_cir_shaper_max_bucket",
        24,
        8
      ],
      [
        "lpse_cir_shaper_incr_value",
        32,
        3
      ],
      [
        "lpse_eir_shaper_rate",
        35,
        24
      ],
      [
        "lpse_eir_shaper_max_bucket",
        59,
        8
      ],
      [
        "lpse_eir_shaper_incr_value",
        67,
        3
      ]
    ]
  },
  "sch_tpse_shaper_configuration": {
    "type": "register",
    "block": "sch",
    "width": 70,
    "desc": "TPSE shaper total parameters",
    "fields": [
      [
        "tpse_pir_shaper_rate",
        0,
        24
      ],
      [
        "tpse_pir_shaper_max_bucket",
        24,
        8
      ],
      [
        "tpse_pir_shaper_incr_value",
        32,
        3
      ],
      [
        "tpse_cir_shaper_rate",
        35,
        24
      ],
      [
        "tpse_cir_shaper_max_bucket",
        59,
        8
      ],
      [
        "tpse_cir_shaper_incr_value",
        67,
        3
      ]
    ]
  },
  "sch_tpse_oqpg_mapping_configuration": {
    "type": "register",
    "block": "sch",
    "width": 442,
    "desc": "OQ to OQPG mapping",
    "fields": [
      [
        "tpse_oqpg_map",
        0,
        442
      ]
    ]
  },
  "sch_tpse_general_configuration": {
    "type": "register",
    "block": "sch",
    "width": 80,
    "desc": "Defines TPSE configurations and scheduling scheme",
    "fields": [
      [
        "fabric_mode",
        0,
        1
      ],
      [
        "tpse_map_logical_port",
        1,
        26
      ],
      [
        "tpse_priority_propagation",
        27,
        26
      ],
      [
        "tpse_priority_type",
        53,
        27
      ]
    ]
  },
  "sch_ifse_general_configuration": {
    "type": "register",
    "block": "sch",
    "width": 181,
    "desc": "Defines IFSE configurations and scheduling scheme",
    "fields": [
      [
        "ifg_credit_generator_rate",
        0,
        18
      ],
      [
        "ifg_credit_generator_max_bucket",
        18,
        6
      ],
      [
        "tpse2ifc_map",
        24,
        130
      ],
      [
        "ifse_eir_shaper_mode",
        154,
        27
      ]
    ]
  },
  "sch_max_credit_deficit_configuration": {
    "type": "register",
    "block": "sch",
    "width": 54,
    "desc": "Defines maximal credit deficit per port",
    "fields": [
      [
        "max_credit_deficit",
        0,
        54
      ]
    ]
  },
  "sch_ifse_wfq_cir_weights": {
    "type": "register",
    "block": "sch",
    "width": 6,
    "desc": "Defines IFSE CIR WFQ weights",
    "fields": [
      [
        "ifse_wfq_cir_weight",
        0,
        6
      ]
    ]
  },
  "sch_ifse_wfq_eir_weights": {
    "type": "register",
    "block": "sch",
    "width": 6,
    "desc": "Defines IFSE EIR WFQ weights",
    "fields": [
      [
        "ifse_wfq_eir_weight",
        0,
        6
      ]
    ]
  },
  "sch_ifse_cir_shaper_rate_configuration": {
    "type": "register",
    "block": "sch",
    "width": 18,
    "desc": "IFSE CIR shaper rate parameters",
    "fields": [
      [
        "ifse_cir_shaper_rate",
        0,
        18
      ]
    ]
  },
  "sch_ifse_cir_shaper_max_bucket_configuration": {
    "type": "register",
    "block": "sch",
    "width": 8,
    "desc": "IFSE CIR shaper max bucket parameters",
    "fields": [
      [
        "ifse_cir_shaper_max_bucket",
        0,
        8
      ]
    ]
  },
  "sch_ifse_pir_shaper_configuration": {
    "type": "register",
    "block": "sch",
    "width": 18,
    "desc": "IFSE PIR shaper parameters",
    "fields": [
      [
        "ifse_pir_shaper_rate",
        0,
        18
      ]
    ]
  },
  "sch_ifse_pir_shaper_max_bucket_configuration": {
    "type": "register",
    "block": "sch",
    "width": 8,
    "desc": "IFSE PIR shaper max bucket parameters",
    "fields": [
      [
        "ifse_pir_shaper_max_bucket",
        0,
        8
      ]
    ]
  },
  "sch_internal_fifo_alm_full": {
    "type": "register",
    "block": "sch",
    "width": 14,
    "desc": "Internal SCH fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "oqse_install_fifo_alm_full",
        0,
        3
      ],
      [
        "backoff_fifo_alm_full",
        3,
        4
      ],
      [
        "credit_cbt_alm_full",
        7,
        4
      ],
      [
        "lpse_install_fifo_alm_full",
        11,
        3
      ]
    ]
  },
  "sch_oqse_shaper_update": {
    "type": "register",
    "block": "sch",
    "width": 15,
    "desc": "Manual specific shaper initiation, used for shaper open",
    "fields": [
      [
        "oqse_shaper_update_client",
        0,
        15
      ]
    ]
  },
  "sch_lpse_cir_shaper_update": {
    "type": "register",
    "block": "sch",
    "width": 12,
    "desc": "Manual specific shaper initiation, used for shaper open",
    "fields": [
      [
        "lpse_cir_shaper_update_client",
        0,
        12
      ]
    ]
  },
  "sch_lpse_eir_shaper_update": {
    "type": "register",
    "block": "sch",
    "width": 12,
    "desc": "Manual specific shaper initiation, used for shaper open",
    "fields": [
      [
        "lpse_eir_shaper_update_client",
        0,
        12
      ]
    ]
  },
  "sch_tpse_cir_shaper_update": {
    "type": "register",
    "block": "sch",
    "width": 8,
    "desc": "Manual specific shaper initiation, used for shaper open",
    "fields": [
      [
        "tpse_cir_shaper_update_client",
        0,
        8
      ]
    ]
  },
  "sch_tpse_pir_shaper_update": {
    "type": "register",
    "block": "sch",
    "width": 8,
    "desc": "Manual specific shaper initiation, used for shaper open",
    "fields": [
      [
        "tpse_pir_shaper_update_client",
        0,
        8
      ]
    ]
  },
  "sch_tpse_cir_shaper_tb_empty_access": {
    "type": "register",
    "block": "sch",
    "width": 9,
    "desc": "CPU Write access to TPSE CIR shaper TB empty indication",
    "fields": [
      [
        "tpse_cir_shaper_tb_empty_value",
        0,
        1
      ],
      [
        "tpse_cir_shaper_tb_empty_client",
        1,
        8
      ]
    ]
  },
  "sch_tpse_pir_shaper_tb_empty_access": {
    "type": "register",
    "block": "sch",
    "width": 9,
    "desc": "CPU Write access to TPSE PIR shaper TB empty indication",
    "fields": [
      [
        "tpse_pir_shaper_tb_empty_value",
        0,
        1
      ],
      [
        "tpse_pir_shaper_tb_empty_client",
        1,
        8
      ]
    ]
  },
  "sch_oqse_shaper_init": {
    "type": "register",
    "block": "sch",
    "width": 1,
    "desc": "Manual shaper initiation, can be used when SCH is idle",
    "fields": [
      [
        "oqse_shaper_init_done",
        0,
        1
      ]
    ]
  },
  "sch_lpse_cir_shaper_init": {
    "type": "register",
    "block": "sch",
    "width": 1,
    "desc": "Manual shaper initiation, can be used when SCH is idle",
    "fields": [
      [
        "lpse_cir_shaper_init_done",
        0,
        1
      ]
    ]
  },
  "sch_lpse_eir_shaper_init": {
    "type": "register",
    "block": "sch",
    "width": 1,
    "desc": "Manual shaper initiation, can be used when SCH is idle",
    "fields": [
      [
        "lpse_eir_shaper_init_done",
        0,
        1
      ]
    ]
  },
  "sch_tpse_cir_shaper_init": {
    "type": "register",
    "block": "sch",
    "width": 1,
    "desc": "Manual shaper initiation, can be used when SCH is idle",
    "fields": [
      [
        "tpse_cir_shaper_init_done",
        0,
        1
      ]
    ]
  },
  "sch_tpse_pir_shaper_init": {
    "type": "register",
    "block": "sch",
    "width": 1,
    "desc": "Manual shaper initiation, can be used when SCH is idle",
    "fields": [
      [
        "tpse_pir_shaper_init_done",
        0,
        1
      ]
    ]
  },
  "sch_credit_request_gen_debug": {
    "type": "register",
    "block": "sch",
    "width": 26,
    "desc": "Writing to this register creates a dummy credit request by CPU, for debug only. The fields below are the credit request fields.",
    "fields": [
      [
        "cr_req_gen_vsc",
        0,
        15
      ],
      [
        "cr_req_gen_trigger",
        15,
        2
      ],
      [
        "cr_req_gen_acc_bytes",
        17,
        5
      ],
      [
        "cr_req_gen_ib_state",
        22,
        1
      ],
      [
        "cr_req_gen_stop",
        23,
        1
      ],
      [
        "cr_req_gen_go",
        24,
        1
      ],
      [
        "cr_req_gen_return",
        25,
        1
      ]
    ]
  },
  "sch_credit_grant_gen_debug": {
    "type": "register",
    "block": "sch",
    "width": 17,
    "desc": "Writing to this register creates a dummy credit grant by CPU, for debug only. The fields below are the credit grant fields.",
    "fields": [
      [
        "cr_grant_gen_vsc",
        0,
        15
      ],
      [
        "cr_grant_gen_cir",
        15,
        1
      ],
      [
        "cr_grant_gen_slow",
        16,
        1
      ]
    ]
  },
  "sch_internal_debug_configurations": {
    "type": "register",
    "block": "sch",
    "width": 3,
    "desc": "Internal SCH debug settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "disable_pend_updt_stop",
        0,
        1
      ],
      [
        "disable_slow_bypass",
        1,
        1
      ],
      [
        "disable_return_on_go",
        2,
        1
      ]
    ]
  },
  "sch_csms_cbt_not_ready_counter": {
    "type": "register",
    "block": "sch",
    "width": 32,
    "desc": "Counters of back pressure clocks of the outgoing interfaces",
    "fields": [
      [
        "cbt_not_ready_cnt",
        0,
        32
      ]
    ]
  },
  "sch_debug_request_cfg": {
    "type": "register",
    "block": "sch",
    "width": 54,
    "desc": "Credit request debugger - programmable counter based on any request field. For example, the user can count number of requests  with Return = 1",
    "fields": [
      [
        "debug_request_value",
        0,
        27
      ],
      [
        "debug_request_mask",
        27,
        27
      ]
    ]
  },
  "sch_debug_request_status": {
    "type": "register",
    "block": "sch",
    "width": 64,
    "desc": "Request debug counters",
    "fields": [
      [
        "debug_request_cnt",
        0,
        32
      ],
      [
        "debug_request_total_cnt",
        32,
        32
      ]
    ]
  },
  "sch_debug_grant_cfg": {
    "type": "register",
    "block": "sch",
    "width": 34,
    "desc": "Credit grant debugger - programmable counter based on any grant field. For example, the user can count number of requests  with slow = 1",
    "fields": [
      [
        "debug_grant_value",
        0,
        17
      ],
      [
        "debug_grant_mask",
        17,
        17
      ]
    ]
  },
  "sch_debug_grant_status": {
    "type": "register",
    "block": "sch",
    "width": 64,
    "desc": "Grant debug counters",
    "fields": [
      [
        "debug_grant_cnt",
        0,
        32
      ],
      [
        "debug_grant_total_cnt",
        32,
        32
      ]
    ]
  },
  "sch_last_data": {
    "type": "register",
    "block": "sch",
    "width": 44,
    "desc": "Debug last transaction",
    "fields": [
      [
        "last_grant",
        0,
        17
      ],
      [
        "last_request",
        17,
        27
      ]
    ]
  },
  "sch_rebound_counters": {
    "type": "register",
    "block": "sch",
    "width": 64,
    "desc": "Credit grant rebound counters per level",
    "fields": [
      [
        "oqse_rebound_cnt",
        0,
        16
      ],
      [
        "lpse_rebound_cnt",
        16,
        16
      ],
      [
        "tpse_rebound_cnt",
        32,
        16
      ],
      [
        "credit_return_cnt",
        48,
        16
      ]
    ]
  },
  "sch_oqse_rebound_reason": {
    "type": "register",
    "block": "sch",
    "width": 3,
    "desc": "Rebound reason at the OQSE level",
    "fields": [
      [
        "rebound_empty_oqse",
        0,
        1
      ],
      [
        "rebound_vsc_not_linked",
        1,
        1
      ],
      [
        "rebound_vsc_stop",
        2,
        1
      ]
    ]
  },
  "sch_tpse_debug": {
    "type": "register",
    "block": "sch",
    "width": 60,
    "desc": "TPSE debug indications",
    "fields": [
      [
        "flow_control_oq_set",
        0,
        1
      ],
      [
        "flow_control_oqg_set",
        1,
        1
      ],
      [
        "flow_control_csms_mc",
        2,
        1
      ],
      [
        "flow_control_txpdr_mc",
        3,
        2
      ],
      [
        "flow_control_txcgm_mc",
        5,
        1
      ],
      [
        "tpse_cir_request_state",
        6,
        27
      ],
      [
        "tpse_eir_request_state",
        33,
        27
      ]
    ]
  },
  "sch_internal_fifo_wmk": {
    "type": "register",
    "block": "sch",
    "width": 17,
    "desc": "Fifos watermark",
    "fields": [
      [
        "backoff_fifo_wmk",
        0,
        11
      ],
      [
        "csms_cbr_wmk",
        11,
        6
      ]
    ]
  },
  "sch_lost_credit_counter": {
    "type": "register",
    "block": "sch",
    "width": 24,
    "desc": "Lost credit counter - credit can be lost in extreme multiple rebound scenario",
    "fields": [
      [
        "oqse_lost_credit_cnt",
        0,
        8
      ],
      [
        "lpse_lost_credit_cnt",
        8,
        8
      ],
      [
        "tpse_lost_credit_cnt",
        16,
        8
      ]
    ]
  },
  "sch_fabric_latency_debug": {
    "type": "register",
    "block": "sch",
    "width": 16,
    "desc": "Fabric latency indication - can measure fabric latency in idle system",
    "fields": [
      [
        "fabric_latency_status",
        0,
        16
      ]
    ]
  },
  "sch_vsc_credit_deficit": {
    "type": "memory",
    "block": "sch",
    "width": 13,
    "desc": "Stores credit deficit and other states per VSC",
    "fields": [
      [
        "credit_deficit",
        0,
        10
      ],
      [
        "static_go",
        10,
        1
      ],
      [
        "ib_state",
        11,
        1
      ],
      [
        "slow_state",
        12,
        1
      ]
    ]
  },
  "sch_vsc_token_bucket": {
    "type": "memory",
    "block": "sch",
    "width": 10,
    "desc": "Value of the token bucket shaper, entry per VSC",
    "fields": [
      [
        "vsc_token_bucket_value",
        0,
        10
      ]
    ]
  },
  "sch_vsc_token_bucket_empty": {
    "type": "memory",
    "block": "sch",
    "width": 16,
    "desc": "Token Bucket empty indication, bit per VSC, accessed by VSC/16",
    "fields": [
      [
        "vsc_token_bucket_empty_flag",
        0,
        16
      ]
    ]
  },
  "sch_vsc_token_bucket_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 19,
    "desc": "Token Bucket Configuration - defines ratio of OqseShaperRate that will be allocated to each VSC. Ratio configuration = Sum(RateMantissa[i]*(1/2^((i+1) << RateExponent)",
    "fields": [
      [
        "vsc_rate_mantissa",
        0,
        5
      ],
      [
        "vsc_rate_exponent",
        5,
        5
      ],
      [
        "vsc_max_bucket_value",
        10,
        9
      ]
    ]
  },
  "sch_vsc_token_bucket_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 15,
    "desc": "Token Bucket Linked List used for VSC shaper, entry per VSC",
    "fields": [
      [
        "vsc_tb_link_pointer",
        0,
        15
      ]
    ]
  },
  "sch_vsc_backoff_state": {
    "type": "memory",
    "block": "sch",
    "width": 32,
    "desc": "VSC Backoff State, bit per VSC",
    "fields": [
      [
        "vsc_backoff_state_value",
        0,
        32
      ]
    ]
  },
  "sch_vsc_backoff_fifo": {
    "type": "memory",
    "block": "sch",
    "width": 33,
    "desc": "VSC Backoff Fifo, stores VSCs that has slow state",
    "fields": [
      [
        "vsc_backoff_fifo_vsc",
        0,
        15
      ],
      [
        "vsc_backoff_fifo_ts",
        15,
        18
      ]
    ]
  },
  "sch_vsc_pending_update": {
    "type": "memory",
    "block": "sch",
    "width": 128,
    "desc": "VSC Pending Update, 1 bits per VSC, indicates VSC is about to be installed",
    "fields": [
      [
        "vsc_pending_update_bitmap",
        0,
        128
      ]
    ]
  },
  "sch_vsc_map_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 60,
    "desc": "VSC mapping to OQSE",
    "fields": [
      [
        "oqse_id",
        0,
        12
      ],
      [
        "oqse_ll_bitmap",
        12,
        3
      ],
      [
        "oqse_id1",
        15,
        12
      ],
      [
        "oqse_ll_bitmap1",
        27,
        3
      ],
      [
        "oqse_id2",
        30,
        12
      ],
      [
        "oqse_ll_bitmap2",
        42,
        3
      ],
      [
        "oqse_id3",
        45,
        12
      ],
      [
        "oqse_ll_bitmap3",
        57,
        3
      ]
    ]
  },
  "sch_vscc_cir_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 15,
    "desc": "VSC CIR component credit grant Link List",
    "fields": [
      [
        "vscc_cir_link_pointer",
        0,
        15
      ]
    ]
  },
  "sch_vscc_eir_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 15,
    "desc": "VSC EIR component credit grant Link List",
    "fields": [
      [
        "vscc_eir_link_pointer",
        0,
        15
      ]
    ]
  },
  "sch_vscc_cir_linked_flag": {
    "type": "memory",
    "block": "sch",
    "width": 16,
    "desc": "VSC CIR component credit grant Link List entry is valid",
    "fields": [
      [
        "vscc_cir_ll_bitmap",
        0,
        16
      ]
    ]
  },
  "sch_vscc_eir_linked_flag": {
    "type": "memory",
    "block": "sch",
    "width": 16,
    "desc": "VSC EIR component credit grant Link List entry is valid",
    "fields": [
      [
        "vscc_eir_ll_bitmap",
        0,
        16
      ]
    ]
  },
  "sch_oqse_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 72,
    "desc": "Per OQSE pair configuration, each entry defines configuration for OQSE = 2*entry and 2*entry+1. If the OQSE is coupled (serves 8P) then the whole entry serves single OQSE",
    "fields": [
      [
        "oqse_wfq_weight0",
        0,
        8
      ],
      [
        "oqse_wfq_weight1",
        8,
        8
      ],
      [
        "oqse_wfq_weight2",
        16,
        8
      ],
      [
        "oqse_wfq_weight3",
        24,
        8
      ],
      [
        "oqse_wfq_weight4",
        32,
        8
      ],
      [
        "oqse_wfq_weight5",
        40,
        8
      ],
      [
        "oqse_wfq_weight6",
        48,
        8
      ],
      [
        "oqse_wfq_weight7",
        56,
        8
      ],
      [
        "oqse0_topology",
        64,
        2
      ],
      [
        "oqse1_topology",
        66,
        2
      ],
      [
        "logical_port_map0",
        68,
        2
      ],
      [
        "logical_port_map1",
        70,
        2
      ]
    ]
  },
  "sch_oqse_ll_desc": {
    "type": "memory",
    "block": "sch",
    "width": 624,
    "desc": "Internal OQSE Link list descriptor, entry per 2 OQSEs",
    "fields": [
      [
        "oqse_ll0_desc",
        0,
        78
      ],
      [
        "oqse_ll1_desc",
        78,
        78
      ],
      [
        "oqse_ll2_desc",
        156,
        78
      ],
      [
        "oqse_ll3_desc",
        234,
        78
      ],
      [
        "oqse_ll4_desc",
        312,
        78
      ],
      [
        "oqse_ll5_desc",
        390,
        78
      ],
      [
        "oqse_ll6_desc",
        468,
        78
      ],
      [
        "oqse_ll7_desc",
        546,
        78
      ]
    ]
  },
  "sch_oqse_wfq_desc": {
    "type": "memory",
    "block": "sch",
    "width": 110,
    "desc": "Internal OQSE WFQ descriptor, entry per 2 OQSEs",
    "fields": [
      [
        "oqse_ll0_priority",
        0,
        10
      ],
      [
        "oqse_ll1_priority",
        10,
        10
      ],
      [
        "oqse_ll2_priority",
        20,
        10
      ],
      [
        "oqse_ll3_priority",
        30,
        10
      ],
      [
        "oqse_ll4_priority",
        40,
        10
      ],
      [
        "oqse_ll5_priority",
        50,
        10
      ],
      [
        "oqse_ll6_priority",
        60,
        10
      ],
      [
        "oqse_ll7_priority",
        70,
        10
      ],
      [
        "oqse0_ll_service_length",
        80,
        15
      ],
      [
        "oqse1_ll_service_length",
        95,
        15
      ]
    ]
  },
  "sch_oqse_wfq_wakeup": {
    "type": "memory",
    "block": "sch",
    "width": 64,
    "desc": "OQSE WFQ wakeup descriptor, wakeup is a transition state from empty LL to non-empty LL, bit per LL",
    "fields": [
      [
        "oqse_wfq_wakeup_state",
        0,
        64
      ]
    ]
  },
  "sch_oqse_request": {
    "type": "memory",
    "block": "sch",
    "width": 32,
    "desc": "Stores OQSEs request state 2 bits {CIR,EIR}",
    "fields": [
      [
        "oqse_request_state",
        0,
        32
      ]
    ]
  },
  "sch_oqse_pending_update": {
    "type": "memory",
    "block": "sch",
    "width": 32,
    "desc": "OQSE Pending Update, 2 bits per OQSE {CIR,EIR}, inidcates OQSE is about to be installed",
    "fields": [
      [
        "oqse_pending_update_bitmap",
        0,
        32
      ]
    ]
  },
  "sch_oqse_eir_pir_shaper_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 32,
    "desc": "Oqse shaper configuration - If set, shaper is configured as PIR",
    "fields": [
      [
        "oqse_eir_pir_shaper",
        0,
        32
      ]
    ]
  },
  "sch_oqse_cir_token_bucket": {
    "type": "memory",
    "block": "sch",
    "width": 10,
    "desc": "Value of the token bucket shaper, entry per OQSE",
    "fields": [
      [
        "oqse_cir_token_bucket_value",
        0,
        10
      ]
    ]
  },
  "sch_oqse_eir_token_bucket": {
    "type": "memory",
    "block": "sch",
    "width": 10,
    "desc": "Value of the token bucket shaper, entry per OQSE",
    "fields": [
      [
        "oqse_eir_token_bucket_value",
        0,
        10
      ]
    ]
  },
  "sch_oqse_cir_token_bucket_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 19,
    "desc": "Token Bucket Configuration - defines ratio of LpseCirShaperRate that will be allocated to each OQSE CIR. Ratio configuration = Sum(RateMantissa[i]*(1/2^((i+1) << RateExponent)",
    "fields": [
      [
        "oqse_cir_rate_mantissa",
        0,
        5
      ],
      [
        "oqse_cir_rate_exponent",
        5,
        5
      ],
      [
        "oqse_cir_max_bucket_value",
        10,
        9
      ]
    ]
  },
  "sch_oqse_eir_token_bucket_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 19,
    "desc": "Token Bucket Configuration - defines ratio of LpseEirShaperRate that will be allocated to each OQSE EIR. Ratio configuration = Sum(RateMantissa[i]*(1/2^((i+1) << RateExponent)",
    "fields": [
      [
        "oqse_eir_rate_mantissa",
        0,
        5
      ],
      [
        "oqse_eir_rate_exponent",
        5,
        5
      ],
      [
        "oqse_eir_max_bucket_value",
        10,
        9
      ]
    ]
  },
  "sch_oqse_cir_token_bucket_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 12,
    "desc": "Token Bucket Linked List used for OQSE shaper",
    "fields": [
      [
        "oqse_cir_tb_link_pointer",
        0,
        12
      ]
    ]
  },
  "sch_oqse_eir_token_bucket_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 12,
    "desc": "Token Bucket Linked List used for OQSE shaper",
    "fields": [
      [
        "oqse_eir_tb_link_pointer",
        0,
        12
      ]
    ]
  },
  "sch_oqse_cir_linked_flag": {
    "type": "memory",
    "block": "sch",
    "width": 16,
    "desc": "OQSE CIR component credit grant Link List entry is valid",
    "fields": [
      [
        "oqse_cir_ll_bitmap",
        0,
        16
      ]
    ]
  },
  "sch_oqse_eir_linked_flag": {
    "type": "memory",
    "block": "sch",
    "width": 16,
    "desc": "OQSE EIR component credit grant Link List entry is valid",
    "fields": [
      [
        "oqse_eir_ll_bitmap",
        0,
        16
      ]
    ]
  },
  "sch_oqse_cir_token_bucket_empty": {
    "type": "memory",
    "block": "sch",
    "width": 16,
    "desc": "Token Bucket empty indication, bit per OQSE",
    "fields": [
      [
        "oqse_cir_token_bucket_empty_flag",
        0,
        16
      ]
    ]
  },
  "sch_oqse_eir_token_bucket_empty": {
    "type": "memory",
    "block": "sch",
    "width": 16,
    "desc": "Token Bucket empty indication, bit per OQSE",
    "fields": [
      [
        "oqse_eir_token_bucket_empty_flag",
        0,
        16
      ]
    ]
  },
  "sch_oqse_map_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 11,
    "desc": "OQSE mapping to LPSE",
    "fields": [
      [
        "lpse_id",
        0,
        5
      ],
      [
        "oqse_cir_wfq_weight_index",
        5,
        3
      ],
      [
        "oqse_eir_wfq_weight_index",
        8,
        3
      ]
    ]
  },
  "sch_lpse_wfq_weight_map": {
    "type": "memory",
    "block": "sch",
    "width": 128,
    "desc": "Definition of WFQ weights of LPSEs. Valid values are 1 to 255",
    "fields": [
      [
        "lpse_cir_weight0",
        0,
        8
      ],
      [
        "lpse_cir_weight1",
        8,
        8
      ],
      [
        "lpse_cir_weight2",
        16,
        8
      ],
      [
        "lpse_cir_weight3",
        24,
        8
      ],
      [
        "lpse_cir_weight4",
        32,
        8
      ],
      [
        "lpse_cir_weight5",
        40,
        8
      ],
      [
        "lpse_cir_weight6",
        48,
        8
      ],
      [
        "lpse_cir_weight7",
        56,
        8
      ],
      [
        "lpse_eir_weight0",
        64,
        8
      ],
      [
        "lpse_eir_weight1",
        72,
        8
      ],
      [
        "lpse_eir_weight2",
        80,
        8
      ],
      [
        "lpse_eir_weight3",
        88,
        8
      ],
      [
        "lpse_eir_weight4",
        96,
        8
      ],
      [
        "lpse_eir_weight5",
        104,
        8
      ],
      [
        "lpse_eir_weight6",
        112,
        8
      ],
      [
        "lpse_eir_weight7",
        120,
        8
      ]
    ]
  },
  "sch_oqse_cir_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 12,
    "desc": "OQSE CIR component credit grant Link List",
    "fields": [
      [
        "oqse_cir_link_pointer",
        0,
        12
      ]
    ]
  },
  "sch_oqse_eir_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 12,
    "desc": "OQSE EIR component credit grant Link List",
    "fields": [
      [
        "oqse_eir_link_pointer",
        0,
        12
      ]
    ]
  },
  "sch_lpse_cir_ll_desc": {
    "type": "memory",
    "block": "sch",
    "width": 504,
    "desc": "LPSE CIR Link list descriptor, entry per LPSE",
    "fields": [
      [
        "lpse_cir_ll0_head0",
        0,
        12
      ],
      [
        "lpse_cir_ll0_head1",
        12,
        12
      ],
      [
        "lpse_cir_ll0_head_position",
        24,
        1
      ],
      [
        "lpse_cir_ll0_tail0",
        25,
        12
      ],
      [
        "lpse_cir_ll0_tail1",
        37,
        12
      ],
      [
        "lpse_cir_ll0_tail_position",
        49,
        1
      ],
      [
        "lpse_cir_ll0_size",
        50,
        13
      ],
      [
        "lpse_cir_ll1_head0",
        63,
        12
      ],
      [
        "lpse_cir_ll1_head1",
        75,
        12
      ],
      [
        "lpse_cir_ll1_head_position",
        87,
        1
      ],
      [
        "lpse_cir_ll1_tail0",
        88,
        12
      ],
      [
        "lpse_cir_ll1_tail1",
        100,
        12
      ],
      [
        "lpse_cir_ll1_tail_position",
        112,
        1
      ],
      [
        "lpse_cir_ll1_size",
        113,
        13
      ],
      [
        "lpse_cir_ll2_head0",
        126,
        12
      ],
      [
        "lpse_cir_ll2_head1",
        138,
        12
      ],
      [
        "lpse_cir_ll2_head_position",
        150,
        1
      ],
      [
        "lpse_cir_ll2_tail0",
        151,
        12
      ],
      [
        "lpse_cir_ll2_tail1",
        163,
        12
      ],
      [
        "lpse_cir_ll2_tail_position",
        175,
        1
      ],
      [
        "lpse_cir_ll2_size",
        176,
        13
      ],
      [
        "lpse_cir_ll3_head0",
        189,
        12
      ],
      [
        "lpse_cir_ll3_head1",
        201,
        12
      ],
      [
        "lpse_cir_ll3_head_position",
        213,
        1
      ],
      [
        "lpse_cir_ll3_tail0",
        214,
        12
      ],
      [
        "lpse_cir_ll3_tail1",
        226,
        12
      ],
      [
        "lpse_cir_ll3_tail_position",
        238,
        1
      ],
      [
        "lpse_cir_ll3_size",
        239,
        13
      ],
      [
        "lpse_cir_ll4_head0",
        252,
        12
      ],
      [
        "lpse_cir_ll4_head1",
        264,
        12
      ],
      [
        "lpse_cir_ll4_head_position",
        276,
        1
      ],
      [
        "lpse_cir_ll4_tail0",
        277,
        12
      ],
      [
        "lpse_cir_ll4_tail1",
        289,
        12
      ],
      [
        "lpse_cir_ll4_tail_position",
        301,
        1
      ],
      [
        "lpse_cir_ll4_size",
        302,
        13
      ],
      [
        "lpse_cir_ll5_head0",
        315,
        12
      ],
      [
        "lpse_cir_ll5_head1",
        327,
        12
      ],
      [
        "lpse_cir_ll5_head_position",
        339,
        1
      ],
      [
        "lpse_cir_ll5_tail0",
        340,
        12
      ],
      [
        "lpse_cir_ll5_tail1",
        352,
        12
      ],
      [
        "lpse_cir_ll5_tail_position",
        364,
        1
      ],
      [
        "lpse_cir_ll5_size",
        365,
        13
      ],
      [
        "lpse_cir_ll6_head0",
        378,
        12
      ],
      [
        "lpse_cir_ll6_head1",
        390,
        12
      ],
      [
        "lpse_cir_ll6_head_position",
        402,
        1
      ],
      [
        "lpse_cir_ll6_tail0",
        403,
        12
      ],
      [
        "lpse_cir_ll6_tail1",
        415,
        12
      ],
      [
        "lpse_cir_ll6_tail_position",
        427,
        1
      ],
      [
        "lpse_cir_ll6_size",
        428,
        13
      ],
      [
        "lpse_cir_ll7_head0",
        441,
        12
      ],
      [
        "lpse_cir_ll7_head1",
        453,
        12
      ],
      [
        "lpse_cir_ll7_head_position",
        465,
        1
      ],
      [
        "lpse_cir_ll7_tail0",
        466,
        12
      ],
      [
        "lpse_cir_ll7_tail1",
        478,
        12
      ],
      [
        "lpse_cir_ll7_tail_position",
        490,
        1
      ],
      [
        "lpse_cir_ll7_size",
        491,
        13
      ]
    ]
  },
  "sch_lpse_eir_ll_desc": {
    "type": "memory",
    "block": "sch",
    "width": 504,
    "desc": "Internal LPSE EIR Link list descriptor",
    "fields": [
      [
        "lpse_eir_ll0_head0",
        0,
        12
      ],
      [
        "lpse_eir_ll0_head1",
        12,
        12
      ],
      [
        "lpse_eir_ll0_head_position",
        24,
        1
      ],
      [
        "lpse_eir_ll0_tail0",
        25,
        12
      ],
      [
        "lpse_eir_ll0_tail1",
        37,
        12
      ],
      [
        "lpse_eir_ll0_tail_position",
        49,
        1
      ],
      [
        "lpse_eir_ll0_size",
        50,
        13
      ],
      [
        "lpse_eir_ll1_head0",
        63,
        12
      ],
      [
        "lpse_eir_ll1_head1",
        75,
        12
      ],
      [
        "lpse_eir_ll1_head_position",
        87,
        1
      ],
      [
        "lpse_eir_ll1_tail0",
        88,
        12
      ],
      [
        "lpse_eir_ll1_tail1",
        100,
        12
      ],
      [
        "lpse_eir_ll1_tail_position",
        112,
        1
      ],
      [
        "lpse_eir_ll1_size",
        113,
        13
      ],
      [
        "lpse_eir_ll2_head0",
        126,
        12
      ],
      [
        "lpse_eir_ll2_head1",
        138,
        12
      ],
      [
        "lpse_eir_ll2_head_position",
        150,
        1
      ],
      [
        "lpse_eir_ll2_tail0",
        151,
        12
      ],
      [
        "lpse_eir_ll2_tail1",
        163,
        12
      ],
      [
        "lpse_eir_ll2_tail_position",
        175,
        1
      ],
      [
        "lpse_eir_ll2_size",
        176,
        13
      ],
      [
        "lpse_eir_ll3_head0",
        189,
        12
      ],
      [
        "lpse_eir_ll3_head1",
        201,
        12
      ],
      [
        "lpse_eir_ll3_head_position",
        213,
        1
      ],
      [
        "lpse_eir_ll3_tail0",
        214,
        12
      ],
      [
        "lpse_eir_ll3_tail1",
        226,
        12
      ],
      [
        "lpse_eir_ll3_tail_position",
        238,
        1
      ],
      [
        "lpse_eir_ll3_size",
        239,
        13
      ],
      [
        "lpse_eir_ll4_head0",
        252,
        12
      ],
      [
        "lpse_eir_ll4_head1",
        264,
        12
      ],
      [
        "lpse_eir_ll4_head_position",
        276,
        1
      ],
      [
        "lpse_eir_ll4_tail0",
        277,
        12
      ],
      [
        "lpse_eir_ll4_tail1",
        289,
        12
      ],
      [
        "lpse_eir_ll4_tail_position",
        301,
        1
      ],
      [
        "lpse_eir_ll4_size",
        302,
        13
      ],
      [
        "lpse_eir_ll5_head0",
        315,
        12
      ],
      [
        "lpse_eir_ll5_head1",
        327,
        12
      ],
      [
        "lpse_eir_ll5_head_position",
        339,
        1
      ],
      [
        "lpse_eir_ll5_tail0",
        340,
        12
      ],
      [
        "lpse_eir_ll5_tail1",
        352,
        12
      ],
      [
        "lpse_eir_ll5_tail_position",
        364,
        1
      ],
      [
        "lpse_eir_ll5_size",
        365,
        13
      ],
      [
        "lpse_eir_ll6_head0",
        378,
        12
      ],
      [
        "lpse_eir_ll6_head1",
        390,
        12
      ],
      [
        "lpse_eir_ll6_head_position",
        402,
        1
      ],
      [
        "lpse_eir_ll6_tail0",
        403,
        12
      ],
      [
        "lpse_eir_ll6_tail1",
        415,
        12
      ],
      [
        "lpse_eir_ll6_tail_position",
        427,
        1
      ],
      [
        "lpse_eir_ll6_size",
        428,
        13
      ],
      [
        "lpse_eir_ll7_head0",
        441,
        12
      ],
      [
        "lpse_eir_ll7_head1",
        453,
        12
      ],
      [
        "lpse_eir_ll7_head_position",
        465,
        1
      ],
      [
        "lpse_eir_ll7_tail0",
        466,
        12
      ],
      [
        "lpse_eir_ll7_tail1",
        478,
        12
      ],
      [
        "lpse_eir_ll7_tail_position",
        490,
        1
      ],
      [
        "lpse_eir_ll7_size",
        491,
        13
      ]
    ]
  },
  "sch_lpse_wfq_desc": {
    "type": "memory",
    "block": "sch",
    "width": 184,
    "desc": "LPSE WFQ descriptor, entry per LPSE",
    "fields": [
      [
        "lpse_cir_ll0_priority",
        0,
        10
      ],
      [
        "lpse_cir_ll1_priority",
        10,
        10
      ],
      [
        "lpse_cir_ll2_priority",
        20,
        10
      ],
      [
        "lpse_cir_ll3_priority",
        30,
        10
      ],
      [
        "lpse_cir_ll4_priority",
        40,
        10
      ],
      [
        "lpse_cir_ll5_priority",
        50,
        10
      ],
      [
        "lpse_cir_ll6_priority",
        60,
        10
      ],
      [
        "lpse_cir_ll7_priority",
        70,
        10
      ],
      [
        "lpse_cir_ll_service_length",
        80,
        12
      ],
      [
        "lpse_eir_ll0_priority",
        92,
        10
      ],
      [
        "lpse_eir_ll1_priority",
        102,
        10
      ],
      [
        "lpse_eir_ll2_priority",
        112,
        10
      ],
      [
        "lpse_eir_ll3_priority",
        122,
        10
      ],
      [
        "lpse_eir_ll4_priority",
        132,
        10
      ],
      [
        "lpse_eir_ll5_priority",
        142,
        10
      ],
      [
        "lpse_eir_ll6_priority",
        152,
        10
      ],
      [
        "lpse_eir_ll7_priority",
        162,
        10
      ],
      [
        "lpse_eir_ll_service_length",
        172,
        12
      ]
    ]
  },
  "sch_oq_pir_token_bucket": {
    "type": "memory",
    "block": "sch",
    "width": 10,
    "desc": "Value of the token bucket shaper, entry per OQ",
    "fields": [
      [
        "oq_pir_token_bucket_value",
        0,
        10
      ]
    ]
  },
  "sch_oq_pir_token_bucket_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 19,
    "desc": "Token Bucket Configuration - defines ratio of TpsePirShaperRate that will be allocated to each OQ PIR. Ratio configuration = Sum(RateMantissa[i]*(1/2^((i+1) << RateExponent)",
    "fields": [
      [
        "oq_pir_rate_mantissa",
        0,
        5
      ],
      [
        "oq_pir_rate_exponent",
        5,
        5
      ],
      [
        "oq_pir_max_bucket_value",
        10,
        9
      ]
    ]
  },
  "sch_oq_pir_token_bucket_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 8,
    "desc": "Token Bucket Linked List used for OQ PIR shaper, entry per OQ",
    "fields": [
      [
        "oq_pir_tb_link_pointer",
        0,
        8
      ]
    ]
  },
  "sch_oqpg_cir_token_bucket": {
    "type": "memory",
    "block": "sch",
    "width": 10,
    "desc": "Value of the token bucket shaper, entry per OQPG",
    "fields": [
      [
        "oqpg_cir_token_bucket_value",
        0,
        10
      ]
    ]
  },
  "sch_oqpg_cir_token_bucket_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 19,
    "desc": "Token Bucket Configuration - defines ratio of TpseCirShaperRate that will be allocated to each OQPG CIR. Ratio configuration = Sum(RateMantissa[i]*(1/2^((i+1) << RateExponent)",
    "fields": [
      [
        "oqpg_cir_rate_mantissa",
        0,
        5
      ],
      [
        "oqpg_cir_rate_exponent",
        5,
        5
      ],
      [
        "oqpg_cir_max_bucket_value",
        10,
        9
      ]
    ]
  },
  "sch_oqpg_cir_token_bucket_link_list": {
    "type": "memory",
    "block": "sch",
    "width": 8,
    "desc": "Token Bucket Linked List used for OQPG CIR shaper, entry per OQPG",
    "fields": [
      [
        "oqpg_cir_tb_link_pointer",
        0,
        8
      ]
    ]
  },
  "sch_tpse_wfq_cfg": {
    "type": "memory",
    "block": "sch",
    "width": 48,
    "desc": "Definition of WFQ weights of TPSEs, valid values are 1 to 63",
    "fields": [
      [
        "tpse_wfq_weight0",
        0,
        6
      ],
      [
        "tpse_wfq_weight1",
        6,
        6
      ],
      [
        "tpse_wfq_weight2",
        12,
        6
      ],
      [
        "tpse_wfq_weight3",
        18,
        6
      ],
      [
        "tpse_wfq_weight4",
        24,
        6
      ],
      [
        "tpse_wfq_weight5",
        30,
        6
      ],
      [
        "tpse_wfq_weight6",
        36,
        6
      ],
      [
        "tpse_wfq_weight7",
        42,
        6
      ]
    ]
  },
  "sch_tpse_wfq_rr_desc": {
    "type": "memory",
    "block": "sch",
    "width": 72,
    "desc": "TPSE WFQ descriptor, bit per TPSE",
    "fields": [
      [
        "tpse_wfq_priority0",
        0,
        8
      ],
      [
        "tpse_wfq_priority1",
        8,
        8
      ],
      [
        "tpse_wfq_priority2",
        16,
        8
      ],
      [
        "tpse_wfq_priority3",
        24,
        8
      ],
      [
        "tpse_wfq_priority4",
        32,
        8
      ],
      [
        "tpse_wfq_priority5",
        40,
        8
      ],
      [
        "tpse_wfq_priority6",
        48,
        8
      ],
      [
        "tpse_wfq_priority7",
        56,
        8
      ],
      [
        "tpse_rr_last_state",
        64,
        8
      ]
    ]
  },
  "sch_top_interrupt_register": {
    "type": "register",
    "block": "sch_top",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "sch_ifg_interrupt_summary",
        1,
        1
      ]
    ]
  },
  "sch_top_mem_protect_interrupt": {
    "type": "register",
    "block": "sch_top",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "sch_top_mem_protect_interrupt_test": {
    "type": "register",
    "block": "sch_top",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "sch_top_broadcast_config_reg": {
    "type": "register",
    "block": "sch_top",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "sch_top_memory_prot_bypass": {
    "type": "register",
    "block": "sch_top",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "sch_top_soft_reset_configuration": {
    "type": "register",
    "block": "sch_top",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "sch_top_mbist_configuration": {
    "type": "register",
    "block": "sch_top",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "sch_top_power_down_configuration": {
    "type": "register",
    "block": "sch_top",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "sch_top_spare_reg": {
    "type": "register",
    "block": "sch_top",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "sch_top_pmro_ctrl": {
    "type": "register",
    "block": "sch_top",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "sch_top_pmro_status": {
    "type": "register",
    "block": "sch_top",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "sch_top_mirror_bus_conf_reg": {
    "type": "register",
    "block": "sch_top",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "sch_top_mirror_bus_status": {
    "type": "register",
    "block": "sch_top",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "sch_top_device_time_offset_cfg": {
    "type": "register",
    "block": "sch_top",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "sch_top_sch_ifg_interrupt": {
    "type": "register",
    "block": "sch_top",
    "width": 12,
    "desc": "Per SCH IFG interrupt register",
    "fields": [
      [
        "ifg0_interrupt",
        0,
        1
      ],
      [
        "ifg1_interrupt",
        1,
        1
      ],
      [
        "ifg2_interrupt",
        2,
        1
      ],
      [
        "ifg3_interrupt",
        3,
        1
      ],
      [
        "ifg4_interrupt",
        4,
        1
      ],
      [
        "ifg5_interrupt",
        5,
        1
      ],
      [
        "ifg6_interrupt",
        6,
        1
      ],
      [
        "ifg7_interrupt",
        7,
        1
      ],
      [
        "ifg8_interrupt",
        8,
        1
      ],
      [
        "ifg9_interrupt",
        9,
        1
      ],
      [
        "ifg10_interrupt",
        10,
        1
      ],
      [
        "ifg11_interrupt",
        11,
        1
      ]
    ]
  },
  "sch_top_sch_ifg_interrupt_mask": {
    "type": "register",
    "block": "sch_top",
    "width": 12,
    "desc": "This register masks SchIfgInterrupt interrupt register",
    "fields": [
      [
        "ifg0_interrupt_mask",
        0,
        1
      ],
      [
        "ifg1_interrupt_mask",
        1,
        1
      ],
      [
        "ifg2_interrupt_mask",
        2,
        1
      ],
      [
        "ifg3_interrupt_mask",
        3,
        1
      ],
      [
        "ifg4_interrupt_mask",
        4,
        1
      ],
      [
        "ifg5_interrupt_mask",
        5,
        1
      ],
      [
        "ifg6_interrupt_mask",
        6,
        1
      ],
      [
        "ifg7_interrupt_mask",
        7,
        1
      ],
      [
        "ifg8_interrupt_mask",
        8,
        1
      ],
      [
        "ifg9_interrupt_mask",
        9,
        1
      ],
      [
        "ifg10_interrupt_mask",
        10,
        1
      ],
      [
        "ifg11_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "sch_top_sch_ifg_interrupt_test": {
    "type": "register",
    "block": "sch_top",
    "width": 12,
    "desc": "This register tests SchIfgInterrupt interrupt register",
    "fields": [
      [
        "ifg0_interrupt_test",
        0,
        1
      ],
      [
        "ifg1_interrupt_test",
        1,
        1
      ],
      [
        "ifg2_interrupt_test",
        2,
        1
      ],
      [
        "ifg3_interrupt_test",
        3,
        1
      ],
      [
        "ifg4_interrupt_test",
        4,
        1
      ],
      [
        "ifg5_interrupt_test",
        5,
        1
      ],
      [
        "ifg6_interrupt_test",
        6,
        1
      ],
      [
        "ifg7_interrupt_test",
        7,
        1
      ],
      [
        "ifg8_interrupt_test",
        8,
        1
      ],
      [
        "ifg9_interrupt_test",
        9,
        1
      ],
      [
        "ifg10_interrupt_test",
        10,
        1
      ],
      [
        "ifg11_interrupt_test",
        11,
        1
      ]
    ]
  },
  "sch_top_frl_valid_links_mapping": {
    "type": "register",
    "block": "sch_top",
    "width": 130,
    "desc": "Fabric Rate Limiter Valid Links Mapping",
    "fields": [
      [
        "valid_links_map",
        0,
        130
      ]
    ]
  },
  "sch_top_frl_congested_links_mapping": {
    "type": "register",
    "block": "sch_top",
    "width": 130,
    "desc": "Fabric Rate Limiter Congested Links Mapping",
    "fields": [
      [
        "congested_links_map",
        0,
        130
      ]
    ]
  },
  "sch_top_frl_rate_mapping": {
    "type": "register",
    "block": "sch_top",
    "width": 127,
    "desc": "Fabric Rate Limiter rate mappings",
    "fields": [
      [
        "fabric_rate_limiter_enable",
        0,
        1
      ],
      [
        "eligible_links_map",
        1,
        32
      ],
      [
        "num_links_to_rate_map",
        33,
        56
      ],
      [
        "num_links_to_max_bucket_map",
        89,
        28
      ],
      [
        "network_sch_bitmap",
        117,
        10
      ]
    ]
  },
  "sch_top_frl_debug": {
    "type": "register",
    "block": "sch_top",
    "width": 15,
    "desc": "Fabric rate limiter debug indications",
    "fields": [
      [
        "frm_global_congestion",
        0,
        1
      ],
      [
        "frm_congested_links_wmk",
        1,
        7
      ],
      [
        "frm_active_links_wmk",
        8,
        7
      ]
    ]
  },
  "sms_main_interrupt_register": {
    "type": "register",
    "block": "sms_main",
    "width": 19,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "sms_cgm_error_reg_summary",
        1,
        1
      ],
      [
        "sms_out_of_buffer_error_reg_summary",
        2,
        1
      ],
      [
        "sms_req_fifo_ovf_reg_summary",
        3,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg0_summary",
        4,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg1_summary",
        5,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg2_summary",
        6,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg3_summary",
        7,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg4_summary",
        8,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg5_summary",
        9,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg6_summary",
        10,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg7_summary",
        11,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg8_summary",
        12,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg9_summary",
        13,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg10_summary",
        14,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg11_summary",
        15,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg12_summary",
        16,
        1
      ],
      [
        "sms_out_of_bank_write_interrupt_reg13_summary",
        17,
        1
      ],
      [
        "sms_interrupt_reg_summary",
        18,
        1
      ]
    ]
  },
  "sms_main_mem_protect_interrupt": {
    "type": "register",
    "block": "sms_main",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "sms_main_mem_protect_interrupt_test": {
    "type": "register",
    "block": "sms_main",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "sms_main_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "sms_main",
    "width": 50,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "mem_free_buf_man0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mem_free_buf_man1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "mem_free_buf_man2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mem_free_buf_man3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mem_free_buf_man4_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "mem_free_buf_man5_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "mem_free_buf_man6_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "mem_free_buf_man7_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "mem_free_buf_man8_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mem_free_buf_man9_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "mem_free_buf_man10_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "mem_free_buf_man11_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mem_free_buf_man12_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mem_free_buf_man13_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mem_free_buf_man14_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "mem_free_buf_man15_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "mem_free_buf_man16_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "mem_free_buf_man17_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "mem_free_buf_man18_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "mem_free_buf_man19_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "mem_free_buf_man20_ecc_1b_err_interrupt_mask",
        20,
        1
      ],
      [
        "mem_free_buf_man21_ecc_1b_err_interrupt_mask",
        21,
        1
      ],
      [
        "mem_free_buf_man22_ecc_1b_err_interrupt_mask",
        22,
        1
      ],
      [
        "mem_free_buf_man23_ecc_1b_err_interrupt_mask",
        23,
        1
      ],
      [
        "mem_free_buf_man24_ecc_1b_err_interrupt_mask",
        24,
        1
      ],
      [
        "mem_free_buf_man25_ecc_1b_err_interrupt_mask",
        25,
        1
      ],
      [
        "mem_free_buf_man26_ecc_1b_err_interrupt_mask",
        26,
        1
      ],
      [
        "mem_free_buf_man27_ecc_1b_err_interrupt_mask",
        27,
        1
      ],
      [
        "mem_free_buf_man28_ecc_1b_err_interrupt_mask",
        28,
        1
      ],
      [
        "mem_free_buf_man29_ecc_1b_err_interrupt_mask",
        29,
        1
      ],
      [
        "mem_free_buf_man30_ecc_1b_err_interrupt_mask",
        30,
        1
      ],
      [
        "mem_free_buf_man31_ecc_1b_err_interrupt_mask",
        31,
        1
      ],
      [
        "mem_free_buf_man32_ecc_1b_err_interrupt_mask",
        32,
        1
      ],
      [
        "mem_free_buf_man33_ecc_1b_err_interrupt_mask",
        33,
        1
      ],
      [
        "mem_free_buf_man34_ecc_1b_err_interrupt_mask",
        34,
        1
      ],
      [
        "mem_free_buf_man35_ecc_1b_err_interrupt_mask",
        35,
        1
      ],
      [
        "mem_free_buf_mma0_ecc_1b_err_interrupt_mask",
        36,
        1
      ],
      [
        "mem_free_buf_mma1_ecc_1b_err_interrupt_mask",
        37,
        1
      ],
      [
        "mem_free_buf_mma2_ecc_1b_err_interrupt_mask",
        38,
        1
      ],
      [
        "mem_free_buf_mma3_ecc_1b_err_interrupt_mask",
        39,
        1
      ],
      [
        "mem_free_buf_mma4_ecc_1b_err_interrupt_mask",
        40,
        1
      ],
      [
        "mem_free_buf_mma5_ecc_1b_err_interrupt_mask",
        41,
        1
      ],
      [
        "mem_free_buf_mma6_ecc_1b_err_interrupt_mask",
        42,
        1
      ],
      [
        "mem_free_buf_mma7_ecc_1b_err_interrupt_mask",
        43,
        1
      ],
      [
        "mem_free_buf_mma8_ecc_1b_err_interrupt_mask",
        44,
        1
      ],
      [
        "mem_free_buf_mma9_ecc_1b_err_interrupt_mask",
        45,
        1
      ],
      [
        "mem_free_buf_mma10_ecc_1b_err_interrupt_mask",
        46,
        1
      ],
      [
        "mem_free_buf_mma11_ecc_1b_err_interrupt_mask",
        47,
        1
      ],
      [
        "mem_free_buf_mma12_ecc_1b_err_interrupt_mask",
        48,
        1
      ],
      [
        "mem_free_buf_mma13_ecc_1b_err_interrupt_mask",
        49,
        1
      ]
    ]
  },
  "sms_main_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "sms_main",
    "width": 50,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "mem_free_buf_man0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mem_free_buf_man1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "mem_free_buf_man2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mem_free_buf_man3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mem_free_buf_man4_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "mem_free_buf_man5_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "mem_free_buf_man6_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "mem_free_buf_man7_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "mem_free_buf_man8_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mem_free_buf_man9_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "mem_free_buf_man10_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "mem_free_buf_man11_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mem_free_buf_man12_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mem_free_buf_man13_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mem_free_buf_man14_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "mem_free_buf_man15_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "mem_free_buf_man16_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "mem_free_buf_man17_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "mem_free_buf_man18_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "mem_free_buf_man19_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "mem_free_buf_man20_ecc_2b_err_interrupt_mask",
        20,
        1
      ],
      [
        "mem_free_buf_man21_ecc_2b_err_interrupt_mask",
        21,
        1
      ],
      [
        "mem_free_buf_man22_ecc_2b_err_interrupt_mask",
        22,
        1
      ],
      [
        "mem_free_buf_man23_ecc_2b_err_interrupt_mask",
        23,
        1
      ],
      [
        "mem_free_buf_man24_ecc_2b_err_interrupt_mask",
        24,
        1
      ],
      [
        "mem_free_buf_man25_ecc_2b_err_interrupt_mask",
        25,
        1
      ],
      [
        "mem_free_buf_man26_ecc_2b_err_interrupt_mask",
        26,
        1
      ],
      [
        "mem_free_buf_man27_ecc_2b_err_interrupt_mask",
        27,
        1
      ],
      [
        "mem_free_buf_man28_ecc_2b_err_interrupt_mask",
        28,
        1
      ],
      [
        "mem_free_buf_man29_ecc_2b_err_interrupt_mask",
        29,
        1
      ],
      [
        "mem_free_buf_man30_ecc_2b_err_interrupt_mask",
        30,
        1
      ],
      [
        "mem_free_buf_man31_ecc_2b_err_interrupt_mask",
        31,
        1
      ],
      [
        "mem_free_buf_man32_ecc_2b_err_interrupt_mask",
        32,
        1
      ],
      [
        "mem_free_buf_man33_ecc_2b_err_interrupt_mask",
        33,
        1
      ],
      [
        "mem_free_buf_man34_ecc_2b_err_interrupt_mask",
        34,
        1
      ],
      [
        "mem_free_buf_man35_ecc_2b_err_interrupt_mask",
        35,
        1
      ],
      [
        "mem_free_buf_mma0_ecc_2b_err_interrupt_mask",
        36,
        1
      ],
      [
        "mem_free_buf_mma1_ecc_2b_err_interrupt_mask",
        37,
        1
      ],
      [
        "mem_free_buf_mma2_ecc_2b_err_interrupt_mask",
        38,
        1
      ],
      [
        "mem_free_buf_mma3_ecc_2b_err_interrupt_mask",
        39,
        1
      ],
      [
        "mem_free_buf_mma4_ecc_2b_err_interrupt_mask",
        40,
        1
      ],
      [
        "mem_free_buf_mma5_ecc_2b_err_interrupt_mask",
        41,
        1
      ],
      [
        "mem_free_buf_mma6_ecc_2b_err_interrupt_mask",
        42,
        1
      ],
      [
        "mem_free_buf_mma7_ecc_2b_err_interrupt_mask",
        43,
        1
      ],
      [
        "mem_free_buf_mma8_ecc_2b_err_interrupt_mask",
        44,
        1
      ],
      [
        "mem_free_buf_mma9_ecc_2b_err_interrupt_mask",
        45,
        1
      ],
      [
        "mem_free_buf_mma10_ecc_2b_err_interrupt_mask",
        46,
        1
      ],
      [
        "mem_free_buf_mma11_ecc_2b_err_interrupt_mask",
        47,
        1
      ],
      [
        "mem_free_buf_mma12_ecc_2b_err_interrupt_mask",
        48,
        1
      ],
      [
        "mem_free_buf_mma13_ecc_2b_err_interrupt_mask",
        49,
        1
      ]
    ]
  },
  "sms_main_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "sms_main",
    "width": 50,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "mem_free_buf_man0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "mem_free_buf_man1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "mem_free_buf_man2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "mem_free_buf_man3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "mem_free_buf_man4_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "mem_free_buf_man5_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "mem_free_buf_man6_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "mem_free_buf_man7_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "mem_free_buf_man8_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "mem_free_buf_man9_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "mem_free_buf_man10_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "mem_free_buf_man11_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "mem_free_buf_man12_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "mem_free_buf_man13_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "mem_free_buf_man14_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "mem_free_buf_man15_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "mem_free_buf_man16_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "mem_free_buf_man17_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "mem_free_buf_man18_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "mem_free_buf_man19_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "mem_free_buf_man20_ecc_1b_err_initiate",
        20,
        1
      ],
      [
        "mem_free_buf_man21_ecc_1b_err_initiate",
        21,
        1
      ],
      [
        "mem_free_buf_man22_ecc_1b_err_initiate",
        22,
        1
      ],
      [
        "mem_free_buf_man23_ecc_1b_err_initiate",
        23,
        1
      ],
      [
        "mem_free_buf_man24_ecc_1b_err_initiate",
        24,
        1
      ],
      [
        "mem_free_buf_man25_ecc_1b_err_initiate",
        25,
        1
      ],
      [
        "mem_free_buf_man26_ecc_1b_err_initiate",
        26,
        1
      ],
      [
        "mem_free_buf_man27_ecc_1b_err_initiate",
        27,
        1
      ],
      [
        "mem_free_buf_man28_ecc_1b_err_initiate",
        28,
        1
      ],
      [
        "mem_free_buf_man29_ecc_1b_err_initiate",
        29,
        1
      ],
      [
        "mem_free_buf_man30_ecc_1b_err_initiate",
        30,
        1
      ],
      [
        "mem_free_buf_man31_ecc_1b_err_initiate",
        31,
        1
      ],
      [
        "mem_free_buf_man32_ecc_1b_err_initiate",
        32,
        1
      ],
      [
        "mem_free_buf_man33_ecc_1b_err_initiate",
        33,
        1
      ],
      [
        "mem_free_buf_man34_ecc_1b_err_initiate",
        34,
        1
      ],
      [
        "mem_free_buf_man35_ecc_1b_err_initiate",
        35,
        1
      ],
      [
        "mem_free_buf_mma0_ecc_1b_err_initiate",
        36,
        1
      ],
      [
        "mem_free_buf_mma1_ecc_1b_err_initiate",
        37,
        1
      ],
      [
        "mem_free_buf_mma2_ecc_1b_err_initiate",
        38,
        1
      ],
      [
        "mem_free_buf_mma3_ecc_1b_err_initiate",
        39,
        1
      ],
      [
        "mem_free_buf_mma4_ecc_1b_err_initiate",
        40,
        1
      ],
      [
        "mem_free_buf_mma5_ecc_1b_err_initiate",
        41,
        1
      ],
      [
        "mem_free_buf_mma6_ecc_1b_err_initiate",
        42,
        1
      ],
      [
        "mem_free_buf_mma7_ecc_1b_err_initiate",
        43,
        1
      ],
      [
        "mem_free_buf_mma8_ecc_1b_err_initiate",
        44,
        1
      ],
      [
        "mem_free_buf_mma9_ecc_1b_err_initiate",
        45,
        1
      ],
      [
        "mem_free_buf_mma10_ecc_1b_err_initiate",
        46,
        1
      ],
      [
        "mem_free_buf_mma11_ecc_1b_err_initiate",
        47,
        1
      ],
      [
        "mem_free_buf_mma12_ecc_1b_err_initiate",
        48,
        1
      ],
      [
        "mem_free_buf_mma13_ecc_1b_err_initiate",
        49,
        1
      ]
    ]
  },
  "sms_main_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "sms_main",
    "width": 50,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "mem_free_buf_man0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "mem_free_buf_man1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "mem_free_buf_man2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "mem_free_buf_man3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "mem_free_buf_man4_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "mem_free_buf_man5_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "mem_free_buf_man6_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "mem_free_buf_man7_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "mem_free_buf_man8_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "mem_free_buf_man9_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "mem_free_buf_man10_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "mem_free_buf_man11_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "mem_free_buf_man12_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "mem_free_buf_man13_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "mem_free_buf_man14_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "mem_free_buf_man15_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "mem_free_buf_man16_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "mem_free_buf_man17_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "mem_free_buf_man18_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "mem_free_buf_man19_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "mem_free_buf_man20_ecc_2b_err_initiate",
        20,
        1
      ],
      [
        "mem_free_buf_man21_ecc_2b_err_initiate",
        21,
        1
      ],
      [
        "mem_free_buf_man22_ecc_2b_err_initiate",
        22,
        1
      ],
      [
        "mem_free_buf_man23_ecc_2b_err_initiate",
        23,
        1
      ],
      [
        "mem_free_buf_man24_ecc_2b_err_initiate",
        24,
        1
      ],
      [
        "mem_free_buf_man25_ecc_2b_err_initiate",
        25,
        1
      ],
      [
        "mem_free_buf_man26_ecc_2b_err_initiate",
        26,
        1
      ],
      [
        "mem_free_buf_man27_ecc_2b_err_initiate",
        27,
        1
      ],
      [
        "mem_free_buf_man28_ecc_2b_err_initiate",
        28,
        1
      ],
      [
        "mem_free_buf_man29_ecc_2b_err_initiate",
        29,
        1
      ],
      [
        "mem_free_buf_man30_ecc_2b_err_initiate",
        30,
        1
      ],
      [
        "mem_free_buf_man31_ecc_2b_err_initiate",
        31,
        1
      ],
      [
        "mem_free_buf_man32_ecc_2b_err_initiate",
        32,
        1
      ],
      [
        "mem_free_buf_man33_ecc_2b_err_initiate",
        33,
        1
      ],
      [
        "mem_free_buf_man34_ecc_2b_err_initiate",
        34,
        1
      ],
      [
        "mem_free_buf_man35_ecc_2b_err_initiate",
        35,
        1
      ],
      [
        "mem_free_buf_mma0_ecc_2b_err_initiate",
        36,
        1
      ],
      [
        "mem_free_buf_mma1_ecc_2b_err_initiate",
        37,
        1
      ],
      [
        "mem_free_buf_mma2_ecc_2b_err_initiate",
        38,
        1
      ],
      [
        "mem_free_buf_mma3_ecc_2b_err_initiate",
        39,
        1
      ],
      [
        "mem_free_buf_mma4_ecc_2b_err_initiate",
        40,
        1
      ],
      [
        "mem_free_buf_mma5_ecc_2b_err_initiate",
        41,
        1
      ],
      [
        "mem_free_buf_mma6_ecc_2b_err_initiate",
        42,
        1
      ],
      [
        "mem_free_buf_mma7_ecc_2b_err_initiate",
        43,
        1
      ],
      [
        "mem_free_buf_mma8_ecc_2b_err_initiate",
        44,
        1
      ],
      [
        "mem_free_buf_mma9_ecc_2b_err_initiate",
        45,
        1
      ],
      [
        "mem_free_buf_mma10_ecc_2b_err_initiate",
        46,
        1
      ],
      [
        "mem_free_buf_mma11_ecc_2b_err_initiate",
        47,
        1
      ],
      [
        "mem_free_buf_mma12_ecc_2b_err_initiate",
        48,
        1
      ],
      [
        "mem_free_buf_mma13_ecc_2b_err_initiate",
        49,
        1
      ]
    ]
  },
  "sms_main_mem_protect_err_status": {
    "type": "register",
    "block": "sms_main",
    "width": 50,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "mem_free_buf_man0_err_int",
        0,
        1
      ],
      [
        "mem_free_buf_man1_err_int",
        1,
        1
      ],
      [
        "mem_free_buf_man2_err_int",
        2,
        1
      ],
      [
        "mem_free_buf_man3_err_int",
        3,
        1
      ],
      [
        "mem_free_buf_man4_err_int",
        4,
        1
      ],
      [
        "mem_free_buf_man5_err_int",
        5,
        1
      ],
      [
        "mem_free_buf_man6_err_int",
        6,
        1
      ],
      [
        "mem_free_buf_man7_err_int",
        7,
        1
      ],
      [
        "mem_free_buf_man8_err_int",
        8,
        1
      ],
      [
        "mem_free_buf_man9_err_int",
        9,
        1
      ],
      [
        "mem_free_buf_man10_err_int",
        10,
        1
      ],
      [
        "mem_free_buf_man11_err_int",
        11,
        1
      ],
      [
        "mem_free_buf_man12_err_int",
        12,
        1
      ],
      [
        "mem_free_buf_man13_err_int",
        13,
        1
      ],
      [
        "mem_free_buf_man14_err_int",
        14,
        1
      ],
      [
        "mem_free_buf_man15_err_int",
        15,
        1
      ],
      [
        "mem_free_buf_man16_err_int",
        16,
        1
      ],
      [
        "mem_free_buf_man17_err_int",
        17,
        1
      ],
      [
        "mem_free_buf_man18_err_int",
        18,
        1
      ],
      [
        "mem_free_buf_man19_err_int",
        19,
        1
      ],
      [
        "mem_free_buf_man20_err_int",
        20,
        1
      ],
      [
        "mem_free_buf_man21_err_int",
        21,
        1
      ],
      [
        "mem_free_buf_man22_err_int",
        22,
        1
      ],
      [
        "mem_free_buf_man23_err_int",
        23,
        1
      ],
      [
        "mem_free_buf_man24_err_int",
        24,
        1
      ],
      [
        "mem_free_buf_man25_err_int",
        25,
        1
      ],
      [
        "mem_free_buf_man26_err_int",
        26,
        1
      ],
      [
        "mem_free_buf_man27_err_int",
        27,
        1
      ],
      [
        "mem_free_buf_man28_err_int",
        28,
        1
      ],
      [
        "mem_free_buf_man29_err_int",
        29,
        1
      ],
      [
        "mem_free_buf_man30_err_int",
        30,
        1
      ],
      [
        "mem_free_buf_man31_err_int",
        31,
        1
      ],
      [
        "mem_free_buf_man32_err_int",
        32,
        1
      ],
      [
        "mem_free_buf_man33_err_int",
        33,
        1
      ],
      [
        "mem_free_buf_man34_err_int",
        34,
        1
      ],
      [
        "mem_free_buf_man35_err_int",
        35,
        1
      ],
      [
        "mem_free_buf_mma0_err_int",
        36,
        1
      ],
      [
        "mem_free_buf_mma1_err_int",
        37,
        1
      ],
      [
        "mem_free_buf_mma2_err_int",
        38,
        1
      ],
      [
        "mem_free_buf_mma3_err_int",
        39,
        1
      ],
      [
        "mem_free_buf_mma4_err_int",
        40,
        1
      ],
      [
        "mem_free_buf_mma5_err_int",
        41,
        1
      ],
      [
        "mem_free_buf_mma6_err_int",
        42,
        1
      ],
      [
        "mem_free_buf_mma7_err_int",
        43,
        1
      ],
      [
        "mem_free_buf_mma8_err_int",
        44,
        1
      ],
      [
        "mem_free_buf_mma9_err_int",
        45,
        1
      ],
      [
        "mem_free_buf_mma10_err_int",
        46,
        1
      ],
      [
        "mem_free_buf_mma11_err_int",
        47,
        1
      ],
      [
        "mem_free_buf_mma12_err_int",
        48,
        1
      ],
      [
        "mem_free_buf_mma13_err_int",
        49,
        1
      ]
    ]
  },
  "sms_main_selected_ser_error_info": {
    "type": "register",
    "block": "sms_main",
    "width": 13,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        11
      ],
      [
        "mem_err_type",
        11,
        2
      ]
    ]
  },
  "sms_main_ser_error_debug_configuration": {
    "type": "register",
    "block": "sms_main",
    "width": 7,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        6
      ],
      [
        "reset_memory_errors",
        6,
        1
      ]
    ]
  },
  "sms_main_ecc_1b_err_debug": {
    "type": "register",
    "block": "sms_main",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "sms_main_ecc_2b_err_debug": {
    "type": "register",
    "block": "sms_main",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "sms_main_counter_timer": {
    "type": "register",
    "block": "sms_main",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "sms_main_counter_timer_trigger_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "sms_main_memory_access_timeout": {
    "type": "register",
    "block": "sms_main",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "sms_main_broadcast_config_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "sms_main_memory_prot_bypass": {
    "type": "register",
    "block": "sms_main",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "sms_main_soft_reset_configuration": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "sms_main_mbist_configuration": {
    "type": "register",
    "block": "sms_main",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "sms_main_power_down_configuration": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "sms_main_spare_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "sms_main_pmro_ctrl": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "sms_main_pmro_status": {
    "type": "register",
    "block": "sms_main",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "sms_main_mirror_bus_conf_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "sms_main_mirror_bus_status": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "sms_main_device_time_offset_cfg": {
    "type": "register",
    "block": "sms_main",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "sms_main_usc_init_done_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "SMS user count memory init done indication",
    "fields": [
      [
        "usc_init_done",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_fbm_mma_almost_full_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 6,
    "desc": "SMS fbm mma FIFO almost full threshold configuration",
    "fields": [
      [
        "sms_fbm_mma_almost_full",
        0,
        6
      ]
    ]
  },
  "sms_main_sms_total_free_buff_sum_status_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 19,
    "desc": "SMS free buffers number register",
    "fields": [
      [
        "sms_total_free_buff_sum_status",
        0,
        19
      ]
    ]
  },
  "sms_main_sms_min_total_free_buff_sum_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 19,
    "desc": "SMS free buffers minimal number watermark",
    "fields": [
      [
        "sms_min_total_free_buff_sum",
        0,
        19
      ]
    ]
  },
  "sms_main_sms_cgm_error_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 2,
    "desc": "SMS CGM error interrupt register",
    "fields": [
      [
        "sms_cgm_error",
        0,
        1
      ],
      [
        "sms_cgm_dram_slice_error",
        1,
        1
      ]
    ]
  },
  "sms_main_sms_cgm_error_reg_mask": {
    "type": "register",
    "block": "sms_main",
    "width": 2,
    "desc": "This register masks SmsCgmErrorReg interrupt register",
    "fields": [
      [
        "sms_cgm_error_mask",
        0,
        1
      ],
      [
        "sms_cgm_dram_slice_error_mask",
        1,
        1
      ]
    ]
  },
  "sms_main_sms_cgm_error_reg_test": {
    "type": "register",
    "block": "sms_main",
    "width": 2,
    "desc": "This register tests SmsCgmErrorReg interrupt register",
    "fields": [
      [
        "sms_cgm_error_test",
        0,
        1
      ],
      [
        "sms_cgm_dram_slice_error_test",
        1,
        1
      ]
    ]
  },
  "sms_main_sms_out_of_buffer_error_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "SMS out of buffer error interrupt register",
    "fields": [
      [
        "sms_out_of_buffer_error",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_out_of_buffer_error_reg_mask": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "This register masks SmsOutOfBufferErrorReg interrupt register",
    "fields": [
      [
        "sms_out_of_buffer_error_mask",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_out_of_buffer_error_reg_test": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "This register tests SmsOutOfBufferErrorReg interrupt register",
    "fields": [
      [
        "sms_out_of_buffer_error_test",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_req_fifo_ovf_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "SMS request FIFO overflow interrupt register",
    "fields": [
      [
        "sms_req_fifo_ovf",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_req_fifo_ovf_reg_mask": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "This register masks SmsReqFifoOvfReg interrupt register",
    "fields": [
      [
        "sms_req_fifo_ovf_mask",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_req_fifo_ovf_reg_test": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "This register tests SmsReqFifoOvfReg interrupt register",
    "fields": [
      [
        "sms_req_fifo_ovf_test",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_total_free_buff_status_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 14,
    "desc": "SMS free buffers number per bank register",
    "fields": [
      [
        "sms_total_free_buff_status",
        0,
        14
      ]
    ]
  },
  "sms_main_sms_total_free_buff_minreg": {
    "type": "register",
    "block": "sms_main",
    "width": 14,
    "desc": "SMS free buffers minimal number per bank register",
    "fields": [
      [
        "sms_total_free_buff_min",
        0,
        14
      ]
    ]
  },
  "sms_main_sms_fdoq_fifo_status_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 10,
    "desc": "SMS FDOQ FIFO status register",
    "fields": [
      [
        "sms_fdoq_fifo_status",
        0,
        10
      ]
    ]
  },
  "sms_main_sms_fdoq_fifo_max_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 10,
    "desc": "SMS FDOQ FIFO maximum status register",
    "fields": [
      [
        "sms_fdoq_fifo_max",
        0,
        10
      ]
    ]
  },
  "sms_main_sms_flow_ctrl_cnt_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 64,
    "desc": "SMS flow control counter",
    "fields": [
      [
        "sms_flow_ctrl_cnt",
        0,
        64
      ]
    ]
  },
  "sms_main_recieved_write_error_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "SMS total received write errors counter",
    "fields": [
      [
        "recieved_write_error",
        0,
        32
      ]
    ]
  },
  "sms_main_sms_total_write_error_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "SMS total write errors counter",
    "fields": [
      [
        "sms_total_write_error",
        0,
        32
      ]
    ]
  },
  "sms_main_sms_cgm_write_error_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 64,
    "desc": "SMS CGM write errors counter",
    "fields": [
      [
        "sms_cgm_write_error",
        0,
        32
      ],
      [
        "sms_dram_slice_cgm_write_error",
        32,
        32
      ]
    ]
  },
  "sms_main_sms_out_of_bank_write_error_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "SMS bank out of buffers errors counter",
    "fields": [
      [
        "sms_out_of_bank_write_error",
        0,
        32
      ]
    ]
  },
  "sms_main_sms_out_of_bank_write_interrupt_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "SMS bank out of buffers errors counter",
    "fields": [
      [
        "sms_out_of_bank_write_interrupt",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_out_of_bank_write_interrupt_reg_mask": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "This register masks SmsOutOfBankWriteInterruptReg[14] interrupt register",
    "fields": [
      [
        "sms_out_of_bank_write_interrupt_mask",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_out_of_bank_write_interrupt_reg_test": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "This register tests SmsOutOfBankWriteInterruptReg[14] interrupt register",
    "fields": [
      [
        "sms_out_of_bank_write_interrupt_test",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_read_error_debug_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 64,
    "desc": "SMS read errors debug counter",
    "fields": [
      [
        "sms_read_crc_error",
        0,
        32
      ],
      [
        "sms_read_dont_transmit",
        32,
        32
      ]
    ]
  },
  "sms_main_sms_cgm_thr_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 38,
    "desc": "SMS CGM free buffer threshold configuration",
    "fields": [
      [
        "sms_cgm_thr",
        0,
        19
      ],
      [
        "sms_hbm_cgm_thr",
        19,
        19
      ]
    ]
  },
  "sms_main_sms_fbm_idx_cfg_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 16,
    "desc": "SMS free buffer manager general configuration register ",
    "fields": [
      [
        "sms_fbm_idx_srst",
        0,
        1
      ],
      [
        "sms_fbm_idx_working_mode",
        1,
        1
      ],
      [
        "sms_fbm_idx_total_buffer",
        2,
        14
      ]
    ]
  },
  "sms_main_sms_fbm_num_of_entries_cfg_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 128,
    "desc": "SMS free buffer manager num of entries configuration register ",
    "fields": [
      [
        "sms_fbm_num_of_entries_cfg",
        0,
        128
      ]
    ]
  },
  "sms_main_sms_fbm_total_buffer_init_cfg_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 19,
    "desc": "SMS FBM total buffers init value configuration register ",
    "fields": [
      [
        "sms_fbm_total_buffer_init_cfg",
        0,
        19
      ]
    ]
  },
  "sms_main_sms_buffer_monitor_bank_num_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 6,
    "desc": "SMS bank number for buffer monitoring configuration",
    "fields": [
      [
        "sms_buffer_monitor_bank_num",
        0,
        6
      ]
    ]
  },
  "sms_main_sms_is_fabric_slice_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 6,
    "desc": "Fabric slice mode configuration",
    "fields": [
      [
        "sms_is_fabric_slice_cfg",
        0,
        6
      ]
    ]
  },
  "sms_main_read_latency_monitor_bank_num_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 6,
    "desc": "SMS bank number for read latency monitoring ",
    "fields": [
      [
        "read_latency_monitor_bank_num",
        0,
        6
      ]
    ]
  },
  "sms_main_sms_buffer_monitor_end_to_end_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "SMS buffer timer monitor",
    "fields": [
      [
        "sms_buffer_monitor_end_to_end",
        0,
        32
      ]
    ]
  },
  "sms_main_max_read_latency_monitor_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "Maximum read latency monitor watermark",
    "fields": [
      [
        "max_read_latency_monitor",
        0,
        32
      ]
    ]
  },
  "sms_main_min_read_latency_monitor_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "Minimum read latency monitor watermark",
    "fields": [
      [
        "min_read_latency_monitor",
        0,
        32
      ]
    ]
  },
  "sms_main_cpu_write_config_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 21,
    "desc": "CPU write access configuration",
    "fields": [
      [
        "bank_number",
        0,
        6
      ],
      [
        "address_access",
        6,
        15
      ]
    ]
  },
  "sms_main_cpu_access_enable_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 1,
    "desc": "CPU  access enable register",
    "fields": [
      [
        "cpu_write_access_enable",
        0,
        1
      ]
    ]
  },
  "sms_main_sms_total_write_pkts_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "SMS total write packets counter",
    "fields": [
      [
        "sms_total_write_pkts",
        0,
        32
      ]
    ]
  },
  "sms_main_sms_total_read_pkts_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 32,
    "desc": "SMS total read packets counter",
    "fields": [
      [
        "sms_total_read_pkts",
        0,
        32
      ]
    ]
  },
  "sms_main_sms_interrupt_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 4,
    "desc": "SMS interrupt summary register",
    "fields": [
      [
        "sms_interrupt_quad_0",
        0,
        1
      ],
      [
        "sms_interrupt_quad_1",
        1,
        1
      ],
      [
        "sms_interrupt_quad_2",
        2,
        1
      ],
      [
        "sms_interrupt_quad_3",
        3,
        1
      ]
    ]
  },
  "sms_main_sms_interrupt_reg_mask": {
    "type": "register",
    "block": "sms_main",
    "width": 4,
    "desc": "This register masks SmsInterruptReg interrupt register",
    "fields": [
      [
        "sms_interrupt_quad_0_mask",
        0,
        1
      ],
      [
        "sms_interrupt_quad_1_mask",
        1,
        1
      ],
      [
        "sms_interrupt_quad_2_mask",
        2,
        1
      ],
      [
        "sms_interrupt_quad_3_mask",
        3,
        1
      ]
    ]
  },
  "sms_main_sms_interrupt_reg_test": {
    "type": "register",
    "block": "sms_main",
    "width": 4,
    "desc": "This register tests SmsInterruptReg interrupt register",
    "fields": [
      [
        "sms_interrupt_quad_0_test",
        0,
        1
      ],
      [
        "sms_interrupt_quad_1_test",
        1,
        1
      ],
      [
        "sms_interrupt_quad_2_test",
        2,
        1
      ],
      [
        "sms_interrupt_quad_3_test",
        3,
        1
      ]
    ]
  },
  "sms_main_buffer_pool_histogram_cfg": {
    "type": "register",
    "block": "sms_main",
    "width": 149,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "buffer_pool_histogram_th0",
        0,
        19
      ],
      [
        "buffer_pool_histogram_th1",
        19,
        19
      ],
      [
        "buffer_pool_histogram_th2",
        38,
        19
      ],
      [
        "buffer_pool_histogram_th3",
        57,
        19
      ],
      [
        "buffer_pool_histogram_th4",
        76,
        19
      ],
      [
        "buffer_pool_histogram_th5",
        95,
        19
      ],
      [
        "buffer_pool_histogram_th6",
        114,
        19
      ],
      [
        "buffer_pool_histogram_time_interval",
        133,
        16
      ]
    ]
  },
  "sms_main_buffer_pool_histogram_status": {
    "type": "register",
    "block": "sms_main",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "buffer_pool_histogram_value0",
        0,
        32
      ],
      [
        "buffer_pool_histogram_overflow0",
        32,
        1
      ],
      [
        "buffer_pool_histogram_value1",
        33,
        32
      ],
      [
        "buffer_pool_histogram_overflow1",
        65,
        1
      ],
      [
        "buffer_pool_histogram_value2",
        66,
        32
      ],
      [
        "buffer_pool_histogram_overflow2",
        98,
        1
      ],
      [
        "buffer_pool_histogram_value3",
        99,
        32
      ],
      [
        "buffer_pool_histogram_overflow3",
        131,
        1
      ],
      [
        "buffer_pool_histogram_value4",
        132,
        32
      ],
      [
        "buffer_pool_histogram_overflow4",
        164,
        1
      ],
      [
        "buffer_pool_histogram_value5",
        165,
        32
      ],
      [
        "buffer_pool_histogram_overflow5",
        197,
        1
      ],
      [
        "buffer_pool_histogram_value6",
        198,
        32
      ],
      [
        "buffer_pool_histogram_overflow6",
        230,
        1
      ],
      [
        "buffer_pool_histogram_value7",
        231,
        32
      ],
      [
        "buffer_pool_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "sms_main_buffer_pool_histogram_max_wmk_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "buffer_pool_histogram_max_wmk",
        0,
        19
      ],
      [
        "buffer_pool_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "sms_main_read_latency_histogram_cfg": {
    "type": "register",
    "block": "sms_main",
    "width": 224,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "read_latency_histogram_th0",
        0,
        32
      ],
      [
        "read_latency_histogram_th1",
        32,
        32
      ],
      [
        "read_latency_histogram_th2",
        64,
        32
      ],
      [
        "read_latency_histogram_th3",
        96,
        32
      ],
      [
        "read_latency_histogram_th4",
        128,
        32
      ],
      [
        "read_latency_histogram_th5",
        160,
        32
      ],
      [
        "read_latency_histogram_th6",
        192,
        32
      ]
    ]
  },
  "sms_main_read_latency_histogram_status": {
    "type": "register",
    "block": "sms_main",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "read_latency_histogram_value0",
        0,
        32
      ],
      [
        "read_latency_histogram_overflow0",
        32,
        1
      ],
      [
        "read_latency_histogram_value1",
        33,
        32
      ],
      [
        "read_latency_histogram_overflow1",
        65,
        1
      ],
      [
        "read_latency_histogram_value2",
        66,
        32
      ],
      [
        "read_latency_histogram_overflow2",
        98,
        1
      ],
      [
        "read_latency_histogram_value3",
        99,
        32
      ],
      [
        "read_latency_histogram_overflow3",
        131,
        1
      ],
      [
        "read_latency_histogram_value4",
        132,
        32
      ],
      [
        "read_latency_histogram_overflow4",
        164,
        1
      ],
      [
        "read_latency_histogram_value5",
        165,
        32
      ],
      [
        "read_latency_histogram_overflow5",
        197,
        1
      ],
      [
        "read_latency_histogram_value6",
        198,
        32
      ],
      [
        "read_latency_histogram_overflow6",
        230,
        1
      ],
      [
        "read_latency_histogram_value7",
        231,
        32
      ],
      [
        "read_latency_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "sms_main_read_latency_histogram_max_wmk_reg": {
    "type": "register",
    "block": "sms_main",
    "width": 64,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "read_latency_histogram_max_wmk",
        0,
        32
      ],
      [
        "read_latency_histogram_max_wmk_time",
        32,
        32
      ]
    ]
  },
  "sms_main_mem_free_buf_man": {
    "type": "memory",
    "block": "sms_main",
    "width": 64,
    "desc": "free buf mem",
    "fields": [
      [
        "mem_free_buf_man_field0",
        0,
        64
      ]
    ]
  },
  "sms_main_mem_free_buf_mma": {
    "type": "memory",
    "block": "sms_main",
    "width": 35,
    "desc": "free buf mma mem",
    "fields": [
      [
        "mem_free_buf_mma_field0",
        0,
        35
      ]
    ]
  },
  "sms_quad_interrupt_register": {
    "type": "register",
    "block": "sms_quad",
    "width": 10,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "sms2_cif_interrupt1b_ecc_error_reg0_summary",
        1,
        1
      ],
      [
        "sms2_cif_interrupt1b_ecc_error_reg1_summary",
        2,
        1
      ],
      [
        "sms2_cif_interrupt1b_ecc_error_reg2_summary",
        3,
        1
      ],
      [
        "sms2_cif_interrupt1b_ecc_error_reg3_summary",
        4,
        1
      ],
      [
        "sms2_cif_interrupt2b_ecc_error_reg0_summary",
        5,
        1
      ],
      [
        "sms2_cif_interrupt2b_ecc_error_reg1_summary",
        6,
        1
      ],
      [
        "sms2_cif_interrupt2b_ecc_error_reg2_summary",
        7,
        1
      ],
      [
        "sms2_cif_interrupt2b_ecc_error_reg3_summary",
        8,
        1
      ],
      [
        "sms2_cif_overflow_reg_summary",
        9,
        1
      ]
    ]
  },
  "sms_quad_mem_protect_interrupt": {
    "type": "register",
    "block": "sms_quad",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "sms_quad_mem_protect_interrupt_test": {
    "type": "register",
    "block": "sms_quad",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "sms_quad_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "sms_quad",
    "width": 21,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "mem_rd_request0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mem_rd_request1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "mem_rd_request2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mem_rd_request3_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mem_usc0_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "mem_usc1_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "mem_usc2_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "mem_usc3_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "mem_usc4_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mem_fdoq_in0_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "mem_fdoq_in1_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "mem_fdoq_in2_ecc_1b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mem_fdoq_in3_ecc_1b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mem_rd_reorder_in0_ecc_1b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mem_rd_reorder_in1_ecc_1b_err_interrupt_mask",
        14,
        1
      ],
      [
        "mem_rd_reorder_in2_ecc_1b_err_interrupt_mask",
        15,
        1
      ],
      [
        "mem_rd_reorder_in3_ecc_1b_err_interrupt_mask",
        16,
        1
      ],
      [
        "pd_fd_mem0_ecc_1b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pd_fd_mem1_ecc_1b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pd_fd_mem2_ecc_1b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pd_fd_mem3_ecc_1b_err_interrupt_mask",
        20,
        1
      ]
    ]
  },
  "sms_quad_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "sms_quad",
    "width": 21,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "mem_rd_request0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mem_rd_request1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "mem_rd_request2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mem_rd_request3_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mem_usc0_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "mem_usc1_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "mem_usc2_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "mem_usc3_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "mem_usc4_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "mem_fdoq_in0_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "mem_fdoq_in1_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "mem_fdoq_in2_ecc_2b_err_interrupt_mask",
        11,
        1
      ],
      [
        "mem_fdoq_in3_ecc_2b_err_interrupt_mask",
        12,
        1
      ],
      [
        "mem_rd_reorder_in0_ecc_2b_err_interrupt_mask",
        13,
        1
      ],
      [
        "mem_rd_reorder_in1_ecc_2b_err_interrupt_mask",
        14,
        1
      ],
      [
        "mem_rd_reorder_in2_ecc_2b_err_interrupt_mask",
        15,
        1
      ],
      [
        "mem_rd_reorder_in3_ecc_2b_err_interrupt_mask",
        16,
        1
      ],
      [
        "pd_fd_mem0_ecc_2b_err_interrupt_mask",
        17,
        1
      ],
      [
        "pd_fd_mem1_ecc_2b_err_interrupt_mask",
        18,
        1
      ],
      [
        "pd_fd_mem2_ecc_2b_err_interrupt_mask",
        19,
        1
      ],
      [
        "pd_fd_mem3_ecc_2b_err_interrupt_mask",
        20,
        1
      ]
    ]
  },
  "sms_quad_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "sms_quad",
    "width": 21,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "mem_rd_request0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "mem_rd_request1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "mem_rd_request2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "mem_rd_request3_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "mem_usc0_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "mem_usc1_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "mem_usc2_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "mem_usc3_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "mem_usc4_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "mem_fdoq_in0_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "mem_fdoq_in1_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "mem_fdoq_in2_ecc_1b_err_initiate",
        11,
        1
      ],
      [
        "mem_fdoq_in3_ecc_1b_err_initiate",
        12,
        1
      ],
      [
        "mem_rd_reorder_in0_ecc_1b_err_initiate",
        13,
        1
      ],
      [
        "mem_rd_reorder_in1_ecc_1b_err_initiate",
        14,
        1
      ],
      [
        "mem_rd_reorder_in2_ecc_1b_err_initiate",
        15,
        1
      ],
      [
        "mem_rd_reorder_in3_ecc_1b_err_initiate",
        16,
        1
      ],
      [
        "pd_fd_mem0_ecc_1b_err_initiate",
        17,
        1
      ],
      [
        "pd_fd_mem1_ecc_1b_err_initiate",
        18,
        1
      ],
      [
        "pd_fd_mem2_ecc_1b_err_initiate",
        19,
        1
      ],
      [
        "pd_fd_mem3_ecc_1b_err_initiate",
        20,
        1
      ]
    ]
  },
  "sms_quad_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "sms_quad",
    "width": 21,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "mem_rd_request0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "mem_rd_request1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "mem_rd_request2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "mem_rd_request3_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "mem_usc0_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "mem_usc1_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "mem_usc2_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "mem_usc3_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "mem_usc4_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "mem_fdoq_in0_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "mem_fdoq_in1_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "mem_fdoq_in2_ecc_2b_err_initiate",
        11,
        1
      ],
      [
        "mem_fdoq_in3_ecc_2b_err_initiate",
        12,
        1
      ],
      [
        "mem_rd_reorder_in0_ecc_2b_err_initiate",
        13,
        1
      ],
      [
        "mem_rd_reorder_in1_ecc_2b_err_initiate",
        14,
        1
      ],
      [
        "mem_rd_reorder_in2_ecc_2b_err_initiate",
        15,
        1
      ],
      [
        "mem_rd_reorder_in3_ecc_2b_err_initiate",
        16,
        1
      ],
      [
        "pd_fd_mem0_ecc_2b_err_initiate",
        17,
        1
      ],
      [
        "pd_fd_mem1_ecc_2b_err_initiate",
        18,
        1
      ],
      [
        "pd_fd_mem2_ecc_2b_err_initiate",
        19,
        1
      ],
      [
        "pd_fd_mem3_ecc_2b_err_initiate",
        20,
        1
      ]
    ]
  },
  "sms_quad_mem_protect_err_status": {
    "type": "register",
    "block": "sms_quad",
    "width": 21,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "mem_rd_request0_err_int",
        0,
        1
      ],
      [
        "mem_rd_request1_err_int",
        1,
        1
      ],
      [
        "mem_rd_request2_err_int",
        2,
        1
      ],
      [
        "mem_rd_request3_err_int",
        3,
        1
      ],
      [
        "mem_usc0_err_int",
        4,
        1
      ],
      [
        "mem_usc1_err_int",
        5,
        1
      ],
      [
        "mem_usc2_err_int",
        6,
        1
      ],
      [
        "mem_usc3_err_int",
        7,
        1
      ],
      [
        "mem_usc4_err_int",
        8,
        1
      ],
      [
        "mem_fdoq_in0_err_int",
        9,
        1
      ],
      [
        "mem_fdoq_in1_err_int",
        10,
        1
      ],
      [
        "mem_fdoq_in2_err_int",
        11,
        1
      ],
      [
        "mem_fdoq_in3_err_int",
        12,
        1
      ],
      [
        "mem_rd_reorder_in0_err_int",
        13,
        1
      ],
      [
        "mem_rd_reorder_in1_err_int",
        14,
        1
      ],
      [
        "mem_rd_reorder_in2_err_int",
        15,
        1
      ],
      [
        "mem_rd_reorder_in3_err_int",
        16,
        1
      ],
      [
        "pd_fd_mem0_err_int",
        17,
        1
      ],
      [
        "pd_fd_mem1_err_int",
        18,
        1
      ],
      [
        "pd_fd_mem2_err_int",
        19,
        1
      ],
      [
        "pd_fd_mem3_err_int",
        20,
        1
      ]
    ]
  },
  "sms_quad_selected_ser_error_info": {
    "type": "register",
    "block": "sms_quad",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "sms_quad_ser_error_debug_configuration": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        5
      ],
      [
        "reset_memory_errors",
        5,
        1
      ]
    ]
  },
  "sms_quad_ecc_1b_err_debug": {
    "type": "register",
    "block": "sms_quad",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "sms_quad_ecc_2b_err_debug": {
    "type": "register",
    "block": "sms_quad",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "sms_quad_counter_timer": {
    "type": "register",
    "block": "sms_quad",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "sms_quad_counter_timer_trigger_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "sms_quad_memory_access_timeout": {
    "type": "register",
    "block": "sms_quad",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "sms_quad_broadcast_config_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "sms_quad_memory_prot_bypass": {
    "type": "register",
    "block": "sms_quad",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "sms_quad_soft_reset_configuration": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "sms_quad_mbist_configuration": {
    "type": "register",
    "block": "sms_quad",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "sms_quad_power_down_configuration": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "sms_quad_spare_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "sms_quad_pmro_ctrl": {
    "type": "register",
    "block": "sms_quad",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "sms_quad_pmro_status": {
    "type": "register",
    "block": "sms_quad",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "sms_quad_mirror_bus_conf_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "sms_quad_mirror_bus_status": {
    "type": "register",
    "block": "sms_quad",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "sms_quad_device_time_offset_cfg": {
    "type": "register",
    "block": "sms_quad",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "sms_quad_sms2_cif_interrupt1b_ecc_error_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "One bit ECC error interrupt indication per read source",
    "fields": [
      [
        "interrupt1b_ecc_error",
        0,
        1
      ]
    ]
  },
  "sms_quad_sms2_cif_interrupt1b_ecc_error_reg_mask": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "This register masks Sms2CifInterrupt1bEccErrorReg[4] interrupt register",
    "fields": [
      [
        "interrupt1b_ecc_error_mask",
        0,
        1
      ]
    ]
  },
  "sms_quad_sms2_cif_interrupt1b_ecc_error_reg_test": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "This register tests Sms2CifInterrupt1bEccErrorReg[4] interrupt register",
    "fields": [
      [
        "interrupt1b_ecc_error_test",
        0,
        1
      ]
    ]
  },
  "sms_quad_sms2_cif_interrupt2b_ecc_error_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "Two bits ECC error interrupt indication per read source",
    "fields": [
      [
        "interrupt2b_ecc_error",
        0,
        1
      ]
    ]
  },
  "sms_quad_sms2_cif_interrupt2b_ecc_error_reg_mask": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "This register masks Sms2CifInterrupt2bEccErrorReg[4] interrupt register",
    "fields": [
      [
        "interrupt2b_ecc_error_mask",
        0,
        1
      ]
    ]
  },
  "sms_quad_sms2_cif_interrupt2b_ecc_error_reg_test": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "This register tests Sms2CifInterrupt2bEccErrorReg[4] interrupt register",
    "fields": [
      [
        "interrupt2b_ecc_error_test",
        0,
        1
      ]
    ]
  },
  "sms_quad_sms2_cif_overflow_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 2,
    "desc": "FIFOs overflow interrupts register",
    "fields": [
      [
        "sms2_cif_reorder_fifo_ovf",
        0,
        1
      ],
      [
        "sms2_cif_fdoq_fifo_ovf",
        1,
        1
      ]
    ]
  },
  "sms_quad_sms2_cif_overflow_reg_mask": {
    "type": "register",
    "block": "sms_quad",
    "width": 2,
    "desc": "This register masks Sms2CifOverflowReg interrupt register",
    "fields": [
      [
        "sms2_cif_reorder_fifo_ovf_mask",
        0,
        1
      ],
      [
        "sms2_cif_fdoq_fifo_ovf_mask",
        1,
        1
      ]
    ]
  },
  "sms_quad_sms2_cif_overflow_reg_test": {
    "type": "register",
    "block": "sms_quad",
    "width": 2,
    "desc": "This register tests Sms2CifOverflowReg interrupt register",
    "fields": [
      [
        "sms2_cif_reorder_fifo_ovf_test",
        0,
        1
      ],
      [
        "sms2_cif_fdoq_fifo_ovf_test",
        1,
        1
      ]
    ]
  },
  "sms_quad_alm_full_cfg_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 9,
    "desc": "SMS pre-fetch almost full configuration register ",
    "fields": [
      [
        "prefetch_alm_full_cfg_thr",
        0,
        3
      ],
      [
        "credit_cnt_cfg_thr",
        3,
        6
      ]
    ]
  },
  "sms_quad_cif2_sms_disable_ecc_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "Disable ECC check configuration",
    "fields": [
      [
        "cfg_disable_ecc",
        0,
        1
      ]
    ]
  },
  "sms_quad_cif2_sms_cache_cfg_size_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 7,
    "desc": "Cache size configuration per read source",
    "fields": [
      [
        "cache_cfg_size",
        0,
        7
      ]
    ]
  },
  "sms_quad_cif2_sms_fdoq_cfg_alm_full_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 9,
    "desc": "FDOQ FIFO almost full configuration",
    "fields": [
      [
        "fdoq_cfg_alm_full",
        0,
        9
      ]
    ]
  },
  "sms_quad_cif2_sms_reorder_cfg_alm_full_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 9,
    "desc": "Reorder FIFO almost full configuration",
    "fields": [
      [
        "reorder_cfg_alm_full",
        0,
        9
      ]
    ]
  },
  "sms_quad_cif2_sms_req_cfg_alm_full_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 5,
    "desc": "Request FIFO almost full configuration",
    "fields": [
      [
        "req_cfg_alm_full",
        0,
        5
      ]
    ]
  },
  "sms_quad_sms2_cif2b_ecc_error_buffer_num_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 19,
    "desc": "SMS buffer pointer index",
    "fields": [
      [
        "in2b_ecc_error_buffer_num",
        0,
        19
      ]
    ]
  },
  "sms_quad_sms2_cif_req_fifo0_status_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Request FIFO status for read source [0] per bank",
    "fields": [
      [
        "req_fifo0_status",
        0,
        6
      ]
    ]
  },
  "sms_quad_sms2_cif_req_fifo1_status_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Request FIFO status for read source [1] per bank",
    "fields": [
      [
        "req_fifo1_status",
        0,
        6
      ]
    ]
  },
  "sms_quad_sms2_cif_req_fifo2_status_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Request FIFO status for read source [2] per bank",
    "fields": [
      [
        "req_fifo2_status",
        0,
        6
      ]
    ]
  },
  "sms_quad_sms2_cif_req_fifo3_status_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Request FIFO status for read source [3] per bank",
    "fields": [
      [
        "req_fifo3_status",
        0,
        6
      ]
    ]
  },
  "sms_quad_sms2_cif_req_fifo0_max_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Request FIFO maximum value watermark for read source [0] per bank",
    "fields": [
      [
        "req_fifo0_max",
        0,
        6
      ]
    ]
  },
  "sms_quad_sms2_cif_req_fifo1_max_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Request FIFO maximum value watermark for read source [1] per bank",
    "fields": [
      [
        "req_fifo1_max",
        0,
        6
      ]
    ]
  },
  "sms_quad_sms2_cif_req_fifo2_max_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Request FIFO maximum value watermark for read source [2] per bank",
    "fields": [
      [
        "req_fifo2_max",
        0,
        6
      ]
    ]
  },
  "sms_quad_sms2_cif_req_fifo3_max_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 6,
    "desc": "Request FIFO maximum value watermark for read source [3] per bank",
    "fields": [
      [
        "req_fifo3_max",
        0,
        6
      ]
    ]
  },
  "sms_quad_cpu_write_config_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 33,
    "desc": "CPU write access configuration",
    "fields": [
      [
        "data",
        0,
        32
      ],
      [
        "cpu_write_access_enable",
        32,
        1
      ]
    ]
  },
  "sms_quad_cpu_read_config_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 21,
    "desc": "CPU read access configuration",
    "fields": [
      [
        "bank_number",
        0,
        6
      ],
      [
        "address_access",
        6,
        15
      ]
    ]
  },
  "sms_quad_cpu_read_status_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 1025,
    "desc": "CPU read status register",
    "fields": [
      [
        "read_data",
        0,
        1024
      ],
      [
        "cpu_access_done",
        1024,
        1
      ]
    ]
  },
  "sms_quad_cpu_read_enable_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 1,
    "desc": "CPU read enable configuration",
    "fields": [
      [
        "cpu_read_access_enable",
        0,
        1
      ]
    ]
  },
  "sms_quad_cpu_bist_data_pattern_config_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 512,
    "desc": "SMS BIST machine data patterns configuration  ",
    "fields": [
      [
        "bist_data_pattern0",
        0,
        128
      ],
      [
        "bist_data_pattern1",
        128,
        128
      ],
      [
        "bist_data_pattern2",
        256,
        128
      ],
      [
        "bist_data_pattern3",
        384,
        128
      ]
    ]
  },
  "sms_quad_cpu_bist_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 35,
    "desc": "SMS bist machine configuration ",
    "fields": [
      [
        "bist_go",
        0,
        1
      ],
      [
        "bist_en_check",
        1,
        1
      ],
      [
        "bist_cfg_cnt",
        2,
        32
      ],
      [
        "bist_ignore_transmit_to_txpp",
        34,
        1
      ]
    ]
  },
  "sms_quad_cpu_bist_check_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 64,
    "desc": "SMS BIST machine check register",
    "fields": [
      [
        "bist_cnt",
        0,
        32
      ],
      [
        "bist_wrong_compare",
        32,
        32
      ]
    ]
  },
  "sms_quad_sms_cache_aging_cnt_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 12,
    "desc": "SMS cache aging counter threshold configuration",
    "fields": [
      [
        "sms_cache_aging_cnt",
        0,
        12
      ]
    ]
  },
  "sms_quad_sms_cache_statistics": {
    "type": "register",
    "block": "sms_quad",
    "width": 64,
    "desc": "SMS cache statistics register",
    "fields": [
      [
        "sms_cache_hit",
        0,
        32
      ],
      [
        "sms_cache_miss",
        32,
        32
      ]
    ]
  },
  "sms_quad_sms2_cif_txpp_cbt_halt_counter_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 32,
    "desc": "SMS CBT i_rdy counter ",
    "fields": [
      [
        "sms2_cif_txpp_cbt_halt_counter",
        0,
        32
      ]
    ]
  },
  "sms_quad_sms2_cif_pdoq_cbr_debug_reg": {
    "type": "register",
    "block": "sms_quad",
    "width": 12,
    "desc": "SMS cache statistics register",
    "fields": [
      [
        "sms2_cif_pdoq_cbr_status_debug",
        0,
        6
      ],
      [
        "sms2_cif_pdoq_cbr_max_debug",
        6,
        6
      ]
    ]
  },
  "sms_quad_mem_rd_data": {
    "type": "memory",
    "block": "sms_quad",
    "width": 1036,
    "desc": "mma rd data mem",
    "fields": [
      [
        "mem_rd_data_field0",
        0,
        1036
      ]
    ]
  },
  "sms_quad_mem_rd_request": {
    "type": "memory",
    "block": "sms_quad",
    "width": 22,
    "desc": "mma rd request mem",
    "fields": [
      [
        "mem_rd_req_field0",
        0,
        15
      ],
      [
        "mem_rd_req_field1",
        15,
        1
      ],
      [
        "mem_rd_req_field2",
        16,
        6
      ]
    ]
  },
  "sms_quad_mem_usc": {
    "type": "memory",
    "block": "sms_quad",
    "width": 14,
    "desc": "free_buf_mma_mem",
    "fields": [
      [
        "mem_usc_field0",
        0,
        14
      ]
    ]
  },
  "sms_quad_mem_fdoq_in": {
    "type": "memory",
    "block": "sms_quad",
    "width": 227,
    "desc": "Mem_fdoq_in",
    "fields": [
      [
        "mem_fd_pd_field0",
        0,
        227
      ]
    ]
  },
  "sms_quad_mem_rd_reorder_in": {
    "type": "memory",
    "block": "sms_quad",
    "width": 13,
    "desc": "Mem_rd_reorder",
    "fields": [
      [
        "mem_rd_reorder_field0",
        0,
        13
      ]
    ]
  },
  "sms_quad_pd_fd_mem": {
    "type": "memory",
    "block": "sms_quad",
    "width": 289,
    "desc": "PD and FD memory for SMS bist machine",
    "fields": [
      [
        "pd_fd_mem_field",
        0,
        289
      ]
    ]
  },
  "sms_quad_mem_bank": {
    "type": "memory",
    "block": "sms_quad",
    "width": 1036,
    "desc": "sms mem bank array",
    "fields": [
      [
        "mem_bank_field0",
        0,
        1036
      ]
    ]
  },
  "ts_mon_interrupt_register": {
    "type": "register",
    "block": "ts_mon",
    "width": 7,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "slice_interrupt_register0_summary",
        1,
        1
      ],
      [
        "slice_interrupt_register1_summary",
        2,
        1
      ],
      [
        "slice_interrupt_register2_summary",
        3,
        1
      ],
      [
        "slice_interrupt_register3_summary",
        4,
        1
      ],
      [
        "slice_interrupt_register4_summary",
        5,
        1
      ],
      [
        "slice_interrupt_register5_summary",
        6,
        1
      ]
    ]
  },
  "ts_mon_mem_protect_interrupt": {
    "type": "register",
    "block": "ts_mon",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "ts_mon_mem_protect_interrupt_test": {
    "type": "register",
    "block": "ts_mon",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "ts_mon_counter_timer": {
    "type": "register",
    "block": "ts_mon",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "ts_mon_counter_timer_trigger_reg": {
    "type": "register",
    "block": "ts_mon",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "ts_mon_memory_access_timeout": {
    "type": "register",
    "block": "ts_mon",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "ts_mon_broadcast_config_reg": {
    "type": "register",
    "block": "ts_mon",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "ts_mon_memory_prot_bypass": {
    "type": "register",
    "block": "ts_mon",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "ts_mon_soft_reset_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "ts_mon_mbist_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "ts_mon_power_down_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "ts_mon_spare_reg": {
    "type": "register",
    "block": "ts_mon",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "ts_mon_pmro_ctrl": {
    "type": "register",
    "block": "ts_mon",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "ts_mon_pmro_status": {
    "type": "register",
    "block": "ts_mon",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "ts_mon_mirror_bus_conf_reg": {
    "type": "register",
    "block": "ts_mon",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "ts_mon_mirror_bus_status": {
    "type": "register",
    "block": "ts_mon",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "ts_mon_device_time_offset_cfg": {
    "type": "register",
    "block": "ts_mon",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "ts_mon_slice_interrupt_register": {
    "type": "register",
    "block": "ts_mon",
    "width": 3,
    "desc": "aaa",
    "fields": [
      [
        "link_down_interrupt",
        0,
        1
      ],
      [
        "ms_counter_overflow",
        1,
        1
      ],
      [
        "ms_counter_underflow",
        2,
        1
      ]
    ]
  },
  "ts_mon_slice_interrupt_register_mask": {
    "type": "register",
    "block": "ts_mon",
    "width": 3,
    "desc": "This register masks SliceInterruptRegister[6] interrupt register",
    "fields": [
      [
        "link_down_interrupt_mask",
        0,
        1
      ],
      [
        "ms_counter_overflow_mask",
        1,
        1
      ],
      [
        "ms_counter_underflow_mask",
        2,
        1
      ]
    ]
  },
  "ts_mon_slice_interrupt_register_test": {
    "type": "register",
    "block": "ts_mon",
    "width": 3,
    "desc": "This register tests SliceInterruptRegister[6] interrupt register",
    "fields": [
      [
        "link_down_interrupt_test",
        0,
        1
      ],
      [
        "ms_counter_overflow_test",
        1,
        1
      ],
      [
        "ms_counter_underflow_test",
        2,
        1
      ]
    ]
  },
  "ts_mon_slice_mode_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 4,
    "desc": "aaa",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ]
    ]
  },
  "ts_mon_tsmon_core_general_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 2,
    "desc": "aaa",
    "fields": [
      [
        "fe13_mode",
        0,
        1
      ],
      [
        "disable_frm_link_fail",
        1,
        1
      ]
    ]
  },
  "ts_mon_tsmon_general_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 16,
    "desc": "aaa",
    "fields": [
      [
        "drop_voq_with_valid_ts",
        0,
        16
      ]
    ]
  },
  "ts_mon_internal_fifos_cfg": {
    "type": "register",
    "block": "ts_mon",
    "width": 5,
    "desc": "aaa",
    "fields": [
      [
        "pdvoq_cbt_alm_full_cfg",
        0,
        5
      ]
    ]
  },
  "ts_mon_link_monitor_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 27,
    "desc": "aaa",
    "fields": [
      [
        "link_up_tests_th",
        0,
        4
      ],
      [
        "link_down_tests_th",
        4,
        4
      ],
      [
        "link_llfc_en",
        8,
        1
      ],
      [
        "link_monotonic_test_enable",
        9,
        1
      ],
      [
        "link_up_mask_with_fte",
        10,
        1
      ],
      [
        "link_up_mask_offset",
        11,
        16
      ]
    ]
  },
  "ts_mon_uch_monitor_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 96,
    "desc": "aaa",
    "fields": [
      [
        "uch_fte_offset",
        0,
        24
      ],
      [
        "uch_fte_allowed_distance",
        24,
        24
      ],
      [
        "uch_skew_allowed_distance",
        48,
        24
      ],
      [
        "uch_min_time_between_ts",
        72,
        24
      ]
    ]
  },
  "ts_mon_ucl_monitor_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 96,
    "desc": "aaa",
    "fields": [
      [
        "ucl_fte_offset",
        0,
        24
      ],
      [
        "ucl_fte_allowed_distance",
        24,
        24
      ],
      [
        "ucl_skew_allowed_distance",
        48,
        24
      ],
      [
        "ucl_min_time_between_ts",
        72,
        24
      ]
    ]
  },
  "ts_mon_mc_monitor_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 96,
    "desc": "aaa",
    "fields": [
      [
        "mc_fte_offset",
        0,
        24
      ],
      [
        "mc_fte_allowed_distance",
        24,
        24
      ],
      [
        "mc_skew_allowed_distance",
        48,
        24
      ],
      [
        "mc_min_time_between_ts",
        72,
        24
      ]
    ]
  },
  "ts_mon_ms_counter_ovf_debug": {
    "type": "register",
    "block": "ts_mon",
    "width": 432,
    "desc": "aaa",
    "fields": [
      [
        "ms_counter_ovf_event",
        0,
        432
      ]
    ]
  },
  "ts_mon_ms_counter_unf_debug": {
    "type": "register",
    "block": "ts_mon",
    "width": 432,
    "desc": "aaa",
    "fields": [
      [
        "ms_counter_unf_event",
        0,
        432
      ]
    ]
  },
  "ts_mon_link_status_reg": {
    "type": "register",
    "block": "ts_mon",
    "width": 180,
    "desc": "aaa",
    "fields": [
      [
        "uch_link_status",
        0,
        24
      ],
      [
        "ucl_link_status",
        24,
        24
      ],
      [
        "mc_link_status",
        48,
        24
      ],
      [
        "ifg_link_status",
        72,
        24
      ],
      [
        "uch_link_down_event",
        96,
        24
      ],
      [
        "ucl_link_down_event",
        120,
        24
      ],
      [
        "mc_link_down_event",
        144,
        24
      ],
      [
        "uch_link_down_reason",
        168,
        4
      ],
      [
        "ucl_link_down_reason",
        172,
        4
      ],
      [
        "mc_link_down_reason",
        176,
        4
      ]
    ]
  },
  "ts_mon_link_time_select_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 7,
    "desc": "aaa",
    "fields": [
      [
        "context_link_time_select",
        0,
        2
      ],
      [
        "link_time_select",
        2,
        5
      ]
    ]
  },
  "ts_mon_link_time_reg": {
    "type": "register",
    "block": "ts_mon",
    "width": 24,
    "desc": "aaa",
    "fields": [
      [
        "link_time",
        0,
        24
      ]
    ]
  },
  "ts_mon_ms_cnt_select_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 9,
    "desc": "aaa",
    "fields": [
      [
        "ms_cnt_select",
        0,
        9
      ]
    ]
  },
  "ts_mon_ms_cnt_reg": {
    "type": "register",
    "block": "ts_mon",
    "width": 17,
    "desc": "aaa",
    "fields": [
      [
        "ms_cnt",
        0,
        17
      ]
    ]
  },
  "ts_mon_fte_test_debug": {
    "type": "register",
    "block": "ts_mon",
    "width": 72,
    "desc": "aaa",
    "fields": [
      [
        "uch_max_fte_distance",
        0,
        24
      ],
      [
        "ucl_max_fte_distance",
        24,
        24
      ],
      [
        "mc_max_fte_distance",
        48,
        24
      ]
    ]
  },
  "ts_mon_skew_test_snapshot_configuration": {
    "type": "register",
    "block": "ts_mon",
    "width": 5,
    "desc": "aaa",
    "fields": [
      [
        "skew_snapshot_slice",
        0,
        3
      ],
      [
        "skew_snapshot_context",
        3,
        2
      ]
    ]
  },
  "ts_mon_skew_test_snapshot": {
    "type": "register",
    "block": "ts_mon",
    "width": 150,
    "desc": "aaa",
    "fields": [
      [
        "skew_snapshot_valid",
        0,
        1
      ],
      [
        "skew_snapshot_distance0",
        1,
        24
      ],
      [
        "skew_snapshot_distance1",
        25,
        24
      ],
      [
        "skew_snapshot_distance2",
        49,
        24
      ],
      [
        "skew_snapshot_distance3",
        73,
        24
      ],
      [
        "skew_snapshot_distance4",
        97,
        24
      ],
      [
        "skew_snapshot_ts",
        121,
        24
      ],
      [
        "skew_snapshot_link",
        145,
        5
      ]
    ]
  },
  "ts_mon_skew_test_debug": {
    "type": "register",
    "block": "ts_mon",
    "width": 72,
    "desc": "aaa",
    "fields": [
      [
        "uch_max_skew",
        0,
        24
      ],
      [
        "ucl_max_skew",
        24,
        24
      ],
      [
        "mc_max_skew",
        48,
        24
      ]
    ]
  },
  "ts_mon_keepalive_counter": {
    "type": "register",
    "block": "ts_mon",
    "width": 48,
    "desc": "aaa",
    "fields": [
      [
        "uch_keepalive_counter",
        0,
        16
      ],
      [
        "ucl_keepalive_counter",
        16,
        16
      ],
      [
        "mc_keepalive_counter",
        32,
        16
      ]
    ]
  },
  "ts_mon_empty_pd_debug": {
    "type": "register",
    "block": "ts_mon",
    "width": 16,
    "desc": "Counter of null packet id packets",
    "fields": [
      [
        "drop_empty_pd_counter",
        0,
        16
      ]
    ]
  },
  "ts_mon_tsmon_last_pd_sel_cfg": {
    "type": "register",
    "block": "ts_mon",
    "width": 6,
    "desc": "aaa",
    "fields": [
      [
        "tsmon_last_pd_sel",
        0,
        6
      ]
    ]
  },
  "ts_mon_tsmon_last_pd_data": {
    "type": "register",
    "block": "ts_mon",
    "width": 32,
    "desc": "aaa",
    "fields": [
      [
        "tsmon_last_pd",
        0,
        32
      ]
    ]
  },
  "ts_mon_debug_pd_field_cfg": {
    "type": "register",
    "block": "ts_mon",
    "width": 387,
    "desc": "PD debugger",
    "fields": [
      [
        "debug_pd_field_value",
        0,
        192
      ],
      [
        "debug_pd_field_mask",
        192,
        192
      ],
      [
        "debug_pd_field_slice",
        384,
        3
      ]
    ]
  },
  "ts_mon_debug_pd_field_status": {
    "type": "register",
    "block": "ts_mon",
    "width": 96,
    "desc": "PD debug counters",
    "fields": [
      [
        "debug_pd_field_cnt",
        0,
        32
      ],
      [
        "debug_pd_total_pd_cnt",
        32,
        32
      ],
      [
        "debug_pd_total_byte_cnt",
        64,
        32
      ]
    ]
  },
  "ts_mon_cbt_not_ready_counter": {
    "type": "register",
    "block": "ts_mon",
    "width": 32,
    "desc": "Counts number of not ready clocks of CBT to PDVOQ",
    "fields": [
      [
        "cbt_not_ready_cnt",
        0,
        32
      ]
    ]
  },
  "ts_mon_drop_packets": {
    "type": "register",
    "block": "ts_mon",
    "width": 57,
    "desc": "Dropped packets debug",
    "fields": [
      [
        "uch_drop_packet_cnt",
        0,
        16
      ],
      [
        "ucl_drop_packet_cnt",
        16,
        16
      ],
      [
        "mc_drop_packet_cnt",
        32,
        16
      ],
      [
        "drop_fte_test",
        48,
        3
      ],
      [
        "drop_skew_test",
        51,
        3
      ],
      [
        "drop_monotonic_test",
        54,
        3
      ]
    ]
  },
  "ts_mon_source_link_map": {
    "type": "memory",
    "block": "ts_mon",
    "width": 5,
    "desc": "Some desc for mem0",
    "fields": [
      [
        "source_link_map_data",
        0,
        5
      ]
    ]
  },
  "tsms_interrupt_register": {
    "type": "register",
    "block": "tsms",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "tsms_mem_protect_interrupt": {
    "type": "register",
    "block": "tsms",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "tsms_mem_protect_interrupt_test": {
    "type": "register",
    "block": "tsms",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "tsms_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "tsms",
    "width": 12,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "tsms_pdm18_links0_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "tsms_pdm18_links1_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "tsms_pdm18_links2_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "tsms_pdm20_links0_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "tsms_pdm20_links1_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "tsms_pdm24_links_ecc_1b_err_interrupt_mask",
        5,
        1
      ],
      [
        "tsms_fifo18_links0_ecc_1b_err_interrupt_mask",
        6,
        1
      ],
      [
        "tsms_fifo18_links1_ecc_1b_err_interrupt_mask",
        7,
        1
      ],
      [
        "tsms_fifo18_links2_ecc_1b_err_interrupt_mask",
        8,
        1
      ],
      [
        "tsms_fifo20_links0_ecc_1b_err_interrupt_mask",
        9,
        1
      ],
      [
        "tsms_fifo20_links1_ecc_1b_err_interrupt_mask",
        10,
        1
      ],
      [
        "tsms_fifo24_links_ecc_1b_err_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "tsms_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "tsms",
    "width": 12,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "tsms_pdm18_links0_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "tsms_pdm18_links1_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "tsms_pdm18_links2_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "tsms_pdm20_links0_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "tsms_pdm20_links1_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "tsms_pdm24_links_ecc_2b_err_interrupt_mask",
        5,
        1
      ],
      [
        "tsms_fifo18_links0_ecc_2b_err_interrupt_mask",
        6,
        1
      ],
      [
        "tsms_fifo18_links1_ecc_2b_err_interrupt_mask",
        7,
        1
      ],
      [
        "tsms_fifo18_links2_ecc_2b_err_interrupt_mask",
        8,
        1
      ],
      [
        "tsms_fifo20_links0_ecc_2b_err_interrupt_mask",
        9,
        1
      ],
      [
        "tsms_fifo20_links1_ecc_2b_err_interrupt_mask",
        10,
        1
      ],
      [
        "tsms_fifo24_links_ecc_2b_err_interrupt_mask",
        11,
        1
      ]
    ]
  },
  "tsms_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "tsms",
    "width": 12,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "tsms_pdm18_links0_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "tsms_pdm18_links1_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "tsms_pdm18_links2_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "tsms_pdm20_links0_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "tsms_pdm20_links1_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "tsms_pdm24_links_ecc_1b_err_initiate",
        5,
        1
      ],
      [
        "tsms_fifo18_links0_ecc_1b_err_initiate",
        6,
        1
      ],
      [
        "tsms_fifo18_links1_ecc_1b_err_initiate",
        7,
        1
      ],
      [
        "tsms_fifo18_links2_ecc_1b_err_initiate",
        8,
        1
      ],
      [
        "tsms_fifo20_links0_ecc_1b_err_initiate",
        9,
        1
      ],
      [
        "tsms_fifo20_links1_ecc_1b_err_initiate",
        10,
        1
      ],
      [
        "tsms_fifo24_links_ecc_1b_err_initiate",
        11,
        1
      ]
    ]
  },
  "tsms_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "tsms",
    "width": 12,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "tsms_pdm18_links0_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "tsms_pdm18_links1_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "tsms_pdm18_links2_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "tsms_pdm20_links0_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "tsms_pdm20_links1_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "tsms_pdm24_links_ecc_2b_err_initiate",
        5,
        1
      ],
      [
        "tsms_fifo18_links0_ecc_2b_err_initiate",
        6,
        1
      ],
      [
        "tsms_fifo18_links1_ecc_2b_err_initiate",
        7,
        1
      ],
      [
        "tsms_fifo18_links2_ecc_2b_err_initiate",
        8,
        1
      ],
      [
        "tsms_fifo20_links0_ecc_2b_err_initiate",
        9,
        1
      ],
      [
        "tsms_fifo20_links1_ecc_2b_err_initiate",
        10,
        1
      ],
      [
        "tsms_fifo24_links_ecc_2b_err_initiate",
        11,
        1
      ]
    ]
  },
  "tsms_mem_protect_err_status": {
    "type": "register",
    "block": "tsms",
    "width": 12,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "tsms_pdm18_links0_err_int",
        0,
        1
      ],
      [
        "tsms_pdm18_links1_err_int",
        1,
        1
      ],
      [
        "tsms_pdm18_links2_err_int",
        2,
        1
      ],
      [
        "tsms_pdm20_links0_err_int",
        3,
        1
      ],
      [
        "tsms_pdm20_links1_err_int",
        4,
        1
      ],
      [
        "tsms_pdm24_links_err_int",
        5,
        1
      ],
      [
        "tsms_fifo18_links0_err_int",
        6,
        1
      ],
      [
        "tsms_fifo18_links1_err_int",
        7,
        1
      ],
      [
        "tsms_fifo18_links2_err_int",
        8,
        1
      ],
      [
        "tsms_fifo20_links0_err_int",
        9,
        1
      ],
      [
        "tsms_fifo20_links1_err_int",
        10,
        1
      ],
      [
        "tsms_fifo24_links_err_int",
        11,
        1
      ]
    ]
  },
  "tsms_selected_ser_error_info": {
    "type": "register",
    "block": "tsms",
    "width": 13,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        11
      ],
      [
        "mem_err_type",
        11,
        2
      ]
    ]
  },
  "tsms_ser_error_debug_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 5,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        4
      ],
      [
        "reset_memory_errors",
        4,
        1
      ]
    ]
  },
  "tsms_ecc_1b_err_debug": {
    "type": "register",
    "block": "tsms",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "tsms_ecc_2b_err_debug": {
    "type": "register",
    "block": "tsms",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "tsms_counter_timer": {
    "type": "register",
    "block": "tsms",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "tsms_counter_timer_trigger_reg": {
    "type": "register",
    "block": "tsms",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "tsms_memory_access_timeout": {
    "type": "register",
    "block": "tsms",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "tsms_broadcast_config_reg": {
    "type": "register",
    "block": "tsms",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "tsms_memory_prot_bypass": {
    "type": "register",
    "block": "tsms",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "tsms_soft_reset_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "tsms_mbist_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "tsms_power_down_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "tsms_spare_reg": {
    "type": "register",
    "block": "tsms",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "tsms_pmro_ctrl": {
    "type": "register",
    "block": "tsms",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "tsms_pmro_status": {
    "type": "register",
    "block": "tsms",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "tsms_mirror_bus_conf_reg": {
    "type": "register",
    "block": "tsms",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "tsms_mirror_bus_status": {
    "type": "register",
    "block": "tsms",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "tsms_device_time_offset_cfg": {
    "type": "register",
    "block": "tsms",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "tsms_general_interrupt_register": {
    "type": "register",
    "block": "tsms",
    "width": 4,
    "desc": "TSMS interrupt register",
    "fields": [
      [
        "uch_ms_time_error",
        0,
        1
      ],
      [
        "ucl_ms_time_error",
        1,
        1
      ],
      [
        "mc_ms_time_error",
        2,
        1
      ],
      [
        "tsms_fifo_overflow",
        3,
        1
      ]
    ]
  },
  "tsms_general_interrupt_register_mask": {
    "type": "register",
    "block": "tsms",
    "width": 4,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "uch_ms_time_error_mask",
        0,
        1
      ],
      [
        "ucl_ms_time_error_mask",
        1,
        1
      ],
      [
        "mc_ms_time_error_mask",
        2,
        1
      ],
      [
        "tsms_fifo_overflow_mask",
        3,
        1
      ]
    ]
  },
  "tsms_general_interrupt_register_test": {
    "type": "register",
    "block": "tsms",
    "width": 4,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "uch_ms_time_error_test",
        0,
        1
      ],
      [
        "ucl_ms_time_error_test",
        1,
        1
      ],
      [
        "mc_ms_time_error_test",
        2,
        1
      ],
      [
        "tsms_fifo_overflow_test",
        3,
        1
      ]
    ]
  },
  "tsms_general_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 13,
    "desc": "General TSMS slice configurations, see fields description for details",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ],
      [
        "source_slice_mode",
        4,
        6
      ],
      [
        "enable_cgm_plb_count",
        10,
        1
      ],
      [
        "enable_nwk_blocking",
        11,
        1
      ],
      [
        "enable_fab_blocking",
        12,
        1
      ]
    ]
  },
  "tsms_tsms_fifo_th_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 149,
    "desc": "TSMS fifos sizes. There is a fifo per source fabric link and context for PLB traffic, 1 fifo for local traffic and 1 fifo for deleted traffic. The register is per source slice. NOTE: the block should perform soft reset after changing this register",
    "fields": [
      [
        "rlb_fifo_enable",
        0,
        72
      ],
      [
        "rlb_uch_fifo_size",
        72,
        11
      ],
      [
        "rlb_ucl_fifo_size",
        83,
        11
      ],
      [
        "rlb_mc_fifo_size",
        94,
        11
      ],
      [
        "rlb_fifo_alm_full_th",
        105,
        11
      ],
      [
        "flb_fifo_size",
        116,
        11
      ],
      [
        "flb_fifo_start_addr",
        127,
        11
      ],
      [
        "flb_fifo_alm_full_th",
        138,
        11
      ]
    ]
  },
  "tsms_tsms_delete_fifo_th_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 44,
    "desc": "TSMS delete fifo size. The register is per source slice",
    "fields": [
      [
        "delete_fifo_size",
        0,
        11
      ],
      [
        "delete_fifo_start_addr",
        11,
        11
      ],
      [
        "delete_fifo_lb_th",
        22,
        11
      ],
      [
        "delete_fifo_sp_th",
        33,
        11
      ]
    ]
  },
  "tsms_context_arbitration": {
    "type": "register",
    "block": "tsms",
    "width": 35,
    "desc": "TSMS arbitration policy",
    "fields": [
      [
        "arbiter_ucl_weight",
        0,
        4
      ],
      [
        "arbiter_mc_weight",
        4,
        4
      ],
      [
        "arbiter_flb_weight",
        8,
        4
      ],
      [
        "arbiter_rlb_weight",
        12,
        4
      ],
      [
        "arbiter_delete_sp_en",
        16,
        1
      ],
      [
        "arbiter_delete_weight",
        17,
        4
      ],
      [
        "arbiter_non_delete_sp_en",
        21,
        1
      ],
      [
        "arbiter_non_delete_weight",
        22,
        4
      ],
      [
        "arbiter_uch_sp_en",
        26,
        1
      ],
      [
        "arbiter_uch_weight",
        27,
        4
      ],
      [
        "arbiter_non_uch_weight",
        31,
        4
      ]
    ]
  },
  "tsms_keepalive_gen_cfg": {
    "type": "register",
    "block": "tsms",
    "width": 84,
    "desc": "Configurations for Keepalive generator, see fields description for more details",
    "fields": [
      [
        "keepalive_gen_enable",
        0,
        24
      ],
      [
        "keepalive_gen_profile",
        24,
        24
      ],
      [
        "keepalive_gen_rate0",
        48,
        12
      ],
      [
        "keepalive_gen_rate1",
        60,
        12
      ],
      [
        "keepalive_gen_packet_size",
        72,
        8
      ],
      [
        "keepalive_gen_oq_offset",
        80,
        3
      ],
      [
        "keepalive_gen_constant",
        83,
        1
      ]
    ]
  },
  "tsms_xbar_flow_control_cfg": {
    "type": "register",
    "block": "tsms",
    "width": 43,
    "desc": "Configurations for flow control in case of PDs congestion in Xbar",
    "fields": [
      [
        "ifg0_fc_en",
        0,
        1
      ],
      [
        "ifg1_fc_en",
        1,
        1
      ],
      [
        "mc_fc_en",
        2,
        1
      ],
      [
        "mc_stop_ifg",
        3,
        1
      ],
      [
        "ifg0_fc_th",
        4,
        13
      ],
      [
        "ifg1_fc_th",
        17,
        13
      ],
      [
        "mc_fc_th",
        30,
        13
      ]
    ]
  },
  "tsms_rate_meter_cfg": {
    "type": "register",
    "block": "tsms",
    "width": 95,
    "desc": "Configurations for rate meter, controls PLB MC traffic rate to avoid slice oversubscription",
    "fields": [
      [
        "meter_en",
        0,
        1
      ],
      [
        "slice_meter_rate",
        1,
        12
      ],
      [
        "slice_meter_max_bucket",
        13,
        8
      ],
      [
        "slice_meter_token_value",
        21,
        4
      ],
      [
        "uc_meter_max_bucket",
        25,
        20
      ],
      [
        "mc_meter_max_bucket",
        45,
        20
      ],
      [
        "meter_uc_weight",
        65,
        5
      ],
      [
        "meter_mc_weight",
        70,
        5
      ],
      [
        "mc_shaper_rate",
        75,
        12
      ],
      [
        "mc_shaper_max_bucket",
        87,
        8
      ]
    ]
  },
  "tsms_tsmon_valid_slice_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 6,
    "desc": "Defines which source slices are valid for TSMS engine, in FE2 all should be valid, in LC and FE13 only relevant slices should be enabled",
    "fields": [
      [
        "tsmon_valid_slice",
        0,
        6
      ]
    ]
  },
  "tsms_fte_offset_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 24,
    "desc": "Fabric time offset for compensation of the delay between FILB to TSMS. Should not be changed by the user, unless instructed by the designer",
    "fields": [
      [
        "fte_offset",
        0,
        24
      ]
    ]
  },
  "tsms_link_mask_configuration": {
    "type": "register",
    "block": "tsms",
    "width": 144,
    "desc": "Debug register for masking source link from the TSMS engine",
    "fields": [
      [
        "link_mask_bmp",
        0,
        144
      ]
    ]
  },
  "tsms_recycle_ifc_map_config": {
    "type": "register",
    "block": "tsms",
    "width": 64,
    "desc": "Mapping from PD.SourceIf 6 MSBs to recycle indication. Used by TxPDR key to MC database",
    "fields": [
      [
        "recycle_ifc_map",
        0,
        64
      ]
    ]
  },
  "tsms_tsms_ecc_debug": {
    "type": "register",
    "block": "tsms",
    "width": 1,
    "desc": "Debug for ECC of TSMS PDM memory which uses external ECC implementation. Disables ECC protection",
    "fields": [
      [
        "tsms_disable_ecc",
        0,
        1
      ]
    ]
  },
  "tsms_tsms_last_pd_sel_cfg": {
    "type": "register",
    "block": "tsms",
    "width": 5,
    "desc": "Last packet descriptors bit select configuration at TSMS PDM memory write (6 memories, 1 per source slice). The PD should be parsed by TSMS PDM memory fields",
    "fields": [
      [
        "tsms_last_pd_sel",
        0,
        5
      ]
    ]
  },
  "tsms_tsms_last_pd_data": {
    "type": "register",
    "block": "tsms",
    "width": 32,
    "desc": "Last packet descriptor selected data",
    "fields": [
      [
        "tsms_last_pd",
        0,
        32
      ]
    ]
  },
  "tsms_internal_debug_cfg": {
    "type": "register",
    "block": "tsms",
    "width": 5,
    "desc": "Internal TSMS fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "txpdr_cbt_alm_full_cfg",
        0,
        5
      ]
    ]
  },
  "tsms_cbt_not_ready_counter": {
    "type": "register",
    "block": "tsms",
    "width": 32,
    "desc": "Counters of back pressure clocks of the outgoing interfaces",
    "fields": [
      [
        "cbt_not_ready_cnt",
        0,
        32
      ]
    ]
  },
  "tsms_tsms_fifo_debug_cfg": {
    "type": "register",
    "block": "tsms",
    "width": 6,
    "desc": "Selector of TSMS fifo for debug indications",
    "fields": [
      [
        "tsms_fifo_select",
        0,
        6
      ]
    ]
  },
  "tsms_tsms_fifo_debug": {
    "type": "register",
    "block": "tsms",
    "width": 98,
    "desc": "Selected TSMS fifo debug indications",
    "fields": [
      [
        "tsms_fifo_overflow_event",
        0,
        74
      ],
      [
        "tsms_fifo_select_wmk",
        74,
        11
      ],
      [
        "tsms_fifo_select_status",
        85,
        11
      ],
      [
        "tsms_fifo_fc_status",
        96,
        2
      ]
    ]
  },
  "tsms_tsms_counters_debug": {
    "type": "register",
    "block": "tsms",
    "width": 108,
    "desc": "TSMS counters debug indications",
    "fields": [
      [
        "plb_uc_counter",
        0,
        15
      ],
      [
        "plb_uc_max_value",
        15,
        15
      ],
      [
        "xbar_fc_ifg0_cnt",
        30,
        13
      ],
      [
        "xbar_fc_ifg0_max_value",
        43,
        13
      ],
      [
        "xbar_fc_ifg1_cnt",
        56,
        13
      ],
      [
        "xbar_fc_ifg1_max_value",
        69,
        13
      ],
      [
        "xbar_fc_mc_cnt",
        82,
        13
      ],
      [
        "xbar_fc_mc_max_value",
        95,
        13
      ]
    ]
  },
  "tsms_tsms_pdm18_links": {
    "type": "memory",
    "block": "tsms",
    "width": 128,
    "desc": "The memory stores PDs of TSMS fifos. Accessed by same address as TSMS fifo address",
    "fields": [
      [
        "tsms_pdm18_links_data",
        0,
        128
      ]
    ]
  },
  "tsms_tsms_pdm20_links": {
    "type": "memory",
    "block": "tsms",
    "width": 128,
    "desc": "This memory is same as TsmsPdm18Links memory but for 20 links slices, to support additional fabric link in source slices 3,4 in LC mode",
    "fields": [
      [
        "tsms_pdm20_links_data",
        0,
        128
      ]
    ]
  },
  "tsms_tsms_pdm24_links": {
    "type": "memory",
    "block": "tsms",
    "width": 128,
    "desc": "This memory is same as TsmsPdm18Links memory but for 24 links slices, to support additional fabric link in source slice 5 in LC mode",
    "fields": [
      [
        "tsms_pdm24_links_data",
        0,
        128
      ]
    ]
  },
  "tsms_tsms_fifo18_links": {
    "type": "memory",
    "block": "tsms",
    "width": 24,
    "desc": "TSMS fifo memory, consists of 59 fifos, the size of each fifo is set by configuration of TsmsFifoThConfiguration and RlbFifoStartAddr. The payload of this memory is Time Stamp of stored packet",
    "fields": [
      [
        "tsms_fifo18_links_data",
        0,
        24
      ]
    ]
  },
  "tsms_tsms_fifo20_links": {
    "type": "memory",
    "block": "tsms",
    "width": 24,
    "desc": "This memory is same as Tsmsfifo18Links memory but for 20 links slices, to support additional fabric link in source slices 3,4 in LC mode",
    "fields": [
      [
        "tsms_fifo20_links_data",
        0,
        24
      ]
    ]
  },
  "tsms_tsms_fifo24_links": {
    "type": "memory",
    "block": "tsms",
    "width": 24,
    "desc": "This memory is same as Tsmsfifo18Links memory but for 24 links slices, to support additional fabric link in source slice 5 in LC mode",
    "fields": [
      [
        "tsms_fifo24_links_data",
        0,
        24
      ]
    ]
  },
  "tsms_source_link_map": {
    "type": "memory",
    "block": "tsms",
    "width": 5,
    "desc": "Maps PD.SourceIf[7:2] to source link number",
    "fields": [
      [
        "source_link_map_data",
        0,
        5
      ]
    ]
  },
  "tsms_link_to_oqg_map": {
    "type": "memory",
    "block": "tsms",
    "width": 6,
    "desc": "Maps link number used for keepalive generation to PDOQ OQG number",
    "fields": [
      [
        "dest_oqg",
        0,
        6
      ]
    ]
  },
  "tsms_rlb_fifo_start_addr": {
    "type": "memory",
    "block": "tsms",
    "width": 11,
    "desc": "Defines start address of each PLB TSMS fifo. First 24 entries are for UCH, second 24 are for UCL, third 24 are for MC. Example of UCH fifo values: PlbFifoStartAddr of fifo n+1 = PlbFifoStartAddr of fifo n + RlbUchFifoSize NOTE: the block should perform soft reset after changing this register",
    "fields": [
      [
        "rlb_fifo_start_addr_data",
        0,
        11
      ]
    ]
  },
  "txcgm_interrupt_register": {
    "type": "register",
    "block": "txcgm",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "slice_cgm_interrupt_summary",
        1,
        1
      ]
    ]
  },
  "txcgm_mem_protect_interrupt": {
    "type": "register",
    "block": "txcgm",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "txcgm_mem_protect_interrupt_test": {
    "type": "register",
    "block": "txcgm",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "txcgm_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "txcgm",
    "width": 2,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "uc_oq_profile_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mc_oq_profile_ecc_1b_err_interrupt_mask",
        1,
        1
      ]
    ]
  },
  "txcgm_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "txcgm",
    "width": 2,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "uc_oq_profile_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "mc_oq_profile_ecc_2b_err_interrupt_mask",
        1,
        1
      ]
    ]
  },
  "txcgm_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "txcgm",
    "width": 2,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "uc_oq_profile_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "mc_oq_profile_ecc_1b_err_initiate",
        1,
        1
      ]
    ]
  },
  "txcgm_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "txcgm",
    "width": 2,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "uc_oq_profile_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "mc_oq_profile_ecc_2b_err_initiate",
        1,
        1
      ]
    ]
  },
  "txcgm_mem_protect_err_status": {
    "type": "register",
    "block": "txcgm",
    "width": 2,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "uc_oq_profile_err_int",
        0,
        1
      ],
      [
        "mc_oq_profile_err_int",
        1,
        1
      ]
    ]
  },
  "txcgm_selected_ser_error_info": {
    "type": "register",
    "block": "txcgm",
    "width": 6,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        4
      ],
      [
        "mem_err_type",
        4,
        2
      ]
    ]
  },
  "txcgm_ser_error_debug_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 2,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        1
      ],
      [
        "reset_memory_errors",
        1,
        1
      ]
    ]
  },
  "txcgm_ecc_1b_err_debug": {
    "type": "register",
    "block": "txcgm",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "txcgm_ecc_2b_err_debug": {
    "type": "register",
    "block": "txcgm",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "txcgm_counter_timer": {
    "type": "register",
    "block": "txcgm",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "txcgm_counter_timer_trigger_reg": {
    "type": "register",
    "block": "txcgm",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "txcgm_memory_access_timeout": {
    "type": "register",
    "block": "txcgm",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "txcgm_broadcast_config_reg": {
    "type": "register",
    "block": "txcgm",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "txcgm_memory_prot_bypass": {
    "type": "register",
    "block": "txcgm",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "txcgm_soft_reset_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "txcgm_mbist_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "txcgm_power_down_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "txcgm_spare_reg": {
    "type": "register",
    "block": "txcgm",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "txcgm_pmro_ctrl": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "txcgm_pmro_status": {
    "type": "register",
    "block": "txcgm",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "txcgm_mirror_bus_conf_reg": {
    "type": "register",
    "block": "txcgm",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "txcgm_mirror_bus_status": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "txcgm_device_time_offset_cfg": {
    "type": "register",
    "block": "txcgm",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "txcgm_slice_cgm_interrupt": {
    "type": "register",
    "block": "txcgm",
    "width": 7,
    "desc": "TxCGM per slice interrupt register",
    "fields": [
      [
        "oqg_uc_pd_counter_roll_over",
        0,
        1
      ],
      [
        "oqg_uc_buffer_counter_roll_over",
        1,
        1
      ],
      [
        "oqg_uc_byte_counter_roll_over",
        2,
        1
      ],
      [
        "ifg_uc_pd_counter_roll_over",
        3,
        1
      ],
      [
        "ifg_uc_buffer_counter_roll_over",
        4,
        1
      ],
      [
        "ifg_uc_byte_counter_roll_over",
        5,
        1
      ],
      [
        "ucdv_rollover",
        6,
        1
      ]
    ]
  },
  "txcgm_slice_cgm_interrupt_mask": {
    "type": "register",
    "block": "txcgm",
    "width": 7,
    "desc": "This register masks SliceCgmInterrupt interrupt register",
    "fields": [
      [
        "oqg_uc_pd_counter_roll_over_mask",
        0,
        1
      ],
      [
        "oqg_uc_buffer_counter_roll_over_mask",
        1,
        1
      ],
      [
        "oqg_uc_byte_counter_roll_over_mask",
        2,
        1
      ],
      [
        "ifg_uc_pd_counter_roll_over_mask",
        3,
        1
      ],
      [
        "ifg_uc_buffer_counter_roll_over_mask",
        4,
        1
      ],
      [
        "ifg_uc_byte_counter_roll_over_mask",
        5,
        1
      ],
      [
        "ucdv_rollover_mask",
        6,
        1
      ]
    ]
  },
  "txcgm_slice_cgm_interrupt_test": {
    "type": "register",
    "block": "txcgm",
    "width": 7,
    "desc": "This register tests SliceCgmInterrupt interrupt register",
    "fields": [
      [
        "oqg_uc_pd_counter_roll_over_test",
        0,
        1
      ],
      [
        "oqg_uc_buffer_counter_roll_over_test",
        1,
        1
      ],
      [
        "oqg_uc_byte_counter_roll_over_test",
        2,
        1
      ],
      [
        "ifg_uc_pd_counter_roll_over_test",
        3,
        1
      ],
      [
        "ifg_uc_buffer_counter_roll_over_test",
        4,
        1
      ],
      [
        "ifg_uc_byte_counter_roll_over_test",
        5,
        1
      ],
      [
        "ucdv_rollover_test",
        6,
        1
      ]
    ]
  },
  "txcgm_general_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 45,
    "desc": "TxCGM general configurations, see fields description for more details",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ],
      [
        "drop_all_pds",
        4,
        1
      ],
      [
        "pd_color_map",
        5,
        8
      ],
      [
        "drop_color_uc_enable",
        13,
        4
      ],
      [
        "drop_color_mc_enable",
        17,
        4
      ],
      [
        "enable_uc_oqg_accounting",
        21,
        8
      ],
      [
        "packet_rate_limiter",
        29,
        13
      ],
      [
        "disable_ucdv_res",
        42,
        1
      ],
      [
        "disable_ucdv_fe_mode",
        43,
        1
      ],
      [
        "mc_drop_tc_based_enable",
        44,
        1
      ]
    ]
  },
  "txcgm_delete_flow_control": {
    "type": "register",
    "block": "txcgm",
    "width": 140,
    "desc": "Defines thresholds for delete OQ to stop xbar and adjust ICS load balancing of deleted traffic",
    "fields": [
      [
        "delete_fc_pd_th",
        0,
        16
      ],
      [
        "delete_fc_buffer_th",
        16,
        19
      ],
      [
        "delete_lb_fc_pd_th0",
        35,
        16
      ],
      [
        "delete_lb_fc_buffer_th0",
        51,
        19
      ],
      [
        "delete_lb_fc_pd_th1",
        70,
        16
      ],
      [
        "delete_lb_fc_buffer_th1",
        86,
        19
      ],
      [
        "delete_lb_fc_pd_th2",
        105,
        16
      ],
      [
        "delete_lb_fc_buffer_th2",
        121,
        19
      ]
    ]
  },
  "txcgm_max_allowed_pd_qsize_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 16,
    "desc": "Maximum allowed size of single OQ in packets",
    "fields": [
      [
        "max_allowed_pd_qsize_thr",
        0,
        16
      ]
    ]
  },
  "txcgm_fabric_link_counter_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 9,
    "desc": "aaa",
    "fields": [
      [
        "plb_uch_offset",
        0,
        3
      ],
      [
        "plb_ucl_offset",
        3,
        3
      ],
      [
        "plb_mc_offset",
        6,
        3
      ]
    ]
  },
  "txcgm_slice_cgm_counter_select_debug": {
    "type": "register",
    "block": "txcgm",
    "width": 10,
    "desc": "Selector of CGM counter for debug indications",
    "fields": [
      [
        "slice_cgm_cnt_type_select",
        0,
        4
      ],
      [
        "slice_cgm_cnt_select",
        4,
        6
      ]
    ]
  },
  "txcgm_slice_cgm_counter_debug": {
    "type": "register",
    "block": "txcgm",
    "width": 38,
    "desc": "Selected CGM counter debug indications",
    "fields": [
      [
        "slice_cgm_counter",
        0,
        19
      ],
      [
        "slice_cgm_counter_max_value",
        19,
        19
      ]
    ]
  },
  "txcgm_cgm_reject_mask": {
    "type": "register",
    "block": "txcgm",
    "width": 11,
    "desc": "Allows to disable a specific CGM test",
    "fields": [
      [
        "oq_mc_pd_green_reject_mask",
        0,
        1
      ],
      [
        "oq_mc_pd_yellow_reject_mask",
        1,
        1
      ],
      [
        "oq_mc_byte_green_reject_mask",
        2,
        1
      ],
      [
        "oq_mc_byte_yellow_reject_mask",
        3,
        1
      ],
      [
        "oq_uc_reject_mask",
        4,
        1
      ],
      [
        "oqg_uc_reject_mask",
        5,
        1
      ],
      [
        "global_local_sch_uc_buffers_reject_mask",
        6,
        1
      ],
      [
        "global_total_reject_mask",
        7,
        1
      ],
      [
        "global_uc_buffers_reject_mask",
        8,
        1
      ],
      [
        "global_uc_pds_reject_mask",
        9,
        1
      ],
      [
        "global_mc_reject_mask",
        10,
        1
      ]
    ]
  },
  "txcgm_cgm_reject_bitmap": {
    "type": "register",
    "block": "txcgm",
    "width": 16,
    "desc": "Reject tests sticky indications, if some field is set, TxCGM dropped at least 1 packet by this reason",
    "fields": [
      [
        "oq_uc_reject",
        0,
        1
      ],
      [
        "oq_mc_pd_green_reject",
        1,
        1
      ],
      [
        "oq_mc_pd_yellow_reject",
        2,
        1
      ],
      [
        "oq_mc_byte_green_reject",
        3,
        1
      ],
      [
        "oq_mc_byte_yellow_reject",
        4,
        1
      ],
      [
        "oqg_uc_reject",
        5,
        1
      ],
      [
        "color_uc_reject",
        6,
        1
      ],
      [
        "color_mc_reject",
        7,
        1
      ],
      [
        "oq_static_reject",
        8,
        1
      ],
      [
        "global_local_sch_uc_buffers_reject",
        9,
        1
      ],
      [
        "global_total_reject",
        10,
        1
      ],
      [
        "global_uc_buffers_reject",
        11,
        1
      ],
      [
        "global_uc_pds_reject",
        12,
        1
      ],
      [
        "global_mc_reject",
        13,
        1
      ],
      [
        "max_allowed_drop_reject",
        14,
        1
      ],
      [
        "max_allowed_block_reject",
        15,
        1
      ]
    ]
  },
  "txcgm_total_packet_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 112,
    "desc": "Counters of total incoming traffic",
    "fields": [
      [
        "total_packet_cnt",
        0,
        32
      ],
      [
        "total_byte_cnt",
        32,
        48
      ],
      [
        "total_keepalive_cnt",
        80,
        32
      ]
    ]
  },
  "txcgm_total_enq_packet_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 144,
    "desc": "Counters of Enq (non-dropped) incoming traffic",
    "fields": [
      [
        "total_enq_packet_cnt",
        0,
        32
      ],
      [
        "total_enq_byte_cnt",
        32,
        48
      ],
      [
        "total_enq_uc_packet_cnt",
        80,
        32
      ],
      [
        "total_enq_mc_packet_cnt",
        112,
        32
      ]
    ]
  },
  "txcgm_max_allowed_qsize_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of dropped packet due to OQ reaching max allowed size",
    "fields": [
      [
        "max_allowed_qsize_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_local_sch_uc_buffers_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of local sch uc packet drops due to buffers counter (C)",
    "fields": [
      [
        "local_sch_uc_buffer_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_sch_uc_buffers_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of sch uc packet drops due to buffers counter (C+D)",
    "fields": [
      [
        "sch_uc_buffers_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_sch_uc_drop_pds_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of sch uc packet drops due to PDs counter (Z)",
    "fields": [
      [
        "sch_uc_drop_pds_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_unsch_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of mc packet drops (W)",
    "fields": [
      [
        "unsch_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_oq_uc_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of packet drops due to OQ UC test",
    "fields": [
      [
        "oq_uc_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_oqg_uc_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of packet drops due to OQG UC test",
    "fields": [
      [
        "oqg_uc_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_uc_color_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of packet drops due to UC color test",
    "fields": [
      [
        "uc_color_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_oq_mc_byte_green_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of packet drops due to OQ MC green bytes test",
    "fields": [
      [
        "oq_mc_byte_green_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_oq_mc_byte_yellow_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of packet drops due to OQ MC yellow bytes test",
    "fields": [
      [
        "oq_mc_byte_yellow_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_oq_mc_pd_green_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of packet drops due to OQ MC green PDs test",
    "fields": [
      [
        "oq_mc_pd_green_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_oq_mc_pd_yellow_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of packet drops due to OQ MC yellow PDs test",
    "fields": [
      [
        "oq_mc_pd_yellow_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_mc_color_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of packet drops due to MC color test",
    "fields": [
      [
        "mc_color_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_total_drop_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of total dropped (in TxCGM only) traffic",
    "fields": [
      [
        "total_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_mc_drop_hidden_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of dropped MC packets that were silently dropped by UCDV resolution logic (redundant dropped copy that is not needed by further logic)",
    "fields": [
      [
        "mc_drop_hidden_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_total_received_delete_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counter of total incoming dropped (before TxCGM) traffic",
    "fields": [
      [
        "total_received_delete_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_fabric_link_fill_level_th_profile_cfg": {
    "type": "register",
    "block": "txcgm",
    "width": 24,
    "desc": "Profile for Fabric Link fill level thresholds - 2 profiles",
    "fields": [
      [
        "fill_level_th_profile",
        0,
        24
      ]
    ]
  },
  "txcgm_fabric_link_uch_th_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 76,
    "desc": "Thresholds in Bytes for fabric link fill level and flow control, 256B resolution, set per profile",
    "fields": [
      [
        "fabric_link_uch_th0",
        0,
        19
      ],
      [
        "fabric_link_uch_th1",
        19,
        19
      ],
      [
        "fabric_link_uch_th2",
        38,
        19
      ],
      [
        "fabric_link_uch_th_fc",
        57,
        19
      ]
    ]
  },
  "txcgm_fabric_link_ucl_th_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 76,
    "desc": "See above",
    "fields": [
      [
        "fabric_link_ucl_th0",
        0,
        19
      ],
      [
        "fabric_link_ucl_th1",
        19,
        19
      ],
      [
        "fabric_link_ucl_th2",
        38,
        19
      ],
      [
        "fabric_link_ucl_th_fc",
        57,
        19
      ]
    ]
  },
  "txcgm_fabric_link_mc_th_configuration": {
    "type": "register",
    "block": "txcgm",
    "width": 95,
    "desc": "See above",
    "fields": [
      [
        "fabric_link_mc_th0",
        0,
        19
      ],
      [
        "fabric_link_mc_th1",
        19,
        19
      ],
      [
        "fabric_link_mc_th2",
        38,
        19
      ],
      [
        "fabric_link_mc_th_fc",
        57,
        19
      ],
      [
        "fabric_link_mc_th_fc_for_sch",
        76,
        19
      ]
    ]
  },
  "txcgm_uc_pd_counter_set": {
    "type": "register",
    "block": "txcgm",
    "width": 48,
    "desc": "OQ instrumentation, set of 4 UC packet counters. Profile is chosen by CounterSetMap table",
    "fields": [
      [
        "uc_pd_counter_set_drop_cnt",
        0,
        16
      ],
      [
        "uc_pd_counter_set_total_cnt",
        16,
        32
      ]
    ]
  },
  "txcgm_uc_byte_counter_set": {
    "type": "register",
    "block": "txcgm",
    "width": 80,
    "desc": "OQ instrumentation, set of 4 UC byte counters. Profile is chosen by CounterSetMap table",
    "fields": [
      [
        "uc_byte_counter_set_drop_cnt",
        0,
        32
      ],
      [
        "uc_byte_counter_set_total_cnt",
        32,
        48
      ]
    ]
  },
  "txcgm_mc_pd_counter_set": {
    "type": "register",
    "block": "txcgm",
    "width": 48,
    "desc": "OQ instrumentation, set of 4 MC packet counters. Profile is chosen by CounterSetMap table",
    "fields": [
      [
        "mc_pd_counter_set_drop_cnt",
        0,
        16
      ],
      [
        "mc_pd_counter_set_total_cnt",
        16,
        32
      ]
    ]
  },
  "txcgm_mc_byte_counter_set": {
    "type": "register",
    "block": "txcgm",
    "width": 80,
    "desc": "OQ instrumentation, set of 4 MC byte counters. Profile is chosen by CounterSetMap table",
    "fields": [
      [
        "mc_byte_counter_set_drop_cnt",
        0,
        32
      ],
      [
        "mc_byte_counter_set_total_cnt",
        32,
        48
      ]
    ]
  },
  "txcgm_txcgm_last_pd_sel_cfg": {
    "type": "register",
    "block": "txcgm",
    "width": 3,
    "desc": "Last packet descriptors bit select configuration at TxCGM in stage.",
    "fields": [
      [
        "txcgm_last_pd_sel",
        0,
        3
      ]
    ]
  },
  "txcgm_txcgm_last_pd_data": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Last packet descriptor selected data",
    "fields": [
      [
        "txcgm_last_pd",
        0,
        32
      ]
    ]
  },
  "txcgm_flow_control_debug": {
    "type": "register",
    "block": "txcgm",
    "width": 19,
    "desc": "Sticky indications of outgoing flow control to SCH",
    "fields": [
      [
        "ifg_flow_control_set",
        0,
        2
      ],
      [
        "oq_flow_control_set",
        2,
        1
      ],
      [
        "oq_set_value",
        3,
        9
      ],
      [
        "oqg_flow_control_set",
        12,
        1
      ],
      [
        "oqg_set_value",
        13,
        6
      ]
    ]
  },
  "txcgm_internal_debug_cfg": {
    "type": "register",
    "block": "txcgm",
    "width": 5,
    "desc": "Internal TxCGM fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "pdoq_cbt_alm_full_cfg",
        0,
        5
      ]
    ]
  },
  "txcgm_cbt_not_ready_counter": {
    "type": "register",
    "block": "txcgm",
    "width": 32,
    "desc": "Counters of back pressure clocks of the outgoing interfaces",
    "fields": [
      [
        "pdoq_cbt_not_ready_cnt",
        0,
        32
      ]
    ]
  },
  "txcgm_uc_oq_profile_map": {
    "type": "memory",
    "block": "txcgm",
    "width": 4,
    "desc": "Profile per UC OQ, accessed by UC OQ number. There are 16 profiles",
    "fields": [
      [
        "uc_profile",
        0,
        4
      ]
    ]
  },
  "txcgm_mc_oq_profile_map": {
    "type": "memory",
    "block": "txcgm",
    "width": 4,
    "desc": "Profile per MC OQ, accessed by MC OQ number. There are 16 profiles",
    "fields": [
      [
        "mc_profile",
        0,
        4
      ]
    ]
  },
  "txcgm_oq_drop_bitmap": {
    "type": "memory",
    "block": "txcgm",
    "width": 8,
    "desc": "Bit per OQ indicating OQ is allowed to received traffic. By default, all the table should be 1 (all Oqs are disabled). Only configured Oqs should reset relevant bits",
    "fields": [
      [
        "oq_drop_bitmap_data",
        0,
        8
      ]
    ]
  },
  "txcgm_uc_oqg_profile_map": {
    "type": "memory",
    "block": "txcgm",
    "width": 3,
    "desc": "Profile per UC OQG, accessed by UC OQG number. There are 8 profiles",
    "fields": [
      [
        "uc_oqg_profile",
        0,
        3
      ]
    ]
  },
  "txcgm_uc_oq_profile": {
    "type": "memory",
    "block": "txcgm",
    "width": 218,
    "desc": "UC OQ profile thresholds definition, accessed by UC OQ profile",
    "fields": [
      [
        "flow_control_bytes_th",
        0,
        19
      ],
      [
        "flow_control_buffers_th",
        19,
        19
      ],
      [
        "flow_control_pds_th",
        38,
        16
      ],
      [
        "drop_bytes_th",
        54,
        19
      ],
      [
        "drop_buffers_th",
        73,
        19
      ],
      [
        "drop_pds_th",
        92,
        16
      ],
      [
        "fcn_bytes_th",
        108,
        19
      ],
      [
        "fcn_buffers_th",
        127,
        19
      ],
      [
        "fcn_pds_th",
        146,
        16
      ],
      [
        "voq_bypass_bytes_th",
        162,
        19
      ],
      [
        "voq_bypass_buffers_th",
        181,
        19
      ],
      [
        "voq_bypass_pds_th",
        200,
        16
      ],
      [
        "pd_counter_type",
        216,
        2
      ]
    ]
  },
  "txcgm_mc_oq_profile": {
    "type": "memory",
    "block": "txcgm",
    "width": 282,
    "desc": "MC OQ profile thresholds definition, accessed by MC OQ profile",
    "fields": [
      [
        "qsize_byte_range_th0",
        0,
        19
      ],
      [
        "qsize_byte_range_th1",
        19,
        19
      ],
      [
        "qsize_byte_range_th2",
        38,
        19
      ],
      [
        "qsize_byte_range_th3",
        57,
        19
      ],
      [
        "qsize_byte_range_th4",
        76,
        19
      ],
      [
        "qsize_byte_range_th5",
        95,
        19
      ],
      [
        "qsize_byte_range_th6",
        114,
        19
      ],
      [
        "qsize_pd_range_th0",
        133,
        16
      ],
      [
        "qsize_pd_range_th1",
        149,
        16
      ],
      [
        "qsize_pd_range_th2",
        165,
        16
      ],
      [
        "qsize_pd_range_th3",
        181,
        16
      ],
      [
        "qsize_pd_range_th4",
        197,
        16
      ],
      [
        "qsize_pd_range_th5",
        213,
        16
      ],
      [
        "qsize_pd_range_th6",
        229,
        16
      ],
      [
        "fcn_bytes_th",
        245,
        19
      ],
      [
        "fcn_pds_th",
        264,
        16
      ],
      [
        "pd_counter_type",
        280,
        2
      ]
    ]
  },
  "txcgm_mc_oq_byte_drop_resolution": {
    "type": "memory",
    "block": "txcgm",
    "width": 16,
    "desc": "Drop resolution table for MC Oqs by bytes accounting. Accessed by {Global MC buffers 2b status, MC OQ profile 4b} ",
    "fields": [
      [
        "drop_green",
        0,
        8
      ],
      [
        "drop_yellow",
        8,
        8
      ]
    ]
  },
  "txcgm_mc_oq_pd_drop_resolution": {
    "type": "memory",
    "block": "txcgm",
    "width": 16,
    "desc": "Drop resolution table for MC Oqs by packets accounting. Accessed by {Global MC PDs 2b status, MC OQ profile 4b} ",
    "fields": [
      [
        "drop_green",
        0,
        8
      ],
      [
        "drop_yellow",
        8,
        8
      ]
    ]
  },
  "txcgm_uc_oqg_profile": {
    "type": "memory",
    "block": "txcgm",
    "width": 216,
    "desc": "UC OQG profile thresholds definition, accessed by UC OQG profile",
    "fields": [
      [
        "flow_control_bytes_th",
        0,
        19
      ],
      [
        "flow_control_buffers_th",
        19,
        19
      ],
      [
        "flow_control_pds_th",
        38,
        16
      ],
      [
        "drop_bytes_th",
        54,
        19
      ],
      [
        "drop_buffers_th",
        73,
        19
      ],
      [
        "drop_pds_th",
        92,
        16
      ],
      [
        "fcn_bytes_th",
        108,
        19
      ],
      [
        "fcn_buffers_th",
        127,
        19
      ],
      [
        "fcn_pds_th",
        146,
        16
      ],
      [
        "voq_bypass_bytes_th",
        162,
        19
      ],
      [
        "voq_bypass_buffers_th",
        181,
        19
      ],
      [
        "voq_bypass_pds_th",
        200,
        16
      ]
    ]
  },
  "txcgm_uc_ifg_profile": {
    "type": "memory",
    "block": "txcgm",
    "width": 108,
    "desc": "UC IFG profile thresholds definition, accessed by IFG number",
    "fields": [
      [
        "flow_control_bytes_th",
        0,
        19
      ],
      [
        "flow_control_buffers_th",
        19,
        19
      ],
      [
        "flow_control_pds_th",
        38,
        16
      ],
      [
        "voq_bypass_bytes_th",
        54,
        19
      ],
      [
        "voq_bypass_buffers_th",
        73,
        19
      ],
      [
        "voq_bypass_pds_th",
        92,
        16
      ]
    ]
  },
  "txcgm_uc_oq_state": {
    "type": "memory",
    "block": "txcgm",
    "width": 8,
    "desc": "UC OQ drop state, bit per UC OQ, set by TxCGM test logic based on OQ size and thresholds",
    "fields": [
      [
        "drop_state",
        0,
        8
      ]
    ]
  },
  "txcgm_mc_qsize_pd": {
    "type": "memory",
    "block": "txcgm",
    "width": 24,
    "desc": "MC OQ Qsize PD range value (3b), set by TxCGM test logic based on OQ size and thresholds",
    "fields": [
      [
        "mc_qsize_pd_range",
        0,
        24
      ]
    ]
  },
  "txcgm_mc_qsize_byte": {
    "type": "memory",
    "block": "txcgm",
    "width": 24,
    "desc": "MC OQ Qsize Bytes range value (3b), set by TxCGM test logic based on OQ size and thresholds",
    "fields": [
      [
        "mc_qsize_byte_range",
        0,
        24
      ]
    ]
  },
  "txcgm_uc_oqg_state": {
    "type": "memory",
    "block": "txcgm",
    "width": 1,
    "desc": "UC OQG drop state, bit per UC OQG, set by TxCGM test logic based on OQG size and thresholds",
    "fields": [
      [
        "drop_state",
        0,
        1
      ]
    ]
  },
  "txcgm_fabric_link_map": {
    "type": "memory",
    "block": "txcgm",
    "width": 5,
    "desc": "aaa",
    "fields": [
      [
        "oqg_fabric_link_map",
        0,
        5
      ]
    ]
  },
  "txcgm_counter_set_map": {
    "type": "memory",
    "block": "txcgm",
    "width": 2,
    "desc": "Mapping of OQ pair to Counter set profile for instrumentation counters",
    "fields": [
      [
        "counter_set_map_data",
        0,
        2
      ]
    ]
  },
  "txcgm_voq_bypass_map": {
    "type": "memory",
    "block": "txcgm",
    "width": 9,
    "desc": "Mapping of OQ pair to 1 of 256 'bypass' OQs for VOQ bypass flow control. Serial bus of 256 OQs is forwarded to PDVOQ to reflect flow control status.",
    "fields": [
      [
        "voq_bypass_map_valid",
        0,
        1
      ],
      [
        "voq_bypass_map_data",
        1,
        8
      ]
    ]
  },
  "txcgm_top_interrupt_register": {
    "type": "register",
    "block": "txcgm_top",
    "width": 8,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "global_cgm_interrupt_summary",
        1,
        1
      ],
      [
        "egr_slice_interrupt0_summary",
        2,
        1
      ],
      [
        "egr_slice_interrupt1_summary",
        3,
        1
      ],
      [
        "egr_slice_interrupt2_summary",
        4,
        1
      ],
      [
        "egr_slice_interrupt3_summary",
        5,
        1
      ],
      [
        "egr_slice_interrupt4_summary",
        6,
        1
      ],
      [
        "egr_slice_interrupt5_summary",
        7,
        1
      ]
    ]
  },
  "txcgm_top_mem_protect_interrupt": {
    "type": "register",
    "block": "txcgm_top",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "txcgm_top_mem_protect_interrupt_test": {
    "type": "register",
    "block": "txcgm_top",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "txcgm_top_counter_timer": {
    "type": "register",
    "block": "txcgm_top",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "txcgm_top_counter_timer_trigger_reg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "txcgm_top_memory_access_timeout": {
    "type": "register",
    "block": "txcgm_top",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "txcgm_top_broadcast_config_reg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "txcgm_top_memory_prot_bypass": {
    "type": "register",
    "block": "txcgm_top",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "txcgm_top_soft_reset_configuration": {
    "type": "register",
    "block": "txcgm_top",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "txcgm_top_mbist_configuration": {
    "type": "register",
    "block": "txcgm_top",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "txcgm_top_power_down_configuration": {
    "type": "register",
    "block": "txcgm_top",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "txcgm_top_spare_reg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "txcgm_top_pmro_ctrl": {
    "type": "register",
    "block": "txcgm_top",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "txcgm_top_pmro_status": {
    "type": "register",
    "block": "txcgm_top",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "txcgm_top_mirror_bus_conf_reg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "txcgm_top_mirror_bus_status": {
    "type": "register",
    "block": "txcgm_top",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "txcgm_top_device_time_offset_cfg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "txcgm_top_global_cgm_interrupt": {
    "type": "register",
    "block": "txcgm_top",
    "width": 7,
    "desc": "Global TxCGM interrupts",
    "fields": [
      [
        "total_sch_uc_buffer_roll_over",
        0,
        1
      ],
      [
        "total_sch_uc_local_buffer_roll_over",
        1,
        1
      ],
      [
        "total_sch_uc_remote_buffer_roll_over",
        2,
        1
      ],
      [
        "total_pd_roll_over",
        3,
        1
      ],
      [
        "total_sch_uc_pd_roll_over",
        4,
        1
      ],
      [
        "total_mc_pd_roll_over",
        5,
        1
      ],
      [
        "total_fab_pd_roll_over",
        6,
        1
      ]
    ]
  },
  "txcgm_top_global_cgm_interrupt_mask": {
    "type": "register",
    "block": "txcgm_top",
    "width": 7,
    "desc": "This register masks GlobalCgmInterrupt interrupt register",
    "fields": [
      [
        "total_sch_uc_buffer_roll_over_mask",
        0,
        1
      ],
      [
        "total_sch_uc_local_buffer_roll_over_mask",
        1,
        1
      ],
      [
        "total_sch_uc_remote_buffer_roll_over_mask",
        2,
        1
      ],
      [
        "total_pd_roll_over_mask",
        3,
        1
      ],
      [
        "total_sch_uc_pd_roll_over_mask",
        4,
        1
      ],
      [
        "total_mc_pd_roll_over_mask",
        5,
        1
      ],
      [
        "total_fab_pd_roll_over_mask",
        6,
        1
      ]
    ]
  },
  "txcgm_top_global_cgm_interrupt_test": {
    "type": "register",
    "block": "txcgm_top",
    "width": 7,
    "desc": "This register tests GlobalCgmInterrupt interrupt register",
    "fields": [
      [
        "total_sch_uc_buffer_roll_over_test",
        0,
        1
      ],
      [
        "total_sch_uc_local_buffer_roll_over_test",
        1,
        1
      ],
      [
        "total_sch_uc_remote_buffer_roll_over_test",
        2,
        1
      ],
      [
        "total_pd_roll_over_test",
        3,
        1
      ],
      [
        "total_sch_uc_pd_roll_over_test",
        4,
        1
      ],
      [
        "total_mc_pd_roll_over_test",
        5,
        1
      ],
      [
        "total_fab_pd_roll_over_test",
        6,
        1
      ]
    ]
  },
  "txcgm_top_egr_slice_interrupt": {
    "type": "register",
    "block": "txcgm_top",
    "width": 3,
    "desc": "Interrupt register per EGR slice",
    "fields": [
      [
        "tsms_slice_interrupt",
        0,
        1
      ],
      [
        "txpdr_slice_interrupt",
        1,
        1
      ],
      [
        "txcgm_slice_interrupt",
        2,
        1
      ]
    ]
  },
  "txcgm_top_egr_slice_interrupt_mask": {
    "type": "register",
    "block": "txcgm_top",
    "width": 3,
    "desc": "This register masks EgrSliceInterrupt[6] interrupt register",
    "fields": [
      [
        "tsms_slice_interrupt_mask",
        0,
        1
      ],
      [
        "txpdr_slice_interrupt_mask",
        1,
        1
      ],
      [
        "txcgm_slice_interrupt_mask",
        2,
        1
      ]
    ]
  },
  "txcgm_top_egr_slice_interrupt_test": {
    "type": "register",
    "block": "txcgm_top",
    "width": 3,
    "desc": "This register tests EgrSliceInterrupt[6] interrupt register",
    "fields": [
      [
        "tsms_slice_interrupt_test",
        0,
        1
      ],
      [
        "txpdr_slice_interrupt_test",
        1,
        1
      ],
      [
        "txcgm_slice_interrupt_test",
        2,
        1
      ]
    ]
  },
  "txcgm_top_total_sch_uc_buffers_th": {
    "type": "register",
    "block": "txcgm_top",
    "width": 95,
    "desc": "Thresholds for Scheduled UC buffers counter (C+D)",
    "fields": [
      [
        "total_sch_uc_buffers_fc_th",
        0,
        19
      ],
      [
        "total_sch_uc_buffers_drop_th",
        19,
        19
      ],
      [
        "remote_sch_uc_buffers_drop_th",
        38,
        19
      ],
      [
        "remote_sch_uc_buffers_fcn_th",
        57,
        19
      ],
      [
        "local_sch_uc_buffers_drop_th",
        76,
        19
      ]
    ]
  },
  "txcgm_top_total_pd_th": {
    "type": "register",
    "block": "txcgm_top",
    "width": 32,
    "desc": "Thresholds for total PDs counter",
    "fields": [
      [
        "total_pd_drop_th",
        0,
        16
      ],
      [
        "total_pd_block_th",
        16,
        16
      ]
    ]
  },
  "txcgm_top_total_sch_uc_pd_th": {
    "type": "register",
    "block": "txcgm_top",
    "width": 48,
    "desc": "Thresholds for Scheduled UC PDs counter (Z)",
    "fields": [
      [
        "total_sch_uc_pds_fc_th",
        0,
        16
      ],
      [
        "total_sch_uc_pds_drop_th",
        16,
        16
      ],
      [
        "total_sch_uc_pds_block_th",
        32,
        16
      ]
    ]
  },
  "txcgm_top_total_mc_pd_th": {
    "type": "register",
    "block": "txcgm_top",
    "width": 64,
    "desc": "Thresholds for MC PDs counter (W)",
    "fields": [
      [
        "total_mc_pds_drop_th",
        0,
        16
      ],
      [
        "total_mc_pds_status_th0",
        16,
        16
      ],
      [
        "total_mc_pds_status_th1",
        32,
        16
      ],
      [
        "total_mc_pds_status_th2",
        48,
        16
      ]
    ]
  },
  "txcgm_top_total_fab_pd_th": {
    "type": "register",
    "block": "txcgm_top",
    "width": 48,
    "desc": "Thresholds for Fabric PDs counter (V)",
    "fields": [
      [
        "total_fab_pds_fc_th",
        0,
        16
      ],
      [
        "total_fab_pds_block_th",
        16,
        16
      ],
      [
        "total_fab_pds_fcn_th",
        32,
        16
      ]
    ]
  },
  "txcgm_top_total_ms_pd_th": {
    "type": "register",
    "block": "txcgm_top",
    "width": 108,
    "desc": "Thresholds for MC VOQ, XBAR, OQ PDs (T, S, R)",
    "fields": [
      [
        "total_ms_voq_pds_fc_th",
        0,
        18
      ],
      [
        "total_ms_voq_ms_oq_pds_fc_th",
        18,
        18
      ],
      [
        "total_ms_voq_ms_oq_nwk_oq_pds_fc_th",
        36,
        18
      ],
      [
        "total_ms_voq_pds_drop_th",
        54,
        18
      ],
      [
        "total_ms_voq_ms_oq_pds_drop_th",
        72,
        18
      ],
      [
        "total_ms_voq_ms_oq_nwk_oq_pds_drop_th",
        90,
        18
      ]
    ]
  },
  "txcgm_top_delete_pd_th": {
    "type": "register",
    "block": "txcgm_top",
    "width": 16,
    "desc": "Thresholds for deleted PDs counter",
    "fields": [
      [
        "delete_pd_block_th",
        0,
        16
      ]
    ]
  },
  "txcgm_top_total_sch_uc_buffers_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 76,
    "desc": "Scheduled UC Buffers counter (C+D) debug",
    "fields": [
      [
        "total_sch_uc_buffers_counter",
        0,
        19
      ],
      [
        "total_sch_uc_buffers_max_value",
        19,
        19
      ],
      [
        "total_sch_uc_local_buffers_max_value",
        38,
        19
      ],
      [
        "total_sch_uc_remote_buffers_max_value",
        57,
        19
      ]
    ]
  },
  "txcgm_top_total_pd_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 48,
    "desc": "Total and deleted PDs counter debug",
    "fields": [
      [
        "total_pd_counter",
        0,
        16
      ],
      [
        "total_pd_max_value",
        16,
        16
      ],
      [
        "delete_pd_max_value",
        32,
        16
      ]
    ]
  },
  "txcgm_top_total_sch_uc_pd_cnt_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 32,
    "desc": "Scheduled UC PDs counter (Z) debug",
    "fields": [
      [
        "total_sch_uc_pd_counter",
        0,
        16
      ],
      [
        "total_sch_uc_pd_max_value",
        16,
        16
      ]
    ]
  },
  "txcgm_top_total_mc_cnt_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 32,
    "desc": "MC PDs counter (W) debug",
    "fields": [
      [
        "total_mc_pd_counter",
        0,
        16
      ],
      [
        "total_mc_pd_max_value",
        16,
        16
      ]
    ]
  },
  "txcgm_top_total_fab_cnt_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 32,
    "desc": "Fabric PDs counter (V) debug",
    "fields": [
      [
        "total_fab_pd_counter",
        0,
        16
      ],
      [
        "total_fab_pd_max_value",
        16,
        16
      ]
    ]
  },
  "txcgm_top_total_ms_cnt_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 70,
    "desc": "MS PDs counter debug (T, S-T, S, R)",
    "fields": [
      [
        "total_ms_voq_pd_max_value",
        0,
        18
      ],
      [
        "total_ms_oq_pd_max_value",
        18,
        16
      ],
      [
        "total_ms_voq_ms_oq_pd_max_value",
        34,
        18
      ],
      [
        "total_ms_voq_ms_oq_nwk_oq_pds_max_value",
        52,
        18
      ]
    ]
  },
  "txcgm_top_global_cgm_indication_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 9,
    "desc": "Global CGM sticky indications to slices or external blocks",
    "fields": [
      [
        "global_drop_total_pds",
        0,
        1
      ],
      [
        "global_drop_sch_uc_buffers",
        1,
        1
      ],
      [
        "global_drop_local_sch_uc",
        2,
        1
      ],
      [
        "global_drop_sch_uc_pds",
        3,
        1
      ],
      [
        "global_block_sch_uc_pds",
        4,
        1
      ],
      [
        "global_drop_mc_pds",
        5,
        1
      ],
      [
        "global_fc_fab_pds",
        6,
        1
      ],
      [
        "global_block_fab_pds",
        7,
        1
      ],
      [
        "global_device_fc",
        8,
        1
      ]
    ]
  },
  "txcgm_top_fabric_link_fill_level_select_reg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 3,
    "desc": "Selector for fabric link fill level debug",
    "fields": [
      [
        "fabric_link_fill_level_select",
        0,
        3
      ]
    ]
  },
  "txcgm_top_fabric_link_fill_level_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 48,
    "desc": "Selected fabric link fill level debug data",
    "fields": [
      [
        "fabric_link_fill_level",
        0,
        48
      ]
    ]
  },
  "txcgm_top_fabric_flow_control_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 4,
    "desc": "Sticky indications of fabric link flow control",
    "fields": [
      [
        "fabric_ics_flow_control",
        0,
        3
      ],
      [
        "fabric_sch_flow_control",
        3,
        1
      ]
    ]
  },
  "txcgm_top_bypass_voq_flow_control_debug": {
    "type": "register",
    "block": "txcgm_top",
    "width": 256,
    "desc": "Bit per bypass VOQ, indicates flow control status to PDVOQ. Map of specific OQ to 1 of these 256 bits is done by VOQ bypass mapping memory in txcgm slice",
    "fields": [
      [
        "bypass_voq_flow_control",
        0,
        256
      ]
    ]
  },
  "txcgm_top_histogram_selector": {
    "type": "register",
    "block": "txcgm_top",
    "width": 3,
    "desc": "Selector of pool for histogram",
    "fields": [
      [
        "hist_data_select",
        0,
        3
      ]
    ]
  },
  "txcgm_top_debug_pd_field_value_cfg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 155,
    "desc": "PD debugger - programmable counter based on any PD field at FILB to TSMS interface stage. Programmed same for each slice, accounted separately per slice. For example, the user can count number of PDs at all slices with OutColor = 2",
    "fields": [
      [
        "debug_pd_field_value",
        0,
        155
      ]
    ]
  },
  "txcgm_top_debug_pd_field_mask_cfg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 155,
    "desc": "PD debugger for FILB to TSMS interface",
    "fields": [
      [
        "debug_pd_field_mask",
        0,
        155
      ]
    ]
  },
  "txcgm_top_debug_pd_field_status": {
    "type": "register",
    "block": "txcgm_top",
    "width": 96,
    "desc": "PD debug counters for FILB to TSMS interface",
    "fields": [
      [
        "debug_pd_field_cnt",
        0,
        32
      ],
      [
        "debug_pd_total_pd_cnt",
        32,
        32
      ],
      [
        "debug_pd_total_byte_cnt",
        64,
        32
      ]
    ]
  },
  "txcgm_top_buffer_pool_histogram_cfg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 149,
    "desc": "Histogram configurations register, see fields description",
    "fields": [
      [
        "buffer_pool_histogram_th0",
        0,
        19
      ],
      [
        "buffer_pool_histogram_th1",
        19,
        19
      ],
      [
        "buffer_pool_histogram_th2",
        38,
        19
      ],
      [
        "buffer_pool_histogram_th3",
        57,
        19
      ],
      [
        "buffer_pool_histogram_th4",
        76,
        19
      ],
      [
        "buffer_pool_histogram_th5",
        95,
        19
      ],
      [
        "buffer_pool_histogram_th6",
        114,
        19
      ],
      [
        "buffer_pool_histogram_time_interval",
        133,
        16
      ]
    ]
  },
  "txcgm_top_buffer_pool_histogram_status": {
    "type": "register",
    "block": "txcgm_top",
    "width": 264,
    "desc": "Histogram status register, see fields description",
    "fields": [
      [
        "buffer_pool_histogram_value0",
        0,
        32
      ],
      [
        "buffer_pool_histogram_overflow0",
        32,
        1
      ],
      [
        "buffer_pool_histogram_value1",
        33,
        32
      ],
      [
        "buffer_pool_histogram_overflow1",
        65,
        1
      ],
      [
        "buffer_pool_histogram_value2",
        66,
        32
      ],
      [
        "buffer_pool_histogram_overflow2",
        98,
        1
      ],
      [
        "buffer_pool_histogram_value3",
        99,
        32
      ],
      [
        "buffer_pool_histogram_overflow3",
        131,
        1
      ],
      [
        "buffer_pool_histogram_value4",
        132,
        32
      ],
      [
        "buffer_pool_histogram_overflow4",
        164,
        1
      ],
      [
        "buffer_pool_histogram_value5",
        165,
        32
      ],
      [
        "buffer_pool_histogram_overflow5",
        197,
        1
      ],
      [
        "buffer_pool_histogram_value6",
        198,
        32
      ],
      [
        "buffer_pool_histogram_overflow6",
        230,
        1
      ],
      [
        "buffer_pool_histogram_value7",
        231,
        32
      ],
      [
        "buffer_pool_histogram_overflow7",
        263,
        1
      ]
    ]
  },
  "txcgm_top_buffer_pool_histogram_max_wmk_reg": {
    "type": "register",
    "block": "txcgm_top",
    "width": 51,
    "desc": "Histogram max watermark register, see fields description",
    "fields": [
      [
        "buffer_pool_histogram_max_wmk",
        0,
        19
      ],
      [
        "buffer_pool_histogram_max_wmk_time",
        19,
        32
      ]
    ]
  },
  "txcgm_top_source_link_map": {
    "type": "memory",
    "block": "txcgm_top",
    "width": 5,
    "desc": "Mapping of PD.SourceIf[7:2] to source fabric link, used for decrementing TS monitor per MS-VOQ counters. Memory is per source slice due to changing number of fabric links in each slice.",
    "fields": [
      [
        "source_link_map_data",
        0,
        5
      ]
    ]
  },
  "txpdr_interrupt_register": {
    "type": "register",
    "block": "txpdr",
    "width": 2,
    "desc": "Master Interrupt Register",
    "fields": [
      [
        "mem_protect_interrupt_summary",
        0,
        1
      ],
      [
        "general_interrupt_register_summary",
        1,
        1
      ]
    ]
  },
  "txpdr_mem_protect_interrupt": {
    "type": "register",
    "block": "txpdr",
    "width": 3,
    "desc": "ECC/Parity Interrupt Register",
    "fields": [
      [
        "ecc_1b_err_interrupt",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt",
        1,
        1
      ],
      [
        "parity_err_interrupt",
        2,
        1
      ]
    ]
  },
  "txpdr_mem_protect_interrupt_test": {
    "type": "register",
    "block": "txpdr",
    "width": 3,
    "desc": "ECC/Parity Interrupt test register",
    "fields": [
      [
        "ecc_1b_err_interrupt_test",
        0,
        1
      ],
      [
        "ecc_2b_err_interrupt_test",
        1,
        1
      ],
      [
        "parity_err_interrupt_test",
        2,
        1
      ]
    ]
  },
  "txpdr_ecc_1b_err_interrupt_register_mask": {
    "type": "register",
    "block": "txpdr",
    "width": 6,
    "desc": "ECC 1b Error Interrupt Mask Register",
    "fields": [
      [
        "mc_list_size_ecc_1b_err_interrupt_mask",
        0,
        1
      ],
      [
        "txrq_ecc_1b_err_interrupt_mask",
        1,
        1
      ],
      [
        "txrq_pdm_ecc_1b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mcemdb_req_fifo_ecc_1b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mcemdb_reply_fifo_ecc_1b_err_interrupt_mask",
        4,
        1
      ],
      [
        "bitmap_oqg_map_ecc_1b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "txpdr_ecc_2b_err_interrupt_register_mask": {
    "type": "register",
    "block": "txpdr",
    "width": 6,
    "desc": "ECC 2b Error Interrupt Mask Register",
    "fields": [
      [
        "mc_list_size_ecc_2b_err_interrupt_mask",
        0,
        1
      ],
      [
        "txrq_ecc_2b_err_interrupt_mask",
        1,
        1
      ],
      [
        "txrq_pdm_ecc_2b_err_interrupt_mask",
        2,
        1
      ],
      [
        "mcemdb_req_fifo_ecc_2b_err_interrupt_mask",
        3,
        1
      ],
      [
        "mcemdb_reply_fifo_ecc_2b_err_interrupt_mask",
        4,
        1
      ],
      [
        "bitmap_oqg_map_ecc_2b_err_interrupt_mask",
        5,
        1
      ]
    ]
  },
  "txpdr_ecc_1b_err_initiate_register": {
    "type": "register",
    "block": "txpdr",
    "width": 6,
    "desc": "ECC 1b Error Initiator Register",
    "fields": [
      [
        "mc_list_size_ecc_1b_err_initiate",
        0,
        1
      ],
      [
        "txrq_ecc_1b_err_initiate",
        1,
        1
      ],
      [
        "txrq_pdm_ecc_1b_err_initiate",
        2,
        1
      ],
      [
        "mcemdb_req_fifo_ecc_1b_err_initiate",
        3,
        1
      ],
      [
        "mcemdb_reply_fifo_ecc_1b_err_initiate",
        4,
        1
      ],
      [
        "bitmap_oqg_map_ecc_1b_err_initiate",
        5,
        1
      ]
    ]
  },
  "txpdr_ecc_2b_err_initiate_register": {
    "type": "register",
    "block": "txpdr",
    "width": 6,
    "desc": "ECC 2b Error Initiator Register",
    "fields": [
      [
        "mc_list_size_ecc_2b_err_initiate",
        0,
        1
      ],
      [
        "txrq_ecc_2b_err_initiate",
        1,
        1
      ],
      [
        "txrq_pdm_ecc_2b_err_initiate",
        2,
        1
      ],
      [
        "mcemdb_req_fifo_ecc_2b_err_initiate",
        3,
        1
      ],
      [
        "mcemdb_reply_fifo_ecc_2b_err_initiate",
        4,
        1
      ],
      [
        "bitmap_oqg_map_ecc_2b_err_initiate",
        5,
        1
      ]
    ]
  },
  "txpdr_mem_protect_err_status": {
    "type": "register",
    "block": "txpdr",
    "width": 6,
    "desc": "Memory SER protected error status",
    "fields": [
      [
        "mc_list_size_err_int",
        0,
        1
      ],
      [
        "txrq_err_int",
        1,
        1
      ],
      [
        "txrq_pdm_err_int",
        2,
        1
      ],
      [
        "mcemdb_req_fifo_err_int",
        3,
        1
      ],
      [
        "mcemdb_reply_fifo_err_int",
        4,
        1
      ],
      [
        "bitmap_oqg_map_err_int",
        5,
        1
      ]
    ]
  },
  "txpdr_selected_ser_error_info": {
    "type": "register",
    "block": "txpdr",
    "width": 16,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "mem_err_addr",
        0,
        14
      ],
      [
        "mem_err_type",
        14,
        2
      ]
    ]
  },
  "txpdr_ser_error_debug_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 4,
    "desc": "Address and Type of SER error of selected memory",
    "fields": [
      [
        "erroneous_memory_selector",
        0,
        3
      ],
      [
        "reset_memory_errors",
        3,
        1
      ]
    ]
  },
  "txpdr_ecc_1b_err_debug": {
    "type": "register",
    "block": "txpdr",
    "width": 16,
    "desc": "ECC 1b Error Counter",
    "fields": [
      [
        "ecc_1b_err_counter",
        0,
        16
      ]
    ]
  },
  "txpdr_ecc_2b_err_debug": {
    "type": "register",
    "block": "txpdr",
    "width": 16,
    "desc": "ECC 2b Error Counter",
    "fields": [
      [
        "ecc_2b_err_counter",
        0,
        16
      ]
    ]
  },
  "txpdr_counter_timer": {
    "type": "register",
    "block": "txpdr",
    "width": 33,
    "desc": "Defines Counter Timer parameters",
    "fields": [
      [
        "counter_timer_enable",
        0,
        1
      ],
      [
        "counter_timer_cycle",
        1,
        32
      ]
    ]
  },
  "txpdr_counter_timer_trigger_reg": {
    "type": "register",
    "block": "txpdr",
    "width": 1,
    "desc": "Activates Counter Timer",
    "fields": [
      [
        "counter_timer_trigger",
        0,
        1
      ]
    ]
  },
  "txpdr_memory_access_timeout": {
    "type": "register",
    "block": "txpdr",
    "width": 38,
    "desc": "Defines parameters for memory access timer expiry",
    "fields": [
      [
        "bubble_counter_thr",
        0,
        16
      ],
      [
        "timeout_counter_thr",
        16,
        16
      ],
      [
        "ans_window_counter_thr",
        32,
        6
      ]
    ]
  },
  "txpdr_broadcast_config_reg": {
    "type": "register",
    "block": "txpdr",
    "width": 12,
    "desc": "Config Top broadcast parameters",
    "fields": [
      [
        "broadcast_id",
        0,
        12
      ]
    ]
  },
  "txpdr_memory_prot_bypass": {
    "type": "register",
    "block": "txpdr",
    "width": 3,
    "desc": "Bypass for ECC/Parity, used for debug",
    "fields": [
      [
        "disable_ecc",
        0,
        1
      ],
      [
        "cif_prot_gen_bypass",
        1,
        1
      ],
      [
        "cif_prot_fix_bypass",
        2,
        1
      ]
    ]
  },
  "txpdr_soft_reset_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 1,
    "desc": "Soft Reset Configuration for the block",
    "fields": [
      [
        "soft_rstn",
        0,
        1
      ]
    ]
  },
  "txpdr_mbist_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 73,
    "desc": "MBIST Configuration for the block",
    "fields": [
      [
        "sacr1_p_rme",
        0,
        1
      ],
      [
        "sacr1_p_rm",
        1,
        4
      ],
      [
        "sacu2_p_rme",
        5,
        1
      ],
      [
        "sacu2_p_rm",
        6,
        4
      ],
      [
        "sadc1_p_rme",
        10,
        1
      ],
      [
        "sadc1_p_rm",
        11,
        4
      ],
      [
        "sadr2_p_rmea",
        15,
        1
      ],
      [
        "sadr2_p_rma",
        16,
        4
      ],
      [
        "sadr2_p_rmeb",
        20,
        1
      ],
      [
        "sadr2_p_rmb",
        21,
        4
      ],
      [
        "sads2_p_rmea",
        25,
        1
      ],
      [
        "sads2_p_rma",
        26,
        4
      ],
      [
        "sads2_p_rmeb",
        30,
        1
      ],
      [
        "sads2_p_rmb",
        31,
        4
      ],
      [
        "sasr1_p_rme",
        35,
        1
      ],
      [
        "sasr1_p_rm",
        36,
        4
      ],
      [
        "sass1_p_rme",
        40,
        1
      ],
      [
        "sass1_p_rm",
        41,
        4
      ],
      [
        "sass2_p_rmea",
        45,
        1
      ],
      [
        "sass2_p_rma",
        46,
        4
      ],
      [
        "sass2_p_rmeb",
        50,
        1
      ],
      [
        "sass2_p_rmb",
        51,
        4
      ],
      [
        "sasu2_p_rme",
        55,
        1
      ],
      [
        "sasu2_p_rm",
        56,
        4
      ],
      [
        "sadu1_p_rme",
        60,
        1
      ],
      [
        "sadu1_p_rm",
        61,
        4
      ],
      [
        "sads2_p_ra",
        65,
        2
      ],
      [
        "sadu1_p_wa",
        67,
        3
      ],
      [
        "sadu1_p_wpulse",
        70,
        3
      ]
    ]
  },
  "txpdr_power_down_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 1,
    "desc": "Power Down Configuration for the block",
    "fields": [
      [
        "power_down",
        0,
        1
      ]
    ]
  },
  "txpdr_spare_reg": {
    "type": "register",
    "block": "txpdr",
    "width": 128,
    "desc": "Spare register",
    "fields": [
      [
        "spare_register",
        0,
        128
      ]
    ]
  },
  "txpdr_pmro_ctrl": {
    "type": "register",
    "block": "txpdr",
    "width": 32,
    "desc": "PMRO controller configuration",
    "fields": [
      [
        "pmro_rstn",
        0,
        1
      ],
      [
        "pmro_config_en",
        1,
        1
      ],
      [
        "pmro_start",
        2,
        1
      ],
      [
        "pmro_ring_en",
        3,
        7
      ],
      [
        "pmro_cnt_period",
        10,
        22
      ]
    ]
  },
  "txpdr_pmro_status": {
    "type": "register",
    "block": "txpdr",
    "width": 23,
    "desc": "PMRO status configuration",
    "fields": [
      [
        "pmro_count_out",
        0,
        22
      ],
      [
        "pmro_done",
        22,
        1
      ]
    ]
  },
  "txpdr_mirror_bus_conf_reg": {
    "type": "register",
    "block": "txpdr",
    "width": 11,
    "desc": "Mirror Bus configurations",
    "fields": [
      [
        "mirror_bus_en",
        0,
        1
      ],
      [
        "mirror_bus_sel",
        1,
        10
      ]
    ]
  },
  "txpdr_mirror_bus_status": {
    "type": "register",
    "block": "txpdr",
    "width": 32,
    "desc": "Mirror Bus status result",
    "fields": [
      [
        "mirror_bus",
        0,
        32
      ]
    ]
  },
  "txpdr_device_time_offset_cfg": {
    "type": "register",
    "block": "txpdr",
    "width": 10,
    "desc": "Define time offset configuration",
    "fields": [
      [
        "device_time_offset",
        0,
        10
      ]
    ]
  },
  "txpdr_general_interrupt_register": {
    "type": "register",
    "block": "txpdr",
    "width": 3,
    "desc": "TxPDR interrupt register",
    "fields": [
      [
        "mc_flb_to_uc_oq",
        0,
        1
      ],
      [
        "empty_link_bitmap",
        1,
        1
      ],
      [
        "ucdv_rollover",
        2,
        1
      ]
    ]
  },
  "txpdr_general_interrupt_register_mask": {
    "type": "register",
    "block": "txpdr",
    "width": 3,
    "desc": "This register masks GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "mc_flb_to_uc_oq_mask",
        0,
        1
      ],
      [
        "empty_link_bitmap_mask",
        1,
        1
      ],
      [
        "ucdv_rollover_mask",
        2,
        1
      ]
    ]
  },
  "txpdr_general_interrupt_register_test": {
    "type": "register",
    "block": "txpdr",
    "width": 3,
    "desc": "This register tests GeneralInterruptRegister interrupt register",
    "fields": [
      [
        "mc_flb_to_uc_oq_test",
        0,
        1
      ],
      [
        "empty_link_bitmap_test",
        1,
        1
      ],
      [
        "ucdv_rollover_test",
        2,
        1
      ]
    ]
  },
  "txpdr_slice_mode_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 5,
    "desc": "Slice mode",
    "fields": [
      [
        "slice_mode",
        0,
        4
      ],
      [
        "fe_mode",
        4,
        1
      ]
    ]
  },
  "txpdr_fabric_link_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 15,
    "desc": "Queue offset for each context inside fabric link",
    "fields": [
      [
        "fabric_rlb_uc_hp_offset",
        0,
        3
      ],
      [
        "fabric_rlb_uc_lp_offset",
        3,
        3
      ],
      [
        "fabric_rlb_mc_offset",
        6,
        3
      ],
      [
        "fabric_flb_mc_hp_offset",
        9,
        3
      ],
      [
        "fabric_flb_mc_lp_offset",
        12,
        3
      ]
    ]
  },
  "txpdr_uc_mc_wfq_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 11,
    "desc": "UC MC arbitration at the TxPDR output",
    "fields": [
      [
        "uc_weight",
        0,
        5
      ],
      [
        "mc_weight",
        5,
        5
      ],
      [
        "uc_sp_mode",
        10,
        1
      ]
    ]
  },
  "txpdr_txrq_mappings": {
    "type": "register",
    "block": "txpdr",
    "width": 77,
    "desc": "Mappings on PD fields for choosing 1 of 4 TXRQs",
    "fields": [
      [
        "scheduled_txrq_map",
        0,
        1
      ],
      [
        "unscheduled_txrq_map",
        1,
        8
      ],
      [
        "tc_color_map",
        9,
        64
      ],
      [
        "enable_txrq_deq_drop",
        73,
        4
      ]
    ]
  },
  "txpdr_txrq_wfq_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 11,
    "desc": "Scheduled versus Unscheduled TXRQ arbitration at single copy resolution",
    "fields": [
      [
        "wfq_weight_sch",
        0,
        5
      ],
      [
        "wfq_weight_unsch",
        5,
        5
      ],
      [
        "wfq_sp_mode",
        10,
        1
      ]
    ]
  },
  "txpdr_txrq_fifo_size_cfg": {
    "type": "register",
    "block": "txpdr",
    "width": 21,
    "desc": "Static configuration of 4 TXRQ sizes. NOTE: After changing this register, soft reset should be performed",
    "fields": [
      [
        "txrq_fifo_size",
        0,
        11
      ],
      [
        "txrq_fifo_start_addr",
        11,
        10
      ]
    ]
  },
  "txpdr_txrq_thresholds": {
    "type": "register",
    "block": "txpdr",
    "width": 156,
    "desc": "Drop and flow control thresholds of the 4 TXRQs - scheduled/unscheduled and HP/LP",
    "fields": [
      [
        "sch_hp_fc_th",
        0,
        10
      ],
      [
        "sch_lp_fc_th",
        10,
        10
      ],
      [
        "sch_hp_byte_fc_th",
        20,
        24
      ],
      [
        "sch_lp_byte_fc_th",
        44,
        24
      ],
      [
        "sch_hp_drop_th",
        68,
        10
      ],
      [
        "sch_lp_drop_th",
        78,
        10
      ],
      [
        "unsch_hp_drop_th",
        88,
        10
      ],
      [
        "unsch_lp_drop_th",
        98,
        10
      ],
      [
        "unsch_hp_byte_drop_th",
        108,
        24
      ],
      [
        "unsch_lp_byte_drop_th",
        132,
        24
      ]
    ]
  },
  "txpdr_txrq_tc_color_based_thresholds": {
    "type": "register",
    "block": "txpdr",
    "width": 20,
    "desc": "Drop TC and color based thresholds of the 4 TXRQs. Used if TC and Color are mapped to 1 of these thresholds in TcColorMap register.",
    "fields": [
      [
        "txrq_tc_color_based_th0",
        0,
        10
      ],
      [
        "txrq_tc_color_based_th1",
        10,
        10
      ]
    ]
  },
  "txpdr_txrq_flow_control_map": {
    "type": "register",
    "block": "txpdr",
    "width": 1,
    "desc": "Defines polarity of the SCH flow control",
    "fields": [
      [
        "sch_hp_fc_map",
        0,
        1
      ]
    ]
  },
  "txpdr_relicator_key_mappings": {
    "type": "register",
    "block": "txpdr",
    "width": 3,
    "desc": "Defines slice number as part of the MC-EMDB key",
    "fields": [
      [
        "slice_map",
        0,
        3
      ]
    ]
  },
  "txpdr_txrq_size_debug": {
    "type": "register",
    "block": "txpdr",
    "width": 36,
    "desc": "TXRQ fifo size debug indications, register per TXRQ",
    "fields": [
      [
        "txrq_pd_size_wmk",
        0,
        11
      ],
      [
        "txrq_byte_size_wmk",
        11,
        24
      ],
      [
        "txrq_full",
        35,
        1
      ]
    ]
  },
  "txpdr_txrq_sch_debug": {
    "type": "register",
    "block": "txpdr",
    "width": 1,
    "desc": "Flow control to SCH debug indications",
    "fields": [
      [
        "txrq_sch_fc",
        0,
        1
      ]
    ]
  },
  "txpdr_mcemdb_req_debug": {
    "type": "register",
    "block": "txpdr",
    "width": 8,
    "desc": "MC-EMDB request fifo (pending for results) debug indications",
    "fields": [
      [
        "mcemdb_req_fifo_wmk",
        0,
        8
      ]
    ]
  },
  "txpdr_mcid_cache_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 26,
    "desc": "MC-EMDB cache configuration - stores last 8 accesses",
    "fields": [
      [
        "disable_cache",
        0,
        1
      ],
      [
        "cache_reset_cycle",
        1,
        24
      ],
      [
        "cache_reset_trig",
        25,
        1
      ]
    ]
  },
  "txpdr_link_bitmap_configuration": {
    "type": "register",
    "block": "txpdr",
    "width": 4,
    "desc": "Not functional feature, the register value should not be changed",
    "fields": [
      [
        "bitmap_use_tc_profile",
        0,
        1
      ],
      [
        "bitmap_tc_profile",
        1,
        3
      ]
    ]
  },
  "txpdr_internal_fifo_alm_full": {
    "type": "register",
    "block": "txpdr",
    "width": 12,
    "desc": "Internal TxPDR fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "mcemdb_req_alm_full",
        0,
        7
      ],
      [
        "bitmap_oqg_map_alm_full",
        7,
        3
      ],
      [
        "uc_fifo_alm_full",
        10,
        2
      ]
    ]
  },
  "txpdr_txpdr_last_pd_sel_cfg": {
    "type": "register",
    "block": "txpdr",
    "width": 3,
    "desc": "Last packet descriptors bit select configuration at TxPDR in stage.",
    "fields": [
      [
        "txpdr_last_pd_sel",
        0,
        3
      ]
    ]
  },
  "txpdr_txpdr_last_pd_data": {
    "type": "register",
    "block": "txpdr",
    "width": 32,
    "desc": "Last packet descriptor selected data",
    "fields": [
      [
        "txpdr_last_pd",
        0,
        32
      ]
    ]
  },
  "txpdr_internal_debug_cfg": {
    "type": "register",
    "block": "txpdr",
    "width": 9,
    "desc": "Internal TxPDR fifos size settings. This register was used for tuning parameters during the design phase. The value of this field is optimized for the current silicon, thus the user is not expected to change its value unless instructed by Cisco Systems, Inc.",
    "fields": [
      [
        "txcgm_cbt_alm_full_cfg",
        0,
        3
      ],
      [
        "rxpdr_cbt_alm_full_cfg",
        3,
        5
      ],
      [
        "disable_ucdv_res",
        8,
        1
      ]
    ]
  },
  "txpdr_cbt_not_ready_counter": {
    "type": "register",
    "block": "txpdr",
    "width": 64,
    "desc": "Counters of back pressure clocks of the outgoing interfaces",
    "fields": [
      [
        "txcgm_cbt_not_ready_cnt",
        0,
        32
      ],
      [
        "rxpdr_cbt_not_ready_cnt",
        32,
        32
      ]
    ]
  },
  "txpdr_txrq_total_drop_counter": {
    "type": "register",
    "block": "txpdr",
    "width": 32,
    "desc": "Counter of packets dropped by TXRQ",
    "fields": [
      [
        "txrq_total_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txpdr_txrq_full_total_drop_counter": {
    "type": "register",
    "block": "txpdr",
    "width": 32,
    "desc": "Counter of packets dropped by TXRQ full, total counter",
    "fields": [
      [
        "txrq_full_total_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txpdr_txrq_full_drop_counter": {
    "type": "register",
    "block": "txpdr",
    "width": 32,
    "desc": "Counter of packets dropped by TXRQ full, counts per TXRQ",
    "fields": [
      [
        "txrq_full_drop_cnt",
        0,
        32
      ]
    ]
  },
  "txpdr_txrq_th0_drop_counter": {
    "type": "register",
    "block": "txpdr",
    "width": 64,
    "desc": "Counter of packets dropped by TXRQ TC Color based threshold 0, counts per TXRQ",
    "fields": [
      [
        "txrq_th0_drop_cnt",
        0,
        32
      ],
      [
        "txrq_th0_deq_drop_cnt",
        32,
        32
      ]
    ]
  },
  "txpdr_txrq_th1_drop_counter": {
    "type": "register",
    "block": "txpdr",
    "width": 64,
    "desc": "Counter of packets dropped by TXRQ TC Color based threshold 1, counts per TXRQ",
    "fields": [
      [
        "txrq_th1_drop_cnt",
        0,
        32
      ],
      [
        "txrq_th1_deq_drop_cnt",
        32,
        32
      ]
    ]
  },
  "txpdr_null_copy_counter": {
    "type": "register",
    "block": "txpdr",
    "width": 16,
    "desc": "Counter of silent dropped copies as a result of null MC-EMDB entry - this doesn\ufffdt imply congestion, but SW configuration of the MC-EMDB",
    "fields": [
      [
        "null_copy_cnt",
        0,
        16
      ]
    ]
  },
  "txpdr_empty_fe_bitmap_counter": {
    "type": "register",
    "block": "txpdr",
    "width": 16,
    "desc": "Counts received empty link bitmap in FE mode",
    "fields": [
      [
        "empty_fe_bitmap_cnt",
        0,
        16
      ]
    ]
  },
  "txpdr_debug_pd_field_value_cfg": {
    "type": "register",
    "block": "txpdr",
    "width": 159,
    "desc": "PD debugger - programmable counter based on any PD field. For example, the user can count number of PDs  with OutColor = 2",
    "fields": [
      [
        "debug_pd_field_value",
        0,
        159
      ]
    ]
  },
  "txpdr_debug_pd_field_mask_cfg": {
    "type": "register",
    "block": "txpdr",
    "width": 159,
    "desc": "PD debugger",
    "fields": [
      [
        "debug_pd_field_mask",
        0,
        159
      ]
    ]
  },
  "txpdr_debug_pd_field_status": {
    "type": "register",
    "block": "txpdr",
    "width": 96,
    "desc": "PD debug counters",
    "fields": [
      [
        "debug_pd_field_cnt",
        0,
        32
      ],
      [
        "debug_pd_total_pd_cnt",
        32,
        32
      ],
      [
        "debug_pd_total_byte_cnt",
        64,
        32
      ]
    ]
  },
  "txpdr_mc_list_size": {
    "type": "memory",
    "block": "txpdr",
    "width": 44,
    "desc": "MC group list size. Entry per 4 consecutive MC groups. Each 11b in the entry is the list size of MC group in MC-EMDB entries units",
    "fields": [
      [
        "mc_list_size_data",
        0,
        44
      ]
    ]
  },
  "txpdr_txrq": {
    "type": "memory",
    "block": "txpdr",
    "width": 29,
    "desc": "TX replication queues. Each entry holds the data needed for replication engine (see description per field)",
    "fields": [
      [
        "format",
        0,
        1
      ],
      [
        "mc_id",
        1,
        16
      ],
      [
        "list_size",
        17,
        11
      ],
      [
        "is_rcy",
        28,
        1
      ]
    ]
  },
  "txpdr_txrq_pdm": {
    "type": "memory",
    "block": "txpdr",
    "width": 91,
    "desc": "Stores the entire PD of the replicated packet in Txrq table",
    "fields": [
      [
        "source_slice",
        0,
        3
      ],
      [
        "ucdv",
        3,
        14
      ],
      [
        "packet_id",
        17,
        19
      ],
      [
        "packet_size",
        36,
        14
      ],
      [
        "congestion",
        50,
        1
      ],
      [
        "tc",
        51,
        3
      ],
      [
        "color",
        54,
        2
      ],
      [
        "cgm_counter_type",
        56,
        3
      ],
      [
        "lm_request",
        59,
        1
      ],
      [
        "elephant",
        60,
        1
      ],
      [
        "fabric_context",
        61,
        2
      ],
      [
        "lb_key",
        63,
        16
      ],
      [
        "lm_counter_index",
        79,
        2
      ],
      [
        "is_mirror",
        81,
        1
      ],
      [
        "mirror_cmd",
        82,
        5
      ],
      [
        "voq_congestion",
        87,
        4
      ]
    ]
  },
  "txpdr_mcemdb_req_fifo": {
    "type": "memory",
    "block": "txpdr",
    "width": 117,
    "desc": "MC-EMDB request fifo (pending for MC-EMDB results)",
    "fields": [
      [
        "pd",
        0,
        91
      ],
      [
        "last",
        91,
        1
      ],
      [
        "txrq_id",
        92,
        2
      ],
      [
        "format",
        94,
        1
      ],
      [
        "bitmap",
        95,
        18
      ],
      [
        "cache_hit",
        113,
        1
      ],
      [
        "cache_hit_index",
        114,
        3
      ]
    ]
  },
  "txpdr_mcemdb_reply_fifo": {
    "type": "memory",
    "block": "txpdr",
    "width": 73,
    "desc": "MC-EMDB reply fifo - holds the returned results",
    "fields": [
      [
        "data",
        0,
        73
      ]
    ]
  },
  "txpdr_mirror_map": {
    "type": "memory",
    "block": "txpdr",
    "width": 17,
    "desc": "MC mirror table. For each mirror copy, returns whether  mirror copy is MC type, and if so its MC-ID",
    "fields": [
      [
        "mc_mirror_mcid",
        0,
        16
      ],
      [
        "mc_mirror_is_mc",
        16,
        1
      ]
    ]
  },
  "txpdr_tc_profile_map": {
    "type": "memory",
    "block": "txpdr",
    "width": 3,
    "desc": "Defines OQG (TM port) offset of the copy, accessed with {TC-map-profile from MC-EMDB, packet TC}",
    "fields": [
      [
        "tc_profile_map_data",
        0,
        3
      ]
    ]
  },
  "txpdr_bitmap_oqg_map": {
    "type": "memory",
    "block": "txpdr",
    "width": 8,
    "desc": "Used for bitmap format of the MC-EMDB. The bitmap format uses 192b bitmap (4 entries with 48b each). For each asserted bit, the table returns destination OQG (TM port). Last 24 entries are used for FE link bitmap",
    "fields": [
      [
        "oq_group_id",
        0,
        8
      ]
    ]
  },
  "txpdr_fabric_link_map": {
    "type": "memory",
    "block": "txpdr",
    "width": 6,
    "desc": "Relevant for LC fabric slice only, maps PD.RlbTxFabricLink to OQG that represent this link",
    "fields": [
      [
        "fabric_link_port_map",
        0,
        6
      ]
    ]
  },
  "sim_access_i2c_testing_dummy_reg": {
    "type": "register",
    "block": "sim_access",
    "width": 32,
    "desc": "Dummy register for i2c testing",
    "fields": [
      [
        "i2c_testing_dummy_reg_field",
        0,
        32
      ]
    ]
  },
  "sim_access_nsim_command_mem": {
    "type": "memory",
    "block": "sim_access",
    "width": 32,
    "desc": "Memory for NSIM command structure",
    "fields": [
      [
        "nsim_command_mem_line",
        0,
        32
      ]
    ]
  },
  "sim_access_mem_address_place_udk": {
    "type": "memory",
    "block": "sim_access",
    "width": 16384,
    "desc": "Memory for NSIM Place UDK command",
    "fields": [
      [
        "nsim_command_mem_line",
        0,
        16384
      ]
    ]
  }
}