
// This file has been automatically generated using nplc.py. Do not edit it manually.
// Version: 1.76.2_0.0.0.0 generated on devsrv15.leaba.local at 2021-05-12 16:04:51


#include "nplapi_translator/npl_table_entry_translation.h"
#include "nplapi/npl_types.h"
#include <stdint.h>

using namespace silicon_one;

void translate_udk_entry(const npl_ud_key_t& key, const npl_ud_key_t& mask, udk_translation_info* trans_info, ternary_table_generic_entry_t& current_entry)
{
    for (size_t i = 0; i < trans_info->number_of_components; i++) {
        auto& field = trans_info->placement_info[i];
        if (!mask.udfs[i].pack().is_zero()){
            for (auto& fragment : field.fragments_vec) {
                int16_t fragment_lsb_offset_in_component = trans_info->placement_info[i].total_width - (fragment.offset_in_component + fragment.width);
                current_entry.key.set_bits(fragment.offset + fragment.width - 1, fragment.offset, key.udfs[i].pack().bits(fragment_lsb_offset_in_component + fragment.width - 1, fragment_lsb_offset_in_component));
                current_entry.mask.set_bits(fragment.offset + fragment.width - 1, fragment.offset, mask.udfs[i].pack().bits(fragment_lsb_offset_in_component + fragment.width - 1, fragment_lsb_offset_in_component));
            }
        }
    }
}

uint32_t nplapi_table_entry_translation::translate_ene_macro_id(npl_context_e context, const npl_ene_macro_ids_e& ene_macro)
{
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ADD_ONE_VLAN_ENE_MACRO) {
        return 0x40;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ADD_TWO_VLANS_ENE_MACRO) {
        return 0x44;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_10_INSTRUCTIONS_MACRO) {
        return 0x40;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_16_INSTRUCTIONS_MACRO) {
        return 0x4a;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_20_INSTRUCTIONS_MACRO) {
        return 0x5a;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_26_INSTRUCTIONS_MACRO) {
        return 0x6e;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_30_INSTRUCTIONS_MACRO) {
        return 0x88;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_48_INSTRUCTIONS_MACRO) {
        return 0xa6;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_6_INSTRUCTIONS_MACRO) {
        return 0xd6;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_8_INSTRUCTIONS_MACRO) {
        return 0xdc;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_DMA_8BYTES_HEADER_MACRO) {
        return 0x56;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_MACRO) {
        return 0xe4;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_AND_COUNT_MACRO) {
        return 0x40;
    }
    
    if ((context == NPL_FABRIC_ELEMENT_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_AND_COUNT_MACRO) {
        return 0x40;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_AND_COUNT_MACRO) {
        return 0x48;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_AND_COUNT_MACRO) {
        return 0x5a;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_AND_COUNT_MACRO) {
        return 0xe8;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_MACRO) {
        return 0x44;
    }
    
    if ((context == NPL_FABRIC_ELEMENT_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_MACRO) {
        return 0x44;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_MACRO) {
        return 0x4c;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_MACRO) {
        return 0x5e;
    }
    
    if ((context == NPL_UDC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NOP_MACRO) {
        return 0xec;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_NPU_HOST_LRI2LRO_MACRO) {
        return 0x50;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ENE_SVL_NPU_HEADER_MACRO) {
        return 0x62;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_ERSPAN_II_HEADER_ENE_MACRO) {
        return 0x6c;
    }
    
    if ((context == NPL_FABRIC_ELEMENT_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_FABRIC_ELEMENT_KEEPALIVE_ENE_MACRO) {
        return 0x48;
    }
    
    if ((context == NPL_FABRIC_ELEMENT_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_FABRIC_ELEMENT_TS1_ENE_MACRO) {
        return 0x4c;
    }
    
    if ((context == NPL_FABRIC_ELEMENT_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_FABRIC_ELEMENT_TS3_ENE_MACRO) {
        return 0x50;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_FLB_FABRIC_HEADER_ENE_MACRO) {
        return 0x48;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_FLB_MLP_FABRIC_HEADER_ENE_MACRO) {
        return 0x4d;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_GRE_MPLS_ENE_MACRO) {
        return 0x72;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_GRE_NO_KEY_ENE_MACRO) {
        return 0x41;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_GRE_WITH_SN_ENE_MACRO) {
        return 0x40;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_IPV4_ENE_MACRO) {
        return 0x76;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_IPV6_ENE_MACRO) {
        return 0x7d;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_KEEPALIVE_FABRIC_HEADER_ENE_MACRO) {
        return 0x53;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_KEEPALIVE_MLP_ENE_MACRO) {
        return 0x57;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_MMM_TM_HEADER_ENE_MACRO) {
        return 0x5b;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_MMM_TM_HEADER_WITH_SOFT_NPUH_ENE_MACRO) {
        return 0x60;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_MPLS_IMPOSE_1_TO_4_FIRST_LABELS_ENE_MACRO) {
        return 0xfa;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_MPLS_IMPOSE_3_TO_8_LABELS_ENE_MACRO) {
        return 0xd;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_MPLS_IMPOSE_INNER_AND_1_TO_4_LABELS_ENE_MACRO) {
        return 0xf7;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_MPLS_IMPOSE_INNER_LABEL_ENE_MACRO) {
        return 0x31;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_MUM_TM_HEADER_ENE_MACRO) {
        return 0x66;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_MUM_TM_HEADER_WITH_SOFT_NPUH_ENE_MACRO) {
        return 0x6b;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_NH_ETHERNET_NO_VLAN_ENE_MACRO) {
        return 0x8b;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_NH_ETHERNET_NO_VLAN_INNER_VXLAN_ENE_MACRO) {
        return 0x93;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_NH_ETHERNET_WITH_ONE_VLAN_ENE_MACRO) {
        return 0x97;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_NH_ETHERNET_WITH_TWO_VLAN_ENE_MACRO) {
        return 0xa0;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_NPU_HEADER_ENE_MACRO) {
        return 0x71;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_NPU_HEADER_WITH_SOFT_NPUH_ENE_MACRO) {
        return 0x75;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_OAMP_PFC_ETH_ENE_MACRO) {
        return 0x54;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_OAMP_PUNT_ETH_ENE_MACRO) {
        return 0x63;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_PUNT_VLAN_ENE_MACRO) {
        return 0x4d;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_PUSH_INJECT_ETH_HEADER_ENE_MACRO) {
        return 0x67;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_PUSH_INJECT_ETH_HEADER_ENE_MACRO) {
        return 0xad;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_PUSH_INJECT_HEADER_ENE_MACRO) {
        return 0x6c;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_PWE_NO_CW_WITH_FAT_ENE_MACRO) {
        return 0x46;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_PWE_WITH_CW_NO_FAT_ENE_MACRO) {
        return 0xb2;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_PWE_WITH_CW_WITH_FAT_ENE_MACRO) {
        return 0x45;
    }
    
    if ((context == NPL_HOST_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_REMOVE_PUNT_HEADER_ENE_MACRO) {
        return 0x75;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_SN_PLB_FABRIC_HEADER_ONE_PACKET_ENE_MACRO) {
        return 0x7a;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_SN_PLB_FABRIC_HEADER_TWO_PACKETS_ENE_MACRO) {
        return 0x7e;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TS1_PLB_FABRIC_HEADER_ONE_PACKET_ENE_MACRO) {
        return 0x82;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TS1_PLB_FABRIC_HEADER_TWO_PACKETS_ENE_MACRO) {
        return 0x86;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TS3_PLB_FABRIC_HEADER_ONE_PACKET_ENE_MACRO) {
        return 0x8a;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TS3_PLB_FABRIC_HEADER_TWO_PACKETS_ENE_MACRO) {
        return 0x8e;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TX_INJECT_HEADER_AND_ETH_HEADER_ENE_MACRO) {
        return 0xb7;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TX_INJECT_HEADER_WITH_NPUH_ENE_MACRO) {
        return 0xc2;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TX_PUNT_ETH_ENE_MACRO) {
        return 0x4c;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TX_PUNT_ETH_NO_VLAN_ENE_MACRO) {
        return 0xd0;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TX_PUNT_HEADER_ENE_MACRO) {
        return 0xd8;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TX_PUNT_METADATA_ENE_MACRO) {
        return 0xe4;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_TX_PUNT_NPU_HOST_HEADER_ENE_MACRO) {
        return 0xe8;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_UDP_ENE_MACRO) {
        return 0xec;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_UNICAST_FLB_TM_HEADER_ENE_MACRO) {
        return 0x92;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_UNICAST_FLB_TM_HEADER_WITH_SOFT_NPUH_ENE_MACRO) {
        return 0x97;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_UNICAST_PLB_TM_HEADER_ENE_MACRO) {
        return 0x9d;
    }
    
    if ((context == NPL_FABRIC_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_UNICAST_PLB_TM_HEADER_WITH_SOFT_NPUH_ENE_MACRO) {
        return 0xa2;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_VPN_OR_6PE_LABEL_ENE_MACRO) {
        return 0x48;
    }
    
    if ((context == NPL_NETWORK_CONTEXT || context == NPL_NONE_CONTEXT) && ene_macro == NPL_VXLAN_UDP_ENE_MACRO) {
        return 0xf0;
    }
    
    if (ene_macro == 0) {
        return 0;
    }
    
    return ene_macro; // if not found, it's probably regular macro - don't translate it!
}

uint32_t nplapi_table_entry_translation::translate_enum_option_id(npl_context_e context, const npl_ene_five_labels_jump_offset_e& value)
{
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_FIFTH_LABEL) {
        return 0xe;
    }
    
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_FIFTH_LABEL_NO_JUMP) {
        return 0x0;
    }
    return (uint32_t)value;
}

uint32_t nplapi_table_entry_translation::translate_enum_option_id(npl_context_e context, const npl_ene_four_labels_jump_offset_e& value)
{
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_FOURTH_LABEL) {
        return 0x4;
    }
    
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_FOURTH_LABEL_NO_JUMP) {
        return 0x0;
    }
    return (uint32_t)value;
}

uint32_t nplapi_table_entry_translation::translate_enum_option_id(npl_context_e context, const npl_ene_seven_labels_jump_offset_e& value)
{
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_SEVENTH_LABEL) {
        return 0x4;
    }
    
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_SEVENTH_LABEL_NO_JUMP) {
        return 0x0;
    }
    return (uint32_t)value;
}

uint32_t nplapi_table_entry_translation::translate_enum_option_id(npl_context_e context, const npl_ene_six_labels_jump_offset_e& value)
{
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_SIXTH_LABEL) {
        return 0x9;
    }
    
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_SIXTH_LABEL_NO_JUMP) {
        return 0x0;
    }
    return (uint32_t)value;
}

uint32_t nplapi_table_entry_translation::translate_enum_option_id(npl_context_e context, const npl_ene_three_labels_jump_offset_e& value)
{
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_THIRD_LABEL) {
        return 0x9;
    }
    
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_THIRD_LABEL_NO_JUMP) {
        return 0x0;
    }
    return (uint32_t)value;
}

uint32_t nplapi_table_entry_translation::translate_enum_option_id(npl_context_e context, const npl_lsp_one_label_ene_jump_offset_e& value)
{
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_FIRST_LABEL) {
        return 0x9;
    }
    
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_FIRST_LABEL_NO_JUMP) {
        return 0x0;
    }
    return (uint32_t)value;
}

uint32_t nplapi_table_entry_translation::translate_enum_option_id(npl_context_e context, const npl_lsp_two_labels_ene_jump_offset_e& value)
{
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_SECOND_LABEL) {
        return 0x4;
    }
    
    if (context == NPL_NETWORK_CONTEXT && value == NPL_ENE_JUMP_OFFSET_MPLS_IMPOSED_SECOND_LABEL_NO_JUMP) {
        return 0x0;
    }
    return (uint32_t)value;
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_acl_map_fi_header_type_to_protocol_number_table_key_t& key, const npl_acl_map_fi_header_type_to_protocol_number_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fi_hdr_type;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_ACL_MAP_FI_HEADER_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE) {
            data_to_add = value.payloads.update.is_valid;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.update.acl_l4_protocol;
            target_payload.set_bits(17, 16, data_to_add);
            data_to_add = value.payloads.update.protocol_type.protocol_type;
            target_payload.set_bits(15, 8, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_acl_map_fi_header_type_to_protocol_number_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_additional_labels_table_key_t& key, const npl_additional_labels_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 120);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x5ULL);
        data_to_add = key.labels_index;
        target_key.set_bits(15, 4, data_to_add);
        
        if (value.action == NPL_ADDITIONAL_LABELS_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.additional_labels.label_3;
            target_payload.set_bits(119, 100, data_to_add);
            data_to_add = value.payloads.additional_labels.label_4;
            target_payload.set_bits(99, 80, data_to_add);
            data_to_add = value.payloads.additional_labels.label_5;
            target_payload.set_bits(79, 60, data_to_add);
            data_to_add = value.payloads.additional_labels.label_6;
            target_payload.set_bits(59, 40, data_to_add);
            data_to_add = value.payloads.additional_labels.label_7;
            target_payload.set_bits(39, 20, data_to_add);
            data_to_add = value.payloads.additional_labels.label_8_or_num_labels.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.additional_labels.label_8_or_num_labels.num_labels.total_num_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_additional_labels_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_all_reachable_vector_key_t& key, const npl_all_reachable_vector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 108);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_ALL_REACHABLE_VECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.all_reachable_vector_result.reachable[107];
            target_payload.set_bits(107, 107, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[106];
            target_payload.set_bits(106, 106, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[105];
            target_payload.set_bits(105, 105, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[104];
            target_payload.set_bits(104, 104, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[103];
            target_payload.set_bits(103, 103, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[102];
            target_payload.set_bits(102, 102, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[101];
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[100];
            target_payload.set_bits(100, 100, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[99];
            target_payload.set_bits(99, 99, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[98];
            target_payload.set_bits(98, 98, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[97];
            target_payload.set_bits(97, 97, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[96];
            target_payload.set_bits(96, 96, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[95];
            target_payload.set_bits(95, 95, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[94];
            target_payload.set_bits(94, 94, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[93];
            target_payload.set_bits(93, 93, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[92];
            target_payload.set_bits(92, 92, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[91];
            target_payload.set_bits(91, 91, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[90];
            target_payload.set_bits(90, 90, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[89];
            target_payload.set_bits(89, 89, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[88];
            target_payload.set_bits(88, 88, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[87];
            target_payload.set_bits(87, 87, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[86];
            target_payload.set_bits(86, 86, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[85];
            target_payload.set_bits(85, 85, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[84];
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[83];
            target_payload.set_bits(83, 83, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[82];
            target_payload.set_bits(82, 82, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[81];
            target_payload.set_bits(81, 81, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[80];
            target_payload.set_bits(80, 80, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[79];
            target_payload.set_bits(79, 79, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[78];
            target_payload.set_bits(78, 78, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[77];
            target_payload.set_bits(77, 77, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[76];
            target_payload.set_bits(76, 76, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[75];
            target_payload.set_bits(75, 75, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[74];
            target_payload.set_bits(74, 74, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[73];
            target_payload.set_bits(73, 73, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[72];
            target_payload.set_bits(72, 72, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[71];
            target_payload.set_bits(71, 71, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[70];
            target_payload.set_bits(70, 70, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[69];
            target_payload.set_bits(69, 69, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[68];
            target_payload.set_bits(68, 68, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[67];
            target_payload.set_bits(67, 67, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[66];
            target_payload.set_bits(66, 66, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[65];
            target_payload.set_bits(65, 65, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[64];
            target_payload.set_bits(64, 64, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[63];
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[62];
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[61];
            target_payload.set_bits(61, 61, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[60];
            target_payload.set_bits(60, 60, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[59];
            target_payload.set_bits(59, 59, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[58];
            target_payload.set_bits(58, 58, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[57];
            target_payload.set_bits(57, 57, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[56];
            target_payload.set_bits(56, 56, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[55];
            target_payload.set_bits(55, 55, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[54];
            target_payload.set_bits(54, 54, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[53];
            target_payload.set_bits(53, 53, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[52];
            target_payload.set_bits(52, 52, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[51];
            target_payload.set_bits(51, 51, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[50];
            target_payload.set_bits(50, 50, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[49];
            target_payload.set_bits(49, 49, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[48];
            target_payload.set_bits(48, 48, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[47];
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[46];
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[45];
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[44];
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[43];
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[42];
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[41];
            target_payload.set_bits(41, 41, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[40];
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[39];
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[38];
            target_payload.set_bits(38, 38, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[37];
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[36];
            target_payload.set_bits(36, 36, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[35];
            target_payload.set_bits(35, 35, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[34];
            target_payload.set_bits(34, 34, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[33];
            target_payload.set_bits(33, 33, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[32];
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[31];
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[30];
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[29];
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[28];
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[27];
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[26];
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[25];
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[24];
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[23];
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[22];
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[21];
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[20];
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[19];
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[18];
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[17];
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[16];
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[15];
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[14];
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[13];
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[12];
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[11];
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[10];
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[9];
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[8];
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[7];
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[6];
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[5];
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[4];
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[3];
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[2];
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[1];
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.all_reachable_vector_result.reachable[0];
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_all_reachable_vector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_desired_tx_interval_table_key_t& key, const npl_bfd_desired_tx_interval_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.interval_selector;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_BFD_DESIRED_TX_INTERVAL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.desired_min_tx_interval;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_desired_tx_interval_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_detection_multiple_table_key_t& key, const npl_bfd_detection_multiple_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.interval_selector;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_BFD_DETECTION_MULTIPLE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.detection_mult;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_detection_multiple_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_event_queue_table_key_t& key, const npl_bfd_event_queue_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(72, 0);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(2, 1, 0x1ULL);
        data_to_add = key.rmep_id;
        target_key.set_bits(49, 37, data_to_add);
        data_to_add = key.mep_id;
        target_key.set_bits(36, 24, data_to_add);
        data_to_add = key.oamp_event;
        target_key.set_bits(23, 16, data_to_add);
        data_to_add = key.diag_code;
        target_key.set_bits(15, 11, data_to_add);
        data_to_add = key.flags_and_state;
        target_key.set_bits(10, 3, data_to_add);
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_event_queue_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_inject_inner_da_high_table_key_t& key, const npl_bfd_inject_inner_da_high_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        
        if (value.action == NPL_BFD_INJECT_INNER_DA_HIGH_TABLE_ACTION_SET_INJECT_INNER_DA) {
            data_to_add = value.payloads.set_inject_inner_da.da;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_inject_inner_da_high_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_inject_inner_da_low_table_key_t& key, const npl_bfd_inject_inner_da_low_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        
        if (value.action == NPL_BFD_INJECT_INNER_DA_LOW_TABLE_ACTION_SET_INJECT_INNER_DA) {
            data_to_add = value.payloads.set_inject_inner_da.da;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_inject_inner_da_low_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_inject_inner_ethernet_header_static_table_key_t& key, const npl_bfd_inject_inner_ethernet_header_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 60);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.requires_inject_up;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = key.transport.transport;
        target_key.set_bits(2, 1, data_to_add);
        data_to_add = key.transport.requires_label;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_BFD_INJECT_INNER_ETHERNET_HEADER_STATIC_TABLE_ACTION_SET_INNER_INJECT_ETH) {
            data_to_add = value.payloads.set_inner_inject_eth.type;
            target_payload.set_bits(59, 44, data_to_add);
            data_to_add = value.payloads.set_inner_inject_eth.pkt_size;
            target_payload.set_bits(43, 30, data_to_add);
            data_to_add = value.payloads.set_inner_inject_eth.size1;
            target_payload.set_bits(29, 22, data_to_add);
            data_to_add = value.payloads.set_inner_inject_eth.size2;
            target_payload.set_bits(21, 14, data_to_add);
            data_to_add = value.payloads.set_inner_inject_eth.size3;
            target_payload.set_bits(13, 6, data_to_add);
            data_to_add = value.payloads.set_inner_inject_eth.bitmap;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_inject_inner_ethernet_header_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_inject_ttl_static_table_key_t& key, const npl_bfd_inject_ttl_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.requires_inject_up;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.requires_label;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_BFD_INJECT_TTL_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bfd_inject_ttl.ttl;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_inject_ttl_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_ipv6_sip_A_table_key_t& key, const npl_bfd_ipv6_sip_A_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bfd_ipv6_selector.data;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_BFD_IPV6_SIP_A_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bfd_local_ipv6_A_sip.sip;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_ipv6_sip_A_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_ipv6_sip_B_table_key_t& key, const npl_bfd_ipv6_sip_B_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bfd_ipv6_selector.data;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_BFD_IPV6_SIP_B_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bfd_local_ipv6_B_sip.sip;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_ipv6_sip_B_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_ipv6_sip_C_table_key_t& key, const npl_bfd_ipv6_sip_C_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bfd_ipv6_selector.data;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_BFD_IPV6_SIP_C_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bfd_local_ipv6_C_sip.sip;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_ipv6_sip_C_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_ipv6_sip_D_table_key_t& key, const npl_bfd_ipv6_sip_D_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bfd_ipv6_selector.data;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_BFD_IPV6_SIP_D_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bfd_local_ipv6_D_sip.sip;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_ipv6_sip_D_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_punt_encap_static_table_key_t& key, const npl_bfd_punt_encap_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.encap_result;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_BFD_PUNT_ENCAP_STATIC_TABLE_ACTION_BFD_HDR_PUNT_ENCAP_ACTION) {
            data_to_add = value.payloads.bfd_hdr_punt_encap_action.fwd_offset;
            target_payload.set_bits(26, 20, data_to_add);
            data_to_add = value.payloads.bfd_hdr_punt_encap_action.nmret;
            target_payload.set_bits(19, 16, data_to_add);
            data_to_add = value.payloads.bfd_hdr_punt_encap_action.lpts_punt_encap.encap_punt_code.mirror_or_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 8, data_to_add);
            }
            data_to_add = value.payloads.bfd_hdr_punt_encap_action.lpts_punt_encap.encap_punt_code.fabric_ibm_cmd.ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.bfd_hdr_punt_encap_action.lpts_punt_encap.encap_punt_code.fabric_ibm_cmd.ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 8, data_to_add);
            }
            data_to_add = value.payloads.bfd_hdr_punt_encap_action.lpts_punt_encap.encap_punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 8, data_to_add);
            }
            data_to_add = value.payloads.bfd_hdr_punt_encap_action.lpts_punt_encap.ingress_punt_src;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.bfd_hdr_punt_encap_action.lpts_punt_encap.punt_sub_code.sub_code.lpts_flow_type.lpts_flow;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_punt_encap_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_required_tx_interval_table_key_t& key, const npl_bfd_required_tx_interval_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.interval_selector;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_BFD_REQUIRED_TX_INTERVAL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.required_min_tx_interval;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_required_tx_interval_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_rx_table_key_t& key, const npl_bfd_rx_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(49, 44);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(7, 0, 0xddULL);
        data_to_add = key.your_discr_31_16_;
        target_key.set_bits(48, 33, data_to_add);
        data_to_add = key.your_discr_23_16_;
        target_key.set_bits(32, 25, data_to_add);
        data_to_add = key.dst_port;
        target_key.set_bits(24, 9, data_to_add);
        data_to_add = key.protocol_type;
        target_key.set_bits(8, 8, data_to_add);
        
        if (value.action == NPL_BFD_RX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bfd_em_lookup_result.encap_result;
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.bfd_em_lookup_result.meter;
            target_payload.set_bits(39, 36, data_to_add);
            data_to_add = value.payloads.bfd_em_lookup_result.destination;
            target_payload.set_bits(35, 16, data_to_add);
            data_to_add = value.payloads.bfd_em_lookup_result.punt_encap_data.punt_nw_encap_ptr.ptr;
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = value.payloads.bfd_em_lookup_result.punt_encap_data.punt_nw_encap_type;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.bfd_em_lookup_result.punt_encap_data.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 3, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_lookup_result.punt_encap_data.punt_controls.punt_format;
            target_payload.set_bits(2, 1, data_to_add);
            data_to_add = value.payloads.bfd_em_lookup_result.punt_encap_data.punt_controls.mirror_local_encap_format;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_rx_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_set_inject_type_static_table_key_t& key, const npl_bfd_set_inject_type_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.pd_pd_npu_host_inject_fields_aux_data_bfd_requires_inject_up;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_BFD_SET_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.packet_inject_header_inject_header_type;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_set_inject_type_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_bfd_udp_port_map_static_table_key_t& key, const npl_bfd_udp_port_map_static_table_key_t& mask, const npl_bfd_udp_port_map_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(40, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_header_info_type;
        target_key.set_bits(36, 32, data_to_add);
        data_to_add = mask.packet_header_info_type;
        target_mask.set_bits(36, 32, data_to_add);
        data_to_add = key.packet_ipv4_header_protocol;
        target_key.set_bits(31, 24, data_to_add);
        data_to_add = mask.packet_ipv4_header_protocol;
        target_mask.set_bits(31, 24, data_to_add);
        data_to_add = key.packet_ipv6_header_next_header;
        target_key.set_bits(23, 16, data_to_add);
        data_to_add = mask.packet_ipv6_header_next_header;
        target_mask.set_bits(23, 16, data_to_add);
        data_to_add = key.packet_header_1__udp_header_dst_port;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.packet_header_1__udp_header_dst_port;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_BFD_UDP_PORT_MAP_STATIC_TABLE_ACTION_BFD_UDP_PORT_RESULT) {
            data_to_add = value.payloads.bfd_udp_port_result.bfd_valid;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.bfd_udp_port_result.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.bfd_udp_port_result.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_udp_port_map_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bfd_udp_port_static_table_key_t& key, const npl_bfd_udp_port_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 48);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.pd_pd_npu_host_inject_fields_aux_data_bfd_session_type;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_BFD_UDP_PORT_STATIC_TABLE_ACTION_BFD_UDP_PORT_STATIC_RESULT) {
            data_to_add = value.payloads.bfd_udp_port_static_result.l4_ports.src_port;
            target_payload.set_bits(47, 32, data_to_add);
            data_to_add = value.payloads.bfd_udp_port_static_result.l4_ports.dst_port;
            target_payload.set_bits(31, 16, data_to_add);
            data_to_add = value.payloads.bfd_udp_port_static_result.length;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bfd_udp_port_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bitmap_oqg_map_table_key_t& key, const npl_bitmap_oqg_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bitmap_oqg_map_index_index;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_BITMAP_OQG_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bitmap_oqg_map_result_oqg_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bitmap_oqg_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_bvn_tc_map_table_key_t& key, const npl_bvn_tc_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tc_map_profile;
        target_key.set_bits(5, 3, data_to_add);
        data_to_add = key.tc;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_BVN_TC_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bvn_offset;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_bvn_tc_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_calc_checksum_enable_table_key_t& key, const npl_calc_checksum_enable_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.txpp_npe_to_npe_metadata_fwd_header_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_CALC_CHECKSUM_ENABLE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.calc_checksum_enable.enable;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_calc_checksum_enable_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ccm_flags_table_key_t& key, const npl_ccm_flags_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tx_rdi;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = key.ccm_period;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_CCM_FLAGS_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flags;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ccm_flags_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_cif2npa_c_lri_macro_key_t& key, const npl_cif2npa_c_lri_macro_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_CIF2NPA_C_LRI_MACRO_ACTION_WRITE) {
            data_to_add = value.payloads.next_macro_update_next_macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_cif2npa_c_lri_macro_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_cif2npa_c_mps_macro_key_t& key, const npl_cif2npa_c_mps_macro_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_CIF2NPA_C_MPS_MACRO_ACTION_WRITE) {
            data_to_add = value.payloads.next_macro_update_next_macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_cif2npa_c_mps_macro_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_cong_level_ecn_remap_map_table_key_t& key, const npl_cong_level_ecn_remap_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rand;
        target_key.set_bits(8, 4, data_to_add);
        data_to_add = key.cong_level;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_CONG_LEVEL_ECN_REMAP_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.stat_cong_level_on.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rand;
        target_key.set_bits(8, 4, data_to_add);
        data_to_add = key.cong_level;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_CONG_LEVEL_ECN_REMAP_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.stat_cong_level_on.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_cong_level_ecn_remap_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_counters_block_config_table_key_t& key, const npl_counters_block_config_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.counter_bank_id;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.counters_block_config.lm_count_and_read;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.counters_block_config.reset_on_max_counter_read;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.counters_block_config.bank_counter_type;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.counters_block_config.compensation;
            target_payload.set_bits(19, 13, data_to_add);
            data_to_add = value.payloads.counters_block_config.ignore_pd_compensation;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.counters_block_config.wraparound;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.counters_block_config.cpu_read_cc_wait_before_create_bubble;
            target_payload.set_bits(10, 5, data_to_add);
            data_to_add = value.payloads.counters_block_config.bank_pipe_client_allocation;
            target_payload.set_bits(4, 3, data_to_add);
            data_to_add = value.payloads.counters_block_config.bank_slice_allocation;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_counters_block_config_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_counters_voq_block_map_table_key_t& key, const npl_counters_voq_block_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.voq_base_id;
        target_key.set_bits(9, 0, data_to_add);
        
        if (value.action == NPL_COUNTERS_VOQ_BLOCK_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.counters_voq_block_map_result.map_groups_size;
            target_payload.set_bits(23, 22, data_to_add);
            data_to_add = value.payloads.counters_voq_block_map_result.tc_profile;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.counters_voq_block_map_result.counter_offset;
            target_payload.set_bits(20, 7, data_to_add);
            data_to_add = value.payloads.counters_voq_block_map_result.bank_id;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_counters_voq_block_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_cud_is_multicast_bitmap_key_t& key, const npl_cud_is_multicast_bitmap_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tx_cud_prefix;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_CUD_IS_MULTICAST_BITMAP_ACTION_WRITE) {
            data_to_add = value.payloads.cud_mapping_local_vars_cud_is_multicast;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_cud_is_multicast_bitmap_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_cud_narrow_hw_table_key_t& key, const npl_cud_narrow_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 40);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.cud_mapping_local_vars_mc_copy_id_12_0_;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_CUD_NARROW_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.cud_mapping_local_vars_narrow_mc_cud;
            target_payload.set_bits(39, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_cud_narrow_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_cud_wide_hw_table_key_t& key, const npl_cud_wide_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.cud_mapping_local_vars_mc_copy_id_12_1_;
        target_key.set_bits(11, 0, data_to_add);
        
        if (value.action == NPL_CUD_WIDE_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.ac.l2_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(73, 56, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 64, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 62, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.lsp_destination.lsp_type.destination_encoding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 46, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.lsp_destination.lsp_type.vpn;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.lsp_destination.lsp_type.inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.lsp_destination.lsp_dest_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 28, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l2_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 8, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 64, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 62, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.tunnel_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 28, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 16, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.npu_pif_ifg.padded_pif_ifg.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.npu_pif_ifg.padded_pif_ifg.pif_ifg.pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 2, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.npu_pif_ifg.padded_pif_ifg.pif_ifg.ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 1, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l2.npu_pif_ifg.use_npu_header_pif_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 64, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 62, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_host_gb_dlp_encap.mc_host_gb_l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_host_gb_dlp_encap.mc_host_gb_l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 58, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_host_gb_dlp_encap.mc_host_gb_l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(56, 56, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_host_gb_dlp_encap.mc_host_gb_l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(56, 56, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_accounting_encap_data.mcg_counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 75, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_accounting_encap_data.mcg_counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(74, 69, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_accounting_encap_data.mcg_counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 56, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.lsp_destination.lsp_type.destination_encoding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 46, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.lsp_destination.lsp_type.vpn;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.lsp_destination.lsp_type.inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.lsp_destination.lsp_dest_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 28, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.te_asbr.te_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 12, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.te_asbr.asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 12, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.mldp_protection.id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 3, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.mldp_protection.sel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.lsp.swap_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 28, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.lsp.lsp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 28, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.backup_te_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 12, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.mldp_protection.id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 3, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.mldp_protection.sel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.vxlan.tunnel_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 28, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.vxlan.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 16, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.gre_tunnel_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 32, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.npu_pif_ifg.padded_pif_ifg.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.npu_pif_ifg.padded_pif_ifg.pif_ifg.pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 2, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.npu_pif_ifg.padded_pif_ifg.pif_ifg.ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 1, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.l3.encap_ext.npu_pif_ifg.use_npu_header_pif_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.collapsed_mc_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 64, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 62, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.punt.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.resolve_local_mcid.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 58, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 40, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.l3_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 64, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 62, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.host_mac;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 12, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.dlp_attributes.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 6, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.dlp_attributes.monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.dlp_attributes.bvn_profile.lp_over_lag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(4, 4, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.dlp_attributes.bvn_profile.tc_map_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 1, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.dlp_attributes.never_use_npu_header_pif_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.pif_ifg_data.padded_pif_ifg.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.pif_ifg_data.padded_pif_ifg.pif_ifg.pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 2, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.pif_ifg_data.padded_pif_ifg.pif_ifg.ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 1, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.app_mc_cud.npu_encap_data.pif_ifg_data.use_npu_header_pif_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.npu_mirror_or_redirect_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.mirror_or_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 68, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 73, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(72, 68, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 68, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.ingress_punt_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 64, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.punt_sub_code.sub_code.lpts_flow_type.lpts_flow;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 60, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.current_nw_hdr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 52, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_lm_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 48, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_lm_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 40, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.packet_fwd_header_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 36, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_ts_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 28, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_ts_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_nw_encap_ptr.ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 12, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_nw_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 8, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_controls.punt_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 5, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_controls.mirror_local_encap_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(4, 4, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_cud_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 0, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.fabric_mc_ibm_cmd.fabric_mc_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 73, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(72, 68, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 64, data_to_add);
            }
            data_to_add = value.payloads.cud_mapping_local_vars_wide_mc_cud.mirror.mirror_cud_encap.dcf_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 42, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_cud_wide_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_db_access_ingress_vlan_membership_table_lu_d_res_c_key_t& key, const npl_db_access_ingress_vlan_membership_table_lu_d_res_c_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(17, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.term_bucket_d_lu_data_key_16_0_;
        target_key.set_bits(16, 0, data_to_add);
        
        if (value.action == NPL_DB_ACCESS_INGRESS_VLAN_MEMBERSHIP_TABLE_LU_D_RES_C_ACTION_WRITE) {
            data_to_add = value.payloads.performance_ingress_vlan_membership_table_md.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_db_access_ingress_vlan_membership_table_lu_d_res_c_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_db_access_ingress_vlan_membership_table_lu_d_res_d_key_t& key, const npl_db_access_ingress_vlan_membership_table_lu_d_res_d_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(17, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.term_bucket_d_lu_data_key_16_0_;
        target_key.set_bits(16, 0, data_to_add);
        
        if (value.action == NPL_DB_ACCESS_INGRESS_VLAN_MEMBERSHIP_TABLE_LU_D_RES_D_ACTION_WRITE) {
            data_to_add = value.payloads.performance_ingress_vlan_membership_table_md.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_db_access_ingress_vlan_membership_table_lu_d_res_d_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_db_access_per_port_destination_table_key_t& key, const npl_db_access_per_port_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.device_rx_source_if_pif;
        target_key.set_bits(5, 1, data_to_add);
        data_to_add = key.device_rx_source_if_ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_DB_ACCESS_PER_PORT_DESTINATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.db_access_destination_local_vars_fwd_destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_db_access_per_port_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_key_t& key, const npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dest_pif;
        target_key.set_bits(5, 1, data_to_add);
        data_to_add = key.dest_ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_DB_ACCESS_TRANSMIT_PER_DEST_PORT_NPU_HOST_MACRO_STAMPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.db_access_transmit_per_dest_port_npu_host_macro_stamping.npu_host_macro;
            target_payload.set_bits(8, 1, data_to_add);
            data_to_add = value.payloads.db_access_transmit_per_dest_port_npu_host_macro_stamping.stamp_npu_host_macro_on_packet;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_db_access_vlan_membership_table_lu_c_res_c_key_t& key, const npl_db_access_vlan_membership_table_lu_c_res_c_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(17, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.trans_bucket_c_lu_data_key_16_0_;
        target_key.set_bits(16, 0, data_to_add);
        
        if (value.action == NPL_DB_ACCESS_VLAN_MEMBERSHIP_TABLE_LU_C_RES_C_ACTION_WRITE) {
            data_to_add = value.payloads.vlan_membership_result.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_db_access_vlan_membership_table_lu_c_res_c_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_db_access_vlan_membership_table_lu_d_res_c_key_t& key, const npl_db_access_vlan_membership_table_lu_d_res_c_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(17, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.trans_bucket_d_lu_data_key_16_0_;
        target_key.set_bits(16, 0, data_to_add);
        
        if (value.action == NPL_DB_ACCESS_VLAN_MEMBERSHIP_TABLE_LU_D_RES_C_ACTION_WRITE) {
            data_to_add = value.payloads.vlan_membership_result.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_db_access_vlan_membership_table_lu_d_res_c_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_default_egress_ipv4_sec_acl_table_key_t& key, const npl_default_egress_ipv4_sec_acl_table_key_t& mask, const npl_default_egress_ipv4_sec_acl_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(133, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x2ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.sip;
        target_key.set_bits(132, 101, data_to_add);
        data_to_add = mask.sip;
        target_mask.set_bits(132, 101, data_to_add);
        data_to_add = key.dip;
        target_key.set_bits(100, 69, data_to_add);
        data_to_add = mask.dip;
        target_mask.set_bits(100, 69, data_to_add);
        data_to_add = key.src_port;
        target_key.set_bits(68, 53, data_to_add);
        data_to_add = mask.src_port;
        target_mask.set_bits(68, 53, data_to_add);
        data_to_add = key.dst_port;
        target_key.set_bits(52, 37, data_to_add);
        data_to_add = mask.dst_port;
        target_mask.set_bits(52, 37, data_to_add);
        data_to_add = key.fwd_qos_tag_5_0_;
        target_key.set_bits(36, 31, data_to_add);
        data_to_add = mask.fwd_qos_tag_5_0_;
        target_mask.set_bits(36, 31, data_to_add);
        data_to_add = key.new_ttl;
        target_key.set_bits(30, 23, data_to_add);
        data_to_add = mask.new_ttl;
        target_mask.set_bits(30, 23, data_to_add);
        data_to_add = key.protocol;
        target_key.set_bits(22, 15, data_to_add);
        data_to_add = mask.protocol;
        target_mask.set_bits(22, 15, data_to_add);
        data_to_add = key.tcp_flags;
        target_key.set_bits(14, 9, data_to_add);
        data_to_add = mask.tcp_flags;
        target_mask.set_bits(14, 9, data_to_add);
        data_to_add = key.ip_first_fragment.val;
        target_key.set_bits(8, 8, data_to_add);
        data_to_add = mask.ip_first_fragment.val;
        target_mask.set_bits(8, 8, data_to_add);
        data_to_add = key.acl_id;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.acl_id;
        target_mask.set_bits(7, 4, data_to_add);
        
        if (value.action == NPL_DEFAULT_EGRESS_IPV4_SEC_ACL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.egress_sec_acl_result.drop_punt_or_permit.drop;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.egress_sec_acl_result.drop_punt_or_permit.force_punt;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.egress_sec_acl_result.drop_punt_or_permit.permit_count_enable;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.egress_sec_acl_result.mirror_valid;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_default_egress_ipv4_sec_acl_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_default_egress_ipv6_acl_sec_table_key_t& key, const npl_default_egress_ipv6_acl_sec_table_key_t& mask, const npl_default_egress_ipv6_acl_sec_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(320, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(162, 160, 0x1ULL);
        target_mask.set_bits(162, 160, 0x7ULL);
        target_key.set_bits(3, 0, 0x1ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.next_header;
        target_key.set_bits(319, 312, data_to_add);
        data_to_add = mask.next_header;
        target_mask.set_bits(319, 312, data_to_add);
        data_to_add = key.dst_port;
        target_key.set_bits(311, 296, data_to_add);
        data_to_add = mask.dst_port;
        target_mask.set_bits(311, 296, data_to_add);
        data_to_add = key.acl_id;
        target_key.set_bits(295, 292, data_to_add);
        data_to_add = mask.acl_id;
        target_mask.set_bits(295, 292, data_to_add);
        data_to_add = key.dip[1];
        target_key.set_bits(291, 228, data_to_add);
        data_to_add = key.dip[0];
        target_key.set_bits(227, 164, data_to_add);
        data_to_add = mask.dip[1];
        target_mask.set_bits(291, 228, data_to_add);
        data_to_add = mask.dip[0];
        target_mask.set_bits(227, 164, data_to_add);
        data_to_add = key.first_fragment.val;
        target_key.set_bits(163, 163, data_to_add);
        data_to_add = mask.first_fragment.val;
        target_mask.set_bits(163, 163, data_to_add);
        data_to_add = key.sip[1];
        target_key.set_bits(159, 96, data_to_add);
        data_to_add = key.sip[0];
        target_key.set_bits(95, 32, data_to_add);
        data_to_add = mask.sip[1];
        target_mask.set_bits(159, 96, data_to_add);
        data_to_add = mask.sip[0];
        target_mask.set_bits(95, 32, data_to_add);
        data_to_add = key.src_port;
        target_key.set_bits(31, 16, data_to_add);
        data_to_add = mask.src_port;
        target_mask.set_bits(31, 16, data_to_add);
        data_to_add = key.qos_tag;
        target_key.set_bits(15, 10, data_to_add);
        data_to_add = mask.qos_tag;
        target_mask.set_bits(15, 10, data_to_add);
        data_to_add = key.tcp_flags;
        target_key.set_bits(9, 4, data_to_add);
        data_to_add = mask.tcp_flags;
        target_mask.set_bits(9, 4, data_to_add);
        
        if (value.action == NPL_DEFAULT_EGRESS_IPV6_ACL_SEC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sec_action.drop_punt_or_permit.drop;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.sec_action.drop_punt_or_permit.force_punt;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.sec_action.drop_punt_or_permit.permit_count_enable;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.sec_action.mirror_valid;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.sec_action.drop_or_permit.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.sec_action.drop_or_permit.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.sec_action.drop_or_permit.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.sec_action.drop_or_permit.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.sec_action.drop_or_permit.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.sec_action.drop_or_permit.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_default_egress_ipv6_acl_sec_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_dest_slice_voq_map_table_key_t& key, const npl_dest_slice_voq_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.calc_msvoq_num_input_tx_slice;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_DEST_SLICE_VOQ_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dest_slice_voq_map_table_result.dest_slice_voq;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dest_slice_voq_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_dest_type_decoding_table_key_t& key, const npl_dest_type_decoding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 7);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dest_type.dest_type;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_DEST_TYPE_DECODING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_dest_type_decoding_result.destination_source_for_enc_data;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.resolution_dest_type_decoding_result.is_pbts;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.resolution_dest_type_decoding_result.add_qos_mapping;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.resolution_dest_type_decoding_result.dest_type;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.resolution_dest_type_decoding_result.table_id;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dest_type_decoding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_device_mode_table_key_t& key, const npl_device_mode_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 2);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_DEVICE_MODE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.device_mode_table_result.dev_mode;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_device_mode_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_dlp0_key_lsb_mapping_table_key_t& key, const npl_dlp0_key_lsb_mapping_table_key_t& mask, const npl_dlp0_key_lsb_mapping_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(8, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_a_dest;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.lu_a_dest;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.lu_d_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.lu_d_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_DLP0_KEY_LSB_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dlp0_key_lsb.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dlp0_key_lsb_mapping_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_dlp1_key_lsb_mapping_table_key_t& key, const npl_dlp1_key_lsb_mapping_table_key_t& mask, const npl_dlp1_key_lsb_mapping_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(8, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_a_dest;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.lu_a_dest;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.lu_d_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.lu_d_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_DLP1_KEY_LSB_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dlp1_key_lsb.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dlp1_key_lsb_mapping_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_dram_cgm_cgm_deq_lut_table_key_t& key, const npl_dram_cgm_cgm_deq_lut_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(8, 4, data_to_add);
        data_to_add = key.queue_size_level;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_DRAM_CGM_CGM_DEQ_LUT_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dram_cgm_cgm_deq_lut_results.congestion_level[7].value;
            target_payload.set_bits(31, 28, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_deq_lut_results.congestion_level[6].value;
            target_payload.set_bits(27, 24, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_deq_lut_results.congestion_level[5].value;
            target_payload.set_bits(23, 20, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_deq_lut_results.congestion_level[4].value;
            target_payload.set_bits(19, 16, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_deq_lut_results.congestion_level[3].value;
            target_payload.set_bits(15, 12, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_deq_lut_results.congestion_level[2].value;
            target_payload.set_bits(11, 8, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_deq_lut_results.congestion_level[1].value;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_deq_lut_results.congestion_level[0].value;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dram_cgm_cgm_deq_lut_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_dram_cgm_cgm_lut_table_key_t& key, const npl_dram_cgm_cgm_lut_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 6);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(15, 11, data_to_add);
        data_to_add = key.queue_size_level;
        target_key.set_bits(10, 7, data_to_add);
        data_to_add = key.dram_q_delay_level;
        target_key.set_bits(6, 3, data_to_add);
        data_to_add = key.shared_pool_th_level;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_DRAM_CGM_CGM_LUT_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dram_cgm_cgm_lut_results.dp1;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_lut_results.dp0;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_lut_results.mark1;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_lut_results.mark0;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_lut_results.set_aging;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.dram_cgm_cgm_lut_results.clr_aging;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dram_cgm_cgm_lut_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_dsp_dest_msbs_for_ecn_table_key_t& key, const npl_dsp_dest_msbs_for_ecn_table_key_t& mask, const npl_dsp_dest_msbs_for_ecn_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(9, 6, data_to_add);
        data_to_add = key.ipv4_ecn;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = mask.ipv4_ecn;
        target_mask.set_bits(5, 4, data_to_add);
        data_to_add = key.ipv6_ecn;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = mask.ipv6_ecn;
        target_mask.set_bits(3, 2, data_to_add);
        
        if (value.action == NPL_DSP_DEST_MSBS_FOR_ECN_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dsp_dest_msbs;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dsp_dest_msbs_for_ecn_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(32, 16);
        result.key.set_bits(1, 0, 0x1ULL);
        result.mask.set_bits(1, 0, 0x3ULL);
        result.payload.set_bits(3, 0, 0x8ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_dsp_group_policy_table_key_t& key, const npl_dsp_group_policy_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(11, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dsp_index;
        target_key.set_bits(10, 0, data_to_add);
        
        if (value.action == NPL_DSP_GROUP_POLICY_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dsp_group_policy.enable;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dsp_group_policy_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_dsp_l2_attributes_table_key_t& key, const npl_dsp_l2_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 56);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.omd_txpp.pif;
        target_key.set_bits(5, 1, data_to_add);
        data_to_add = key.omd_txpp.ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_DSP_L2_ATTRIBUTES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dsp_l2_attributes.mc_pruning_low;
            target_payload.set_bits(55, 40, data_to_add);
            data_to_add = value.payloads.dsp_l2_attributes.mc_pruning_high;
            target_payload.set_bits(39, 24, data_to_add);
            data_to_add = value.payloads.dsp_l2_attributes.dsp_attr_common.dsp_is_dma;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.dsp_l2_attributes.dsp_attr_common.dsp_map_info.dsp_punt_rcy;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.dsp_l2_attributes.dsp_attr_common.dsp_map_info.dsp_is_scheduled_rcy;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.dsp_l2_attributes.dsp_attr_common.mask_egress_vlan_edit;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.dsp_l2_attributes.dsp_attr_common.dsp;
            target_payload.set_bits(19, 4, data_to_add);
            data_to_add = value.payloads.dsp_l2_attributes.dsp_attr_common.svl_vpc_prune_port;
            target_payload.set_bits(3, 3, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dsp_l2_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_dsp_l3_attributes_table_key_t& key, const npl_dsp_l3_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 44);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.omd_txpp.pif;
        target_key.set_bits(5, 1, data_to_add);
        data_to_add = key.omd_txpp.ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_DSP_L3_ATTRIBUTES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dsp_l3_attributes.mtu;
            target_payload.set_bits(41, 28, data_to_add);
            data_to_add = value.payloads.dsp_l3_attributes.no_decrement_ttl;
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.dsp_l3_attributes.mpls_ip_ttl_propagation;
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.dsp_l3_attributes.dsp_attr_common.dsp_is_dma;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.dsp_l3_attributes.dsp_attr_common.dsp_map_info.dsp_punt_rcy;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.dsp_l3_attributes.dsp_attr_common.dsp_map_info.dsp_is_scheduled_rcy;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.dsp_l3_attributes.dsp_attr_common.mask_egress_vlan_edit;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.dsp_l3_attributes.dsp_attr_common.dsp;
            target_payload.set_bits(19, 4, data_to_add);
            data_to_add = value.payloads.dsp_l3_attributes.dsp_attr_common.svl_vpc_prune_port;
            target_payload.set_bits(3, 3, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dsp_l3_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_dummy_dip_index_table_key_t& key, const npl_dummy_dip_index_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dummy_dip_index.dummy_index;
        target_key.set_bits(8, 0, data_to_add);
        
        if (value.action == NPL_DUMMY_DIP_INDEX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dummy_data.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_dummy_dip_index_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ecn_remark_static_table_key_t& key, const npl_ecn_remark_static_table_key_t& mask, const npl_ecn_remark_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.pd_cong_on.val;
        target_key.set_bits(14, 14, data_to_add);
        data_to_add = mask.pd_cong_on.val;
        target_mask.set_bits(14, 14, data_to_add);
        data_to_add = key.tx_npu_header_fwd_header_type;
        target_key.set_bits(13, 10, data_to_add);
        data_to_add = mask.tx_npu_header_fwd_header_type;
        target_mask.set_bits(13, 10, data_to_add);
        data_to_add = key.packet_ipv4_header_tos_3_0_;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = mask.packet_ipv4_header_tos_3_0_;
        target_mask.set_bits(9, 6, data_to_add);
        data_to_add = key.packet_ipv6_header_tos_3_0_;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = mask.packet_ipv6_header_tos_3_0_;
        target_mask.set_bits(5, 2, data_to_add);
        
        if (value.action == NPL_ECN_REMARK_STATIC_TABLE_ACTION_SET_VALUE) {
            data_to_add = value.payloads.set_value.new_ecn;
            target_payload.set_bits(2, 1, data_to_add);
            data_to_add = value.payloads.set_value.en_ecn_counting;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ecn_remark_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_egress_mac_ipv4_sec_acl_table_key_t& key, const npl_egress_mac_ipv4_sec_acl_table_key_t& mask, const npl_egress_mac_ipv4_sec_acl_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(135, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xaULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.sip_dip.sip;
        target_key.set_bits(134, 103, data_to_add);
        data_to_add = key.sip_dip.dip;
        target_key.set_bits(102, 71, data_to_add);
        data_to_add = mask.sip_dip.sip;
        target_mask.set_bits(134, 103, data_to_add);
        data_to_add = mask.sip_dip.dip;
        target_mask.set_bits(102, 71, data_to_add);
        data_to_add = key.l4_ports.src_port;
        target_key.set_bits(70, 55, data_to_add);
        data_to_add = key.l4_ports.dst_port;
        target_key.set_bits(54, 39, data_to_add);
        data_to_add = mask.l4_ports.src_port;
        target_mask.set_bits(70, 55, data_to_add);
        data_to_add = mask.l4_ports.dst_port;
        target_mask.set_bits(54, 39, data_to_add);
        data_to_add = key.tos.dscp;
        target_key.set_bits(38, 33, data_to_add);
        data_to_add = key.tos.ecn;
        target_key.set_bits(32, 31, data_to_add);
        data_to_add = mask.tos.dscp;
        target_mask.set_bits(38, 33, data_to_add);
        data_to_add = mask.tos.ecn;
        target_mask.set_bits(32, 31, data_to_add);
        data_to_add = key.ttl_and_protocol.ttl;
        target_key.set_bits(30, 23, data_to_add);
        data_to_add = key.ttl_and_protocol.protocol;
        target_key.set_bits(22, 15, data_to_add);
        data_to_add = mask.ttl_and_protocol.ttl;
        target_mask.set_bits(30, 23, data_to_add);
        data_to_add = mask.ttl_and_protocol.protocol;
        target_mask.set_bits(22, 15, data_to_add);
        data_to_add = key.tcp_flags;
        target_key.set_bits(14, 9, data_to_add);
        data_to_add = mask.tcp_flags;
        target_mask.set_bits(14, 9, data_to_add);
        data_to_add = key.ip_first_fragment.val;
        target_key.set_bits(8, 8, data_to_add);
        data_to_add = mask.ip_first_fragment.val;
        target_mask.set_bits(8, 8, data_to_add);
        data_to_add = key.acl_id;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.acl_id;
        target_mask.set_bits(7, 4, data_to_add);
        
        if (value.action == NPL_EGRESS_MAC_IPV4_SEC_ACL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.egress_sec_acl_result.drop_punt_or_permit.drop;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.egress_sec_acl_result.drop_punt_or_permit.force_punt;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.egress_sec_acl_result.drop_punt_or_permit.permit_count_enable;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.egress_sec_acl_result.mirror_valid;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.egress_sec_acl_result.drop_or_permit.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_egress_mac_ipv4_sec_acl_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_egress_nh_and_svi_direct0_table_key_t& key, const npl_egress_nh_and_svi_direct0_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 160);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.egress_direct0_key.direct0_key;
        target_key.set_bits(11, 0, data_to_add);
        
        if (value.action == NPL_EGRESS_NH_AND_SVI_DIRECT0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.eve_vid1;
            target_payload.set_bits(127, 116, data_to_add);
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l2_port;
            target_payload.set_bits(115, 115, data_to_add);
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l2_flood;
            target_payload.set_bits(114, 114, data_to_add);
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.eve_vid2;
            target_payload.set_bits(113, 102, data_to_add);
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.nh_ene_macro_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(101, 100, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_tpid_prof;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 98, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.demux_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(93, 93, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.is_group_qos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(92, 92, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 91, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 85, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(84, 72, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 71, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 52, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 48, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l3_sa_lsb.sa_prefix_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 80, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l3_sa_lsb.tpid_sa_lsb.sa_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 64, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l3_sa_lsb.tpid_sa_lsb.tpid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 48, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_da;
            target_payload.set_bits(47, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_egress_nh_and_svi_direct0_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_egress_nh_and_svi_direct1_table_key_t& key, const npl_egress_nh_and_svi_direct1_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 160);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.egress_direct1_key.direct1_key;
        target_key.set_bits(9, 0, data_to_add);
        
        if (value.action == NPL_EGRESS_NH_AND_SVI_DIRECT1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.eve_vid1;
            target_payload.set_bits(127, 116, data_to_add);
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l2_port;
            target_payload.set_bits(115, 115, data_to_add);
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l2_flood;
            target_payload.set_bits(114, 114, data_to_add);
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.eve_vid2;
            target_payload.set_bits(113, 102, data_to_add);
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.nh_ene_macro_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(101, 100, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_tpid_prof;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 98, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.demux_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(93, 93, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.is_group_qos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(92, 92, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 91, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 85, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(84, 72, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 71, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 52, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l2_dlp_attr.l2_dlp_qos_and_attr.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 48, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l3_sa_lsb.sa_prefix_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 80, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l3_sa_lsb.tpid_sa_lsb.sa_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 64, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_payload.l3_sa_vlan_or_l2_dlp_attr.l3_sa_lsb.tpid_sa_lsb.tpid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 48, data_to_add);
            }
            data_to_add = value.payloads.nh_and_svi_payload.nh_da;
            target_payload.set_bits(47, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_egress_nh_and_svi_direct1_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_em_mp_table_key_t& key, const npl_em_mp_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(50, 40);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        data_to_add = key.your_discr;
        target_key.set_bits(49, 18, data_to_add);
        data_to_add = key.udp_dest_port;
        target_key.set_bits(17, 2, data_to_add);
        
        if (value.action == NPL_EM_MP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bfd_em_payload.ethernet_oam.rmep_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(28, 16, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.ethernet_oam.mep_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 3, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.ethernet_oam.access_rmep;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.ethernet_oam.mp_data_select;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 1, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.ethernet_oam.access_mp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.bfd.rmep_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(28, 16, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.bfd.mep_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 3, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.bfd.access_rmep;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.bfd.mp_data_select;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 1, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.bfd.access_mp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.mpls_tp.dummy;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.pfc.rmep_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(28, 16, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.pfc.mep_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 3, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.pfc.access_rmep;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.pfc.mp_data_select;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 1, data_to_add);
            }
            data_to_add = value.payloads.bfd_em_payload.pfc.access_mp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_em_mp_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_encap_data_source_select_table_key_t& key, const npl_encap_data_source_select_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.cud_mapping_local_vars_mapped_cud_is_narrow;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.cud_mapping_local_vars_map_cud;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_ENCAP_DATA_SOURCE_SELECT_TABLE_ACTION_UPDATE) {
            data_to_add = value.payloads.update.orig_encap_data_shift_in_nibble;
            target_payload.set_bits(29, 25, data_to_add);
            data_to_add = value.payloads.update.orig_encap_data_size_in_nibble;
            target_payload.set_bits(24, 20, data_to_add);
            data_to_add = value.payloads.update.mapped_cud_shift_in_nibble;
            target_payload.set_bits(19, 15, data_to_add);
            data_to_add = value.payloads.update.mapped_cud_size_in_nibble;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.update.expanded_cud_shift_in_nibble;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.update.expanded_cud_size_in_nibble;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_encap_data_source_select_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ene_byte_addition_static_table_key_t& key, const npl_ene_byte_addition_static_table_key_t& mask, const npl_ene_byte_addition_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = translate_ene_macro_id(context, key.pd_first_ene_macro.id);
        target_key.set_bits(31, 24, data_to_add);
        data_to_add = mask.pd_first_ene_macro.id;
        target_mask.set_bits(31, 24, data_to_add);
        data_to_add = translate_ene_macro_id(context, key.pd_ene_macro_ids_0_.id);
        target_key.set_bits(23, 16, data_to_add);
        data_to_add = mask.pd_ene_macro_ids_0_.id;
        target_mask.set_bits(23, 16, data_to_add);
        data_to_add = translate_ene_macro_id(context, key.pd_ene_macro_ids_1_.id);
        target_key.set_bits(15, 8, data_to_add);
        data_to_add = mask.pd_ene_macro_ids_1_.id;
        target_mask.set_bits(15, 8, data_to_add);
        data_to_add = translate_ene_macro_id(context, key.pd_ene_macro_ids_2_.id);
        target_key.set_bits(7, 0, data_to_add);
        data_to_add = mask.pd_ene_macro_ids_2_.id;
        target_mask.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_ENE_BYTE_ADDITION_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.padding_vars_ene_byte_addition;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ene_byte_addition_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ene_macro_code_tpid_profile_static_table_key_t& key, const npl_ene_macro_code_tpid_profile_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tpid_profile;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = key.macro_code;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_ENE_MACRO_CODE_TPID_PROFILE_STATIC_TABLE_ACTION_SET_VALUE) {
            data_to_add = translate_ene_macro_id(context, value.payloads.set_value.ene_encap_macro_id.id);
            target_payload.set_bits(23, 16, data_to_add);
            data_to_add = value.payloads.set_value.ene_encap_tpid;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ene_macro_code_tpid_profile_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ene_rewrite_punt_sa_prefix_index_table_key_t& key, const npl_ene_rewrite_punt_sa_prefix_index_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rewrite_sa_index;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_ENE_REWRITE_PUNT_SA_PREFIX_INDEX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sa_msb.msb;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ene_rewrite_punt_sa_prefix_index_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ene_rewrite_sa_prefix_index_table_key_t& key, const npl_ene_rewrite_sa_prefix_index_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rewrite_sa_index;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_ENE_REWRITE_SA_PREFIX_INDEX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sa_msb.msb;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ene_rewrite_sa_prefix_index_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_erpp_fabric_counters_offset_table_key_t& key, const npl_erpp_fabric_counters_offset_table_key_t& mask, const npl_erpp_fabric_counters_offset_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(48, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.vce;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = mask.vce;
        target_mask.set_bits(5, 5, data_to_add);
        data_to_add = key.tc;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = mask.tc;
        target_mask.set_bits(4, 2, data_to_add);
        data_to_add = key.dp;
        target_key.set_bits(1, 0, data_to_add);
        data_to_add = mask.dp;
        target_mask.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_ERPP_FABRIC_COUNTERS_OFFSET_TABLE_ACTION_UPDATE_COUNTER_OFFSET) {
            data_to_add = value.payloads.update_counter_offset.counter_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_erpp_fabric_counters_offset_table_key_t& key)
{
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(48, 16);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_erpp_fabric_counters_table_key_t& key, const npl_erpp_fabric_counters_table_key_t& mask, const npl_erpp_fabric_counters_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(140, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.dest_device;
        target_key.set_bits(24, 16, data_to_add);
        data_to_add = mask.dest_device;
        target_mask.set_bits(24, 16, data_to_add);
        data_to_add = key.dest_slice;
        target_key.set_bits(15, 13, data_to_add);
        data_to_add = mask.dest_slice;
        target_mask.set_bits(15, 13, data_to_add);
        data_to_add = key.dest_oq;
        target_key.set_bits(12, 4, data_to_add);
        data_to_add = mask.dest_oq;
        target_mask.set_bits(12, 4, data_to_add);
        
        if (value.action == NPL_ERPP_FABRIC_COUNTERS_TABLE_ACTION_UPDATE_COUNTERS) {
            data_to_add = value.payloads.update_counters.debug_conter_valid;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.update_counters.debug_counter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.update_counters.debug_counter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.update_counters.debug_counter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_erpp_fabric_counters_table_key_t& key)
{
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(140, 24);
        result.mask.set_bits(1, 0, 0x3ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_eth_fi_core_tcam_table_key_t& key, const npl_eth_fi_core_tcam_table_key_t& mask, const npl_eth_fi_core_tcam_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ethertype_or_tpid;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.ethertype_or_tpid;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_ETH_FI_CORE_TCAM_TABLE_ACTION_NEXT_HEADER_INFO) {
            data_to_add = value.payloads.next_header_info.payload.start_new_layer;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_macro_id;
            target_payload.set_bits(10, 5, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_header_type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eth_fi_core_tcam_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eth_meter_profile_mapping_table_key_t& key, const npl_eth_meter_profile_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.qos_id;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_ETH_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.slp_qos_id;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eth_meter_profile_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eth_oam_set_da_mc2_static_table_key_t& key, const npl_eth_oam_set_da_mc2_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        
        if (value.action == NPL_ETH_OAM_SET_DA_MC2_STATIC_TABLE_ACTION_SET_DA) {
            data_to_add = value.payloads.set_da.da;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eth_oam_set_da_mc2_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eth_oam_set_da_mc_static_table_key_t& key, const npl_eth_oam_set_da_mc_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        
        if (value.action == NPL_ETH_OAM_SET_DA_MC_STATIC_TABLE_ACTION_SET_DA) {
            data_to_add = value.payloads.set_da.da;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eth_oam_set_da_mc_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eth_rtf_conf_set_mapping_table_key_t& key, const npl_eth_rtf_conf_set_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lp_rtf_conf_set.val;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = key.rtf_step.val;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_ETH_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.eth_rtf_iteration_prop.f0_rtf_prop.table_index;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.eth_rtf_iteration_prop.f0_rtf_prop.acl_id;
            target_payload.set_bits(10, 4, data_to_add);
            data_to_add = value.payloads.eth_rtf_iteration_prop.stop_on_step_and_next_stage_compressed_fields.next_rtf_stage;
            target_payload.set_bits(3, 1, data_to_add);
            data_to_add = value.payloads.eth_rtf_iteration_prop.stop_on_step_and_next_stage_compressed_fields.stop_on_step;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eth_rtf_conf_set_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eth_type_static_table_key_t& key, const npl_eth_type_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_ETH_TYPE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ip_ether_type;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eth_type_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eve_drop_mapping_hw_table_key_t& key, const npl_eve_drop_mapping_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.eve_drop_opcode;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = key.eve_drop_vlan_id_1_tpid_exists;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.eve_drop_vlan_id_2_tpid_exists;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_EVE_DROP_MAPPING_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.eve_drop_drop;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eve_drop_mapping_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eve_drop_vlan_id_hw_table_key_t& key, const npl_eve_drop_vlan_id_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.eve_drop_vlan_id_tpid;
        target_key.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_EVE_DROP_VLAN_ID_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.eve_drop_vlan_id_tpid_exists;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eve_drop_vlan_id_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eve_interrupt_mapping_hw_table_key_t& key, const npl_eve_interrupt_mapping_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.eve_drop_opcode;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = key.eve_drop_vlan_id_1_tpid_exists;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.eve_drop_vlan_id_2_tpid_exists;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_EVE_INTERRUPT_MAPPING_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.eve_drop_interrupt;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eve_interrupt_mapping_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_eve_to_ethernet_ene_static_table_key_t& key, const npl_eve_to_ethernet_ene_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.main_type;
        target_key.set_bits(6, 5, data_to_add);
        data_to_add = key.sub_type.sub_type;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = key.sub_type.prf;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_EVE_TO_ETHERNET_ENE_STATIC_TABLE_ACTION_SET_VALUE) {
            data_to_add = value.payloads.set_value.ene_encap_tpid;
            target_payload.set_bits(23, 8, data_to_add);
            data_to_add = translate_ene_macro_id(context, value.payloads.set_value.ene_encap_macro_id.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_eve_to_ethernet_ene_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_event_queue_table_key_t& key, const npl_event_queue_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 61);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.event_queue_address.address;
        target_key.set_bits(9, 0, data_to_add);
        
        if (value.action == NPL_EVENT_QUEUE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.event_queue_result.rmep_last_time;
            target_payload.set_bits(60, 29, data_to_add);
            data_to_add = value.payloads.event_queue_result.rmep_id;
            target_payload.set_bits(28, 16, data_to_add);
            data_to_add = value.payloads.event_queue_result.rmep_state_table_data;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_event_queue_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_external_aux_table_key_t& key, const npl_external_aux_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 160);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.aux_table_key.rd_address;
        target_key.set_bits(11, 0, data_to_add);
        
        if (value.action == NPL_EXTERNAL_AUX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.aux_table_result.packet_header_type;
            target_payload.set_bits(159, 152, data_to_add);
            data_to_add = value.payloads.aux_table_result.count_phase;
            target_payload.set_bits(151, 144, data_to_add);
            data_to_add = value.payloads.aux_table_result.aux_data[2];
            target_payload.set_bits(143, 128, data_to_add);
            data_to_add = value.payloads.aux_table_result.aux_data[1];
            target_payload.set_bits(127, 64, data_to_add);
            data_to_add = value.payloads.aux_table_result.aux_data[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_external_aux_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fabric_and_tm_header_size_static_table_key_t& key, const npl_fabric_and_tm_header_size_static_table_key_t& mask, const npl_fabric_and_tm_header_size_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fabric_header_type;
        target_key.set_bits(12, 9, data_to_add);
        data_to_add = mask.fabric_header_type;
        target_mask.set_bits(12, 9, data_to_add);
        data_to_add = key.tm_header_type;
        target_key.set_bits(8, 7, data_to_add);
        data_to_add = mask.tm_header_type;
        target_mask.set_bits(8, 7, data_to_add);
        data_to_add = key.npuh_size;
        target_key.set_bits(6, 0, data_to_add);
        data_to_add = mask.npuh_size;
        target_mask.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_AND_TM_HEADER_SIZE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fabric_tm_npu_headers_size;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_and_tm_header_size_static_table_key_t& key)
{
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(16, 16);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fabric_header_ene_macro_table_key_t& key, const npl_fabric_header_ene_macro_table_key_t& mask, const npl_fabric_header_ene_macro_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fabric_header_type;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.fabric_header_type;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_HEADER_ENE_MACRO_TABLE_ACTION_UPDATE) {
            data_to_add = translate_ene_macro_id(context, value.payloads.update.ene_macro_id.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_header_ene_macro_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fabric_header_types_static_table_key_t& key, const npl_fabric_header_types_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fabric_header_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_HEADER_TYPES_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fabric_header_type_ok.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_header_types_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fabric_headers_type_table_key_t& key, const npl_fabric_headers_type_table_key_t& mask, const npl_fabric_headers_type_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(48, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.initial_fabric_header_type;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = mask.initial_fabric_header_type;
        target_mask.set_bits(5, 2, data_to_add);
        data_to_add = key.plb_header_type;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = mask.plb_header_type;
        target_mask.set_bits(1, 1, data_to_add);
        data_to_add = key.start_packing;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.start_packing;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_HEADERS_TYPE_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS) {
            data_to_add = value.payloads.update_fabric_local_vars.fabric_header_type;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_headers_type_table_key_t& key)
{
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(48, 16);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fabric_init_cfg_key_t& key, const npl_fabric_init_cfg_key_t& mask, const npl_fabric_init_cfg_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.ser;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_INIT_CFG_ACTION_UPDATE) {
            data_to_add = value.payloads.update.fabric_init_cfg_hit_.val;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.update.fabric_cfg_.issu_codespace;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.update.fabric_cfg_.plb_type;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.update.fabric_cfg_.device;
            target_payload.set_bits(8, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 1) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.ser;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_INIT_CFG_ACTION_UPDATE) {
            data_to_add = value.payloads.update.fabric_init_cfg_hit_.val;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.update.fabric_cfg_.issu_codespace;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.update.fabric_cfg_.plb_type;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.update.fabric_cfg_.device;
            target_payload.set_bits(8, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_init_cfg_key_t& key)
{
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(20, 16);
        return result;
    }
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 1) {
        ternary_table_generic_entry_t result(20, 16);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fabric_npuh_size_calculation_static_table_key_t& key, const npl_fabric_npuh_size_calculation_static_table_key_t& mask, const npl_fabric_npuh_size_calculation_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.device_tx_cud_msb_4bits;
        target_key.set_bits(12, 9, data_to_add);
        data_to_add = mask.device_tx_cud_msb_4bits;
        target_mask.set_bits(12, 9, data_to_add);
        data_to_add = key.packet_tx_npu_header_fwd_header_type;
        target_key.set_bits(8, 5, data_to_add);
        data_to_add = mask.packet_tx_npu_header_fwd_header_type;
        target_mask.set_bits(8, 5, data_to_add);
        data_to_add = key.packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type;
        target_key.set_bits(4, 1, data_to_add);
        data_to_add = mask.packet_tx_npu_header_encap_encapsulation_type_redirect_encap_type;
        target_mask.set_bits(4, 1, data_to_add);
        data_to_add = key.packet_tx_npu_header_is_inject_up.val;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.packet_tx_npu_header_is_inject_up.val;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_NPUH_SIZE_CALCULATION_STATIC_TABLE_ACTION_UPDATE_NPUH_SIZE) {
            data_to_add = value.payloads.update_npuh_size.is_inject_pkt;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.update_npuh_size.is_network_pkt;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.update_npuh_size.ene_with_soft_npuh;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.update_npuh_size.npuh_size;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_npuh_size_calculation_static_table_key_t& key)
{
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(32, 16);
        result.payload.set_bits(8, 8, 0x1ULL);
        result.payload.set_bits(6, 0, 0x20ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fabric_out_color_map_table_key_t& key, const npl_fabric_out_color_map_table_key_t& mask, const npl_fabric_out_color_map_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.out_color;
        target_key.set_bits(1, 0, data_to_add);
        data_to_add = mask.out_color;
        target_mask.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_OUT_COLOR_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dp;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_out_color_map_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fabric_rx_fwd_error_handling_counter_table_key_t& key, const npl_fabric_rx_fwd_error_handling_counter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = key.error_code;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_rx_fwd_error_handling_counter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fabric_rx_fwd_error_handling_destination_table_key_t& key, const npl_fabric_rx_fwd_error_handling_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = key.error_code;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_rx_fwd_error_handling_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fabric_rx_term_error_handling_counter_table_key_t& key, const npl_fabric_rx_term_error_handling_counter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_rx_term_error_handling_counter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fabric_rx_term_error_handling_destination_table_key_t& key, const npl_fabric_rx_term_error_handling_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_rx_term_error_handling_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t& key, const npl_fabric_scaled_mc_map_to_netork_slice_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.smcid_lsb;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_SCALED_MC_MAP_TO_NETORK_SLICE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.network_slice_mcid.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_scaled_mc_map_to_netork_slice_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fabric_smcid_threshold_table_key_t& key, const npl_fabric_smcid_threshold_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dummy;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.smcid_threshold.id;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_smcid_threshold_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fabric_term_error_checker_static_table_key_t& key, const npl_fabric_term_error_checker_static_table_key_t& mask, const npl_fabric_term_error_checker_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.is_keepalive;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = mask.is_keepalive;
        target_mask.set_bits(5, 5, data_to_add);
        data_to_add = key.fabric_header_type_ok.val;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = mask.fabric_header_type_ok.val;
        target_mask.set_bits(4, 4, data_to_add);
        data_to_add = key.fabric_init_cfg_table_hit.val;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = mask.fabric_init_cfg_table_hit.val;
        target_mask.set_bits(3, 3, data_to_add);
        data_to_add = key.mismatch_indications.issu_codespace;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = key.mismatch_indications.first_packet_size;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.mismatch_indications.is_single_fragment;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.mismatch_indications.issu_codespace;
        target_mask.set_bits(2, 2, data_to_add);
        data_to_add = mask.mismatch_indications.first_packet_size;
        target_mask.set_bits(1, 1, data_to_add);
        data_to_add = mask.mismatch_indications.is_single_fragment;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_TERM_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pd_fabric_error_event_error_code;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_term_error_checker_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fabric_tm_headers_table_key_t& key, const npl_fabric_tm_headers_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fabric_oq_type;
        target_key.set_bits(6, 4, data_to_add);
        data_to_add = key.tx_cud_prefix;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_TM_HEADERS_TABLE_ACTION_UPDATE_FABRIC_LOCAL_VARS) {
            data_to_add = value.payloads.update_fabric_local_vars.ingress_multicast;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.update_fabric_local_vars.tm_header_type;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.update_fabric_local_vars.initial_fabric_header_type;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.update_fabric_local_vars.ctrl.ts_plb.link_fc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 3, data_to_add);
            }
            data_to_add = value.payloads.update_fabric_local_vars.ctrl.ts_plb.fcn;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.update_fabric_local_vars.ctrl.ts_plb.plb_ctxt;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 0, data_to_add);
            }
            data_to_add = value.payloads.update_fabric_local_vars.ctrl.sn_plb.link_fc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 3, data_to_add);
            }
            data_to_add = value.payloads.update_fabric_local_vars.ctrl.sn_plb.fcn;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.update_fabric_local_vars.ctrl.sn_plb.plb_ctxt;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_tm_headers_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fabric_transmit_error_checker_static_table_key_t& key, const npl_fabric_transmit_error_checker_static_table_key_t& mask, const npl_fabric_transmit_error_checker_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.npu_header;
        target_key.set_bits(6, 3, data_to_add);
        data_to_add = mask.npu_header;
        target_mask.set_bits(6, 3, data_to_add);
        data_to_add = key.fabric_init_cfg_table_hit.val;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.fabric_init_cfg_table_hit.val;
        target_mask.set_bits(2, 2, data_to_add);
        data_to_add = key.expected_issu;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = mask.expected_issu;
        target_mask.set_bits(1, 1, data_to_add);
        data_to_add = key.pkt_issu;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.pkt_issu;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FABRIC_TRANSMIT_ERROR_CHECKER_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fabric_error_event_error_code;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fabric_transmit_error_checker_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fb_link_2_link_bundle_table_key_t& key, const npl_fb_link_2_link_bundle_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 6);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fe_uc_random_fb_link.link_num;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_FB_LINK_2_LINK_BUNDLE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fb_link_2_link_bundle_table_result.bundle_num;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fb_link_2_link_bundle_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fc_db_performance_vlan_membership_table_key_t& key, const npl_fc_db_performance_vlan_membership_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_fc_db_performance_hdr_vlan_membership_key;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_FC_DB_PERFORMANCE_VLAN_MEMBERSHIP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vlan_membership_result.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fc_db_performance_vlan_membership_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fe_broadcast_bmp_table_key_t& key, const npl_fe_broadcast_bmp_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 108);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.random_bc_bmp_entry.rnd_entry;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_FE_BROADCAST_BMP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fe_broadcast_bmp_table_result.links_bmp[1];
            target_payload.set_bits(107, 64, data_to_add);
            data_to_add = value.payloads.fe_broadcast_bmp_table_result.links_bmp[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fe_broadcast_bmp_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t& key, const npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 9);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fe_uc_bundle_selected_link.bundle_link;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_FE_RLB_UC_TX_FB_LINK_TO_OQ_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fe_rlb_uc_tx_fb_link_to_oq_map_table_result.base_oq;
            target_payload.set_bits(8, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fe_smcid_threshold_table_key_t& key, const npl_fe_smcid_threshold_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_ELEMENT_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dummy;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_FE_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.smcid_threshold.id;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fe_smcid_threshold_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fe_smcid_to_mcid_table_key_t& key, const npl_fe_smcid_to_mcid_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(15, 128);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.system_mcid_17_3;
        target_key.set_bits(14, 0, data_to_add);
        
        if (value.action == NPL_FE_SMCID_TO_MCID_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mcid_array.mcid[7].id;
            target_payload.set_bits(127, 112, data_to_add);
            data_to_add = value.payloads.mcid_array.mcid[6].id;
            target_payload.set_bits(111, 96, data_to_add);
            data_to_add = value.payloads.mcid_array.mcid[5].id;
            target_payload.set_bits(95, 80, data_to_add);
            data_to_add = value.payloads.mcid_array.mcid[4].id;
            target_payload.set_bits(79, 64, data_to_add);
            data_to_add = value.payloads.mcid_array.mcid[3].id;
            target_payload.set_bits(63, 48, data_to_add);
            data_to_add = value.payloads.mcid_array.mcid[2].id;
            target_payload.set_bits(47, 32, data_to_add);
            data_to_add = value.payloads.mcid_array.mcid[1].id;
            target_payload.set_bits(31, 16, data_to_add);
            data_to_add = value.payloads.mcid_array.mcid[0].id;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fe_smcid_to_mcid_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fe_uc_link_bundle_desc_table_key_t& key, const npl_fe_uc_link_bundle_desc_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 88);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fb_link_2_link_bundle_table_result_bundle_num;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_FE_UC_LINK_BUNDLE_DESC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fe_uc_link_bundle_desc_table_result.bundle_link_3_bc;
            target_payload.set_bits(87, 73, data_to_add);
            data_to_add = value.payloads.fe_uc_link_bundle_desc_table_result.bundle_link_3;
            target_payload.set_bits(72, 66, data_to_add);
            data_to_add = value.payloads.fe_uc_link_bundle_desc_table_result.bundle_link_2_bc;
            target_payload.set_bits(65, 51, data_to_add);
            data_to_add = value.payloads.fe_uc_link_bundle_desc_table_result.bundle_link_2;
            target_payload.set_bits(50, 44, data_to_add);
            data_to_add = value.payloads.fe_uc_link_bundle_desc_table_result.bundle_link_1_bc;
            target_payload.set_bits(43, 29, data_to_add);
            data_to_add = value.payloads.fe_uc_link_bundle_desc_table_result.bundle_link_1;
            target_payload.set_bits(28, 22, data_to_add);
            data_to_add = value.payloads.fe_uc_link_bundle_desc_table_result.bundle_link_0_bc;
            target_payload.set_bits(21, 7, data_to_add);
            data_to_add = value.payloads.fe_uc_link_bundle_desc_table_result.bundle_link_0;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fe_uc_link_bundle_desc_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fec_table_key_t& key, const npl_fec_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fec.id;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_FEC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_fec_result.fec_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.resolution_fec_result.fec_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.resolution_fec_result.fec_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.resolution_fec_result.fec_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.resolution_fec_result.fec_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.resolution_fec_result.raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 70, data_to_add);
            }
            data_to_add = value.payloads.resolution_fec_result.raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 6, data_to_add);
            }
            data_to_add = value.payloads.resolution_fec_result.raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fec_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fec_type_decoding_table_key_t& key, const npl_fec_type_decoding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 85);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.type;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_FEC_TYPE_DECODING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_type_decoding_table_result.do_lp_queuing;
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_size_on_encap_data_in_bits;
            target_payload.set_bits(83, 79, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_offset_on_encap_data_in_nibbles;
            target_payload.set_bits(78, 74, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.destination_in_nibbles;
            target_payload.set_bits(73, 69, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.size_in_bits;
            target_payload.set_bits(68, 64, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.offset_in_bits;
            target_payload.set_bits(63, 57, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.destination_in_nibbles;
            target_payload.set_bits(56, 52, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.size_in_bits;
            target_payload.set_bits(51, 47, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.offset_in_bits;
            target_payload.set_bits(46, 40, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.destination_in_nibbles;
            target_payload.set_bits(39, 35, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.size_in_bits;
            target_payload.set_bits(34, 30, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.offset_in_bits;
            target_payload.set_bits(29, 23, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_type;
            target_payload.set_bits(22, 19, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_start;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_type;
            target_payload.set_bits(17, 12, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_size;
            target_payload.set_bits(11, 7, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_offset;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fec_type_decoding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fi_core_tcam_table_key_t& key, const npl_fi_core_tcam_table_key_t& mask, const npl_fi_core_tcam_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(40, 54);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fi_macro;
        target_key.set_bits(39, 34, data_to_add);
        data_to_add = mask.fi_macro;
        target_mask.set_bits(39, 34, data_to_add);
        data_to_add = key.header_data;
        target_key.set_bits(33, 0, data_to_add);
        data_to_add = mask.header_data;
        target_mask.set_bits(33, 0, data_to_add);
        
        if (value.action == NPL_FI_CORE_TCAM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fi_core_tcam_assoc_data.next_macro;
            target_payload.set_bits(53, 48, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.last_macro;
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.start_new_header;
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.start_new_layer;
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.advance_data;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 41, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_format.type;
            target_payload.set_bits(40, 36, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_alu_header_size;
            target_payload.set_bits(35, 30, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_advance_data;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_last_macro;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 25, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_format.type;
            target_payload.set_bits(24, 20, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.tcam_mask_hw_logic_header_size;
            target_payload.set_bits(19, 14, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 11, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 12, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 11, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 12, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 11, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 11, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 12, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 11, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 12, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 11, data_to_add);
            }
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_format.type;
            target_payload.set_bits(10, 6, data_to_add);
            data_to_add = value.payloads.fi_core_tcam_assoc_data.header_size;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fi_core_tcam_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fi_macro_config_table_key_t& key, const npl_fi_macro_config_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 72);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fi_macro;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_FI_MACRO_CONFIG_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fi_macro_config_data.tcam_key_inst1_offset;
            target_payload.set_bits(71, 67, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.tcam_key_inst1_width;
            target_payload.set_bits(66, 61, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.tcam_key_inst0_offset;
            target_payload.set_bits(60, 55, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.tcam_key_inst0_width;
            target_payload.set_bits(54, 50, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.alu_shift2;
            target_payload.set_bits(49, 45, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.alu_shift1;
            target_payload.set_bits(44, 41, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.hw_logic_select;
            target_payload.set_bits(40, 38, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.alu_mux2_select;
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.alu_mux1_select;
            target_payload.set_bits(36, 36, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.fs2_const;
            target_payload.set_bits(35, 28, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.fs1_const;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.alu_fs2_valid_bits;
            target_payload.set_bits(19, 16, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.alu_fs2_offset;
            target_payload.set_bits(15, 10, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.alu_fs1_valid_bits;
            target_payload.set_bits(9, 6, data_to_add);
            data_to_add = value.payloads.fi_macro_config_data.alu_fs1_offset;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fi_macro_config_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_filb_voq_mapping_key_t& key, const npl_filb_voq_mapping_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 26);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpdr_output_voq_nr;
        target_key.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_FILB_VOQ_MAPPING_ACTION_WRITE) {
            data_to_add = value.payloads.filb_voq_mapping_result.packing_eligible;
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.filb_voq_mapping_result.snr_plb_ss2dd;
            target_payload.set_bits(24, 21, data_to_add);
            data_to_add = value.payloads.filb_voq_mapping_result.dest_oq;
            target_payload.set_bits(20, 12, data_to_add);
            data_to_add = value.payloads.filb_voq_mapping_result.dest_slice;
            target_payload.set_bits(11, 9, data_to_add);
            data_to_add = value.payloads.filb_voq_mapping_result.dest_dev;
            target_payload.set_bits(8, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_filb_voq_mapping_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_first_ene_static_table_key_t& key, const npl_first_ene_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.first_macro_code;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_FIRST_ENE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = translate_ene_macro_id(context, value.payloads.first_ene_macro.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_first_ene_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_fixup_destination_for_resolution_static_table_key_t& key, const npl_fixup_destination_for_resolution_static_table_key_t& mask, const npl_fixup_destination_for_resolution_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.rtype;
        target_key.set_bits(12, 11, data_to_add);
        data_to_add = mask.rtype;
        target_mask.set_bits(12, 11, data_to_add);
        data_to_add = key.prefix_class_lp13_12;
        target_key.set_bits(10, 3, data_to_add);
        data_to_add = mask.prefix_class_lp13_12;
        target_mask.set_bits(10, 3, data_to_add);
        data_to_add = key.dest_bit;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.dest_bit;
        target_mask.set_bits(2, 2, data_to_add);
        
        if (value.action == NPL_FIXUP_DESTINATION_FOR_RESOLUTION_STATIC_TABLE_ACTION_SET_VALUES) {
            data_to_add = value.payloads.set_values.fixup_mask;
            target_payload.set_bits(31, 16, data_to_add);
            data_to_add = value.payloads.set_values.extra_dest;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fixup_destination_for_resolution_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_cache_range_comp_profile_table_key_t& key, const npl_flc_cache_range_comp_profile_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_cache_range_comp_profile_key.profile_selector;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_FLC_CACHE_RANGE_COMP_PROFILE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_cache_range_comp_profile_data.range_set;
            target_payload.set_bits(15, 14, data_to_add);
            data_to_add = value.payloads.flc_cache_range_comp_profile_data.src_size;
            target_payload.set_bits(13, 10, data_to_add);
            data_to_add = value.payloads.flc_cache_range_comp_profile_data.src_offset;
            target_payload.set_bits(9, 4, data_to_add);
            data_to_add = value.payloads.flc_cache_range_comp_profile_data.src_hdr;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_cache_range_comp_profile_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_data_table_key_t& key, const npl_flc_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(14, 642);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_flow_signature_flow_cache_index;
        target_key.set_bits(13, 0, data_to_add);
        
        if (value.action == NPL_FLC_DATA_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_payload.npu_header[5];
            target_payload.set_bits(641, 578, data_to_add);
            data_to_add = value.payloads.flc_payload.npu_header[4];
            target_payload.set_bits(577, 514, data_to_add);
            data_to_add = value.payloads.flc_payload.npu_header[3];
            target_payload.set_bits(513, 450, data_to_add);
            data_to_add = value.payloads.flc_payload.npu_header[2];
            target_payload.set_bits(449, 386, data_to_add);
            data_to_add = value.payloads.flc_payload.npu_header[1];
            target_payload.set_bits(385, 322, data_to_add);
            data_to_add = value.payloads.flc_payload.npu_header[0];
            target_payload.set_bits(321, 258, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.source_if;
            target_payload.set_bits(257, 250, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.drop_flag;
            target_payload.set_bits(249, 249, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.fwd_destination.raw;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(248, 229, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.fwd_destination.doq_ds.prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(248, 242, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.fwd_destination.doq_ds.doq;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(240, 232, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.fwd_destination.doq_ds.ds;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 229, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.in_mirror_cmd0;
            target_payload.set_bits(228, 224, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.tc;
            target_payload.set_bits(223, 221, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.in_color;
            target_payload.set_bits(220, 219, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.counter_meter_ptr_0;
            target_payload.set_bits(218, 200, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.counter_meter_comp_0;
            target_payload.set_bits(199, 193, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.counter_lm_read_only_0;
            target_payload.set_bits(192, 192, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.ethernet_rate_limiter_type;
            target_payload.set_bits(191, 189, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.packet_learn_enable;
            target_payload.set_bits(188, 188, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.snr_context;
            target_payload.set_bits(187, 175, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.snr_psn;
            target_payload.set_bits(174, 155, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.snr_out_slice;
            target_payload.set_bits(154, 153, data_to_add);
            data_to_add = value.payloads.flc_payload.rxpp_pd.lb_or_slb.lb_key;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(152, 137, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.lb_or_slb.slb.eos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(152, 152, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.lb_or_slb.slb.close_prev_segment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(151, 151, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxf.fabric_ts_sn;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(136, 113, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxf.vmd_fabric_ctxt;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(112, 111, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxf.first_packet_size_round_up_in_8_bytes_granularity;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 105, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxf.is_keepalive;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxf.plb_header_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 103, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxf.plb_ctxt_ts[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(102, 95, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxf.plb_ctxt_ts[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(94, 31, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.flow_sign;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(136, 101, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.sch_compensation;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 94, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.in_mirror_cmd1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(93, 89, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.in_mirror_cmd2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(88, 84, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_meter_ptr_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 65, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_meter_comp_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 58, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_lm_read_only_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 57, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_meter_ptr_2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(56, 38, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_meter_comp_2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 31, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_lm_read_only_2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 30, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_meter_ptr_3;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(29, 11, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_meter_comp_3;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(10, 4, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.counter_lm_read_only_3;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 3, data_to_add);
            }
            data_to_add = value.payloads.flc_payload.rxpp_pd.slice_mode_data.rxn.fllb_control_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_db_table_key_t& key, const npl_flc_db_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(96, 14);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_flow_signature_flow_signature[1];
        target_key.set_bits(95, 64, data_to_add);
        data_to_add = key.flc_flow_signature_flow_signature[0];
        target_key.set_bits(63, 0, data_to_add);
        
        if (value.action == NPL_FLC_DB_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_flow_signature_flow_cache_index;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_db_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_fbm_table_key_t& key, const npl_flc_fbm_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 14);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_FLC_FBM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_fbm_cache_index;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_fbm_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_flc_header_types_array_table_key_t& key, const npl_flc_header_types_array_table_key_t& mask, const npl_flc_header_types_array_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(73, 25);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_header_types_array_key.source_port;
        target_key.set_bits(72, 68, data_to_add);
        data_to_add = key.flc_header_types_array_key.ifg;
        target_key.set_bits(67, 67, data_to_add);
        data_to_add = key.flc_header_types_array_key.recycle_code;
        target_key.set_bits(66, 65, data_to_add);
        data_to_add = key.flc_header_types_array_key.fi_hdr_5to9;
        target_key.set_bits(64, 40, data_to_add);
        data_to_add = key.flc_header_types_array_key.fi_hdr_4to0;
        target_key.set_bits(39, 0, data_to_add);
        data_to_add = mask.flc_header_types_array_key.source_port;
        target_mask.set_bits(72, 68, data_to_add);
        data_to_add = mask.flc_header_types_array_key.ifg;
        target_mask.set_bits(67, 67, data_to_add);
        data_to_add = mask.flc_header_types_array_key.recycle_code;
        target_mask.set_bits(66, 65, data_to_add);
        data_to_add = mask.flc_header_types_array_key.fi_hdr_5to9;
        target_mask.set_bits(64, 40, data_to_add);
        data_to_add = mask.flc_header_types_array_key.fi_hdr_4to0;
        target_mask.set_bits(39, 0, data_to_add);
        
        if (value.action == NPL_FLC_HEADER_TYPES_ARRAY_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_header_types_array_data.range_comp_sel_3.profile_selector;
            target_payload.set_bits(24, 20, data_to_add);
            data_to_add = value.payloads.flc_header_types_array_data.range_comp_sel_2.profile_selector;
            target_payload.set_bits(19, 15, data_to_add);
            data_to_add = value.payloads.flc_header_types_array_data.range_comp_sel_1.profile_selector;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.flc_header_types_array_data.range_comp_sel_0.profile_selector;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.flc_header_types_array_data.range_comp_vld_3;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.flc_header_types_array_data.range_comp_vld_2;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.flc_header_types_array_data.range_comp_vld_1;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.flc_header_types_array_data.range_comp_vld_0;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.flc_header_types_array_data.use_cache;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_header_types_array_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_map_header_type_mask_id_table_key_t& key, const npl_flc_map_header_type_mask_id_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 5);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_map_header_type_mask_id_key.sel;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_FLC_MAP_HEADER_TYPE_MASK_ID_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_map_header_type_mask_id_data.mask_id;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_map_header_type_mask_id_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_map_header_type_mask_l_table_key_t& key, const npl_flc_map_header_type_mask_l_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 640);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_map_header_type_mask_l_key.sel;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_FLC_MAP_HEADER_TYPE_MASK_L_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.cache_mask[4];
            target_payload.set_bits(639, 576, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.cache_mask[3];
            target_payload.set_bits(575, 512, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.cache_mask[2];
            target_payload.set_bits(511, 448, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.cache_mask[1];
            target_payload.set_bits(447, 384, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.cache_mask[0];
            target_payload.set_bits(383, 320, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.queue_mask[4];
            target_payload.set_bits(319, 256, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.queue_mask[3];
            target_payload.set_bits(255, 192, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.queue_mask[2];
            target_payload.set_bits(191, 128, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.queue_mask[1];
            target_payload.set_bits(127, 64, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_l_data.queue_mask[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_map_header_type_mask_l_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_map_header_type_mask_m_table_key_t& key, const npl_flc_map_header_type_mask_m_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 320);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_map_header_type_mask_m_key.sel;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_FLC_MAP_HEADER_TYPE_MASK_M_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_map_header_type_mask_m_data.cache_mask[2];
            target_payload.set_bits(319, 288, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_m_data.cache_mask[1];
            target_payload.set_bits(287, 224, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_m_data.cache_mask[0];
            target_payload.set_bits(223, 160, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_m_data.queue_mask[2];
            target_payload.set_bits(159, 128, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_m_data.queue_mask[1];
            target_payload.set_bits(127, 64, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_m_data.queue_mask[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_map_header_type_mask_m_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_map_header_type_mask_s_table_key_t& key, const npl_flc_map_header_type_mask_s_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 160);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_map_header_type_mask_s_key.sel;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_FLC_MAP_HEADER_TYPE_MASK_S_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_map_header_type_mask_s_data.cache_mask[1];
            target_payload.set_bits(159, 144, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_s_data.cache_mask[0];
            target_payload.set_bits(143, 80, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_s_data.queue_mask[1];
            target_payload.set_bits(79, 64, data_to_add);
            data_to_add = value.payloads.flc_map_header_type_mask_s_data.queue_mask[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_map_header_type_mask_s_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_q_range_comp_profile_table_key_t& key, const npl_flc_q_range_comp_profile_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_q_range_comp_profile_key.profile_selector;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_FLC_Q_RANGE_COMP_PROFILE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_q_range_comp_profile_data.range_set;
            target_payload.set_bits(15, 14, data_to_add);
            data_to_add = value.payloads.flc_q_range_comp_profile_data.src_size;
            target_payload.set_bits(13, 10, data_to_add);
            data_to_add = value.payloads.flc_q_range_comp_profile_data.src_offset;
            target_payload.set_bits(9, 4, data_to_add);
            data_to_add = value.payloads.flc_q_range_comp_profile_data.src_hdr;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_q_range_comp_profile_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_flc_range_comp_ranges_table_key_t& key, const npl_flc_range_comp_ranges_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.flc_range_comp_ranges_key.range_id_msb;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = key.flc_range_comp_ranges_key.range_id_lsb;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_FLC_RANGE_COMP_RANGES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.flc_range_comp_ranges_data.q_lower_limit;
            target_payload.set_bits(63, 48, data_to_add);
            data_to_add = value.payloads.flc_range_comp_ranges_data.q_upper_limit;
            target_payload.set_bits(47, 32, data_to_add);
            data_to_add = value.payloads.flc_range_comp_ranges_data.cache_lower_limit;
            target_payload.set_bits(31, 16, data_to_add);
            data_to_add = value.payloads.flc_range_comp_ranges_data.cache_upper_limit;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_flc_range_comp_ranges_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_frm_db_fabric_routing_table_key_t& key, const npl_frm_db_fabric_routing_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 108);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.egress_device_id;
        target_key.set_bits(8, 0, data_to_add);
        
        if (value.action == NPL_FRM_DB_FABRIC_ROUTING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[107];
            target_payload.set_bits(107, 107, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[106];
            target_payload.set_bits(106, 106, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[105];
            target_payload.set_bits(105, 105, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[104];
            target_payload.set_bits(104, 104, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[103];
            target_payload.set_bits(103, 103, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[102];
            target_payload.set_bits(102, 102, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[101];
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[100];
            target_payload.set_bits(100, 100, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[99];
            target_payload.set_bits(99, 99, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[98];
            target_payload.set_bits(98, 98, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[97];
            target_payload.set_bits(97, 97, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[96];
            target_payload.set_bits(96, 96, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[95];
            target_payload.set_bits(95, 95, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[94];
            target_payload.set_bits(94, 94, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[93];
            target_payload.set_bits(93, 93, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[92];
            target_payload.set_bits(92, 92, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[91];
            target_payload.set_bits(91, 91, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[90];
            target_payload.set_bits(90, 90, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[89];
            target_payload.set_bits(89, 89, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[88];
            target_payload.set_bits(88, 88, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[87];
            target_payload.set_bits(87, 87, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[86];
            target_payload.set_bits(86, 86, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[85];
            target_payload.set_bits(85, 85, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[84];
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[83];
            target_payload.set_bits(83, 83, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[82];
            target_payload.set_bits(82, 82, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[81];
            target_payload.set_bits(81, 81, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[80];
            target_payload.set_bits(80, 80, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[79];
            target_payload.set_bits(79, 79, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[78];
            target_payload.set_bits(78, 78, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[77];
            target_payload.set_bits(77, 77, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[76];
            target_payload.set_bits(76, 76, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[75];
            target_payload.set_bits(75, 75, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[74];
            target_payload.set_bits(74, 74, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[73];
            target_payload.set_bits(73, 73, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[72];
            target_payload.set_bits(72, 72, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[71];
            target_payload.set_bits(71, 71, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[70];
            target_payload.set_bits(70, 70, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[69];
            target_payload.set_bits(69, 69, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[68];
            target_payload.set_bits(68, 68, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[67];
            target_payload.set_bits(67, 67, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[66];
            target_payload.set_bits(66, 66, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[65];
            target_payload.set_bits(65, 65, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[64];
            target_payload.set_bits(64, 64, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[63];
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[62];
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[61];
            target_payload.set_bits(61, 61, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[60];
            target_payload.set_bits(60, 60, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[59];
            target_payload.set_bits(59, 59, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[58];
            target_payload.set_bits(58, 58, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[57];
            target_payload.set_bits(57, 57, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[56];
            target_payload.set_bits(56, 56, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[55];
            target_payload.set_bits(55, 55, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[54];
            target_payload.set_bits(54, 54, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[53];
            target_payload.set_bits(53, 53, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[52];
            target_payload.set_bits(52, 52, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[51];
            target_payload.set_bits(51, 51, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[50];
            target_payload.set_bits(50, 50, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[49];
            target_payload.set_bits(49, 49, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[48];
            target_payload.set_bits(48, 48, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[47];
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[46];
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[45];
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[44];
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[43];
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[42];
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[41];
            target_payload.set_bits(41, 41, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[40];
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[39];
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[38];
            target_payload.set_bits(38, 38, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[37];
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[36];
            target_payload.set_bits(36, 36, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[35];
            target_payload.set_bits(35, 35, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[34];
            target_payload.set_bits(34, 34, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[33];
            target_payload.set_bits(33, 33, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[32];
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[31];
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[30];
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[29];
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[28];
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[27];
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[26];
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[25];
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[24];
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[23];
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[22];
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[21];
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[20];
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[19];
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[18];
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[17];
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[16];
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[15];
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[14];
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[13];
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[12];
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[11];
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[10];
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[9];
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[8];
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[7];
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[6];
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[5];
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[4];
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[3];
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[2];
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[1];
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.frm_db_fabric_routing_table_result.fabric_routing_table_data[0];
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_frm_db_fabric_routing_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fwd_and_encap_types_to_field_a_offset_table_key_t& key, const npl_fwd_and_encap_types_to_field_a_offset_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.txpp_first_macro_table_key_fwd_type;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = key.txpp_first_macro_table_key_encap_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_FWD_AND_ENCAP_TYPES_TO_FIELD_A_OFFSET_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.txpp_first_macro_local_vars_field_a_offset_in_nibble;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fwd_and_encap_types_to_field_a_offset_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fwd_and_encap_types_to_field_b_offset_table_key_t& key, const npl_fwd_and_encap_types_to_field_b_offset_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.txpp_first_macro_table_key_fwd_type;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = key.txpp_first_macro_table_key_encap_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_FWD_AND_ENCAP_TYPES_TO_FIELD_B_OFFSET_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.txpp_first_macro_local_vars_field_b_offset_in_nibble;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fwd_and_encap_types_to_field_b_offset_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fwd_bucket_a_lu_data_selector_key_t& key, const npl_fwd_bucket_a_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_a_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_a_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_FWD_BUCKET_A_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.fwd_bucket_a_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.fwd_bucket_a_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.fwd_bucket_a_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fwd_bucket_a_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fwd_bucket_b_lu_data_selector_key_t& key, const npl_fwd_bucket_b_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_b_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_b_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_FWD_BUCKET_B_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.fwd_bucket_b_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.fwd_bucket_b_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.fwd_bucket_b_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fwd_bucket_b_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fwd_bucket_c_lu_data_selector_key_t& key, const npl_fwd_bucket_c_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_c_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_c_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_FWD_BUCKET_C_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.fwd_bucket_c_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.fwd_bucket_c_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.fwd_bucket_c_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fwd_bucket_c_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fwd_bucket_d_lu_data_selector_key_t& key, const npl_fwd_bucket_d_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_d_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_d_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_FWD_BUCKET_D_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.fwd_bucket_d_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.fwd_bucket_d_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.fwd_bucket_d_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fwd_bucket_d_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fwd_destination_to_tm_result_data_key_t& key, const npl_fwd_destination_to_tm_result_data_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(20, 33);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_pd_fwd_destination_raw;
        target_key.set_bits(19, 0, data_to_add);
        
        if (value.action == NPL_FWD_DESTINATION_TO_TM_RESULT_DATA_ACTION_FOUND) {
            data_to_add = value.payloads.found.tx_cud;
            target_payload.set_bits(32, 9, data_to_add);
            data_to_add = value.payloads.found.dest_slice_id;
            target_payload.set_bits(8, 6, data_to_add);
            data_to_add = value.payloads.found.dest_pif;
            target_payload.set_bits(5, 1, data_to_add);
            data_to_add = value.payloads.found.dest_ifg;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fwd_destination_to_tm_result_data_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_fwd_type_to_ive_enable_table_key_t& key, const npl_fwd_type_to_ive_enable_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.txpp_npe_to_npe_metadata_fwd_header_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_FWD_TYPE_TO_IVE_ENABLE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.fwd_type_to_ive_enable.enable;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_fwd_type_to_ive_enable_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_get_ecm_meter_ptr_table_key_t& key, const npl_get_ecm_meter_ptr_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tm_h_ecn;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.tm_h_dp_0;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_GET_ECM_METER_PTR_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.stat_meter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.stat_meter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.stat_meter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_get_ecm_meter_ptr_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t& key, const npl_get_ingress_ptp_info_and_is_slp_dm_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.enable_sr_dm_accounting;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.enable_transparent_ptp;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_GET_INGRESS_PTP_INFO_AND_IS_SLP_DM_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ingress_ptp_info_and_is_slp_dm_cmpressed_fields.is_slp_dm;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.ingress_ptp_info_and_is_slp_dm_cmpressed_fields.ingress_ptp_info.ptp_transport_type;
            target_payload.set_bits(2, 1, data_to_add);
            data_to_add = value.payloads.ingress_ptp_info_and_is_slp_dm_cmpressed_fields.ingress_ptp_info.is_ptp_trans_sup;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_get_ingress_ptp_info_and_is_slp_dm_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_get_l2_rtf_conf_set_and_init_stages_key_t& key, const npl_get_l2_rtf_conf_set_and_init_stages_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rtf_conf_set_ptr;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_GET_L2_RTF_CONF_SET_AND_INIT_STAGES_ACTION_WRITE) {
            data_to_add = value.payloads.l2_rtf_conf_set_and_init_stages.rtf_conf_set_and_stages.rtf_conf_set.val;
            target_payload.set_bits(14, 7, data_to_add);
            data_to_add = value.payloads.l2_rtf_conf_set_and_init_stages.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            target_payload.set_bits(6, 5, data_to_add);
            data_to_add = value.payloads.l2_rtf_conf_set_and_init_stages.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            target_payload.set_bits(4, 3, data_to_add);
            data_to_add = value.payloads.l2_rtf_conf_set_and_init_stages.eth_rtf_stage;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_get_l2_rtf_conf_set_and_init_stages_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_get_non_comp_mc_value_static_table_key_t& key, const npl_get_non_comp_mc_value_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_type_bit0;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.not_comp_single_src;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_GET_NON_COMP_MC_VALUE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.non_comp_mc_trap;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_get_non_comp_mc_value_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_gre_proto_static_table_key_t& key, const npl_gre_proto_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.proto;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.label_present;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_GRE_PROTO_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.gre_proto;
            target_payload.set_bits(23, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_gre_proto_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_hmc_cgm_profile_global_table_key_t& key, const npl_hmc_cgm_profile_global_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 540);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_HMC_CGM_PROFILE_GLOBAL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_ema_weight;
            target_payload.set_bits(539, 536, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[15].value;
            target_payload.set_bits(535, 523, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[14].value;
            target_payload.set_bits(522, 510, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[13].value;
            target_payload.set_bits(509, 497, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[12].value;
            target_payload.set_bits(496, 484, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[11].value;
            target_payload.set_bits(483, 471, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[10].value;
            target_payload.set_bits(470, 458, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[9].value;
            target_payload.set_bits(457, 445, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[8].value;
            target_payload.set_bits(444, 432, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[7].value;
            target_payload.set_bits(431, 419, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[6].value;
            target_payload.set_bits(418, 406, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[5].value;
            target_payload.set_bits(405, 393, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[4].value;
            target_payload.set_bits(392, 380, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[3].value;
            target_payload.set_bits(379, 367, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[2].value;
            target_payload.set_bits(366, 354, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[1].value;
            target_payload.set_bits(353, 341, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_probability_region[0].value;
            target_payload.set_bits(340, 328, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[14].value;
            target_payload.set_bits(327, 309, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[13].value;
            target_payload.set_bits(308, 290, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[12].value;
            target_payload.set_bits(289, 271, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[11].value;
            target_payload.set_bits(270, 252, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[10].value;
            target_payload.set_bits(251, 233, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[9].value;
            target_payload.set_bits(232, 214, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[8].value;
            target_payload.set_bits(213, 195, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[7].value;
            target_payload.set_bits(194, 176, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[6].value;
            target_payload.set_bits(175, 157, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[5].value;
            target_payload.set_bits(156, 138, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[4].value;
            target_payload.set_bits(137, 119, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[3].value;
            target_payload.set_bits(118, 100, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[2].value;
            target_payload.set_bits(99, 81, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[1].value;
            target_payload.set_bits(80, 62, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_region_borders[0].value;
            target_payload.set_bits(61, 43, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.wred_fcn_enable;
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.alpha_dpo1.value;
            target_payload.set_bits(41, 37, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.shared_resource_threshold_dp1.value;
            target_payload.set_bits(36, 22, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.alpha_dpo0.value;
            target_payload.set_bits(21, 17, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.shared_resource_threshold_dp0.value;
            target_payload.set_bits(16, 2, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.shared_resource_threshold_mode;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.hmc_cgm_profile_global_results.shared_pool_id;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_hmc_cgm_profile_global_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ibm_cmd_table_key_t& key, const npl_ibm_cmd_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 49);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_to_txpp_local_vars_mirror_command;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_IBM_CMD_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ibm_cmd_table_result.sampling_probability;
            target_payload.set_bits(48, 31, data_to_add);
            data_to_add = value.payloads.ibm_cmd_table_result.is_mc;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.ibm_cmd_table_result.ignore_in_rxrq_sel;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.ibm_cmd_table_result.mirror_to_dest;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.ibm_cmd_table_result.tc_map_profile;
            target_payload.set_bits(27, 25, data_to_add);
            data_to_add = value.payloads.ibm_cmd_table_result.destination_device;
            target_payload.set_bits(24, 16, data_to_add);
            data_to_add = value.payloads.ibm_cmd_table_result.voq_or_bitmap.base_voq;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
            data_to_add = value.payloads.ibm_cmd_table_result.voq_or_bitmap.mc_bitmap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ibm_cmd_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ibm_mc_cmd_to_encap_data_table_key_t& key, const npl_ibm_mc_cmd_to_encap_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tx_fabric_tx_cud_20_16_;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_IBM_MC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ibm_mc_fabric_encap_msb.npu_mirror_or_redirect_encapsulation_type;
            target_payload.set_bits(27, 24, data_to_add);
            data_to_add = value.payloads.ibm_mc_fabric_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.mirror_or_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 16, data_to_add);
            }
            data_to_add = value.payloads.ibm_mc_fabric_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 21, data_to_add);
            }
            data_to_add = value.payloads.ibm_mc_fabric_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 16, data_to_add);
            }
            data_to_add = value.payloads.ibm_mc_fabric_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 16, data_to_add);
            }
            data_to_add = value.payloads.ibm_mc_fabric_encap_msb.lpts_tcam_first_result_encap_data_msb.ingress_punt_src;
            target_payload.set_bits(15, 12, data_to_add);
            data_to_add = value.payloads.ibm_mc_fabric_encap_msb.lpts_tcam_first_result_encap_data_msb.punt_sub_code.sub_code.lpts_flow_type.lpts_flow;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 8, data_to_add);
            }
            data_to_add = value.payloads.ibm_mc_fabric_encap_msb.current_nw_hdr_offset;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ibm_mc_cmd_to_encap_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ibm_uc_cmd_to_encap_data_table_key_t& key, const npl_ibm_uc_cmd_to_encap_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tx_fabric_tx_cud_4_0_;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_IBM_UC_CMD_TO_ENCAP_DATA_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.npu_mirror_or_redirect_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.mirror_or_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 68, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 73, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(72, 68, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 68, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.ingress_punt_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 64, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.punt_sub_code.sub_code.lpts_flow_type.lpts_flow;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 60, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.current_nw_hdr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 52, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_lm_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 48, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_msb_encap.punt_lm_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 40, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.packet_fwd_header_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 36, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_ts_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 28, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_ts_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_nw_encap_ptr.ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 12, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_nw_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 8, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_controls.punt_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 5, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_controls.mirror_local_encap_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(4, 4, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_cud_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 0, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.fabric_mc_ibm_cmd.fabric_mc_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 73, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(72, 68, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 64, data_to_add);
            }
            data_to_add = value.payloads.ibm_uc_fabric_encap.dcf_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 42, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ibm_uc_cmd_to_encap_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ifgb_tc_lut_table_key_t& key, const npl_ifgb_tc_lut_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(11, 6);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ifg;
        target_key.set_bits(10, 10, data_to_add);
        data_to_add = key.serdes_pair;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.port;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.protocol;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = key.tpid;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_IFGB_TC_LUT_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ifgb_tc_lut_results.use_lut;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.ifgb_tc_lut_results.data;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ifgb_tc_lut_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ingress_ip_qos_mapping_table_key_t& key, const npl_ingress_ip_qos_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(11, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l3_qos_mapping_key;
        target_key.set_bits(10, 4, data_to_add);
        data_to_add = key.qos_id;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_INGRESS_IP_QOS_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ip_qos_mapping_result.override_qos;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.ip_qos_mapping_result.enable_ingress_remark;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.ip_qos_mapping_result.ctr_offest_union.q_m_offset_5bits.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(29, 25, data_to_add);
            }
            data_to_add = value.payloads.ip_qos_mapping_result.ctr_offest_union.q_m_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 25, data_to_add);
            }
            data_to_add = value.payloads.ip_qos_mapping_result.phb.tc;
            target_payload.set_bits(24, 22, data_to_add);
            data_to_add = value.payloads.ip_qos_mapping_result.phb.dp;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.ip_qos_mapping_result.encap_mpls_exp.valid;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.ip_qos_mapping_result.encap_mpls_exp.exp;
            target_payload.set_bits(18, 16, data_to_add);
            data_to_add = value.payloads.ip_qos_mapping_result.fwd_class_qos_group_u.fwd_class_qos_group.fwd_class;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.ip_qos_mapping_result.fwd_class_qos_group_u.fwd_class_qos_group.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 8, data_to_add);
            }
            data_to_add = value.payloads.ip_qos_mapping_result.fwd_class_qos_group_u.qos_group_pd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 8, data_to_add);
            }
            data_to_add = value.payloads.ip_qos_mapping_result.meter;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.ip_qos_mapping_result.fwd_qos_tag;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_ip_qos_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_eth_db1_160_f0_table_key_t& key, const npl_ingress_rtf_eth_db1_160_f0_table_key_t& mask, const npl_ingress_rtf_eth_db1_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xaULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_ETH_DB1_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_eth_db1_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_eth_db2_160_f0_table_key_t& key, const npl_ingress_rtf_eth_db2_160_f0_table_key_t& mask, const npl_ingress_rtf_eth_db2_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xeULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_ETH_DB2_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_eth_db2_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db1_160_f0_table_key_t& key, const npl_ingress_rtf_ipv4_db1_160_f0_table_key_t& mask, const npl_ingress_rtf_ipv4_db1_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x2ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB1_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db1_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db1_160_f1_table_key_t& key, const npl_ingress_rtf_ipv4_db1_160_f1_table_key_t& mask, const npl_ingress_rtf_ipv4_db1_160_f1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x2ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB1_160_F1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload_f1.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db1_160_f1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db1_320_f0_table_key_t& key, const npl_ingress_rtf_ipv4_db1_320_f0_table_key_t& mask, const npl_ingress_rtf_ipv4_db1_320_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 320 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x3ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB1_320_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db1_320_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db2_160_f0_table_key_t& key, const npl_ingress_rtf_ipv4_db2_160_f0_table_key_t& mask, const npl_ingress_rtf_ipv4_db2_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x4ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB2_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db2_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db2_160_f1_table_key_t& key, const npl_ingress_rtf_ipv4_db2_160_f1_table_key_t& mask, const npl_ingress_rtf_ipv4_db2_160_f1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x4ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB2_160_F1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload_f1.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db2_160_f1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db2_320_f0_table_key_t& key, const npl_ingress_rtf_ipv4_db2_320_f0_table_key_t& mask, const npl_ingress_rtf_ipv4_db2_320_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 320 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x5ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB2_320_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db2_320_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db3_160_f0_table_key_t& key, const npl_ingress_rtf_ipv4_db3_160_f0_table_key_t& mask, const npl_ingress_rtf_ipv4_db3_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x6ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB3_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db3_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db3_160_f1_table_key_t& key, const npl_ingress_rtf_ipv4_db3_160_f1_table_key_t& mask, const npl_ingress_rtf_ipv4_db3_160_f1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x6ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB3_160_F1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload_f1.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db3_160_f1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db3_320_f0_table_key_t& key, const npl_ingress_rtf_ipv4_db3_320_f0_table_key_t& mask, const npl_ingress_rtf_ipv4_db3_320_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 320 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x7ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB3_320_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db3_320_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db4_160_f0_table_key_t& key, const npl_ingress_rtf_ipv4_db4_160_f0_table_key_t& mask, const npl_ingress_rtf_ipv4_db4_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x8ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB4_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db4_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db4_160_f1_table_key_t& key, const npl_ingress_rtf_ipv4_db4_160_f1_table_key_t& mask, const npl_ingress_rtf_ipv4_db4_160_f1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x8ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB4_160_F1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload_f1.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db4_160_f1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db4_320_f0_table_key_t& key, const npl_ingress_rtf_ipv4_db4_320_f0_table_key_t& mask, const npl_ingress_rtf_ipv4_db4_320_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 320 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x9ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV4_DB4_320_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv4_db4_320_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db1_160_f0_table_key_t& key, const npl_ingress_rtf_ipv6_db1_160_f0_table_key_t& mask, const npl_ingress_rtf_ipv6_db1_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x2ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB1_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db1_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db1_160_f1_table_key_t& key, const npl_ingress_rtf_ipv6_db1_160_f1_table_key_t& mask, const npl_ingress_rtf_ipv6_db1_160_f1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x2ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB1_160_F1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload_f1.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db1_160_f1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db1_320_f0_table_key_t& key, const npl_ingress_rtf_ipv6_db1_320_f0_table_key_t& mask, const npl_ingress_rtf_ipv6_db1_320_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 320 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(160, 160, 0x1ULL);
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x3ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB1_320_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db1_320_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db2_160_f0_table_key_t& key, const npl_ingress_rtf_ipv6_db2_160_f0_table_key_t& mask, const npl_ingress_rtf_ipv6_db2_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x4ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB2_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db2_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db2_160_f1_table_key_t& key, const npl_ingress_rtf_ipv6_db2_160_f1_table_key_t& mask, const npl_ingress_rtf_ipv6_db2_160_f1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x4ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB2_160_F1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload_f1.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db2_160_f1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db2_320_f0_table_key_t& key, const npl_ingress_rtf_ipv6_db2_320_f0_table_key_t& mask, const npl_ingress_rtf_ipv6_db2_320_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 320 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(160, 160, 0x1ULL);
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x5ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB2_320_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db2_320_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db3_160_f0_table_key_t& key, const npl_ingress_rtf_ipv6_db3_160_f0_table_key_t& mask, const npl_ingress_rtf_ipv6_db3_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x6ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB3_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db3_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db3_160_f1_table_key_t& key, const npl_ingress_rtf_ipv6_db3_160_f1_table_key_t& mask, const npl_ingress_rtf_ipv6_db3_160_f1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x6ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB3_160_F1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload_f1.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db3_160_f1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db3_320_f0_table_key_t& key, const npl_ingress_rtf_ipv6_db3_320_f0_table_key_t& mask, const npl_ingress_rtf_ipv6_db3_320_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 320 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(160, 160, 0x1ULL);
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x7ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB3_320_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db3_320_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db4_160_f0_table_key_t& key, const npl_ingress_rtf_ipv6_db4_160_f0_table_key_t& mask, const npl_ingress_rtf_ipv6_db4_160_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x8ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB4_160_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db4_160_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db4_160_f1_table_key_t& key, const npl_ingress_rtf_ipv6_db4_160_f1_table_key_t& mask, const npl_ingress_rtf_ipv6_db4_160_f1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 160 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x8ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB4_160_F1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload_f1.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload_f1.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db4_160_f1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db4_320_f0_table_key_t& key, const npl_ingress_rtf_ipv6_db4_320_f0_table_key_t& mask, const npl_ingress_rtf_ipv6_db4_320_f0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t((npu_features == nullptr || npu_features->trans_info == nullptr)? 320 : npu_features->trans_info->physical_key_width, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(160, 160, 0x1ULL);
        target_mask.set_bits(160, 160, 0x1ULL);
        target_key.set_bits(4, 4, 0x1ULL);
        target_mask.set_bits(4, 4, 0x1ULL);
        target_key.set_bits(3, 0, 0x9ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        
        if (npu_features != nullptr && npu_features->trans_info != nullptr) {
            translate_udk_entry(key.ud_key, mask.ud_key, npu_features->trans_info, current_entry);
        }
        
        if (value.action == NPL_INGRESS_RTF_IPV6_DB4_320_F0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rtf_payload.rtf_profile_index;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 58, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.q_m_offset_5bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 51, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.counter_action_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 49, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.mirror_cmd_or_offset.mirror_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 44, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_phb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.rtf_sec_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.drop_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.permit_ace_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_0.force.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.rtf_res_profile_1_action;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.meter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.meter_or_counter.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.override_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 32, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.valid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 31, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.encap_mpls_exp.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 28, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.enable_ingress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.ingress_qos_remark.fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.rtf_payload.rtf_result_profile.rtf_result_profile_1.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ingress_rtf_ipv6_db4_320_f0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_inject_down_select_ene_static_table_key_t& key, const npl_inject_down_select_ene_static_table_key_t& mask, const npl_inject_down_select_ene_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.dsp_is_dma;
        target_key.set_bits(9, 9, data_to_add);
        data_to_add = mask.dsp_is_dma;
        target_mask.set_bits(9, 9, data_to_add);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(8, 5, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(8, 5, data_to_add);
        data_to_add = key.inject_down_encap;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = mask.inject_down_encap;
        target_mask.set_bits(4, 2, data_to_add);
        
        if (value.action == NPL_INJECT_DOWN_SELECT_ENE_STATIC_TABLE_ACTION_INJECT_DOWN_ENE) {
            data_to_add = translate_ene_macro_id(context, value.payloads.inject_down_ene.ene_macro_id);
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = value.payloads.inject_down_ene.dma_decap_header_type;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_inject_down_select_ene_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_inject_down_tx_redirect_counter_table_key_t& key, const npl_inject_down_tx_redirect_counter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 21);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xaULL);
        data_to_add = key.tx_redirect_code;
        target_key.set_bits(11, 4, data_to_add);
        
        if (value.action == NPL_INJECT_DOWN_TX_REDIRECT_COUNTER_TABLE_ACTION_COUNTER_METER_FOUND) {
            data_to_add = value.payloads.counter_meter_found.per_pif_trap_mode;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.counter_meter_found.counter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.counter_meter_found.counter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.counter_meter_found.counter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_inject_down_tx_redirect_counter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_inject_mact_ldb_to_output_lr_key_t& key, const npl_inject_mact_ldb_to_output_lr_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_INJECT_MACT_LDB_TO_OUTPUT_LR_ACTION_WRITE) {
            data_to_add = value.payloads.output_learn_record_mact_ldb;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_inject_mact_ldb_to_output_lr_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_inject_up_pif_ifg_init_data_table_key_t& key, const npl_inject_up_pif_ifg_init_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 59);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 0, 0x1bULL);
        data_to_add = key.initial_slice_id;
        target_key.set_bits(15, 13, data_to_add);
        data_to_add = key.source_if.ifg;
        target_key.set_bits(12, 12, data_to_add);
        data_to_add = key.source_if.pif;
        target_key.set_bits(11, 7, data_to_add);
        
        if (value.action == NPL_INJECT_UP_PIF_IFG_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_PIF_IFG) {
            data_to_add = value.payloads.write_init_data_for_pif_ifg.slice_and_source_if.slice_id_on_npu;
            target_payload.set_bits(58, 56, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.slice_and_source_if.source_if_on_npu.ifg;
            target_payload.set_bits(55, 55, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.slice_and_source_if.source_if_on_npu.pif;
            target_payload.set_bits(54, 50, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.init_data.initial_npp_attributes_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 40, data_to_add);
            }
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.init_data.initial_slice_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.initial_mapping_type;
            target_payload.set_bits(39, 36, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.initial_is_rcy_if;
            target_payload.set_bits(34, 34, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.pfc_enable;
            target_payload.set_bits(33, 33, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.initial_mac_lp_type;
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.initial_lp_type;
            target_payload.set_bits(31, 28, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.initial_vlan_profile;
            target_payload.set_bits(27, 24, data_to_add);
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.mapping_key.initial_lp_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 8, data_to_add);
            }
            data_to_add = value.payloads.write_init_data_for_pif_ifg.init_data.mapping_key.mpls_label_placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 4, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_inject_up_pif_ifg_init_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_inject_up_ssp_init_data_table_key_t& key, const npl_inject_up_ssp_init_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(17, 48);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 0, 0xbULL);
        data_to_add = key.up_ssp;
        target_key.set_bits(16, 5, data_to_add);
        
        if (value.action == NPL_INJECT_UP_SSP_INIT_DATA_TABLE_ACTION_WRITE_INIT_DATA_FOR_SSP) {
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.init_data.initial_npp_attributes_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 40, data_to_add);
            }
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.init_data.initial_slice_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 40, data_to_add);
            }
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.initial_mapping_type;
            target_payload.set_bits(39, 36, data_to_add);
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.initial_is_rcy_if;
            target_payload.set_bits(34, 34, data_to_add);
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.pfc_enable;
            target_payload.set_bits(33, 33, data_to_add);
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.initial_mac_lp_type;
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.initial_lp_type;
            target_payload.set_bits(31, 28, data_to_add);
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.initial_vlan_profile;
            target_payload.set_bits(27, 24, data_to_add);
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.mapping_key.initial_lp_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 8, data_to_add);
            }
            data_to_add = value.payloads.write_init_data_for_ssp.init_data.mapping_key.mpls_label_placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 4, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_inject_up_ssp_init_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_inner_tpid_table_key_t& key, const npl_inner_tpid_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tpid_ptr;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_INNER_TPID_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.tpid;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_inner_tpid_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ip_fi_core_tcam_table_key_t& key, const npl_ip_fi_core_tcam_table_key_t& mask, const npl_ip_fi_core_tcam_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(15, 9, 0x7fULL);
        data_to_add = key.ethertype_or_tpid;
        target_key.set_bits(8, 1, data_to_add);
        data_to_add = mask.ethertype_or_tpid;
        target_mask.set_bits(8, 1, data_to_add);
        data_to_add = key.is_ipv6_header;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.is_ipv6_header;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_IP_FI_CORE_TCAM_TABLE_ACTION_NEXT_HEADER_INFO) {
            data_to_add = value.payloads.next_header_info.payload.start_new_layer;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_macro_id;
            target_payload.set_bits(10, 5, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_header_type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_fi_core_tcam_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t& key, const npl_ip_fwd_header_mapping_to_ethtype_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tx_npu_header_fwd_header_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_IP_FWD_HEADER_MAPPING_TO_ETHTYPE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.local_tx_ip_mapping.is_mpls_fwd;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.local_tx_ip_mapping.is_underlying_ip_proto;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.local_tx_ip_mapping.is_mapped_v4;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_fwd_header_mapping_to_ethtype_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ip_inactivity_check_table_key_t& key, const npl_ip_inactivity_check_table_key_t& mask, const npl_ip_inactivity_check_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ip_version;
        target_key.set_bits(31, 31, data_to_add);
        data_to_add = mask.ip_version;
        target_mask.set_bits(31, 31, data_to_add);
        data_to_add = key.ip_address_msb;
        target_key.set_bits(30, 11, data_to_add);
        data_to_add = mask.ip_address_msb;
        target_mask.set_bits(30, 11, data_to_add);
        data_to_add = key.vrf_id;
        target_key.set_bits(10, 0, data_to_add);
        data_to_add = mask.vrf_id;
        target_mask.set_bits(10, 0, data_to_add);
        
        if (value.action == NPL_IP_INACTIVITY_CHECK_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ip_inactivity_punt;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_inactivity_check_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ip_ingress_cmp_mcid_static_table_key_t& key, const npl_ip_ingress_cmp_mcid_static_table_key_t& mask, const npl_ip_ingress_cmp_mcid_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.global_mcid_17_downto_16;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = mask.global_mcid_17_downto_16;
        target_mask.set_bits(3, 2, data_to_add);
        
        if (value.action == NPL_IP_INGRESS_CMP_MCID_STATIC_TABLE_ACTION_SET_VALUE) {
            data_to_add = value.payloads.set_value.global_mcid_17_downto_16_is_zero;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_ingress_cmp_mcid_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ip_mc_local_inject_type_static_table_key_t& key, const npl_ip_mc_local_inject_type_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.current_protocol;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_IP_MC_LOCAL_INJECT_TYPE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pd_ene_encap_data_inject_header_type;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_mc_local_inject_type_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ip_mc_mpls_next_macro_static_table_key_t& key, const npl_ip_mc_mpls_next_macro_static_table_key_t& mask, const npl_ip_mc_mpls_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.type;
        target_key.set_bits(18, 14, data_to_add);
        data_to_add = mask.type;
        target_mask.set_bits(18, 14, data_to_add);
        data_to_add = key.ipv4_msb;
        target_key.set_bits(13, 10, data_to_add);
        data_to_add = mask.ipv4_msb;
        target_mask.set_bits(13, 10, data_to_add);
        data_to_add = key.ipv6_msb;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = mask.ipv6_msb;
        target_mask.set_bits(9, 2, data_to_add);
        
        if (value.action == NPL_IP_MC_MPLS_NEXT_MACRO_STATIC_TABLE_ACTION_IP_MC_MPLS_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.ip_mc_mpls_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.ip_mc_mpls_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_mc_mpls_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ip_mc_next_macro_static_table_key_t& key, const npl_ip_mc_next_macro_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.same_l3_int;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.collapsed_mc;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_IP_MC_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO) {
            data_to_add = value.payloads.set_npe_next_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.set_npe_next_macro.npe_macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_mc_next_macro_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ip_meter_profile_mapping_table_key_t& key, const npl_ip_meter_profile_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.qos_id;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_IP_METER_PROFILE_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.slp_qos_id;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_meter_profile_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ip_prefix_destination_table_key_t& key, const npl_ip_prefix_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(24, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x56ULL);
        data_to_add = key.ip_prefix_ptr;
        target_key.set_bits(23, 7, data_to_add);
        
        if (value.action == NPL_IP_PREFIX_DESTINATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.prefix_destination.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_prefix_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ip_proto_type_mux_static_table_key_t& key, const npl_ip_proto_type_mux_static_table_key_t& mask, const npl_ip_proto_type_mux_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.ip_version;
        target_key.set_bits(18, 18, data_to_add);
        data_to_add = mask.ip_version;
        target_mask.set_bits(18, 18, data_to_add);
        data_to_add = key.ipv4_proto;
        target_key.set_bits(17, 10, data_to_add);
        data_to_add = mask.ipv4_proto;
        target_mask.set_bits(17, 10, data_to_add);
        data_to_add = key.ipv6_proto;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = mask.ipv6_proto;
        target_mask.set_bits(9, 2, data_to_add);
        
        if (value.action == NPL_IP_PROTO_TYPE_MUX_STATIC_TABLE_ACTION_SET_VALUES) {
            data_to_add = value.payloads.set_values.is_gre_v4;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.set_values.is_gre_v6;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.set_values.is_udp;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.set_values.is_hop_by_hop;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_proto_type_mux_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ip_relay_to_vni_table_key_t& key, const npl_ip_relay_to_vni_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(26, 112);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xbULL);
        data_to_add = key.overlay_nh;
        target_key.set_bits(25, 16, data_to_add);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(15, 4, data_to_add);
        
        if (value.action == NPL_IP_RELAY_TO_VNI_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.l3_vxlan_relay_encap_data.overlay_nh_data.mac_da;
            target_payload.set_bits(111, 64, data_to_add);
            data_to_add = value.payloads.l3_vxlan_relay_encap_data.overlay_nh_data.sa_prefix_index;
            target_payload.set_bits(63, 60, data_to_add);
            data_to_add = value.payloads.l3_vxlan_relay_encap_data.overlay_nh_data.sa_lsb;
            target_payload.set_bits(59, 44, data_to_add);
            data_to_add = value.payloads.l3_vxlan_relay_encap_data.vni;
            target_payload.set_bits(43, 20, data_to_add);
            data_to_add = value.payloads.l3_vxlan_relay_encap_data.vni_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.l3_vxlan_relay_encap_data.vni_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.l3_vxlan_relay_encap_data.vni_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_relay_to_vni_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ip_rx_global_counter_table_key_t& key, const npl_ip_rx_global_counter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_IP_RX_GLOBAL_COUNTER_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.global_counter.tunnel_transit_counter_p.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.global_counter.tunnel_transit_counter_p.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.global_counter.tunnel_transit_counter_p.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_rx_global_counter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ip_ver_mc_static_table_key_t& key, const npl_ip_ver_mc_static_table_key_t& mask, const npl_ip_ver_mc_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.is_v6;
        target_key.set_bits(27, 27, data_to_add);
        data_to_add = mask.is_v6;
        target_mask.set_bits(27, 27, data_to_add);
        data_to_add = key.v6_sip_127_120;
        target_key.set_bits(26, 19, data_to_add);
        data_to_add = mask.v6_sip_127_120;
        target_mask.set_bits(26, 19, data_to_add);
        data_to_add = key.v4_sip_31_28;
        target_key.set_bits(18, 15, data_to_add);
        data_to_add = mask.v4_sip_31_28;
        target_mask.set_bits(18, 15, data_to_add);
        data_to_add = key.v4_frag_offset;
        target_key.set_bits(14, 2, data_to_add);
        data_to_add = mask.v4_frag_offset;
        target_mask.set_bits(14, 2, data_to_add);
        
        if (value.action == NPL_IP_VER_MC_STATIC_TABLE_ACTION_SET_VALUE) {
            data_to_add = value.payloads.set_value.v4_offset_zero;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.set_value.ip_ver_mc.ip_version;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.set_value.ip_ver_mc.is_mc.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ip_ver_mc_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t& key, const npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t& mask, const npl_ipv4_acl_map_protocol_type_to_protocol_number_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.protocol;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = mask.protocol;
        target_mask.set_bits(9, 2, data_to_add);
        
        if (value.action == NPL_IPV4_ACL_MAP_PROTOCOL_TYPE_TO_PROTOCOL_NUMBER_TABLE_ACTION_UPDATE) {
            data_to_add = value.payloads.update.dummy_bits;
            target_payload.set_bits(15, 11, data_to_add);
            data_to_add = value.payloads.update.is_valid;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.update.acl_l4_protocol;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.update.protocol_type;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_acl_map_protocol_type_to_protocol_number_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_acl_sport_static_table_key_t& key, const npl_ipv4_acl_sport_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.acl_is_valid;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = key.acl_l4_protocol;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_IPV4_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_MAPPED_PROTO_TYPE) {
            target_payload.set_bits(7, 0, 0x64ULL);
        }
        
        if (value.action == NPL_IPV4_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_PACKET) {
            target_payload.set_bits(7, 0, 0x20ULL);
        }
        
        if (value.action == NPL_IPV4_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_PACKET_PROTO_TYPE) {
            target_payload.set_bits(7, 0, 0x1cULL);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_acl_sport_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t& key, const npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(26, 131);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x2ULL);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(25, 14, data_to_add);
        data_to_add = key.my_dip_index;
        target_key.set_bits(13, 8, data_to_add);
        data_to_add = key.tunnel_type;
        target_key.set_bits(7, 4, data_to_add);
        
        if (value.action == NPL_IPV4_IP_TUNNEL_TERMINATION_DIP_INDEX_TT0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.term_tt0_attributes.additional.lp_profile;
            target_payload.set_bits(130, 129, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.load_balance_profile;
            target_payload.set_bits(128, 127, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.enable_monitor;
            target_payload.set_bits(126, 126, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            target_payload.set_bits(125, 125, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            target_payload.set_bits(124, 124, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.qos_id;
            target_payload.set_bits(123, 120, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.uc_rpf_mode;
            target_payload.set_bits(103, 102, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.l3_lp_mirror_type;
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.mirror_cmd;
            target_payload.set_bits(100, 96, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            target_payload.set_bits(95, 84, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            target_payload.set_bits(83, 83, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            target_payload.set_bits(82, 77, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            target_payload.set_bits(76, 64, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            target_payload.set_bits(61, 60, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            target_payload.set_bits(59, 48, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.lp_set;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.update_or_read;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.cb_id;
            target_payload.set_bits(38, 33, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.cb_set_base;
            target_payload.set_bits(32, 20, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_ip_tunnel_termination_dip_tt0_table_key_t& key, const npl_ipv4_ip_tunnel_termination_dip_tt0_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(52, 131);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x3ULL);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(51, 40, data_to_add);
        data_to_add = key.dip;
        target_key.set_bits(39, 8, data_to_add);
        data_to_add = key.tunnel_type;
        target_key.set_bits(7, 4, data_to_add);
        
        if (value.action == NPL_IPV4_IP_TUNNEL_TERMINATION_DIP_TT0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.term_tt0_attributes.additional.lp_profile;
            target_payload.set_bits(130, 129, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.load_balance_profile;
            target_payload.set_bits(128, 127, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.enable_monitor;
            target_payload.set_bits(126, 126, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            target_payload.set_bits(125, 125, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            target_payload.set_bits(124, 124, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.qos_id;
            target_payload.set_bits(123, 120, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.uc_rpf_mode;
            target_payload.set_bits(103, 102, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.l3_lp_mirror_type;
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.mirror_cmd;
            target_payload.set_bits(100, 96, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            target_payload.set_bits(95, 84, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            target_payload.set_bits(83, 83, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            target_payload.set_bits(82, 77, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            target_payload.set_bits(76, 64, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            target_payload.set_bits(61, 60, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            target_payload.set_bits(59, 48, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.lp_set;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.update_or_read;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.cb_id;
            target_payload.set_bits(38, 33, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.cb_set_base;
            target_payload.set_bits(32, 20, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_ip_tunnel_termination_dip_tt0_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t& key, const npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(58, 131);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(57, 46, data_to_add);
        data_to_add = key.sip;
        target_key.set_bits(45, 14, data_to_add);
        data_to_add = key.my_dip_index;
        target_key.set_bits(13, 8, data_to_add);
        data_to_add = key.tunnel_type;
        target_key.set_bits(7, 4, data_to_add);
        
        if (value.action == NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.term_tt0_attributes.additional.lp_profile;
            target_payload.set_bits(130, 129, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.load_balance_profile;
            target_payload.set_bits(128, 127, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.enable_monitor;
            target_payload.set_bits(126, 126, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            target_payload.set_bits(125, 125, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            target_payload.set_bits(124, 124, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.additional.qos_id;
            target_payload.set_bits(123, 120, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.uc_rpf_mode;
            target_payload.set_bits(103, 102, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.l3_lp_mirror_type;
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.mirror_cmd;
            target_payload.set_bits(100, 96, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            target_payload.set_bits(95, 84, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            target_payload.set_bits(83, 83, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            target_payload.set_bits(82, 77, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            target_payload.set_bits(76, 64, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            target_payload.set_bits(61, 60, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            target_payload.set_bits(59, 48, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.lp_set;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.term_tt0_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.update_or_read;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.cb_id;
            target_payload.set_bits(38, 33, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.q_counter.cb_set_base;
            target_payload.set_bits(32, 20, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.term_tt0_attributes.base.m_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t& key, const npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(58, 131);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(57, 46, data_to_add);
        data_to_add = key.sip;
        target_key.set_bits(45, 14, data_to_add);
        data_to_add = key.my_dip_index;
        target_key.set_bits(13, 8, data_to_add);
        data_to_add = key.tunnel_type;
        target_key.set_bits(7, 4, data_to_add);
        
        if (value.action == NPL_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.term_tt1_attributes.additional.lp_profile;
            target_payload.set_bits(130, 129, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.additional.load_balance_profile;
            target_payload.set_bits(128, 127, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.additional.enable_monitor;
            target_payload.set_bits(126, 126, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.additional.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            target_payload.set_bits(125, 125, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.additional.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            target_payload.set_bits(124, 124, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.additional.qos_id;
            target_payload.set_bits(123, 120, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.term_tt1_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.term_tt1_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.term_tt1_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.term_tt1_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.term_tt1_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.term_tt1_attributes.base.uc_rpf_mode;
            target_payload.set_bits(103, 102, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.l3_lp_mirror_type;
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.mirror_cmd;
            target_payload.set_bits(100, 96, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            target_payload.set_bits(95, 84, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            target_payload.set_bits(83, 83, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            target_payload.set_bits(82, 77, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            target_payload.set_bits(76, 64, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            target_payload.set_bits(61, 60, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            target_payload.set_bits(59, 48, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.lp_set;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.term_tt1_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.q_counter.update_or_read;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.q_counter.cb_id;
            target_payload.set_bits(38, 33, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.q_counter.cb_set_base;
            target_payload.set_bits(32, 20, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.m_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.m_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.term_tt1_attributes.base.m_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_lpm_table_key_t& key, const npl_ipv4_lpm_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(46, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(45, 34, data_to_add);
        data_to_add = key.ipv4_ip_address_address;
        target_key.set_bits(33, 2, data_to_add);
        
        if (value.action == NPL_IPV4_LPM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lpm_payload.class_id.id;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.lpm_payload.destination.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ipv4_lpts_table_key_t& key, const npl_ipv4_lpts_table_key_t& mask, const npl_ipv4_lpts_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(158, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xcULL);
        target_mask.set_bits(3, 0, 0xfULL);
        target_key.set_bits(5, 4, 0x2ULL);
        target_mask.set_bits(5, 4, 0x3ULL);
        data_to_add = key.fragmented;
        target_key.set_bits(157, 157, data_to_add);
        data_to_add = mask.fragmented;
        target_mask.set_bits(157, 157, data_to_add);
        data_to_add = key.is_mc;
        target_key.set_bits(156, 156, data_to_add);
        data_to_add = mask.is_mc;
        target_mask.set_bits(156, 156, data_to_add);
        data_to_add = key.app_id;
        target_key.set_bits(155, 152, data_to_add);
        data_to_add = mask.app_id;
        target_mask.set_bits(155, 152, data_to_add);
        data_to_add = key.established;
        target_key.set_bits(151, 151, data_to_add);
        data_to_add = mask.established;
        target_mask.set_bits(151, 151, data_to_add);
        data_to_add = key.ttl_255;
        target_key.set_bits(150, 150, data_to_add);
        data_to_add = mask.ttl_255;
        target_mask.set_bits(150, 150, data_to_add);
        data_to_add = key.og_codes.src_code.id;
        target_key.set_bits(149, 134, data_to_add);
        data_to_add = key.og_codes.dest_code.id;
        target_key.set_bits(133, 118, data_to_add);
        data_to_add = mask.og_codes.src_code.id;
        target_mask.set_bits(149, 134, data_to_add);
        data_to_add = mask.og_codes.dest_code.id;
        target_mask.set_bits(133, 118, data_to_add);
        data_to_add = key.l4_protocol;
        target_key.set_bits(117, 110, data_to_add);
        data_to_add = mask.l4_protocol;
        target_mask.set_bits(117, 110, data_to_add);
        data_to_add = key.l4_ports.src_port;
        target_key.set_bits(109, 94, data_to_add);
        data_to_add = key.l4_ports.dst_port;
        target_key.set_bits(93, 78, data_to_add);
        data_to_add = mask.l4_ports.src_port;
        target_mask.set_bits(109, 94, data_to_add);
        data_to_add = mask.l4_ports.dst_port;
        target_mask.set_bits(93, 78, data_to_add);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(77, 66, data_to_add);
        data_to_add = mask.l3_relay_id.id;
        target_mask.set_bits(77, 66, data_to_add);
        data_to_add = key.v4_frag;
        target_key.set_bits(65, 52, data_to_add);
        data_to_add = mask.v4_frag;
        target_mask.set_bits(65, 52, data_to_add);
        data_to_add = key.ip_length;
        target_key.set_bits(51, 38, data_to_add);
        data_to_add = mask.ip_length;
        target_mask.set_bits(51, 38, data_to_add);
        data_to_add = key.sip;
        target_key.set_bits(37, 6, data_to_add);
        data_to_add = mask.sip;
        target_mask.set_bits(37, 6, data_to_add);
        
        if (value.action == NPL_IPV4_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT) {
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.encap_punt_code.mirror_or_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 56, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 61, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 56, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.encap_punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 56, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.ingress_punt_src;
            target_payload.set_bits(55, 52, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.punt_sub_code.sub_code.lpts_flow_type.lpts_flow;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 48, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.punt_nw_encap_ptr.ptr;
            target_payload.set_bits(47, 40, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.punt_nw_encap_type;
            target_payload.set_bits(39, 36, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 35, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.punt_controls.punt_format;
            target_payload.set_bits(34, 33, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.punt_controls.mirror_local_encap_format;
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.meter_index_lsb;
            target_payload.set_bits(31, 25, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.lpts_second_lookup_index;
            target_payload.set_bits(24, 20, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.lpts_counter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.lpts_counter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.lpts_counter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_lpts_table_key_t& key)
{
    if (database_id == 0) {
        ternary_table_generic_entry_t result(158, 64);
        result.key.set_bits(3, 0, 0xcULL);
        result.mask.set_bits(3, 0, 0xfULL);
        result.key.set_bits(5, 4, 0x2ULL);
        result.mask.set_bits(5, 4, 0x3ULL);
        result.payload.set_bits(63, 48, 0x70ULL);
        result.payload.set_bits(31, 0, 0xfff7f000ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_og_pcl_em_table_key_t& key, const npl_ipv4_og_pcl_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(46, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(45, 42, 0xfULL);
        data_to_add = key.pcl_id.val;
        target_key.set_bits(41, 34, data_to_add);
        data_to_add = key.ip_address_31_20;
        target_key.set_bits(33, 22, data_to_add);
        data_to_add = key.ip_address_19_0;
        target_key.set_bits(21, 2, data_to_add);
        
        if (value.action == NPL_IPV4_OG_PCL_EM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.og_em_lookup_result.result_type;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.lpm_code.bits_n_18;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 19, data_to_add);
            }
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.lpm_code.zero;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 18, data_to_add);
            }
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.lpm_code.bits_17_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 0, data_to_add);
            }
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.lpts_code.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_og_pcl_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_og_pcl_lpm_table_key_t& key, const npl_ipv4_og_pcl_lpm_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(46, 25);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(45, 42, 0xfULL);
        data_to_add = key.pcl_id.val;
        target_key.set_bits(41, 34, data_to_add);
        data_to_add = key.ip_address;
        target_key.set_bits(33, 2, data_to_add);
        
        if (value.action == NPL_IPV4_OG_PCL_LPM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lpm_code.bits_n_18;
            target_payload.set_bits(24, 19, data_to_add);
            data_to_add = value.payloads.lpm_code.zero;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.lpm_code.bits_17_0;
            target_payload.set_bits(17, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_rtf_conf_set_mapping_table_key_t& key, const npl_ipv4_rtf_conf_set_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lp_rtf_conf_set.val;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = key.rtf_step.val;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_IPV4_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.f0_rtf_prop.ip_rtf.table_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 21, data_to_add);
            }
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.f0_rtf_prop.ip_rtf.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 14, data_to_add);
            }
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.f0_rtf_prop.eth_rtf.table_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 21, data_to_add);
            }
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.f0_rtf_prop.eth_rtf.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 14, data_to_add);
            }
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.f1_rtf_prop.ip_rtf.table_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 12, data_to_add);
            }
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.f1_rtf_prop.ip_rtf.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 5, data_to_add);
            }
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.f1_rtf_prop.eth_rtf.table_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 12, data_to_add);
            }
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.f1_rtf_prop.eth_rtf.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 5, data_to_add);
            }
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.stop_on_step_and_next_stage_compressed_fields.next_rtf_stage;
            target_payload.set_bits(4, 2, data_to_add);
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.stop_on_step_and_next_stage_compressed_fields.stop_on_step;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.ipv4_rtf_iteration_prop.use_fwd1_interface;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_rtf_conf_set_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_sgt_em_table_key_t& key, const npl_ipv4_sgt_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(46, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(45, 45, 0x1ULL);
        data_to_add = key.vrf_id;
        target_key.set_bits(44, 34, data_to_add);
        data_to_add = key.ip_address_31_20;
        target_key.set_bits(33, 22, data_to_add);
        data_to_add = key.ip_address_19_0;
        target_key.set_bits(21, 2, data_to_add);
        
        if (value.action == NPL_IPV4_SGT_EM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ip_sgt_em_result.result_type;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.ip_sgt_em_result.result.sgt_data.valid_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(16, 16, data_to_add);
            }
            data_to_add = value.payloads.ip_sgt_em_result.result.sgt_data.security_group_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_sgt_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_sgt_lpm_table_key_t& key, const npl_ipv4_sgt_lpm_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(46, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(45, 45, 0x1ULL);
        data_to_add = key.vrf_id;
        target_key.set_bits(44, 34, data_to_add);
        data_to_add = key.ip_address;
        target_key.set_bits(33, 2, data_to_add);
        
        if (value.action == NPL_IPV4_SGT_LPM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sgt_data.valid_group;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.sgt_data.security_group_tag;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_vrf_dip_em_table_key_t& key, const npl_ipv4_vrf_dip_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(46, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(45, 34, data_to_add);
        data_to_add = key.ip_address_31_20;
        target_key.set_bits(33, 22, data_to_add);
        data_to_add = key.ip_address_19_0;
        target_key.set_bits(21, 2, data_to_add);
        
        if (value.action == NPL_IPV4_VRF_DIP_EM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.em_lookup_result.result_type;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.em_lookup_result.result.em_dest.em_rpf_src.prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 44, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.em_dest.em_rpf_src.lsbs.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 32, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.em_dest.em_rpf_src.msbs.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 30, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.em_dest.class_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 20, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.em_dest.dest.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 50, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(49, 48, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.host_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 26, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host.dsp_or_dspa;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 48, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host.host_mac;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.dest_type_or_has_class.dest_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 60, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.dest_type_or_has_class.has_class;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 62, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.class_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 56, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.dest;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 48, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.host_mac_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 41, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.extra_dest_bit;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.host_mac_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.dest_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 60, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.dest;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.host_mac_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 41, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.extra_dest_bit;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.host_mac_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.local_mcid.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 40, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.rpf_destination.enable_mc_rpf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.rpf_destination.rpf_id_or_lp_id.rpf_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.rpf_destination.rpf_id_or_lp_id.lp.id.msbs.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 32, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.rpf_destination.rpf_id_or_lp_id.lp.id.lsbs.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 20, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.punt_on_rpf_fail;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.punt_and_fwd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 18, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.global_mcid.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_vrf_dip_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv4_vrf_s_g_table_key_t& key, const npl_ipv4_vrf_s_g_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(77, 62);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(4, 0, 0xdULL);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(76, 65, data_to_add);
        data_to_add = key.dip_19_0_;
        target_key.set_bits(64, 45, data_to_add);
        data_to_add = key.sip;
        target_key.set_bits(44, 13, data_to_add);
        data_to_add = key.dip_27_20_;
        target_key.set_bits(12, 5, data_to_add);
        
        if (value.action == NPL_IPV4_VRF_S_G_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.local_mcid.id;
            target_payload.set_bits(55, 40, data_to_add);
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.rpf_destination.enable_mc_rpf;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.rpf_destination.rpf_id_or_lp_id.rpf_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.rpf_destination.rpf_id_or_lp_id.lp.id.msbs.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 32, data_to_add);
            }
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.rpf_destination.rpf_id_or_lp_id.lp.id.lsbs.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 20, data_to_add);
            }
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.punt_on_rpf_fail;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.punt_and_fwd;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.global_mcid.id;
            target_payload.set_bits(17, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv4_vrf_s_g_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_acl_sport_static_table_key_t& key, const npl_ipv6_acl_sport_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.acl_is_valid;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = key.acl_l4_protocol;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_IPV6_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_MAPPED_PROTO_TYPE) {
            target_payload.set_bits(7, 0, 0x5fULL);
        }
        
        if (value.action == NPL_IPV6_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_PACKET) {
            target_payload.set_bits(7, 0, 0x1cULL);
        }
        
        if (value.action == NPL_IPV6_ACL_SPORT_STATIC_TABLE_ACTION_UPDATE_SPORT_FROM_PACKET_PROTO_TYPE) {
            target_payload.set_bits(7, 0, 0x1cULL);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_acl_sport_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ipv6_first_fragment_static_table_key_t& key, const npl_ipv6_first_fragment_static_table_key_t& mask, const npl_ipv6_first_fragment_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.acl_on_outer;
        target_key.set_bits(7, 7, data_to_add);
        data_to_add = mask.acl_on_outer;
        target_mask.set_bits(7, 7, data_to_add);
        data_to_add = key.acl_changed_destination;
        target_key.set_bits(6, 4, data_to_add);
        data_to_add = mask.acl_changed_destination;
        target_mask.set_bits(6, 4, data_to_add);
        data_to_add = key.saved_not_first_fragment;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = mask.saved_not_first_fragment;
        target_mask.set_bits(3, 3, data_to_add);
        data_to_add = key.packet_not_first_fragment;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.packet_not_first_fragment;
        target_mask.set_bits(2, 2, data_to_add);
        
        if (value.action == NPL_IPV6_FIRST_FRAGMENT_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ip_first_fragment.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_first_fragment_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_lpm_table_key_t& key, const npl_ipv6_lpm_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(142, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(141, 130, data_to_add);
        data_to_add = key.ipv6_ip_address_address[1];
        target_key.set_bits(129, 66, data_to_add);
        data_to_add = key.ipv6_ip_address_address[0];
        target_key.set_bits(65, 2, data_to_add);
        
        if (value.action == NPL_IPV6_LPM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lpm_payload.class_id.id;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.lpm_payload.destination.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ipv6_lpts_table_key_t& key, const npl_ipv6_lpts_table_key_t& mask, const npl_ipv6_lpts_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(320, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(163, 160, 0xdULL);
        target_mask.set_bits(163, 160, 0xfULL);
        target_mask.set_bits(16, 4, 0x1fffULL);
        target_key.set_bits(3, 0, 0xdULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.src_port;
        target_key.set_bits(319, 304, data_to_add);
        data_to_add = mask.src_port;
        target_mask.set_bits(319, 304, data_to_add);
        data_to_add = key.sip[1];
        target_key.set_bits(303, 240, data_to_add);
        data_to_add = key.sip[0];
        target_key.set_bits(239, 176, data_to_add);
        data_to_add = mask.sip[1];
        target_mask.set_bits(303, 240, data_to_add);
        data_to_add = mask.sip[0];
        target_mask.set_bits(239, 176, data_to_add);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(175, 164, data_to_add);
        data_to_add = mask.l3_relay_id.id;
        target_mask.set_bits(175, 164, data_to_add);
        data_to_add = key.is_mc;
        target_key.set_bits(159, 159, data_to_add);
        data_to_add = mask.is_mc;
        target_mask.set_bits(159, 159, data_to_add);
        data_to_add = key.app_id;
        target_key.set_bits(158, 155, data_to_add);
        data_to_add = mask.app_id;
        target_mask.set_bits(158, 155, data_to_add);
        data_to_add = key.established;
        target_key.set_bits(154, 154, data_to_add);
        data_to_add = mask.established;
        target_mask.set_bits(154, 154, data_to_add);
        data_to_add = key.ttl_255;
        target_key.set_bits(153, 153, data_to_add);
        data_to_add = mask.ttl_255;
        target_mask.set_bits(153, 153, data_to_add);
        data_to_add = key.og_codes.src_code.id;
        target_key.set_bits(152, 137, data_to_add);
        data_to_add = key.og_codes.dest_code.id;
        target_key.set_bits(136, 121, data_to_add);
        data_to_add = mask.og_codes.src_code.id;
        target_mask.set_bits(152, 137, data_to_add);
        data_to_add = mask.og_codes.dest_code.id;
        target_mask.set_bits(136, 121, data_to_add);
        data_to_add = key.l4_protocol;
        target_key.set_bits(120, 113, data_to_add);
        data_to_add = mask.l4_protocol;
        target_mask.set_bits(120, 113, data_to_add);
        data_to_add = key.dst_port;
        target_key.set_bits(112, 97, data_to_add);
        data_to_add = mask.dst_port;
        target_mask.set_bits(112, 97, data_to_add);
        data_to_add = key.ip_length;
        target_key.set_bits(96, 81, data_to_add);
        data_to_add = mask.ip_length;
        target_mask.set_bits(96, 81, data_to_add);
        data_to_add = key.pad;
        target_key.set_bits(80, 17, data_to_add);
        data_to_add = mask.pad;
        target_mask.set_bits(80, 17, data_to_add);
        
        if (value.action == NPL_IPV6_LPTS_TABLE_ACTION_LPTS_FIRST_LOOKUP_RESULT) {
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.encap_punt_code.mirror_or_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 56, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 61, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 56, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.encap_punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 56, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.ingress_punt_src;
            target_payload.set_bits(55, 52, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_first_result_encap_data_msb.punt_sub_code.sub_code.lpts_flow_type.lpts_flow;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 48, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.punt_nw_encap_ptr.ptr;
            target_payload.set_bits(47, 40, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.punt_nw_encap_type;
            target_payload.set_bits(39, 36, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 35, data_to_add);
            }
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.punt_controls.punt_format;
            target_payload.set_bits(34, 33, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.punt_encap_data_lsb.punt_controls.mirror_local_encap_format;
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.meter_index_lsb;
            target_payload.set_bits(31, 25, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.lpts_second_lookup_index;
            target_payload.set_bits(24, 20, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.lpts_counter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.lpts_counter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.lpts_first_lookup_result.lpts_cntr_and_second_lookup_index.lpts_counter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_lpts_table_key_t& key)
{
    if (database_id == 0) {
        ternary_table_generic_entry_t result(320, 64);
        result.key.set_bits(163, 160, 0xdULL);
        result.mask.set_bits(163, 160, 0xfULL);
        result.mask.set_bits(16, 4, 0x1fffULL);
        result.key.set_bits(3, 0, 0xdULL);
        result.mask.set_bits(3, 0, 0xfULL);
        result.payload.set_bits(63, 48, 0x70ULL);
        result.payload.set_bits(31, 0, 0xfff7f000ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_og_pcl_em_table_key_t& key, const npl_ipv6_og_pcl_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(142, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_key.set_bits(141, 138, 0xfULL);
        data_to_add = key.pcl_id.val;
        target_key.set_bits(137, 130, data_to_add);
        data_to_add = key.ip_address[1];
        target_key.set_bits(129, 66, data_to_add);
        data_to_add = key.ip_address[0];
        target_key.set_bits(65, 2, data_to_add);
        
        if (value.action == NPL_IPV6_OG_PCL_EM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.og_em_lookup_result.result_type;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.lpm_code.bits_n_18;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 19, data_to_add);
            }
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.lpm_code.zero;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 18, data_to_add);
            }
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.lpm_code.bits_17_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 0, data_to_add);
            }
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.lpts_code.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
            data_to_add = value.payloads.og_em_lookup_result.result.lpm_code_or_dest.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_og_pcl_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_og_pcl_lpm_table_key_t& key, const npl_ipv6_og_pcl_lpm_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(142, 25);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_key.set_bits(141, 138, 0xfULL);
        data_to_add = key.pcl_id.val;
        target_key.set_bits(137, 130, data_to_add);
        data_to_add = key.ip_address[1];
        target_key.set_bits(129, 66, data_to_add);
        data_to_add = key.ip_address[0];
        target_key.set_bits(65, 2, data_to_add);
        
        if (value.action == NPL_IPV6_OG_PCL_LPM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lpm_code.bits_n_18;
            target_payload.set_bits(24, 19, data_to_add);
            data_to_add = value.payloads.lpm_code.zero;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.lpm_code.bits_17_0;
            target_payload.set_bits(17, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_rtf_conf_set_mapping_table_key_t& key, const npl_ipv6_rtf_conf_set_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lp_rtf_conf_set.val;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = key.rtf_step.val;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_IPV6_RTF_CONF_SET_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.f0_rtf_prop.ip_rtf.table_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 21, data_to_add);
            }
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.f0_rtf_prop.ip_rtf.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 14, data_to_add);
            }
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.f0_rtf_prop.eth_rtf.table_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 21, data_to_add);
            }
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.f0_rtf_prop.eth_rtf.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 14, data_to_add);
            }
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.f1_rtf_prop.ip_rtf.table_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 12, data_to_add);
            }
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.f1_rtf_prop.ip_rtf.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 5, data_to_add);
            }
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.f1_rtf_prop.eth_rtf.table_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 12, data_to_add);
            }
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.f1_rtf_prop.eth_rtf.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 5, data_to_add);
            }
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.stop_on_step_and_next_stage_compressed_fields.next_rtf_stage;
            target_payload.set_bits(4, 2, data_to_add);
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.stop_on_step_and_next_stage_compressed_fields.stop_on_step;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.ipv6_rtf_iteration_prop.use_fwd1_interface;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_rtf_conf_set_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_sgt_em_table_key_t& key, const npl_ipv6_sgt_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(142, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_key.set_bits(141, 141, 0x1ULL);
        data_to_add = key.vrf_id;
        target_key.set_bits(140, 130, data_to_add);
        data_to_add = key.ip_address[1];
        target_key.set_bits(129, 66, data_to_add);
        data_to_add = key.ip_address[0];
        target_key.set_bits(65, 2, data_to_add);
        
        if (value.action == NPL_IPV6_SGT_EM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ip_sgt_em_result.result_type;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.ip_sgt_em_result.result.sgt_data.valid_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(16, 16, data_to_add);
            }
            data_to_add = value.payloads.ip_sgt_em_result.result.sgt_data.security_group_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_sgt_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_sgt_lpm_table_key_t& key, const npl_ipv6_sgt_lpm_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(142, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_key.set_bits(141, 141, 0x1ULL);
        data_to_add = key.vrf_id;
        target_key.set_bits(140, 130, data_to_add);
        data_to_add = key.ip_address[1];
        target_key.set_bits(129, 66, data_to_add);
        data_to_add = key.ip_address[0];
        target_key.set_bits(65, 2, data_to_add);
        
        if (value.action == NPL_IPV6_SGT_LPM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sgt_data.valid_group;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.sgt_data.security_group_tag;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_ipv6_sip_compression_table_key_t& key, const npl_ipv6_sip_compression_table_key_t& mask, const npl_ipv6_sip_compression_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(132, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.ipv6_sip[1];
        target_key.set_bits(131, 68, data_to_add);
        data_to_add = key.ipv6_sip[0];
        target_key.set_bits(67, 4, data_to_add);
        data_to_add = mask.ipv6_sip[1];
        target_mask.set_bits(131, 68, data_to_add);
        data_to_add = mask.ipv6_sip[0];
        target_mask.set_bits(67, 4, data_to_add);
        
        if (value.action == NPL_IPV6_SIP_COMPRESSION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.compressed_sip;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_sip_compression_table_key_t& key)
{
    if (database_id == 0) {
        ternary_table_generic_entry_t result(132, 16);
        result.mask.set_bits(3, 0, 0xfULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_vrf_dip_em_table_key_t& key, const npl_ipv6_vrf_dip_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(142, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(141, 130, data_to_add);
        data_to_add = key.ipv6_ip_address_address[1];
        target_key.set_bits(129, 66, data_to_add);
        data_to_add = key.ipv6_ip_address_address[0];
        target_key.set_bits(65, 2, data_to_add);
        
        if (value.action == NPL_IPV6_VRF_DIP_EM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.em_lookup_result.result_type;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.em_lookup_result.result.em_dest.em_rpf_src.prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 44, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.em_dest.em_rpf_src.lsbs.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 32, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.em_dest.em_rpf_src.msbs.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 30, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.em_dest.class_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 20, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.em_dest.dest.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 50, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(49, 48, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.host_ptr.host_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 26, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.ptr_and_l3_dlp.destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host.dsp_or_dspa;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 48, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host.host_mac;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.dest_type_or_has_class.dest_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 60, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.dest_type_or_has_class.has_class;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 62, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.class_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 56, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.dest;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 48, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.host_mac_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 41, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.extra_dest_bit;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_w_class.host_mac_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.dest_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 60, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.dest;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.host_mac_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 41, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.extra_dest_bit;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.dsp_host_wo_class.host_mac_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.local_mcid.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 40, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.rpf_destination.enable_mc_rpf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.rpf_destination.rpf_id_or_lp_id.rpf_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.rpf_destination.rpf_id_or_lp_id.lp.id.msbs.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 32, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.rpf_destination.rpf_id_or_lp_id.lp.id.lsbs.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 20, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.punt_on_rpf_fail;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.punt_and_fwd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 18, data_to_add);
            }
            data_to_add = value.payloads.em_lookup_result.result.mc_result.global_mcid.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_vrf_dip_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ipv6_vrf_s_g_table_key_t& key, const npl_ipv6_vrf_s_g_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(66, 62);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(5, 0, 0x3dULL);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(65, 54, data_to_add);
        data_to_add = key.compressed_sip;
        target_key.set_bits(53, 38, data_to_add);
        data_to_add = key.dip_32_lsb;
        target_key.set_bits(37, 6, data_to_add);
        
        if (value.action == NPL_IPV6_VRF_S_G_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.local_mcid.id;
            target_payload.set_bits(55, 40, data_to_add);
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.rpf_destination.enable_mc_rpf;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.rpf_destination.rpf_id_or_lp_id.rpf_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.rpf_destination.rpf_id_or_lp_id.lp.id.msbs.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 32, data_to_add);
            }
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.rpf_destination.rpf_id_or_lp_id.lp.id.lsbs.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 20, data_to_add);
            }
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.punt_on_rpf_fail;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.punt_and_fwd;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.vrf_s_g_hw_ip_mc_result.raw_payload.global_mcid.id;
            target_payload.set_bits(17, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ipv6_vrf_s_g_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_l2_dlp_table_key_t& key, const npl_l2_dlp_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(22, 121);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x7ULL);
        data_to_add = key.l2_dlp_id_key_id;
        target_key.set_bits(21, 4, data_to_add);
        
        if (value.action == NPL_L2_DLP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.l2_dlp_attributes.disabled;
            target_payload.set_bits(120, 120, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.stp_state_is_block;
            target_payload.set_bits(119, 119, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.dlp_attributes.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(117, 115, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.dlp_attributes.lp_profile;
            target_payload.set_bits(114, 113, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.dlp_attributes.port_mirror_type;
            target_payload.set_bits(112, 112, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.tx_to_rx_rcy_data.unscheduled_recycle_code.recycle_pkt;
            target_payload.set_bits(111, 111, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.tx_to_rx_rcy_data.unscheduled_recycle_code.unscheduled_recycle_code_lsb;
            target_payload.set_bits(110, 110, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.tx_to_rx_rcy_data.unscheduled_recycle_data;
            target_payload.set_bits(109, 104, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.vlan_after_eve_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 84, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve.main_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 82, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve.secondary_type_or_vid_2.secondary_type_with_padding.secondary_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(72, 70, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve.secondary_type_or_vid_2.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(81, 70, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 68, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 56, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve_svi.main_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 82, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve_svi.sub_type_or_vid_2_plus_prf.svi_eve_sub_type_plus_pad_plus_prf.sub_type_plus_prf.sub_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(72, 70, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve_svi.sub_type_or_vid_2_plus_prf.svi_eve_sub_type_plus_pad_plus_prf.sub_type_plus_prf.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 68, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve_svi.sub_type_or_vid_2_plus_prf.svi_eve_vid2_plus_prf_t.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(81, 70, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve_svi.sub_type_or_vid_2_plus_prf.svi_eve_vid2_plus_prf_t.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 68, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve_svi.sub_type_or_vid_2_plus_prf.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(81, 70, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.eve_types.eve_svi.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 56, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.mep_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 55, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.ac.max_mep_level;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(54, 52, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.eve.main_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.eve.secondary_type_or_vid_2.secondary_type_with_padding.secondary_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(92, 90, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.eve.secondary_type_or_vid_2.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(101, 90, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.eve.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 88, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.eve.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 76, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.pwe_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 56, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(54, 54, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.pwe_fat;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 53, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.l2_dlp_specific.pwe.pwe_cw;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 52, data_to_add);
            }
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.demux_count;
            target_payload.set_bits(49, 49, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.is_group_qos;
            target_payload.set_bits(48, 48, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.q_counter.update_or_read;
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.q_counter.cb_id;
            target_payload.set_bits(46, 41, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.q_counter.cb_set_base;
            target_payload.set_bits(40, 28, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.p_counter.update_or_read;
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.p_counter.cb_id;
            target_payload.set_bits(26, 21, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.p_counter.cb_set_base;
            target_payload.set_bits(20, 8, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.qos_attributes.qos_id;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.l2_dlp_attributes.acl_id;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_dlp_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_l2_lp_profile_filter_table_key_t& key, const npl_l2_lp_profile_filter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.slp_profile;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = key.lp_profile;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_L2_LP_PROFILE_FILTER_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.split_horizon;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_lp_profile_filter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l2_lpts_ctrl_fields_static_table_key_t& key, const npl_l2_lpts_ctrl_fields_static_table_key_t& mask, const npl_l2_lpts_ctrl_fields_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(48, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mac_lp_type;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = mask.mac_lp_type;
        target_mask.set_bits(3, 3, data_to_add);
        data_to_add = key.mac_terminated;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.mac_terminated;
        target_mask.set_bits(2, 2, data_to_add);
        data_to_add = key.is_tagged;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = mask.is_tagged;
        target_mask.set_bits(1, 1, data_to_add);
        data_to_add = key.is_svi;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.is_svi;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_L2_LPTS_CTRL_FIELDS_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ctrl_fields;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_lpts_ctrl_fields_static_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(48, 16);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l2_lpts_ipv4_table_key_t& key, const npl_l2_lpts_ipv4_table_key_t& mask, const npl_l2_lpts_ipv4_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(106, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x8ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.dip;
        target_key.set_bits(105, 74, data_to_add);
        data_to_add = mask.dip;
        target_mask.set_bits(105, 74, data_to_add);
        data_to_add = key.l4_ports.src_port;
        target_key.set_bits(73, 58, data_to_add);
        data_to_add = key.l4_ports.dst_port;
        target_key.set_bits(57, 42, data_to_add);
        data_to_add = mask.l4_ports.src_port;
        target_mask.set_bits(73, 58, data_to_add);
        data_to_add = mask.l4_ports.dst_port;
        target_mask.set_bits(57, 42, data_to_add);
        data_to_add = key.ttl;
        target_key.set_bits(41, 34, data_to_add);
        data_to_add = mask.ttl;
        target_mask.set_bits(41, 34, data_to_add);
        data_to_add = key.protocol;
        target_key.set_bits(33, 26, data_to_add);
        data_to_add = mask.protocol;
        target_mask.set_bits(33, 26, data_to_add);
        data_to_add = key.npp_attributes;
        target_key.set_bits(25, 18, data_to_add);
        data_to_add = mask.npp_attributes;
        target_mask.set_bits(25, 18, data_to_add);
        data_to_add = key.bd_attributes;
        target_key.set_bits(17, 12, data_to_add);
        data_to_add = mask.bd_attributes;
        target_mask.set_bits(17, 12, data_to_add);
        data_to_add = key.l2_slp_attributes;
        target_key.set_bits(11, 10, data_to_add);
        data_to_add = mask.l2_slp_attributes;
        target_mask.set_bits(11, 10, data_to_add);
        data_to_add = key.mac_lp_type;
        target_key.set_bits(9, 9, data_to_add);
        data_to_add = mask.mac_lp_type;
        target_mask.set_bits(9, 9, data_to_add);
        data_to_add = key.mac_terminated;
        target_key.set_bits(8, 8, data_to_add);
        data_to_add = mask.mac_terminated;
        target_mask.set_bits(8, 8, data_to_add);
        data_to_add = key.is_tagged;
        target_key.set_bits(7, 7, data_to_add);
        data_to_add = mask.is_tagged;
        target_mask.set_bits(7, 7, data_to_add);
        data_to_add = key.is_svi;
        target_key.set_bits(6, 6, data_to_add);
        data_to_add = mask.is_svi;
        target_mask.set_bits(6, 6, data_to_add);
        data_to_add = key.ip_not_first_fragment.v6_not_first_fragment;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.ip_not_first_fragment.v4_not_first_fragment;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = mask.ip_not_first_fragment.v6_not_first_fragment;
        target_mask.set_bits(5, 5, data_to_add);
        data_to_add = mask.ip_not_first_fragment.v4_not_first_fragment;
        target_mask.set_bits(4, 4, data_to_add);
        
        if (value.action == NPL_L2_LPTS_IPV4_TABLE_ACTION_L2_LPTS_RESULT) {
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.lacp;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp0;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp1;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp2;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp3;
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp4;
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp5;
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp6;
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp7;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.cisco_protocols;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_over_l2;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_drain;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_over_l3;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.arp;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.ptp_over_eth;
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.macsec;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv4_server;
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv4_client;
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv6_server;
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv6_client;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap0;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap1;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap2;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap3;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap4;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap5;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap6;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap7;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap8;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap9;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap10;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap11;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_lpts_ipv4_table_key_t& key)
{
    if (database_id == 0) {
        ternary_table_generic_entry_t result(106, 32);
        result.key.set_bits(3, 0, 0x8ULL);
        result.mask.set_bits(3, 0, 0xfULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l2_lpts_ipv6_table_key_t& key, const npl_l2_lpts_ipv6_table_key_t& mask, const npl_l2_lpts_ipv6_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(138, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xcULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.dip_32_msb;
        target_key.set_bits(137, 106, data_to_add);
        data_to_add = mask.dip_32_msb;
        target_mask.set_bits(137, 106, data_to_add);
        data_to_add = key.dip_32_lsb;
        target_key.set_bits(105, 74, data_to_add);
        data_to_add = mask.dip_32_lsb;
        target_mask.set_bits(105, 74, data_to_add);
        data_to_add = key.l4_ports.src_port;
        target_key.set_bits(73, 58, data_to_add);
        data_to_add = key.l4_ports.dst_port;
        target_key.set_bits(57, 42, data_to_add);
        data_to_add = mask.l4_ports.src_port;
        target_mask.set_bits(73, 58, data_to_add);
        data_to_add = mask.l4_ports.dst_port;
        target_mask.set_bits(57, 42, data_to_add);
        data_to_add = key.next_header;
        target_key.set_bits(41, 34, data_to_add);
        data_to_add = mask.next_header;
        target_mask.set_bits(41, 34, data_to_add);
        data_to_add = key.hop_limit;
        target_key.set_bits(33, 26, data_to_add);
        data_to_add = mask.hop_limit;
        target_mask.set_bits(33, 26, data_to_add);
        data_to_add = key.npp_attributes;
        target_key.set_bits(25, 18, data_to_add);
        data_to_add = mask.npp_attributes;
        target_mask.set_bits(25, 18, data_to_add);
        data_to_add = key.bd_attributes;
        target_key.set_bits(17, 12, data_to_add);
        data_to_add = mask.bd_attributes;
        target_mask.set_bits(17, 12, data_to_add);
        data_to_add = key.l2_slp_attributes;
        target_key.set_bits(11, 10, data_to_add);
        data_to_add = mask.l2_slp_attributes;
        target_mask.set_bits(11, 10, data_to_add);
        data_to_add = key.mac_lp_type;
        target_key.set_bits(9, 9, data_to_add);
        data_to_add = mask.mac_lp_type;
        target_mask.set_bits(9, 9, data_to_add);
        data_to_add = key.mac_terminated;
        target_key.set_bits(8, 8, data_to_add);
        data_to_add = mask.mac_terminated;
        target_mask.set_bits(8, 8, data_to_add);
        data_to_add = key.is_tagged;
        target_key.set_bits(7, 7, data_to_add);
        data_to_add = mask.is_tagged;
        target_mask.set_bits(7, 7, data_to_add);
        data_to_add = key.is_svi;
        target_key.set_bits(6, 6, data_to_add);
        data_to_add = mask.is_svi;
        target_mask.set_bits(6, 6, data_to_add);
        data_to_add = key.ip_not_first_fragment.v6_not_first_fragment;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.ip_not_first_fragment.v4_not_first_fragment;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = mask.ip_not_first_fragment.v6_not_first_fragment;
        target_mask.set_bits(5, 5, data_to_add);
        data_to_add = mask.ip_not_first_fragment.v4_not_first_fragment;
        target_mask.set_bits(4, 4, data_to_add);
        
        if (value.action == NPL_L2_LPTS_IPV6_TABLE_ACTION_L2_LPTS_RESULT) {
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.lacp;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp0;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp1;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp2;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp3;
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp4;
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp5;
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp6;
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp7;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.cisco_protocols;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_over_l2;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_drain;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_over_l3;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.arp;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.ptp_over_eth;
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.macsec;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv4_server;
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv4_client;
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv6_server;
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv6_client;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap0;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap1;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap2;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap3;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap4;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap5;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap6;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap7;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap8;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap9;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap10;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap11;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_lpts_ipv6_table_key_t& key)
{
    if (database_id == 0) {
        ternary_table_generic_entry_t result(138, 32);
        result.key.set_bits(3, 0, 0xcULL);
        result.mask.set_bits(3, 0, 0xfULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l2_lpts_mac_table_key_t& key, const npl_l2_lpts_mac_table_key_t& mask, const npl_l2_lpts_mac_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(88, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x4ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.mac_da.mac_address;
        target_key.set_bits(87, 40, data_to_add);
        data_to_add = mask.mac_da.mac_address;
        target_mask.set_bits(87, 40, data_to_add);
        data_to_add = key.ether_type;
        target_key.set_bits(39, 24, data_to_add);
        data_to_add = mask.ether_type;
        target_mask.set_bits(39, 24, data_to_add);
        data_to_add = key.npp_attributes;
        target_key.set_bits(23, 16, data_to_add);
        data_to_add = mask.npp_attributes;
        target_mask.set_bits(23, 16, data_to_add);
        data_to_add = key.bd_attributes;
        target_key.set_bits(15, 10, data_to_add);
        data_to_add = mask.bd_attributes;
        target_mask.set_bits(15, 10, data_to_add);
        data_to_add = key.l2_slp_attributes;
        target_key.set_bits(9, 8, data_to_add);
        data_to_add = mask.l2_slp_attributes;
        target_mask.set_bits(9, 8, data_to_add);
        data_to_add = key.mac_lp_type;
        target_key.set_bits(7, 7, data_to_add);
        data_to_add = mask.mac_lp_type;
        target_mask.set_bits(7, 7, data_to_add);
        data_to_add = key.mac_terminated;
        target_key.set_bits(6, 6, data_to_add);
        data_to_add = mask.mac_terminated;
        target_mask.set_bits(6, 6, data_to_add);
        data_to_add = key.is_tagged;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = mask.is_tagged;
        target_mask.set_bits(5, 5, data_to_add);
        data_to_add = key.is_svi;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = mask.is_svi;
        target_mask.set_bits(4, 4, data_to_add);
        
        if (value.action == NPL_L2_LPTS_MAC_TABLE_ACTION_L2_LPTS_RESULT) {
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.lacp;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp0;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp1;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp2;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp3;
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp4;
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp5;
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp6;
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.l2cp7;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.cisco_protocols;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_over_l2;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_drain;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.isis_over_l3;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.arp;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.ptp_over_eth;
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.macsec;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv4_server;
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv4_client;
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv6_server;
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.dhcpv6_client;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap0;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap1;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap2;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap3;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap4;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap5;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap6;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap7;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap8;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap9;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap10;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.l2_lpts_result.l2_lpts_trap_vector.rsvd.trap11;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_lpts_mac_table_key_t& key)
{
    if (database_id == 0) {
        ternary_table_generic_entry_t result(88, 32);
        result.key.set_bits(3, 0, 0x4ULL);
        result.mask.set_bits(3, 0, 0xfULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l2_lpts_next_macro_static_table_key_t& key, const npl_l2_lpts_next_macro_static_table_key_t& mask, const npl_l2_lpts_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.type;
        target_key.set_bits(9, 5, data_to_add);
        data_to_add = mask.type;
        target_mask.set_bits(9, 5, data_to_add);
        data_to_add = key.ctrl_fields.l2_lpts;
        target_key.set_bits(4, 3, data_to_add);
        data_to_add = mask.ctrl_fields.l2_lpts;
        target_mask.set_bits(4, 3, data_to_add);
        data_to_add = key.v4_mc;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.v4_mc;
        target_mask.set_bits(2, 2, data_to_add);
        data_to_add = key.v6_mc;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = mask.v6_mc;
        target_mask.set_bits(1, 1, data_to_add);
        
        if (value.action == NPL_L2_LPTS_NEXT_MACRO_STATIC_TABLE_ACTION_L2_LPTS_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.l2_lpts_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.l2_lpts_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_lpts_next_macro_static_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(16, 16);
        result.key.set_bits(0, 0, 0x1ULL);
        result.mask.set_bits(0, 0, 0x1ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l2_lpts_protocol_table_key_t& key, const npl_l2_lpts_protocol_table_key_t& mask, const npl_l2_lpts_protocol_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.next_protocol_type;
        target_key.set_bits(27, 23, data_to_add);
        data_to_add = mask.next_protocol_type;
        target_mask.set_bits(27, 23, data_to_add);
        data_to_add = key.next_header_1_type;
        target_key.set_bits(22, 18, data_to_add);
        data_to_add = mask.next_header_1_type;
        target_mask.set_bits(22, 18, data_to_add);
        data_to_add = key.dst_udp_port;
        target_key.set_bits(17, 2, data_to_add);
        data_to_add = mask.dst_udp_port;
        target_mask.set_bits(17, 2, data_to_add);
        data_to_add = key.mac_da_use_l2_lpts;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = mask.mac_da_use_l2_lpts;
        target_mask.set_bits(1, 1, data_to_add);
        
        if (value.action == NPL_L2_LPTS_PROTOCOL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.use_l2_lpts;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_lpts_protocol_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(32, 16);
        result.mask.set_bits(0, 0, 0x1ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_l2_lpts_skip_p2p_static_table_key_t& key, const npl_l2_lpts_skip_p2p_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mac_lp_type_and_term;
        target_key.set_bits(2, 1, data_to_add);
        data_to_add = key.is_p2p;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_L2_LPTS_SKIP_P2P_STATIC_TABLE_ACTION_L2_LPTS_SET_SKIP_P2P_TRAP) {
            data_to_add = value.payloads.l2_lpts_set_skip_p2p_trap.skip_p2p_trap;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_lpts_skip_p2p_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l2_termination_next_macro_static_table_key_t& key, const npl_l2_termination_next_macro_static_table_key_t& mask, const npl_l2_termination_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.next_hdr_type;
        target_key.set_bits(12, 9, data_to_add);
        data_to_add = mask.next_hdr_type;
        target_mask.set_bits(12, 9, data_to_add);
        data_to_add = key.ipv4_ipv6_eth_init_rtf_stage.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_key.set_bits(8, 7, data_to_add);
        data_to_add = key.ipv4_ipv6_eth_init_rtf_stage.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_key.set_bits(6, 5, data_to_add);
        data_to_add = key.ipv4_ipv6_eth_init_rtf_stage.eth_init_rtf_stage;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = mask.ipv4_ipv6_eth_init_rtf_stage.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_mask.set_bits(8, 7, data_to_add);
        data_to_add = mask.ipv4_ipv6_eth_init_rtf_stage.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_mask.set_bits(6, 5, data_to_add);
        data_to_add = mask.ipv4_ipv6_eth_init_rtf_stage.eth_init_rtf_stage;
        target_mask.set_bits(4, 2, data_to_add);
        
        if (value.action == NPL_L2_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.l2_termination_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.l2_termination_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_termination_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_l2_tunnel_term_next_macro_static_table_key_t& key, const npl_l2_tunnel_term_next_macro_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.overlay_or_pwe_lp_type;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = key.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = key.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_L2_TUNNEL_TERM_NEXT_MACRO_STATIC_TABLE_ACTION_L2_TERMINATION_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.l2_termination_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.l2_termination_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l2_tunnel_term_next_macro_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l3_dlp_p_counter_offset_table_key_t& key, const npl_l3_dlp_p_counter_offset_table_key_t& mask, const npl_l3_dlp_p_counter_offset_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.is_mc;
        target_key.set_bits(13, 13, data_to_add);
        data_to_add = mask.is_mc;
        target_mask.set_bits(13, 13, data_to_add);
        data_to_add = key.ip_acl_macro_control;
        target_key.set_bits(12, 9, data_to_add);
        data_to_add = mask.ip_acl_macro_control;
        target_mask.set_bits(12, 9, data_to_add);
        data_to_add = key.l3_encap_type;
        target_key.set_bits(8, 5, data_to_add);
        data_to_add = mask.l3_encap_type;
        target_mask.set_bits(8, 5, data_to_add);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(4, 1, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(4, 1, data_to_add);
        
        if (value.action == NPL_L3_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.local_tx_counter_offset.offset;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l3_dlp_p_counter_offset_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_l3_dlp_table_key_t& key, const npl_l3_dlp_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(15, 141);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l3_dlp_msbs;
        target_key.set_bits(14, 13, data_to_add);
        data_to_add = key.l3_dlp_lsbs;
        target_key.set_bits(12, 1, data_to_add);
        
        if (value.action == NPL_L3_DLP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.l3_dlp_attributes.svi_dhcp_snooping;
            target_payload.set_bits(140, 140, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.l3_dlp_encap.sa_prefix_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 136, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.l3_dlp_encap.vlan_and_sa_lsb_encap.vlan_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 124, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.l3_dlp_encap.vlan_and_sa_lsb_encap.tpid_sa_lsb.sa_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(123, 108, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.l3_dlp_encap.vlan_and_sa_lsb_encap.tpid_sa_lsb.tpid;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.l3_dlp_encap.vid2_or_flood_rcy_sm_vlans.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 68, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.l3_dlp_encap.vid2_or_flood_rcy_sm_vlans.flood_rcy_sm_vlans.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 80, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.l3_dlp_encap.vid2_or_flood_rcy_sm_vlans.flood_rcy_sm_vlans.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 68, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.ldp_over_te_tunnel_data.num_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 128, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.ldp_over_te_tunnel_data.lsp_labels.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 108, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.ldp_over_te_tunnel_data.lsp_labels.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 88, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.ldp_over_te_tunnel_data.te_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 87, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.ldp_over_te_tunnel_data.te_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(86, 81, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_encap_or_te_labels.ldp_over_te_tunnel_data.te_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(80, 68, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.disabled;
            target_payload.set_bits(67, 67, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.nh_ene_macro_code;
            target_payload.set_bits(66, 65, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.l3_dlp_info.l3_ecn_ctrl.count_cong_pkt;
            target_payload.set_bits(64, 64, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.l3_dlp_info.l3_ecn_ctrl.disable_ecn;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.l3_dlp_info.dlp_attributes.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 59, data_to_add);
            }
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.l3_dlp_info.dlp_attributes.lp_profile;
            target_payload.set_bits(58, 57, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.l3_dlp_info.dlp_attributes.port_mirror_type;
            target_payload.set_bits(56, 56, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_counter_comp;
            target_payload.set_bits(55, 54, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.demux_count;
            target_payload.set_bits(53, 53, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.is_group_qos;
            target_payload.set_bits(52, 52, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.q_counter.update_or_read;
            target_payload.set_bits(51, 51, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.q_counter.cb_id;
            target_payload.set_bits(50, 45, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.q_counter.cb_set_base;
            target_payload.set_bits(44, 32, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.p_counter.update_or_read;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.p_counter.cb_id;
            target_payload.set_bits(30, 25, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.p_counter.cb_set_base;
            target_payload.set_bits(24, 12, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.l3_dlp_qos_and_attributes.qos_attributes.qos_id;
            target_payload.set_bits(11, 8, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.tx_to_rx_rcy_data.unscheduled_recycle_code.recycle_pkt;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.tx_to_rx_rcy_data.unscheduled_recycle_code.unscheduled_recycle_code_lsb;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.l3_dlp_attributes.tx_to_rx_rcy_data.unscheduled_recycle_data;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l3_dlp_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l3_lp_profile_filter_table_key_t& key, const npl_l3_lp_profile_filter_table_key_t& mask, const npl_l3_lp_profile_filter_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.slp_profile;
        target_key.set_bits(4, 3, data_to_add);
        data_to_add = mask.slp_profile;
        target_mask.set_bits(4, 3, data_to_add);
        data_to_add = key.lp_profile;
        target_key.set_bits(2, 1, data_to_add);
        data_to_add = mask.lp_profile;
        target_mask.set_bits(2, 1, data_to_add);
        
        if (value.action == NPL_L3_LP_PROFILE_FILTER_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.split_horizon;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l3_lp_profile_filter_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l3_termination_classify_ip_tunnels_table_key_t& key, const npl_l3_termination_classify_ip_tunnels_table_key_t& mask, const npl_l3_termination_classify_ip_tunnels_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(40, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.l3_protocol_type;
        target_key.set_bits(26, 23, data_to_add);
        data_to_add = mask.l3_protocol_type;
        target_mask.set_bits(26, 23, data_to_add);
        data_to_add = key.l4_protocol_type;
        target_key.set_bits(22, 18, data_to_add);
        data_to_add = mask.l4_protocol_type;
        target_mask.set_bits(22, 18, data_to_add);
        data_to_add = key.udp_dst_port_or_gre_proto;
        target_key.set_bits(17, 2, data_to_add);
        data_to_add = mask.udp_dst_port_or_gre_proto;
        target_mask.set_bits(17, 2, data_to_add);
        
        if (value.action == NPL_L3_TERMINATION_CLASSIFY_IP_TUNNELS_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.tunnel_type.force_pipe_ttl_ingress_ptp_null.ingress_ptp_info.ptp_transport_type;
            target_payload.set_bits(11, 10, data_to_add);
            data_to_add = value.payloads.tunnel_type.force_pipe_ttl_ingress_ptp_null.ingress_ptp_info.is_ptp_trans_sup;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.tunnel_type.force_pipe_ttl_ingress_ptp_null.force_pipe_ttl;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.tunnel_type.force_pipe_ttl_ingress_ptp_info.ingress_ptp_info.ptp_transport_type;
            target_payload.set_bits(7, 6, data_to_add);
            data_to_add = value.payloads.tunnel_type.force_pipe_ttl_ingress_ptp_info.ingress_ptp_info.is_ptp_trans_sup;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.tunnel_type.force_pipe_ttl_ingress_ptp_info.force_pipe_ttl;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.tunnel_type.tunnel_type;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l3_termination_classify_ip_tunnels_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l3_termination_next_macro_static_table_key_t& key, const npl_l3_termination_next_macro_static_table_key_t& mask, const npl_l3_termination_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.hdr_type;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = mask.hdr_type;
        target_mask.set_bits(9, 6, data_to_add);
        data_to_add = key.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = key.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = mask.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_mask.set_bits(5, 4, data_to_add);
        data_to_add = mask.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_mask.set_bits(3, 2, data_to_add);
        data_to_add = key.dont_inc_pl;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = mask.dont_inc_pl;
        target_mask.set_bits(1, 1, data_to_add);
        
        if (value.action == NPL_L3_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.ip_termination_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.ip_termination_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l3_termination_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_l3_tunnel_termination_next_macro_static_table_key_t& key, const npl_l3_tunnel_termination_next_macro_static_table_key_t& mask, const npl_l3_tunnel_termination_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.next_hdr_type;
        target_key.set_bits(11, 8, data_to_add);
        data_to_add = mask.next_hdr_type;
        target_mask.set_bits(11, 8, data_to_add);
        data_to_add = key.term_attr_ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_key.set_bits(7, 6, data_to_add);
        data_to_add = key.term_attr_ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = mask.term_attr_ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_mask.set_bits(7, 6, data_to_add);
        data_to_add = mask.term_attr_ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_mask.set_bits(5, 4, data_to_add);
        data_to_add = key.pd_ipv4_init_rtf_stage;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = mask.pd_ipv4_init_rtf_stage;
        target_mask.set_bits(3, 2, data_to_add);
        data_to_add = key.lp_set;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = mask.lp_set;
        target_mask.set_bits(1, 1, data_to_add);
        
        if (value.action == NPL_L3_TUNNEL_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_IP_TERMINATION_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.ip_termination_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.ip_termination_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l3_tunnel_termination_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_l3_vxlan_overlay_sa_table_key_t& key, const npl_l3_vxlan_overlay_sa_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.sa_prefix_index;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_L3_VXLAN_OVERLAY_SA_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.overlay_sa_msb;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_l3_vxlan_overlay_sa_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_large_em_key_lsb_mapping_table_key_t& key, const npl_large_em_key_lsb_mapping_table_key_t& mask, const npl_large_em_key_lsb_mapping_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(8, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_c_dest;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.lu_c_dest;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.lu_d_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.lu_d_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_LARGE_EM_KEY_LSB_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.large_em_key_lsb.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_large_em_key_lsb_mapping_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_large_encap_global_lsp_prefix_table_key_t& key, const npl_large_encap_global_lsp_prefix_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(20, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x6ULL);
        data_to_add = key.lsp_dest_prefix;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_LARGE_ENCAP_GLOBAL_LSP_PREFIX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.labels_1_2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.labels_1_2.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.labels_0_1.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.labels_0_1.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.more_labels.more_labels_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 28, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.enable_sr_dm_accounting;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.multi_counter_enable;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.service_flags.push_entropy_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.service_flags.add_ipv6_explicit_null;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 24, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.total_num_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.counter_flag.num_labels_is_3;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.counter_flag.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 0, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_large_encap_global_lsp_prefix_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_large_encap_ip_tunnel_table_key_t& key, const npl_large_encap_ip_tunnel_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(20, 120);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xeULL);
        data_to_add = key.gre_tunnel_dlp;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_LARGE_ENCAP_IP_TUNNEL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.gre_tunnel_attributes.demux_count;
            target_payload.set_bits(119, 119, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.dip_entropy;
            target_payload.set_bits(118, 117, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_qos_encap.tos;
            target_payload.set_bits(116, 109, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_qos_encap.exp_no_bos.exp;
            target_payload.set_bits(108, 106, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_qos_encap.pcp_dei;
            target_payload.set_bits(104, 101, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_control.decrement_inner_ttl;
            target_payload.set_bits(100, 100, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_control.ttl_mode;
            target_payload.set_bits(99, 99, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_control.is_tos_from_tunnel;
            target_payload.set_bits(98, 98, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_control.lp_set;
            target_payload.set_bits(97, 97, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.qos_info.is_group_qos;
            target_payload.set_bits(96, 96, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.qos_info.qos_id;
            target_payload.set_bits(95, 92, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.p_counter.update_or_read;
            target_payload.set_bits(91, 91, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.p_counter.cb_id;
            target_payload.set_bits(90, 85, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.p_counter.cb_set_base;
            target_payload.set_bits(84, 72, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_type_q_counter.tunnel_type;
            target_payload.set_bits(71, 71, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.tunnel_type_q_counter.q_counter;
            target_payload.set_bits(70, 52, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.sip_index;
            target_payload.set_bits(51, 48, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.dip;
            target_payload.set_bits(47, 16, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.gre_flags;
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = value.payloads.gre_tunnel_attributes.ttl;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_large_encap_ip_tunnel_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_large_encap_mpls_he_no_ldp_table_key_t& key, const npl_large_encap_mpls_he_no_ldp_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x1ULL);
        data_to_add = key.lsp_dest_prefix;
        target_key.set_bits(31, 16, data_to_add);
        data_to_add = key.nh_ptr;
        target_key.set_bits(15, 4, data_to_add);
        
        if (value.action == NPL_LARGE_ENCAP_MPLS_HE_NO_LDP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.labels_1_2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.labels_1_2.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.labels_0_1.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.labels_0_1.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.more_labels.more_labels_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 28, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.enable_sr_dm_accounting;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.multi_counter_enable;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.service_flags.push_entropy_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.service_flags.add_ipv6_explicit_null;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 24, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.total_num_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.counter_flag.num_labels_is_3;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.counter_flag.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 0, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_large_encap_mpls_he_no_ldp_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_large_encap_mpls_ldp_over_te_table_key_t& key, const npl_large_encap_mpls_ldp_over_te_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(36, 45);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x3ULL);
        data_to_add = key.lsp_dest_prefix;
        target_key.set_bits(35, 20, data_to_add);
        data_to_add = key.te_tunnel;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_LARGE_ENCAP_MPLS_LDP_OVER_TE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.num_labels;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.label_encap.label_exp_bos.exp;
            target_payload.set_bits(43, 41, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.label_encap.label_exp_bos.bos;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.label_encap.label;
            target_payload.set_bits(39, 20, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.counter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.counter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.counter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_large_encap_mpls_ldp_over_te_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_large_encap_te_he_tunnel_id_table_key_t& key, const npl_large_encap_te_he_tunnel_id_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x2ULL);
        data_to_add = key.te_tunnel;
        target_key.set_bits(31, 16, data_to_add);
        data_to_add = key.nh_ptr;
        target_key.set_bits(15, 4, data_to_add);
        
        if (value.action == NPL_LARGE_ENCAP_TE_HE_TUNNEL_ID_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt3.label_2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.labels_1_2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt2.labels_1_2.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.labels_0_1.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.labels_0_1.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.more_labels.more_labels_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 28, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.enable_sr_dm_accounting;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.multi_counter_enable;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.service_flags.push_entropy_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.service_flags.add_ipv6_explicit_null;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 24, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.label_stack.opt1.label_2_or_more.more.total_num_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.counter_flag.num_labels_is_3;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.counter_flag.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 0, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload.counter_and_flag.lsp_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_large_encap_te_he_tunnel_id_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_latest_learn_records_table_key_t& key, const npl_latest_learn_records_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 88);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.learn_record_filter_vars_read_ptr.address;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_LATEST_LEARN_RECORDS_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.learn_record_filter_vars_filter_result.result;
            target_payload.set_bits(87, 86, data_to_add);
            data_to_add = value.payloads.learn_record_filter_vars_filter_result.learn_info.slp;
            target_payload.set_bits(85, 66, data_to_add);
            data_to_add = value.payloads.learn_record_filter_vars_filter_result.learn_info.relay_id.id;
            target_payload.set_bits(65, 52, data_to_add);
            data_to_add = value.payloads.learn_record_filter_vars_filter_result.ethernet_address;
            target_payload.set_bits(51, 4, data_to_add);
            data_to_add = value.payloads.learn_record_filter_vars_filter_result.mact_ldb;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_latest_learn_records_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_learn_manager_cfg_max_learn_type_reg_key_t& key, const npl_learn_manager_cfg_max_learn_type_reg_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 2);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_LEARN_MANAGER_CFG_MAX_LEARN_TYPE_REG_ACTION_WRITE) {
            data_to_add = value.payloads.learn_manager_cfg_max_learn_type.lr_type;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_learn_manager_cfg_max_learn_type_reg_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_learn_record_fifo_table_key_t& key, const npl_learn_record_fifo_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 88);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.learn_record_fifo_address.address;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_LEARN_RECORD_FIFO_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.learn_record_result.result;
            target_payload.set_bits(87, 86, data_to_add);
            data_to_add = value.payloads.learn_record_result.learn_info.slp;
            target_payload.set_bits(85, 66, data_to_add);
            data_to_add = value.payloads.learn_record_result.learn_info.relay_id.id;
            target_payload.set_bits(65, 52, data_to_add);
            data_to_add = value.payloads.learn_record_result.ethernet_address;
            target_payload.set_bits(51, 4, data_to_add);
            data_to_add = value.payloads.learn_record_result.mact_ldb;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_learn_record_fifo_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_light_fi_fabric_table_key_t& key, const npl_light_fi_fabric_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 38);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fabric_header_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_FABRIC_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
            data_to_add = value.payloads.light_fi_leaba_table_hit.use_additional_size;
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.base_size;
            target_payload.set_bits(36, 30, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.is_next_protocol_layer;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.is_protocol_layer;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_fi_macro_id;
            target_payload.set_bits(27, 25, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.npe_macro_id;
            target_payload.set_bits(24, 17, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.npe_macro_id_valid;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.type;
            target_payload.set_bits(12, 8, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_fabric_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_light_fi_npu_base_table_key_t& key, const npl_light_fi_npu_base_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 38);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.npu_header_type;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_NPU_BASE_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
            data_to_add = value.payloads.light_fi_leaba_table_hit.use_additional_size;
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.base_size;
            target_payload.set_bits(36, 30, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.is_next_protocol_layer;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.is_protocol_layer;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_fi_macro_id;
            target_payload.set_bits(27, 25, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.npe_macro_id;
            target_payload.set_bits(24, 17, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.npe_macro_id_valid;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.type;
            target_payload.set_bits(12, 8, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_npu_base_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_light_fi_npu_encap_table_key_t& key, const npl_light_fi_npu_encap_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 37);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.next_header_type;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_NPU_ENCAP_TABLE_ACTION_LIGHT_FI_NPU_ENCAP_TABLE_HIT) {
            data_to_add = value.payloads.light_fi_npu_encap_table_hit.spare;
            target_payload.set_bits(36, 16, data_to_add);
            data_to_add = value.payloads.light_fi_npu_encap_table_hit.next_stage_size_width;
            target_payload.set_bits(15, 12, data_to_add);
            data_to_add = value.payloads.light_fi_npu_encap_table_hit.next_stage_size_offset;
            target_payload.set_bits(11, 6, data_to_add);
            data_to_add = value.payloads.light_fi_npu_encap_table_hit.next_stage_protocol_or_type_offset;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_npu_encap_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_light_fi_nw_0_table_key_t& key, const npl_light_fi_nw_0_table_key_t& mask, const npl_light_fi_nw_0_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(21, 45);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.current_header_type;
        target_key.set_bits(20, 16, data_to_add);
        data_to_add = mask.current_header_type;
        target_mask.set_bits(20, 16, data_to_add);
        data_to_add = key.next_protocol_field;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.next_protocol_field;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_NW_0_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_size_width;
            target_payload.set_bits(44, 41, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_size_offset;
            target_payload.set_bits(40, 35, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_protocol_or_type_offset;
            target_payload.set_bits(34, 29, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.use_additional_size;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.base_size;
            target_payload.set_bits(27, 21, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.is_next_protocol_layer;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.is_protocol_layer;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_fi_macro_id;
            target_payload.set_bits(18, 16, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.type;
            target_payload.set_bits(12, 8, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_nw_0_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_light_fi_nw_1_table_key_t& key, const npl_light_fi_nw_1_table_key_t& mask, const npl_light_fi_nw_1_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(21, 45);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.current_header_type;
        target_key.set_bits(20, 16, data_to_add);
        data_to_add = mask.current_header_type;
        target_mask.set_bits(20, 16, data_to_add);
        data_to_add = key.next_protocol_field;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.next_protocol_field;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_NW_1_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_size_width;
            target_payload.set_bits(44, 41, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_size_offset;
            target_payload.set_bits(40, 35, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_protocol_or_type_offset;
            target_payload.set_bits(34, 29, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.use_additional_size;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.base_size;
            target_payload.set_bits(27, 21, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.is_next_protocol_layer;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.is_protocol_layer;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_fi_macro_id;
            target_payload.set_bits(18, 16, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.type;
            target_payload.set_bits(12, 8, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_nw_1_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_light_fi_nw_2_table_key_t& key, const npl_light_fi_nw_2_table_key_t& mask, const npl_light_fi_nw_2_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(21, 45);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.current_header_type;
        target_key.set_bits(20, 16, data_to_add);
        data_to_add = mask.current_header_type;
        target_mask.set_bits(20, 16, data_to_add);
        data_to_add = key.next_protocol_field;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.next_protocol_field;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_NW_2_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_size_width;
            target_payload.set_bits(44, 41, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_size_offset;
            target_payload.set_bits(40, 35, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_protocol_or_type_offset;
            target_payload.set_bits(34, 29, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.use_additional_size;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.base_size;
            target_payload.set_bits(27, 21, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.is_next_protocol_layer;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.is_protocol_layer;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_fi_macro_id;
            target_payload.set_bits(18, 16, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.type;
            target_payload.set_bits(12, 8, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_nw_2_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_light_fi_nw_3_table_key_t& key, const npl_light_fi_nw_3_table_key_t& mask, const npl_light_fi_nw_3_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(21, 45);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.current_header_type;
        target_key.set_bits(20, 16, data_to_add);
        data_to_add = mask.current_header_type;
        target_mask.set_bits(20, 16, data_to_add);
        data_to_add = key.next_protocol_field;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.next_protocol_field;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_NW_3_TABLE_ACTION_LIGHT_FI_NW_TABLE_HIT) {
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_size_width;
            target_payload.set_bits(44, 41, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_size_offset;
            target_payload.set_bits(40, 35, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_stage_protocol_or_type_offset;
            target_payload.set_bits(34, 29, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.use_additional_size;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.base_size;
            target_payload.set_bits(27, 21, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.is_next_protocol_layer;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.is_protocol_layer;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_fi_macro_id;
            target_payload.set_bits(18, 16, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.next_header_format.type;
            target_payload.set_bits(12, 8, data_to_add);
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_nw_table_hit.header_format.type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_nw_3_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_light_fi_stages_cfg_table_key_t& key, const npl_light_fi_stages_cfg_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 21);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.macro_id;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_STAGES_CFG_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.light_fi_stage_cfg.update_protocol_is_layer;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.light_fi_stage_cfg.update_current_header_info;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.light_fi_stage_cfg.size_width;
            target_payload.set_bits(18, 15, data_to_add);
            data_to_add = value.payloads.light_fi_stage_cfg.size_offset;
            target_payload.set_bits(14, 9, data_to_add);
            data_to_add = value.payloads.light_fi_stage_cfg.next_protocol_or_type_width;
            target_payload.set_bits(8, 6, data_to_add);
            data_to_add = value.payloads.light_fi_stage_cfg.next_protocol_or_type_offset;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_stages_cfg_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_light_fi_tm_table_key_t& key, const npl_light_fi_tm_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 38);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tm_header_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_LIGHT_FI_TM_TABLE_ACTION_LIGHT_FI_LEABA_TABLE_HIT) {
            data_to_add = value.payloads.light_fi_leaba_table_hit.use_additional_size;
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.base_size;
            target_payload.set_bits(36, 30, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.is_next_protocol_layer;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.is_protocol_layer;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_fi_macro_id;
            target_payload.set_bits(27, 25, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.npe_macro_id;
            target_payload.set_bits(24, 17, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.npe_macro_id_valid;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 14, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.next_header_format.type;
            target_payload.set_bits(12, 8, data_to_add);
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.all_header_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.fragmented;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv4_header_flags.checksum_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.header_error;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.not_first_fragment;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ipv6_header_flags.next_header_check;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.vlan_header_flags.is_priority;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.da_is_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.sa_is_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.ethernet_header_flags.sa_eq_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.illegal_ipv4;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.is_null_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.flags.mpls_header_flags.is_bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.light_fi_leaba_table_hit.header_format.type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_light_fi_tm_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_link_relay_attributes_table_key_t& key, const npl_link_relay_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 66);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.service_relay_attributes_table_key_11_0_;
        target_key.set_bits(11, 0, data_to_add);
        
        if (value.action == NPL_LINK_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY) {
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 43, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.load_balance_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 41, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 38, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 34, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.sgacl_enforcement;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 33, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.l2_lpts_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 27, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.flush_all_macs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.flood_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(4, 4, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 3, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.mld_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.igmp_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 1, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.is_svi;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_link_relay_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_link_relay_id_static_table_key_t& key, const npl_link_relay_id_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 14);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.service_relay_attributes_table_key_11_0_;
        target_key.set_bits(11, 0, data_to_add);
        
        if (value.action == NPL_LINK_RELAY_ID_STATIC_TABLE_ACTION_RELAY) {
            data_to_add = value.payloads.relay.relay_id_or_l3_lp_add_attr;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_link_relay_id_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_link_up_vector_key_t& key, const npl_link_up_vector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 108);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_LINK_UP_VECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.link_up_vector_result.link_up[107];
            target_payload.set_bits(107, 107, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[106];
            target_payload.set_bits(106, 106, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[105];
            target_payload.set_bits(105, 105, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[104];
            target_payload.set_bits(104, 104, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[103];
            target_payload.set_bits(103, 103, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[102];
            target_payload.set_bits(102, 102, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[101];
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[100];
            target_payload.set_bits(100, 100, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[99];
            target_payload.set_bits(99, 99, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[98];
            target_payload.set_bits(98, 98, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[97];
            target_payload.set_bits(97, 97, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[96];
            target_payload.set_bits(96, 96, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[95];
            target_payload.set_bits(95, 95, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[94];
            target_payload.set_bits(94, 94, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[93];
            target_payload.set_bits(93, 93, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[92];
            target_payload.set_bits(92, 92, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[91];
            target_payload.set_bits(91, 91, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[90];
            target_payload.set_bits(90, 90, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[89];
            target_payload.set_bits(89, 89, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[88];
            target_payload.set_bits(88, 88, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[87];
            target_payload.set_bits(87, 87, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[86];
            target_payload.set_bits(86, 86, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[85];
            target_payload.set_bits(85, 85, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[84];
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[83];
            target_payload.set_bits(83, 83, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[82];
            target_payload.set_bits(82, 82, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[81];
            target_payload.set_bits(81, 81, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[80];
            target_payload.set_bits(80, 80, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[79];
            target_payload.set_bits(79, 79, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[78];
            target_payload.set_bits(78, 78, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[77];
            target_payload.set_bits(77, 77, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[76];
            target_payload.set_bits(76, 76, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[75];
            target_payload.set_bits(75, 75, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[74];
            target_payload.set_bits(74, 74, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[73];
            target_payload.set_bits(73, 73, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[72];
            target_payload.set_bits(72, 72, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[71];
            target_payload.set_bits(71, 71, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[70];
            target_payload.set_bits(70, 70, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[69];
            target_payload.set_bits(69, 69, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[68];
            target_payload.set_bits(68, 68, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[67];
            target_payload.set_bits(67, 67, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[66];
            target_payload.set_bits(66, 66, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[65];
            target_payload.set_bits(65, 65, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[64];
            target_payload.set_bits(64, 64, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[63];
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[62];
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[61];
            target_payload.set_bits(61, 61, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[60];
            target_payload.set_bits(60, 60, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[59];
            target_payload.set_bits(59, 59, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[58];
            target_payload.set_bits(58, 58, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[57];
            target_payload.set_bits(57, 57, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[56];
            target_payload.set_bits(56, 56, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[55];
            target_payload.set_bits(55, 55, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[54];
            target_payload.set_bits(54, 54, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[53];
            target_payload.set_bits(53, 53, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[52];
            target_payload.set_bits(52, 52, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[51];
            target_payload.set_bits(51, 51, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[50];
            target_payload.set_bits(50, 50, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[49];
            target_payload.set_bits(49, 49, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[48];
            target_payload.set_bits(48, 48, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[47];
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[46];
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[45];
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[44];
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[43];
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[42];
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[41];
            target_payload.set_bits(41, 41, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[40];
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[39];
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[38];
            target_payload.set_bits(38, 38, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[37];
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[36];
            target_payload.set_bits(36, 36, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[35];
            target_payload.set_bits(35, 35, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[34];
            target_payload.set_bits(34, 34, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[33];
            target_payload.set_bits(33, 33, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[32];
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[31];
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[30];
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[29];
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[28];
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[27];
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[26];
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[25];
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[24];
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[23];
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[22];
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[21];
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[20];
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[19];
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[18];
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[17];
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[16];
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[15];
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[14];
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[13];
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[12];
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[11];
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[10];
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[9];
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[8];
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[7];
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[6];
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[5];
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[4];
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[3];
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[2];
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[1];
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.link_up_vector_result.link_up[0];
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_link_up_vector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_local_mc_fwd_next_macro_static_table_key_t& key, const npl_local_mc_fwd_next_macro_static_table_key_t& mask, const npl_local_mc_fwd_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.post_fwd_stage;
        target_key.set_bits(16, 14, data_to_add);
        data_to_add = mask.post_fwd_stage;
        target_mask.set_bits(16, 14, data_to_add);
        data_to_add = key.current_proto_type;
        target_key.set_bits(13, 10, data_to_add);
        data_to_add = mask.current_proto_type;
        target_mask.set_bits(13, 10, data_to_add);
        data_to_add = key.next_proto_type;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = mask.next_proto_type;
        target_mask.set_bits(9, 6, data_to_add);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(5, 2, data_to_add);
        
        if (value.action == NPL_LOCAL_MC_FWD_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
            data_to_add = value.payloads.set_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.set_macro.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_local_mc_fwd_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_lp_over_lag_table_key_t& key, const npl_lp_over_lag_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(41, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x36ULL);
        data_to_add = key.destination;
        target_key.set_bits(40, 21, data_to_add);
        data_to_add = key.l3_dlp_msbs;
        target_key.set_bits(20, 19, data_to_add);
        data_to_add = key.l3_dlp_lsbs;
        target_key.set_bits(18, 7, data_to_add);
        
        if (value.action == NPL_LP_OVER_LAG_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.bvn_destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_lp_over_lag_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_lpts_2nd_lookup_table_key_t& key, const npl_lpts_2nd_lookup_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lpts_second_lookup_key;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_LPTS_2ND_LOOKUP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lpts_payload.phb.tc;
            target_payload.set_bits(24, 22, data_to_add);
            data_to_add = value.payloads.lpts_payload.phb.dp;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.lpts_payload.destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_lpts_2nd_lookup_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_lpts_meter_table_key_t& key, const npl_lpts_meter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.meter_index_msb;
        target_key.set_bits(7, 7, data_to_add);
        data_to_add = key.meter_index_lsb;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_LPTS_METER_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.counter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.counter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.counter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_lpts_meter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_lpts_og_application_table_key_t& key, const npl_lpts_og_application_table_key_t& mask, const npl_lpts_og_application_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(140, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.ip_version;
        target_key.set_bits(65, 65, data_to_add);
        data_to_add = mask.ip_version;
        target_mask.set_bits(65, 65, data_to_add);
        data_to_add = key.ipv4_l4_protocol;
        target_key.set_bits(64, 57, data_to_add);
        data_to_add = mask.ipv4_l4_protocol;
        target_mask.set_bits(64, 57, data_to_add);
        data_to_add = key.ipv6_l4_protocol;
        target_key.set_bits(56, 49, data_to_add);
        data_to_add = mask.ipv6_l4_protocol;
        target_mask.set_bits(56, 49, data_to_add);
        data_to_add = key.l4_ports.src_port;
        target_key.set_bits(48, 33, data_to_add);
        data_to_add = key.l4_ports.dst_port;
        target_key.set_bits(32, 17, data_to_add);
        data_to_add = mask.l4_ports.src_port;
        target_mask.set_bits(48, 33, data_to_add);
        data_to_add = mask.l4_ports.dst_port;
        target_mask.set_bits(32, 17, data_to_add);
        data_to_add = key.fragmented;
        target_key.set_bits(16, 16, data_to_add);
        data_to_add = mask.fragmented;
        target_mask.set_bits(16, 16, data_to_add);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(15, 4, data_to_add);
        data_to_add = mask.l3_relay_id.id;
        target_mask.set_bits(15, 4, data_to_add);
        
        if (value.action == NPL_LPTS_OG_APPLICATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.og_app_config.app_data.lpts_og_app_id;
            target_payload.set_bits(12, 9, data_to_add);
            data_to_add = value.payloads.og_app_config.src.compress;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.og_app_config.src.pcl_id.val;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_lpts_og_application_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(140, 16);
        result.mask.set_bits(1, 0, 0x3ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_lr_filter_write_ptr_reg_key_t& key, const npl_lr_filter_write_ptr_reg_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 5);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_LR_FILTER_WRITE_PTR_REG_ACTION_WRITE) {
            data_to_add = value.payloads.learn_record_filter_vars_write_ptr.address;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_lr_filter_write_ptr_reg_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_lr_write_ptr_reg_key_t& key, const npl_lr_write_ptr_reg_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_LR_WRITE_PTR_REG_ACTION_WRITE) {
            data_to_add = value.payloads.learn_record_fifo_vars_write_ptr.address;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_lr_write_ptr_reg_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_af_npp_attributes_table_key_t& key, const npl_mac_af_npp_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 52);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.npp_attributes_index;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_MAC_AF_NPP_ATTRIBUTES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mac_af_npp_attributes.enable_sr_dm_accounting;
            target_payload.set_bits(48, 48, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.npp_attributes;
            target_payload.set_bits(47, 40, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.mapping_type;
            target_payload.set_bits(39, 36, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.port_vlan_tag.pcp_dei.pcp;
            target_payload.set_bits(35, 33, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.port_vlan_tag.pcp_dei.dei;
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.port_vlan_tag.vid.id;
            target_payload.set_bits(31, 20, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.mac_relay_id;
            target_payload.set_bits(19, 8, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.enable_vlan_membership;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.enable_vrf_for_l2;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.vlan_membership_index;
            target_payload.set_bits(5, 1, data_to_add);
            data_to_add = value.payloads.mac_af_npp_attributes.enable_transparent_ptp;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_af_npp_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_mac_da_table_key_t& key, const npl_mac_da_table_key_t& mask, const npl_mac_da_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(140, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.packet_ethernet_header_da.mac_address;
        target_key.set_bits(56, 9, data_to_add);
        data_to_add = mask.packet_ethernet_header_da.mac_address;
        target_mask.set_bits(56, 9, data_to_add);
        data_to_add = key.next_protocol_type;
        target_key.set_bits(8, 4, data_to_add);
        data_to_add = mask.next_protocol_type;
        target_mask.set_bits(8, 4, data_to_add);
        
        if (value.action == NPL_MAC_DA_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mac_da.is_vrrp;
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.mac_da.mac_l2_lpts_lkup;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.mac_da.use_l2_lpts;
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.mac_da.prefix;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.mac_da.compound_termination_control.append_relay;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.mac_da.compound_termination_control.attempt_termination;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.mac_da.is_mc;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.mac_da.is_ipv4_mc;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.mac_da.is_ipv6_mc;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.mac_da.type;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_da_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(140, 20);
        result.key.set_bits(1, 0, 0x1ULL);
        result.mask.set_bits(1, 0, 0x3ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_mac_ethernet_rate_limit_type_static_table_key_t& key, const npl_mac_ethernet_rate_limit_type_static_table_key_t& mask, const npl_mac_ethernet_rate_limit_type_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.is_bc;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = mask.is_bc;
        target_mask.set_bits(4, 4, data_to_add);
        data_to_add = key.is_mc;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = mask.is_mc;
        target_mask.set_bits(3, 3, data_to_add);
        data_to_add = key.mac_forwarding_hit;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.mac_forwarding_hit;
        target_mask.set_bits(2, 2, data_to_add);
        
        if (value.action == NPL_MAC_ETHERNET_RATE_LIMIT_TYPE_STATIC_TABLE_ACTION_UPDATE_ETHERNET_RATE_LIMIT_TYPE) {
            data_to_add = value.payloads.update_ethernet_rate_limit_type.ethernet_rate_limiter_type;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_ethernet_rate_limit_type_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_forwarding_table_key_t& key, const npl_mac_forwarding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(66, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x1ULL);
        data_to_add = key.mac_forwarding_key.relay_id.id;
        target_key.set_bits(65, 52, data_to_add);
        data_to_add = key.mac_forwarding_key.mac_address.mac_address;
        target_key.set_bits(51, 4, data_to_add);
        
        if (value.action == NPL_MAC_FORWARDING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mact_result.application_specific_fields;
            target_payload.set_bits(31, 20, data_to_add);
            data_to_add = value.payloads.mact_result.destination.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_forwarding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_forwarding_w_metadata_table_key_t& key, const npl_mac_forwarding_w_metadata_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(69, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x5ULL);
        data_to_add = key.mac_forwarding_key.relay_id.id;
        target_key.set_bits(68, 55, data_to_add);
        data_to_add = key.mac_forwarding_key.mac_address.mac_address;
        target_key.set_bits(54, 7, data_to_add);
        
        if (value.action == NPL_MAC_FORWARDING_W_METADATA_TABLE_ACTION_FOUND) {
            data_to_add = value.payloads.found.dest_metadata.class_id.id;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.found.dest.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_forwarding_w_metadata_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_mc_em_termination_attributes_table_key_t& key, const npl_mac_mc_em_termination_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 120);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        data_to_add = key.l2_relay_attributes_id;
        target_key.set_bits(15, 2, data_to_add);
        
        if (value.action == NPL_MAC_MC_EM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.termination_attributes.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 105, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(101, 101, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 96, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 84, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 83, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 77, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(76, 64, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 60, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 33, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 20, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_mc_em_termination_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_mac_mc_tcam_termination_attributes_table_key_t& key, const npl_mac_mc_tcam_termination_attributes_table_key_t& mask, const npl_mac_mc_tcam_termination_attributes_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 120);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.l2_relay_attributes_id;
        target_key.set_bits(15, 2, data_to_add);
        data_to_add = mask.l2_relay_attributes_id;
        target_mask.set_bits(15, 2, data_to_add);
        
        if (value.action == NPL_MAC_MC_TCAM_TERMINATION_ATTRIBUTES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.termination_attributes.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 105, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(101, 101, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 96, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 84, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 83, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 77, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(76, 64, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 60, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 33, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 20, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_mc_tcam_termination_attributes_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_qos_mapping_table_key_t& key, const npl_mac_qos_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.qos_key;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = key.qos_id;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_MAC_QOS_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.override_phb;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.override_qos;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.meter;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.phb.tc;
            target_payload.set_bits(28, 26, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.phb.dp;
            target_payload.set_bits(25, 24, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.ctr_offest_union.q_m_offset_5bits.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 19, data_to_add);
            }
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.ctr_offest_union.q_m_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 19, data_to_add);
            }
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.ingress_qos_remark.qos_group;
            target_payload.set_bits(18, 12, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.ingress_qos_remark.encap_mpls_exp.valid;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.ingress_qos_remark.encap_mpls_exp.exp;
            target_payload.set_bits(10, 8, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.ingress_qos_remark.enable_ingress_remark;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.ingress_mac_qos_mapping_result.ingress_qos_remark.fwd_qos_tag;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_qos_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_relay_g_ipv4_table_key_t& key, const npl_mac_relay_g_ipv4_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(49, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x76ULL);
        data_to_add = key.relay_id.id;
        target_key.set_bits(48, 35, data_to_add);
        data_to_add = key.dip_27_0;
        target_key.set_bits(34, 7, data_to_add);
        
        if (value.action == NPL_MAC_RELAY_G_IPV4_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mac_relay_g_destination.destination.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_relay_g_ipv4_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_relay_g_ipv6_table_key_t& key, const npl_mac_relay_g_ipv6_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(141, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x2dULL);
        data_to_add = key.relay_id.id;
        target_key.set_bits(140, 127, data_to_add);
        data_to_add = key.dip_119_0[1];
        target_key.set_bits(126, 71, data_to_add);
        data_to_add = key.dip_119_0[0];
        target_key.set_bits(70, 7, data_to_add);
        
        if (value.action == NPL_MAC_RELAY_G_IPV6_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mac_relay_g_destination.destination.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_relay_g_ipv6_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_relay_to_vni_table_key_t& key, const npl_mac_relay_to_vni_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(18, 44);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xaULL);
        data_to_add = key.l2_relay_id.id;
        target_key.set_bits(17, 4, data_to_add);
        
        if (value.action == NPL_MAC_RELAY_TO_VNI_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vxlan_relay_encap_data.vni;
            target_payload.set_bits(43, 20, data_to_add);
            data_to_add = value.payloads.vxlan_relay_encap_data.vni_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.vxlan_relay_encap_data.vni_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.vxlan_relay_encap_data.vni_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_relay_to_vni_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_termination_em_table_key_t& key, const npl_mac_termination_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(40, 120);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.relay_id.id;
        target_key.set_bits(39, 26, data_to_add);
        data_to_add = key.ethernet_header_da_18_0_;
        target_key.set_bits(25, 7, data_to_add);
        data_to_add = key.da_prefix;
        target_key.set_bits(6, 2, data_to_add);
        
        if (value.action == NPL_MAC_TERMINATION_EM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.termination_attributes.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 105, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(101, 101, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 96, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 84, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 83, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 77, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(76, 64, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 60, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 33, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 20, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_termination_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_mac_termination_next_macro_static_table_key_t& key, const npl_mac_termination_next_macro_static_table_key_t& mask, const npl_mac_termination_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mac_relay_local_vars_mac_next_macro_packed_data;
        target_key.set_bits(14, 4, data_to_add);
        data_to_add = mask.mac_relay_local_vars_mac_next_macro_packed_data;
        target_mask.set_bits(14, 4, data_to_add);
        data_to_add = key.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = key.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_key.set_bits(1, 0, data_to_add);
        data_to_add = mask.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_mask.set_bits(3, 2, data_to_add);
        data_to_add = mask.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_mask.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_MAC_TERMINATION_NEXT_MACRO_STATIC_TABLE_ACTION_MAC_TERMINATION_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.mac_termination_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.mac_termination_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_termination_next_macro_static_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(16, 32);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mac_termination_no_da_em_table_key_t& key, const npl_mac_termination_no_da_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 120);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        data_to_add = key.service_relay_attributes_table_key.id;
        target_key.set_bits(15, 2, data_to_add);
        
        if (value.action == NPL_MAC_TERMINATION_NO_DA_EM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.termination_attributes.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 105, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(101, 101, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 96, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 84, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 83, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 77, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(76, 64, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 60, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 33, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 20, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_termination_no_da_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_mac_termination_tcam_table_key_t& key, const npl_mac_termination_tcam_table_key_t& mask, const npl_mac_termination_tcam_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(40, 120);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.service_relay_attributes_table_key.id;
        target_key.set_bits(39, 26, data_to_add);
        data_to_add = mask.service_relay_attributes_table_key.id;
        target_mask.set_bits(39, 26, data_to_add);
        data_to_add = key.ethernet_header_da_18_0_;
        target_key.set_bits(25, 7, data_to_add);
        data_to_add = mask.ethernet_header_da_18_0_;
        target_mask.set_bits(25, 7, data_to_add);
        data_to_add = key.da_prefix;
        target_key.set_bits(6, 2, data_to_add);
        data_to_add = mask.da_prefix;
        target_mask.set_bits(6, 2, data_to_add);
        
        if (value.action == NPL_MAC_TERMINATION_TCAM_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.termination_attributes.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 105, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 0, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 111, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(110, 108, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 104, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(101, 101, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 96, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 84, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 83, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 77, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(76, 64, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 60, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 33, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 20, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.termination_attributes.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mac_termination_tcam_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_map_ene_subcode_to8bit_static_table_key_t& key, const npl_map_ene_subcode_to8bit_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tx_npu_header_ingress_punt_encap_data_mirror_local_encap_format;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = key.tx_npu_header_encap_punt_mc_expand_encap_lpts_flow_type.lpts_flow;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_MAP_ENE_SUBCODE_TO8BIT_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.tx_punt_local_var_local_ene_punt_sub_code;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_map_ene_subcode_to8bit_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_map_inject_ccm_macro_static_table_key_t& key, const npl_map_inject_ccm_macro_static_table_key_t& mask, const npl_map_inject_ccm_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.outer_tpid_ptr;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = mask.outer_tpid_ptr;
        target_mask.set_bits(9, 6, data_to_add);
        data_to_add = key.inner_tpid_ptr;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = mask.inner_tpid_ptr;
        target_mask.set_bits(5, 2, data_to_add);
        
        if (value.action == NPL_MAP_INJECT_CCM_MACRO_STATIC_TABLE_ACTION_MAP_INJECT_CCM_MACRO) {
            data_to_add = translate_ene_macro_id(context, value.payloads.map_inject_ccm_macro.next_macro);
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = translate_ene_macro_id(context, value.payloads.map_inject_ccm_macro.second_ene_macro.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_map_inject_ccm_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_map_more_labels_static_table_key_t& key, const npl_map_more_labels_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.num_labels_is_8;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = key.num_labels;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_MAP_MORE_LABELS_STATIC_TABLE_ACTION_SET_VALUE) {
            data_to_add = translate_enum_option_id(context, value.payloads.set_value.more_labels_offset.ene_three_labels_jump_offset);
            target_payload.set_bits(23, 20, data_to_add);
            data_to_add = translate_enum_option_id(context, value.payloads.set_value.more_labels_offset.ene_four_labels_jump_offset);
            target_payload.set_bits(19, 16, data_to_add);
            data_to_add = translate_enum_option_id(context, value.payloads.set_value.more_labels_offset.ene_five_labels_jump_offset);
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = translate_enum_option_id(context, value.payloads.set_value.more_labels_offset.ene_six_labels_jump_offset);
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = translate_enum_option_id(context, value.payloads.set_value.more_labels_offset.ene_seven_labels_jump_offset);
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_map_more_labels_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t& key, const npl_map_recyle_tx_to_rx_data_on_pd_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dsp_map_dma_info.dsp_punt_rcy;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.dsp_map_dma_info.dsp_is_scheduled_rcy;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_MAP_RECYLE_TX_TO_RX_DATA_ON_PD_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pd_recycle_data.snoop_or_rcy_data.snoop_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 0, data_to_add);
            }
            data_to_add = value.payloads.pd_recycle_data.snoop_or_rcy_data.tx_to_rx_rcy_data.unscheduled_recycle_code.recycle_pkt;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.pd_recycle_data.snoop_or_rcy_data.tx_to_rx_rcy_data.unscheduled_recycle_code.unscheduled_recycle_code_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 6, data_to_add);
            }
            data_to_add = value.payloads.pd_recycle_data.snoop_or_rcy_data.tx_to_rx_rcy_data.unscheduled_recycle_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_map_recyle_tx_to_rx_data_on_pd_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t& key, const npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tm_h_ecn;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.tm_h_dp_0;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_MAP_TM_DP_ECN_TO_WA_ECN_DP_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dp_ecn_wa_local_var_new_dp;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_map_tx_punt_next_macro_static_table_key_t& key, const npl_map_tx_punt_next_macro_static_table_key_t& mask, const npl_map_tx_punt_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.cud_type;
        target_key.set_bits(11, 8, data_to_add);
        data_to_add = mask.cud_type;
        target_mask.set_bits(11, 8, data_to_add);
        data_to_add = key.punt_encap_type;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.punt_encap_type;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.punt_format;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = mask.punt_format;
        target_mask.set_bits(3, 2, data_to_add);
        
        if (value.action == NPL_MAP_TX_PUNT_NEXT_MACRO_STATIC_TABLE_ACTION_TX_PUNT_NEXT_MACRO) {
            data_to_add = value.payloads.tx_punt_next_macro.ene_bytes_added;
            target_payload.set_bits(16, 10, data_to_add);
            data_to_add = value.payloads.tx_punt_next_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = translate_ene_macro_id(context, value.payloads.tx_punt_next_macro.macro_id.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_map_tx_punt_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_map_tx_punt_rcy_next_macro_static_table_key_t& key, const npl_map_tx_punt_rcy_next_macro_static_table_key_t& mask, const npl_map_tx_punt_rcy_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.inject_only;
        target_key.set_bits(11, 11, data_to_add);
        data_to_add = mask.inject_only;
        target_mask.set_bits(11, 11, data_to_add);
        data_to_add = key.eth_stage;
        target_key.set_bits(10, 10, data_to_add);
        data_to_add = mask.eth_stage;
        target_mask.set_bits(10, 10, data_to_add);
        data_to_add = key.redirect_code;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = mask.redirect_code;
        target_mask.set_bits(9, 2, data_to_add);
        
        if (value.action == NPL_MAP_TX_PUNT_RCY_NEXT_MACRO_STATIC_TABLE_ACTION_SET_NPE_NEXT_MACRO) {
            data_to_add = value.payloads.set_npe_next_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = translate_ene_macro_id(context, value.payloads.set_npe_next_macro.macro_id.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_map_tx_punt_rcy_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_bitmap_base_voq_lookup_table_key_t& key, const npl_mc_bitmap_base_voq_lookup_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 18);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpdr_local_vars_current_slice;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_MC_BITMAP_BASE_VOQ_LOOKUP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mc_bitmap_base_voq_lookup_table_result.tc_map_profile;
            target_payload.set_bits(17, 16, data_to_add);
            data_to_add = value.payloads.mc_bitmap_base_voq_lookup_table_result.base_voq;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_bitmap_base_voq_lookup_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_bitmap_tc_map_table_key_t& key, const npl_mc_bitmap_tc_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 3);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mc_bitmap_base_voq_lookup_table_result_tc_map_profile;
        target_key.set_bits(4, 3, data_to_add);
        data_to_add = key.rxpp_pd_tc;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_MC_BITMAP_TC_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rxpdr_local_vars_tc_offset;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_bitmap_tc_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_copy_id_map_key_t& key, const npl_mc_copy_id_map_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 13);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.cud_mapping_local_vars_mc_copy_id_17_12_;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_MC_COPY_ID_MAP_ACTION_UPDATE) {
            data_to_add = value.payloads.update.map_cud;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.update.encap_type;
            target_payload.set_bits(11, 8, data_to_add);
            data_to_add = value.payloads.update.mc_copy_id_msbs;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_copy_id_map_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_cud_is_wide_table_key_t& key, const npl_mc_cud_is_wide_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.cud_mapping_local_vars_mc_copy_id_12_7_;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_MC_CUD_IS_WIDE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.cud_mapping_local_vars_mc_cud_is_wide;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_cud_is_wide_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_cud_table_key_t& key, const npl_mc_cud_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(14, 121);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.cud_mapping_local_vars_exp_mc_copy_id_14_1_;
        target_key.set_bits(13, 0, data_to_add);
        
        if (value.action == NPL_MC_CUD_TABLE_ACTION_UPDATE) {
            data_to_add = value.payloads.update.mapped_cud_is_narrow;
            target_payload.set_bits(120, 120, data_to_add);
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.ac.l2_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 96, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 88, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.lsp_destination.lsp_type.destination_encoding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 86, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.lsp_destination.lsp_type.vpn;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(85, 85, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.lsp_destination.lsp_type.inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(84, 84, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.lsp_destination.lsp_dest_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 68, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.pwe.l2_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(65, 48, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 88, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.tunnel_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(85, 68, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.l2_dlp_type.vxlan.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(65, 56, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.npu_pif_ifg.padded_pif_ifg.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.npu_pif_ifg.padded_pif_ifg.pif_ifg.pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 42, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.npu_pif_ifg.padded_pif_ifg.pif_ifg.ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l2.npu_pif_ifg.use_npu_header_pif_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_common_dlp_nh_encap.nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 88, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_host_gb_dlp_encap.mc_host_gb_l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_host_gb_dlp_encap.mc_host_gb_l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 98, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_host_gb_dlp_encap.mc_host_gb_l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(96, 96, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_host_gb_dlp_encap.mc_host_gb_l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(96, 96, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_accounting_encap_data.mcg_counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_accounting_encap_data.mcg_counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.l3_common_encap.l3_dlp_nh_encap.npu_l3_mc_accounting_encap_data.mcg_counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.lsp_destination.lsp_type.destination_encoding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 86, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.lsp_destination.lsp_type.vpn;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(85, 85, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.lsp_destination.lsp_type.inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(84, 84, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.lsp_destination.lsp_dest_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 68, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.te_asbr.te_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 52, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.te_asbr.asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 52, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.mldp_protection.id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 43, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.tunnel_headend.mldp_protection.sel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.lsp.swap_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 68, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.lsp.lsp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 68, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.backup_te_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 52, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.mldp_protection.id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 43, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.lsr.mldp_protection.sel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 42, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.vxlan.tunnel_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(85, 68, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.vxlan.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(65, 56, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.gre_tunnel_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 72, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.npu_pif_ifg.padded_pif_ifg.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.npu_pif_ifg.padded_pif_ifg.pif_ifg.pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 42, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.npu_pif_ifg.padded_pif_ifg.pif_ifg.ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.l3.encap_ext.npu_pif_ifg.use_npu_header_pif_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.collapsed_mc_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.punt.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 99, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.resolve_local_mcid.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 98, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.ip_collapsed_mc_encap_header.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 80, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.l3_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.mpls_mc_host_encap_header.next_hop.host_nh_mac.host_mac;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 52, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.dlp_attributes.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 46, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.dlp_attributes.monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.dlp_attributes.bvn_profile.lp_over_lag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.dlp_attributes.bvn_profile.tc_map_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 41, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.dlp_attributes.never_use_npu_header_pif_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.pif_ifg_data.padded_pif_ifg.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.pif_ifg_data.padded_pif_ifg.pif_ifg.pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 42, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.pif_ifg_data.padded_pif_ifg.pif_ifg.ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 41, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud.npu_encap_data.pif_ifg_data.use_npu_header_pif_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.l2.l2_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.l2.l2_ac_encdap.l2_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 96, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.ip_collapsed_mc.collapsed_mc_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.ip_collapsed_mc.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.ip_collapsed_mc.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.ip_collapsed_mc.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.ip_collapsed_mc.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.ip_collapsed_mc.punt.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 99, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.ip_collapsed_mc.resolve_local_mcid.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 98, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.app_mc_cud_narrow.ip_collapsed_mc.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 80, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.reserved[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 64, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd.reserved[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 0, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.raw;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 60, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.l2.l2_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 56, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.l2.l2_ac_encdap.l2_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 36, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.ip_collapsed_mc.collapsed_mc_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 56, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.ip_collapsed_mc.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 44, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.ip_collapsed_mc.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 42, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.ip_collapsed_mc.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.ip_collapsed_mc.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.ip_collapsed_mc.punt.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.ip_collapsed_mc.resolve_local_mcid.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 38, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.app_mc_cud_narrow.ip_collapsed_mc.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 20, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_even.raw1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.l2.l2_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.l2.l2_ac_encdap.l2_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 96, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.ip_collapsed_mc.collapsed_mc_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.ip_collapsed_mc.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.ip_collapsed_mc.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 102, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.ip_collapsed_mc.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.ip_collapsed_mc.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(100, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.ip_collapsed_mc.punt.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 99, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.ip_collapsed_mc.resolve_local_mcid.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 98, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.odd.ip_collapsed_mc.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 80, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.raw;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.l2.l2_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 56, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.l2.l2_ac_encdap.l2_dlp.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 36, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.ip_collapsed_mc.collapsed_mc_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 56, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.ip_collapsed_mc.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 44, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.ip_collapsed_mc.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 42, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.ip_collapsed_mc.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.ip_collapsed_mc.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.ip_collapsed_mc.punt.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.ip_collapsed_mc.resolve_local_mcid.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 38, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.even.ip_collapsed_mc.l2_dlp.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 20, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.app_mc_cud_narrow_odd_and_even.raw1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.npu_mirror_or_redirect_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.mirror_or_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 108, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 113, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(112, 108, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 108, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.ingress_punt_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.punt_sub_code.sub_code.lpts_flow_type.lpts_flow;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 100, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_encap_msb.current_nw_hdr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 92, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_lm_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 88, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_msb_encap.punt_lm_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(86, 80, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.packet_fwd_header_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_ts_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_ts_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(66, 60, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_nw_encap_ptr.ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 52, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_nw_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 48, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 47, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_controls.punt_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 45, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_controls.mirror_local_encap_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_cud_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 40, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.fabric_mc_ibm_cmd.fabric_mc_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 113, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(112, 108, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.mirror.mirror_cud_encap.dcf_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 82, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.raw[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 64, data_to_add);
            }
            data_to_add = value.payloads.update.mapped_cud.raw[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_cud_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_em_db_key_t& key, const npl_mc_em_db_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 72);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mc_em_db_key.is_tx;
        target_key.set_bits(31, 31, data_to_add);
        data_to_add = key.mc_em_db_key.slice_or_is_fabric;
        target_key.set_bits(30, 28, data_to_add);
        data_to_add = key.mc_em_db_key.is_rcy;
        target_key.set_bits(27, 27, data_to_add);
        data_to_add = key.mc_em_db_key.mcid;
        target_key.set_bits(26, 11, data_to_add);
        data_to_add = key.mc_em_db_key.entry_index;
        target_key.set_bits(10, 0, data_to_add);
        
        if (value.action == NPL_MC_EM_DB_ACTION_WRITE) {
            data_to_add = value.payloads.mc_em_db_result.rx.result_1.tc_map_profile.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 70, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.rx.result_1.base_voq_nr.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.rx.result_1.mc_copy_id.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 36, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.rx.result_0.tc_map_profile.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 34, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.rx.result_0.base_voq_nr.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.rx.result_0.mc_copy_id.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 0, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_0.tc_map_profile_1.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 56, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_0.tc_map_profile_0.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 53, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_0.oq_group_1.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 45, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_0.oq_group_0.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 37, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_0.mc_copy_id_1.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(36, 19, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_0.mc_copy_id_0.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 1, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_1.copy_bitmap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 24, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_1.bmp_map_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 22, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_1.tc_map_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 19, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format_0_or_1.format_1.mc_copy_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 1, data_to_add);
            }
            data_to_add = value.payloads.mc_em_db_result.tx.format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_em_db_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_emdb_tc_map_table_key_t& key, const npl_mc_emdb_tc_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 3);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpdr_local_vars_tc_map_profile_1_0_;
        target_key.set_bits(4, 3, data_to_add);
        data_to_add = key.rxpp_pd_tc;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_MC_EMDB_TC_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rxpdr_local_vars_tc_offset;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_emdb_tc_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_fe_links_bmp_key_t& key, const npl_mc_fe_links_bmp_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 109);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_pd_fwd_destination_15_0_;
        target_key.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_MC_FE_LINKS_BMP_ACTION_WRITE) {
            data_to_add = value.payloads.mc_fe_links_bmp_db_result.use_bitmap_directly;
            target_payload.set_bits(108, 108, data_to_add);
            data_to_add = value.payloads.mc_fe_links_bmp_db_result.fe_links_bmp[1];
            target_payload.set_bits(107, 64, data_to_add);
            data_to_add = value.payloads.mc_fe_links_bmp_db_result.fe_links_bmp[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_fe_links_bmp_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_ibm_cud_mapping_table_key_t& key, const npl_mc_ibm_cud_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 129);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ibm_mc_cud_key;
        target_key.set_bits(8, 0, data_to_add);
        
        if (value.action == NPL_MC_IBM_CUD_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.wide_bit;
            target_payload.set_bits(128, 128, data_to_add);
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_encap_msb.npu_mirror_or_redirect_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.mirror_or_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 68, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 73, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.fabric_ibm_cmd.ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(72, 68, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.encap_punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 68, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.ingress_punt_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 64, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_encap_msb.lpts_tcam_first_result_encap_data_msb.punt_sub_code.sub_code.lpts_flow_type.lpts_flow;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 60, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_encap_msb.current_nw_hdr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 52, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_lm_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 48, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_msb_encap.punt_lm_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 40, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.packet_fwd_header_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 36, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_ts_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 28, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_ts_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 20, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_nw_encap_ptr.ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 12, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_nw_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 8, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 7, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_controls.punt_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 5, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_encap_data_lsb.punt_controls.mirror_local_encap_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(4, 4, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.punt_encap_data.punt_lsb_encap.punt_shared_lsb_encap.punt_cud_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 0, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.fabric_mc_ibm_cmd.fabric_mc_encapsulation_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 76, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd_padding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 73, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(72, 68, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.fabric_mc_ibm_cmd.fabric_mc_ibm_cmd_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 64, data_to_add);
            }
            data_to_add = value.payloads.mc_ibm_cud_mapping_encap.ibm_encap_header.dcf_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 42, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_ibm_cud_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mc_slice_bitmap_table_key_t& key, const npl_mc_slice_bitmap_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_pd_fwd_destination_15_0_;
        target_key.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_MC_SLICE_BITMAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mc_slice_bitmap_table_result.counterA_inc_enable;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.mc_slice_bitmap_table_result.group_size_or_bitmap.group_size;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(10, 0, data_to_add);
            }
            data_to_add = value.payloads.mc_slice_bitmap_table_result.group_size_or_bitmap.mc_bitmap.bitmap_indicator;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(10, 6, data_to_add);
            }
            data_to_add = value.payloads.mc_slice_bitmap_table_result.group_size_or_bitmap.mc_bitmap.bitmap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mc_slice_bitmap_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_meg_id_format_table_key_t& key, const npl_meg_id_format_table_key_t& mask, const npl_meg_id_format_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.eth_oam_mp_table_read_payload_meg_id_format;
        target_key.set_bits(16, 16, data_to_add);
        data_to_add = mask.eth_oam_mp_table_read_payload_meg_id_format;
        target_mask.set_bits(16, 16, data_to_add);
        data_to_add = key.eth_oam_ccm_meg_id_format;
        target_key.set_bits(15, 8, data_to_add);
        data_to_add = mask.eth_oam_ccm_meg_id_format;
        target_mask.set_bits(15, 8, data_to_add);
        data_to_add = key.meg_id_length;
        target_key.set_bits(7, 0, data_to_add);
        data_to_add = mask.meg_id_length;
        target_mask.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_MEG_ID_FORMAT_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.eth_wrong_meg_id_format;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_meg_id_format_table_key_t& key)
{
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(32, 16);
        result.payload.set_bits(0, 0, 0x1ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mep_address_prefix_table_key_t& key, const npl_mep_address_prefix_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mep_address_prefix_index;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_MEP_ADDRESS_PREFIX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mep_mac_address_prefix;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mep_address_prefix_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mii_loopback_table_key_t& key, const npl_mii_loopback_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 2);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.device_packet_info_ifg;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.device_packet_info_pif;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_MII_LOOPBACK_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mii_loopback_data.mode;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mii_loopback_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mirror_code_2_hw_table_key_t& key, const npl_mirror_code_2_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 5);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.pd_mirror_code_2;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_MIRROR_CODE_2_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rxpp_pd_rxn_in_mirror_cmd2;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mirror_code_2_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mirror_code_hw_table_key_t& key, const npl_mirror_code_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 5);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.pd_common_leaba_fields_mirror_code;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_MIRROR_CODE_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rxpp_pd_rxn_in_mirror_cmd1;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mirror_code_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mirror_egress_attributes_table_key_t& key, const npl_mirror_egress_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.is_ibm.val;
        target_key.set_bits(8, 8, data_to_add);
        data_to_add = key.mirror_code;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_MIRROR_EGRESS_ATTRIBUTES_TABLE_ACTION_SET_MIRROR_EGRESS_ATTRIBUTES) {
            data_to_add = value.payloads.set_mirror_egress_attributes.session_id;
            target_payload.set_bits(31, 20, data_to_add);
            data_to_add = value.payloads.set_mirror_egress_attributes.counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.set_mirror_egress_attributes.counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.set_mirror_egress_attributes.counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mirror_egress_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mirror_to_dsp_in_npu_soft_header_table_key_t& key, const npl_mirror_to_dsp_in_npu_soft_header_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mirror_code;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_MIRROR_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.update_dsp_in_npu_soft_header;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mirror_to_dsp_in_npu_soft_header_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_mldp_protection_enabled_static_table_key_t& key, const npl_mldp_protection_enabled_static_table_key_t& mask, const npl_mldp_protection_enabled_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.is_mc;
        target_key.set_bits(6, 6, data_to_add);
        data_to_add = mask.is_mc;
        target_mask.set_bits(6, 6, data_to_add);
        data_to_add = key.l3_encap;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = mask.l3_encap;
        target_mask.set_bits(5, 2, data_to_add);
        
        if (value.action == NPL_MLDP_PROTECTION_ENABLED_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.enabled;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mldp_protection_enabled_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mldp_protection_table_key_t& key, const npl_mldp_protection_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mlp_protection.id;
        target_key.set_bits(8, 0, data_to_add);
        
        if (value.action == NPL_MLDP_PROTECTION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mld_entry.drop_protect.val;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.mld_entry.drop_primary.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mldp_protection_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mp_aux_data_table_key_t& key, const npl_mp_aux_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 160);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.aux_table_key.rd_address;
        target_key.set_bits(11, 0, data_to_add);
        
        if (value.action == NPL_MP_AUX_DATA_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.aux_table_result.packet_header_type;
            target_payload.set_bits(159, 152, data_to_add);
            data_to_add = value.payloads.aux_table_result.count_phase;
            target_payload.set_bits(151, 144, data_to_add);
            data_to_add = value.payloads.aux_table_result.aux_data[2];
            target_payload.set_bits(143, 128, data_to_add);
            data_to_add = value.payloads.aux_table_result.aux_data[1];
            target_payload.set_bits(127, 64, data_to_add);
            data_to_add = value.payloads.aux_table_result.aux_data[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mp_aux_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mp_data_table_key_t& key, const npl_mp_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 200);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.line_id.id;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_MP_DATA_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.transmit_a.tx_rdi;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(192, 192, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.transmit_a.ccm_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(188, 188, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.transmit_a.unicast_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(187, 140, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.punt_code.punt_redirect_code.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 132, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.punt_code.snoop_code.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 132, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.punt_code.punt_mirror_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 132, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.punt_code.lpts_reason;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 132, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.meg_id_format;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 128, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.dmr_lmr_da;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(124, 124, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.md_level;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(122, 120, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.ccm_period;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(118, 116, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.mep_address_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 100, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.per_tc_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 98, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.mep_address_prefix_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 96, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_down_u.inject_down.inject_down_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 93, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_down_u.inject_down.inject_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(92, 90, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_down_u.inject_down.inject_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 88, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_down_u.inject_down.inject_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 68, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_down_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 93, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(92, 90, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 88, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 68, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_hdr_phb_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 91, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 88, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 86, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(85, 79, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(78, 72, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_dest.dest_override.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 72, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.from_port.up_ssp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 60, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.from_port.up_source_if.inject_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 71, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_eth.from_port.up_source_if.inject_pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 66, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_up_none_routable_mc_lpts.placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 76, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.inject_specific_data.inject_data.inject_vxlan_mc_up.placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 68, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.eth.shared.inject_header_data.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_msb.trans_data.ipv4.dip;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 168, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_msb.trans_data.ipv4.checksum;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(167, 152, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_msb.trans_data.ipv6.ipv6_dip_a;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 144, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_msb.transport_label.transport;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 141, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_msb.transport_label.requires_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(140, 140, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_ifg_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 136, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.udp_checksum;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 120, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.bfd_ih_down.inject_down_encap_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.bfd_ih_down.inject_down_encap_nh.down_l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 108, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.bfd_ih_down.inject_down_encap_nh.down_l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 106, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.bfd_ih_down.inject_down_encap_nh.down_l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.bfd_ih_down.inject_down_encap_nh.down_l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.bfd_ih_down.inject_down_encap_nh.down_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 92, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.bfd_ih_down.inject_down_encap_nh.down_pcp_dei.pcp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 89, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.bfd_ih_down.inject_down_encap_nh.down_pcp_dei.dei;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(88, 88, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.inject_down.inject_down_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 85, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.inject_down.inject_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(84, 82, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.inject_down.inject_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(81, 80, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.inject_down.inject_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 53, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_down_data.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(52, 40, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_down_u.inject_down.inject_down_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 117, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_down_u.inject_down.inject_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(116, 114, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_down_u.inject_down.inject_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 112, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_down_u.inject_down.inject_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 92, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_down_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 117, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(116, 114, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 112, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 92, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_hdr_phb_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 112, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 110, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(109, 103, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(102, 96, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_dest.dest_override.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 96, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.from_port.up_ssp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 84, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.from_port.up_source_if.inject_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 95, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_eth.from_port.up_source_if.inject_pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(94, 90, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_up_none_routable_mc_lpts.placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 100, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.inject_specific_data.inject_data.inject_vxlan_mc_up.placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 92, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 83, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 77, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.bfd_ih_app.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(76, 64, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd.shared.shared_lsb.inject_data.inject_up_data.inject_vlan_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 40, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd_extra.mpls_label.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(87, 68, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd_extra.mpls_label.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 65, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd_extra.mpls_label.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd_extra.mpls_label.ttl;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 56, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd_extra.extra_tx_b.local_state_and_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 48, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.bfd_extra.extra_tx_b.sip_selector;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 40, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 192, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_down_u.inject_down.inject_down_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(191, 189, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_down_u.inject_down.inject_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(188, 186, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_down_u.inject_down.inject_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(185, 184, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_down_u.inject_down.inject_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(183, 164, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_down_encap_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(191, 189, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(188, 186, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(185, 184, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_down_u.ene_inject_down.ene_inject_down_payload.ene_inject_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(183, 164, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_hdr_phb_src;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(187, 187, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_phb.tc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(186, 184, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_phb.dp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(183, 182, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(181, 175, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_qos.inject_up_fwd_qos_tag;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(174, 168, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.qos_or_dest.inject_up_dest.dest_override.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(187, 168, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.from_port.up_ssp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(167, 156, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.from_port.up_source_if.inject_ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(167, 167, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_eth.from_port.up_source_if.inject_pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(166, 162, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_up_none_routable_mc_lpts.placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(191, 172, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.inject_specific_data.inject_data.inject_vxlan_mc_up.placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(191, 164, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.counter_ptr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(155, 155, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.counter_ptr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(154, 149, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_app_specific_data.counter_ptr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(148, 136, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_encap_hdr_ptr.inject_down_encap_ptr_or_dlp.inject_down_encap_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 128, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_encap_hdr_ptr.inject_down_encap_ptr_or_dlp.inject_down_encap_nh.down_l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 124, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_encap_hdr_ptr.inject_down_encap_ptr_or_dlp.inject_down_encap_nh.down_l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(123, 122, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_encap_hdr_ptr.inject_down_encap_ptr_or_dlp.inject_down_encap_nh.down_l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(120, 120, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_encap_hdr_ptr.inject_down_encap_ptr_or_dlp.inject_down_encap_nh.down_l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(120, 120, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_encap_hdr_ptr.inject_down_encap_ptr_or_dlp.inject_down_encap_nh.down_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 108, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_encap_hdr_ptr.inject_down_encap_ptr_or_dlp.inject_down_encap_nh.down_pcp_dei.pcp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 105, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_specific_data.inject_header_encap_hdr_ptr.inject_down_encap_ptr_or_dlp.inject_down_encap_nh.down_pcp_dei.dei;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(104, 104, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.ts_and_cntr_stamp_cmd.time_and_cntr_stamp_cmd.time_stamp_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 100, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.ts_and_cntr_stamp_cmd.time_and_cntr_stamp_cmd.time_stamp_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 92, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.ts_and_cntr_stamp_cmd.time_and_cntr_stamp_cmd.counter_stamp_cmd.op;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 88, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.ts_and_cntr_stamp_cmd.time_and_cntr_stamp_cmd.counter_stamp_cmd.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(86, 80, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.npl_internal_info.tx_redirect_code;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 72, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inj_header.inject_header_trailer_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 64, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.inject_ifg_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 60, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_rd_data.mp_data_union.pfc.profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 36, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp2_data_union.bfd2.local_state_and_flags;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 28, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp2_data_union.bfd2.sip_selector;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 20, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp2_data_union.hw.lm_count_phase_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 34, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp2_data_union.hw.lm_period;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 31, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app.mp2_data_union.hw.ccm_count_phase_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 20, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app_defined[2];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 148, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app_defined[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(147, 84, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.overload_union_app_defined.app_defined[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 20, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.raw[2];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 148, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.raw[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(147, 84, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_mp_data.host_data.raw[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 20, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_data_res_count_phase.mp_data[2];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 189, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_data_res_count_phase.mp_data[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(188, 125, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_data_res_count_phase.mp_data[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(124, 61, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_data_res_count_phase.dm_count_phase;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 49, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_data_res_count_phase.dm_period;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 46, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_data_res_count_phase.lm_count_phase;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 34, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_data_res_count_phase.lm_period;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 31, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.npu_host_mp_data.npu_host_data_res_count_phase.ccm_count_phase;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(30, 19, data_to_add);
            }
            data_to_add = value.payloads.mp_data_result.ccm_period;
            target_payload.set_bits(18, 16, data_to_add);
            data_to_add = value.payloads.mp_data_result.dm_valid;
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.mp_data_result.lm_valid;
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.mp_data_result.ccm_valid;
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.mp_data_result.aux_ptr;
            target_payload.set_bits(12, 1, data_to_add);
            data_to_add = value.payloads.mp_data_result.mp_valid;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mp_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_encap_control_static_table_key_t& key, const npl_mpls_encap_control_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.encap_type;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = key.lsp_type;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_MPLS_ENCAP_CONTROL_STATIC_TABLE_ACTION_SET_MPLS_CONTROLS) {
            data_to_add = value.payloads.set_mpls_controls.mpls_encap_control_bits.is_midpoint;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.set_mpls_controls.mpls_encap_control_bits.mpls_labels_lookup;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.set_mpls_controls.mpls_encap_control_bits.is_asbr_or_ldpote;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.set_mpls_controls.is_vpn;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.set_mpls_controls.is_asbr;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_encap_control_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_forwarding_table_key_t& key, const npl_mpls_forwarding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(27, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x6ULL);
        data_to_add = key.label;
        target_key.set_bits(26, 7, data_to_add);
        
        if (value.action == NPL_MPLS_FORWARDING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.nhlfe.type;
            target_payload.set_bits(63, 60, data_to_add);
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_headend.lsp_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 8, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_headend.counter_offset.counter_idx;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 0, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.mp_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.lsp.swap_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.lsp.lsp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.midpoint_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 8, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.counter_offset.counter_idx;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 0, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 46, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 32, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 16, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.dsp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_forwarding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_header_offset_in_bytes_static_table_key_t& key, const npl_mpls_header_offset_in_bytes_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mpls_is_null_labels;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_MPLS_HEADER_OFFSET_IN_BYTES_STATIC_TABLE_ACTION_IS_NULL_LABEL_FALSE) {
            target_payload.set_bits(7, 0, 0x52ULL);
        }
        
        if (value.action == NPL_MPLS_HEADER_OFFSET_IN_BYTES_STATIC_TABLE_ACTION_IS_NULL_LABEL_TRUE) {
            target_payload.set_bits(7, 0, 0x66ULL);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_header_offset_in_bytes_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_l3_lsp_static_table_key_t& key, const npl_mpls_l3_lsp_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mpls_encap_control_bits.is_midpoint;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = key.mpls_encap_control_bits.mpls_labels_lookup;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.mpls_encap_control_bits.is_asbr_or_ldpote;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_BACKUP_PAYLOAD) {
            target_payload.set_bits(7, 0, 0x70ULL);
            target_payload.set_bits(15, 8, 0xbbULL);
        }
        
        if (value.action == NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_LSP_ASBR_PAYLOAD) {
            target_payload.set_bits(7, 0, 0x5cULL);
            target_payload.set_bits(15, 8, 0x69ULL);
        }
        
        if (value.action == NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_LSP_PAYLOAD) {
            target_payload.set_bits(7, 0, 0x70ULL);
            target_payload.set_bits(15, 8, 0xbaULL);
        }
        
        if (value.action == NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_LSP_ZERO_PAYLOAD) {
            target_payload.set_bits(7, 0, 0xc0ULL);
            target_payload.set_bits(15, 8, 0xbaULL);
        }
        
        if (value.action == NPL_MPLS_L3_LSP_STATIC_TABLE_ACTION_UPDATE_MIDPOINT_PAYLOAD) {
            target_payload.set_bits(7, 0, 0xc0ULL);
            target_payload.set_bits(15, 8, 0xbbULL);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_l3_lsp_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_labels_1_to_4_jump_offset_static_table_key_t& key, const npl_mpls_labels_1_to_4_jump_offset_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.jump_offset_code;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_MPLS_LABELS_1_TO_4_JUMP_OFFSET_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = translate_enum_option_id(context, value.payloads.jump_offsets.lsp_impose_2_mpls_labels_ene_offset.lsp_two_labels_ene_jump_offset);
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = translate_enum_option_id(context, value.payloads.jump_offsets.lsp_impose_2_mpls_labels_ene_offset.lsp_one_label_ene_jump_offset);
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_labels_1_to_4_jump_offset_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_lsp_labels_config_static_table_key_t& key, const npl_mpls_lsp_labels_config_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.inner_transport_labels_exist;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.num_outer_transport_labels.total_num_labels;
        target_key.set_bits(4, 1, data_to_add);
        data_to_add = key.num_outer_transport_labels.num_labels_is_3;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_MPLS_LSP_LABELS_CONFIG_STATIC_TABLE_ACTION_SET_SECOND_MPLS_ENE_MACRO) {
            data_to_add = value.payloads.set_second_mpls_ene_macro.num_labels_is_8;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.set_second_mpls_ene_macro.outer_transport_labels_exist;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.set_second_mpls_ene_macro.additional_labels_exist;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.set_second_mpls_ene_macro.transport_labels_size;
            target_payload.set_bits(9, 4, data_to_add);
            data_to_add = value.payloads.set_second_mpls_ene_macro.second_ene_macro_code;
            target_payload.set_bits(3, 2, data_to_add);
            data_to_add = value.payloads.set_second_mpls_ene_macro.jump_offset_code;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_lsp_labels_config_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_qos_mapping_table_key_t& key, const npl_mpls_qos_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l3_qos_mapping_key;
        target_key.set_bits(6, 4, data_to_add);
        data_to_add = key.qos_id;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_MPLS_QOS_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mpls_qos_mapping_result.override_qos;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.mpls_qos_mapping_result.enable_ingress_remark;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.mpls_qos_mapping_result.ctr_offest_union.q_m_offset_5bits.offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(29, 25, data_to_add);
            }
            data_to_add = value.payloads.mpls_qos_mapping_result.ctr_offest_union.q_m_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 25, data_to_add);
            }
            data_to_add = value.payloads.mpls_qos_mapping_result.phb.tc;
            target_payload.set_bits(24, 22, data_to_add);
            data_to_add = value.payloads.mpls_qos_mapping_result.phb.dp;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.mpls_qos_mapping_result.encap_mpls_exp.valid;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.mpls_qos_mapping_result.encap_mpls_exp.exp;
            target_payload.set_bits(18, 16, data_to_add);
            data_to_add = value.payloads.mpls_qos_mapping_result.fwd_class_qos_group_u.fwd_class_qos_group.fwd_class;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 13, data_to_add);
            }
            data_to_add = value.payloads.mpls_qos_mapping_result.fwd_class_qos_group_u.fwd_class_qos_group.qos_group;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 8, data_to_add);
            }
            data_to_add = value.payloads.mpls_qos_mapping_result.fwd_class_qos_group_u.qos_group_pd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 8, data_to_add);
            }
            data_to_add = value.payloads.mpls_qos_mapping_result.meter;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.mpls_qos_mapping_result.fwd_qos_tag;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_qos_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_mpls_resolve_service_labels_static_table_key_t& key, const npl_mpls_resolve_service_labels_static_table_key_t& mask, const npl_mpls_resolve_service_labels_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.lsp_flags.service_flags.push_entropy_label;
        target_key.set_bits(15, 15, data_to_add);
        data_to_add = key.lsp_flags.service_flags.add_ipv6_explicit_null;
        target_key.set_bits(14, 14, data_to_add);
        data_to_add = key.lsp_flags.num_outer_transport_labels.total_num_labels;
        target_key.set_bits(13, 10, data_to_add);
        data_to_add = key.lsp_flags.num_outer_transport_labels.num_labels_is_3;
        target_key.set_bits(9, 9, data_to_add);
        data_to_add = mask.lsp_flags.service_flags.push_entropy_label;
        target_mask.set_bits(15, 15, data_to_add);
        data_to_add = mask.lsp_flags.service_flags.add_ipv6_explicit_null;
        target_mask.set_bits(14, 14, data_to_add);
        data_to_add = mask.lsp_flags.num_outer_transport_labels.total_num_labels;
        target_mask.set_bits(13, 10, data_to_add);
        data_to_add = mask.lsp_flags.num_outer_transport_labels.num_labels_is_3;
        target_mask.set_bits(9, 9, data_to_add);
        data_to_add = key.vpn_enabled;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = mask.vpn_enabled;
        target_mask.set_bits(5, 5, data_to_add);
        data_to_add = key.fwd_hdr_type;
        target_key.set_bits(4, 1, data_to_add);
        data_to_add = mask.fwd_hdr_type;
        target_mask.set_bits(4, 1, data_to_add);
        
        if (value.action == NPL_MPLS_RESOLVE_SERVICE_LABELS_STATIC_TABLE_ACTION_SET_CONDITIONS) {
            data_to_add = value.payloads.set_conditions.vpn_label_exists;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.set_conditions.sizeof_labels;
            target_payload.set_bits(10, 5, data_to_add);
            data_to_add = value.payloads.set_conditions.mpls_first_ene_macro_control.no_first_ene_macro;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.set_conditions.mpls_first_ene_macro_control.vpn_label_lookup;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.set_conditions.mpls_first_ene_macro_control.qos_first_macro_code;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_resolve_service_labels_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_termination_em0_table_key_t& key, const npl_mpls_termination_em0_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(22, 50);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        data_to_add = key.termination_label;
        target_key.set_bits(21, 2, data_to_add);
        
        if (value.action == NPL_MPLS_TERMINATION_EM0_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mpls_termination_result.result.service;
            target_payload.set_bits(49, 48, data_to_add);
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 36, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_mldp_info.mldp_info.rpf_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_mldp_info.vpn_info.allow_ipv4_ipv6_fwd_bits.override_enable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 33, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_mldp_info.vpn_info.allow_ipv4_ipv6_fwd_bits.override_enable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 32, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.is_pwe_raw;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.enable_mpls_tp_oam;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.fat_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.cw_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.bfd_channel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 39, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.l2_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 25, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.mac_lp_attr.vlan_profile_and_lp_type.l2_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 21, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.mac_lp_attr.vlan_profile_and_lp_type.vlan_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 17, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.mac_lp_attr.local_slp_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(16, 1, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_termination_em0_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_mpls_termination_em1_table_key_t& key, const npl_mpls_termination_em1_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(22, 50);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        data_to_add = key.termination_label;
        target_key.set_bits(21, 2, data_to_add);
        
        if (value.action == NPL_MPLS_TERMINATION_EM1_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mpls_termination_result.result.service;
            target_payload.set_bits(49, 48, data_to_add);
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 36, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_mldp_info.mldp_info.rpf_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_mldp_info.vpn_info.allow_ipv4_ipv6_fwd_bits.override_enable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 33, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_mldp_info.vpn_info.allow_ipv4_ipv6_fwd_bits.override_enable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 32, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.l3vpn_info.vpn_p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.is_pwe_raw;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(46, 46, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.enable_mpls_tp_oam;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(45, 45, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.fat_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.cw_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 43, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.bfd_channel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 39, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.l2_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 25, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.mac_lp_attr.vlan_profile_and_lp_type.l2_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 21, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.mac_lp_attr.vlan_profile_and_lp_type.vlan_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 17, data_to_add);
            }
            data_to_add = value.payloads.mpls_termination_result.result.pwe_vpn_mldp_info.pwe_info.mac_lp_attr.local_slp_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(16, 1, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_termination_em1_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_mpls_vpn_enabled_static_table_key_t& key, const npl_mpls_vpn_enabled_static_table_key_t& mask, const npl_mpls_vpn_enabled_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(48, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.is_vpn;
        target_key.set_bits(19, 19, data_to_add);
        data_to_add = mask.is_vpn;
        target_mask.set_bits(19, 19, data_to_add);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(18, 15, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(18, 15, data_to_add);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(14, 3, data_to_add);
        data_to_add = mask.l3_relay_id.id;
        target_mask.set_bits(14, 3, data_to_add);
        data_to_add = key.is_prefix_id;
        target_key.set_bits(2, 0, data_to_add);
        data_to_add = mask.is_prefix_id;
        target_mask.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_MPLS_VPN_ENABLED_STATIC_TABLE_ACTION_SET_VALUE) {
            data_to_add = value.payloads.set_value.is_l2_vpn;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.set_value.vpn_enabled;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_mpls_vpn_enabled_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ms_voq_fabric_context_offset_table_key_t& key, const npl_ms_voq_fabric_context_offset_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.calc_msvoq_num_input_fabric_context;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_MS_VOQ_FABRIC_CONTEXT_OFFSET_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ms_voq_fabric_context_offset_table_result.ms_voq_fabric_context_offset;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ms_voq_fabric_context_offset_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_my_ipv4_table_key_t& key, const npl_my_ipv4_table_key_t& mask, const npl_my_ipv4_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(140, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.l4_protocol_type_3_2;
        target_key.set_bits(49, 48, data_to_add);
        data_to_add = mask.l4_protocol_type_3_2;
        target_mask.set_bits(49, 48, data_to_add);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(47, 36, data_to_add);
        data_to_add = mask.l3_relay_id.id;
        target_mask.set_bits(47, 36, data_to_add);
        data_to_add = key.dip;
        target_key.set_bits(35, 4, data_to_add);
        data_to_add = mask.dip;
        target_mask.set_bits(35, 4, data_to_add);
        
        if (value.action == NPL_MY_IPV4_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ip_tunnel_termination_attr.ip_termination_type;
            target_payload.set_bits(17, 16, data_to_add);
            data_to_add = value.payloads.ip_tunnel_termination_attr.ip_tunnel_termination_attr_or_slp.sip_ip_tunnel_termination_attr.my_dip_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(9, 4, data_to_add);
            }
            data_to_add = value.payloads.ip_tunnel_termination_attr.ip_tunnel_termination_attr_or_slp.sip_ip_tunnel_termination_attr.vxlan_tunnel_loopback;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 0, data_to_add);
            }
            data_to_add = value.payloads.ip_tunnel_termination_attr.ip_tunnel_termination_attr_or_slp.tunnel_slp_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_my_ipv4_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_next_header_1_is_l4_over_ipv4_static_table_key_t& key, const npl_next_header_1_is_l4_over_ipv4_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.is_l4;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.fragmented;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_NEXT_HEADER_1_IS_L4_OVER_IPV4_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.next_header_1_is_l4_over_ipv4.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_next_header_1_is_l4_over_ipv4_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_nh_macro_code_to_id_l6_static_table_key_t& key, const npl_nh_macro_code_to_id_l6_static_table_key_t& mask, const npl_nh_macro_code_to_id_l6_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.nh_ene_code;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = mask.nh_ene_code;
        target_mask.set_bits(3, 2, data_to_add);
        
        if (value.action == NPL_NH_MACRO_CODE_TO_ID_L6_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = translate_ene_macro_id(context, value.payloads.nh_ene_macro_id.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_nh_macro_code_to_id_l6_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_nhlfe_type_mapping_static_table_key_t& key, const npl_nhlfe_type_mapping_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.mpls_relay_local_vars_nhlfe_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_NHLFE_TYPE_MAPPING_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.mpls_relay_local_vars_nhlfe_attributes.encap_type;
            target_payload.set_bits(23, 20, data_to_add);
            data_to_add = value.payloads.mpls_relay_local_vars_nhlfe_attributes.midpoint_nh_destination_encoding.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_nhlfe_type_mapping_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_npp_sgt_attributes_table_key_t& key, const npl_npp_sgt_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.npp_attributes_index;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_NPP_SGT_ATTRIBUTES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.npp_sgt_attributes.security_group;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_npp_sgt_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_null_rtf_next_macro_static_table_key_t& key, const npl_null_rtf_next_macro_static_table_key_t& mask, const npl_null_rtf_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.next_prot_type;
        target_key.set_bits(11, 7, data_to_add);
        data_to_add = mask.next_prot_type;
        target_mask.set_bits(11, 7, data_to_add);
        data_to_add = key.pd_tunnel_ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_key.set_bits(6, 5, data_to_add);
        data_to_add = key.pd_tunnel_ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_key.set_bits(4, 3, data_to_add);
        data_to_add = mask.pd_tunnel_ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_mask.set_bits(6, 5, data_to_add);
        data_to_add = mask.pd_tunnel_ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_mask.set_bits(4, 3, data_to_add);
        data_to_add = key.acl_outer;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.acl_outer;
        target_mask.set_bits(2, 2, data_to_add);
        
        if (value.action == NPL_NULL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
            data_to_add = value.payloads.set_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.set_macro.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_null_rtf_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_nw_smcid_threshold_table_key_t& key, const npl_nw_smcid_threshold_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dummy;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_NW_SMCID_THRESHOLD_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.smcid_threshold.id;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_nw_smcid_threshold_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_oamp_drop_destination_static_table_key_t& key, const npl_oamp_drop_destination_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        
        if (value.action == NPL_OAMP_DROP_DESTINATION_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.drop_dest.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_oamp_drop_destination_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_oamp_event_queue_table_key_t& key, const npl_oamp_event_queue_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(34, 0);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rmep_id;
        target_key.set_bits(33, 21, data_to_add);
        data_to_add = key.mep_id;
        target_key.set_bits(20, 8, data_to_add);
        data_to_add = key.oamp_event;
        target_key.set_bits(7, 0, data_to_add);
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_oamp_event_queue_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_oamp_redirect_get_counter_table_key_t& key, const npl_oamp_redirect_get_counter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.redirect_code;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_OAMP_REDIRECT_GET_COUNTER_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.counter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.counter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.counter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_oamp_redirect_get_counter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_oamp_redirect_punt_eth_hdr_1_table_key_t& key, const npl_oamp_redirect_punt_eth_hdr_1_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.encap_selector;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_1_TABLE_ACTION_SET_INJECT_ETH) {
            data_to_add = value.payloads.set_inject_eth.da;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_oamp_redirect_punt_eth_hdr_1_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_oamp_redirect_punt_eth_hdr_2_table_key_t& key, const npl_oamp_redirect_punt_eth_hdr_2_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.encap_selector;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_2_TABLE_ACTION_SET_INJECT_ETH) {
            data_to_add = value.payloads.set_inject_eth.da;
            target_payload.set_bits(31, 16, data_to_add);
            data_to_add = value.payloads.set_inject_eth.sa;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_oamp_redirect_punt_eth_hdr_2_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_oamp_redirect_punt_eth_hdr_3_table_key_t& key, const npl_oamp_redirect_punt_eth_hdr_3_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.encap_selector;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_3_TABLE_ACTION_SET_INJECT_ETH) {
            data_to_add = value.payloads.set_inject_eth.sa;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_oamp_redirect_punt_eth_hdr_3_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_oamp_redirect_punt_eth_hdr_4_table_key_t& key, const npl_oamp_redirect_punt_eth_hdr_4_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.encap_selector;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_OAMP_REDIRECT_PUNT_ETH_HDR_4_TABLE_ACTION_SET_INJECT_ETH) {
            data_to_add = value.payloads.set_inject_eth.dei_vid;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_oamp_redirect_punt_eth_hdr_4_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_oamp_redirect_table_key_t& key, const npl_oamp_redirect_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 44);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.redirect_code;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_OAMP_REDIRECT_TABLE_ACTION_OAMP_REDIRECT_ACTION) {
            data_to_add = value.payloads.oamp_redirect_action.destination.val;
            target_payload.set_bits(40, 21, data_to_add);
            data_to_add = value.payloads.oamp_redirect_action.phb.tc;
            target_payload.set_bits(20, 18, data_to_add);
            data_to_add = value.payloads.oamp_redirect_action.phb.dp;
            target_payload.set_bits(17, 16, data_to_add);
            data_to_add = value.payloads.oamp_redirect_action.encap_ptr;
            target_payload.set_bits(15, 14, data_to_add);
            data_to_add = value.payloads.oamp_redirect_action.keep_counter;
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.oamp_redirect_action.drop;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.oamp_redirect_action.type;
            target_payload.set_bits(11, 4, data_to_add);
            data_to_add = value.payloads.oamp_redirect_action.ifg;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_oamp_redirect_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_obm_next_macro_static_table_key_t& key, const npl_obm_next_macro_static_table_key_t& mask, const npl_obm_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.rcy_data_suffix;
        target_key.set_bits(11, 7, data_to_add);
        data_to_add = mask.rcy_data_suffix;
        target_mask.set_bits(11, 7, data_to_add);
        data_to_add = key.has_punt_header;
        target_key.set_bits(6, 2, data_to_add);
        data_to_add = mask.has_punt_header;
        target_mask.set_bits(6, 2, data_to_add);
        
        if (value.action == NPL_OBM_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.update_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.update_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_obm_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_og_next_macro_static_table_key_t& key, const npl_og_next_macro_static_table_key_t& mask, const npl_og_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.ip_version;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.ip_version;
        target_mask.set_bits(2, 2, data_to_add);
        
        if (value.action == NPL_OG_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
            data_to_add = value.payloads.set_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.set_macro.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_og_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_outer_tpid_table_key_t& key, const npl_outer_tpid_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tpid_ptr;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_OUTER_TPID_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.tpid;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_outer_tpid_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_overlay_ipv4_sip_table_key_t& key, const npl_overlay_ipv4_sip_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(40, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x6ULL);
        data_to_add = key.sip;
        target_key.set_bits(39, 8, data_to_add);
        data_to_add = key.vxlan_tunnel_loopback;
        target_key.set_bits(7, 4, data_to_add);
        
        if (value.action == NPL_OVERLAY_IPV4_SIP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.slp_id.id;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_overlay_ipv4_sip_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_pad_mtu_inj_check_static_table_key_t& key, const npl_pad_mtu_inj_check_static_table_key_t& mask, const npl_pad_mtu_inj_check_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.tx_npu_header_is_inject_up.val;
        target_key.set_bits(15, 15, data_to_add);
        data_to_add = mask.tx_npu_header_is_inject_up.val;
        target_mask.set_bits(15, 15, data_to_add);
        data_to_add = key.l3_tx_local_vars_fwd_pkt_size;
        target_key.set_bits(14, 1, data_to_add);
        data_to_add = mask.l3_tx_local_vars_fwd_pkt_size;
        target_mask.set_bits(14, 1, data_to_add);
        
        if (value.action == NPL_PAD_MTU_INJ_CHECK_STATIC_TABLE_ACTION_PAD_MTU_INJ_NEXT_MACRO_ACTION) {
            target_payload.set_bits(10, 10, 0x1ULL);
            data_to_add = value.payloads.pad_mtu_inj_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.pad_mtu_inj_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pad_mtu_inj_check_static_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(16, 16);
        result.mask.set_bits(0, 0, 0x1ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pbts_map_table_stage0_key_t& key, const npl_pbts_map_table_stage0_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 23);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.qos_3_bits;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = key.destination_2_bits;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_PBTS_MAP_TABLE_STAGE0_ACTION_WRITE) {
            data_to_add = value.payloads.pbts_map_res.pbts_offset;
            target_payload.set_bits(22, 20, data_to_add);
            data_to_add = value.payloads.pbts_map_res.destination_shift;
            target_payload.set_bits(19, 18, data_to_add);
            data_to_add = value.payloads.pbts_map_res.and_mask;
            target_payload.set_bits(17, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pbts_map_table_stage0_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pbts_map_table_stage1_key_t& key, const npl_pbts_map_table_stage1_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 23);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.qos_3_bits;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = key.destination_2_bits;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_PBTS_MAP_TABLE_STAGE1_ACTION_WRITE) {
            data_to_add = value.payloads.pbts_map_res.pbts_offset;
            target_payload.set_bits(22, 20, data_to_add);
            data_to_add = value.payloads.pbts_map_res.destination_shift;
            target_payload.set_bits(19, 18, data_to_add);
            data_to_add = value.payloads.pbts_map_res.and_mask;
            target_payload.set_bits(17, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pbts_map_table_stage1_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pbts_map_table_stage2_key_t& key, const npl_pbts_map_table_stage2_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 23);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.qos_3_bits;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = key.destination_2_bits;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_PBTS_MAP_TABLE_STAGE2_ACTION_WRITE) {
            data_to_add = value.payloads.pbts_map_res.pbts_offset;
            target_payload.set_bits(22, 20, data_to_add);
            data_to_add = value.payloads.pbts_map_res.destination_shift;
            target_payload.set_bits(19, 18, data_to_add);
            data_to_add = value.payloads.pbts_map_res.and_mask;
            target_payload.set_bits(17, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pbts_map_table_stage2_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pbts_map_table_stage3_key_t& key, const npl_pbts_map_table_stage3_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 23);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.qos_3_bits;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = key.destination_2_bits;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_PBTS_MAP_TABLE_STAGE3_ACTION_WRITE) {
            data_to_add = value.payloads.pbts_map_res.pbts_offset;
            target_payload.set_bits(22, 20, data_to_add);
            data_to_add = value.payloads.pbts_map_res.destination_shift;
            target_payload.set_bits(19, 18, data_to_add);
            data_to_add = value.payloads.pbts_map_res.and_mask;
            target_payload.set_bits(17, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pbts_map_table_stage3_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pdoq_oq_ifc_mapping_key_t& key, const npl_pdoq_oq_ifc_mapping_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 15);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.dest_oq;
        target_key.set_bits(8, 0, data_to_add);
        
        if (value.action == NPL_PDOQ_OQ_IFC_MAPPING_ACTION_WRITE) {
            data_to_add = value.payloads.pdoq_oq_ifc_mapping_result.fcn_profile;
            target_payload.set_bits(14, 13, data_to_add);
            data_to_add = value.payloads.pdoq_oq_ifc_mapping_result.txpp_map_data.parsed.oq_pair;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 11, data_to_add);
            }
            data_to_add = value.payloads.pdoq_oq_ifc_mapping_result.txpp_map_data.parsed.pif;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(10, 6, data_to_add);
            }
            data_to_add = value.payloads.pdoq_oq_ifc_mapping_result.txpp_map_data.parsed.ifg;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.pdoq_oq_ifc_mapping_result.txpp_map_data.raw;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 5, data_to_add);
            }
            data_to_add = value.payloads.pdoq_oq_ifc_mapping_result.dest_pif;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pdoq_oq_ifc_mapping_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pdvoq_bank_pair_offset_table_key_t& key, const npl_pdvoq_bank_pair_offset_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 108);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_PDVOQ_BANK_PAIR_OFFSET_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[107].value;
            target_payload.set_bits(107, 107, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[106].value;
            target_payload.set_bits(106, 106, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[105].value;
            target_payload.set_bits(105, 105, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[104].value;
            target_payload.set_bits(104, 104, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[103].value;
            target_payload.set_bits(103, 103, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[102].value;
            target_payload.set_bits(102, 102, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[101].value;
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[100].value;
            target_payload.set_bits(100, 100, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[99].value;
            target_payload.set_bits(99, 99, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[98].value;
            target_payload.set_bits(98, 98, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[97].value;
            target_payload.set_bits(97, 97, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[96].value;
            target_payload.set_bits(96, 96, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[95].value;
            target_payload.set_bits(95, 95, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[94].value;
            target_payload.set_bits(94, 94, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[93].value;
            target_payload.set_bits(93, 93, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[92].value;
            target_payload.set_bits(92, 92, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[91].value;
            target_payload.set_bits(91, 91, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[90].value;
            target_payload.set_bits(90, 90, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[89].value;
            target_payload.set_bits(89, 89, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[88].value;
            target_payload.set_bits(88, 88, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[87].value;
            target_payload.set_bits(87, 87, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[86].value;
            target_payload.set_bits(86, 86, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[85].value;
            target_payload.set_bits(85, 85, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[84].value;
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[83].value;
            target_payload.set_bits(83, 83, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[82].value;
            target_payload.set_bits(82, 82, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[81].value;
            target_payload.set_bits(81, 81, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[80].value;
            target_payload.set_bits(80, 80, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[79].value;
            target_payload.set_bits(79, 79, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[78].value;
            target_payload.set_bits(78, 78, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[77].value;
            target_payload.set_bits(77, 77, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[76].value;
            target_payload.set_bits(76, 76, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[75].value;
            target_payload.set_bits(75, 75, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[74].value;
            target_payload.set_bits(74, 74, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[73].value;
            target_payload.set_bits(73, 73, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[72].value;
            target_payload.set_bits(72, 72, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[71].value;
            target_payload.set_bits(71, 71, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[70].value;
            target_payload.set_bits(70, 70, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[69].value;
            target_payload.set_bits(69, 69, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[68].value;
            target_payload.set_bits(68, 68, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[67].value;
            target_payload.set_bits(67, 67, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[66].value;
            target_payload.set_bits(66, 66, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[65].value;
            target_payload.set_bits(65, 65, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[64].value;
            target_payload.set_bits(64, 64, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[63].value;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[62].value;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[61].value;
            target_payload.set_bits(61, 61, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[60].value;
            target_payload.set_bits(60, 60, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[59].value;
            target_payload.set_bits(59, 59, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[58].value;
            target_payload.set_bits(58, 58, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[57].value;
            target_payload.set_bits(57, 57, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[56].value;
            target_payload.set_bits(56, 56, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[55].value;
            target_payload.set_bits(55, 55, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[54].value;
            target_payload.set_bits(54, 54, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[53].value;
            target_payload.set_bits(53, 53, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[52].value;
            target_payload.set_bits(52, 52, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[51].value;
            target_payload.set_bits(51, 51, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[50].value;
            target_payload.set_bits(50, 50, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[49].value;
            target_payload.set_bits(49, 49, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[48].value;
            target_payload.set_bits(48, 48, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[47].value;
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[46].value;
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[45].value;
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[44].value;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[43].value;
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[42].value;
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[41].value;
            target_payload.set_bits(41, 41, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[40].value;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[39].value;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[38].value;
            target_payload.set_bits(38, 38, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[37].value;
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[36].value;
            target_payload.set_bits(36, 36, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[35].value;
            target_payload.set_bits(35, 35, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[34].value;
            target_payload.set_bits(34, 34, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[33].value;
            target_payload.set_bits(33, 33, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[32].value;
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[31].value;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[30].value;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[29].value;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[28].value;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[27].value;
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[26].value;
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[25].value;
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[24].value;
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[23].value;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[22].value;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[21].value;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[20].value;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[19].value;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[18].value;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[17].value;
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[16].value;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[15].value;
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[14].value;
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[13].value;
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[12].value;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[11].value;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[10].value;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[9].value;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[8].value;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[7].value;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[6].value;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[5].value;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[4].value;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[3].value;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[2].value;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[1].value;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.pdvoq_bank_pair_offset_result.array[0].value;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pdvoq_bank_pair_offset_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pdvoq_slice_dram_wred_lut_table_key_t& key, const npl_pdvoq_slice_dram_wred_lut_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(11, 7, data_to_add);
        data_to_add = key.packet_size_range;
        target_key.set_bits(6, 4, data_to_add);
        data_to_add = key.queue_size_level;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_PDVOQ_SLICE_DRAM_WRED_LUT_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pdvoq_slice_dram_wred_lut_result.mark_y.region_id;
            target_payload.set_bits(19, 15, data_to_add);
            data_to_add = value.payloads.pdvoq_slice_dram_wred_lut_result.mark_g.region_id;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.pdvoq_slice_dram_wred_lut_result.drop_y.region_id;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.pdvoq_slice_dram_wred_lut_result.drop_g.region_id;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pdvoq_slice_dram_wred_lut_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pdvoq_slice_voq_properties_table_key_t& key, const npl_pdvoq_slice_voq_properties_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.voq_num;
        target_key.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_PDVOQ_SLICE_VOQ_PROPERTIES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pdvoq_slice_voq_properties_result.type;
            target_payload.set_bits(7, 5, data_to_add);
            data_to_add = value.payloads.pdvoq_slice_voq_properties_result.profile.value;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pdvoq_slice_voq_properties_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_per_asbr_and_dpe_table_key_t& key, const npl_per_asbr_and_dpe_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(36, 45);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xfULL);
        data_to_add = key.dpe;
        target_key.set_bits(35, 20, data_to_add);
        data_to_add = key.asbr;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_PER_ASBR_AND_DPE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.num_labels;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.label_encap.label_exp_bos.exp;
            target_payload.set_bits(43, 41, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.label_encap.label_exp_bos.bos;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.label_encap.label;
            target_payload.set_bits(39, 20, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.counter_ptr.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.counter_ptr.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.large_em_label_encap_data_and_counter_ptr.counter_ptr.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_per_asbr_and_dpe_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_per_pe_and_prefix_vpn_key_large_table_key_t& key, const npl_per_pe_and_prefix_vpn_key_large_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(37, 76);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x5ULL);
        data_to_add = key.ip_prefix_id;
        target_key.set_bits(36, 20, data_to_add);
        data_to_add = key.lsp_destination;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_PER_PE_AND_PREFIX_VPN_KEY_LARGE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.gre_key;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v6_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v4_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 68, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 65, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 41, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 75, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(74, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 56, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 52, data_to_add);
            }
            data_to_add = translate_ene_macro_id(context, value.payloads.vpn_encap_data.l2vpn_label_encap_data.first_ene_macro.id);
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_l2_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 24, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.enable_pwe_cntr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 23, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.no_fat;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(22, 22, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.cw_fat_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_per_pe_and_prefix_vpn_key_large_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_per_pe_and_vrf_vpn_key_large_table_key_t& key, const npl_per_pe_and_vrf_vpn_key_large_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 76);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x4ULL);
        data_to_add = key.l3_relay_id.id;
        target_key.set_bits(31, 20, data_to_add);
        data_to_add = key.lsp_destination;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_PER_PE_AND_VRF_VPN_KEY_LARGE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.gre_key;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v6_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v4_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 68, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 65, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 41, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 75, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(74, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 56, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 52, data_to_add);
            }
            data_to_add = translate_ene_macro_id(context, value.payloads.vpn_encap_data.l2vpn_label_encap_data.first_ene_macro.id);
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_l2_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 24, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.enable_pwe_cntr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 23, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.no_fat;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(22, 22, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.cw_fat_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_per_pe_and_vrf_vpn_key_large_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_per_port_destination_table_key_t& key, const npl_per_port_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.device_rx_source_if_pif;
        target_key.set_bits(5, 1, data_to_add);
        data_to_add = key.device_rx_source_if_ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_PER_PORT_DESTINATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.destination_local_vars_fwd_destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_per_port_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_per_vrf_mpls_forwarding_table_key_t& key, const npl_per_vrf_mpls_forwarding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(39, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x66ULL);
        data_to_add = key.label;
        target_key.set_bits(38, 19, data_to_add);
        data_to_add = key.vrf_id.id;
        target_key.set_bits(18, 7, data_to_add);
        
        if (value.action == NPL_PER_VRF_MPLS_FORWARDING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.nhlfe.type;
            target_payload.set_bits(63, 60, data_to_add);
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_headend.lsp_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 8, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_headend.counter_offset.counter_idx;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 0, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.mp_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.lsp.swap_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.lsp.lsp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.midpoint_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 8, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.te_midpoint.counter_offset.counter_idx;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 0, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.l3_dlp.l3_dlp_id.l3_dlp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 48, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.l3_dlp.properties.l3_dlp_id_ext.l3_dlp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 46, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.l3_dlp.properties.monitor_or_l3_dlp_ip_type.l3_dlp_ip_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.l3_dlp.properties.monitor_or_l3_dlp_ip_type.enable_monitor.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 44, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.l3_dlp_nh_encap.nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 32, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 16, data_to_add);
            }
            data_to_add = value.payloads.nhlfe.nhlfe_payload.l2_adj_sid.dsp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_per_vrf_mpls_forwarding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pfc_destination_table_key_t& key, const npl_pfc_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(56, 40);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(7, 0, 0x5dULL);
        data_to_add = key.ssp1;
        target_key.set_bits(55, 40, data_to_add);
        data_to_add = key.ssp2;
        target_key.set_bits(39, 24, data_to_add);
        data_to_add = key.redirect1;
        target_key.set_bits(23, 16, data_to_add);
        data_to_add = key.redirect2;
        target_key.set_bits(15, 8, data_to_add);
        
        if (value.action == NPL_PFC_DESTINATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pfc_em_lookup_result.destination;
            target_payload.set_bits(39, 20, data_to_add);
            data_to_add = value.payloads.pfc_em_lookup_result.some_padding;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pfc_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_pfc_filter_wd_table_key_t& key, const npl_pfc_filter_wd_table_key_t& mask, const npl_pfc_filter_wd_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(140, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.tc;
        target_key.set_bits(18, 16, data_to_add);
        data_to_add = mask.tc;
        target_mask.set_bits(18, 16, data_to_add);
        data_to_add = key.dsp;
        target_key.set_bits(15, 4, data_to_add);
        data_to_add = mask.dsp;
        target_mask.set_bits(15, 4, data_to_add);
        
        if (value.action == NPL_PFC_FILTER_WD_TABLE_ACTION_PFC_FILTER_WD_ACTION) {
            data_to_add = value.payloads.pfc_filter_wd_action.destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pfc_filter_wd_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_pfc_offset_from_vector_static_table_key_t& key, const npl_pfc_offset_from_vector_static_table_key_t& mask, const npl_pfc_offset_from_vector_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.vector;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = mask.vector;
        target_mask.set_bits(9, 2, data_to_add);
        
        if (value.action == NPL_PFC_OFFSET_FROM_VECTOR_STATIC_TABLE_ACTION_UPDATE_MIRROR_COMMANDS) {
            data_to_add = value.payloads.update_mirror_commands.offset.value;
            target_payload.set_bits(4, 1, data_to_add);
            data_to_add = value.payloads.update_mirror_commands.trap;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pfc_offset_from_vector_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_pfc_ssp_slice_map_table_key_t& key, const npl_pfc_ssp_slice_map_table_key_t& mask, const npl_pfc_ssp_slice_map_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_HOST_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(140, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.ssp;
        target_key.set_bits(19, 4, data_to_add);
        data_to_add = mask.ssp;
        target_mask.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_PFC_SSP_SLICE_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pfc_ssp_info.slice;
            target_payload.set_bits(15, 13, data_to_add);
            data_to_add = value.payloads.pfc_ssp_info.mp_id;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pfc_ssp_slice_map_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pin_start_offset_macros_key_t& key, const npl_pin_start_offset_macros_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_PIN_START_OFFSET_MACROS_ACTION_WRITE) {
            data_to_add = value.payloads.select_macros.npe_macro_offset;
            target_payload.set_bits(3, 2, data_to_add);
            data_to_add = value.payloads.select_macros.fi_macro_offset;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pin_start_offset_macros_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pma_loopback_table_key_t& key, const npl_pma_loopback_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 2);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.device_packet_info_ifg;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.device_packet_info_pif;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_PMA_LOOPBACK_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pma_loopback_data.mode;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pma_loopback_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_post_fwd_rtf_next_macro_static_table_key_t& key, const npl_post_fwd_rtf_next_macro_static_table_key_t& mask, const npl_post_fwd_rtf_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(0, 0, 0x1ULL);
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.ip_ver_and_post_fwd_stage.ip_ver;
        target_key.set_bits(14, 14, data_to_add);
        data_to_add = key.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
        target_key.set_bits(13, 11, data_to_add);
        data_to_add = mask.ip_ver_and_post_fwd_stage.ip_ver;
        target_mask.set_bits(14, 14, data_to_add);
        data_to_add = mask.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
        target_mask.set_bits(13, 11, data_to_add);
        data_to_add = key.next_proto_type;
        target_key.set_bits(10, 7, data_to_add);
        data_to_add = mask.next_proto_type;
        target_mask.set_bits(10, 7, data_to_add);
        data_to_add = key.eth_rtf_stage;
        target_key.set_bits(6, 4, data_to_add);
        data_to_add = mask.eth_rtf_stage;
        target_mask.set_bits(6, 4, data_to_add);
        data_to_add = key.fwd_layer_and_rtf_stage.fwd_layer;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = key.fwd_layer_and_rtf_stage.rtf_stage;
        target_key.set_bits(2, 1, data_to_add);
        data_to_add = mask.fwd_layer_and_rtf_stage.fwd_layer;
        target_mask.set_bits(3, 3, data_to_add);
        data_to_add = mask.fwd_layer_and_rtf_stage.rtf_stage;
        target_mask.set_bits(2, 1, data_to_add);
        
        if (value.action == NPL_POST_FWD_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
            data_to_add = value.payloads.set_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.set_macro.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_post_fwd_rtf_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_probe_marker_1_static_table_key_t& key, const npl_probe_marker_1_static_table_key_t& mask, const npl_probe_marker_1_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.probe_marker_1;
        target_key.set_bits(31, 0, data_to_add);
        data_to_add = mask.probe_marker_1;
        target_mask.set_bits(31, 0, data_to_add);
        
        if (value.action == NPL_PROBE_MARKER_1_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.probe_marker_1_match.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_probe_marker_1_static_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(32, 16);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_probe_marker_2_static_table_key_t& key, const npl_probe_marker_2_static_table_key_t& mask, const npl_probe_marker_2_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(40, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.type;
        target_key.set_bits(38, 34, data_to_add);
        data_to_add = mask.type;
        target_mask.set_bits(38, 34, data_to_add);
        data_to_add = key.probe_marker_2;
        target_key.set_bits(33, 2, data_to_add);
        data_to_add = mask.probe_marker_2;
        target_mask.set_bits(33, 2, data_to_add);
        
        if (value.action == NPL_PROBE_MARKER_2_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.probe_marker_2_match.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_probe_marker_2_static_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(40, 16);
        result.mask.set_bits(1, 0, 0x3ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_punt_ethertype_static_table_key_t& key, const npl_punt_ethertype_static_table_key_t& mask, const npl_punt_ethertype_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.punt_nw_encap_type;
        target_key.set_bits(5, 3, data_to_add);
        data_to_add = mask.punt_nw_encap_type;
        target_mask.set_bits(5, 3, data_to_add);
        data_to_add = key.punt_format;
        target_key.set_bits(2, 1, data_to_add);
        data_to_add = mask.punt_format;
        target_mask.set_bits(2, 1, data_to_add);
        
        if (value.action == NPL_PUNT_ETHERTYPE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pd_ene_encap_data_punt_ethertype;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_punt_ethertype_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_punt_rcy_inject_header_ene_encap_table_key_t& key, const npl_punt_rcy_inject_header_ene_encap_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.punt_nw_encap_ptr.ptr;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_PUNT_RCY_INJECT_HEADER_ENE_ENCAP_TABLE_ACTION_FOUND) {
            data_to_add = value.payloads.found.ene_inject_down_payload.ene_inject_down_encap_type;
            target_payload.set_bits(27, 25, data_to_add);
            data_to_add = value.payloads.found.ene_inject_down_payload.ene_inject_phb.tc;
            target_payload.set_bits(24, 22, data_to_add);
            data_to_add = value.payloads.found.ene_inject_down_payload.ene_inject_phb.dp;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.found.ene_inject_down_payload.ene_inject_destination.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_punt_rcy_inject_header_ene_encap_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_punt_select_nw_ene_static_table_key_t& key, const npl_punt_select_nw_ene_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.is_punt_rcy;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = key.punt_nw_encap_type;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_PUNT_SELECT_NW_ENE_STATIC_TABLE_ACTION_TX_PUNT_SET_ENE_MACRO) {
            data_to_add = translate_ene_macro_id(context, value.payloads.tx_punt_set_ene_macro.first_ene_macro.id);
            target_payload.set_bits(31, 24, data_to_add);
            data_to_add = translate_ene_macro_id(context, value.payloads.tx_punt_set_ene_macro.ene_macro_0.id);
            target_payload.set_bits(23, 16, data_to_add);
            data_to_add = translate_ene_macro_id(context, value.payloads.tx_punt_set_ene_macro.ene_macro_1.id);
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = translate_ene_macro_id(context, value.payloads.tx_punt_set_ene_macro.ene_macro_2.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_punt_select_nw_ene_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_punt_tunnel_transport_encap_table_key_t& key, const npl_punt_tunnel_transport_encap_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 128);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x9ULL);
        data_to_add = key.punt_nw_encap_ptr.ptr;
        target_key.set_bits(11, 4, data_to_add);
        
        if (value.action == NPL_PUNT_TUNNEL_TRANSPORT_ENCAP_TABLE_ACTION_IP_GRE) {
            data_to_add = value.payloads.ip_gre.tos;
            target_payload.set_bits(127, 120, data_to_add);
            data_to_add = value.payloads.ip_gre.ip_encap_data.ip.v4.ene_ttl_and_protocol.ttl;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.ip.v4.ene_ttl_and_protocol.protocol;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 104, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.ip.v4.ene_ipv4_sip_dip.sip;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 72, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.ip.v4.ene_ipv4_sip_dip.dip;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 40, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.ip.v6.ene_nh_and_hl.next_header;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 112, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.ip.v6.ene_nh_and_hl.hop_limit;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 104, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.ip.v6.ene_ipv6_sip_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(103, 40, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.upper_layer.vxlan_data.group_policy_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 24, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.upper_layer.vxlan_data.vni;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 0, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.upper_layer.gre_data.flag_res_version;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 24, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.upper_layer.gre_data.proto;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 8, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.upper_layer.udp_data.sport;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 24, data_to_add);
            }
            data_to_add = value.payloads.ip_gre.ip_encap_data.upper_layer.udp_data.dport;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 8, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_punt_tunnel_transport_encap_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_punt_tunnel_transport_extended_encap_table_key_t& key, const npl_punt_tunnel_transport_extended_encap_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x6ULL);
        data_to_add = key.punt_nw_encap_ptr.ptr;
        target_key.set_bits(11, 4, data_to_add);
        
        if (value.action == NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.extended_encap_data.ene_ipv6_dip_msb[1];
            target_payload.set_bits(79, 64, data_to_add);
            data_to_add = value.payloads.extended_encap_data.ene_ipv6_dip_msb[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_punt_tunnel_transport_extended_encap_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_punt_tunnel_transport_extended_encap_table2_key_t& key, const npl_punt_tunnel_transport_extended_encap_table2_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 48);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.punt_nw_encap_ptr.ptr;
        target_key.set_bits(9, 2, data_to_add);
        
        if (value.action == NPL_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE2_ACTION_WRITE) {
            data_to_add = value.payloads.extended_encap_data2.ene_ipv6_dip_lsb;
            target_payload.set_bits(47, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_punt_tunnel_transport_extended_encap_table2_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pwe_label_table_key_t& key, const npl_pwe_label_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(18, 76);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xcULL);
        data_to_add = key.pwe_id;
        target_key.set_bits(17, 4, data_to_add);
        
        if (value.action == NPL_PWE_LABEL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.gre_key;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v6_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v4_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 68, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 65, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 41, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 75, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(74, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 56, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 52, data_to_add);
            }
            data_to_add = translate_ene_macro_id(context, value.payloads.vpn_encap_data.l2vpn_label_encap_data.first_ene_macro.id);
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_l2_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 24, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.enable_pwe_cntr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 23, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.no_fat;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(22, 22, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.cw_fat_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pwe_label_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pwe_to_l3_dest_table_key_t& key, const npl_pwe_to_l3_dest_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(27, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x26ULL);
        data_to_add = key.pwe_l2_dlp;
        target_key.set_bits(26, 7, data_to_add);
        
        if (value.action == NPL_PWE_TO_L3_DEST_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.l3_destination.destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pwe_to_l3_dest_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pwe_vpls_label_table_key_t& key, const npl_pwe_vpls_label_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(38, 76);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xdULL);
        target_key.set_bits(7, 4, 0x6ULL);
        data_to_add = key.l2_relay_id.id;
        target_key.set_bits(37, 24, data_to_add);
        data_to_add = key.lsp_destination;
        target_key.set_bits(23, 8, data_to_add);
        
        if (value.action == NPL_PWE_VPLS_LABEL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.gre_key;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v6_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v4_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 68, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 65, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 41, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 75, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(74, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 56, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 52, data_to_add);
            }
            data_to_add = translate_ene_macro_id(context, value.payloads.vpn_encap_data.l2vpn_label_encap_data.first_ene_macro.id);
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_l2_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 24, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.enable_pwe_cntr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 23, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.no_fat;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(22, 22, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.cw_fat_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pwe_vpls_label_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_pwe_vpls_tunnel_label_table_key_t& key, const npl_pwe_vpls_tunnel_label_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(38, 76);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xdULL);
        target_key.set_bits(7, 4, 0x3ULL);
        data_to_add = key.l2_relay_id.id;
        target_key.set_bits(37, 24, data_to_add);
        data_to_add = key.te_tunnel;
        target_key.set_bits(23, 8, data_to_add);
        
        if (value.action == NPL_PWE_VPLS_TUNNEL_LABEL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.gre_key;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v6_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.v4_label_vld;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 68, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 65, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.udat.label_and_valid.label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 41, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label_exp_bos.bos;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.single_label_encap_data.v6_label_encap.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 75, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(74, 69, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_encap_cntr.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 56, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 52, data_to_add);
            }
            data_to_add = translate_ene_macro_id(context, value.payloads.vpn_encap_data.l2vpn_label_encap_data.first_ene_macro.id);
            if (data_to_add != 0ULL) {
                target_payload.set_bits(51, 44, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.pwe_l2_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 24, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.enable_pwe_cntr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 23, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.no_fat;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(22, 22, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.l2vpn_control_bits.cw_fat_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(21, 20, data_to_add);
            }
            data_to_add = value.payloads.vpn_encap_data.l2vpn_label_encap_data.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_pwe_vpls_tunnel_label_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_reassembly_source_port_map_table_key_t& key, const npl_reassembly_source_port_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 6);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.source_if.ifg;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.source_if.pif;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_REASSEMBLY_SOURCE_PORT_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.reassembly_source_port_map_result.tm_ifc;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_reassembly_source_port_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_recycle_override_table_key_t& key, const npl_recycle_override_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 40);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_npu_input_rcy_code_1_;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.packet_is_rescheduled_recycle;
        target_key.set_bits(4, 4, data_to_add);
        data_to_add = key.rxpp_npu_input_tx_to_rx_rcy_data_3_0_;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_RECYCLE_OVERRIDE_TABLE_ACTION_INIT_RX_DATA) {
            data_to_add = value.payloads.init_rx_data.override_source_port_table;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.init_rx_data.first_header_type;
            target_payload.set_bits(38, 34, data_to_add);
            data_to_add = value.payloads.init_rx_data.first_header_is_layer;
            target_payload.set_bits(33, 33, data_to_add);
            data_to_add = value.payloads.init_rx_data.initial_layer_index;
            target_payload.set_bits(32, 29, data_to_add);
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_recycle_fields.init_data.initial_npp_attributes_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(28, 21, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_recycle_fields.init_data.initial_slice_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 21, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_recycle_fields.initial_mapping_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 17, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_recycle_fields.initial_is_rcy_if;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 15, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_recycle_fields.initial_mac_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(13, 13, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.tag_swap_cmd;
            target_payload.set_bits(12, 11, data_to_add);
            data_to_add = value.payloads.init_rx_data.np_macro_id;
            target_payload.set_bits(10, 6, data_to_add);
            data_to_add = value.payloads.init_rx_data.fi_macro_id;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_recycle_override_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_recycled_inject_up_info_table_key_t& key, const npl_recycled_inject_up_info_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tx_to_rx_rcy_data;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_RECYCLED_INJECT_UP_INFO_TABLE_ACTION_UPDATE_DATA) {
            data_to_add = value.payloads.update_data.ssp;
            target_payload.set_bits(17, 6, data_to_add);
            data_to_add = value.payloads.update_data.phb.tc;
            target_payload.set_bits(5, 3, data_to_add);
            data_to_add = value.payloads.update_data.phb.dp;
            target_payload.set_bits(2, 1, data_to_add);
            data_to_add = value.payloads.update_data.init_data_selector;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_recycled_inject_up_info_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_redirect_destination_table_key_t& key, const npl_redirect_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 2);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.device_packet_info_ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_REDIRECT_DESTINATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.redirect_destination_reg.port_reg;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_redirect_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_redirect_table_key_t& key, const npl_redirect_table_key_t& mask, const npl_redirect_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    result.push_back(ternary_table_generic_entry_t(96, 8));
    bool trap_found = false;
    if (key.traps.ethernet.acl_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x404000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x704400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4040000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400040000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.acl_force_punt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x504000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x704400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4050000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400050000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.vlan_membership == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.acceptable_format == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x200ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_service_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x8000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_termination_on_l3_port == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000010ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x40000000010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x30001010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x2004007ULL);
            target_mask.set_bits(95, 32, 0x800002000000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x800000020000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x800000010000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_sip_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_vni_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf0000200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf00040000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_vsid_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf00000200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.arp == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x40000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.sa_da_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x20000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x2000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.sa_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1ULL);
            target_key.set_bits(31, 0, 0x10000007ULL);
            target_mask.set_bits(95, 32, 0x1ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.da_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xb0000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0xf0000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.sa_multicast == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x40000000ULL);
            target_mask.set_bits(31, 0, 0x201fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x40000000ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x42000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x42000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x4000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dhcpv4_server == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x8000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dhcpv4_client == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x4000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dhcpv6_server == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x2000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dhcpv6_client == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x1000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.ingress_stp_block == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x102000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1400000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x2000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.ptp_over_eth == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x20000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.isis_over_l2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x200000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp0 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x40000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp1 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x10000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x8000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp4 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x4000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp5 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x2000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp6 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x1000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp7 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x800000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.lacp == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x80000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.cisco_protocols == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.macsec == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x10000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.unknown_l3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x1f00000000000010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1f00000002000000ULL);
            target_mask.set_bits(31, 0, 0x501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0x2004007ULL);
            target_mask.set_bits(95, 32, 0x1f00000002000000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x30000ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x1f00000000030000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.test_oam_ac_mep == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1500000000100010ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1f00000000140010ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1500000000000800ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x1f00000010000800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.test_oam_ac_mip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1503000002240010ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1fff000002240010ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1505000002240010ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1fff000002240010ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.test_oam_cfm_link_mdl0 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1500000000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1f0000e000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.system_mymac == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x7000010ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0xf000010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x70002000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0xf0002000000ULL);
            target_mask.set_bits(31, 0, 0x501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x70002000000ULL);
            target_key.set_bits(31, 0, 0x2004007ULL);
            target_mask.set_bits(95, 32, 0xf0002000000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x70000030000ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0xf0000030000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.unknown_bc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x88000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x88010020000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.unknown_mc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4040000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x4048010020000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.unknown_uc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x4028010020000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.learn_punt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.bcast_pkt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400ULL);
            target_key.set_bits(31, 0, 0x80000006ULL);
            target_mask.set_bits(95, 32, 0x1400ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0x80000006ULL);
            target_mask.set_bits(95, 32, 0x1000ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x80000000ULL);
            target_mask.set_bits(31, 0, 0x501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000ULL);
            target_key.set_bits(31, 0, 0x40007ULL);
            target_mask.set_bits(95, 32, 0x80000000ULL);
            target_mask.set_bits(31, 0, 0x4501fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.pfc_sample == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.hop_by_hop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0xff00000000200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2_dlp_not_found == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf000080000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000ULL);
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0xf020000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.same_interface == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800400100010000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0xc40400100010000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800400100010000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0xc00400100011000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8200000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xc600000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x3080000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x3081040000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dspa_mc_trim == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000040000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x2000040000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x2000020000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.egress_stp_block == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x8000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.split_horizon == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000010000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf000000000010000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x10ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000010ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x81040010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000400000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf000000000400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x10000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.incompatible_eve_cmd == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.padding_residue_in_second_line == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.pfc_direct_sample == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.svi_egress_dhcp == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1010000ULL);
            target_key.set_bits(31, 0, 0x20000008ULL);
            target_mask.set_bits(95, 32, 0xf0f0000ULL);
            target_mask.set_bits(31, 0, 0x2000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_pwe_l3_dest == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x1000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.mc_forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4004000100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4000100010000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x41000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3043000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.uc_forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10008101ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10020000ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10028100ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10008011ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10020000ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10028010ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3803080008000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.checksum == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2010000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x2010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002005000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000010000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x2044070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000004000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x2044000014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.header_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8010000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x8010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002006000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000010000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x8044070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000004000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x8044000014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.unknown_protocol == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000100000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x1ff00000100000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.options_exist == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x30000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x30000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x10000007ULL);
            target_mask.set_bits(95, 32, 0x3002000000000ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10201ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf0201ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.non_comp_mc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000001ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x10020001ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xff00000000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xff00000010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100100000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4000000100100000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100100000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x100110000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.mc_forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2080c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x2080c00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x80c40000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x83000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3083000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.uc_forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x12000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3013040008000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.hop_by_hop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000002000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002000002000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.header_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2002000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002006000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80010000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4480070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000004000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4480000014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.illegal_sip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.illegal_dip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.zero_payload == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000ULL);
            target_key.set_bits(31, 0, 0x1000007ULL);
            target_mask.set_bits(95, 32, 0x3002000002000ULL);
            target_mask.set_bits(31, 0, 0x100001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.next_header_check == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2001000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002005000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20010000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4420070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000004000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4420000014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.non_comp_mc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2002000c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x2002000c00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x2000000c40000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.unknown_protocol_after_bos == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x801000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x80f000ULL);
            target_mask.set_bits(31, 0, 0x10001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0x110000cULL);
            target_mask.set_bits(95, 32, 0xf008ULL);
            target_mask.set_bits(31, 0, 0x110001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x60000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x600c0000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.ttl_is_zero == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0xff00000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_ttl == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_raw == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_ipv4 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_ipv6 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.unknown_bfd_g_ach_channel_type == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_ra == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.mpls_tp_over_pwe == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.unknown_g_ach == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.mpls_tp_over_lsp == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400400ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400400ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300400ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300400ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400400ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500400ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.oam_alert_label == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400200ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400200ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300200ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300200ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400200ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500200ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.extension_label == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400100ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400100ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300100ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300100ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400100ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500100ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.router_alert_label == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400800ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300800ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400800ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.unexpected_reserved_label == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400f00ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300f00ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500f00ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x2000000cULL);
            target_mask.set_bits(31, 0, 0x2000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.ilm_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf00000020000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.ipv4_over_ipv6_explicit_null == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xe0000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0xe0000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.invalid_ttl == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0xff00000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.te_midpopint_ldp_labels_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x30000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0xf4000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x400008000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.asbr_label_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x400004000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.ilm_vrf_label_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf00000020000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.pwe_pwach == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2001008ULL);
            target_key.set_bits(31, 0, 0x18000cULL);
            target_mask.set_bits(95, 32, 0x200f008ULL);
            target_mask.set_bits(31, 0, 0x18001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.vpn_ttl_one == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1048ULL);
            target_key.set_bits(31, 0, 0x10000cULL);
            target_mask.set_bits(95, 32, 0xf048ULL);
            target_mask.set_bits(31, 0, 0x10001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.missing_fwd_label_after_pop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_unicast_rpf == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000000000ULL);
            target_key.set_bits(31, 0, 0x1000300aULL);
            target_mask.set_bits(95, 32, 0x1000000000011000ULL);
            target_mask.set_bits(31, 0, 0x1000b01fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x1000300aULL);
            target_mask.set_bits(95, 32, 0x1000000000001000ULL);
            target_mask.set_bits(31, 0, 0x1000b01fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40400000ULL);
            target_key.set_bits(31, 0, 0x1000000aULL);
            target_mask.set_bits(95, 32, 0xf4401000ULL);
            target_mask.set_bits(31, 0, 0x1000801fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40400000ULL);
            target_key.set_bits(31, 0, 0x1000000aULL);
            target_mask.set_bits(95, 32, 0xf2401000ULL);
            target_mask.set_bits(31, 0, 0x1000801fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000400000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x20f000000401000ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000400000ULL);
            target_key.set_bits(31, 0, 0x800aULL);
            target_mask.set_bits(95, 32, 0x20f000000401000ULL);
            target_mask.set_bits(31, 0, 0x801fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000400000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x10f000000401000ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000400000ULL);
            target_key.set_bits(31, 0, 0x800aULL);
            target_mask.set_bits(95, 32, 0x10f000000401000ULL);
            target_mask.set_bits(31, 0, 0x801fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x8000000001000ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000000ULL);
            target_key.set_bits(31, 0, 0x800aULL);
            target_mask.set_bits(95, 32, 0x8000000001000ULL);
            target_mask.set_bits(31, 0, 0x801fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1007000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x100f000000011800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x7000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x100f000000001800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_multicast_rpf == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800001000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x80000f000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000ULL);
            target_key.set_bits(31, 0, 0x8807ULL);
            target_mask.set_bits(95, 32, 0x20f00001ULL);
            target_mask.set_bits(31, 0, 0x881fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_punt_dc_pass == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000001000ULL);
            target_key.set_bits(31, 0, 0x8400aULL);
            target_mask.set_bits(95, 32, 0xe00001001004ULL);
            target_mask.set_bits(31, 0, 0x148401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xe00000001004ULL);
            target_mask.set_bits(31, 0, 0x140401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_snoop_dc_pass == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000001004ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xe00000001004ULL);
            target_mask.set_bits(31, 0, 0x140001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800001001000ULL);
            target_key.set_bits(31, 0, 0x400aULL);
            target_mask.set_bits(95, 32, 0xe00001001000ULL);
            target_mask.set_bits(31, 0, 0x140401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000001000ULL);
            target_key.set_bits(31, 0, 0x400aULL);
            target_mask.set_bits(95, 32, 0xe00000001000ULL);
            target_mask.set_bits(31, 0, 0x148401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_snoop_rpf_fail == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20200080ULL);
            target_key.set_bits(31, 0, 0x8807ULL);
            target_mask.set_bits(95, 32, 0x20f00081ULL);
            target_mask.set_bits(31, 0, 0x881fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1004ULL);
            target_key.set_bits(31, 0, 0x8400aULL);
            target_mask.set_bits(95, 32, 0x1001004ULL);
            target_mask.set_bits(31, 0, 0x8401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1004ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x800001004ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_punt_rpf_fail == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200080ULL);
            target_key.set_bits(31, 0, 0x8807ULL);
            target_mask.set_bits(95, 32, 0x20f00081ULL);
            target_mask.set_bits(31, 0, 0x881fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0x8400aULL);
            target_mask.set_bits(95, 32, 0x1001004ULL);
            target_mask.set_bits(31, 0, 0x8401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x800001004ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_snoop_lookup_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800001004ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x800001004ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_multicast_not_found == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x800001004ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_s_g_punt_member == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200040ULL);
            target_key.set_bits(31, 0, 0x8007ULL);
            target_mask.set_bits(95, 32, 0xf00040ULL);
            target_mask.set_bits(31, 0, 0x801fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_g_punt_member == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xc01001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xc01001000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x401001000ULL);
            target_key.set_bits(31, 0, 0x400aULL);
            target_mask.set_bits(95, 32, 0x401001000ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xc00001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xc00001000ULL);
            target_mask.set_bits(31, 0, 0x8001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400001000ULL);
            target_key.set_bits(31, 0, 0x400aULL);
            target_mask.set_bits(95, 32, 0x400001000ULL);
            target_mask.set_bits(31, 0, 0x8401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xc00001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xc00001000ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_egress_punt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000001000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x80000000001000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.isis_over_l3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x80000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.isis_drain == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x100000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_hbm_access_dip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0x1207ULL);
            target_mask.set_bits(95, 32, 0xf0000ULL);
            target_mask.set_bits(31, 0, 0x121fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0x1107ULL);
            target_mask.set_bits(95, 32, 0xf0000ULL);
            target_mask.set_bits(31, 0, 0x111fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_hbm_access_sip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8010000ULL);
            target_key.set_bits(31, 0, 0x407ULL);
            target_mask.set_bits(95, 32, 0x80f0000ULL);
            target_mask.set_bits(31, 0, 0x41fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0xf00020000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x87ULL);
            target_mask.set_bits(31, 0, 0x9fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x21000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8209fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.local_subnet == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10400ULL);
            target_key.set_bits(31, 0, 0x207ULL);
            target_mask.set_bits(95, 32, 0xf0700ULL);
            target_mask.set_bits(31, 0, 0x21fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.icmp_redirect == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000060000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x8f00000070000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000060000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x8f00000070000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_lp_over_lag_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf00010000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ingress_monitor == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000100000ULL);
            target_key.set_bits(31, 0, 0x410005ULL);
            target_mask.set_bits(95, 32, 0xf00000100000ULL);
            target_mask.set_bits(31, 0, 0x41001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x400000ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0x400007ULL);
            target_mask.set_bits(95, 32, 0x2000000ULL);
            target_mask.set_bits(31, 0, 0x40401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xc007ULL);
            target_mask.set_bits(31, 0, 0xc01fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.egress_monitor == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10002ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0xf0002ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x704400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x18000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf8000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x500000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x704400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x50000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x50000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x14000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf4000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt1 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt4 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt5 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt6 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt7 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.glean_adj == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xa100002000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf100002000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x105a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80010fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.drop_adj == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xa200002000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf200002000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x205a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80020fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.drop_adj_non_inject == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.null_adj == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xa400002000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf400002000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x405a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80040fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.user_trap1 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x805a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80080fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.user_trap2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1005a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80100fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_default_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x9000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_incomplete0 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x11000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_incomplete2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x5000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.bfd_micro_ip_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000110ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10008111ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10020110ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10028110ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x12000008000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3013040008000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000008000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3803080008000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_vni_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf00020000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_hbm_access_og_sip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x300000002000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf00000002000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000020000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf00000120000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_hbm_access_og_dip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100e000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf00e000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_l3_dlp_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0xf000100ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x10000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x1000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x10000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.l3_dlp_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000080ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0xf000080ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000ULL);
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x800000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.split_horizon == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000001ULL);
            target_key.set_bits(31, 0, 0x10000007ULL);
            target_mask.set_bits(95, 32, 0xf000001ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.mc_same_interface == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x40400100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x400100001000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_vpn_label_found == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x80044000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x81000800ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x200081040800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x81000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x100081040800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ttl_or_hop_limit_is_one == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x410010ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xff0c00804f0010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000410000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xff001c00804f0010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x18ff800f0010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x8ff804f0000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000010000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xcff800f0000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100010000000ULL);
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x101010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.tx_mtu_failure == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.tx_frr_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000010ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20000000400010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000400010ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x10000000400010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_unknown_punt_reason == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x110010000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_mep_mapping_failed == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x80000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_mp_type_mismatch == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x40000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_meg_level_mismatch == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x20000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_bad_md_name_format == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000ULL);
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x40000800000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_unicast_da_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x1000010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x2001000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x40010000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x140000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0x10000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0x2000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x40010000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x140000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_multicast_da_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000000ULL);
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x40001000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000000ULL);
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x60000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000000ULL);
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x1040000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000000ULL);
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x40001000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000000ULL);
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x60000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000000ULL);
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x1040000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x801000000ULL);
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x801100000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x801000000ULL);
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x100801000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x801000000ULL);
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x1000000801000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x801000000ULL);
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x20801000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_wrong_meg_id_format == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800001000ULL);
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x800001000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_meg_id_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x10000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x100000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x100000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x1001000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000010000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x3000000010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1010000000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x1010100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000010010000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x2000010110000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_ccm_period_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000ULL);
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x810000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_ccm_tlv_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000ULL);
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0x20000800000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_lmm_tlv_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1020001000000000ULL);
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x1028001000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2010000000000000ULL);
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0x3010000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1020001000000000ULL);
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x1028001000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_not_supported_oam_opcode == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x14ULL);
            target_mask.set_bits(95, 32, 0xf00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_transport_not_supported == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x3000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_session_lookup_failed == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x8000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_incorrect_ttl == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x1000001000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2000000010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x202000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x3000000000ULL);
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x100003000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_invalid_protocol == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x20000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x100000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_invalid_udp_port == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x8000080000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x4000020000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x10001000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2010040000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2001000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4000080000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x2000020000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x8000010000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x1010040000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x1001000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_incorrect_version == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_incorrect_address == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2000000100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2000000040000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2100000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2002000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x10000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x1000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x100000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x2000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_mismatch_discr == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x30000000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x70000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x30002000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x30100000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_state_flag_change == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0xf00000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_session_received == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0xf000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.pfc_lookup_failed == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x1cULL);
            target_mask.set_bits(95, 32, 0x8000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.pfc_drop_invalid_rx == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1001000000000000ULL);
            target_key.set_bits(31, 0, 0x1dULL);
            target_mask.set_bits(95, 32, 0x1001000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_HOST_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x1dULL);
            target_mask.set_bits(95, 32, 0x1000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.app.sgacl_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x101100000000000ULL);
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0xf01100000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.app.sgacl_log == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x102000000000000ULL);
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0xf02000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.app.ip_inactivity == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.svl.control_protocol == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.svl.control_ipc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x800000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.svl.svl_mc_prune == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x88000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x30000088000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000008000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x8000008030000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xa00000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xa00000300000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x880000000ULL);
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x3000000880000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000008000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x10006008000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x88000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x300088000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000800000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x6080000000800000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8800000000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x3008800000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000008000000ULL);
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x3008000008000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap0 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x800000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap1 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x400000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x200000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap4 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x800000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap5 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap6 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap7 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x100000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap8 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x80000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap9 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x40000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap10 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x20000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap11 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x10000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.l3_lpm_lpts == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x10000000c0f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000010000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x1000000000011000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10700010000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x70f14810000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10700010000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x70f14810000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.ipv4_non_routable_mc_routing == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x80080100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000040100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x2080040100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4080100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000040100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x2004040100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xe0000000001002ULL);
            target_key.set_bits(31, 0, 0x10000cULL);
            target_mask.set_bits(95, 32, 0xffffff0000f022ULL);
            target_mask.set_bits(31, 0, 0x10001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xe0000000801000ULL);
            target_key.set_bits(31, 0, 0x10000cULL);
            target_mask.set_bits(95, 32, 0xffffff0080f029ULL);
            target_mask.set_bits(31, 0, 0x10001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.ipv4_non_routable_mc_bridging == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80810000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x809f0000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000040810000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x20000409f0000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.ipv6_non_routable_mc_routing == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x700000410000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1f00000c10000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1010c00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000c01000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x10010c01000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1080c00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000c01000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x10080c01000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.ipv6_non_routable_mc_bridging == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000800400000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1000c00400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000801400000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x10000c01400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.trap_conditions.non_inject_up == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(31, 0, 0x200001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x2ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x2000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x200000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x4000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(31, 0, 0x20001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x200000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x20ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x8000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x2000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0x2000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x2000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x2000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x200000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x20000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x2000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x100000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x10000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x40000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x200000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 2) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x11ULL);
            target_mask.set_bits(95, 32, 0x200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.trap_conditions.skip_p2p == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x1000006ULL);
            target_mask.set_bits(31, 0, 0x100001fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x10000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_REDIRECT_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.redirect_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (!trap_found) {
        result.clear();
    }
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_redirect_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_resolution_set_next_macro_table_key_t& key, const npl_resolution_set_next_macro_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.is_inject_up.val;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.is_pfc_enable;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_RESOLUTION_SET_NEXT_MACRO_TABLE_ACTION_RESOLUTION_SET_NEXT_MACRO) {
            data_to_add = value.payloads.resolution_set_next_macro.next_is_fwd_done;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.resolution_set_next_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.resolution_set_next_macro.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_resolution_set_next_macro_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rmep_last_time_table_key_t& key, const npl_rmep_last_time_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rmep_key.id;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_RMEP_LAST_TIME_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rmep_result_rmep_last_time_result;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rmep_last_time_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rmep_state_table_key_t& key, const npl_rmep_state_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rmep_key.id;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_RMEP_STATE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rmep_result_rmep_state_table_result.rmep_data;
            target_payload.set_bits(15, 5, data_to_add);
            data_to_add = value.payloads.rmep_result_rmep_state_table_result.rmep_profile;
            target_payload.set_bits(4, 1, data_to_add);
            data_to_add = value.payloads.rmep_result_rmep_state_table_result.rmep_valid;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rmep_state_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rpf_fec_access_map_table_key_t& key, const npl_rpf_fec_access_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.prefix;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_RPF_FEC_ACCESS_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lpm_prefix_fec_access_map.access_fec_table;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rpf_fec_access_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rpf_fec_table_key_t& key, const npl_rpf_fec_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 21);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fec;
        target_key.set_bits(11, 0, data_to_add);
        
        if (value.action == NPL_RPF_FEC_TABLE_ACTION_FOUND) {
            data_to_add = value.payloads.found.dst.val;
            target_payload.set_bits(20, 1, data_to_add);
            data_to_add = value.payloads.found.dummy_bit.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rpf_fec_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t& key, const npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lp_rtf_conf_set.val;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = key.rtf_step.val;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_RTF_CONF_SET_TO_OG_PCL_COMPRESS_BITS_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.per_rtf_step_og_pcl_compress_bits.ipv4_compress_bits.src_compress;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.per_rtf_step_og_pcl_compress_bits.ipv4_compress_bits.dest_compress;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.per_rtf_step_og_pcl_compress_bits.ipv6_compress_bits.src_compress;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.per_rtf_step_og_pcl_compress_bits.ipv6_compress_bits.dest_compress;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t& key, const npl_rtf_conf_set_to_og_pcl_ids_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lp_rtf_conf_set.val;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = key.rtf_step.val;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_RTF_CONF_SET_TO_OG_PCL_IDS_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.per_rtf_step_og_pcl_ids.ipv4_og_pcl_ids.src_pcl_id.val;
            target_payload.set_bits(31, 24, data_to_add);
            data_to_add = value.payloads.per_rtf_step_og_pcl_ids.ipv4_og_pcl_ids.dest_pcl_id.val;
            target_payload.set_bits(23, 16, data_to_add);
            data_to_add = value.payloads.per_rtf_step_og_pcl_ids.ipv6_og_pcl_ids.src_pcl_id.val;
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = value.payloads.per_rtf_step_og_pcl_ids.ipv6_og_pcl_ids.dest_pcl_id.val;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rtf_conf_set_to_og_pcl_ids_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t& key, const npl_rtf_conf_set_to_post_fwd_stage_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lp_rtf_conf_set.val;
        target_key.set_bits(8, 1, data_to_add);
        data_to_add = key.ip_version;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_RTF_CONF_SET_TO_POST_FWD_STAGE_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.post_fwd_params.use_metedata_table_per_packet_format.use_metadata_table_for_ip_packet.val;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.post_fwd_params.use_metedata_table_per_packet_format.use_metadata_table_for_non_ip_packet.val;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.post_fwd_params.ip_ver_and_post_fwd_stage.ip_ver;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.post_fwd_params.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rtf_conf_set_to_post_fwd_stage_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_rtf_next_macro_static_table_key_t& key, const npl_rtf_next_macro_static_table_key_t& mask, const npl_rtf_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(24, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.curr_and_next_prot_type.current_proto_type;
        target_key.set_bits(18, 15, data_to_add);
        data_to_add = key.curr_and_next_prot_type.next_proto_type;
        target_key.set_bits(14, 11, data_to_add);
        data_to_add = mask.curr_and_next_prot_type.current_proto_type;
        target_mask.set_bits(18, 15, data_to_add);
        data_to_add = mask.curr_and_next_prot_type.next_proto_type;
        target_mask.set_bits(14, 11, data_to_add);
        data_to_add = key.pd_tunnel_ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_key.set_bits(10, 9, data_to_add);
        data_to_add = key.pd_tunnel_ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_key.set_bits(8, 7, data_to_add);
        data_to_add = mask.pd_tunnel_ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
        target_mask.set_bits(10, 9, data_to_add);
        data_to_add = mask.pd_tunnel_ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
        target_mask.set_bits(8, 7, data_to_add);
        data_to_add = key.next_rtf_stage;
        target_key.set_bits(6, 4, data_to_add);
        data_to_add = mask.next_rtf_stage;
        target_mask.set_bits(6, 4, data_to_add);
        data_to_add = key.rtf_indications.acl_outer;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = key.rtf_indications.fwd_layer_and_rtf_stage_compressed_fields.fwd_layer;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = key.rtf_indications.fwd_layer_and_rtf_stage_compressed_fields.rtf_stage;
        target_key.set_bits(1, 0, data_to_add);
        data_to_add = mask.rtf_indications.acl_outer;
        target_mask.set_bits(3, 3, data_to_add);
        data_to_add = mask.rtf_indications.fwd_layer_and_rtf_stage_compressed_fields.fwd_layer;
        target_mask.set_bits(2, 2, data_to_add);
        data_to_add = mask.rtf_indications.fwd_layer_and_rtf_stage_compressed_fields.rtf_stage;
        target_mask.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_RTF_NEXT_MACRO_STATIC_TABLE_ACTION_SET_MACRO) {
            data_to_add = value.payloads.set_macro.jump_to_fwd;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.set_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.set_macro.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rtf_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_counters_bank_id_map_config_key_t& key, const npl_rx_counters_bank_id_map_config_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 7);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.npu_bank_id;
        target_key.set_bits(6, 1, data_to_add);
        data_to_add = key.ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_RX_COUNTERS_BANK_ID_MAP_CONFIG_ACTION_WRITE) {
            data_to_add = value.payloads.counter_bank_id;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_counters_bank_id_map_config_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_counters_block_config_table_key_t& key, const npl_rx_counters_block_config_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 3);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.counter_bank_id;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_RX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG) {
            data_to_add = value.payloads.config.inc_addr_for_set;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.config.bank_set_type;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_counters_block_config_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_fwd_error_handling_counter_table_key_t& key, const npl_rx_fwd_error_handling_counter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.pd_source_if_pif;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_RX_FWD_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_fwd_error_handling_counter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_fwd_error_handling_destination_table_key_t& key, const npl_rx_fwd_error_handling_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_fwd_error_handling_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_ip_p_counter_offset_static_table_key_t& key, const npl_rx_ip_p_counter_offset_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ip_ver_mc.ip_version;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = key.ip_ver_mc.is_mc.val;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.per_protocol_count;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_RX_IP_P_COUNTER_OFFSET_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.macro_counters_update_counter_0_offset;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_ip_p_counter_offset_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_map_npp_to_ssp_table_key_t& key, const npl_rx_map_npp_to_ssp_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.npp_attributes_index;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_RX_MAP_NPP_TO_SSP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.local_npp_to_ssp_result.split_voq.split_voq_enabled;
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.local_npp_to_ssp_result.split_voq.source_group_offset;
            target_payload.set_bits(25, 16, data_to_add);
            data_to_add = value.payloads.local_npp_to_ssp_result.ssp.slice_id;
            target_payload.set_bits(14, 12, data_to_add);
            data_to_add = value.payloads.local_npp_to_ssp_result.ssp.ssp_12;
            target_payload.set_bits(11, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_map_npp_to_ssp_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_bank_offset_map_key_t& key, const npl_rx_meter_bank_offset_map_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 7);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.npu_bank_id;
        target_key.set_bits(6, 1, data_to_add);
        data_to_add = key.ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_BANK_OFFSET_MAP_ACTION_WRITE) {
            data_to_add = value.payloads.counter_bank_id;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_bank_offset_map_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_block_meter_attribute_table_key_t& key, const npl_rx_meter_block_meter_attribute_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(15, 6);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bank_index.value;
        target_key.set_bits(14, 11, data_to_add);
        data_to_add = key.meter_index.value;
        target_key.set_bits(10, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_BLOCK_METER_ATTRIBUTE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_block_meter_attribute_result.meter_decision_mapping_profile.value;
            target_payload.set_bits(5, 4, data_to_add);
            data_to_add = value.payloads.rx_meter_block_meter_attribute_result.profile.value;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_block_meter_attribute_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_block_meter_profile_table_key_t& key, const npl_rx_meter_block_meter_profile_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 39);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bank_index.value;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = key.meter_profile_index.value;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_BLOCK_METER_PROFILE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_block_meter_profile_result.ebs.value;
            target_payload.set_bits(38, 21, data_to_add);
            data_to_add = value.payloads.rx_meter_block_meter_profile_result.cbs.value;
            target_payload.set_bits(20, 3, data_to_add);
            data_to_add = value.payloads.rx_meter_block_meter_profile_result.color_aware_mode.value;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.rx_meter_block_meter_profile_result.meter_mode.value;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.rx_meter_block_meter_profile_result.meter_count_mode.value;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_block_meter_profile_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_block_meter_shaper_configuration_table_key_t& key, const npl_rx_meter_block_meter_shaper_configuration_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(15, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bank_index.value;
        target_key.set_bits(14, 11, data_to_add);
        data_to_add = key.meter_index.value;
        target_key.set_bits(10, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_BLOCK_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_block_meter_shaper_configuration_result.eir_weight.weight_factor;
            target_payload.set_bits(19, 15, data_to_add);
            data_to_add = value.payloads.rx_meter_block_meter_shaper_configuration_result.eir_weight.weight;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.rx_meter_block_meter_shaper_configuration_result.cir_weight.weight_factor;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.rx_meter_block_meter_shaper_configuration_result.cir_weight.weight;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_block_meter_shaper_configuration_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_distributed_meter_profile_table_key_t& key, const npl_rx_meter_distributed_meter_profile_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 74);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bank_index.value;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = key.meter_profile_index.value;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_DISTRIBUTED_METER_PROFILE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_distributed_meter_profile_result.is_distributed_meter;
            target_payload.set_bits(73, 73, data_to_add);
            data_to_add = value.payloads.rx_meter_distributed_meter_profile_result.excess_token_release_thr;
            target_payload.set_bits(72, 55, data_to_add);
            data_to_add = value.payloads.rx_meter_distributed_meter_profile_result.excess_token_grant_thr;
            target_payload.set_bits(54, 37, data_to_add);
            data_to_add = value.payloads.rx_meter_distributed_meter_profile_result.committed_token_release_thr;
            target_payload.set_bits(36, 19, data_to_add);
            data_to_add = value.payloads.rx_meter_distributed_meter_profile_result.committed_token_grant_thr;
            target_payload.set_bits(18, 1, data_to_add);
            data_to_add = value.payloads.rx_meter_distributed_meter_profile_result.is_cascade;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_distributed_meter_profile_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_exact_meter_decision_mapping_table_key_t& key, const npl_rx_meter_exact_meter_decision_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 7);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ifg.value;
        target_key.set_bits(6, 6, data_to_add);
        data_to_add = key.meter_action_profile_index.value;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = key.rate_limiter_result_color.value;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = key.meter_result_color.value;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_EXACT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_exact_meter_decision_mapping_result.congestion_experienced;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.rx_meter_exact_meter_decision_mapping_result.rx_counter_color.value;
            target_payload.set_bits(5, 4, data_to_add);
            data_to_add = value.payloads.rx_meter_exact_meter_decision_mapping_result.outgoing_color.value;
            target_payload.set_bits(3, 2, data_to_add);
            data_to_add = value.payloads.rx_meter_exact_meter_decision_mapping_result.cgm_rx_dp;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.rx_meter_exact_meter_decision_mapping_result.meter_drop;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_exact_meter_decision_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_meter_profile_table_key_t& key, const npl_rx_meter_meter_profile_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 39);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bank_index.value;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = key.meter_profile_index.value;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_METER_PROFILE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_meter_profile_result.ebs.value;
            target_payload.set_bits(38, 21, data_to_add);
            data_to_add = value.payloads.rx_meter_meter_profile_result.cbs.value;
            target_payload.set_bits(20, 3, data_to_add);
            data_to_add = value.payloads.rx_meter_meter_profile_result.color_aware_mode.value;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.rx_meter_meter_profile_result.meter_mode.value;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.rx_meter_meter_profile_result.meter_count_mode.value;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_meter_profile_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_meter_shaper_configuration_table_key_t& key, const npl_rx_meter_meter_shaper_configuration_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bank_index.value;
        target_key.set_bits(12, 11, data_to_add);
        data_to_add = key.meter_index.value;
        target_key.set_bits(10, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_METER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_meter_shaper_configuration_result.eir_weight.weight_factor;
            target_payload.set_bits(19, 15, data_to_add);
            data_to_add = value.payloads.rx_meter_meter_shaper_configuration_result.eir_weight.weight;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.rx_meter_meter_shaper_configuration_result.cir_weight.weight_factor;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.rx_meter_meter_shaper_configuration_result.cir_weight.weight;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_meter_shaper_configuration_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_meters_attribute_table_key_t& key, const npl_rx_meter_meters_attribute_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 6);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.bank_index.value;
        target_key.set_bits(12, 11, data_to_add);
        data_to_add = key.meter_index.value;
        target_key.set_bits(10, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_METERS_ATTRIBUTE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_meters_attribute_result.meter_decision_mapping_profile.value;
            target_payload.set_bits(5, 4, data_to_add);
            data_to_add = value.payloads.rx_meter_meters_attribute_result.profile.value;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_meters_attribute_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_rate_limiter_shaper_configuration_table_key_t& key, const npl_rx_meter_rate_limiter_shaper_configuration_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 10);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.table_index.value;
        target_key.set_bits(11, 8, data_to_add);
        data_to_add = key.table_entry_index.value;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_RATE_LIMITER_SHAPER_CONFIGURATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_rate_limiter_shaper_configuration_result.cir_weight.weight_factor;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.rx_meter_rate_limiter_shaper_configuration_result.cir_weight.weight;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_rate_limiter_shaper_configuration_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_meter_stat_meter_decision_mapping_table_key_t& key, const npl_rx_meter_stat_meter_decision_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 7);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.meter_bank_index.value;
        target_key.set_bits(7, 6, data_to_add);
        data_to_add = key.meter_action_profile_index.value;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = key.exact_meter_to_stat_meter_color.value;
        target_key.set_bits(3, 2, data_to_add);
        data_to_add = key.meter_result_color.value;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_RX_METER_STAT_METER_DECISION_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_meter_stat_meter_decision_mapping_result.congestion_experienced;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.rx_meter_stat_meter_decision_mapping_result.rx_counter_color.value;
            target_payload.set_bits(5, 4, data_to_add);
            data_to_add = value.payloads.rx_meter_stat_meter_decision_mapping_result.outgoing_color.value;
            target_payload.set_bits(3, 2, data_to_add);
            data_to_add = value.payloads.rx_meter_stat_meter_decision_mapping_result.cgm_rx_dp;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.rx_meter_stat_meter_decision_mapping_result.meter_drop;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_meter_stat_meter_decision_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_npu_to_tm_dest_table_key_t& key, const npl_rx_npu_to_tm_dest_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 6);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_pd_fwd_destination_19_14_;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_RX_NPU_TO_TM_DEST_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.pd_rx_tm_destination_prefix;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_npu_to_tm_dest_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_obm_code_table_key_t& key, const npl_rx_obm_code_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 44);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.tx_to_rx_rcy_data.unscheduled_recycle_code.recycle_pkt;
        target_key.set_bits(7, 7, data_to_add);
        data_to_add = key.tx_to_rx_rcy_data.unscheduled_recycle_code.unscheduled_recycle_code_lsb;
        target_key.set_bits(6, 6, data_to_add);
        data_to_add = key.tx_to_rx_rcy_data.unscheduled_recycle_data;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_RX_OBM_CODE_TABLE_ACTION_RX_OBM_ACTION) {
            data_to_add = value.payloads.rx_obm_action.phb.tc;
            target_payload.set_bits(40, 38, data_to_add);
            data_to_add = value.payloads.rx_obm_action.phb.dp;
            target_payload.set_bits(37, 36, data_to_add);
            data_to_add = value.payloads.rx_obm_action.destination.val;
            target_payload.set_bits(35, 16, data_to_add);
            data_to_add = value.payloads.rx_obm_action.punt_encap_data_lsb.punt_nw_encap_ptr.ptr;
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = value.payloads.rx_obm_action.punt_encap_data_lsb.punt_nw_encap_type;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.rx_obm_action.punt_encap_data_lsb.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 3, data_to_add);
            }
            data_to_add = value.payloads.rx_obm_action.punt_encap_data_lsb.punt_controls.punt_format;
            target_payload.set_bits(2, 1, data_to_add);
            data_to_add = value.payloads.rx_obm_action.punt_encap_data_lsb.punt_controls.mirror_local_encap_format;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_obm_code_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_obm_punt_src_and_code_table_key_t& key, const npl_rx_obm_punt_src_and_code_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(18, 65);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        data_to_add = key.is_dma;
        target_key.set_bits(17, 14, data_to_add);
        data_to_add = key.punt_src_and_code;
        target_key.set_bits(13, 2, data_to_add);
        
        if (value.action == NPL_RX_OBM_PUNT_SRC_AND_CODE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.phb.tc;
            target_payload.set_bits(64, 62, data_to_add);
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.phb.dp;
            target_payload.set_bits(61, 60, data_to_add);
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.meter_ptr.update_or_read;
            target_payload.set_bits(59, 59, data_to_add);
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.meter_ptr.cb_id;
            target_payload.set_bits(58, 53, data_to_add);
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.meter_ptr.cb_set_base;
            target_payload.set_bits(52, 40, data_to_add);
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.cntr_ptr.update_or_read;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.cntr_ptr.cb_id;
            target_payload.set_bits(38, 33, data_to_add);
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.cntr_ptr.cb_set_base;
            target_payload.set_bits(32, 20, data_to_add);
            data_to_add = value.payloads.rx_obm_punt_src_and_code_data.punt_bvn_dest.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_obm_punt_src_and_code_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_redirect_code_ext_table_key_t& key, const npl_rx_redirect_code_ext_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.redirect_code;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_RX_REDIRECT_CODE_EXT_TABLE_ACTION_RX_REDIRECT_ACTION_EXT) {
            data_to_add = value.payloads.rx_redirect_action_ext.meter_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.rx_redirect_action_ext.meter_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.rx_redirect_action_ext.meter_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_redirect_code_ext_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_redirect_code_table_key_t& key, const npl_rx_redirect_code_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 96);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.redirect_code;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_RX_REDIRECT_CODE_TABLE_ACTION_RX_REDIRECT_ACTION) {
            data_to_add = value.payloads.rx_redirect_action.override_phb;
            target_payload.set_bits(93, 93, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.per_pif_trap_mode;
            target_payload.set_bits(92, 92, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.stamp_into_packet_header;
            target_payload.set_bits(91, 91, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.punt_sub_code;
            target_payload.set_bits(90, 87, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.disable_snoop;
            target_payload.set_bits(86, 86, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.is_l3_trap;
            target_payload.set_bits(85, 85, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.phb.tc;
            target_payload.set_bits(84, 82, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.phb.dp;
            target_payload.set_bits(81, 80, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.destination;
            target_payload.set_bits(79, 60, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.ts_cmd.op;
            target_payload.set_bits(59, 56, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.ts_cmd.offset;
            target_payload.set_bits(54, 48, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.cntr_stamp_cmd.op;
            target_payload.set_bits(47, 44, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.cntr_stamp_cmd.offset;
            target_payload.set_bits(42, 36, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.punt_encap_data_lsb.punt_nw_encap_ptr.ptr;
            target_payload.set_bits(35, 28, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.punt_encap_data_lsb.punt_nw_encap_type;
            target_payload.set_bits(27, 24, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.punt_encap_data_lsb.extra.lpts_meter_index_msb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 23, data_to_add);
            }
            data_to_add = value.payloads.rx_redirect_action.punt_encap_data_lsb.punt_controls.punt_format;
            target_payload.set_bits(22, 21, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.punt_encap_data_lsb.punt_controls.mirror_local_encap_format;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.redirect_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.redirect_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.rx_redirect_action.redirect_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_redirect_code_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_rx_redirect_next_macro_static_table_key_t& key, const npl_rx_redirect_next_macro_static_table_key_t& mask, const npl_rx_redirect_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.cud_type;
        target_key.set_bits(23, 20, data_to_add);
        data_to_add = mask.cud_type;
        target_mask.set_bits(23, 20, data_to_add);
        data_to_add = key.redirect_code;
        target_key.set_bits(19, 12, data_to_add);
        data_to_add = mask.redirect_code;
        target_mask.set_bits(19, 12, data_to_add);
        data_to_add = key.protocol_type;
        target_key.set_bits(11, 7, data_to_add);
        data_to_add = mask.protocol_type;
        target_mask.set_bits(11, 7, data_to_add);
        data_to_add = key.next_protocol_type;
        target_key.set_bits(6, 2, data_to_add);
        data_to_add = mask.next_protocol_type;
        target_mask.set_bits(6, 2, data_to_add);
        
        if (value.action == NPL_RX_REDIRECT_NEXT_MACRO_STATIC_TABLE_ACTION_UPDATE_NEXT_MACRO) {
            data_to_add = value.payloads.update_next_macro.is_last_rx_macro;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.update_next_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.update_next_macro.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_redirect_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_term_error_handling_counter_table_key_t& key, const npl_rx_term_error_handling_counter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.pd_source_if_pif;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_RX_TERM_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_term_error_handling_counter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rx_term_error_handling_destination_table_key_t& key, const npl_rx_term_error_handling_destination_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rx_term_error_handling_destination_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rxpdr_dsp_lookup_table_key_t& key, const npl_rxpdr_dsp_lookup_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 28);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.fwd_destination_lsb;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_RXPDR_DSP_LOOKUP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rxpdr_dsp_lookup_table_result.tc_map_profile;
            target_payload.set_bits(27, 25, data_to_add);
            data_to_add = value.payloads.rxpdr_dsp_lookup_table_result.base_voq_num;
            target_payload.set_bits(24, 9, data_to_add);
            data_to_add = value.payloads.rxpdr_dsp_lookup_table_result.dest_device;
            target_payload.set_bits(8, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rxpdr_dsp_lookup_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rxpdr_dsp_tc_map_key_t& key, const npl_rxpdr_dsp_tc_map_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpdr_dsp_lookup_table_result_tc_map_profile;
        target_key.set_bits(5, 3, data_to_add);
        data_to_add = key.rxpp_pd_tc;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_RXPDR_DSP_TC_MAP_ACTION_WRITE) {
            data_to_add = value.payloads.rxpdr_dsp_tc_map_result.is_flb;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.rxpdr_dsp_tc_map_result.tc_offset;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rxpdr_dsp_tc_map_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_key_t& key, const npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 9);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.calc_tx_slice_doq_of_fabric_port_context_input_tx_fabric_port_in_device.val;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_RXPDR_FE_RLB_UC_TX_FB_LINK_TO_OQ_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.calc_tx_slice_doq_of_fabric_port_context_output_dest_oq;
            target_payload.set_bits(8, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_sch_oqse_cfg_key_t& key, const npl_sch_oqse_cfg_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 72);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ifg.index;
        target_key.set_bits(8, 8, data_to_add);
        data_to_add = key.oqse_pair_index.index;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_SCH_OQSE_CFG_ACTION_WRITE) {
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.logical_port_map;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_topology;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 64, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_wfq_weight.priority[7].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 56, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_wfq_weight.priority[6].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 48, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_wfq_weight.priority[5].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 40, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_wfq_weight.priority[4].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 32, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_wfq_weight.priority[3].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 24, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_wfq_weight.priority[2].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 16, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_wfq_weight.priority[1].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 8, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.single_8p.oqse_wfq_weight.priority[0].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 0, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.logical_port_map[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 70, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.logical_port_map[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 68, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_topology[1].lpse_tpse_4p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 66, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_topology[1].lpse_2p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(67, 66, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_topology[0].lpse_tpse_4p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(65, 64, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_topology[0].lpse_2p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(65, 64, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_wfq_weight[1].priority[3].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 56, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_wfq_weight[1].priority[2].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 48, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_wfq_weight[1].priority[1].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 40, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_wfq_weight[1].priority[0].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 32, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_wfq_weight[0].priority[3].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 24, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_wfq_weight[0].priority[2].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 16, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_wfq_weight[0].priority[1].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 8, data_to_add);
            }
            data_to_add = value.payloads.sch_oqse_cfg_result.pair_4p.oqse_wfq_weight[0].priority[0].weight;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sch_oqse_cfg_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_sda_fabric_enable_table_key_t& key, const npl_sda_fabric_enable_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l2_enforcement;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_SDA_FABRIC_ENABLE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sda_fabric_feature.enable;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.sda_fabric_feature.l2_enforcement;
            target_payload.set_bits(2, 2, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sda_fabric_enable_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_second_ene_static_table_key_t& key, const npl_second_ene_static_table_key_t& mask, const npl_second_ene_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.second_ene_macro_code;
        target_key.set_bits(1, 0, data_to_add);
        data_to_add = mask.second_ene_macro_code;
        target_mask.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_SECOND_ENE_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = translate_ene_macro_id(context, value.payloads.second_ene_macro.id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_second_ene_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_select_inject_next_macro_static_table_key_t& key, const npl_select_inject_next_macro_static_table_key_t& mask, const npl_select_inject_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(40, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.local_inject_type_7_0_.inject_type;
        target_key.set_bits(14, 7, data_to_add);
        data_to_add = mask.local_inject_type_7_0_.inject_type;
        target_mask.set_bits(14, 7, data_to_add);
        data_to_add = key.protocol;
        target_key.set_bits(6, 2, data_to_add);
        data_to_add = mask.protocol;
        target_mask.set_bits(6, 2, data_to_add);
        
        if (value.action == NPL_SELECT_INJECT_NEXT_MACRO_STATIC_TABLE_ACTION_RX_INJECT_UP_NEXT_MACRO) {
            data_to_add = value.payloads.rx_inject_up_next_macro.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.rx_inject_up_next_macro.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_select_inject_next_macro_static_table_key_t& key)
{
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t result(40, 16);
        result.key.set_bits(1, 0, 0x1ULL);
        result.mask.set_bits(1, 0, 0x3ULL);
        return result;
    }
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_select_mac_forwarding_static_table_key_t& key, const npl_select_mac_forwarding_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.next_proto_type;
        target_key.set_bits(5, 2, data_to_add);
        data_to_add = key.use_metedata_table_per_packet_format.use_metadata_table_for_ip_packet.val;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.use_metedata_table_per_packet_format.use_metadata_table_for_non_ip_packet.val;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_SELECT_MAC_FORWARDING_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.use_metadata_table.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_select_mac_forwarding_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_service_lp_attributes_table_key_t& key, const npl_service_lp_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 160);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.service_lp_attributes_table_key.id;
        target_key.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_SERVICE_LP_ATTRIBUTES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.mac_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(158, 158, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.learn_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(157, 156, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.learn_prob;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(155, 155, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(154, 154, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.mip_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(153, 153, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.mep_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(152, 152, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.ive_profile_and_data.main_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(151, 150, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.secondary_type_with_padding.secondary_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(140, 138, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(149, 138, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.ive_profile_and_data.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 136, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.ive_profile_and_data.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 124, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.term.max_mep_level;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(123, 121, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.p2p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(120, 120, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 116, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 114, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.stp_state_block;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 113, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(112, 108, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.rtf_conf_set_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 100, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 99, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 93, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(92, 80, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_slp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.is_l2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 79, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.per_pkt_type_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.port_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 58, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.sec_acl_attributes.l2_lpts_slp_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 56, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 55, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(54, 49, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 36, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 35, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(34, 29, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.two.shared.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(28, 16, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.l3_lp_mymac_da_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(157, 153, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.mldp_budnode_terminate;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(152, 152, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.l3_lp_mymac_da_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(151, 136, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 128, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 124, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 127, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(126, 124, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(122, 120, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 118, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(117, 117, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(116, 112, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(111, 100, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 99, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 93, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(92, 80, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 76, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(75, 64, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 63, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 62, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 61, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(60, 60, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 59, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 58, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 57, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(57, 57, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(56, 56, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 55, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(54, 49, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 36, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 35, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(34, 29, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.three.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(28, 16, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.pd.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 124, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.pd.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(123, 121, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.pd.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(120, 120, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.pd.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 56, data_to_add);
            }
            data_to_add = value.payloads.write.mac_lp_attributes_payload.lp_attr.layer.pd.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 16, data_to_add);
            }
            data_to_add = value.payloads.write.slp.id;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_lp_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_service_mapping0_key_lsb_mapping_table_key_t& key, const npl_service_mapping0_key_lsb_mapping_table_key_t& mask, const npl_service_mapping0_key_lsb_mapping_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.res_a_dest;
        target_key.set_bits(15, 12, data_to_add);
        data_to_add = mask.res_a_dest;
        target_mask.set_bits(15, 12, data_to_add);
        data_to_add = key.res_b_dest;
        target_key.set_bits(11, 8, data_to_add);
        data_to_add = mask.res_b_dest;
        target_mask.set_bits(11, 8, data_to_add);
        data_to_add = key.res_c_dest;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.res_c_dest;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.res_d_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.res_d_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING0_KEY_LSB_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.service_mapping0_access_attr.key_lsbs;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping0_key_lsb_mapping_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_service_mapping1_key_lsb_mapping_table_key_t& key, const npl_service_mapping1_key_lsb_mapping_table_key_t& mask, const npl_service_mapping1_key_lsb_mapping_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.res_a_dest;
        target_key.set_bits(15, 12, data_to_add);
        data_to_add = mask.res_a_dest;
        target_mask.set_bits(15, 12, data_to_add);
        data_to_add = key.res_b_dest;
        target_key.set_bits(11, 8, data_to_add);
        data_to_add = mask.res_b_dest;
        target_mask.set_bits(11, 8, data_to_add);
        data_to_add = key.res_c_dest;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.res_c_dest;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.res_d_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.res_d_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING1_KEY_LSB_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.service_mapping1_access_attr.key_lsbs;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping1_key_lsb_mapping_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_service_mapping_em0_ac_port_table_key_t& key, const npl_service_mapping_em0_ac_port_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(20, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.write.lp_id.id;
            target_payload.set_bits(29, 14, data_to_add);
            data_to_add = value.payloads.write.relay_id.id;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_em0_ac_port_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_service_mapping_em0_ac_port_tag_table_key_t& key, const npl_service_mapping_em0_ac_port_tag_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x4ULL);
        data_to_add = key.vid1.id;
        target_key.set_bits(31, 20, data_to_add);
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.write.lp_id.id;
            target_payload.set_bits(29, 14, data_to_add);
            data_to_add = value.payloads.write.relay_id.id;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_em0_ac_port_tag_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_service_mapping_em0_ac_port_tag_tag_table_key_t& key, const npl_service_mapping_em0_ac_port_tag_tag_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(44, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x8ULL);
        data_to_add = key.vid2.id;
        target_key.set_bits(43, 32, data_to_add);
        data_to_add = key.vid1.id;
        target_key.set_bits(31, 20, data_to_add);
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_EM0_AC_PORT_TAG_TAG_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.write.lp_id.id;
            target_payload.set_bits(29, 14, data_to_add);
            data_to_add = value.payloads.write.relay_id.id;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_em0_ac_port_tag_tag_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_service_mapping_em0_pwe_tag_table_key_t& key, const npl_service_mapping_em0_pwe_tag_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xcULL);
        data_to_add = key.vid1.id;
        target_key.set_bits(31, 20, data_to_add);
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_EM0_PWE_TAG_TABLE_ACTION_SM) {
            data_to_add = value.payloads.sm.lp_id.id;
            target_payload.set_bits(29, 14, data_to_add);
            data_to_add = value.payloads.sm.relay_id.id;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_em0_pwe_tag_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_service_mapping_em1_ac_port_tag_table_key_t& key, const npl_service_mapping_em1_ac_port_tag_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x8ULL);
        data_to_add = key.vid1.id;
        target_key.set_bits(31, 20, data_to_add);
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_EM1_AC_PORT_TAG_TABLE_ACTION_SM) {
            data_to_add = value.payloads.sm.lp_id.id;
            target_payload.set_bits(29, 14, data_to_add);
            data_to_add = value.payloads.sm.relay_id.id;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_em1_ac_port_tag_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_ac_port_table_key_t& key, const npl_service_mapping_tcam_ac_port_table_key_t& mask, const npl_service_mapping_tcam_ac_port_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 320);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        data_to_add = mask.local_slp_id.id;
        target_mask.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TABLE_ACTION_SM) {
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(298, 297, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.load_balance_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(296, 295, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(294, 294, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(293, 293, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(292, 292, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(291, 288, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.sgacl_enforcement;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(287, 287, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.l2_lpts_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(286, 281, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.flush_all_macs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(280, 280, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.flood_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(279, 260, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(259, 259, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(258, 258, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(257, 257, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.mld_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(256, 256, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.igmp_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(255, 255, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.is_svi;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(254, 254, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_id;
            target_payload.set_bits(253, 240, data_to_add);
            data_to_add = value.payloads.sm.lp_attr.lp_attr.mac_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(238, 238, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.learn_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(237, 236, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.learn_prob;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(235, 235, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(234, 234, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.mip_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(233, 233, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.mep_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(232, 232, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.main_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 230, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.secondary_type_with_padding.secondary_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(220, 218, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(229, 218, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(217, 216, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.max_mep_level;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(203, 201, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.p2p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(200, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 196, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(195, 194, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.stp_state_block;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(193, 193, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(192, 188, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.rtf_conf_set_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(187, 180, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(179, 179, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(178, 173, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(172, 160, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_slp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.is_l2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 159, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.per_pkt_type_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 139, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.port_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(138, 138, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.l2_lpts_slp_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 135, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(134, 129, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 116, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.l3_lp_mymac_da_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(237, 233, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.mldp_budnode_terminate;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(232, 232, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.l3_lp_mymac_da_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 216, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 208, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(207, 206, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(205, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(207, 207, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(206, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(202, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 198, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(197, 197, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(196, 192, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(191, 180, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(179, 179, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(178, 173, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(172, 160, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(157, 156, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(155, 144, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 143, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 142, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 141, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(140, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 139, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(138, 138, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 137, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 137, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(136, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 135, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(134, 129, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 116, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(203, 201, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(200, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_id.id;
            target_payload.set_bits(95, 80, data_to_add);
            data_to_add = value.payloads.sm.pad.junk[1];
            target_payload.set_bits(79, 64, data_to_add);
            data_to_add = value.payloads.sm.pad.junk[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_ac_port_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_ac_port_tag_table_key_t& key, const npl_service_mapping_tcam_ac_port_tag_table_key_t& mask, const npl_service_mapping_tcam_ac_port_tag_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 320);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x4ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.vid1.id;
        target_key.set_bits(31, 20, data_to_add);
        data_to_add = mask.vid1.id;
        target_mask.set_bits(31, 20, data_to_add);
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        data_to_add = mask.local_slp_id.id;
        target_mask.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TABLE_ACTION_SM) {
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(298, 297, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.load_balance_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(296, 295, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(294, 294, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(293, 293, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(292, 292, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(291, 288, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.sgacl_enforcement;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(287, 287, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.l2_lpts_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(286, 281, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.flush_all_macs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(280, 280, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.flood_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(279, 260, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(259, 259, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(258, 258, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(257, 257, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.mld_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(256, 256, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.igmp_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(255, 255, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.is_svi;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(254, 254, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_id;
            target_payload.set_bits(253, 240, data_to_add);
            data_to_add = value.payloads.sm.lp_attr.lp_attr.mac_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(238, 238, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.learn_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(237, 236, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.learn_prob;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(235, 235, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(234, 234, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.mip_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(233, 233, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.mep_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(232, 232, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.main_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 230, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.secondary_type_with_padding.secondary_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(220, 218, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(229, 218, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(217, 216, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.max_mep_level;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(203, 201, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.p2p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(200, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 196, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(195, 194, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.stp_state_block;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(193, 193, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(192, 188, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.rtf_conf_set_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(187, 180, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(179, 179, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(178, 173, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(172, 160, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_slp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.is_l2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 159, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.per_pkt_type_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 139, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.port_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(138, 138, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.l2_lpts_slp_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 135, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(134, 129, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 116, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.l3_lp_mymac_da_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(237, 233, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.mldp_budnode_terminate;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(232, 232, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.l3_lp_mymac_da_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 216, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 208, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(207, 206, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(205, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(207, 207, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(206, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(202, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 198, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(197, 197, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(196, 192, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(191, 180, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(179, 179, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(178, 173, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(172, 160, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(157, 156, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(155, 144, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 143, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 142, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 141, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(140, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 139, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(138, 138, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 137, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 137, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(136, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 135, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(134, 129, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 116, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(203, 201, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(200, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_id.id;
            target_payload.set_bits(95, 80, data_to_add);
            data_to_add = value.payloads.sm.pad.junk[1];
            target_payload.set_bits(79, 64, data_to_add);
            data_to_add = value.payloads.sm.pad.junk[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_ac_port_tag_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_ac_port_tag_tag_table_key_t& key, const npl_service_mapping_tcam_ac_port_tag_tag_table_key_t& mask, const npl_service_mapping_tcam_ac_port_tag_tag_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(44, 320);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x8ULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.vid2.id;
        target_key.set_bits(43, 32, data_to_add);
        data_to_add = mask.vid2.id;
        target_mask.set_bits(43, 32, data_to_add);
        data_to_add = key.vid1.id;
        target_key.set_bits(31, 20, data_to_add);
        data_to_add = mask.vid1.id;
        target_mask.set_bits(31, 20, data_to_add);
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        data_to_add = mask.local_slp_id.id;
        target_mask.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TAG_TABLE_ACTION_SM) {
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(298, 297, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.load_balance_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(296, 295, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(294, 294, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(293, 293, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(292, 292, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(291, 288, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.sgacl_enforcement;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(287, 287, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.l2_lpts_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(286, 281, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.flush_all_macs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(280, 280, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.flood_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(279, 260, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(259, 259, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(258, 258, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(257, 257, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.mld_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(256, 256, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.igmp_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(255, 255, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.is_svi;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(254, 254, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_id;
            target_payload.set_bits(253, 240, data_to_add);
            data_to_add = value.payloads.sm.lp_attr.lp_attr.mac_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(238, 238, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.learn_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(237, 236, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.learn_prob;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(235, 235, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(234, 234, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.mip_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(233, 233, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.mep_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(232, 232, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.main_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 230, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.secondary_type_with_padding.secondary_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(220, 218, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(229, 218, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(217, 216, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.max_mep_level;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(203, 201, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.p2p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(200, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 196, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(195, 194, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.stp_state_block;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(193, 193, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(192, 188, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.rtf_conf_set_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(187, 180, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(179, 179, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(178, 173, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(172, 160, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_slp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.is_l2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 159, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.per_pkt_type_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 139, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.port_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(138, 138, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.l2_lpts_slp_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 135, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(134, 129, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 116, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.l3_lp_mymac_da_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(237, 233, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.mldp_budnode_terminate;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(232, 232, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.l3_lp_mymac_da_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 216, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 208, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(207, 206, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(205, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(207, 207, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(206, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(202, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 198, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(197, 197, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(196, 192, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(191, 180, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(179, 179, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(178, 173, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(172, 160, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(157, 156, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(155, 144, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 143, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 142, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 141, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(140, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 139, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(138, 138, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 137, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 137, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(136, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 135, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(134, 129, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 116, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(203, 201, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(200, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_id.id;
            target_payload.set_bits(95, 80, data_to_add);
            data_to_add = value.payloads.sm.pad.junk[1];
            target_payload.set_bits(79, 64, data_to_add);
            data_to_add = value.payloads.sm.pad.junk[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_ac_port_tag_tag_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_key_lsb_mapping_table_key_t& key, const npl_service_mapping_tcam_key_lsb_mapping_table_key_t& mask, const npl_service_mapping_tcam_key_lsb_mapping_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.res_a_dest;
        target_key.set_bits(15, 12, data_to_add);
        data_to_add = mask.res_a_dest;
        target_mask.set_bits(15, 12, data_to_add);
        data_to_add = key.res_b_dest;
        target_key.set_bits(11, 8, data_to_add);
        data_to_add = mask.res_b_dest;
        target_mask.set_bits(11, 8, data_to_add);
        data_to_add = key.res_c_dest;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.res_c_dest;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.res_d_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.res_d_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_TCAM_KEY_LSB_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.service_mapping_tcam_access_attr.key_lsbs;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_key_lsb_mapping_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_pwe_tag_table_key_t& key, const npl_service_mapping_tcam_pwe_tag_table_key_t& mask, const npl_service_mapping_tcam_pwe_tag_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 320);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xcULL);
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.vid1.id;
        target_key.set_bits(31, 20, data_to_add);
        data_to_add = mask.vid1.id;
        target_mask.set_bits(31, 20, data_to_add);
        data_to_add = key.local_slp_id.id;
        target_key.set_bits(19, 4, data_to_add);
        data_to_add = mask.local_slp_id.id;
        target_mask.set_bits(19, 4, data_to_add);
        
        if (value.action == NPL_SERVICE_MAPPING_TCAM_PWE_TAG_TABLE_ACTION_SM) {
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(298, 297, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.load_balance_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(296, 295, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(294, 294, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(293, 293, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(292, 292, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.l3_lp_additional_attributes.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(291, 288, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.sgacl_enforcement;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(287, 287, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.l2_lpts_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(286, 281, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.flush_all_macs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(280, 280, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.flood_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(279, 260, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(259, 259, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(258, 258, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(257, 257, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.mld_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(256, 256, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.igmp_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(255, 255, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_table_payload.relay_attr.mac_l2_relay_attributes.is_svi;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(254, 254, data_to_add);
            }
            data_to_add = value.payloads.sm.relay_id;
            target_payload.set_bits(253, 240, data_to_add);
            data_to_add = value.payloads.sm.lp_attr.lp_attr.mac_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(238, 238, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.learn_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(237, 236, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.learn_prob;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(235, 235, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(234, 234, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.mip_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(233, 233, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.mep_exists;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(232, 232, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.main_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 230, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.secondary_type_with_padding.secondary_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(220, 218, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.secondary_type_or_vid_2.vid2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(229, 218, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.prf;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(217, 216, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.ive_profile_and_data.vid1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.term.max_mep_level;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(203, 201, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.p2p;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(200, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 196, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(195, 194, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.stp_state_block;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(193, 193, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(192, 188, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.rtf_conf_set_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(187, 180, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(179, 179, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(178, 173, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(172, 160, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_dlp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.global_slp_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.slp_dlp.is_l2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 159, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.per_pkt_type_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 139, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.port_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(138, 138, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.sec_acl_attributes.l2_lpts_slp_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 135, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(134, 129, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 116, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.two.shared.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.l3_lp_mymac_da_prefix;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(237, 233, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.mldp_budnode_terminate;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(232, 232, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.l3_lp_mymac_da_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(231, 216, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.rtf_conf_set.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 208, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv4_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(207, 206, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.rtf_conf_set_and_stages.ipv4_ipv6_init_rtf_stage.ipv6_init_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(205, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.ip_ver;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(207, 207, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.rtf_conf_set_and_stages_or_post_fwd_stage.ip_ver_and_post_fwd_stage.post_fwd_rtf_stage;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(206, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.acl_drop_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(202, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.uc_rpf_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 198, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.l3_lp_mirror_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(197, 197, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.mirror_cmd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(196, 192, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.l3_relay_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(191, 180, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(179, 179, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(178, 173, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.p_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(172, 160, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.msbs.l3_slp_msbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(157, 156, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.global_slp_id.id.lsbs.l3_slp_lsbs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(155, 144, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 143, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.ttl_mode;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 142, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.per_protocol_count;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 141, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.lp_set;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(140, 140, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 139, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv4_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(138, 138, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mpls;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 137, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_mpls_or_mc_tunnel.disable_mc_tunnel_decap;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 137, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.minimal_l3_lp_attributes.disable_ipv6_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(136, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 135, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(134, 129, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.q_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 116, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 115, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(114, 109, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.three.base.m_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_12_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(215, 204, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_3_bits;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(203, 201, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_65_bits[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(200, 200, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_65_bits[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(199, 136, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_attr.lp_attr.layer.pd.update.update_q_m_counters;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 96, data_to_add);
            }
            data_to_add = value.payloads.sm.lp_id.id;
            target_payload.set_bits(95, 80, data_to_add);
            data_to_add = value.payloads.sm.pad.junk[1];
            target_payload.set_bits(79, 64, data_to_add);
            data_to_add = value.payloads.sm.pad.junk[0];
            target_payload.set_bits(63, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_mapping_tcam_pwe_tag_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_service_relay_attributes_table_key_t& key, const npl_service_relay_attributes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(14, 66);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.relay_id.id;
        target_key.set_bits(13, 0, data_to_add);
        
        if (value.action == NPL_SERVICE_RELAY_ATTRIBUTES_TABLE_ACTION_RELAY) {
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.lp_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 43, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.load_balance_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(42, 41, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.enable_monitor;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(40, 40, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.slp_based_forwarding;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 39, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.slp_based_fwd_and_per_vrf_mpls_fwd.per_vrf_mpls_fwd;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 38, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.l3_lp_additional_attributes.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 34, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.sgacl_enforcement;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 33, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.l2_lpts_attributes;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 27, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.bd_attributes.flush_all_macs;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.flood_destination.val;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_bc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 5, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_mc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(4, 4, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.drop_unknown_uc;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(3, 3, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.mld_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 2, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.igmp_snooping;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(1, 1, data_to_add);
            }
            data_to_add = value.payloads.relay.relay_table_payload.relay_attr.mac_l2_relay_attributes.is_svi;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(0, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_relay_attributes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_service_relay_id_static_table_key_t& key, const npl_service_relay_id_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(14, 14);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.relay_id.id;
        target_key.set_bits(13, 0, data_to_add);
        
        if (value.action == NPL_SERVICE_RELAY_ID_STATIC_TABLE_ACTION_RELAY) {
            data_to_add = value.payloads.relay.relay_id_or_l3_lp_add_attr;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_service_relay_id_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_set_ene_macro_and_bytes_to_remove_table_key_t& key, const npl_set_ene_macro_and_bytes_to_remove_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_FABRIC_ELEMENT_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.hdr_type;
        target_key.set_bits(4, 1, data_to_add);
        data_to_add = key.plb_header_type;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE_ACTION_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE) {
            data_to_add = value.payloads.set_ene_macro_and_bytes_to_remove_table.bytes_to_remove;
            target_payload.set_bits(19, 12, data_to_add);
            data_to_add = value.payloads.set_ene_macro_and_bytes_to_remove_table.new_hdr_type;
            target_payload.set_bits(11, 8, data_to_add);
            data_to_add = translate_ene_macro_id(context, value.payloads.set_ene_macro_and_bytes_to_remove_table.ene_macro_id);
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_set_ene_macro_and_bytes_to_remove_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_sgacl_counter_bank_table_key_t& key, const npl_sgacl_counter_bank_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_SGACL_COUNTER_BANK_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.counter_bank_msb.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.counter_bank_msb.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.counter_bank_msb.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sgacl_counter_bank_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_sgacl_ip_fragment_check_table_key_t& key, const npl_sgacl_ip_fragment_check_table_key_t& mask, const npl_sgacl_ip_fragment_check_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.ip_version;
        target_key.set_bits(16, 16, data_to_add);
        data_to_add = mask.ip_version;
        target_mask.set_bits(16, 16, data_to_add);
        data_to_add = key.v6_not_first_frag;
        target_key.set_bits(15, 15, data_to_add);
        data_to_add = mask.v6_not_first_frag;
        target_mask.set_bits(15, 15, data_to_add);
        data_to_add = key.v4_frag_offset;
        target_key.set_bits(14, 2, data_to_add);
        data_to_add = mask.v4_frag_offset;
        target_mask.set_bits(14, 2, data_to_add);
        
        if (value.action == NPL_SGACL_IP_FRAGMENT_CHECK_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.first_fragment;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sgacl_ip_fragment_check_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_sgacl_l4_protocol_select_table_key_t& key, const npl_sgacl_l4_protocol_select_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.is_ipv6;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.mapped_protocol_valid;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_SGACL_L4_PROTOCOL_SELECT_TABLE_ACTION_UPDATE_IPV4_L4_PROTOCOL) {
            target_payload.set_bits(7, 0, 0x64ULL);
        }
        
        if (value.action == NPL_SGACL_L4_PROTOCOL_SELECT_TABLE_ACTION_UPDATE_IPV6_MAPPED_PROTOCOL) {
            target_payload.set_bits(7, 0, 0x8bULL);
        }
        
        if (value.action == NPL_SGACL_L4_PROTOCOL_SELECT_TABLE_ACTION_UPDATE_IPV6_NEXT_L4_PROTOCOL) {
            target_payload.set_bits(7, 0, 0xcaULL);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sgacl_l4_protocol_select_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_sgacl_next_macro_static_table_key_t& key, const npl_sgacl_next_macro_static_table_key_t& mask, const npl_sgacl_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.sgacl_stage;
        target_key.set_bits(3, 3, data_to_add);
        data_to_add = mask.sgacl_stage;
        target_mask.set_bits(3, 3, data_to_add);
        data_to_add = key.svl;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.svl;
        target_mask.set_bits(2, 2, data_to_add);
        
        if (value.action == NPL_SGACL_NEXT_MACRO_STATIC_TABLE_ACTION_SGACL_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.sgacl_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.sgacl_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sgacl_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_sgacl_table_key_t& key, const npl_sgacl_table_key_t& mask, const npl_sgacl_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(100, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(3, 0, 0xfULL);
        data_to_add = key.ip_version;
        target_key.set_bits(99, 99, data_to_add);
        data_to_add = mask.ip_version;
        target_mask.set_bits(99, 99, data_to_add);
        data_to_add = key.l4_ports.src_port;
        target_key.set_bits(98, 83, data_to_add);
        data_to_add = key.l4_ports.dst_port;
        target_key.set_bits(82, 67, data_to_add);
        data_to_add = mask.l4_ports.src_port;
        target_mask.set_bits(98, 83, data_to_add);
        data_to_add = mask.l4_ports.dst_port;
        target_mask.set_bits(82, 67, data_to_add);
        data_to_add = key.tos;
        target_key.set_bits(66, 59, data_to_add);
        data_to_add = mask.tos;
        target_mask.set_bits(66, 59, data_to_add);
        data_to_add = key.protocol;
        target_key.set_bits(58, 51, data_to_add);
        data_to_add = mask.protocol;
        target_mask.set_bits(58, 51, data_to_add);
        data_to_add = key.ttl;
        target_key.set_bits(50, 43, data_to_add);
        data_to_add = mask.ttl;
        target_mask.set_bits(50, 43, data_to_add);
        data_to_add = key.first_fragment;
        target_key.set_bits(42, 42, data_to_add);
        data_to_add = mask.first_fragment;
        target_mask.set_bits(42, 42, data_to_add);
        data_to_add = key.sgacl_id;
        target_key.set_bits(41, 10, data_to_add);
        data_to_add = mask.sgacl_id;
        target_mask.set_bits(41, 10, data_to_add);
        data_to_add = key.tcp_flags;
        target_key.set_bits(9, 4, data_to_add);
        data_to_add = mask.tcp_flags;
        target_mask.set_bits(9, 4, data_to_add);
        
        if (value.action == NPL_SGACL_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sgacl_payload.log;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.sgacl_payload.drop;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sgacl_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_sgt_derivation_macro_static_table_key_t& key, const npl_sgt_derivation_macro_static_table_key_t& mask, const npl_sgt_derivation_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(10, 7, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(10, 7, data_to_add);
        data_to_add = key.enforcement;
        target_key.set_bits(6, 6, data_to_add);
        data_to_add = mask.enforcement;
        target_mask.set_bits(6, 6, data_to_add);
        data_to_add = key.valid_ip_sgt_derived;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = mask.valid_ip_sgt_derived;
        target_mask.set_bits(5, 5, data_to_add);
        data_to_add = key.macro_stage_vxlan_svl_pack;
        target_key.set_bits(4, 2, data_to_add);
        data_to_add = mask.macro_stage_vxlan_svl_pack;
        target_mask.set_bits(4, 2, data_to_add);
        
        if (value.action == NPL_SGT_DERIVATION_MACRO_STATIC_TABLE_ACTION_SGT_DERIVATION_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.sgt_derivation_next_macro_action.pl_inc;
            target_payload.set_bits(17, 16, data_to_add);
            data_to_add = value.payloads.sgt_derivation_next_macro_action.macro_id;
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = value.payloads.sgt_derivation_next_macro_action.stage;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.sgt_derivation_next_macro_action.next_macro_is_sgacl;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sgt_derivation_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_sgt_matrix_table_key_t& key, const npl_sgt_matrix_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(40, 53);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x66ULL);
        data_to_add = key.src_sgt;
        target_key.set_bits(39, 24, data_to_add);
        data_to_add = key.dst_sgt;
        target_key.set_bits(23, 8, data_to_add);
        data_to_add = key.ip_version;
        target_key.set_bits(7, 7, data_to_add);
        
        if (value.action == NPL_SGT_MATRIX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sgt_matrix_em_result.group_policy_allow_drop;
            target_payload.set_bits(52, 52, data_to_add);
            data_to_add = value.payloads.sgt_matrix_em_result.group_policy_acl_id;
            target_payload.set_bits(51, 20, data_to_add);
            data_to_add = value.payloads.sgt_matrix_em_result.group_policy_counter_metadata.sgacl_counter_lsb;
            target_payload.set_bits(19, 4, data_to_add);
            data_to_add = value.payloads.sgt_matrix_em_result.group_policy_counter_metadata.sgacl_bank_idx;
            target_payload.set_bits(3, 1, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sgt_matrix_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_sgt_vxlan_termination_table_key_t& key, const npl_sgt_vxlan_termination_table_key_t& mask, const npl_sgt_vxlan_termination_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.hdr_type_2;
        target_key.set_bits(7, 3, data_to_add);
        data_to_add = mask.hdr_type_2;
        target_mask.set_bits(7, 3, data_to_add);
        data_to_add = key.policy_flag;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.policy_flag;
        target_mask.set_bits(2, 2, data_to_add);
        
        if (value.action == NPL_SGT_VXLAN_TERMINATION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vxlan_terminated;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sgt_vxlan_termination_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_sip_index_table_key_t& key, const npl_sip_index_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.sip_index;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_SIP_INDEX_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.sip;
            target_payload.set_bits(31, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_sip_index_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_slice_modes_table_key_t& key, const npl_slice_modes_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(3, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.slice_id;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_SLICE_MODES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.slice_modes_table_in_out_vars_slice_mode;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_slice_modes_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_slp_based_forwarding_table_key_t& key, const npl_slp_based_forwarding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(21, 44);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(6, 0, 0x46ULL);
        data_to_add = key.slp_id.msbs.l3_slp_msbs;
        target_key.set_bits(20, 19, data_to_add);
        data_to_add = key.slp_id.lsbs.l3_slp_lsbs;
        target_key.set_bits(18, 7, data_to_add);
        
        if (value.action == NPL_SLP_BASED_FORWARDING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.slp_fwd_result.mpls_label_present;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.slp_fwd_result.mpls_label;
            target_payload.set_bits(39, 20, data_to_add);
            data_to_add = value.payloads.slp_fwd_result.destination;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_slp_based_forwarding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_small_em_key_lsb_mapping_table_key_t& key, const npl_small_em_key_lsb_mapping_table_key_t& mask, const npl_small_em_key_lsb_mapping_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(8, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_c_dest;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.lu_c_dest;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.lu_d_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.lu_d_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_SMALL_EM_KEY_LSB_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.small_em_key_lsb.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_small_em_key_lsb_mapping_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_small_encap_mpls_he_asbr_table_key_t& key, const npl_small_encap_mpls_he_asbr_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x3ULL);
        data_to_add = key.asbr;
        target_key.set_bits(31, 16, data_to_add);
        data_to_add = key.nh_ptr;
        target_key.set_bits(15, 4, data_to_add);
        
        if (value.action == NPL_SMALL_ENCAP_MPLS_HE_ASBR_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt3.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt3.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt3.label_2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt2.labels_1_2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt2.labels_1_2.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.labels_0_1.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.labels_0_1.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.more_labels.more_labels_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 28, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.enable_sr_dm_accounting;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.multi_counter_enable;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.service_flags.push_entropy_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.service_flags.add_ipv6_explicit_null;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 24, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.total_num_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.counter_flag.num_labels_is_3;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.counter_flag.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 0, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.lsp_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.lsp_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.lsp_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_small_encap_mpls_he_asbr_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_small_encap_mpls_he_te_table_key_t& key, const npl_small_encap_mpls_he_te_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(32, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x7ULL);
        data_to_add = key.te_tunnel;
        target_key.set_bits(31, 16, data_to_add);
        data_to_add = key.nh_ptr;
        target_key.set_bits(15, 4, data_to_add);
        
        if (value.action == NPL_SMALL_ENCAP_MPLS_HE_TE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt3.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt3.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt3.label_2;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt2.labels_1_2.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt2.labels_1_2.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.labels_0_1.label_0;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(79, 60, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.labels_0_1.label_1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 40, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.more_labels.more_labels_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 28, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.enable_sr_dm_accounting;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 27, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.multi_counter_enable;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.service_flags.push_entropy_label;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 25, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.service_flags.add_ipv6_explicit_null;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 24, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.label_stack.opt1.label_2_or_more.more.total_num_labels;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 20, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.counter_flag.num_labels_is_3;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.counter_flag.pad;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 0, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.lsp_counter.update_or_read;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 19, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.lsp_counter.cb_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 13, data_to_add);
            }
            data_to_add = value.payloads.lsp_encap_mapping_data_payload_asbr.counter_and_flag.lsp_counter.cb_set_base;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(12, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_small_encap_mpls_he_te_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_snoop_code_hw_table_key_t& key, const npl_snoop_code_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 5);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.pd_common_leaba_fields_snoop_code;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_SNOOP_CODE_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rxpp_pd_in_mirror_cmd0;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_snoop_code_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_snoop_table_key_t& key, const npl_snoop_table_key_t& mask, const npl_snoop_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    result.push_back(ternary_table_generic_entry_t(96, 8));
    bool trap_found = false;
    if (key.traps.ethernet.acl_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x404000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x704400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4040000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400040000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.acl_force_punt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x504000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x704400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4050000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400050000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.vlan_membership == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.acceptable_format == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x200ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_service_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x8000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_termination_on_l3_port == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000010ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x40000000010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x30001010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x2004007ULL);
            target_mask.set_bits(95, 32, 0x800002000000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x800000020000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x800000010000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_sip_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_vni_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf0000200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_vsid_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf00000200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.arp == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x40000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.sa_da_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x20000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x2000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.sa_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1ULL);
            target_key.set_bits(31, 0, 0x10000007ULL);
            target_mask.set_bits(95, 32, 0x1ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.da_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xb0000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0xf0000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.sa_multicast == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x40000000ULL);
            target_mask.set_bits(31, 0, 0x201fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x40000000ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x42000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x42000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x4000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dhcpv4_server == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x8000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dhcpv4_client == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x4000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dhcpv6_server == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x2000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dhcpv6_client == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x1000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.ingress_stp_block == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x102000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1400000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x2000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.ptp_over_eth == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x20000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.isis_over_l2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x200000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp0 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x40000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp1 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x10000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x8000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp4 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x4000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp5 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x2000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp6 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x1000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2cp7 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x800000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.lacp == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x80000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.cisco_protocols == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.macsec == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x10000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.unknown_l3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x1f00000000000010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1f00000002000000ULL);
            target_mask.set_bits(31, 0, 0x501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0x2004007ULL);
            target_mask.set_bits(95, 32, 0x1f00000002000000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x30000ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x1f00000000030000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.test_oam_ac_mep == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1500000000100010ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1f00000000140010ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.test_oam_ac_mip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1503000002240010ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1fff000002240010ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1505000002240010ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1fff000002240010ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.test_oam_cfm_link_mdl0 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1500000000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x1f0000e000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.system_mymac == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x7000010ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0xf000010ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x70002000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0xf0002000000ULL);
            target_mask.set_bits(31, 0, 0x501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x70002000000ULL);
            target_key.set_bits(31, 0, 0x2004007ULL);
            target_mask.set_bits(95, 32, 0xf0002000000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x70000030000ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0xf0000030000ULL);
            target_mask.set_bits(31, 0, 0x200501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.unknown_bc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x88000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x88010020000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.unknown_mc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4040000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x4048010020000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.unknown_uc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000000000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x4028010020000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.learn_punt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.bcast_pkt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400ULL);
            target_key.set_bits(31, 0, 0x80000006ULL);
            target_mask.set_bits(95, 32, 0x1400ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0x80000006ULL);
            target_mask.set_bits(95, 32, 0x1000ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0x80000000ULL);
            target_mask.set_bits(31, 0, 0x501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000ULL);
            target_key.set_bits(31, 0, 0x40007ULL);
            target_mask.set_bits(95, 32, 0x80000000ULL);
            target_mask.set_bits(31, 0, 0x4501fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.pfc_sample == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.hop_by_hop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000ULL);
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0xff00000000200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.l2_dlp_not_found == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.same_interface == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.dspa_mc_trim == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.egress_stp_block == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.split_horizon == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.incompatible_eve_cmd == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.padding_residue_in_second_line == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.pfc_direct_sample == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.svi_egress_dhcp == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ethernet.no_pwe_l3_dest == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x1000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.mc_forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4004000100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4000100010000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x41000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3043000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.uc_forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10008101ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10020000ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10028100ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000000ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10008011ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10020000ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10028010ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3803080008000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.checksum == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2010000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x2010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002005000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000010000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x2044070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000004000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x2044000014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.header_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8010000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x8010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002006000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000010000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x8044070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000004000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x8044000014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.unknown_protocol == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000100000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x1ff00000100000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.options_exist == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x30000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x30000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x10000007ULL);
            target_mask.set_bits(95, 32, 0x3002000000000ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv4.non_comp_mc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000001ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x10020001ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xff00000000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xff00000010000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100100000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4000000100100000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100100000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x100110000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.mc_forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2080c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x2080c00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x80c40000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x83000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3083000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.uc_forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x12000000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3013040008000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.hop_by_hop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000002000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002000002000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.header_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2002000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002006000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80010000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4480070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000004000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4480000014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.illegal_sip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.illegal_dip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.zero_payload == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000ULL);
            target_key.set_bits(31, 0, 0x1000007ULL);
            target_mask.set_bits(95, 32, 0x3002000002000ULL);
            target_mask.set_bits(31, 0, 0x100001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.next_header_check == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2001000000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3002005000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20010000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4420070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000004000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x4420000014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.ipv6.non_comp_mc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2002000c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x2002000c00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x2000000c40000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.unknown_protocol_after_bos == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x801000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x80f000ULL);
            target_mask.set_bits(31, 0, 0x10001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0x110000cULL);
            target_mask.set_bits(95, 32, 0xf008ULL);
            target_mask.set_bits(31, 0, 0x110001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x60000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x600c0000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.ttl_is_zero == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0xff00000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_ttl == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_raw == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_ipv4 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_ipv6 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.unknown_bfd_g_ach_channel_type == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.bfd_over_pwe_ra == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.mpls_tp_over_pwe == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.unknown_g_ach == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.mpls_tp_over_lsp == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400400ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400400ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300400ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300400ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400400ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500400ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.oam_alert_label == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400200ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400200ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300200ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300200ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400200ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500200ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.extension_label == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400100ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400100ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300100ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300100ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400100ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500100ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.router_alert_label == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400800ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300800ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400800ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.unexpected_reserved_label == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x40400f00ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40300000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x60300f00ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x20500f00ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.forwarding_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x2000000cULL);
            target_mask.set_bits(31, 0, 0x2000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.ilm_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf00000020000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.ipv4_over_ipv6_explicit_null == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xe0000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0xe0000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.invalid_ttl == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.te_midpopint_ldp_labels_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.asbr_label_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.ilm_vrf_label_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf00000020000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.pwe_pwach == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2001008ULL);
            target_key.set_bits(31, 0, 0x18000cULL);
            target_mask.set_bits(95, 32, 0x200f008ULL);
            target_mask.set_bits(31, 0, 0x18001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.vpn_ttl_one == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1048ULL);
            target_key.set_bits(31, 0, 0x10000cULL);
            target_mask.set_bits(95, 32, 0xf048ULL);
            target_mask.set_bits(31, 0, 0x10001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.mpls.missing_fwd_label_after_pop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_unicast_rpf == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000000000ULL);
            target_key.set_bits(31, 0, 0x1000300aULL);
            target_mask.set_bits(95, 32, 0x1000000000011000ULL);
            target_mask.set_bits(31, 0, 0x1000b01fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x1000300aULL);
            target_mask.set_bits(95, 32, 0x1000000000001000ULL);
            target_mask.set_bits(31, 0, 0x1000b01fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40400000ULL);
            target_key.set_bits(31, 0, 0x1000000aULL);
            target_mask.set_bits(95, 32, 0xf4401000ULL);
            target_mask.set_bits(31, 0, 0x1000801fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40400000ULL);
            target_key.set_bits(31, 0, 0x1000000aULL);
            target_mask.set_bits(95, 32, 0xf2401000ULL);
            target_mask.set_bits(31, 0, 0x1000801fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000400000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x20f000000401000ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000400000ULL);
            target_key.set_bits(31, 0, 0x800aULL);
            target_mask.set_bits(95, 32, 0x20f000000401000ULL);
            target_mask.set_bits(31, 0, 0x801fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000400000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x10f000000401000ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x4000000400000ULL);
            target_key.set_bits(31, 0, 0x800aULL);
            target_mask.set_bits(95, 32, 0x10f000000401000ULL);
            target_mask.set_bits(31, 0, 0x801fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x8000000001000ULL);
            target_mask.set_bits(31, 0, 0x1000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8000000000000ULL);
            target_key.set_bits(31, 0, 0x800aULL);
            target_mask.set_bits(95, 32, 0x8000000001000ULL);
            target_mask.set_bits(31, 0, 0x801fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1007000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x100f000000011800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x7000000000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x100f000000001800ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_multicast_rpf == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000ULL);
            target_key.set_bits(31, 0, 0x8807ULL);
            target_mask.set_bits(95, 32, 0x20f00001ULL);
            target_mask.set_bits(31, 0, 0x881fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_punt_dc_pass == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000001000ULL);
            target_key.set_bits(31, 0, 0x8400aULL);
            target_mask.set_bits(95, 32, 0xe00001001004ULL);
            target_mask.set_bits(31, 0, 0x148401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xe00000001004ULL);
            target_mask.set_bits(31, 0, 0x140401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_snoop_dc_pass == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000001004ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xe00000001004ULL);
            target_mask.set_bits(31, 0, 0x140001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800001001000ULL);
            target_key.set_bits(31, 0, 0x400aULL);
            target_mask.set_bits(95, 32, 0xe00001001000ULL);
            target_mask.set_bits(31, 0, 0x140401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000001000ULL);
            target_key.set_bits(31, 0, 0x400aULL);
            target_mask.set_bits(95, 32, 0xe00000001000ULL);
            target_mask.set_bits(31, 0, 0x148401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_snoop_rpf_fail == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20200080ULL);
            target_key.set_bits(31, 0, 0x8807ULL);
            target_mask.set_bits(95, 32, 0x20f00081ULL);
            target_mask.set_bits(31, 0, 0x881fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1004ULL);
            target_key.set_bits(31, 0, 0x8400aULL);
            target_mask.set_bits(95, 32, 0x1001004ULL);
            target_mask.set_bits(31, 0, 0x8401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1004ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x800001004ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_punt_rpf_fail == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200080ULL);
            target_key.set_bits(31, 0, 0x8807ULL);
            target_mask.set_bits(95, 32, 0x20f00081ULL);
            target_mask.set_bits(31, 0, 0x881fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0x8400aULL);
            target_mask.set_bits(95, 32, 0x1001004ULL);
            target_mask.set_bits(31, 0, 0x8401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x800001004ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_snoop_lookup_miss == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800001004ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x800001004ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_multicast_not_found == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x800001004ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_s_g_punt_member == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200040ULL);
            target_key.set_bits(31, 0, 0x8007ULL);
            target_mask.set_bits(95, 32, 0xf00040ULL);
            target_mask.set_bits(31, 0, 0x801fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_g_punt_member == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xc01001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xc01001000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x401001000ULL);
            target_key.set_bits(31, 0, 0x400aULL);
            target_mask.set_bits(95, 32, 0x401001000ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xc00001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xc00001000ULL);
            target_mask.set_bits(31, 0, 0x8001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400001000ULL);
            target_key.set_bits(31, 0, 0x400aULL);
            target_mask.set_bits(95, 32, 0x400001000ULL);
            target_mask.set_bits(31, 0, 0x8401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xc00001000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0xc00001000ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ip_mc_egress_punt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.isis_over_l3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x80000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.isis_drain == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x100000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_hbm_access_dip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0x1207ULL);
            target_mask.set_bits(95, 32, 0xf0000ULL);
            target_mask.set_bits(31, 0, 0x121fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0x1107ULL);
            target_mask.set_bits(95, 32, 0xf0000ULL);
            target_mask.set_bits(31, 0, 0x111fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_hbm_access_sip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x8010000ULL);
            target_key.set_bits(31, 0, 0x407ULL);
            target_mask.set_bits(95, 32, 0x80f0000ULL);
            target_mask.set_bits(31, 0, 0x41fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_error == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0xf00020000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x87ULL);
            target_mask.set_bits(31, 0, 0x9fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x21000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8209fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.local_subnet == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10400ULL);
            target_key.set_bits(31, 0, 0x207ULL);
            target_mask.set_bits(95, 32, 0xf0700ULL);
            target_mask.set_bits(31, 0, 0x21fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.icmp_redirect == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000060000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x8f00000070000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000060000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x8f00000070000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_lp_over_lag_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000000000ULL);
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0xf00010000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ingress_monitor == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000100000ULL);
            target_key.set_bits(31, 0, 0x410005ULL);
            target_mask.set_bits(95, 32, 0xf00000100000ULL);
            target_mask.set_bits(31, 0, 0x41001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x400000ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000000ULL);
            target_key.set_bits(31, 0, 0x400007ULL);
            target_mask.set_bits(95, 32, 0x2000000ULL);
            target_mask.set_bits(31, 0, 0x40401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xc007ULL);
            target_mask.set_bits(31, 0, 0xc01fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.egress_monitor == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10002ULL);
            target_key.set_bits(31, 0, 0x4007ULL);
            target_mask.set_bits(95, 32, 0xf0002ULL);
            target_mask.set_bits(31, 0, 0x401fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x704400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x500000000000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x704400000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x50000000000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x50000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400070014000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt1 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt4 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt5 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt6 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.acl_force_punt7 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.glean_adj == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xa100002000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf100002000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x105a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80010fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.drop_adj == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xa200002000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf200002000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x205a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80020fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.drop_adj_non_inject == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.null_adj == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xa400002000000ULL);
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0xf400002000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x405a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80040fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.user_trap1 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x805a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80080fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.user_trap2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1005a000000000ULL);
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x80100fe000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_default_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x9000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_incomplete0 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x11000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.lpm_incomplete2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x5000000040f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.bfd_micro_ip_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000110ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10008111ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10020110ULL);
            target_key.set_bits(31, 0, 0x80000005ULL);
            target_mask.set_bits(95, 32, 0x10028110ULL);
            target_mask.set_bits(31, 0, 0x8000001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x12000008000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3013040008000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000008000ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x3803080008000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_vni_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_hbm_access_og_sip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x300000002000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf00000002000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000020000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf00000120000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_hbm_access_og_dip == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100e000000000000ULL);
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0xf00e000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_l3_dlp_mapping == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.l3_dlp_disabled == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.split_horizon == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.mc_same_interface == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.no_vpn_label_found == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.ttl_or_hop_limit_is_one == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.tx_mtu_failure == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l3.tx_frr_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_unknown_punt_reason == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_mep_mapping_failed == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_mp_type_mismatch == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_meg_level_mismatch == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_bad_md_name_format == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_unicast_da_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_multicast_da_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_wrong_meg_id_format == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_meg_id_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_ccm_period_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_ccm_tlv_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_lmm_tlv_no_match == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.eth_not_supported_oam_opcode == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_transport_not_supported == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_session_lookup_failed == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_incorrect_ttl == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_invalid_protocol == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_invalid_udp_port == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_incorrect_version == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_incorrect_address == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_mismatch_discr == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_state_flag_change == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.bfd_session_received == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.pfc_lookup_failed == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.oamp.pfc_drop_invalid_rx == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.app.sgacl_drop == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x101100000000000ULL);
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0xf01100000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.app.sgacl_log == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x102000000000000ULL);
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0xf02000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.app.ip_inactivity == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.svl.control_protocol == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x400000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.svl.control_ipc == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000000000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x800000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.svl.svl_mc_prune == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap0 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x800000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap1 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x400000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap2 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x200000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap3 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap4 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x800000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x800000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap5 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x400000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap6 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x200000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x200000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap7 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x100000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap8 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x80000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap9 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x40000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x40000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap10 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x20000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x20000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.l2_lpts.trap11 == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000ULL);
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x10000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.l3_lpm_lpts == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x100000000010700ULL);
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x10000000c0f0702ULL);
            target_mask.set_bits(31, 0, 0x8201fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000000000010000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x1000000000011000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10700010000ULL);
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x70f14810000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10700010000ULL);
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x70f14810000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.ipv4_non_routable_mc_routing == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x80080100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000040100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x2080040100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x4080100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000040100000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x2004040100000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xe0000000001002ULL);
            target_key.set_bits(31, 0, 0x10000cULL);
            target_mask.set_bits(95, 32, 0xffffff0000f022ULL);
            target_mask.set_bits(31, 0, 0x10001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0xe0000000801000ULL);
            target_key.set_bits(31, 0, 0x10000cULL);
            target_mask.set_bits(95, 32, 0xffffff0080f029ULL);
            target_mask.set_bits(31, 0, 0x10001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.ipv4_non_routable_mc_bridging == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x80810000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x809f0000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x2000040810000000ULL);
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x20000409f0000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.ipv6_non_routable_mc_routing == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x700000410000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1f00000c10000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1010c00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000c01000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x10010c01000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000c00000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1080c00000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000c01000000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x10080c01000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.traps.internal.ipv6_non_routable_mc_bridging == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x1000800400000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x1000c00400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(95, 32, 0x10000801400000ULL);
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x10000c01400000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.trap_conditions.non_inject_up == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(31, 0, 0x200001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x6ULL);
            target_mask.set_bits(95, 32, 0x2ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(95, 32, 0x2000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x2000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x200000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xbULL);
            target_mask.set_bits(95, 32, 0x4000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xcULL);
            target_mask.set_bits(95, 32, 0x4000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xdULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x5ULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(31, 0, 0x20001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x8ULL);
            target_mask.set_bits(95, 32, 0x200000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x9ULL);
            target_mask.set_bits(95, 32, 0x20000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xaULL);
            target_mask.set_bits(95, 32, 0x20ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x8000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x10ULL);
            target_mask.set_bits(95, 32, 0x2000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x12ULL);
            target_mask.set_bits(95, 32, 0x2000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x13ULL);
            target_mask.set_bits(95, 32, 0x2000000000000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x16ULL);
            target_mask.set_bits(95, 32, 0x2000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (key.trap_conditions.skip_p2p == 1) {
        std::vector<ternary_table_generic_entry_t> current_trap_lines;
        trap_found = true;
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x1000006ULL);
            target_mask.set_bits(31, 0, 0x100001fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0x7ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        if (context == NPL_NETWORK_CONTEXT && database_id == 1) {
            ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(96, 8);
            
            bit_vector& target_key = current_entry.key;
            NPLAPI_UNUSED(target_key);
            bit_vector& target_mask = current_entry.mask;
            NPLAPI_UNUSED(target_mask);
            bit_vector& target_payload = current_entry.payload;
            NPLAPI_UNUSED(target_payload);
            
            target_key.set_bits(31, 0, 0xfULL);
            target_mask.set_bits(95, 32, 0x10000000ULL);
            target_mask.set_bits(31, 0, 0x1fULL);
            if (value.action == NPL_SNOOP_TABLE_ACTION_WRITE) {
                data_to_add = value.payloads.snoop_code.val;
                target_payload.set_bits(7, 0, data_to_add);
            }
            
            current_trap_lines.push_back(current_entry);
        }
        
        result = conjunct_lines(result, current_trap_lines);
    }
    
    if (!trap_found) {
        result.clear();
    }
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_snoop_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_snoop_to_dsp_in_npu_soft_header_table_key_t& key, const npl_snoop_to_dsp_in_npu_soft_header_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.device_snoop_code;
        target_key.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_SNOOP_TO_DSP_IN_NPU_SOFT_HEADER_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.update_dsp_in_npu_soft_header;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_snoop_to_dsp_in_npu_soft_header_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_source_pif_hw_table_key_t& key, const npl_source_pif_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 74);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_npu_input_ifg_rx_fd_source_pif;
        target_key.set_bits(5, 1, data_to_add);
        data_to_add = key.rxpp_npu_input_ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_SOURCE_PIF_HW_TABLE_ACTION_INIT_RX_DATA) {
            data_to_add = value.payloads.init_rx_data.initial_layer_index;
            target_payload.set_bits(73, 70, data_to_add);
            data_to_add = value.payloads.init_rx_data.first_header_type;
            target_payload.set_bits(69, 65, data_to_add);
            data_to_add = value.payloads.init_rx_data.first_header_is_layer;
            target_payload.set_bits(64, 64, data_to_add);
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.init_data.initial_npp_attributes_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 56, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.init_data.initial_slice_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(58, 56, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.initial_mapping_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 52, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.initial_is_rcy_if;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 50, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.pfc_enable;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(49, 49, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.initial_mac_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(48, 48, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.initial_lp_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 44, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.initial_vlan_profile;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 40, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.mapping_key.initial_lp_id.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 24, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.initial_rx_data.init_fields.mapping_key.mpls_label_placeholder;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 20, data_to_add);
            }
            data_to_add = value.payloads.init_rx_data.tag_swap_cmd;
            target_payload.set_bits(13, 12, data_to_add);
            data_to_add = value.payloads.init_rx_data.np_macro_id;
            target_payload.set_bits(11, 6, data_to_add);
            data_to_add = value.payloads.init_rx_data.fi_macro_id;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_source_pif_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_source_port_to_link_table_key_t& key, const npl_source_port_to_link_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 5);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_pd_source_if_7_2_;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_SOURCE_PORT_TO_LINK_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.cmnlv_fabric_port_id_in_slice;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_source_port_to_link_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_splitter_lu_b_key_selector_key_t& key, const npl_splitter_lu_b_key_selector_key_t& mask, const npl_splitter_lu_b_key_selector_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_b_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.lu_b_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_SPLITTER_LU_B_KEY_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.lu_b_splitter_action.access_type;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_splitter_lu_b_key_selector_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_splitter_lu_d_key_selector_key_t& key, const npl_splitter_lu_d_key_selector_key_t& mask, const npl_splitter_lu_d_key_selector_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(4, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_d_dest;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.lu_d_dest;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_SPLITTER_LU_D_KEY_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.lu_d_splitter_action.access_type;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_splitter_lu_d_key_selector_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage0_assoc_data_table_key_t& key, const npl_stage0_assoc_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 145);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.addr;
        target_key.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_STAGE0_ASSOC_DATA_TABLE_ACTION_LINE) {
            data_to_add = value.payloads.line.data.raw.is_protection;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[2];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 64, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 127, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(126, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 134, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 91, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 55, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(54, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 62, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(34, 19, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 100, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.dlp_attr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(121, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 142, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 28, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.dlp_attr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(49, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 70, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 131, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.const1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(130, 130, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 129, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].primary_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 103, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].primary_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(102, 97, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].protect_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(96, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].protect_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].primary_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 38, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].primary_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].protect_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].protect_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 131, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(130, 130, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.l2_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 91, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_nh_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_nh_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 83, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 61, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.l2_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_nh_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_nh_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 61, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage0_assoc_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage0_em_table_key_t& key, const npl_stage0_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(24, 38);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.key.dest_or_lb;
        target_key.set_bits(23, 23, data_to_add);
        data_to_add = key.key.key;
        target_key.set_bits(22, 0, data_to_add);
        
        if (value.action == NPL_STAGE0_EM_TABLE_ACTION_ENTRY) {
            data_to_add = value.payloads.entry.addr;
            target_payload.set_bits(37, 22, data_to_add);
            data_to_add = value.payloads.entry.entry_select;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.entry.common_data.common_data_ecmp2.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 16, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.common_data_ecmp2.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.common_data_prefix.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 4, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.raw.common_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage0_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage0_group_size_table_key_t& key, const npl_stage0_group_size_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(14, 10);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.group_id;
        target_key.set_bits(13, 0, data_to_add);
        
        if (value.action == NPL_STAGE0_GROUP_SIZE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_lb_size_table_result.group_size;
            target_payload.set_bits(9, 1, data_to_add);
            data_to_add = value.payloads.resolution_lb_size_table_result.consistency_mode;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage0_group_size_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage0_protection_table_key_t& key, const npl_stage0_protection_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.id;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_STAGE0_PROTECTION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_protection_result.sel;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage0_protection_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage0_type_decoding_table_key_t& key, const npl_stage0_type_decoding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 85);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.type;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_STAGE0_TYPE_DECODING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_type_decoding_table_result.do_lp_queuing;
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_size_on_encap_data_in_bits;
            target_payload.set_bits(83, 79, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_offset_on_encap_data_in_nibbles;
            target_payload.set_bits(78, 74, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.destination_in_nibbles;
            target_payload.set_bits(73, 69, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.size_in_bits;
            target_payload.set_bits(68, 64, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.offset_in_bits;
            target_payload.set_bits(63, 57, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.destination_in_nibbles;
            target_payload.set_bits(56, 52, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.size_in_bits;
            target_payload.set_bits(51, 47, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.offset_in_bits;
            target_payload.set_bits(46, 40, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.destination_in_nibbles;
            target_payload.set_bits(39, 35, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.size_in_bits;
            target_payload.set_bits(34, 30, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.offset_in_bits;
            target_payload.set_bits(29, 23, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_type;
            target_payload.set_bits(22, 19, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_start;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_type;
            target_payload.set_bits(17, 12, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_size;
            target_payload.set_bits(11, 7, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_offset;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage0_type_decoding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage1_assoc_data_table_key_t& key, const npl_stage1_assoc_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 145);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.addr;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_STAGE1_ASSOC_DATA_TABLE_ACTION_LINE) {
            data_to_add = value.payloads.line.data.raw.is_protection;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[2];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 64, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 127, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(126, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 134, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 91, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 55, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(54, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 62, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(34, 19, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 100, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.dlp_attr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(121, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 142, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 28, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.dlp_attr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(49, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 70, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 131, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.const1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(130, 130, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 129, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].primary_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 103, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].primary_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(102, 97, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].protect_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(96, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].protect_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].primary_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 38, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].primary_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].protect_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].protect_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 131, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(130, 130, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.l2_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 91, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_nh_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_nh_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 83, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 61, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.l2_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_nh_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_nh_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 61, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage1_assoc_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage1_em_table_key_t& key, const npl_stage1_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(24, 35);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.key.dest_or_lb;
        target_key.set_bits(23, 23, data_to_add);
        data_to_add = key.key.key;
        target_key.set_bits(22, 0, data_to_add);
        
        if (value.action == NPL_STAGE1_EM_TABLE_ACTION_ENTRY) {
            data_to_add = value.payloads.entry.addr;
            target_payload.set_bits(34, 22, data_to_add);
            data_to_add = value.payloads.entry.entry_select;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.entry.common_data.common_data_ecmp2.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 16, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.common_data_ecmp2.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.common_data_prefix.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 4, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.raw.common_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage1_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage1_group_size_table_key_t& key, const npl_stage1_group_size_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(14, 10);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.group_id;
        target_key.set_bits(13, 0, data_to_add);
        
        if (value.action == NPL_STAGE1_GROUP_SIZE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_lb_size_table_result.group_size;
            target_payload.set_bits(9, 1, data_to_add);
            data_to_add = value.payloads.resolution_lb_size_table_result.consistency_mode;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage1_group_size_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage1_protection_table_key_t& key, const npl_stage1_protection_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.id;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_STAGE1_PROTECTION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_protection_result.sel;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage1_protection_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage1_type_decoding_table_key_t& key, const npl_stage1_type_decoding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 85);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.type;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_STAGE1_TYPE_DECODING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_type_decoding_table_result.do_lp_queuing;
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_size_on_encap_data_in_bits;
            target_payload.set_bits(83, 79, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_offset_on_encap_data_in_nibbles;
            target_payload.set_bits(78, 74, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.destination_in_nibbles;
            target_payload.set_bits(73, 69, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.size_in_bits;
            target_payload.set_bits(68, 64, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.offset_in_bits;
            target_payload.set_bits(63, 57, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.destination_in_nibbles;
            target_payload.set_bits(56, 52, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.size_in_bits;
            target_payload.set_bits(51, 47, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.offset_in_bits;
            target_payload.set_bits(46, 40, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.destination_in_nibbles;
            target_payload.set_bits(39, 35, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.size_in_bits;
            target_payload.set_bits(34, 30, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.offset_in_bits;
            target_payload.set_bits(29, 23, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_type;
            target_payload.set_bits(22, 19, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_start;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_type;
            target_payload.set_bits(17, 12, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_size;
            target_payload.set_bits(11, 7, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_offset;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage1_type_decoding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage2_assoc_data_table_key_t& key, const npl_stage2_assoc_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 145);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.addr;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_STAGE2_ASSOC_DATA_TABLE_ACTION_LINE) {
            data_to_add = value.payloads.line.data.raw.is_protection;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[2];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 64, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 127, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(126, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 134, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 91, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 55, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(54, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 62, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(34, 19, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 100, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.dlp_attr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(121, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 142, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 28, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.dlp_attr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(49, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 70, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 131, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.const1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(130, 130, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 129, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].primary_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 103, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].primary_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(102, 97, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].protect_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(96, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].protect_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].primary_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 38, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].primary_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].protect_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].protect_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 131, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(130, 130, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.l2_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 91, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_nh_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_nh_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 83, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 61, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.l2_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_nh_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_nh_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 61, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage2_assoc_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage2_em_table_key_t& key, const npl_stage2_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(24, 35);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.key.dest_or_lb;
        target_key.set_bits(23, 23, data_to_add);
        data_to_add = key.key.key;
        target_key.set_bits(22, 0, data_to_add);
        
        if (value.action == NPL_STAGE2_EM_TABLE_ACTION_ENTRY) {
            data_to_add = value.payloads.entry.addr;
            target_payload.set_bits(34, 22, data_to_add);
            data_to_add = value.payloads.entry.entry_select;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.entry.common_data.common_data_ecmp2.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 16, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.common_data_ecmp2.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.common_data_prefix.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 4, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.raw.common_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage2_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage2_group_size_table_key_t& key, const npl_stage2_group_size_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(14, 10);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.group_id;
        target_key.set_bits(13, 0, data_to_add);
        
        if (value.action == NPL_STAGE2_GROUP_SIZE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_lb_size_table_result.group_size;
            target_payload.set_bits(9, 1, data_to_add);
            data_to_add = value.payloads.resolution_lb_size_table_result.consistency_mode;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage2_group_size_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage2_protection_table_key_t& key, const npl_stage2_protection_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.id;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_STAGE2_PROTECTION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_protection_result.sel;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage2_protection_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage2_type_decoding_table_key_t& key, const npl_stage2_type_decoding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 85);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.type;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_STAGE2_TYPE_DECODING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_type_decoding_table_result.do_lp_queuing;
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_size_on_encap_data_in_bits;
            target_payload.set_bits(83, 79, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_offset_on_encap_data_in_nibbles;
            target_payload.set_bits(78, 74, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.destination_in_nibbles;
            target_payload.set_bits(73, 69, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.size_in_bits;
            target_payload.set_bits(68, 64, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.offset_in_bits;
            target_payload.set_bits(63, 57, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.destination_in_nibbles;
            target_payload.set_bits(56, 52, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.size_in_bits;
            target_payload.set_bits(51, 47, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.offset_in_bits;
            target_payload.set_bits(46, 40, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.destination_in_nibbles;
            target_payload.set_bits(39, 35, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.size_in_bits;
            target_payload.set_bits(34, 30, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.offset_in_bits;
            target_payload.set_bits(29, 23, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_type;
            target_payload.set_bits(22, 19, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_start;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_type;
            target_payload.set_bits(17, 12, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_size;
            target_payload.set_bits(11, 7, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_offset;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage2_type_decoding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage3_assoc_data_table_key_t& key, const npl_stage3_assoc_data_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 145);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.addr;
        target_key.set_bits(11, 0, data_to_add);
        
        if (value.action == NPL_STAGE3_ASSOC_DATA_TABLE_ACTION_LINE) {
            data_to_add = value.payloads.line.data.raw.is_protection;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[2];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 64, data_to_add);
            }
            data_to_add = value.payloads.line.data.raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(142, 127, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(126, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 128, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 134, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 140, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[3].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 108, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(106, 91, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 92, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 104, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(105, 90, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(107, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[2].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 55, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(54, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 56, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(55, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 62, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 68, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 54, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(61, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[1].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 36, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_l3_nh_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.ip_tunnel;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(34, 19, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.level2_ecmp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(18, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_level2_ecmp_ip_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_l2_dlp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_no_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_te_he.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 20, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.p_l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ce_ptr_p_nh_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.overlay_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_destination_overlay_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage0_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest1.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_dest1.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_he_with_tunnel_id.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_tunnel_or_asbr_ldp_over_te.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage1_ecmp_lsp_asbr_nh.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_dspa_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_dspa_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow.entry[0].stage3_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 100, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(99, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage0_ce_ptr_ecmp2.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.dlp_attr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(121, 114, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp_bvn_profile.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 98, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(97, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_l3_nh_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 142, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 78, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[1].stage2_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 72, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.ce_ptr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 28, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.vpn_inter_as;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(27, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage0_ce_ptr_ecmp2.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.dlp_attr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(49, 42, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp_bvn_profile.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.l3_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_l3_nh_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.payload[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 70, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.payload[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(69, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide.entry[0].stage2_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 131, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.const1;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(130, 130, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 129, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].primary_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(128, 103, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].primary_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(102, 97, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].protect_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(96, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[1].protect_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 64, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].primary_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(63, 38, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].primary_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(37, 32, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].protect_payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.narrow_protection.record[0].protect_entry_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(144, 144, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 131, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.path;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(130, 130, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.l2_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(108, 91, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage0_l2_dlp_dest_l2_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_nh_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(90, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_nh_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 126, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(98, 83, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(82, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_te_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 71, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.primary_entry.stage1_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(70, 65, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 61, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.l2_dlp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(43, 26, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage0_l2_dlp_dest_l2_dlp.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_nh_dest.destination;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(25, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_nh_dest.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 61, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(33, 18, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.l3_nh;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_te_tunnel.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_raw.payload;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(64, 6, data_to_add);
            }
            data_to_add = value.payloads.line.data.wide_protection.record.protect_entry.stage1_raw.type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage3_assoc_data_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage3_em_table_key_t& key, const npl_stage3_em_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(24, 34);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.key.dest_or_lb;
        target_key.set_bits(23, 23, data_to_add);
        data_to_add = key.key.key;
        target_key.set_bits(22, 0, data_to_add);
        
        if (value.action == NPL_STAGE3_EM_TABLE_ACTION_ENTRY) {
            data_to_add = value.payloads.entry.addr;
            target_payload.set_bits(33, 22, data_to_add);
            data_to_add = value.payloads.entry.entry_select;
            target_payload.set_bits(21, 20, data_to_add);
            data_to_add = value.payloads.entry.common_data.common_data_ecmp2.enc_type;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 16, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.common_data_ecmp2.te_tunnel14b_or_asbr;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 0, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.common_data_prefix.te_tunnel16b;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 4, data_to_add);
            }
            data_to_add = value.payloads.entry.common_data.raw.common_data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage3_em_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage3_group_size_table_key_t& key, const npl_stage3_group_size_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(14, 10);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.group_id;
        target_key.set_bits(13, 0, data_to_add);
        
        if (value.action == NPL_STAGE3_GROUP_SIZE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_lb_size_table_result.group_size;
            target_payload.set_bits(9, 1, data_to_add);
            data_to_add = value.payloads.resolution_lb_size_table_result.consistency_mode;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage3_group_size_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage3_protection_table_key_t& key, const npl_stage3_protection_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.id;
        target_key.set_bits(12, 0, data_to_add);
        
        if (value.action == NPL_STAGE3_PROTECTION_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_protection_result.sel;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage3_protection_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_stage3_type_decoding_table_key_t& key, const npl_stage3_type_decoding_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 85);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.type;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_STAGE3_TYPE_DECODING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.resolution_type_decoding_table_result.do_lp_queuing;
            target_payload.set_bits(84, 84, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_size_on_encap_data_in_bits;
            target_payload.set_bits(83, 79, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.dest_offset_on_encap_data_in_nibbles;
            target_payload.set_bits(78, 74, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.destination_in_nibbles;
            target_payload.set_bits(73, 69, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.size_in_bits;
            target_payload.set_bits(68, 64, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_2.offset_in_bits;
            target_payload.set_bits(63, 57, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.destination_in_nibbles;
            target_payload.set_bits(56, 52, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.size_in_bits;
            target_payload.set_bits(51, 47, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_1.offset_in_bits;
            target_payload.set_bits(46, 40, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.destination_in_nibbles;
            target_payload.set_bits(39, 35, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.size_in_bits;
            target_payload.set_bits(34, 30, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.field_0.offset_in_bits;
            target_payload.set_bits(29, 23, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_type;
            target_payload.set_bits(22, 19, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.encapsulation_start;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_type;
            target_payload.set_bits(17, 12, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_size;
            target_payload.set_bits(11, 7, data_to_add);
            data_to_add = value.payloads.resolution_type_decoding_table_result.next_destination_offset;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_stage3_type_decoding_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_svl_dspa_table_key_t& key, const npl_svl_dspa_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_SVL_DSPA_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.svl_dspa.val;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_svl_dspa_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_svl_is_dsp_remote_key_t& key, const npl_svl_is_dsp_remote_key_t& mask, const npl_svl_is_dsp_remote_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.destmsb;
        target_key.set_bits(13, 2, data_to_add);
        data_to_add = mask.destmsb;
        target_mask.set_bits(13, 2, data_to_add);
        
        if (value.action == NPL_SVL_IS_DSP_REMOTE_ACTION_WRITE) {
            data_to_add = value.payloads.svl_local_resolve_data.svl_dsp_remote_flag;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.svl_local_resolve_data.svl_encap_forward_flag;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.svl_local_resolve_data.svl_bvn_flag;
            target_payload.set_bits(4, 4, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_svl_is_dsp_remote_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_svl_mirror_cmd_remote_dsp_table_key_t& key, const npl_svl_mirror_cmd_remote_dsp_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ibm_cmd;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_SVL_MIRROR_CMD_REMOTE_DSP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.svl_mirror_dsp.dsp;
            target_payload.set_bits(10, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_svl_mirror_cmd_remote_dsp_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_svl_mode_table_key_t& key, const npl_svl_mode_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_SVL_MODE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.svl_mode.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_svl_mode_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_svl_next_macro_static_table_key_t& key, const npl_svl_next_macro_static_table_key_t& mask, const npl_svl_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(20, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.type;
        target_key.set_bits(14, 10, data_to_add);
        data_to_add = mask.type;
        target_mask.set_bits(14, 10, data_to_add);
        data_to_add = key.mac_da_prefix;
        target_key.set_bits(9, 2, data_to_add);
        data_to_add = mask.mac_da_prefix;
        target_mask.set_bits(9, 2, data_to_add);
        
        if (value.action == NPL_SVL_NEXT_MACRO_STATIC_TABLE_ACTION_SVL_NEXT_MACRO_ACTION) {
            data_to_add = value.payloads.svl_next_macro_action.ipc_trap;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.svl_next_macro_action.protocol_trap;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.svl_next_macro_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.svl_next_macro_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_svl_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_svl_sgacl_enable_static_table_key_t& key, const npl_svl_sgacl_enable_static_table_key_t& mask, const npl_svl_sgacl_enable_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x3ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(11, 8, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(11, 8, data_to_add);
        data_to_add = key.sda_fabric_enable;
        target_key.set_bits(7, 7, data_to_add);
        data_to_add = mask.sda_fabric_enable;
        target_mask.set_bits(7, 7, data_to_add);
        data_to_add = key.next_header;
        target_key.set_bits(6, 2, data_to_add);
        data_to_add = mask.next_header;
        target_mask.set_bits(6, 2, data_to_add);
        
        if (value.action == NPL_SVL_SGACL_ENABLE_STATIC_TABLE_ACTION_SVL_SGACL_ENABLE_STATIC_TABLE_ACTION) {
            data_to_add = value.payloads.svl_sgacl_enable_static_table_action.sgt_macro_enabled;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_svl_sgacl_enable_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_svl_sgacl_next_macro_static_table_key_t& key, const npl_svl_sgacl_next_macro_static_table_key_t& mask, const npl_svl_sgacl_next_macro_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x2ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(12, 9, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(12, 9, data_to_add);
        data_to_add = key.sda_fabric_enable;
        target_key.set_bits(8, 8, data_to_add);
        data_to_add = mask.sda_fabric_enable;
        target_mask.set_bits(8, 8, data_to_add);
        data_to_add = key.next_header;
        target_key.set_bits(7, 3, data_to_add);
        data_to_add = mask.next_header;
        target_mask.set_bits(7, 3, data_to_add);
        data_to_add = key.svl_dest;
        target_key.set_bits(2, 2, data_to_add);
        data_to_add = mask.svl_dest;
        target_mask.set_bits(2, 2, data_to_add);
        
        if (value.action == NPL_SVL_SGACL_NEXT_MACRO_STATIC_TABLE_ACTION_SVL_SGACL_NEXT_MACRO_STATIC_TABLE_ACTION) {
            data_to_add = value.payloads.svl_sgacl_next_macro_static_table_action.pl_inc;
            target_payload.set_bits(9, 8, data_to_add);
            data_to_add = value.payloads.svl_sgacl_next_macro_static_table_action.macro_id;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_svl_sgacl_next_macro_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_te_headend_lsp_counter_offset_table_key_t& key, const npl_te_headend_lsp_counter_offset_table_key_t& mask, const npl_te_headend_lsp_counter_offset_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(24, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.is_mc;
        target_key.set_bits(8, 8, data_to_add);
        data_to_add = mask.is_mc;
        target_mask.set_bits(8, 8, data_to_add);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(7, 4, data_to_add);
        data_to_add = key.l3_encap_type;
        target_key.set_bits(3, 0, data_to_add);
        data_to_add = mask.l3_encap_type;
        target_mask.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_TE_HEADEND_LSP_COUNTER_OFFSET_TABLE_ACTION_OFFSETS) {
            data_to_add = value.payloads.offsets.lsp_counter_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(6, 4, data_to_add);
            }
            data_to_add = value.payloads.offsets.php_counter_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_te_headend_lsp_counter_offset_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_term_bucket_a_lu_data_selector_key_t& key, const npl_term_bucket_a_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_a_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_a_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_TERM_BUCKET_A_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.term_bucket_a_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.term_bucket_a_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.term_bucket_a_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_term_bucket_a_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_term_bucket_b_lu_data_selector_key_t& key, const npl_term_bucket_b_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_b_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_b_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_TERM_BUCKET_B_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.term_bucket_b_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.term_bucket_b_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.term_bucket_b_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_term_bucket_b_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_term_bucket_c_lu_data_selector_key_t& key, const npl_term_bucket_c_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_c_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_c_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_TERM_BUCKET_C_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.term_bucket_c_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.term_bucket_c_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.term_bucket_c_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_term_bucket_c_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_term_bucket_d_lu_data_selector_key_t& key, const npl_term_bucket_d_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_d_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_d_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_TERM_BUCKET_D_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.term_bucket_d_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.term_bucket_d_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.term_bucket_d_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_term_bucket_d_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_term_to_fwd_hdr_shift_table_key_t& key, const npl_term_to_fwd_hdr_shift_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 11);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_TERM_TO_FWD_HDR_SHIFT_TABLE_ACTION_UPDATE) {
            data_to_add = value.payloads.update.highest_header_to_update;
            target_payload.set_bits(10, 7, data_to_add);
            data_to_add = value.payloads.update.header_shift_disable_offset_recalc;
            target_payload.set_bits(6, 1, data_to_add);
            data_to_add = value.payloads.update.enable_header_shift;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_term_to_fwd_hdr_shift_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_termination_to_forwarding_fi_hardwired_table_key_t& key, const npl_termination_to_forwarding_fi_hardwired_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 2);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_protocol_layer_current__header_0__header_info_type;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_TERMINATION_TO_FORWARDING_FI_HARDWIRED_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.termination_to_forwarding_fields_fi_hardwired_type;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_termination_to_forwarding_fi_hardwired_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_tm_ibm_cmd_to_destination_key_t& key, const npl_tm_ibm_cmd_to_destination_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 9);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpp_to_txpp_local_vars_mirror_command;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_TM_IBM_CMD_TO_DESTINATION_ACTION_FOUND) {
            data_to_add = value.payloads.found.dest_slice_id;
            target_payload.set_bits(8, 6, data_to_add);
            data_to_add = value.payloads.found.dest_pif;
            target_payload.set_bits(5, 1, data_to_add);
            data_to_add = value.payloads.found.dest_ifg;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_tm_ibm_cmd_to_destination_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_transmit_bucket_a_lu_data_selector_key_t& key, const npl_transmit_bucket_a_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_a_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_a_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_TRANSMIT_BUCKET_A_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.trans_bucket_a_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.trans_bucket_a_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.trans_bucket_a_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_transmit_bucket_a_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_transmit_bucket_b_lu_data_selector_key_t& key, const npl_transmit_bucket_b_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_b_dest;
        target_key.set_bits(7, 6, data_to_add);
        data_to_add = key.lu_b_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_TRANSMIT_BUCKET_B_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.trans_bucket_b_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.trans_bucket_b_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.trans_bucket_b_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_transmit_bucket_b_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_transmit_bucket_c_lu_data_selector_key_t& key, const npl_transmit_bucket_c_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_c_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_c_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_TRANSMIT_BUCKET_C_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.trans_bucket_c_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.trans_bucket_c_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.trans_bucket_c_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_transmit_bucket_c_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_transmit_bucket_d_lu_data_selector_key_t& key, const npl_transmit_bucket_d_lu_data_selector_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_UDC_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lu_d_dest;
        target_key.set_bits(9, 6, data_to_add);
        data_to_add = key.lu_d_key_index;
        target_key.set_bits(5, 0, data_to_add);
        
        if (value.action == NPL_TRANSMIT_BUCKET_D_LU_DATA_SELECTOR_ACTION_WRITE) {
            data_to_add = value.payloads.trans_bucket_d_lu_data.check_result;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.trans_bucket_d_lu_data.expected_result;
            target_payload.set_bits(27, 20, data_to_add);
            data_to_add = value.payloads.trans_bucket_d_lu_data.key;
            target_payload.set_bits(19, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_transmit_bucket_d_lu_data_selector_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_ts_cmd_hw_static_table_key_t& key, const npl_ts_cmd_hw_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 9);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.pd_tx_common_tx_leaba_fields_ts_command_op;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_TS_CMD_HW_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ts_cmd_trans.op;
            target_payload.set_bits(8, 5, data_to_add);
            data_to_add = value.payloads.ts_cmd_trans.udp_offset_sel;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.ts_cmd_trans.update_udp_cs;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.ts_cmd_trans.reset_udp_cs;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.ts_cmd_trans.ifg_ts_cmd;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_ts_cmd_hw_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_tunnel_dlp_p_counter_offset_table_key_t& key, const npl_tunnel_dlp_p_counter_offset_table_key_t& mask, const npl_tunnel_dlp_p_counter_offset_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_mask.set_bits(0, 0, 0x1ULL);
        data_to_add = key.is_mc;
        target_key.set_bits(10, 10, data_to_add);
        data_to_add = mask.is_mc;
        target_mask.set_bits(10, 10, data_to_add);
        data_to_add = key.is_mpls;
        target_key.set_bits(9, 9, data_to_add);
        data_to_add = mask.is_mpls;
        target_mask.set_bits(9, 9, data_to_add);
        data_to_add = key.l3_encap_type;
        target_key.set_bits(8, 5, data_to_add);
        data_to_add = mask.l3_encap_type;
        target_mask.set_bits(8, 5, data_to_add);
        data_to_add = key.fwd_header_type;
        target_key.set_bits(4, 1, data_to_add);
        data_to_add = mask.fwd_header_type;
        target_mask.set_bits(4, 1, data_to_add);
        
        if (value.action == NPL_TUNNEL_DLP_P_COUNTER_OFFSET_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.cntr_offset.offset;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_tunnel_dlp_p_counter_offset_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_tunnel_qos_static_table_key_t& key, const npl_tunnel_qos_static_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 8);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.lp_set;
        target_key.set_bits(1, 1, data_to_add);
        data_to_add = key.l3_dlp_is_group_qos;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_TUNNEL_QOS_STATIC_TABLE_ACTION_UPDATE_DSCP_FROM_L3_DLP_WITH_FWD_QOS_TAG) {
            target_payload.set_bits(7, 0, 0x70ULL);
        }
        
        if (value.action == NPL_TUNNEL_QOS_STATIC_TABLE_ACTION_UPDATE_DSCP_FROM_L3_DLP_WITH_QOS_GROUP) {
            target_payload.set_bits(7, 0, 0x6eULL);
        }
        
        if (value.action == NPL_TUNNEL_QOS_STATIC_TABLE_ACTION_UPDATE_DSCP_FROM_TUNNEL) {
            target_payload.set_bits(7, 0, 0xbfULL);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_tunnel_qos_static_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_tx_counters_bank_id_map_config_key_t& key, const npl_tx_counters_bank_id_map_config_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 7);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.npu_bank_id;
        target_key.set_bits(6, 1, data_to_add);
        data_to_add = key.ifg;
        target_key.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_TX_COUNTERS_BANK_ID_MAP_CONFIG_ACTION_WRITE) {
            data_to_add = value.payloads.counter_bank_id;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_tx_counters_bank_id_map_config_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_tx_counters_block_config_table_key_t& key, const npl_tx_counters_block_config_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(7, 3);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.counter_bank_id;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_TX_COUNTERS_BLOCK_CONFIG_TABLE_ACTION_CONFIG) {
            data_to_add = value.payloads.config.inc_addr_for_set;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.config.bank_set_type;
            target_payload.set_bits(1, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_tx_counters_block_config_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_tx_error_handling_counter_table_key_t& key, const npl_tx_error_handling_counter_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 20);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ser;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.dest_pif;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_TX_ERROR_HANDLING_COUNTER_TABLE_ACTION_UPDATE_RESULT) {
            data_to_add = value.payloads.update_result.counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.update_result.counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_tx_error_handling_counter_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_tx_punt_eth_encap_table_key_t& key, const npl_tx_punt_eth_encap_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(9, 129);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.punt_encap;
        target_key.set_bits(8, 0, data_to_add);
        
        if (value.action == NPL_TX_PUNT_ETH_ENCAP_TABLE_ACTION_FOUND) {
            data_to_add = value.payloads.found.wide_bit;
            target_payload.set_bits(128, 128, data_to_add);
            data_to_add = value.payloads.found.eth_pcp_dei.pcp;
            target_payload.set_bits(127, 125, data_to_add);
            data_to_add = value.payloads.found.eth_pcp_dei.dei;
            target_payload.set_bits(124, 124, data_to_add);
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_eth_nw_encap_data.punt_host_da.mac_address;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(91, 44, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_eth_nw_encap_data.sa_or_npuh.punt_if_sa_lsb;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 16, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_eth_nw_encap_data.sa_or_npuh.punt_npu_host_data.first_fi_macro_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(31, 24, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_eth_nw_encap_data.sa_or_npuh.punt_npu_host_data.first_npe_macro_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 16, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_eth_nw_encap_data.punt_if_sa_rewrite_idx;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 12, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_eth_nw_encap_data.punt_eth_vid.id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 0, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_eth_transport_update.update[1];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(123, 96, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_eth_transport_update.update[0];
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 32, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_npu_host_data.npu_host_macro_data.first_fi_macro_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(15, 8, data_to_add);
            }
            data_to_add = value.payloads.found.punt_eth_or_npu_host_encap.punt_npu_host_data.npu_host_macro_data.first_npe_macro_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(7, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_tx_punt_eth_encap_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_tx_redirect_code_table_key_t& key, const npl_tx_redirect_code_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(12, 40);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x8ULL);
        data_to_add = key.tx_redirect_code;
        target_key.set_bits(11, 4, data_to_add);
        
        if (value.action == NPL_TX_REDIRECT_CODE_TABLE_ACTION_TX_REDIRECT_ACTION) {
            data_to_add = value.payloads.tx_redirect_action.is_drop_action;
            target_payload.set_bits(39, 37, data_to_add);
            data_to_add = value.payloads.tx_redirect_action.stamp_into_packet_header;
            target_payload.set_bits(36, 36, data_to_add);
            data_to_add = value.payloads.tx_redirect_action.cntr_stamp_cmd.op;
            target_payload.set_bits(35, 32, data_to_add);
            data_to_add = value.payloads.tx_redirect_action.cntr_stamp_cmd.offset;
            target_payload.set_bits(30, 24, data_to_add);
            data_to_add = value.payloads.tx_redirect_action.ts_cmd.op;
            target_payload.set_bits(23, 20, data_to_add);
            data_to_add = value.payloads.tx_redirect_action.ts_cmd.offset;
            target_payload.set_bits(18, 12, data_to_add);
            data_to_add = value.payloads.tx_redirect_action.tx_punt_nw_encap_ptr.punt_nw_encap_type;
            target_payload.set_bits(11, 8, data_to_add);
            data_to_add = value.payloads.tx_redirect_action.tx_punt_nw_encap_ptr.punt_nw_encap_ptr.ptr;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_tx_redirect_code_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpdr_mc_list_size_table_key_t& key, const npl_txpdr_mc_list_size_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(16, 11);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.rxpdr_output_rxrq_cud_rxrq_cud_encoding_mcid_mcid;
        target_key.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_TXPDR_MC_LIST_SIZE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.txpdr_local_vars_mc_group_size;
            target_payload.set_bits(10, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpdr_mc_list_size_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpdr_tc_map_table_key_t& key, const npl_txpdr_tc_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 3);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.txpdr_local_vars_tc_map_profile;
        target_key.set_bits(5, 3, data_to_add);
        data_to_add = key.rxpp_pd_tc;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_TXPDR_TC_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.txpdr_local_vars_tc_offset;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpdr_tc_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpp_dlp_profile_key_construct_parameters_table_key_t& key, const npl_txpp_dlp_profile_key_construct_parameters_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 11);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_protocol_layer_0__tx_npu_header_fwd_header_type;
        target_key.set_bits(7, 4, data_to_add);
        data_to_add = key.packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_TXPP_DLP_PROFILE_KEY_CONSTRUCT_PARAMETERS_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.dlp_profile_local_vars.dlp_type;
            target_payload.set_bits(10, 9, data_to_add);
            data_to_add = value.payloads.dlp_profile_local_vars.dlp_mask;
            target_payload.set_bits(8, 5, data_to_add);
            data_to_add = value.payloads.dlp_profile_local_vars.dlp_offset;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpp_dlp_profile_key_construct_parameters_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpp_em_dlp_profile_mapping_table_key_t& key, const npl_txpp_em_dlp_profile_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(20, 24);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.txpp_em_dlp_profile_mapping_key.dlp_type;
        target_key.set_bits(19, 18, data_to_add);
        data_to_add = key.txpp_em_dlp_profile_mapping_key.dlp_id;
        target_key.set_bits(17, 0, data_to_add);
        
        if (value.action == NPL_TXPP_EM_DLP_PROFILE_MAPPING_TABLE_ACTION_INIT_TX_PROFILE_DATA) {
            data_to_add = value.payloads.init_tx_profile_data.dlp_profile.data;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 16, data_to_add);
            }
            data_to_add = value.payloads.init_tx_profile_data.dlp_profile.overload_union_user_app_data_defined.user_app_dlp_profile.l2.qos_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 20, data_to_add);
            }
            data_to_add = value.payloads.init_tx_profile_data.dlp_profile.overload_union_user_app_data_defined.user_app_dlp_profile.l2.acl_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 16, data_to_add);
            }
            data_to_add = value.payloads.init_tx_profile_data.dlp_profile.overload_union_user_app_data_defined.user_app_dlp_profile.l3_sec.acl_v4_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 20, data_to_add);
            }
            data_to_add = value.payloads.init_tx_profile_data.dlp_profile.overload_union_user_app_data_defined.user_app_dlp_profile.l3_sec.acl_v6_id;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(19, 16, data_to_add);
            }
            data_to_add = value.payloads.init_tx_profile_data.dlp_profile.overload_union_user_app_data_defined.user_app_data_defined;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 16, data_to_add);
            }
            data_to_add = value.payloads.init_tx_profile_data.dlp_attributes;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpp_em_dlp_profile_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpp_encap_qos_mapping_table_key_t& key, const npl_txpp_encap_qos_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 7);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_protocol_layer_none__tx_npu_header_slp_qos_id;
        target_key.set_bits(12, 9, data_to_add);
        data_to_add = key.pd_tx_out_color;
        target_key.set_bits(8, 7, data_to_add);
        data_to_add = key.packet_protocol_layer_none__tx_npu_header_encap_qos_tag;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_TXPP_ENCAP_QOS_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.txpp_npu_header_encap_qos_tag;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpp_encap_qos_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpp_first_enc_type_to_second_enc_type_offset_key_t& key, const npl_txpp_first_enc_type_to_second_enc_type_offset_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(4, 1);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_protocol_layer_0__tx_npu_header_encap_or_term_107_104_;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_TXPP_FIRST_ENC_TYPE_TO_SECOND_ENC_TYPE_OFFSET_ACTION_WRITE) {
            data_to_add = value.payloads.txpp_first_encap_is_wide.val;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpp_first_enc_type_to_second_enc_type_offset_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpp_fwd_qos_mapping_table_key_t& key, const npl_txpp_fwd_qos_mapping_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(13, 7);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_protocol_layer_none__tx_npu_header_slp_qos_id;
        target_key.set_bits(12, 9, data_to_add);
        data_to_add = key.pd_tx_out_color;
        target_key.set_bits(8, 7, data_to_add);
        data_to_add = key.packet_protocol_layer_none__tx_npu_header_fwd_qos_tag;
        target_key.set_bits(6, 0, data_to_add);
        
        if (value.action == NPL_TXPP_FWD_QOS_MAPPING_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.txpp_npu_header_fwd_qos_tag;
            target_payload.set_bits(6, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpp_fwd_qos_mapping_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpp_ibm_enables_table_key_t& key, const npl_txpp_ibm_enables_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(1, 159);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        
        
        if (value.action == NPL_TXPP_IBM_ENABLES_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.ibm_enables_table_result.ibm_partial_mirror_packet_size;
            target_payload.set_bits(158, 145, data_to_add);
            data_to_add = value.payloads.ibm_enables_table_result.ibm_partial_mirror_en;
            target_payload.set_bits(144, 113, data_to_add);
            data_to_add = value.payloads.ibm_enables_table_result.ibm_enable_ive;
            target_payload.set_bits(112, 81, data_to_add);
            data_to_add = value.payloads.ibm_enables_table_result.ibm_enable_hw_termination;
            target_payload.set_bits(80, 49, data_to_add);
            data_to_add = value.payloads.ibm_enables_table_result.cud_ibm_offset;
            target_payload.set_bits(48, 9, data_to_add);
            data_to_add = value.payloads.ibm_enables_table_result.cud_has_ibm;
            target_payload.set_bits(8, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpp_ibm_enables_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_txpp_initial_npe_macro_table_key_t& key, const npl_txpp_initial_npe_macro_table_key_t& mask, const npl_txpp_initial_npe_macro_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(25, 6);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.txpp_first_macro_table_key.is_mc;
        target_key.set_bits(24, 24, data_to_add);
        data_to_add = key.txpp_first_macro_table_key.fwd_type;
        target_key.set_bits(23, 20, data_to_add);
        data_to_add = key.txpp_first_macro_table_key.encap_type;
        target_key.set_bits(19, 16, data_to_add);
        data_to_add = key.txpp_first_macro_table_key.field_a;
        target_key.set_bits(15, 8, data_to_add);
        data_to_add = key.txpp_first_macro_table_key.field_b;
        target_key.set_bits(7, 0, data_to_add);
        data_to_add = mask.txpp_first_macro_table_key.is_mc;
        target_mask.set_bits(24, 24, data_to_add);
        data_to_add = mask.txpp_first_macro_table_key.fwd_type;
        target_mask.set_bits(23, 20, data_to_add);
        data_to_add = mask.txpp_first_macro_table_key.encap_type;
        target_mask.set_bits(19, 16, data_to_add);
        data_to_add = mask.txpp_first_macro_table_key.field_a;
        target_mask.set_bits(15, 8, data_to_add);
        data_to_add = mask.txpp_first_macro_table_key.field_b;
        target_mask.set_bits(7, 0, data_to_add);
        
        if (value.action == NPL_TXPP_INITIAL_NPE_MACRO_TABLE_ACTION_INIT_TX_DATA) {
            data_to_add = value.payloads.init_tx_data.np_macro_id;
            target_payload.set_bits(5, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpp_initial_npe_macro_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_txpp_mapping_qos_tag_table_key_t& key, const npl_txpp_mapping_qos_tag_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(11, 32);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.qos_tag;
        target_key.set_bits(10, 4, data_to_add);
        data_to_add = key.qos_id;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_TXPP_MAPPING_QOS_TAG_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.egress_qos_result.fwd_remark_exp;
            target_payload.set_bits(30, 28, data_to_add);
            data_to_add = value.payloads.egress_qos_result.remark_l2;
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.egress_qos_result.remark_l3.enable_egress_remark;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.egress_qos_result.remark_l3.use_in_mpls_exp;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 26, data_to_add);
            }
            data_to_add = value.payloads.egress_qos_result.q_offset.cntr_offset.offset.base_cntr_offset;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(24, 22, data_to_add);
            }
            data_to_add = value.payloads.egress_qos_result.fwd_remark_dscp;
            target_payload.set_bits(21, 16, data_to_add);
            data_to_add = value.payloads.egress_qos_result.encap.tos;
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = value.payloads.egress_qos_result.encap.exp_no_bos.exp;
            target_payload.set_bits(7, 5, data_to_add);
            data_to_add = value.payloads.egress_qos_result.encap.pcp_dei;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_txpp_mapping_qos_tag_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_uc_ibm_tc_map_table_key_t& key, const npl_uc_ibm_tc_map_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(6, 4);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ibm_cmd_table_result_tc_map_profile;
        target_key.set_bits(5, 3, data_to_add);
        data_to_add = key.rxpp_pd_tc;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_UC_IBM_TC_MAP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.rxpdr_ibm_tc_map_result.is_flb;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.rxpdr_ibm_tc_map_result.tc_offset;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_uc_ibm_tc_map_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_udp_fi_core_tcam_table_key_t& key, const npl_udp_fi_core_tcam_table_key_t& mask, const npl_udp_fi_core_tcam_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ethertype_or_tpid;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.ethertype_or_tpid;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_UDP_FI_CORE_TCAM_TABLE_ACTION_NEXT_HEADER_INFO) {
            data_to_add = value.payloads.next_header_info.payload.start_new_layer;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_macro_id;
            target_payload.set_bits(10, 5, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_header_type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_udp_fi_core_tcam_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_urpf_ipsa_dest_is_lpts_static_table_key_t& key, const npl_urpf_ipsa_dest_is_lpts_static_table_key_t& mask, const npl_urpf_ipsa_dest_is_lpts_static_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(1, 0, 0x1ULL);
        target_mask.set_bits(1, 0, 0x3ULL);
        data_to_add = key.ipsa_dest_prefix;
        target_key.set_bits(6, 2, data_to_add);
        data_to_add = mask.ipsa_dest_prefix;
        target_mask.set_bits(6, 2, data_to_add);
        
        if (value.action == NPL_URPF_IPSA_DEST_IS_LPTS_STATIC_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.is_lpts_prefix;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_urpf_ipsa_dest_is_lpts_static_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_vlan0_fi_core_tcam_table_key_t& key, const npl_vlan0_fi_core_tcam_table_key_t& mask, const npl_vlan0_fi_core_tcam_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ethertype_or_tpid;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.ethertype_or_tpid;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_VLAN0_FI_CORE_TCAM_TABLE_ACTION_NEXT_HEADER_INFO) {
            data_to_add = value.payloads.next_header_info.payload.start_new_layer;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_macro_id;
            target_payload.set_bits(10, 5, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_header_type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vlan0_fi_core_tcam_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_vlan1_fi_core_tcam_table_key_t& key, const npl_vlan1_fi_core_tcam_table_key_t& mask, const npl_vlan1_fi_core_tcam_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ethertype_or_tpid;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.ethertype_or_tpid;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_VLAN1_FI_CORE_TCAM_TABLE_ACTION_NEXT_HEADER_INFO) {
            data_to_add = value.payloads.next_header_info.payload.start_new_layer;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_macro_id;
            target_payload.set_bits(10, 5, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_header_type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vlan1_fi_core_tcam_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_vlan_edit_tpid1_profile_hw_table_key_t& key, const npl_vlan_edit_tpid1_profile_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.vlan_edit_info_tpid_profile;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_VLAN_EDIT_TPID1_PROFILE_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vlan_edit_info_tpid1;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vlan_edit_tpid1_profile_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_vlan_edit_tpid2_profile_hw_table_key_t& key, const npl_vlan_edit_tpid2_profile_hw_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(2, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.vlan_edit_info_tpid_profile;
        target_key.set_bits(1, 0, data_to_add);
        
        if (value.action == NPL_VLAN_EDIT_TPID2_PROFILE_HW_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vlan_edit_info_tpid2;
            target_payload.set_bits(15, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vlan_edit_tpid2_profile_hw_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_vlan_format_table_key_t& key, const npl_vlan_format_table_key_t& mask, const npl_vlan_format_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (context == NPL_NETWORK_CONTEXT && database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(32, 16);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.vlan_profile;
        target_key.set_bits(14, 11, data_to_add);
        data_to_add = mask.vlan_profile;
        target_mask.set_bits(14, 11, data_to_add);
        data_to_add = key.header_1_type;
        target_key.set_bits(10, 6, data_to_add);
        data_to_add = mask.header_1_type;
        target_mask.set_bits(10, 6, data_to_add);
        data_to_add = key.header_2_type;
        target_key.set_bits(5, 1, data_to_add);
        data_to_add = mask.header_2_type;
        target_mask.set_bits(5, 1, data_to_add);
        data_to_add = key.is_priority;
        target_key.set_bits(0, 0, data_to_add);
        data_to_add = mask.is_priority;
        target_mask.set_bits(0, 0, data_to_add);
        
        if (value.action == NPL_VLAN_FORMAT_TABLE_ACTION_UPDATE) {
            data_to_add = value.payloads.update.vid_from_port;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.update.mac_termination_type;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.update.sm_selector;
            target_payload.set_bits(10, 7, data_to_add);
            data_to_add = value.payloads.update.sm_logical_db;
            target_payload.set_bits(6, 3, data_to_add);
            data_to_add = value.payloads.update.pcp_dei_from_port;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.update.dummy_bit;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.update.enable_l3_qos;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vlan_format_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_ternary_entry(npl_context_e context, size_t database_id, const npl_vlan_pe_fi_core_tcam_table_key_t& key, const npl_vlan_pe_fi_core_tcam_table_key_t& mask, const npl_vlan_pe_fi_core_tcam_table_value_t& value, std::vector<ternary_table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        ternary_table_generic_entry_t current_entry = ternary_table_generic_entry_t(16, 12);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_mask = current_entry.mask;
        NPLAPI_UNUSED(target_mask);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.ethertype_or_tpid;
        target_key.set_bits(15, 0, data_to_add);
        data_to_add = mask.ethertype_or_tpid;
        target_mask.set_bits(15, 0, data_to_add);
        
        if (value.action == NPL_VLAN_PE_FI_CORE_TCAM_TABLE_ACTION_NEXT_HEADER_INFO) {
            data_to_add = value.payloads.next_header_info.payload.start_new_layer;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_macro_id;
            target_payload.set_bits(10, 5, data_to_add);
            data_to_add = value.payloads.next_header_info.payload.next_header_type;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

ternary_table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vlan_pe_fi_core_tcam_table_key_t& key)
{
    return ternary_table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_vni_table_key_t& key, const npl_vni_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(28, 38);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0x8ULL);
        data_to_add = key.vni;
        target_key.set_bits(27, 4, data_to_add);
        
        if (value.action == NPL_VNI_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vni_table_result.vlan_profile;
            target_payload.set_bits(37, 34, data_to_add);
            data_to_add = value.payloads.vni_table_result.l2_relay_attributes_id.id;
            target_payload.set_bits(33, 20, data_to_add);
            data_to_add = value.payloads.vni_table_result.vni_counter.update_or_read;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.vni_table_result.vni_counter.cb_id;
            target_payload.set_bits(18, 13, data_to_add);
            data_to_add = value.payloads.vni_table_result.vni_counter.cb_set_base;
            target_payload.set_bits(12, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vni_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_key_t& key, const npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(11, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(10, 6, data_to_add);
        data_to_add = key.buffer_pool_available_level;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = key.buffer_voq_size_level;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_BUFFERS_CONSUMPTION_LUT_FOR_DEQ_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[15].value;
            target_payload.set_bits(63, 60, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[14].value;
            target_payload.set_bits(59, 56, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[13].value;
            target_payload.set_bits(55, 52, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[12].value;
            target_payload.set_bits(51, 48, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[11].value;
            target_payload.set_bits(47, 44, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[10].value;
            target_payload.set_bits(43, 40, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[9].value;
            target_payload.set_bits(39, 36, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[8].value;
            target_payload.set_bits(35, 32, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[7].value;
            target_payload.set_bits(31, 28, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[6].value;
            target_payload.set_bits(27, 24, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[5].value;
            target_payload.set_bits(23, 20, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[4].value;
            target_payload.set_bits(19, 16, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[3].value;
            target_payload.set_bits(15, 12, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[2].value;
            target_payload.set_bits(11, 8, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[1].value;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_deq_result.congestion_level[0].value;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t& key, const npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(11, 176);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(10, 6, data_to_add);
        data_to_add = key.buffer_pool_available_level;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = key.buffer_voq_size_level;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_BUFFERS_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[15].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(175, 174, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[14].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(173, 172, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[13].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(171, 170, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[12].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(169, 168, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[11].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(167, 166, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[10].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(165, 164, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[9].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(163, 162, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[8].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(161, 160, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[7].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(159, 158, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[6].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(157, 156, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[5].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(155, 154, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[4].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(153, 152, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[3].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(151, 150, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[2].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(149, 148, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[1].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(147, 146, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow.mark_color[0].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(145, 144, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_y.mark_yellow_u;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(175, 144, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[15].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 142, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[14].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(141, 140, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[13].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(139, 138, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[12].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(137, 136, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[11].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(135, 134, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[10].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(133, 132, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[9].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(131, 130, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[8].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(129, 128, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[7].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(127, 126, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[6].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(125, 124, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[5].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(123, 122, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[4].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(121, 120, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[3].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(119, 118, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[2].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(117, 116, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[1].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(115, 114, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green.mark_color[0].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(113, 112, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.mark_g.mark_green_u;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(143, 112, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[15].value;
            target_payload.set_bits(111, 111, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[14].value;
            target_payload.set_bits(110, 110, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[13].value;
            target_payload.set_bits(109, 109, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[12].value;
            target_payload.set_bits(108, 108, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[11].value;
            target_payload.set_bits(107, 107, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[10].value;
            target_payload.set_bits(106, 106, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[9].value;
            target_payload.set_bits(105, 105, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[8].value;
            target_payload.set_bits(104, 104, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[7].value;
            target_payload.set_bits(103, 103, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[6].value;
            target_payload.set_bits(102, 102, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[5].value;
            target_payload.set_bits(101, 101, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[4].value;
            target_payload.set_bits(100, 100, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[3].value;
            target_payload.set_bits(99, 99, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[2].value;
            target_payload.set_bits(98, 98, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[1].value;
            target_payload.set_bits(97, 97, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.evict_to_dram[0].value;
            target_payload.set_bits(96, 96, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[15].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 93, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[14].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(92, 90, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[13].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(89, 87, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[12].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(86, 84, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[11].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(83, 81, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[10].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(80, 78, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[9].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(77, 75, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[8].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(74, 72, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[7].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(71, 69, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[6].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(68, 66, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[5].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(65, 63, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[4].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(62, 60, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[3].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(59, 57, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[2].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(56, 54, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[1].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(53, 51, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow.drop_color[0].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(50, 48, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_y.drop_yellow_u;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(95, 48, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[15].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 45, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[14].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(44, 42, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[13].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(41, 39, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[12].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(38, 36, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[11].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(35, 33, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[10].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(32, 30, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[9].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(29, 27, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[8].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(26, 24, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[7].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(23, 21, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[6].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(20, 18, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[5].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(17, 15, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[4].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(14, 12, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[3].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(11, 9, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[2].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(8, 6, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[1].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(5, 3, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green.drop_color[0].value;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(2, 0, data_to_add);
            }
            data_to_add = value.payloads.voq_cgm_slice_buffers_consumption_lut_for_enq_result.drop_g.drop_green_u;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(47, 0, data_to_add);
            }
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_drop_green_probability_selector_table_key_t& key, const npl_voq_cgm_slice_drop_green_probability_selector_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_size_range;
        target_key.set_bits(7, 5, data_to_add);
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_DROP_GREEN_PROBABILITY_SELECTOR_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[5].value;
            target_payload.set_bits(29, 25, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[4].value;
            target_payload.set_bits(24, 20, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[3].value;
            target_payload.set_bits(19, 15, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[2].value;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[1].value;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[0].value;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_drop_green_probability_selector_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_drop_yellow_probability_selector_table_key_t& key, const npl_voq_cgm_slice_drop_yellow_probability_selector_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_size_range;
        target_key.set_bits(7, 5, data_to_add);
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_DROP_YELLOW_PROBABILITY_SELECTOR_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[5].value;
            target_payload.set_bits(29, 25, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[4].value;
            target_payload.set_bits(24, 20, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[3].value;
            target_payload.set_bits(19, 15, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[2].value;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[1].value;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_drop_color_probability_selector_results.drop_prob[0].value;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_drop_yellow_probability_selector_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_key_t& key, const npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 2);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.all_evicted_voq_buff_consump_level;
        target_key.set_bits(9, 8, data_to_add);
        data_to_add = key.evicted_profile_id;
        target_key.set_bits(7, 6, data_to_add);
        data_to_add = key.buffer_pool_available_level;
        target_key.set_bits(5, 4, data_to_add);
        data_to_add = key.buffer_voq_size_level;
        target_key.set_bits(3, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_EVICTED_BUFFERS_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_results.drop_yellow;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_results.drop_green;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_key_t& key, const npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 2);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.all_evicted_voq_buff_consump_level;
        target_key.set_bits(7, 6, data_to_add);
        data_to_add = key.free_dram_cntx;
        target_key.set_bits(5, 5, data_to_add);
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_EVICTION_OK_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_eviction_ok_lut_for_enq_table_results.drop_on_eviction;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_eviction_ok_lut_for_enq_table_results.eviction_ok;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_mark_probability_selector_table_key_t& key, const npl_voq_cgm_slice_mark_probability_selector_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(8, 30);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.packet_size_range;
        target_key.set_bits(7, 5, data_to_add);
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_MARK_PROBABILITY_SELECTOR_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_mark_color_probability_selector_results.mark_yellow_prob[2].value;
            target_payload.set_bits(29, 25, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_mark_color_probability_selector_results.mark_yellow_prob[1].value;
            target_payload.set_bits(24, 20, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_mark_color_probability_selector_results.mark_yellow_prob[0].value;
            target_payload.set_bits(19, 15, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_mark_color_probability_selector_results.mark_green_prob[2].value;
            target_payload.set_bits(14, 10, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_mark_color_probability_selector_results.mark_green_prob[1].value;
            target_payload.set_bits(9, 5, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_mark_color_probability_selector_results.mark_green_prob[0].value;
            target_payload.set_bits(4, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_mark_probability_selector_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_key_t& key, const npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 64);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(9, 5, data_to_add);
        data_to_add = key.pd_pool_available_level;
        target_key.set_bits(4, 3, data_to_add);
        data_to_add = key.pd_voq_fill_level;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_PD_CONSUMPTION_LUT_FOR_DEQ_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[15].value;
            target_payload.set_bits(63, 60, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[14].value;
            target_payload.set_bits(59, 56, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[13].value;
            target_payload.set_bits(55, 52, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[12].value;
            target_payload.set_bits(51, 48, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[11].value;
            target_payload.set_bits(47, 44, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[10].value;
            target_payload.set_bits(43, 40, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[9].value;
            target_payload.set_bits(39, 36, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[8].value;
            target_payload.set_bits(35, 32, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[7].value;
            target_payload.set_bits(31, 28, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[6].value;
            target_payload.set_bits(27, 24, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[5].value;
            target_payload.set_bits(23, 20, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[4].value;
            target_payload.set_bits(19, 16, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[3].value;
            target_payload.set_bits(15, 12, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[2].value;
            target_payload.set_bits(11, 8, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[1].value;
            target_payload.set_bits(7, 4, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_deq_result.congestion_level[0].value;
            target_payload.set_bits(3, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t& key, const npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(10, 80);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(9, 5, data_to_add);
        data_to_add = key.pd_pool_available_level;
        target_key.set_bits(4, 3, data_to_add);
        data_to_add = key.pd_voq_fill_level;
        target_key.set_bits(2, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_PD_CONSUMPTION_LUT_FOR_ENQ_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[15].value;
            target_payload.set_bits(79, 79, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[14].value;
            target_payload.set_bits(78, 78, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[13].value;
            target_payload.set_bits(77, 77, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[12].value;
            target_payload.set_bits(76, 76, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[11].value;
            target_payload.set_bits(75, 75, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[10].value;
            target_payload.set_bits(74, 74, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[9].value;
            target_payload.set_bits(73, 73, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[8].value;
            target_payload.set_bits(72, 72, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[7].value;
            target_payload.set_bits(71, 71, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[6].value;
            target_payload.set_bits(70, 70, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[5].value;
            target_payload.set_bits(69, 69, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[4].value;
            target_payload.set_bits(68, 68, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[3].value;
            target_payload.set_bits(67, 67, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[2].value;
            target_payload.set_bits(66, 66, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[1].value;
            target_payload.set_bits(65, 65, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_yellow[0].value;
            target_payload.set_bits(64, 64, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[15].value;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[14].value;
            target_payload.set_bits(62, 62, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[13].value;
            target_payload.set_bits(61, 61, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[12].value;
            target_payload.set_bits(60, 60, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[11].value;
            target_payload.set_bits(59, 59, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[10].value;
            target_payload.set_bits(58, 58, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[9].value;
            target_payload.set_bits(57, 57, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[8].value;
            target_payload.set_bits(56, 56, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[7].value;
            target_payload.set_bits(55, 55, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[6].value;
            target_payload.set_bits(54, 54, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[5].value;
            target_payload.set_bits(53, 53, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[4].value;
            target_payload.set_bits(52, 52, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[3].value;
            target_payload.set_bits(51, 51, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[2].value;
            target_payload.set_bits(50, 50, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[1].value;
            target_payload.set_bits(49, 49, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.mark_green[0].value;
            target_payload.set_bits(48, 48, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[15].value;
            target_payload.set_bits(47, 47, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[14].value;
            target_payload.set_bits(46, 46, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[13].value;
            target_payload.set_bits(45, 45, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[12].value;
            target_payload.set_bits(44, 44, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[11].value;
            target_payload.set_bits(43, 43, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[10].value;
            target_payload.set_bits(42, 42, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[9].value;
            target_payload.set_bits(41, 41, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[8].value;
            target_payload.set_bits(40, 40, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[7].value;
            target_payload.set_bits(39, 39, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[6].value;
            target_payload.set_bits(38, 38, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[5].value;
            target_payload.set_bits(37, 37, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[4].value;
            target_payload.set_bits(36, 36, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[3].value;
            target_payload.set_bits(35, 35, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[2].value;
            target_payload.set_bits(34, 34, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[1].value;
            target_payload.set_bits(33, 33, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.evict_to_dram[0].value;
            target_payload.set_bits(32, 32, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[15].value;
            target_payload.set_bits(31, 31, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[14].value;
            target_payload.set_bits(30, 30, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[13].value;
            target_payload.set_bits(29, 29, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[12].value;
            target_payload.set_bits(28, 28, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[11].value;
            target_payload.set_bits(27, 27, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[10].value;
            target_payload.set_bits(26, 26, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[9].value;
            target_payload.set_bits(25, 25, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[8].value;
            target_payload.set_bits(24, 24, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[7].value;
            target_payload.set_bits(23, 23, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[6].value;
            target_payload.set_bits(22, 22, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[5].value;
            target_payload.set_bits(21, 21, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[4].value;
            target_payload.set_bits(20, 20, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[3].value;
            target_payload.set_bits(19, 19, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[2].value;
            target_payload.set_bits(18, 18, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[1].value;
            target_payload.set_bits(17, 17, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_yellow[0].value;
            target_payload.set_bits(16, 16, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[15].value;
            target_payload.set_bits(15, 15, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[14].value;
            target_payload.set_bits(14, 14, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[13].value;
            target_payload.set_bits(13, 13, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[12].value;
            target_payload.set_bits(12, 12, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[11].value;
            target_payload.set_bits(11, 11, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[10].value;
            target_payload.set_bits(10, 10, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[9].value;
            target_payload.set_bits(9, 9, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[8].value;
            target_payload.set_bits(8, 8, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[7].value;
            target_payload.set_bits(7, 7, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[6].value;
            target_payload.set_bits(6, 6, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[5].value;
            target_payload.set_bits(5, 5, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[4].value;
            target_payload.set_bits(4, 4, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[3].value;
            target_payload.set_bits(3, 3, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[2].value;
            target_payload.set_bits(2, 2, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[1].value;
            target_payload.set_bits(1, 1, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_pd_consumption_lut_for_enq_result.drop_green[0].value;
            target_payload.set_bits(0, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t& key, const npl_voq_cgm_slice_profile_buff_region_thresholds_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 210);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_PROFILE_BUFF_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[14].value;
            target_payload.set_bits(209, 196, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[13].value;
            target_payload.set_bits(195, 182, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[12].value;
            target_payload.set_bits(181, 168, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[11].value;
            target_payload.set_bits(167, 154, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[10].value;
            target_payload.set_bits(153, 140, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[9].value;
            target_payload.set_bits(139, 126, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[8].value;
            target_payload.set_bits(125, 112, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[7].value;
            target_payload.set_bits(111, 98, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[6].value;
            target_payload.set_bits(97, 84, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[5].value;
            target_payload.set_bits(83, 70, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[4].value;
            target_payload.set_bits(69, 56, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[3].value;
            target_payload.set_bits(55, 42, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[2].value;
            target_payload.set_bits(41, 28, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[1].value;
            target_payload.set_bits(27, 14, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_buff_region_thresholds_results.q_size_buff_region[0].value;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_profile_buff_region_thresholds_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t& key, const npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 120);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_PROFILE_PKT_ENQ_TIME_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[14].value;
            target_payload.set_bits(119, 112, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[13].value;
            target_payload.set_bits(111, 104, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[12].value;
            target_payload.set_bits(103, 96, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[11].value;
            target_payload.set_bits(95, 88, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[10].value;
            target_payload.set_bits(87, 80, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[9].value;
            target_payload.set_bits(79, 72, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[8].value;
            target_payload.set_bits(71, 64, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[7].value;
            target_payload.set_bits(63, 56, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[6].value;
            target_payload.set_bits(55, 48, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[5].value;
            target_payload.set_bits(47, 40, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[4].value;
            target_payload.set_bits(39, 32, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[3].value;
            target_payload.set_bits(31, 24, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[2].value;
            target_payload.set_bits(23, 16, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[1].value;
            target_payload.set_bits(15, 8, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_enq_time_region_thresholds_results.pkt_enq_time_region[0].value;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t& key, const npl_voq_cgm_slice_profile_pkt_region_thresholds_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 98);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_PROFILE_PKT_REGION_THRESHOLDS_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.q_size_pkt_region[6].value;
            target_payload.set_bits(97, 84, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.q_size_pkt_region[5].value;
            target_payload.set_bits(83, 70, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.q_size_pkt_region[4].value;
            target_payload.set_bits(69, 56, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.q_size_pkt_region[3].value;
            target_payload.set_bits(55, 42, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.q_size_pkt_region[2].value;
            target_payload.set_bits(41, 28, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.q_size_pkt_region[1].value;
            target_payload.set_bits(27, 14, data_to_add);
            data_to_add = value.payloads.voq_cgm_slice_profile_pkt_region_thresholds_results.q_size_pkt_region[0].value;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_profile_pkt_region_thresholds_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_slice_cgm_profile_table_key_t& key, const npl_voq_cgm_slice_slice_cgm_profile_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 3);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.profile_id.value;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_SLICE_SLICE_CGM_PROFILE_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_slice_slice_cgm_profile_result.counter_id;
            target_payload.set_bits(2, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_slice_slice_cgm_profile_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_voq_cgm_wred_probability_table_key_t& key, const npl_voq_cgm_wred_probability_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(5, 17);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.region_id;
        target_key.set_bits(4, 0, data_to_add);
        
        if (value.action == NPL_VOQ_CGM_WRED_PROBABILITY_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.voq_cgm_wred_probability_results.probability.value;
            target_payload.set_bits(16, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_voq_cgm_wred_probability_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_vsid_table_key_t& key, const npl_vsid_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(28, 14);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        target_key.set_bits(3, 0, 0xfULL);
        data_to_add = key.vsid;
        target_key.set_bits(27, 4, data_to_add);
        
        if (value.action == NPL_VSID_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.l2_relay_attributes_id;
            target_payload.set_bits(13, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vsid_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

void nplapi_table_entry_translation::translate_entry(npl_context_e context, size_t database_id, const npl_vxlan_l2_dlp_table_key_t& key, const npl_vxlan_l2_dlp_table_value_t& value, std::vector<table_generic_entry_t>& result, npu_features_t* npu_features)
{
    uint64_t data_to_add;
    NPLAPI_UNUSED(data_to_add);
    
    if (database_id == 0) {
        table_generic_entry_t current_entry = table_generic_entry_t(22, 76);
        
        bit_vector& target_key = current_entry.key;
        NPLAPI_UNUSED(target_key);
        bit_vector& target_payload = current_entry.payload;
        NPLAPI_UNUSED(target_payload);
        
        data_to_add = key.l2_dlp_id_key_id;
        target_key.set_bits(21, 4, data_to_add);
        
        if (value.action == NPL_VXLAN_L2_DLP_TABLE_ACTION_WRITE) {
            data_to_add = value.payloads.vxlan_tunnel_attributes.group_policy_encap;
            target_payload.set_bits(75, 75, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.stp_state_is_block;
            target_payload.set_bits(74, 74, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.lp_profile;
            target_payload.set_bits(73, 72, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.ttl_mode;
            target_payload.set_bits(71, 71, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.disabled;
            target_payload.set_bits(70, 70, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.lp_set;
            target_payload.set_bits(69, 69, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.qos_info.is_group_qos;
            target_payload.set_bits(68, 68, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.qos_info.qos_id;
            target_payload.set_bits(67, 64, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.p_counter.update_or_read;
            target_payload.set_bits(63, 63, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.p_counter.cb_id;
            target_payload.set_bits(62, 57, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.p_counter.cb_set_base;
            target_payload.set_bits(56, 44, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.sip_index;
            target_payload.set_bits(43, 40, data_to_add);
            data_to_add = value.payloads.vxlan_tunnel_attributes.dip.ipv6_dip_index;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 28, data_to_add);
            }
            data_to_add = value.payloads.vxlan_tunnel_attributes.dip.ipv4_dip;
            if (data_to_add != 0ULL) {
                target_payload.set_bits(39, 8, data_to_add);
            }
            data_to_add = value.payloads.vxlan_tunnel_attributes.ttl;
            target_payload.set_bits(7, 0, data_to_add);
        }
        
        result.push_back(current_entry);
    }
    
}

table_generic_entry_t nplapi_table_entry_translation::default_action(npl_context_e context, size_t database_id, const npl_vxlan_l2_dlp_table_key_t& key)
{
    return table_generic_entry_t(0, 0);
}

