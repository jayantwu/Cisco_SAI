// This file has been automatically generated in nplapi package. Do not edit it manually.
// Generated by nplapi_utilities.py at 2021-05-12 16:09:28


#define NPLAPI_NUM_SLICES 6
#include "nplapi/device_tables.h"
#include "device_tables_helper.h"
#include "common/defines.h"
#include "common/gen_utils.h"
#include "common/logger.h"

namespace silicon_one
{

la_device_id_t
get_device_id(const device_tables* tables)
{
    return tables->get_device_id();
}

la_status
device_tables::initialize_tables(translator_creator& creator)
{
    la_status retval;
    
    // Table pre-initialization
    retval = creator.pre_table_init();
    return_on_error(retval);
    
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(acl_map_fi_header_type_to_protocol_number_table); slice_id++) {
        acl_map_fi_header_type_to_protocol_number_table[slice_id] = std::make_shared<npl_acl_map_fi_header_type_to_protocol_number_table_t>();
        retval = init_table(creator, acl_map_fi_header_type_to_protocol_number_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: acl_map_fi_header_type_to_protocol_number_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(additional_labels_table); slice_id++) {
        additional_labels_table[slice_id] = std::make_shared<npl_additional_labels_table_t>();
        retval = init_table(creator, additional_labels_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: additional_labels_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    all_reachable_vector = std::make_shared<npl_all_reachable_vector_t>();
    retval = init_table(creator, all_reachable_vector, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: all_reachable_vector, %s", la_status2str(retval).c_str());
    
    bfd_desired_tx_interval_table = std::make_shared<npl_bfd_desired_tx_interval_table_t>();
    retval = init_table(creator, bfd_desired_tx_interval_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_desired_tx_interval_table, %s", la_status2str(retval).c_str());
    
    bfd_detection_multiple_table = std::make_shared<npl_bfd_detection_multiple_table_t>();
    retval = init_table(creator, bfd_detection_multiple_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_detection_multiple_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(bfd_event_queue_table); slice_id++) {
        bfd_event_queue_table[slice_id] = std::make_shared<npl_bfd_event_queue_table_t>();
        retval = init_table(creator, bfd_event_queue_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_event_queue_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    bfd_inject_inner_da_high_table = std::make_shared<npl_bfd_inject_inner_da_high_table_t>();
    retval = init_table(creator, bfd_inject_inner_da_high_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_inject_inner_da_high_table, %s", la_status2str(retval).c_str());
    
    bfd_inject_inner_da_low_table = std::make_shared<npl_bfd_inject_inner_da_low_table_t>();
    retval = init_table(creator, bfd_inject_inner_da_low_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_inject_inner_da_low_table, %s", la_status2str(retval).c_str());
    
    bfd_inject_inner_ethernet_header_static_table = std::make_shared<npl_bfd_inject_inner_ethernet_header_static_table_t>();
    retval = init_table(creator, bfd_inject_inner_ethernet_header_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_inject_inner_ethernet_header_static_table, %s", la_status2str(retval).c_str());
    
    bfd_inject_ttl_static_table = std::make_shared<npl_bfd_inject_ttl_static_table_t>();
    retval = init_table(creator, bfd_inject_ttl_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_inject_ttl_static_table, %s", la_status2str(retval).c_str());
    
    bfd_ipv6_sip_A_table = std::make_shared<npl_bfd_ipv6_sip_A_table_t>();
    retval = init_table(creator, bfd_ipv6_sip_A_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_ipv6_sip_A_table, %s", la_status2str(retval).c_str());
    
    bfd_ipv6_sip_B_table = std::make_shared<npl_bfd_ipv6_sip_B_table_t>();
    retval = init_table(creator, bfd_ipv6_sip_B_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_ipv6_sip_B_table, %s", la_status2str(retval).c_str());
    
    bfd_ipv6_sip_C_table = std::make_shared<npl_bfd_ipv6_sip_C_table_t>();
    retval = init_table(creator, bfd_ipv6_sip_C_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_ipv6_sip_C_table, %s", la_status2str(retval).c_str());
    
    bfd_ipv6_sip_D_table = std::make_shared<npl_bfd_ipv6_sip_D_table_t>();
    retval = init_table(creator, bfd_ipv6_sip_D_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_ipv6_sip_D_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(bfd_punt_encap_static_table); slice_id++) {
        bfd_punt_encap_static_table[slice_id] = std::make_shared<npl_bfd_punt_encap_static_table_t>();
        retval = init_table(creator, bfd_punt_encap_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_punt_encap_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    bfd_required_tx_interval_table = std::make_shared<npl_bfd_required_tx_interval_table_t>();
    retval = init_table(creator, bfd_required_tx_interval_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_required_tx_interval_table, %s", la_status2str(retval).c_str());
    
    bfd_rx_table = std::make_shared<npl_bfd_rx_table_t>();
    retval = init_table(creator, bfd_rx_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_rx_table, %s", la_status2str(retval).c_str());
    
    bfd_set_inject_type_static_table = std::make_shared<npl_bfd_set_inject_type_static_table_t>();
    retval = init_table(creator, bfd_set_inject_type_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_set_inject_type_static_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(bfd_udp_port_map_static_table); slice_id++) {
        bfd_udp_port_map_static_table[slice_id] = std::make_shared<npl_bfd_udp_port_map_static_table_t>();
        retval = init_table(creator, bfd_udp_port_map_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_udp_port_map_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    bfd_udp_port_static_table = std::make_shared<npl_bfd_udp_port_static_table_t>();
    retval = init_table(creator, bfd_udp_port_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bfd_udp_port_static_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(bitmap_oqg_map_table); slice_id++) {
        bitmap_oqg_map_table[slice_id] = std::make_shared<npl_bitmap_oqg_map_table_t>();
        retval = init_table(creator, bitmap_oqg_map_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: bitmap_oqg_map_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    bvn_tc_map_table = std::make_shared<npl_bvn_tc_map_table_t>();
    retval = init_table(creator, bvn_tc_map_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: bvn_tc_map_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(calc_checksum_enable_table); slice_id++) {
        calc_checksum_enable_table[slice_id] = std::make_shared<npl_calc_checksum_enable_table_t>();
        retval = init_table(creator, calc_checksum_enable_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: calc_checksum_enable_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ccm_flags_table = std::make_shared<npl_ccm_flags_table_t>();
    retval = init_table(creator, ccm_flags_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ccm_flags_table, %s", la_status2str(retval).c_str());
    
    cif2npa_c_lri_macro = std::make_shared<npl_cif2npa_c_lri_macro_t>();
    retval = init_table(creator, cif2npa_c_lri_macro, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: cif2npa_c_lri_macro, %s", la_status2str(retval).c_str());
    
    cif2npa_c_mps_macro = std::make_shared<npl_cif2npa_c_mps_macro_t>();
    retval = init_table(creator, cif2npa_c_mps_macro, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: cif2npa_c_mps_macro, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(cong_level_ecn_remap_map_table); slice_id++) {
        cong_level_ecn_remap_map_table[slice_id] = std::make_shared<npl_cong_level_ecn_remap_map_table_t>();
        retval = init_table(creator, cong_level_ecn_remap_map_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: cong_level_ecn_remap_map_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    counters_block_config_table = std::make_shared<npl_counters_block_config_table_t>();
    retval = init_table(creator, counters_block_config_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: counters_block_config_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(counters_voq_block_map_table); slice_id++) {
        counters_voq_block_map_table[slice_id] = std::make_shared<npl_counters_voq_block_map_table_t>();
        retval = init_table(creator, counters_voq_block_map_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: counters_voq_block_map_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    cud_is_multicast_bitmap = std::make_shared<npl_cud_is_multicast_bitmap_t>();
    retval = init_table(creator, cud_is_multicast_bitmap, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: cud_is_multicast_bitmap, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(cud_narrow_hw_table); slice_id++) {
        cud_narrow_hw_table[slice_id] = std::make_shared<npl_cud_narrow_hw_table_t>();
        retval = init_table(creator, cud_narrow_hw_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: cud_narrow_hw_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(cud_wide_hw_table); slice_id++) {
        cud_wide_hw_table[slice_id] = std::make_shared<npl_cud_wide_hw_table_t>();
        retval = init_table(creator, cud_wide_hw_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: cud_wide_hw_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(db_access_ingress_vlan_membership_table_lu_d_res_c); slice_id++) {
        db_access_ingress_vlan_membership_table_lu_d_res_c[slice_id] = std::make_shared<npl_db_access_ingress_vlan_membership_table_lu_d_res_c_t>();
        retval = init_table(creator, db_access_ingress_vlan_membership_table_lu_d_res_c[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: db_access_ingress_vlan_membership_table_lu_d_res_c(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(db_access_ingress_vlan_membership_table_lu_d_res_d); slice_id++) {
        db_access_ingress_vlan_membership_table_lu_d_res_d[slice_id] = std::make_shared<npl_db_access_ingress_vlan_membership_table_lu_d_res_d_t>();
        retval = init_table(creator, db_access_ingress_vlan_membership_table_lu_d_res_d[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: db_access_ingress_vlan_membership_table_lu_d_res_d(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(db_access_per_port_destination_table); slice_id++) {
        db_access_per_port_destination_table[slice_id] = std::make_shared<npl_db_access_per_port_destination_table_t>();
        retval = init_table(creator, db_access_per_port_destination_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: db_access_per_port_destination_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(db_access_transmit_per_dest_port_npu_host_macro_stamping_table); slice_id++) {
        db_access_transmit_per_dest_port_npu_host_macro_stamping_table[slice_id] = std::make_shared<npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_t>();
        retval = init_table(creator, db_access_transmit_per_dest_port_npu_host_macro_stamping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: db_access_transmit_per_dest_port_npu_host_macro_stamping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(default_egress_ipv4_sec_acl_table); slice_id++) {
        default_egress_ipv4_sec_acl_table[slice_id] = std::make_shared<npl_default_egress_ipv4_sec_acl_table_t>();
        retval = init_table(creator, default_egress_ipv4_sec_acl_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: default_egress_ipv4_sec_acl_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(default_egress_ipv6_acl_sec_table); slice_id++) {
        default_egress_ipv6_acl_sec_table[slice_id] = std::make_shared<npl_default_egress_ipv6_acl_sec_table_t>();
        retval = init_table(creator, default_egress_ipv6_acl_sec_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: default_egress_ipv6_acl_sec_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    dest_type_decoding_table = std::make_shared<npl_dest_type_decoding_table_t>();
    retval = init_table(creator, dest_type_decoding_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: dest_type_decoding_table, %s", la_status2str(retval).c_str());
    
    device_mode_table = std::make_shared<npl_device_mode_table_t>();
    retval = init_table(creator, device_mode_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: device_mode_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(dlp0_key_lsb_mapping_table); slice_id++) {
        dlp0_key_lsb_mapping_table[slice_id] = std::make_shared<npl_dlp0_key_lsb_mapping_table_t>();
        retval = init_table(creator, dlp0_key_lsb_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: dlp0_key_lsb_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(dlp1_key_lsb_mapping_table); slice_id++) {
        dlp1_key_lsb_mapping_table[slice_id] = std::make_shared<npl_dlp1_key_lsb_mapping_table_t>();
        retval = init_table(creator, dlp1_key_lsb_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: dlp1_key_lsb_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    dram_cgm_cgm_deq_lut_table = std::make_shared<npl_dram_cgm_cgm_deq_lut_table_t>();
    retval = init_table(creator, dram_cgm_cgm_deq_lut_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: dram_cgm_cgm_deq_lut_table, %s", la_status2str(retval).c_str());
    
    dram_cgm_cgm_lut_table = std::make_shared<npl_dram_cgm_cgm_lut_table_t>();
    retval = init_table(creator, dram_cgm_cgm_lut_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: dram_cgm_cgm_lut_table, %s", la_status2str(retval).c_str());
    
    dsp_dest_msbs_for_ecn_table = std::make_shared<npl_dsp_dest_msbs_for_ecn_table_t>();
    retval = init_table(creator, dsp_dest_msbs_for_ecn_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: dsp_dest_msbs_for_ecn_table, %s", la_status2str(retval).c_str());
    
    dsp_group_policy_table = std::make_shared<npl_dsp_group_policy_table_t>();
    retval = init_table(creator, dsp_group_policy_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: dsp_group_policy_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(dsp_l2_attributes_table); slice_id++) {
        dsp_l2_attributes_table[slice_id] = std::make_shared<npl_dsp_l2_attributes_table_t>();
        retval = init_table(creator, dsp_l2_attributes_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: dsp_l2_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(dsp_l3_attributes_table); slice_id++) {
        dsp_l3_attributes_table[slice_id] = std::make_shared<npl_dsp_l3_attributes_table_t>();
        retval = init_table(creator, dsp_l3_attributes_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: dsp_l3_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(dummy_dip_index_table); slice_id++) {
        dummy_dip_index_table[slice_id] = std::make_shared<npl_dummy_dip_index_table_t>();
        retval = init_table(creator, dummy_dip_index_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: dummy_dip_index_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ecn_remark_static_table); slice_id++) {
        ecn_remark_static_table[slice_id] = std::make_shared<npl_ecn_remark_static_table_t>();
        retval = init_table(creator, ecn_remark_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ecn_remark_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(egress_mac_ipv4_sec_acl_table); slice_id++) {
        egress_mac_ipv4_sec_acl_table[slice_id] = std::make_shared<npl_egress_mac_ipv4_sec_acl_table_t>();
        retval = init_table(creator, egress_mac_ipv4_sec_acl_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: egress_mac_ipv4_sec_acl_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (size_t slice_pair = 0; slice_pair < array_size(egress_nh_and_svi_direct0_table); slice_pair++) {
        egress_nh_and_svi_direct0_table[slice_pair] = std::make_shared<npl_egress_nh_and_svi_direct0_table_t>();
        retval = init_table(creator, egress_nh_and_svi_direct0_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: egress_nh_and_svi_direct0_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    for (size_t slice_pair = 0; slice_pair < array_size(egress_nh_and_svi_direct1_table); slice_pair++) {
        egress_nh_and_svi_direct1_table[slice_pair] = std::make_shared<npl_egress_nh_and_svi_direct1_table_t>();
        retval = init_table(creator, egress_nh_and_svi_direct1_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: egress_nh_and_svi_direct1_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    em_mp_table = std::make_shared<npl_em_mp_table_t>();
    retval = init_table(creator, em_mp_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: em_mp_table, %s", la_status2str(retval).c_str());
    
    encap_data_source_select_table = std::make_shared<npl_encap_data_source_select_table_t>();
    retval = init_table(creator, encap_data_source_select_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: encap_data_source_select_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ene_byte_addition_static_table); slice_id++) {
        ene_byte_addition_static_table[slice_id] = std::make_shared<npl_ene_byte_addition_static_table_t>();
        retval = init_table(creator, ene_byte_addition_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ene_byte_addition_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ene_macro_code_tpid_profile_static_table); slice_id++) {
        ene_macro_code_tpid_profile_static_table[slice_id] = std::make_shared<npl_ene_macro_code_tpid_profile_static_table_t>();
        retval = init_table(creator, ene_macro_code_tpid_profile_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ene_macro_code_tpid_profile_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ene_rewrite_punt_sa_prefix_index_table = std::make_shared<npl_ene_rewrite_punt_sa_prefix_index_table_t>();
    retval = init_table(creator, ene_rewrite_punt_sa_prefix_index_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ene_rewrite_punt_sa_prefix_index_table, %s", la_status2str(retval).c_str());
    
    ene_rewrite_sa_prefix_index_table = std::make_shared<npl_ene_rewrite_sa_prefix_index_table_t>();
    retval = init_table(creator, ene_rewrite_sa_prefix_index_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ene_rewrite_sa_prefix_index_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(erpp_fabric_counters_offset_table); slice_id++) {
        erpp_fabric_counters_offset_table[slice_id] = std::make_shared<npl_erpp_fabric_counters_offset_table_t>();
        retval = init_table(creator, erpp_fabric_counters_offset_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: erpp_fabric_counters_offset_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(erpp_fabric_counters_table); slice_id++) {
        erpp_fabric_counters_table[slice_id] = std::make_shared<npl_erpp_fabric_counters_table_t>();
        retval = init_table(creator, erpp_fabric_counters_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: erpp_fabric_counters_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(eth_meter_profile_mapping_table); slice_id++) {
        eth_meter_profile_mapping_table[slice_id] = std::make_shared<npl_eth_meter_profile_mapping_table_t>();
        retval = init_table(creator, eth_meter_profile_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: eth_meter_profile_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    eth_oam_set_da_mc2_static_table = std::make_shared<npl_eth_oam_set_da_mc2_static_table_t>();
    retval = init_table(creator, eth_oam_set_da_mc2_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: eth_oam_set_da_mc2_static_table, %s", la_status2str(retval).c_str());
    
    eth_oam_set_da_mc_static_table = std::make_shared<npl_eth_oam_set_da_mc_static_table_t>();
    retval = init_table(creator, eth_oam_set_da_mc_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: eth_oam_set_da_mc_static_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(eth_rtf_conf_set_mapping_table); slice_id++) {
        eth_rtf_conf_set_mapping_table[slice_id] = std::make_shared<npl_eth_rtf_conf_set_mapping_table_t>();
        retval = init_table(creator, eth_rtf_conf_set_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: eth_rtf_conf_set_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(eth_type_static_table); slice_id++) {
        eth_type_static_table[slice_id] = std::make_shared<npl_eth_type_static_table_t>();
        retval = init_table(creator, eth_type_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: eth_type_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(eve_drop_mapping_hw_table); slice_id++) {
        eve_drop_mapping_hw_table[slice_id] = std::make_shared<npl_eve_drop_mapping_hw_table_t>();
        retval = init_table(creator, eve_drop_mapping_hw_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: eve_drop_mapping_hw_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(eve_drop_vlan_id_hw_table); slice_id++) {
        eve_drop_vlan_id_hw_table[slice_id] = std::make_shared<npl_eve_drop_vlan_id_hw_table_t>();
        retval = init_table(creator, eve_drop_vlan_id_hw_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: eve_drop_vlan_id_hw_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(eve_interrupt_mapping_hw_table); slice_id++) {
        eve_interrupt_mapping_hw_table[slice_id] = std::make_shared<npl_eve_interrupt_mapping_hw_table_t>();
        retval = init_table(creator, eve_interrupt_mapping_hw_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: eve_interrupt_mapping_hw_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(eve_to_ethernet_ene_static_table); slice_id++) {
        eve_to_ethernet_ene_static_table[slice_id] = std::make_shared<npl_eve_to_ethernet_ene_static_table_t>();
        retval = init_table(creator, eve_to_ethernet_ene_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: eve_to_ethernet_ene_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(event_queue_table); slice_id++) {
        event_queue_table[slice_id] = std::make_shared<npl_event_queue_table_t>();
        retval = init_table(creator, event_queue_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: event_queue_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    external_aux_table = std::make_shared<npl_external_aux_table_t>();
    retval = init_table(creator, external_aux_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: external_aux_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_and_tm_header_size_static_table); slice_id++) {
        fabric_and_tm_header_size_static_table[slice_id] = std::make_shared<npl_fabric_and_tm_header_size_static_table_t>();
        retval = init_table(creator, fabric_and_tm_header_size_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_and_tm_header_size_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    fabric_header_ene_macro_table = std::make_shared<npl_fabric_header_ene_macro_table_t>();
    retval = init_table(creator, fabric_header_ene_macro_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_header_ene_macro_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_header_types_static_table); slice_id++) {
        fabric_header_types_static_table[slice_id] = std::make_shared<npl_fabric_header_types_static_table_t>();
        retval = init_table(creator, fabric_header_types_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_header_types_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    fabric_headers_type_table = std::make_shared<npl_fabric_headers_type_table_t>();
    retval = init_table(creator, fabric_headers_type_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_headers_type_table, %s", la_status2str(retval).c_str());
    
    fabric_init_cfg = std::make_shared<npl_fabric_init_cfg_t>();
    retval = init_table(creator, fabric_init_cfg, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_init_cfg, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_npuh_size_calculation_static_table); slice_id++) {
        fabric_npuh_size_calculation_static_table[slice_id] = std::make_shared<npl_fabric_npuh_size_calculation_static_table_t>();
        retval = init_table(creator, fabric_npuh_size_calculation_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_npuh_size_calculation_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    fabric_out_color_map_table = std::make_shared<npl_fabric_out_color_map_table_t>();
    retval = init_table(creator, fabric_out_color_map_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_out_color_map_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_rx_fwd_error_handling_counter_table); slice_id++) {
        fabric_rx_fwd_error_handling_counter_table[slice_id] = std::make_shared<npl_fabric_rx_fwd_error_handling_counter_table_t>();
        retval = init_table(creator, fabric_rx_fwd_error_handling_counter_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_rx_fwd_error_handling_counter_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_rx_fwd_error_handling_destination_table); slice_id++) {
        fabric_rx_fwd_error_handling_destination_table[slice_id] = std::make_shared<npl_fabric_rx_fwd_error_handling_destination_table_t>();
        retval = init_table(creator, fabric_rx_fwd_error_handling_destination_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_rx_fwd_error_handling_destination_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_rx_term_error_handling_counter_table); slice_id++) {
        fabric_rx_term_error_handling_counter_table[slice_id] = std::make_shared<npl_fabric_rx_term_error_handling_counter_table_t>();
        retval = init_table(creator, fabric_rx_term_error_handling_counter_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_rx_term_error_handling_counter_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_rx_term_error_handling_destination_table); slice_id++) {
        fabric_rx_term_error_handling_destination_table[slice_id] = std::make_shared<npl_fabric_rx_term_error_handling_destination_table_t>();
        retval = init_table(creator, fabric_rx_term_error_handling_destination_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_rx_term_error_handling_destination_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_scaled_mc_map_to_netork_slice_static_table); slice_id++) {
        fabric_scaled_mc_map_to_netork_slice_static_table[slice_id] = std::make_shared<npl_fabric_scaled_mc_map_to_netork_slice_static_table_t>();
        retval = init_table(creator, fabric_scaled_mc_map_to_netork_slice_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_scaled_mc_map_to_netork_slice_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_smcid_threshold_table); slice_id++) {
        fabric_smcid_threshold_table[slice_id] = std::make_shared<npl_fabric_smcid_threshold_table_t>();
        retval = init_table(creator, fabric_smcid_threshold_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_smcid_threshold_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_term_error_checker_static_table); slice_id++) {
        fabric_term_error_checker_static_table[slice_id] = std::make_shared<npl_fabric_term_error_checker_static_table_t>();
        retval = init_table(creator, fabric_term_error_checker_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_term_error_checker_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    fabric_tm_headers_table = std::make_shared<npl_fabric_tm_headers_table_t>();
    retval = init_table(creator, fabric_tm_headers_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_tm_headers_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fabric_transmit_error_checker_static_table); slice_id++) {
        fabric_transmit_error_checker_static_table[slice_id] = std::make_shared<npl_fabric_transmit_error_checker_static_table_t>();
        retval = init_table(creator, fabric_transmit_error_checker_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fabric_transmit_error_checker_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    fe_broadcast_bmp_table = std::make_shared<npl_fe_broadcast_bmp_table_t>();
    retval = init_table(creator, fe_broadcast_bmp_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fe_broadcast_bmp_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fe_smcid_threshold_table); slice_id++) {
        fe_smcid_threshold_table[slice_id] = std::make_shared<npl_fe_smcid_threshold_table_t>();
        retval = init_table(creator, fe_smcid_threshold_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fe_smcid_threshold_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fe_smcid_to_mcid_table); slice_id++) {
        fe_smcid_to_mcid_table[slice_id] = std::make_shared<npl_fe_smcid_to_mcid_table_t>();
        retval = init_table(creator, fe_smcid_to_mcid_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fe_smcid_to_mcid_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    fec_table = std::make_shared<npl_fec_table_t>();
    retval = init_table(creator, fec_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fec_table, %s", la_status2str(retval).c_str());
    
    fec_type_decoding_table = std::make_shared<npl_fec_type_decoding_table_t>();
    retval = init_table(creator, fec_type_decoding_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fec_type_decoding_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fi_core_tcam_table); slice_id++) {
        fi_core_tcam_table[slice_id] = std::make_shared<npl_fi_core_tcam_table_t>();
        retval = init_table(creator, fi_core_tcam_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fi_core_tcam_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fi_macro_config_table); slice_id++) {
        fi_macro_config_table[slice_id] = std::make_shared<npl_fi_macro_config_table_t>();
        retval = init_table(creator, fi_macro_config_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fi_macro_config_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(filb_voq_mapping); slice_id++) {
        filb_voq_mapping[slice_id] = std::make_shared<npl_filb_voq_mapping_t>();
        retval = init_table(creator, filb_voq_mapping[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: filb_voq_mapping(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(first_ene_static_table); slice_id++) {
        first_ene_static_table[slice_id] = std::make_shared<npl_first_ene_static_table_t>();
        retval = init_table(creator, first_ene_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: first_ene_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fixup_destination_for_resolution_static_table); slice_id++) {
        fixup_destination_for_resolution_static_table[slice_id] = std::make_shared<npl_fixup_destination_for_resolution_static_table_t>();
        retval = init_table(creator, fixup_destination_for_resolution_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fixup_destination_for_resolution_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(flc_cache_range_comp_profile_table); slice_id++) {
        flc_cache_range_comp_profile_table[slice_id] = std::make_shared<npl_flc_cache_range_comp_profile_table_t>();
        retval = init_table(creator, flc_cache_range_comp_profile_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: flc_cache_range_comp_profile_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(flc_header_types_array_table); slice_id++) {
        flc_header_types_array_table[slice_id] = std::make_shared<npl_flc_header_types_array_table_t>();
        retval = init_table(creator, flc_header_types_array_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: flc_header_types_array_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(flc_map_header_type_mask_id_table); slice_id++) {
        flc_map_header_type_mask_id_table[slice_id] = std::make_shared<npl_flc_map_header_type_mask_id_table_t>();
        retval = init_table(creator, flc_map_header_type_mask_id_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: flc_map_header_type_mask_id_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(flc_map_header_type_mask_l_table); slice_id++) {
        flc_map_header_type_mask_l_table[slice_id] = std::make_shared<npl_flc_map_header_type_mask_l_table_t>();
        retval = init_table(creator, flc_map_header_type_mask_l_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: flc_map_header_type_mask_l_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(flc_map_header_type_mask_m_table); slice_id++) {
        flc_map_header_type_mask_m_table[slice_id] = std::make_shared<npl_flc_map_header_type_mask_m_table_t>();
        retval = init_table(creator, flc_map_header_type_mask_m_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: flc_map_header_type_mask_m_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(flc_map_header_type_mask_s_table); slice_id++) {
        flc_map_header_type_mask_s_table[slice_id] = std::make_shared<npl_flc_map_header_type_mask_s_table_t>();
        retval = init_table(creator, flc_map_header_type_mask_s_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: flc_map_header_type_mask_s_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(flc_q_range_comp_profile_table); slice_id++) {
        flc_q_range_comp_profile_table[slice_id] = std::make_shared<npl_flc_q_range_comp_profile_table_t>();
        retval = init_table(creator, flc_q_range_comp_profile_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: flc_q_range_comp_profile_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(flc_range_comp_ranges_table); slice_id++) {
        flc_range_comp_ranges_table[slice_id] = std::make_shared<npl_flc_range_comp_ranges_table_t>();
        retval = init_table(creator, flc_range_comp_ranges_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: flc_range_comp_ranges_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    frm_db_fabric_routing_table = std::make_shared<npl_frm_db_fabric_routing_table_t>();
    retval = init_table(creator, frm_db_fabric_routing_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: frm_db_fabric_routing_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fwd_and_encap_types_to_field_a_offset_table); slice_id++) {
        fwd_and_encap_types_to_field_a_offset_table[slice_id] = std::make_shared<npl_fwd_and_encap_types_to_field_a_offset_table_t>();
        retval = init_table(creator, fwd_and_encap_types_to_field_a_offset_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fwd_and_encap_types_to_field_a_offset_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fwd_and_encap_types_to_field_b_offset_table); slice_id++) {
        fwd_and_encap_types_to_field_b_offset_table[slice_id] = std::make_shared<npl_fwd_and_encap_types_to_field_b_offset_table_t>();
        retval = init_table(creator, fwd_and_encap_types_to_field_b_offset_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fwd_and_encap_types_to_field_b_offset_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fwd_bucket_a_lu_data_selector); slice_id++) {
        fwd_bucket_a_lu_data_selector[slice_id] = std::make_shared<npl_fwd_bucket_a_lu_data_selector_t>();
        retval = init_table(creator, fwd_bucket_a_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fwd_bucket_a_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fwd_bucket_b_lu_data_selector); slice_id++) {
        fwd_bucket_b_lu_data_selector[slice_id] = std::make_shared<npl_fwd_bucket_b_lu_data_selector_t>();
        retval = init_table(creator, fwd_bucket_b_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fwd_bucket_b_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fwd_bucket_c_lu_data_selector); slice_id++) {
        fwd_bucket_c_lu_data_selector[slice_id] = std::make_shared<npl_fwd_bucket_c_lu_data_selector_t>();
        retval = init_table(creator, fwd_bucket_c_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fwd_bucket_c_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(fwd_bucket_d_lu_data_selector); slice_id++) {
        fwd_bucket_d_lu_data_selector[slice_id] = std::make_shared<npl_fwd_bucket_d_lu_data_selector_t>();
        retval = init_table(creator, fwd_bucket_d_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: fwd_bucket_d_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    fwd_destination_to_tm_result_data = std::make_shared<npl_fwd_destination_to_tm_result_data_t>();
    retval = init_table(creator, fwd_destination_to_tm_result_data, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fwd_destination_to_tm_result_data, %s", la_status2str(retval).c_str());
    
    fwd_type_to_ive_enable_table = std::make_shared<npl_fwd_type_to_ive_enable_table_t>();
    retval = init_table(creator, fwd_type_to_ive_enable_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: fwd_type_to_ive_enable_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(get_ecm_meter_ptr_table); slice_id++) {
        get_ecm_meter_ptr_table[slice_id] = std::make_shared<npl_get_ecm_meter_ptr_table_t>();
        retval = init_table(creator, get_ecm_meter_ptr_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: get_ecm_meter_ptr_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(get_ingress_ptp_info_and_is_slp_dm_static_table); slice_id++) {
        get_ingress_ptp_info_and_is_slp_dm_static_table[slice_id] = std::make_shared<npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t>();
        retval = init_table(creator, get_ingress_ptp_info_and_is_slp_dm_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: get_ingress_ptp_info_and_is_slp_dm_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(get_l2_rtf_conf_set_and_init_stages); slice_id++) {
        get_l2_rtf_conf_set_and_init_stages[slice_id] = std::make_shared<npl_get_l2_rtf_conf_set_and_init_stages_t>();
        retval = init_table(creator, get_l2_rtf_conf_set_and_init_stages[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: get_l2_rtf_conf_set_and_init_stages(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(get_non_comp_mc_value_static_table); slice_id++) {
        get_non_comp_mc_value_static_table[slice_id] = std::make_shared<npl_get_non_comp_mc_value_static_table_t>();
        retval = init_table(creator, get_non_comp_mc_value_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: get_non_comp_mc_value_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(gre_proto_static_table); slice_id++) {
        gre_proto_static_table[slice_id] = std::make_shared<npl_gre_proto_static_table_t>();
        retval = init_table(creator, gre_proto_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: gre_proto_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    hmc_cgm_profile_global_table = std::make_shared<npl_hmc_cgm_profile_global_table_t>();
    retval = init_table(creator, hmc_cgm_profile_global_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: hmc_cgm_profile_global_table, %s", la_status2str(retval).c_str());
    
    ibm_cmd_table = std::make_shared<npl_ibm_cmd_table_t>();
    retval = init_table(creator, ibm_cmd_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ibm_cmd_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ibm_mc_cmd_to_encap_data_table); slice_id++) {
        ibm_mc_cmd_to_encap_data_table[slice_id] = std::make_shared<npl_ibm_mc_cmd_to_encap_data_table_t>();
        retval = init_table(creator, ibm_mc_cmd_to_encap_data_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ibm_mc_cmd_to_encap_data_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ibm_uc_cmd_to_encap_data_table); slice_id++) {
        ibm_uc_cmd_to_encap_data_table[slice_id] = std::make_shared<npl_ibm_uc_cmd_to_encap_data_table_t>();
        retval = init_table(creator, ibm_uc_cmd_to_encap_data_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ibm_uc_cmd_to_encap_data_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ifgb_tc_lut_table); slice_id++) {
        ifgb_tc_lut_table[slice_id] = std::make_shared<npl_ifgb_tc_lut_table_t>();
        retval = init_table(creator, ifgb_tc_lut_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ifgb_tc_lut_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (size_t slice_pair = 0; slice_pair < array_size(ingress_ip_qos_mapping_table); slice_pair++) {
        ingress_ip_qos_mapping_table[slice_pair] = std::make_shared<npl_ingress_ip_qos_mapping_table_t>();
        retval = init_table(creator, ingress_ip_qos_mapping_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_ip_qos_mapping_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_eth_db1_160_f0_table); slice_id++) {
        ingress_rtf_eth_db1_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_eth_db1_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_eth_db1_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_eth_db1_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_eth_db2_160_f0_table); slice_id++) {
        ingress_rtf_eth_db2_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_eth_db2_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_eth_db2_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_eth_db2_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db1_160_f0_table); slice_id++) {
        ingress_rtf_ipv4_db1_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db1_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db1_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db1_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db1_160_f1_table); slice_id++) {
        ingress_rtf_ipv4_db1_160_f1_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db1_160_f1_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db1_160_f1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db1_160_f1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db1_320_f0_table); slice_id++) {
        ingress_rtf_ipv4_db1_320_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db1_320_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db1_320_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db1_320_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db2_160_f0_table); slice_id++) {
        ingress_rtf_ipv4_db2_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db2_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db2_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db2_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db2_160_f1_table); slice_id++) {
        ingress_rtf_ipv4_db2_160_f1_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db2_160_f1_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db2_160_f1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db2_160_f1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db2_320_f0_table); slice_id++) {
        ingress_rtf_ipv4_db2_320_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db2_320_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db2_320_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db2_320_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db3_160_f0_table); slice_id++) {
        ingress_rtf_ipv4_db3_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db3_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db3_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db3_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db3_160_f1_table); slice_id++) {
        ingress_rtf_ipv4_db3_160_f1_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db3_160_f1_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db3_160_f1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db3_160_f1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db3_320_f0_table); slice_id++) {
        ingress_rtf_ipv4_db3_320_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db3_320_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db3_320_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db3_320_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db4_160_f0_table); slice_id++) {
        ingress_rtf_ipv4_db4_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db4_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db4_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db4_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db4_160_f1_table); slice_id++) {
        ingress_rtf_ipv4_db4_160_f1_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db4_160_f1_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db4_160_f1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db4_160_f1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv4_db4_320_f0_table); slice_id++) {
        ingress_rtf_ipv4_db4_320_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv4_db4_320_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv4_db4_320_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv4_db4_320_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db1_160_f0_table); slice_id++) {
        ingress_rtf_ipv6_db1_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db1_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db1_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db1_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db1_160_f1_table); slice_id++) {
        ingress_rtf_ipv6_db1_160_f1_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db1_160_f1_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db1_160_f1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db1_160_f1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db1_320_f0_table); slice_id++) {
        ingress_rtf_ipv6_db1_320_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db1_320_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db1_320_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db1_320_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db2_160_f0_table); slice_id++) {
        ingress_rtf_ipv6_db2_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db2_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db2_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db2_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db2_160_f1_table); slice_id++) {
        ingress_rtf_ipv6_db2_160_f1_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db2_160_f1_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db2_160_f1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db2_160_f1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db2_320_f0_table); slice_id++) {
        ingress_rtf_ipv6_db2_320_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db2_320_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db2_320_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db2_320_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db3_160_f0_table); slice_id++) {
        ingress_rtf_ipv6_db3_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db3_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db3_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db3_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db3_160_f1_table); slice_id++) {
        ingress_rtf_ipv6_db3_160_f1_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db3_160_f1_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db3_160_f1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db3_160_f1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db3_320_f0_table); slice_id++) {
        ingress_rtf_ipv6_db3_320_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db3_320_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db3_320_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db3_320_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db4_160_f0_table); slice_id++) {
        ingress_rtf_ipv6_db4_160_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db4_160_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db4_160_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db4_160_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db4_160_f1_table); slice_id++) {
        ingress_rtf_ipv6_db4_160_f1_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db4_160_f1_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db4_160_f1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db4_160_f1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ingress_rtf_ipv6_db4_320_f0_table); slice_id++) {
        ingress_rtf_ipv6_db4_320_f0_table[slice_id] = std::make_shared<npl_ingress_rtf_ipv6_db4_320_f0_table_t>();
        retval = init_table(creator, ingress_rtf_ipv6_db4_320_f0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ingress_rtf_ipv6_db4_320_f0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(inject_down_select_ene_static_table); slice_id++) {
        inject_down_select_ene_static_table[slice_id] = std::make_shared<npl_inject_down_select_ene_static_table_t>();
        retval = init_table(creator, inject_down_select_ene_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: inject_down_select_ene_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(inject_down_tx_redirect_counter_table); slice_id++) {
        inject_down_tx_redirect_counter_table[slice_id] = std::make_shared<npl_inject_down_tx_redirect_counter_table_t>();
        retval = init_table(creator, inject_down_tx_redirect_counter_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: inject_down_tx_redirect_counter_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(inject_up_pif_ifg_init_data_table); slice_id++) {
        inject_up_pif_ifg_init_data_table[slice_id] = std::make_shared<npl_inject_up_pif_ifg_init_data_table_t>();
        retval = init_table(creator, inject_up_pif_ifg_init_data_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: inject_up_pif_ifg_init_data_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(inject_up_ssp_init_data_table); slice_id++) {
        inject_up_ssp_init_data_table[slice_id] = std::make_shared<npl_inject_up_ssp_init_data_table_t>();
        retval = init_table(creator, inject_up_ssp_init_data_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: inject_up_ssp_init_data_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    inner_tpid_table = std::make_shared<npl_inner_tpid_table_t>();
    retval = init_table(creator, inner_tpid_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: inner_tpid_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_fwd_header_mapping_to_ethtype_static_table); slice_id++) {
        ip_fwd_header_mapping_to_ethtype_static_table[slice_id] = std::make_shared<npl_ip_fwd_header_mapping_to_ethtype_static_table_t>();
        retval = init_table(creator, ip_fwd_header_mapping_to_ethtype_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_fwd_header_mapping_to_ethtype_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ip_inactivity_check_table = std::make_shared<npl_ip_inactivity_check_table_t>();
    retval = init_table(creator, ip_inactivity_check_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_inactivity_check_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_ingress_cmp_mcid_static_table); slice_id++) {
        ip_ingress_cmp_mcid_static_table[slice_id] = std::make_shared<npl_ip_ingress_cmp_mcid_static_table_t>();
        retval = init_table(creator, ip_ingress_cmp_mcid_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_ingress_cmp_mcid_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_mc_local_inject_type_static_table); slice_id++) {
        ip_mc_local_inject_type_static_table[slice_id] = std::make_shared<npl_ip_mc_local_inject_type_static_table_t>();
        retval = init_table(creator, ip_mc_local_inject_type_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_mc_local_inject_type_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_mc_mpls_next_macro_static_table); slice_id++) {
        ip_mc_mpls_next_macro_static_table[slice_id] = std::make_shared<npl_ip_mc_mpls_next_macro_static_table_t>();
        retval = init_table(creator, ip_mc_mpls_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_mc_mpls_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_mc_next_macro_static_table); slice_id++) {
        ip_mc_next_macro_static_table[slice_id] = std::make_shared<npl_ip_mc_next_macro_static_table_t>();
        retval = init_table(creator, ip_mc_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_mc_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_meter_profile_mapping_table); slice_id++) {
        ip_meter_profile_mapping_table[slice_id] = std::make_shared<npl_ip_meter_profile_mapping_table_t>();
        retval = init_table(creator, ip_meter_profile_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_meter_profile_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ip_prefix_destination_table = std::make_shared<npl_ip_prefix_destination_table_t>();
    retval = init_table(creator, ip_prefix_destination_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_prefix_destination_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_proto_type_mux_static_table); slice_id++) {
        ip_proto_type_mux_static_table[slice_id] = std::make_shared<npl_ip_proto_type_mux_static_table_t>();
        retval = init_table(creator, ip_proto_type_mux_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_proto_type_mux_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_relay_to_vni_table); slice_id++) {
        ip_relay_to_vni_table[slice_id] = std::make_shared<npl_ip_relay_to_vni_table_t>();
        retval = init_table(creator, ip_relay_to_vni_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_relay_to_vni_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_rx_global_counter_table); slice_id++) {
        ip_rx_global_counter_table[slice_id] = std::make_shared<npl_ip_rx_global_counter_table_t>();
        retval = init_table(creator, ip_rx_global_counter_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_rx_global_counter_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ip_ver_mc_static_table); slice_id++) {
        ip_ver_mc_static_table[slice_id] = std::make_shared<npl_ip_ver_mc_static_table_t>();
        retval = init_table(creator, ip_ver_mc_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ip_ver_mc_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv4_acl_map_protocol_type_to_protocol_number_table); slice_id++) {
        ipv4_acl_map_protocol_type_to_protocol_number_table[slice_id] = std::make_shared<npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t>();
        retval = init_table(creator, ipv4_acl_map_protocol_type_to_protocol_number_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_acl_map_protocol_type_to_protocol_number_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv4_acl_sport_static_table); slice_id++) {
        ipv4_acl_sport_static_table[slice_id] = std::make_shared<npl_ipv4_acl_sport_static_table_t>();
        retval = init_table(creator, ipv4_acl_sport_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_acl_sport_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv4_ip_tunnel_termination_dip_index_tt0_table); slice_id++) {
        ipv4_ip_tunnel_termination_dip_index_tt0_table[slice_id] = std::make_shared<npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t>();
        retval = init_table(creator, ipv4_ip_tunnel_termination_dip_index_tt0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_ip_tunnel_termination_dip_index_tt0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv4_ip_tunnel_termination_dip_tt0_table); slice_id++) {
        ipv4_ip_tunnel_termination_dip_tt0_table[slice_id] = std::make_shared<npl_ipv4_ip_tunnel_termination_dip_tt0_table_t>();
        retval = init_table(creator, ipv4_ip_tunnel_termination_dip_tt0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_ip_tunnel_termination_dip_tt0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv4_ip_tunnel_termination_sip_dip_index_tt0_table); slice_id++) {
        ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[slice_id] = std::make_shared<npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t>();
        retval = init_table(creator, ipv4_ip_tunnel_termination_sip_dip_index_tt0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_ip_tunnel_termination_sip_dip_index_tt0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv4_ip_tunnel_termination_sip_dip_index_tt1_table); slice_id++) {
        ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[slice_id] = std::make_shared<npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t>();
        retval = init_table(creator, ipv4_ip_tunnel_termination_sip_dip_index_tt1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_ip_tunnel_termination_sip_dip_index_tt1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ipv4_lpm_table = std::make_shared<npl_ipv4_lpm_table_t>();
    retval = init_table(creator, ipv4_lpm_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_lpm_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv4_lpts_table); slice_id++) {
        ipv4_lpts_table[slice_id] = std::make_shared<npl_ipv4_lpts_table_t>();
        retval = init_table(creator, ipv4_lpts_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_lpts_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ipv4_og_pcl_em_table = std::make_shared<npl_ipv4_og_pcl_em_table_t>();
    retval = init_table(creator, ipv4_og_pcl_em_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_og_pcl_em_table, %s", la_status2str(retval).c_str());
    
    ipv4_og_pcl_lpm_table = std::make_shared<npl_ipv4_og_pcl_lpm_table_t>();
    retval = init_table(creator, ipv4_og_pcl_lpm_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_og_pcl_lpm_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv4_rtf_conf_set_mapping_table); slice_id++) {
        ipv4_rtf_conf_set_mapping_table[slice_id] = std::make_shared<npl_ipv4_rtf_conf_set_mapping_table_t>();
        retval = init_table(creator, ipv4_rtf_conf_set_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_rtf_conf_set_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ipv4_sgt_em_table = std::make_shared<npl_ipv4_sgt_em_table_t>();
    retval = init_table(creator, ipv4_sgt_em_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_sgt_em_table, %s", la_status2str(retval).c_str());
    
    ipv4_sgt_lpm_table = std::make_shared<npl_ipv4_sgt_lpm_table_t>();
    retval = init_table(creator, ipv4_sgt_lpm_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_sgt_lpm_table, %s", la_status2str(retval).c_str());
    
    ipv4_vrf_dip_em_table = std::make_shared<npl_ipv4_vrf_dip_em_table_t>();
    retval = init_table(creator, ipv4_vrf_dip_em_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_vrf_dip_em_table, %s", la_status2str(retval).c_str());
    
    ipv4_vrf_s_g_table = std::make_shared<npl_ipv4_vrf_s_g_table_t>();
    retval = init_table(creator, ipv4_vrf_s_g_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv4_vrf_s_g_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv6_acl_sport_static_table); slice_id++) {
        ipv6_acl_sport_static_table[slice_id] = std::make_shared<npl_ipv6_acl_sport_static_table_t>();
        retval = init_table(creator, ipv6_acl_sport_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_acl_sport_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv6_first_fragment_static_table); slice_id++) {
        ipv6_first_fragment_static_table[slice_id] = std::make_shared<npl_ipv6_first_fragment_static_table_t>();
        retval = init_table(creator, ipv6_first_fragment_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_first_fragment_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ipv6_lpm_table = std::make_shared<npl_ipv6_lpm_table_t>();
    retval = init_table(creator, ipv6_lpm_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_lpm_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv6_lpts_table); slice_id++) {
        ipv6_lpts_table[slice_id] = std::make_shared<npl_ipv6_lpts_table_t>();
        retval = init_table(creator, ipv6_lpts_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_lpts_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ipv6_og_pcl_em_table = std::make_shared<npl_ipv6_og_pcl_em_table_t>();
    retval = init_table(creator, ipv6_og_pcl_em_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_og_pcl_em_table, %s", la_status2str(retval).c_str());
    
    ipv6_og_pcl_lpm_table = std::make_shared<npl_ipv6_og_pcl_lpm_table_t>();
    retval = init_table(creator, ipv6_og_pcl_lpm_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_og_pcl_lpm_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ipv6_rtf_conf_set_mapping_table); slice_id++) {
        ipv6_rtf_conf_set_mapping_table[slice_id] = std::make_shared<npl_ipv6_rtf_conf_set_mapping_table_t>();
        retval = init_table(creator, ipv6_rtf_conf_set_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_rtf_conf_set_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    ipv6_sgt_em_table = std::make_shared<npl_ipv6_sgt_em_table_t>();
    retval = init_table(creator, ipv6_sgt_em_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_sgt_em_table, %s", la_status2str(retval).c_str());
    
    ipv6_sgt_lpm_table = std::make_shared<npl_ipv6_sgt_lpm_table_t>();
    retval = init_table(creator, ipv6_sgt_lpm_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_sgt_lpm_table, %s", la_status2str(retval).c_str());
    
    ipv6_sip_compression_table = std::make_shared<npl_ipv6_sip_compression_table_t>();
    retval = init_table(creator, ipv6_sip_compression_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_sip_compression_table, %s", la_status2str(retval).c_str());
    
    ipv6_vrf_dip_em_table = std::make_shared<npl_ipv6_vrf_dip_em_table_t>();
    retval = init_table(creator, ipv6_vrf_dip_em_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_vrf_dip_em_table, %s", la_status2str(retval).c_str());
    
    ipv6_vrf_s_g_table = std::make_shared<npl_ipv6_vrf_s_g_table_t>();
    retval = init_table(creator, ipv6_vrf_s_g_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: ipv6_vrf_s_g_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_dlp_table); slice_id++) {
        l2_dlp_table[slice_id] = std::make_shared<npl_l2_dlp_table_t>();
        retval = init_table(creator, l2_dlp_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_dlp_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    l2_lp_profile_filter_table = std::make_shared<npl_l2_lp_profile_filter_table_t>();
    retval = init_table(creator, l2_lp_profile_filter_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_lp_profile_filter_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_lpts_ctrl_fields_static_table); slice_id++) {
        l2_lpts_ctrl_fields_static_table[slice_id] = std::make_shared<npl_l2_lpts_ctrl_fields_static_table_t>();
        retval = init_table(creator, l2_lpts_ctrl_fields_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_lpts_ctrl_fields_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_lpts_ipv4_table); slice_id++) {
        l2_lpts_ipv4_table[slice_id] = std::make_shared<npl_l2_lpts_ipv4_table_t>();
        retval = init_table(creator, l2_lpts_ipv4_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_lpts_ipv4_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_lpts_ipv6_table); slice_id++) {
        l2_lpts_ipv6_table[slice_id] = std::make_shared<npl_l2_lpts_ipv6_table_t>();
        retval = init_table(creator, l2_lpts_ipv6_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_lpts_ipv6_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_lpts_mac_table); slice_id++) {
        l2_lpts_mac_table[slice_id] = std::make_shared<npl_l2_lpts_mac_table_t>();
        retval = init_table(creator, l2_lpts_mac_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_lpts_mac_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_lpts_next_macro_static_table); slice_id++) {
        l2_lpts_next_macro_static_table[slice_id] = std::make_shared<npl_l2_lpts_next_macro_static_table_t>();
        retval = init_table(creator, l2_lpts_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_lpts_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    l2_lpts_protocol_table = std::make_shared<npl_l2_lpts_protocol_table_t>();
    retval = init_table(creator, l2_lpts_protocol_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_lpts_protocol_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_lpts_skip_p2p_static_table); slice_id++) {
        l2_lpts_skip_p2p_static_table[slice_id] = std::make_shared<npl_l2_lpts_skip_p2p_static_table_t>();
        retval = init_table(creator, l2_lpts_skip_p2p_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_lpts_skip_p2p_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_termination_next_macro_static_table); slice_id++) {
        l2_termination_next_macro_static_table[slice_id] = std::make_shared<npl_l2_termination_next_macro_static_table_t>();
        retval = init_table(creator, l2_termination_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_termination_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l2_tunnel_term_next_macro_static_table); slice_id++) {
        l2_tunnel_term_next_macro_static_table[slice_id] = std::make_shared<npl_l2_tunnel_term_next_macro_static_table_t>();
        retval = init_table(creator, l2_tunnel_term_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l2_tunnel_term_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    l3_dlp_p_counter_offset_table = std::make_shared<npl_l3_dlp_p_counter_offset_table_t>();
    retval = init_table(creator, l3_dlp_p_counter_offset_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: l3_dlp_p_counter_offset_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l3_dlp_table); slice_id++) {
        l3_dlp_table[slice_id] = std::make_shared<npl_l3_dlp_table_t>();
        retval = init_table(creator, l3_dlp_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l3_dlp_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    l3_lp_profile_filter_table = std::make_shared<npl_l3_lp_profile_filter_table_t>();
    retval = init_table(creator, l3_lp_profile_filter_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: l3_lp_profile_filter_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l3_termination_classify_ip_tunnels_table); slice_id++) {
        l3_termination_classify_ip_tunnels_table[slice_id] = std::make_shared<npl_l3_termination_classify_ip_tunnels_table_t>();
        retval = init_table(creator, l3_termination_classify_ip_tunnels_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l3_termination_classify_ip_tunnels_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l3_termination_next_macro_static_table); slice_id++) {
        l3_termination_next_macro_static_table[slice_id] = std::make_shared<npl_l3_termination_next_macro_static_table_t>();
        retval = init_table(creator, l3_termination_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l3_termination_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(l3_tunnel_termination_next_macro_static_table); slice_id++) {
        l3_tunnel_termination_next_macro_static_table[slice_id] = std::make_shared<npl_l3_tunnel_termination_next_macro_static_table_t>();
        retval = init_table(creator, l3_tunnel_termination_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: l3_tunnel_termination_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    l3_vxlan_overlay_sa_table = std::make_shared<npl_l3_vxlan_overlay_sa_table_t>();
    retval = init_table(creator, l3_vxlan_overlay_sa_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: l3_vxlan_overlay_sa_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(large_em_key_lsb_mapping_table); slice_id++) {
        large_em_key_lsb_mapping_table[slice_id] = std::make_shared<npl_large_em_key_lsb_mapping_table_t>();
        retval = init_table(creator, large_em_key_lsb_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: large_em_key_lsb_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(large_encap_global_lsp_prefix_table); slice_id++) {
        large_encap_global_lsp_prefix_table[slice_id] = std::make_shared<npl_large_encap_global_lsp_prefix_table_t>();
        retval = init_table(creator, large_encap_global_lsp_prefix_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: large_encap_global_lsp_prefix_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(large_encap_ip_tunnel_table); slice_id++) {
        large_encap_ip_tunnel_table[slice_id] = std::make_shared<npl_large_encap_ip_tunnel_table_t>();
        retval = init_table(creator, large_encap_ip_tunnel_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: large_encap_ip_tunnel_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(large_encap_mpls_he_no_ldp_table); slice_id++) {
        large_encap_mpls_he_no_ldp_table[slice_id] = std::make_shared<npl_large_encap_mpls_he_no_ldp_table_t>();
        retval = init_table(creator, large_encap_mpls_he_no_ldp_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: large_encap_mpls_he_no_ldp_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    large_encap_mpls_ldp_over_te_table = std::make_shared<npl_large_encap_mpls_ldp_over_te_table_t>();
    retval = init_table(creator, large_encap_mpls_ldp_over_te_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: large_encap_mpls_ldp_over_te_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(large_encap_te_he_tunnel_id_table); slice_id++) {
        large_encap_te_he_tunnel_id_table[slice_id] = std::make_shared<npl_large_encap_te_he_tunnel_id_table_t>();
        retval = init_table(creator, large_encap_te_he_tunnel_id_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: large_encap_te_he_tunnel_id_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_fabric_table); slice_id++) {
        light_fi_fabric_table[slice_id] = std::make_shared<npl_light_fi_fabric_table_t>();
        retval = init_table(creator, light_fi_fabric_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_fabric_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_npu_base_table); slice_id++) {
        light_fi_npu_base_table[slice_id] = std::make_shared<npl_light_fi_npu_base_table_t>();
        retval = init_table(creator, light_fi_npu_base_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_npu_base_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_npu_encap_table); slice_id++) {
        light_fi_npu_encap_table[slice_id] = std::make_shared<npl_light_fi_npu_encap_table_t>();
        retval = init_table(creator, light_fi_npu_encap_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_npu_encap_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_nw_0_table); slice_id++) {
        light_fi_nw_0_table[slice_id] = std::make_shared<npl_light_fi_nw_0_table_t>();
        retval = init_table(creator, light_fi_nw_0_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_nw_0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_nw_1_table); slice_id++) {
        light_fi_nw_1_table[slice_id] = std::make_shared<npl_light_fi_nw_1_table_t>();
        retval = init_table(creator, light_fi_nw_1_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_nw_1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_nw_2_table); slice_id++) {
        light_fi_nw_2_table[slice_id] = std::make_shared<npl_light_fi_nw_2_table_t>();
        retval = init_table(creator, light_fi_nw_2_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_nw_2_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_nw_3_table); slice_id++) {
        light_fi_nw_3_table[slice_id] = std::make_shared<npl_light_fi_nw_3_table_t>();
        retval = init_table(creator, light_fi_nw_3_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_nw_3_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_stages_cfg_table); slice_id++) {
        light_fi_stages_cfg_table[slice_id] = std::make_shared<npl_light_fi_stages_cfg_table_t>();
        retval = init_table(creator, light_fi_stages_cfg_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_stages_cfg_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(light_fi_tm_table); slice_id++) {
        light_fi_tm_table[slice_id] = std::make_shared<npl_light_fi_tm_table_t>();
        retval = init_table(creator, light_fi_tm_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: light_fi_tm_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(link_relay_attributes_table); slice_id++) {
        link_relay_attributes_table[slice_id] = std::make_shared<npl_link_relay_attributes_table_t>();
        retval = init_table(creator, link_relay_attributes_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: link_relay_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(link_relay_id_static_table); slice_id++) {
        link_relay_id_static_table[slice_id] = std::make_shared<npl_link_relay_id_static_table_t>();
        retval = init_table(creator, link_relay_id_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: link_relay_id_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    link_up_vector = std::make_shared<npl_link_up_vector_t>();
    retval = init_table(creator, link_up_vector, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: link_up_vector, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(local_mc_fwd_next_macro_static_table); slice_id++) {
        local_mc_fwd_next_macro_static_table[slice_id] = std::make_shared<npl_local_mc_fwd_next_macro_static_table_t>();
        retval = init_table(creator, local_mc_fwd_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: local_mc_fwd_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    lp_over_lag_table = std::make_shared<npl_lp_over_lag_table_t>();
    retval = init_table(creator, lp_over_lag_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: lp_over_lag_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(lpts_2nd_lookup_table); slice_id++) {
        lpts_2nd_lookup_table[slice_id] = std::make_shared<npl_lpts_2nd_lookup_table_t>();
        retval = init_table(creator, lpts_2nd_lookup_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: lpts_2nd_lookup_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(lpts_meter_table); slice_id++) {
        lpts_meter_table[slice_id] = std::make_shared<npl_lpts_meter_table_t>();
        retval = init_table(creator, lpts_meter_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: lpts_meter_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(lpts_og_application_table); slice_id++) {
        lpts_og_application_table[slice_id] = std::make_shared<npl_lpts_og_application_table_t>();
        retval = init_table(creator, lpts_og_application_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: lpts_og_application_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_af_npp_attributes_table); slice_id++) {
        mac_af_npp_attributes_table[slice_id] = std::make_shared<npl_mac_af_npp_attributes_table_t>();
        retval = init_table(creator, mac_af_npp_attributes_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_af_npp_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    mac_da_table = std::make_shared<npl_mac_da_table_t>();
    retval = init_table(creator, mac_da_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_da_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_ethernet_rate_limit_type_static_table); slice_id++) {
        mac_ethernet_rate_limit_type_static_table[slice_id] = std::make_shared<npl_mac_ethernet_rate_limit_type_static_table_t>();
        retval = init_table(creator, mac_ethernet_rate_limit_type_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_ethernet_rate_limit_type_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    mac_forwarding_table = std::make_shared<npl_mac_forwarding_table_t>();
    retval = init_table(creator, mac_forwarding_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_forwarding_table, %s", la_status2str(retval).c_str());
    
    mac_forwarding_w_metadata_table = std::make_shared<npl_mac_forwarding_w_metadata_table_t>();
    retval = init_table(creator, mac_forwarding_w_metadata_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_forwarding_w_metadata_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_mc_em_termination_attributes_table); slice_id++) {
        mac_mc_em_termination_attributes_table[slice_id] = std::make_shared<npl_mac_mc_em_termination_attributes_table_t>();
        retval = init_table(creator, mac_mc_em_termination_attributes_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_mc_em_termination_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_mc_tcam_termination_attributes_table); slice_id++) {
        mac_mc_tcam_termination_attributes_table[slice_id] = std::make_shared<npl_mac_mc_tcam_termination_attributes_table_t>();
        retval = init_table(creator, mac_mc_tcam_termination_attributes_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_mc_tcam_termination_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (size_t slice_pair = 0; slice_pair < array_size(mac_qos_mapping_table); slice_pair++) {
        mac_qos_mapping_table[slice_pair] = std::make_shared<npl_mac_qos_mapping_table_t>();
        retval = init_table(creator, mac_qos_mapping_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_qos_mapping_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    mac_relay_g_ipv4_table = std::make_shared<npl_mac_relay_g_ipv4_table_t>();
    retval = init_table(creator, mac_relay_g_ipv4_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_relay_g_ipv4_table, %s", la_status2str(retval).c_str());
    
    mac_relay_g_ipv6_table = std::make_shared<npl_mac_relay_g_ipv6_table_t>();
    retval = init_table(creator, mac_relay_g_ipv6_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_relay_g_ipv6_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_relay_to_vni_table); slice_id++) {
        mac_relay_to_vni_table[slice_id] = std::make_shared<npl_mac_relay_to_vni_table_t>();
        retval = init_table(creator, mac_relay_to_vni_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_relay_to_vni_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_termination_em_table); slice_id++) {
        mac_termination_em_table[slice_id] = std::make_shared<npl_mac_termination_em_table_t>();
        retval = init_table(creator, mac_termination_em_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_termination_em_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_termination_next_macro_static_table); slice_id++) {
        mac_termination_next_macro_static_table[slice_id] = std::make_shared<npl_mac_termination_next_macro_static_table_t>();
        retval = init_table(creator, mac_termination_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_termination_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_termination_no_da_em_table); slice_id++) {
        mac_termination_no_da_em_table[slice_id] = std::make_shared<npl_mac_termination_no_da_em_table_t>();
        retval = init_table(creator, mac_termination_no_da_em_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_termination_no_da_em_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mac_termination_tcam_table); slice_id++) {
        mac_termination_tcam_table[slice_id] = std::make_shared<npl_mac_termination_tcam_table_t>();
        retval = init_table(creator, mac_termination_tcam_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mac_termination_tcam_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(map_ene_subcode_to8bit_static_table); slice_id++) {
        map_ene_subcode_to8bit_static_table[slice_id] = std::make_shared<npl_map_ene_subcode_to8bit_static_table_t>();
        retval = init_table(creator, map_ene_subcode_to8bit_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: map_ene_subcode_to8bit_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    map_inject_ccm_macro_static_table = std::make_shared<npl_map_inject_ccm_macro_static_table_t>();
    retval = init_table(creator, map_inject_ccm_macro_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: map_inject_ccm_macro_static_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(map_more_labels_static_table); slice_id++) {
        map_more_labels_static_table[slice_id] = std::make_shared<npl_map_more_labels_static_table_t>();
        retval = init_table(creator, map_more_labels_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: map_more_labels_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(map_recyle_tx_to_rx_data_on_pd_static_table); slice_id++) {
        map_recyle_tx_to_rx_data_on_pd_static_table[slice_id] = std::make_shared<npl_map_recyle_tx_to_rx_data_on_pd_static_table_t>();
        retval = init_table(creator, map_recyle_tx_to_rx_data_on_pd_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: map_recyle_tx_to_rx_data_on_pd_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(map_tm_dp_ecn_to_wa_ecn_dp_static_table); slice_id++) {
        map_tm_dp_ecn_to_wa_ecn_dp_static_table[slice_id] = std::make_shared<npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t>();
        retval = init_table(creator, map_tm_dp_ecn_to_wa_ecn_dp_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: map_tm_dp_ecn_to_wa_ecn_dp_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(map_tx_punt_next_macro_static_table); slice_id++) {
        map_tx_punt_next_macro_static_table[slice_id] = std::make_shared<npl_map_tx_punt_next_macro_static_table_t>();
        retval = init_table(creator, map_tx_punt_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: map_tx_punt_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(map_tx_punt_rcy_next_macro_static_table); slice_id++) {
        map_tx_punt_rcy_next_macro_static_table[slice_id] = std::make_shared<npl_map_tx_punt_rcy_next_macro_static_table_t>();
        retval = init_table(creator, map_tx_punt_rcy_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: map_tx_punt_rcy_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    mc_bitmap_base_voq_lookup_table = std::make_shared<npl_mc_bitmap_base_voq_lookup_table_t>();
    retval = init_table(creator, mc_bitmap_base_voq_lookup_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_bitmap_base_voq_lookup_table, %s", la_status2str(retval).c_str());
    
    mc_bitmap_tc_map_table = std::make_shared<npl_mc_bitmap_tc_map_table_t>();
    retval = init_table(creator, mc_bitmap_tc_map_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_bitmap_tc_map_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mc_copy_id_map); slice_id++) {
        mc_copy_id_map[slice_id] = std::make_shared<npl_mc_copy_id_map_t>();
        retval = init_table(creator, mc_copy_id_map[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_copy_id_map(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mc_cud_is_wide_table); slice_id++) {
        mc_cud_is_wide_table[slice_id] = std::make_shared<npl_mc_cud_is_wide_table_t>();
        retval = init_table(creator, mc_cud_is_wide_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_cud_is_wide_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mc_cud_table); slice_id++) {
        mc_cud_table[slice_id] = std::make_shared<npl_mc_cud_table_t>();
        retval = init_table(creator, mc_cud_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_cud_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    mc_em_db = std::make_shared<npl_mc_em_db_t>();
    retval = init_table(creator, mc_em_db, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_em_db, %s", la_status2str(retval).c_str());
    
    mc_emdb_tc_map_table = std::make_shared<npl_mc_emdb_tc_map_table_t>();
    retval = init_table(creator, mc_emdb_tc_map_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_emdb_tc_map_table, %s", la_status2str(retval).c_str());
    
    mc_fe_links_bmp = std::make_shared<npl_mc_fe_links_bmp_t>();
    retval = init_table(creator, mc_fe_links_bmp, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_fe_links_bmp, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mc_ibm_cud_mapping_table); slice_id++) {
        mc_ibm_cud_mapping_table[slice_id] = std::make_shared<npl_mc_ibm_cud_mapping_table_t>();
        retval = init_table(creator, mc_ibm_cud_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_ibm_cud_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mc_slice_bitmap_table); slice_id++) {
        mc_slice_bitmap_table[slice_id] = std::make_shared<npl_mc_slice_bitmap_table_t>();
        retval = init_table(creator, mc_slice_bitmap_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mc_slice_bitmap_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    meg_id_format_table = std::make_shared<npl_meg_id_format_table_t>();
    retval = init_table(creator, meg_id_format_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: meg_id_format_table, %s", la_status2str(retval).c_str());
    
    mep_address_prefix_table = std::make_shared<npl_mep_address_prefix_table_t>();
    retval = init_table(creator, mep_address_prefix_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mep_address_prefix_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mii_loopback_table); slice_id++) {
        mii_loopback_table[slice_id] = std::make_shared<npl_mii_loopback_table_t>();
        retval = init_table(creator, mii_loopback_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mii_loopback_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    mirror_code_hw_table = std::make_shared<npl_mirror_code_hw_table_t>();
    retval = init_table(creator, mirror_code_hw_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mirror_code_hw_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mirror_egress_attributes_table); slice_id++) {
        mirror_egress_attributes_table[slice_id] = std::make_shared<npl_mirror_egress_attributes_table_t>();
        retval = init_table(creator, mirror_egress_attributes_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mirror_egress_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    mirror_to_dsp_in_npu_soft_header_table = std::make_shared<npl_mirror_to_dsp_in_npu_soft_header_table_t>();
    retval = init_table(creator, mirror_to_dsp_in_npu_soft_header_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mirror_to_dsp_in_npu_soft_header_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mldp_protection_enabled_static_table); slice_id++) {
        mldp_protection_enabled_static_table[slice_id] = std::make_shared<npl_mldp_protection_enabled_static_table_t>();
        retval = init_table(creator, mldp_protection_enabled_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mldp_protection_enabled_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mldp_protection_table); slice_id++) {
        mldp_protection_table[slice_id] = std::make_shared<npl_mldp_protection_table_t>();
        retval = init_table(creator, mldp_protection_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mldp_protection_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    mp_aux_data_table = std::make_shared<npl_mp_aux_data_table_t>();
    retval = init_table(creator, mp_aux_data_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mp_aux_data_table, %s", la_status2str(retval).c_str());
    
    mp_data_table = std::make_shared<npl_mp_data_table_t>();
    retval = init_table(creator, mp_data_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mp_data_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_encap_control_static_table); slice_id++) {
        mpls_encap_control_static_table[slice_id] = std::make_shared<npl_mpls_encap_control_static_table_t>();
        retval = init_table(creator, mpls_encap_control_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_encap_control_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    mpls_forwarding_table = std::make_shared<npl_mpls_forwarding_table_t>();
    retval = init_table(creator, mpls_forwarding_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_forwarding_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_header_offset_in_bytes_static_table); slice_id++) {
        mpls_header_offset_in_bytes_static_table[slice_id] = std::make_shared<npl_mpls_header_offset_in_bytes_static_table_t>();
        retval = init_table(creator, mpls_header_offset_in_bytes_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_header_offset_in_bytes_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_l3_lsp_static_table); slice_id++) {
        mpls_l3_lsp_static_table[slice_id] = std::make_shared<npl_mpls_l3_lsp_static_table_t>();
        retval = init_table(creator, mpls_l3_lsp_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_l3_lsp_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_labels_1_to_4_jump_offset_static_table); slice_id++) {
        mpls_labels_1_to_4_jump_offset_static_table[slice_id] = std::make_shared<npl_mpls_labels_1_to_4_jump_offset_static_table_t>();
        retval = init_table(creator, mpls_labels_1_to_4_jump_offset_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_labels_1_to_4_jump_offset_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_lsp_labels_config_static_table); slice_id++) {
        mpls_lsp_labels_config_static_table[slice_id] = std::make_shared<npl_mpls_lsp_labels_config_static_table_t>();
        retval = init_table(creator, mpls_lsp_labels_config_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_lsp_labels_config_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (size_t slice_pair = 0; slice_pair < array_size(mpls_qos_mapping_table); slice_pair++) {
        mpls_qos_mapping_table[slice_pair] = std::make_shared<npl_mpls_qos_mapping_table_t>();
        retval = init_table(creator, mpls_qos_mapping_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_qos_mapping_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_resolve_service_labels_static_table); slice_id++) {
        mpls_resolve_service_labels_static_table[slice_id] = std::make_shared<npl_mpls_resolve_service_labels_static_table_t>();
        retval = init_table(creator, mpls_resolve_service_labels_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_resolve_service_labels_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_termination_em0_table); slice_id++) {
        mpls_termination_em0_table[slice_id] = std::make_shared<npl_mpls_termination_em0_table_t>();
        retval = init_table(creator, mpls_termination_em0_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_termination_em0_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_termination_em1_table); slice_id++) {
        mpls_termination_em1_table[slice_id] = std::make_shared<npl_mpls_termination_em1_table_t>();
        retval = init_table(creator, mpls_termination_em1_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_termination_em1_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(mpls_vpn_enabled_static_table); slice_id++) {
        mpls_vpn_enabled_static_table[slice_id] = std::make_shared<npl_mpls_vpn_enabled_static_table_t>();
        retval = init_table(creator, mpls_vpn_enabled_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: mpls_vpn_enabled_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(my_ipv4_table); slice_id++) {
        my_ipv4_table[slice_id] = std::make_shared<npl_my_ipv4_table_t>();
        retval = init_table(creator, my_ipv4_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: my_ipv4_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(next_header_1_is_l4_over_ipv4_static_table); slice_id++) {
        next_header_1_is_l4_over_ipv4_static_table[slice_id] = std::make_shared<npl_next_header_1_is_l4_over_ipv4_static_table_t>();
        retval = init_table(creator, next_header_1_is_l4_over_ipv4_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: next_header_1_is_l4_over_ipv4_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(nh_macro_code_to_id_l6_static_table); slice_id++) {
        nh_macro_code_to_id_l6_static_table[slice_id] = std::make_shared<npl_nh_macro_code_to_id_l6_static_table_t>();
        retval = init_table(creator, nh_macro_code_to_id_l6_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: nh_macro_code_to_id_l6_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(nhlfe_type_mapping_static_table); slice_id++) {
        nhlfe_type_mapping_static_table[slice_id] = std::make_shared<npl_nhlfe_type_mapping_static_table_t>();
        retval = init_table(creator, nhlfe_type_mapping_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: nhlfe_type_mapping_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(npp_sgt_attributes_table); slice_id++) {
        npp_sgt_attributes_table[slice_id] = std::make_shared<npl_npp_sgt_attributes_table_t>();
        retval = init_table(creator, npp_sgt_attributes_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: npp_sgt_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(null_rtf_next_macro_static_table); slice_id++) {
        null_rtf_next_macro_static_table[slice_id] = std::make_shared<npl_null_rtf_next_macro_static_table_t>();
        retval = init_table(creator, null_rtf_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: null_rtf_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(nw_smcid_threshold_table); slice_id++) {
        nw_smcid_threshold_table[slice_id] = std::make_shared<npl_nw_smcid_threshold_table_t>();
        retval = init_table(creator, nw_smcid_threshold_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: nw_smcid_threshold_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    oamp_drop_destination_static_table = std::make_shared<npl_oamp_drop_destination_static_table_t>();
    retval = init_table(creator, oamp_drop_destination_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: oamp_drop_destination_static_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(oamp_event_queue_table); slice_id++) {
        oamp_event_queue_table[slice_id] = std::make_shared<npl_oamp_event_queue_table_t>();
        retval = init_table(creator, oamp_event_queue_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: oamp_event_queue_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    oamp_redirect_get_counter_table = std::make_shared<npl_oamp_redirect_get_counter_table_t>();
    retval = init_table(creator, oamp_redirect_get_counter_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: oamp_redirect_get_counter_table, %s", la_status2str(retval).c_str());
    
    oamp_redirect_punt_eth_hdr_1_table = std::make_shared<npl_oamp_redirect_punt_eth_hdr_1_table_t>();
    retval = init_table(creator, oamp_redirect_punt_eth_hdr_1_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: oamp_redirect_punt_eth_hdr_1_table, %s", la_status2str(retval).c_str());
    
    oamp_redirect_punt_eth_hdr_2_table = std::make_shared<npl_oamp_redirect_punt_eth_hdr_2_table_t>();
    retval = init_table(creator, oamp_redirect_punt_eth_hdr_2_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: oamp_redirect_punt_eth_hdr_2_table, %s", la_status2str(retval).c_str());
    
    oamp_redirect_punt_eth_hdr_3_table = std::make_shared<npl_oamp_redirect_punt_eth_hdr_3_table_t>();
    retval = init_table(creator, oamp_redirect_punt_eth_hdr_3_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: oamp_redirect_punt_eth_hdr_3_table, %s", la_status2str(retval).c_str());
    
    oamp_redirect_punt_eth_hdr_4_table = std::make_shared<npl_oamp_redirect_punt_eth_hdr_4_table_t>();
    retval = init_table(creator, oamp_redirect_punt_eth_hdr_4_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: oamp_redirect_punt_eth_hdr_4_table, %s", la_status2str(retval).c_str());
    
    oamp_redirect_table = std::make_shared<npl_oamp_redirect_table_t>();
    retval = init_table(creator, oamp_redirect_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: oamp_redirect_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(obm_next_macro_static_table); slice_id++) {
        obm_next_macro_static_table[slice_id] = std::make_shared<npl_obm_next_macro_static_table_t>();
        retval = init_table(creator, obm_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: obm_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(og_next_macro_static_table); slice_id++) {
        og_next_macro_static_table[slice_id] = std::make_shared<npl_og_next_macro_static_table_t>();
        retval = init_table(creator, og_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: og_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    outer_tpid_table = std::make_shared<npl_outer_tpid_table_t>();
    retval = init_table(creator, outer_tpid_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: outer_tpid_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(overlay_ipv4_sip_table); slice_id++) {
        overlay_ipv4_sip_table[slice_id] = std::make_shared<npl_overlay_ipv4_sip_table_t>();
        retval = init_table(creator, overlay_ipv4_sip_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: overlay_ipv4_sip_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pad_mtu_inj_check_static_table); slice_id++) {
        pad_mtu_inj_check_static_table[slice_id] = std::make_shared<npl_pad_mtu_inj_check_static_table_t>();
        retval = init_table(creator, pad_mtu_inj_check_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pad_mtu_inj_check_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pbts_map_table_stage0); slice_id++) {
        pbts_map_table_stage0[slice_id] = std::make_shared<npl_pbts_map_table_stage0_t>();
        retval = init_table(creator, pbts_map_table_stage0[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pbts_map_table_stage0(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pbts_map_table_stage1); slice_id++) {
        pbts_map_table_stage1[slice_id] = std::make_shared<npl_pbts_map_table_stage1_t>();
        retval = init_table(creator, pbts_map_table_stage1[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pbts_map_table_stage1(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pbts_map_table_stage2); slice_id++) {
        pbts_map_table_stage2[slice_id] = std::make_shared<npl_pbts_map_table_stage2_t>();
        retval = init_table(creator, pbts_map_table_stage2[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pbts_map_table_stage2(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pbts_map_table_stage3); slice_id++) {
        pbts_map_table_stage3[slice_id] = std::make_shared<npl_pbts_map_table_stage3_t>();
        retval = init_table(creator, pbts_map_table_stage3[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pbts_map_table_stage3(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pdoq_oq_ifc_mapping); slice_id++) {
        pdoq_oq_ifc_mapping[slice_id] = std::make_shared<npl_pdoq_oq_ifc_mapping_t>();
        retval = init_table(creator, pdoq_oq_ifc_mapping[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pdoq_oq_ifc_mapping(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pdvoq_slice_dram_wred_lut_table); slice_id++) {
        pdvoq_slice_dram_wred_lut_table[slice_id] = std::make_shared<npl_pdvoq_slice_dram_wred_lut_table_t>();
        retval = init_table(creator, pdvoq_slice_dram_wred_lut_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pdvoq_slice_dram_wred_lut_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pdvoq_slice_voq_properties_table); slice_id++) {
        pdvoq_slice_voq_properties_table[slice_id] = std::make_shared<npl_pdvoq_slice_voq_properties_table_t>();
        retval = init_table(creator, pdvoq_slice_voq_properties_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pdvoq_slice_voq_properties_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    per_asbr_and_dpe_table = std::make_shared<npl_per_asbr_and_dpe_table_t>();
    retval = init_table(creator, per_asbr_and_dpe_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: per_asbr_and_dpe_table, %s", la_status2str(retval).c_str());
    
    per_pe_and_prefix_vpn_key_large_table = std::make_shared<npl_per_pe_and_prefix_vpn_key_large_table_t>();
    retval = init_table(creator, per_pe_and_prefix_vpn_key_large_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: per_pe_and_prefix_vpn_key_large_table, %s", la_status2str(retval).c_str());
    
    per_pe_and_vrf_vpn_key_large_table = std::make_shared<npl_per_pe_and_vrf_vpn_key_large_table_t>();
    retval = init_table(creator, per_pe_and_vrf_vpn_key_large_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: per_pe_and_vrf_vpn_key_large_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(per_port_destination_table); slice_id++) {
        per_port_destination_table[slice_id] = std::make_shared<npl_per_port_destination_table_t>();
        retval = init_table(creator, per_port_destination_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: per_port_destination_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    per_vrf_mpls_forwarding_table = std::make_shared<npl_per_vrf_mpls_forwarding_table_t>();
    retval = init_table(creator, per_vrf_mpls_forwarding_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: per_vrf_mpls_forwarding_table, %s", la_status2str(retval).c_str());
    
    pfc_destination_table = std::make_shared<npl_pfc_destination_table_t>();
    retval = init_table(creator, pfc_destination_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: pfc_destination_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pfc_filter_wd_table); slice_id++) {
        pfc_filter_wd_table[slice_id] = std::make_shared<npl_pfc_filter_wd_table_t>();
        retval = init_table(creator, pfc_filter_wd_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pfc_filter_wd_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    pfc_offset_from_vector_static_table = std::make_shared<npl_pfc_offset_from_vector_static_table_t>();
    retval = init_table(creator, pfc_offset_from_vector_static_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: pfc_offset_from_vector_static_table, %s", la_status2str(retval).c_str());
    
    pfc_ssp_slice_map_table = std::make_shared<npl_pfc_ssp_slice_map_table_t>();
    retval = init_table(creator, pfc_ssp_slice_map_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: pfc_ssp_slice_map_table, %s", la_status2str(retval).c_str());
    
    pin_start_offset_macros = std::make_shared<npl_pin_start_offset_macros_t>();
    retval = init_table(creator, pin_start_offset_macros, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: pin_start_offset_macros, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pma_loopback_table); slice_id++) {
        pma_loopback_table[slice_id] = std::make_shared<npl_pma_loopback_table_t>();
        retval = init_table(creator, pma_loopback_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pma_loopback_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(post_fwd_rtf_next_macro_static_table); slice_id++) {
        post_fwd_rtf_next_macro_static_table[slice_id] = std::make_shared<npl_post_fwd_rtf_next_macro_static_table_t>();
        retval = init_table(creator, post_fwd_rtf_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: post_fwd_rtf_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(probe_marker_1_static_table); slice_id++) {
        probe_marker_1_static_table[slice_id] = std::make_shared<npl_probe_marker_1_static_table_t>();
        retval = init_table(creator, probe_marker_1_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: probe_marker_1_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(probe_marker_2_static_table); slice_id++) {
        probe_marker_2_static_table[slice_id] = std::make_shared<npl_probe_marker_2_static_table_t>();
        retval = init_table(creator, probe_marker_2_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: probe_marker_2_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(punt_ethertype_static_table); slice_id++) {
        punt_ethertype_static_table[slice_id] = std::make_shared<npl_punt_ethertype_static_table_t>();
        retval = init_table(creator, punt_ethertype_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: punt_ethertype_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    punt_rcy_inject_header_ene_encap_table = std::make_shared<npl_punt_rcy_inject_header_ene_encap_table_t>();
    retval = init_table(creator, punt_rcy_inject_header_ene_encap_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: punt_rcy_inject_header_ene_encap_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(punt_select_nw_ene_static_table); slice_id++) {
        punt_select_nw_ene_static_table[slice_id] = std::make_shared<npl_punt_select_nw_ene_static_table_t>();
        retval = init_table(creator, punt_select_nw_ene_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: punt_select_nw_ene_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    punt_tunnel_transport_encap_table = std::make_shared<npl_punt_tunnel_transport_encap_table_t>();
    retval = init_table(creator, punt_tunnel_transport_encap_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: punt_tunnel_transport_encap_table, %s", la_status2str(retval).c_str());
    
    punt_tunnel_transport_extended_encap_table = std::make_shared<npl_punt_tunnel_transport_extended_encap_table_t>();
    retval = init_table(creator, punt_tunnel_transport_extended_encap_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: punt_tunnel_transport_extended_encap_table, %s", la_status2str(retval).c_str());
    
    punt_tunnel_transport_extended_encap_table2 = std::make_shared<npl_punt_tunnel_transport_extended_encap_table2_t>();
    retval = init_table(creator, punt_tunnel_transport_extended_encap_table2, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: punt_tunnel_transport_extended_encap_table2, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pwe_label_table); slice_id++) {
        pwe_label_table[slice_id] = std::make_shared<npl_pwe_label_table_t>();
        retval = init_table(creator, pwe_label_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pwe_label_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    pwe_to_l3_dest_table = std::make_shared<npl_pwe_to_l3_dest_table_t>();
    retval = init_table(creator, pwe_to_l3_dest_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: pwe_to_l3_dest_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pwe_vpls_label_table); slice_id++) {
        pwe_vpls_label_table[slice_id] = std::make_shared<npl_pwe_vpls_label_table_t>();
        retval = init_table(creator, pwe_vpls_label_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pwe_vpls_label_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(pwe_vpls_tunnel_label_table); slice_id++) {
        pwe_vpls_tunnel_label_table[slice_id] = std::make_shared<npl_pwe_vpls_tunnel_label_table_t>();
        retval = init_table(creator, pwe_vpls_tunnel_label_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: pwe_vpls_tunnel_label_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(reassembly_source_port_map_table); slice_id++) {
        reassembly_source_port_map_table[slice_id] = std::make_shared<npl_reassembly_source_port_map_table_t>();
        retval = init_table(creator, reassembly_source_port_map_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: reassembly_source_port_map_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(recycle_override_table); slice_id++) {
        recycle_override_table[slice_id] = std::make_shared<npl_recycle_override_table_t>();
        retval = init_table(creator, recycle_override_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: recycle_override_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(recycled_inject_up_info_table); slice_id++) {
        recycled_inject_up_info_table[slice_id] = std::make_shared<npl_recycled_inject_up_info_table_t>();
        retval = init_table(creator, recycled_inject_up_info_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: recycled_inject_up_info_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(redirect_destination_table); slice_id++) {
        redirect_destination_table[slice_id] = std::make_shared<npl_redirect_destination_table_t>();
        retval = init_table(creator, redirect_destination_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: redirect_destination_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    redirect_table = std::make_shared<npl_redirect_table_t>();
    retval = init_table(creator, redirect_table, {0, 1, 2, 3, 4, 5, 6} /*all slices with host*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: redirect_table, %s", la_status2str(retval).c_str());
    
    resolution_set_next_macro_table = std::make_shared<npl_resolution_set_next_macro_table_t>();
    retval = init_table(creator, resolution_set_next_macro_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: resolution_set_next_macro_table, %s", la_status2str(retval).c_str());
    
    rmep_last_time_table = std::make_shared<npl_rmep_last_time_table_t>();
    retval = init_table(creator, rmep_last_time_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rmep_last_time_table, %s", la_status2str(retval).c_str());
    
    rmep_state_table = std::make_shared<npl_rmep_state_table_t>();
    retval = init_table(creator, rmep_state_table, 6 /*slice id*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rmep_state_table, %s", la_status2str(retval).c_str());
    
    rpf_fec_access_map_table = std::make_shared<npl_rpf_fec_access_map_table_t>();
    retval = init_table(creator, rpf_fec_access_map_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rpf_fec_access_map_table, %s", la_status2str(retval).c_str());
    
    rpf_fec_table = std::make_shared<npl_rpf_fec_table_t>();
    retval = init_table(creator, rpf_fec_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rpf_fec_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rtf_conf_set_to_og_pcl_compress_bits_mapping_table); slice_id++) {
        rtf_conf_set_to_og_pcl_compress_bits_mapping_table[slice_id] = std::make_shared<npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t>();
        retval = init_table(creator, rtf_conf_set_to_og_pcl_compress_bits_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rtf_conf_set_to_og_pcl_compress_bits_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rtf_conf_set_to_og_pcl_ids_mapping_table); slice_id++) {
        rtf_conf_set_to_og_pcl_ids_mapping_table[slice_id] = std::make_shared<npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t>();
        retval = init_table(creator, rtf_conf_set_to_og_pcl_ids_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rtf_conf_set_to_og_pcl_ids_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rtf_conf_set_to_post_fwd_stage_mapping_table); slice_id++) {
        rtf_conf_set_to_post_fwd_stage_mapping_table[slice_id] = std::make_shared<npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t>();
        retval = init_table(creator, rtf_conf_set_to_post_fwd_stage_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rtf_conf_set_to_post_fwd_stage_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rtf_next_macro_static_table); slice_id++) {
        rtf_next_macro_static_table[slice_id] = std::make_shared<npl_rtf_next_macro_static_table_t>();
        retval = init_table(creator, rtf_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rtf_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_counters_bank_id_map_config); slice_id++) {
        rx_counters_bank_id_map_config[slice_id] = std::make_shared<npl_rx_counters_bank_id_map_config_t>();
        retval = init_table(creator, rx_counters_bank_id_map_config[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_counters_bank_id_map_config(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    rx_counters_block_config_table = std::make_shared<npl_rx_counters_block_config_table_t>();
    retval = init_table(creator, rx_counters_block_config_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_counters_block_config_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_fwd_error_handling_counter_table); slice_id++) {
        rx_fwd_error_handling_counter_table[slice_id] = std::make_shared<npl_rx_fwd_error_handling_counter_table_t>();
        retval = init_table(creator, rx_fwd_error_handling_counter_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_fwd_error_handling_counter_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_fwd_error_handling_destination_table); slice_id++) {
        rx_fwd_error_handling_destination_table[slice_id] = std::make_shared<npl_rx_fwd_error_handling_destination_table_t>();
        retval = init_table(creator, rx_fwd_error_handling_destination_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_fwd_error_handling_destination_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_ip_p_counter_offset_static_table); slice_id++) {
        rx_ip_p_counter_offset_static_table[slice_id] = std::make_shared<npl_rx_ip_p_counter_offset_static_table_t>();
        retval = init_table(creator, rx_ip_p_counter_offset_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_ip_p_counter_offset_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_map_npp_to_ssp_table); slice_id++) {
        rx_map_npp_to_ssp_table[slice_id] = std::make_shared<npl_rx_map_npp_to_ssp_table_t>();
        retval = init_table(creator, rx_map_npp_to_ssp_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_map_npp_to_ssp_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_meter_bank_offset_map); slice_id++) {
        rx_meter_bank_offset_map[slice_id] = std::make_shared<npl_rx_meter_bank_offset_map_t>();
        retval = init_table(creator, rx_meter_bank_offset_map[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_bank_offset_map(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    rx_meter_block_meter_attribute_table = std::make_shared<npl_rx_meter_block_meter_attribute_table_t>();
    retval = init_table(creator, rx_meter_block_meter_attribute_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_block_meter_attribute_table, %s", la_status2str(retval).c_str());
    
    rx_meter_block_meter_profile_table = std::make_shared<npl_rx_meter_block_meter_profile_table_t>();
    retval = init_table(creator, rx_meter_block_meter_profile_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_block_meter_profile_table, %s", la_status2str(retval).c_str());
    
    rx_meter_block_meter_shaper_configuration_table = std::make_shared<npl_rx_meter_block_meter_shaper_configuration_table_t>();
    retval = init_table(creator, rx_meter_block_meter_shaper_configuration_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_block_meter_shaper_configuration_table, %s", la_status2str(retval).c_str());
    
    rx_meter_distributed_meter_profile_table = std::make_shared<npl_rx_meter_distributed_meter_profile_table_t>();
    retval = init_table(creator, rx_meter_distributed_meter_profile_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_distributed_meter_profile_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_meter_exact_meter_decision_mapping_table); slice_id++) {
        rx_meter_exact_meter_decision_mapping_table[slice_id] = std::make_shared<npl_rx_meter_exact_meter_decision_mapping_table_t>();
        retval = init_table(creator, rx_meter_exact_meter_decision_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_exact_meter_decision_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    rx_meter_meter_profile_table = std::make_shared<npl_rx_meter_meter_profile_table_t>();
    retval = init_table(creator, rx_meter_meter_profile_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_meter_profile_table, %s", la_status2str(retval).c_str());
    
    rx_meter_meter_shaper_configuration_table = std::make_shared<npl_rx_meter_meter_shaper_configuration_table_t>();
    retval = init_table(creator, rx_meter_meter_shaper_configuration_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_meter_shaper_configuration_table, %s", la_status2str(retval).c_str());
    
    rx_meter_meters_attribute_table = std::make_shared<npl_rx_meter_meters_attribute_table_t>();
    retval = init_table(creator, rx_meter_meters_attribute_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_meters_attribute_table, %s", la_status2str(retval).c_str());
    
    rx_meter_rate_limiter_shaper_configuration_table = std::make_shared<npl_rx_meter_rate_limiter_shaper_configuration_table_t>();
    retval = init_table(creator, rx_meter_rate_limiter_shaper_configuration_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_rate_limiter_shaper_configuration_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_meter_stat_meter_decision_mapping_table); slice_id++) {
        rx_meter_stat_meter_decision_mapping_table[slice_id] = std::make_shared<npl_rx_meter_stat_meter_decision_mapping_table_t>();
        retval = init_table(creator, rx_meter_stat_meter_decision_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_meter_stat_meter_decision_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_npu_to_tm_dest_table); slice_id++) {
        rx_npu_to_tm_dest_table[slice_id] = std::make_shared<npl_rx_npu_to_tm_dest_table_t>();
        retval = init_table(creator, rx_npu_to_tm_dest_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_npu_to_tm_dest_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_obm_code_table); slice_id++) {
        rx_obm_code_table[slice_id] = std::make_shared<npl_rx_obm_code_table_t>();
        retval = init_table(creator, rx_obm_code_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_obm_code_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_obm_punt_src_and_code_table); slice_id++) {
        rx_obm_punt_src_and_code_table[slice_id] = std::make_shared<npl_rx_obm_punt_src_and_code_table_t>();
        retval = init_table(creator, rx_obm_punt_src_and_code_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_obm_punt_src_and_code_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_redirect_code_ext_table); slice_id++) {
        rx_redirect_code_ext_table[slice_id] = std::make_shared<npl_rx_redirect_code_ext_table_t>();
        retval = init_table(creator, rx_redirect_code_ext_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_redirect_code_ext_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_redirect_code_table); slice_id++) {
        rx_redirect_code_table[slice_id] = std::make_shared<npl_rx_redirect_code_table_t>();
        retval = init_table(creator, rx_redirect_code_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_redirect_code_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_redirect_next_macro_static_table); slice_id++) {
        rx_redirect_next_macro_static_table[slice_id] = std::make_shared<npl_rx_redirect_next_macro_static_table_t>();
        retval = init_table(creator, rx_redirect_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_redirect_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_term_error_handling_counter_table); slice_id++) {
        rx_term_error_handling_counter_table[slice_id] = std::make_shared<npl_rx_term_error_handling_counter_table_t>();
        retval = init_table(creator, rx_term_error_handling_counter_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_term_error_handling_counter_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(rx_term_error_handling_destination_table); slice_id++) {
        rx_term_error_handling_destination_table[slice_id] = std::make_shared<npl_rx_term_error_handling_destination_table_t>();
        retval = init_table(creator, rx_term_error_handling_destination_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: rx_term_error_handling_destination_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    rxpdr_dsp_lookup_table = std::make_shared<npl_rxpdr_dsp_lookup_table_t>();
    retval = init_table(creator, rxpdr_dsp_lookup_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rxpdr_dsp_lookup_table, %s", la_status2str(retval).c_str());
    
    rxpdr_dsp_tc_map = std::make_shared<npl_rxpdr_dsp_tc_map_t>();
    retval = init_table(creator, rxpdr_dsp_tc_map, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rxpdr_dsp_tc_map, %s", la_status2str(retval).c_str());
    
    rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table = std::make_shared<npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_t>();
    retval = init_table(creator, rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(sch_oqse_cfg); slice_id++) {
        sch_oqse_cfg[slice_id] = std::make_shared<npl_sch_oqse_cfg_t>();
        retval = init_table(creator, sch_oqse_cfg[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: sch_oqse_cfg(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    sda_fabric_enable_table = std::make_shared<npl_sda_fabric_enable_table_t>();
    retval = init_table(creator, sda_fabric_enable_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: sda_fabric_enable_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(second_ene_static_table); slice_id++) {
        second_ene_static_table[slice_id] = std::make_shared<npl_second_ene_static_table_t>();
        retval = init_table(creator, second_ene_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: second_ene_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(select_inject_next_macro_static_table); slice_id++) {
        select_inject_next_macro_static_table[slice_id] = std::make_shared<npl_select_inject_next_macro_static_table_t>();
        retval = init_table(creator, select_inject_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: select_inject_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(select_mac_forwarding_static_table); slice_id++) {
        select_mac_forwarding_static_table[slice_id] = std::make_shared<npl_select_mac_forwarding_static_table_t>();
        retval = init_table(creator, select_mac_forwarding_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: select_mac_forwarding_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_lp_attributes_table); slice_id++) {
        service_lp_attributes_table[slice_id] = std::make_shared<npl_service_lp_attributes_table_t>();
        retval = init_table(creator, service_lp_attributes_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_lp_attributes_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping0_key_lsb_mapping_table); slice_id++) {
        service_mapping0_key_lsb_mapping_table[slice_id] = std::make_shared<npl_service_mapping0_key_lsb_mapping_table_t>();
        retval = init_table(creator, service_mapping0_key_lsb_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping0_key_lsb_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping1_key_lsb_mapping_table); slice_id++) {
        service_mapping1_key_lsb_mapping_table[slice_id] = std::make_shared<npl_service_mapping1_key_lsb_mapping_table_t>();
        retval = init_table(creator, service_mapping1_key_lsb_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping1_key_lsb_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping_em0_ac_port_table); slice_id++) {
        service_mapping_em0_ac_port_table[slice_id] = std::make_shared<npl_service_mapping_em0_ac_port_table_t>();
        retval = init_table(creator, service_mapping_em0_ac_port_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_em0_ac_port_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping_em0_ac_port_tag_table); slice_id++) {
        service_mapping_em0_ac_port_tag_table[slice_id] = std::make_shared<npl_service_mapping_em0_ac_port_tag_table_t>();
        retval = init_table(creator, service_mapping_em0_ac_port_tag_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_em0_ac_port_tag_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping_em0_ac_port_tag_tag_table); slice_id++) {
        service_mapping_em0_ac_port_tag_tag_table[slice_id] = std::make_shared<npl_service_mapping_em0_ac_port_tag_tag_table_t>();
        retval = init_table(creator, service_mapping_em0_ac_port_tag_tag_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_em0_ac_port_tag_tag_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping_em0_pwe_tag_table); slice_id++) {
        service_mapping_em0_pwe_tag_table[slice_id] = std::make_shared<npl_service_mapping_em0_pwe_tag_table_t>();
        retval = init_table(creator, service_mapping_em0_pwe_tag_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_em0_pwe_tag_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping_em1_ac_port_tag_table); slice_id++) {
        service_mapping_em1_ac_port_tag_table[slice_id] = std::make_shared<npl_service_mapping_em1_ac_port_tag_table_t>();
        retval = init_table(creator, service_mapping_em1_ac_port_tag_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_em1_ac_port_tag_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (size_t slice_pair = 0; slice_pair < array_size(service_mapping_tcam_ac_port_table); slice_pair++) {
        service_mapping_tcam_ac_port_table[slice_pair] = std::make_shared<npl_service_mapping_tcam_ac_port_table_t>();
        retval = init_table(creator, service_mapping_tcam_ac_port_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_tcam_ac_port_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    for (size_t slice_pair = 0; slice_pair < array_size(service_mapping_tcam_ac_port_tag_table); slice_pair++) {
        service_mapping_tcam_ac_port_tag_table[slice_pair] = std::make_shared<npl_service_mapping_tcam_ac_port_tag_table_t>();
        retval = init_table(creator, service_mapping_tcam_ac_port_tag_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_tcam_ac_port_tag_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    for (size_t slice_pair = 0; slice_pair < array_size(service_mapping_tcam_ac_port_tag_tag_table); slice_pair++) {
        service_mapping_tcam_ac_port_tag_tag_table[slice_pair] = std::make_shared<npl_service_mapping_tcam_ac_port_tag_tag_table_t>();
        retval = init_table(creator, service_mapping_tcam_ac_port_tag_tag_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_tcam_ac_port_tag_tag_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping_tcam_key_lsb_mapping_table); slice_id++) {
        service_mapping_tcam_key_lsb_mapping_table[slice_id] = std::make_shared<npl_service_mapping_tcam_key_lsb_mapping_table_t>();
        retval = init_table(creator, service_mapping_tcam_key_lsb_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_tcam_key_lsb_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(service_mapping_tcam_pwe_tag_table); slice_id++) {
        service_mapping_tcam_pwe_tag_table[slice_id] = std::make_shared<npl_service_mapping_tcam_pwe_tag_table_t>();
        retval = init_table(creator, service_mapping_tcam_pwe_tag_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: service_mapping_tcam_pwe_tag_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    service_relay_attributes_table = std::make_shared<npl_service_relay_attributes_table_t>();
    retval = init_table(creator, service_relay_attributes_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: service_relay_attributes_table, %s", la_status2str(retval).c_str());
    
    service_relay_id_static_table = std::make_shared<npl_service_relay_id_static_table_t>();
    retval = init_table(creator, service_relay_id_static_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: service_relay_id_static_table, %s", la_status2str(retval).c_str());
    
    set_ene_macro_and_bytes_to_remove_table = std::make_shared<npl_set_ene_macro_and_bytes_to_remove_table_t>();
    retval = init_table(creator, set_ene_macro_and_bytes_to_remove_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: set_ene_macro_and_bytes_to_remove_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(sgacl_counter_bank_table); slice_id++) {
        sgacl_counter_bank_table[slice_id] = std::make_shared<npl_sgacl_counter_bank_table_t>();
        retval = init_table(creator, sgacl_counter_bank_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: sgacl_counter_bank_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(sgacl_ip_fragment_check_table); slice_id++) {
        sgacl_ip_fragment_check_table[slice_id] = std::make_shared<npl_sgacl_ip_fragment_check_table_t>();
        retval = init_table(creator, sgacl_ip_fragment_check_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: sgacl_ip_fragment_check_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(sgacl_l4_protocol_select_table); slice_id++) {
        sgacl_l4_protocol_select_table[slice_id] = std::make_shared<npl_sgacl_l4_protocol_select_table_t>();
        retval = init_table(creator, sgacl_l4_protocol_select_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: sgacl_l4_protocol_select_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(sgacl_next_macro_static_table); slice_id++) {
        sgacl_next_macro_static_table[slice_id] = std::make_shared<npl_sgacl_next_macro_static_table_t>();
        retval = init_table(creator, sgacl_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: sgacl_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(sgacl_table); slice_id++) {
        sgacl_table[slice_id] = std::make_shared<npl_sgacl_table_t>();
        retval = init_table(creator, sgacl_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: sgacl_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(sgt_derivation_macro_static_table); slice_id++) {
        sgt_derivation_macro_static_table[slice_id] = std::make_shared<npl_sgt_derivation_macro_static_table_t>();
        retval = init_table(creator, sgt_derivation_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: sgt_derivation_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    sgt_matrix_table = std::make_shared<npl_sgt_matrix_table_t>();
    retval = init_table(creator, sgt_matrix_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: sgt_matrix_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(sgt_vxlan_termination_table); slice_id++) {
        sgt_vxlan_termination_table[slice_id] = std::make_shared<npl_sgt_vxlan_termination_table_t>();
        retval = init_table(creator, sgt_vxlan_termination_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: sgt_vxlan_termination_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    sip_index_table = std::make_shared<npl_sip_index_table_t>();
    retval = init_table(creator, sip_index_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: sip_index_table, %s", la_status2str(retval).c_str());
    
    slice_modes_table = std::make_shared<npl_slice_modes_table_t>();
    retval = init_table(creator, slice_modes_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: slice_modes_table, %s", la_status2str(retval).c_str());
    
    slp_based_forwarding_table = std::make_shared<npl_slp_based_forwarding_table_t>();
    retval = init_table(creator, slp_based_forwarding_table, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: slp_based_forwarding_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(small_em_key_lsb_mapping_table); slice_id++) {
        small_em_key_lsb_mapping_table[slice_id] = std::make_shared<npl_small_em_key_lsb_mapping_table_t>();
        retval = init_table(creator, small_em_key_lsb_mapping_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: small_em_key_lsb_mapping_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(small_encap_mpls_he_asbr_table); slice_id++) {
        small_encap_mpls_he_asbr_table[slice_id] = std::make_shared<npl_small_encap_mpls_he_asbr_table_t>();
        retval = init_table(creator, small_encap_mpls_he_asbr_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: small_encap_mpls_he_asbr_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(small_encap_mpls_he_te_table); slice_id++) {
        small_encap_mpls_he_te_table[slice_id] = std::make_shared<npl_small_encap_mpls_he_te_table_t>();
        retval = init_table(creator, small_encap_mpls_he_te_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: small_encap_mpls_he_te_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    snoop_code_hw_table = std::make_shared<npl_snoop_code_hw_table_t>();
    retval = init_table(creator, snoop_code_hw_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: snoop_code_hw_table, %s", la_status2str(retval).c_str());
    
    snoop_table = std::make_shared<npl_snoop_table_t>();
    retval = init_table(creator, snoop_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: snoop_table, %s", la_status2str(retval).c_str());
    
    snoop_to_dsp_in_npu_soft_header_table = std::make_shared<npl_snoop_to_dsp_in_npu_soft_header_table_t>();
    retval = init_table(creator, snoop_to_dsp_in_npu_soft_header_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: snoop_to_dsp_in_npu_soft_header_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(source_pif_hw_table); slice_id++) {
        source_pif_hw_table[slice_id] = std::make_shared<npl_source_pif_hw_table_t>();
        retval = init_table(creator, source_pif_hw_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: source_pif_hw_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(source_port_to_link_table); slice_id++) {
        source_port_to_link_table[slice_id] = std::make_shared<npl_source_port_to_link_table_t>();
        retval = init_table(creator, source_port_to_link_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: source_port_to_link_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(splitter_lu_b_key_selector); slice_id++) {
        splitter_lu_b_key_selector[slice_id] = std::make_shared<npl_splitter_lu_b_key_selector_t>();
        retval = init_table(creator, splitter_lu_b_key_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: splitter_lu_b_key_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(splitter_lu_d_key_selector); slice_id++) {
        splitter_lu_d_key_selector[slice_id] = std::make_shared<npl_splitter_lu_d_key_selector_t>();
        retval = init_table(creator, splitter_lu_d_key_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: splitter_lu_d_key_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    stage0_assoc_data_table = std::make_shared<npl_stage0_assoc_data_table_t>();
    retval = init_table(creator, stage0_assoc_data_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage0_assoc_data_table, %s", la_status2str(retval).c_str());
    
    stage0_em_table = std::make_shared<npl_stage0_em_table_t>();
    retval = init_table(creator, stage0_em_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage0_em_table, %s", la_status2str(retval).c_str());
    
    stage0_group_size_table = std::make_shared<npl_stage0_group_size_table_t>();
    retval = init_table(creator, stage0_group_size_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage0_group_size_table, %s", la_status2str(retval).c_str());
    
    stage0_protection_table = std::make_shared<npl_stage0_protection_table_t>();
    retval = init_table(creator, stage0_protection_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage0_protection_table, %s", la_status2str(retval).c_str());
    
    stage0_type_decoding_table = std::make_shared<npl_stage0_type_decoding_table_t>();
    retval = init_table(creator, stage0_type_decoding_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage0_type_decoding_table, %s", la_status2str(retval).c_str());
    
    stage1_assoc_data_table = std::make_shared<npl_stage1_assoc_data_table_t>();
    retval = init_table(creator, stage1_assoc_data_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage1_assoc_data_table, %s", la_status2str(retval).c_str());
    
    stage1_em_table = std::make_shared<npl_stage1_em_table_t>();
    retval = init_table(creator, stage1_em_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage1_em_table, %s", la_status2str(retval).c_str());
    
    stage1_group_size_table = std::make_shared<npl_stage1_group_size_table_t>();
    retval = init_table(creator, stage1_group_size_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage1_group_size_table, %s", la_status2str(retval).c_str());
    
    stage1_protection_table = std::make_shared<npl_stage1_protection_table_t>();
    retval = init_table(creator, stage1_protection_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage1_protection_table, %s", la_status2str(retval).c_str());
    
    stage1_type_decoding_table = std::make_shared<npl_stage1_type_decoding_table_t>();
    retval = init_table(creator, stage1_type_decoding_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage1_type_decoding_table, %s", la_status2str(retval).c_str());
    
    stage2_assoc_data_table = std::make_shared<npl_stage2_assoc_data_table_t>();
    retval = init_table(creator, stage2_assoc_data_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage2_assoc_data_table, %s", la_status2str(retval).c_str());
    
    stage2_em_table = std::make_shared<npl_stage2_em_table_t>();
    retval = init_table(creator, stage2_em_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage2_em_table, %s", la_status2str(retval).c_str());
    
    stage2_group_size_table = std::make_shared<npl_stage2_group_size_table_t>();
    retval = init_table(creator, stage2_group_size_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage2_group_size_table, %s", la_status2str(retval).c_str());
    
    stage2_protection_table = std::make_shared<npl_stage2_protection_table_t>();
    retval = init_table(creator, stage2_protection_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage2_protection_table, %s", la_status2str(retval).c_str());
    
    stage2_type_decoding_table = std::make_shared<npl_stage2_type_decoding_table_t>();
    retval = init_table(creator, stage2_type_decoding_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage2_type_decoding_table, %s", la_status2str(retval).c_str());
    
    stage3_assoc_data_table = std::make_shared<npl_stage3_assoc_data_table_t>();
    retval = init_table(creator, stage3_assoc_data_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage3_assoc_data_table, %s", la_status2str(retval).c_str());
    
    stage3_em_table = std::make_shared<npl_stage3_em_table_t>();
    retval = init_table(creator, stage3_em_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage3_em_table, %s", la_status2str(retval).c_str());
    
    stage3_group_size_table = std::make_shared<npl_stage3_group_size_table_t>();
    retval = init_table(creator, stage3_group_size_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage3_group_size_table, %s", la_status2str(retval).c_str());
    
    stage3_protection_table = std::make_shared<npl_stage3_protection_table_t>();
    retval = init_table(creator, stage3_protection_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage3_protection_table, %s", la_status2str(retval).c_str());
    
    stage3_type_decoding_table = std::make_shared<npl_stage3_type_decoding_table_t>();
    retval = init_table(creator, stage3_type_decoding_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: stage3_type_decoding_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(svl_dspa_table); slice_id++) {
        svl_dspa_table[slice_id] = std::make_shared<npl_svl_dspa_table_t>();
        retval = init_table(creator, svl_dspa_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: svl_dspa_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(svl_is_dsp_remote); slice_id++) {
        svl_is_dsp_remote[slice_id] = std::make_shared<npl_svl_is_dsp_remote_t>();
        retval = init_table(creator, svl_is_dsp_remote[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: svl_is_dsp_remote(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(svl_mirror_cmd_remote_dsp_table); slice_id++) {
        svl_mirror_cmd_remote_dsp_table[slice_id] = std::make_shared<npl_svl_mirror_cmd_remote_dsp_table_t>();
        retval = init_table(creator, svl_mirror_cmd_remote_dsp_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: svl_mirror_cmd_remote_dsp_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(svl_mode_table); slice_id++) {
        svl_mode_table[slice_id] = std::make_shared<npl_svl_mode_table_t>();
        retval = init_table(creator, svl_mode_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: svl_mode_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(svl_next_macro_static_table); slice_id++) {
        svl_next_macro_static_table[slice_id] = std::make_shared<npl_svl_next_macro_static_table_t>();
        retval = init_table(creator, svl_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: svl_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(svl_sgacl_enable_static_table); slice_id++) {
        svl_sgacl_enable_static_table[slice_id] = std::make_shared<npl_svl_sgacl_enable_static_table_t>();
        retval = init_table(creator, svl_sgacl_enable_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: svl_sgacl_enable_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(svl_sgacl_next_macro_static_table); slice_id++) {
        svl_sgacl_next_macro_static_table[slice_id] = std::make_shared<npl_svl_sgacl_next_macro_static_table_t>();
        retval = init_table(creator, svl_sgacl_next_macro_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: svl_sgacl_next_macro_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    te_headend_lsp_counter_offset_table = std::make_shared<npl_te_headend_lsp_counter_offset_table_t>();
    retval = init_table(creator, te_headend_lsp_counter_offset_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: te_headend_lsp_counter_offset_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(term_bucket_a_lu_data_selector); slice_id++) {
        term_bucket_a_lu_data_selector[slice_id] = std::make_shared<npl_term_bucket_a_lu_data_selector_t>();
        retval = init_table(creator, term_bucket_a_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: term_bucket_a_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(term_bucket_b_lu_data_selector); slice_id++) {
        term_bucket_b_lu_data_selector[slice_id] = std::make_shared<npl_term_bucket_b_lu_data_selector_t>();
        retval = init_table(creator, term_bucket_b_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: term_bucket_b_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(term_bucket_c_lu_data_selector); slice_id++) {
        term_bucket_c_lu_data_selector[slice_id] = std::make_shared<npl_term_bucket_c_lu_data_selector_t>();
        retval = init_table(creator, term_bucket_c_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: term_bucket_c_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(term_bucket_d_lu_data_selector); slice_id++) {
        term_bucket_d_lu_data_selector[slice_id] = std::make_shared<npl_term_bucket_d_lu_data_selector_t>();
        retval = init_table(creator, term_bucket_d_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: term_bucket_d_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    term_to_fwd_hdr_shift_table = std::make_shared<npl_term_to_fwd_hdr_shift_table_t>();
    retval = init_table(creator, term_to_fwd_hdr_shift_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: term_to_fwd_hdr_shift_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(termination_to_forwarding_fi_hardwired_table); slice_id++) {
        termination_to_forwarding_fi_hardwired_table[slice_id] = std::make_shared<npl_termination_to_forwarding_fi_hardwired_table_t>();
        retval = init_table(creator, termination_to_forwarding_fi_hardwired_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: termination_to_forwarding_fi_hardwired_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    tm_ibm_cmd_to_destination = std::make_shared<npl_tm_ibm_cmd_to_destination_t>();
    retval = init_table(creator, tm_ibm_cmd_to_destination, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: tm_ibm_cmd_to_destination, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(transmit_bucket_a_lu_data_selector); slice_id++) {
        transmit_bucket_a_lu_data_selector[slice_id] = std::make_shared<npl_transmit_bucket_a_lu_data_selector_t>();
        retval = init_table(creator, transmit_bucket_a_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: transmit_bucket_a_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(transmit_bucket_b_lu_data_selector); slice_id++) {
        transmit_bucket_b_lu_data_selector[slice_id] = std::make_shared<npl_transmit_bucket_b_lu_data_selector_t>();
        retval = init_table(creator, transmit_bucket_b_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: transmit_bucket_b_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(transmit_bucket_c_lu_data_selector); slice_id++) {
        transmit_bucket_c_lu_data_selector[slice_id] = std::make_shared<npl_transmit_bucket_c_lu_data_selector_t>();
        retval = init_table(creator, transmit_bucket_c_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: transmit_bucket_c_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(transmit_bucket_d_lu_data_selector); slice_id++) {
        transmit_bucket_d_lu_data_selector[slice_id] = std::make_shared<npl_transmit_bucket_d_lu_data_selector_t>();
        retval = init_table(creator, transmit_bucket_d_lu_data_selector[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: transmit_bucket_d_lu_data_selector(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(ts_cmd_hw_static_table); slice_id++) {
        ts_cmd_hw_static_table[slice_id] = std::make_shared<npl_ts_cmd_hw_static_table_t>();
        retval = init_table(creator, ts_cmd_hw_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: ts_cmd_hw_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(tunnel_dlp_p_counter_offset_table); slice_id++) {
        tunnel_dlp_p_counter_offset_table[slice_id] = std::make_shared<npl_tunnel_dlp_p_counter_offset_table_t>();
        retval = init_table(creator, tunnel_dlp_p_counter_offset_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: tunnel_dlp_p_counter_offset_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(tunnel_qos_static_table); slice_id++) {
        tunnel_qos_static_table[slice_id] = std::make_shared<npl_tunnel_qos_static_table_t>();
        retval = init_table(creator, tunnel_qos_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: tunnel_qos_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(tx_counters_bank_id_map_config); slice_id++) {
        tx_counters_bank_id_map_config[slice_id] = std::make_shared<npl_tx_counters_bank_id_map_config_t>();
        retval = init_table(creator, tx_counters_bank_id_map_config[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: tx_counters_bank_id_map_config(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    tx_counters_block_config_table = std::make_shared<npl_tx_counters_block_config_table_t>();
    retval = init_table(creator, tx_counters_block_config_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: tx_counters_block_config_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(tx_error_handling_counter_table); slice_id++) {
        tx_error_handling_counter_table[slice_id] = std::make_shared<npl_tx_error_handling_counter_table_t>();
        retval = init_table(creator, tx_error_handling_counter_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: tx_error_handling_counter_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    tx_punt_eth_encap_table = std::make_shared<npl_tx_punt_eth_encap_table_t>();
    retval = init_table(creator, tx_punt_eth_encap_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: tx_punt_eth_encap_table, %s", la_status2str(retval).c_str());
    
    tx_redirect_code_table = std::make_shared<npl_tx_redirect_code_table_t>();
    retval = init_table(creator, tx_redirect_code_table, {0, 1, 2} /*all slice pairs*/, table_allocation_e::SLICE_PAIR);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: tx_redirect_code_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(txpdr_mc_list_size_table); slice_id++) {
        txpdr_mc_list_size_table[slice_id] = std::make_shared<npl_txpdr_mc_list_size_table_t>();
        retval = init_table(creator, txpdr_mc_list_size_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: txpdr_mc_list_size_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    txpdr_tc_map_table = std::make_shared<npl_txpdr_tc_map_table_t>();
    retval = init_table(creator, txpdr_tc_map_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: txpdr_tc_map_table, %s", la_status2str(retval).c_str());
    
    txpp_dlp_profile_key_construct_parameters_table = std::make_shared<npl_txpp_dlp_profile_key_construct_parameters_table_t>();
    retval = init_table(creator, txpp_dlp_profile_key_construct_parameters_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: txpp_dlp_profile_key_construct_parameters_table, %s", la_status2str(retval).c_str());
    
    for (size_t slice_pair = 0; slice_pair < array_size(txpp_em_dlp_profile_mapping_table); slice_pair++) {
        txpp_em_dlp_profile_mapping_table[slice_pair] = std::make_shared<npl_txpp_em_dlp_profile_mapping_table_t>();
        retval = init_table(creator, txpp_em_dlp_profile_mapping_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: txpp_em_dlp_profile_mapping_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    txpp_encap_qos_mapping_table = std::make_shared<npl_txpp_encap_qos_mapping_table_t>();
    retval = init_table(creator, txpp_encap_qos_mapping_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: txpp_encap_qos_mapping_table, %s", la_status2str(retval).c_str());
    
    txpp_first_enc_type_to_second_enc_type_offset = std::make_shared<npl_txpp_first_enc_type_to_second_enc_type_offset_t>();
    retval = init_table(creator, txpp_first_enc_type_to_second_enc_type_offset, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: txpp_first_enc_type_to_second_enc_type_offset, %s", la_status2str(retval).c_str());
    
    txpp_fwd_qos_mapping_table = std::make_shared<npl_txpp_fwd_qos_mapping_table_t>();
    retval = init_table(creator, txpp_fwd_qos_mapping_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: txpp_fwd_qos_mapping_table, %s", la_status2str(retval).c_str());
    
    txpp_initial_npe_macro_table = std::make_shared<npl_txpp_initial_npe_macro_table_t>();
    retval = init_table(creator, txpp_initial_npe_macro_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: txpp_initial_npe_macro_table, %s", la_status2str(retval).c_str());
    
    for (size_t slice_pair = 0; slice_pair < array_size(txpp_mapping_qos_tag_table); slice_pair++) {
        txpp_mapping_qos_tag_table[slice_pair] = std::make_shared<npl_txpp_mapping_qos_tag_table_t>();
        retval = init_table(creator, txpp_mapping_qos_tag_table[slice_pair], {slice_pair * 2, slice_pair * 2 + 1}, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: txpp_mapping_qos_tag_table(%ld), %s", slice_pair, la_status2str(retval).c_str());
    }
    
    uc_ibm_tc_map_table = std::make_shared<npl_uc_ibm_tc_map_table_t>();
    retval = init_table(creator, uc_ibm_tc_map_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: uc_ibm_tc_map_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(urpf_ipsa_dest_is_lpts_static_table); slice_id++) {
        urpf_ipsa_dest_is_lpts_static_table[slice_id] = std::make_shared<npl_urpf_ipsa_dest_is_lpts_static_table_t>();
        retval = init_table(creator, urpf_ipsa_dest_is_lpts_static_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: urpf_ipsa_dest_is_lpts_static_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    vlan_edit_tpid1_profile_hw_table = std::make_shared<npl_vlan_edit_tpid1_profile_hw_table_t>();
    retval = init_table(creator, vlan_edit_tpid1_profile_hw_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: vlan_edit_tpid1_profile_hw_table, %s", la_status2str(retval).c_str());
    
    vlan_edit_tpid2_profile_hw_table = std::make_shared<npl_vlan_edit_tpid2_profile_hw_table_t>();
    retval = init_table(creator, vlan_edit_tpid2_profile_hw_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: vlan_edit_tpid2_profile_hw_table, %s", la_status2str(retval).c_str());
    
    vlan_format_table = std::make_shared<npl_vlan_format_table_t>();
    retval = init_table(creator, vlan_format_table, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: vlan_format_table, %s", la_status2str(retval).c_str());
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(vni_table); slice_id++) {
        vni_table[slice_id] = std::make_shared<npl_vni_table_t>();
        retval = init_table(creator, vni_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: vni_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_buffers_consumption_lut_for_deq_table); slice_id++) {
        voq_cgm_slice_buffers_consumption_lut_for_deq_table[slice_id] = std::make_shared<npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_t>();
        retval = init_table(creator, voq_cgm_slice_buffers_consumption_lut_for_deq_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_buffers_consumption_lut_for_deq_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_buffers_consumption_lut_for_enq_table); slice_id++) {
        voq_cgm_slice_buffers_consumption_lut_for_enq_table[slice_id] = std::make_shared<npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t>();
        retval = init_table(creator, voq_cgm_slice_buffers_consumption_lut_for_enq_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_buffers_consumption_lut_for_enq_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_drop_green_probability_selector_table); slice_id++) {
        voq_cgm_slice_drop_green_probability_selector_table[slice_id] = std::make_shared<npl_voq_cgm_slice_drop_green_probability_selector_table_t>();
        retval = init_table(creator, voq_cgm_slice_drop_green_probability_selector_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_drop_green_probability_selector_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_drop_yellow_probability_selector_table); slice_id++) {
        voq_cgm_slice_drop_yellow_probability_selector_table[slice_id] = std::make_shared<npl_voq_cgm_slice_drop_yellow_probability_selector_table_t>();
        retval = init_table(creator, voq_cgm_slice_drop_yellow_probability_selector_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_drop_yellow_probability_selector_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table); slice_id++) {
        voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table[slice_id] = std::make_shared<npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_t>();
        retval = init_table(creator, voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_eviction_ok_lut_for_enq_table); slice_id++) {
        voq_cgm_slice_eviction_ok_lut_for_enq_table[slice_id] = std::make_shared<npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_t>();
        retval = init_table(creator, voq_cgm_slice_eviction_ok_lut_for_enq_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_eviction_ok_lut_for_enq_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_mark_probability_selector_table); slice_id++) {
        voq_cgm_slice_mark_probability_selector_table[slice_id] = std::make_shared<npl_voq_cgm_slice_mark_probability_selector_table_t>();
        retval = init_table(creator, voq_cgm_slice_mark_probability_selector_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_mark_probability_selector_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_pd_consumption_lut_for_deq_table); slice_id++) {
        voq_cgm_slice_pd_consumption_lut_for_deq_table[slice_id] = std::make_shared<npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_t>();
        retval = init_table(creator, voq_cgm_slice_pd_consumption_lut_for_deq_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_pd_consumption_lut_for_deq_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_pd_consumption_lut_for_enq_table); slice_id++) {
        voq_cgm_slice_pd_consumption_lut_for_enq_table[slice_id] = std::make_shared<npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t>();
        retval = init_table(creator, voq_cgm_slice_pd_consumption_lut_for_enq_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_pd_consumption_lut_for_enq_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_profile_buff_region_thresholds_table); slice_id++) {
        voq_cgm_slice_profile_buff_region_thresholds_table[slice_id] = std::make_shared<npl_voq_cgm_slice_profile_buff_region_thresholds_table_t>();
        retval = init_table(creator, voq_cgm_slice_profile_buff_region_thresholds_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_profile_buff_region_thresholds_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table); slice_id++) {
        voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[slice_id] = std::make_shared<npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t>();
        retval = init_table(creator, voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_profile_pkt_region_thresholds_table); slice_id++) {
        voq_cgm_slice_profile_pkt_region_thresholds_table[slice_id] = std::make_shared<npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t>();
        retval = init_table(creator, voq_cgm_slice_profile_pkt_region_thresholds_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_profile_pkt_region_thresholds_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_slice_slice_cgm_profile_table); slice_id++) {
        voq_cgm_slice_slice_cgm_profile_table[slice_id] = std::make_shared<npl_voq_cgm_slice_slice_cgm_profile_table_t>();
        retval = init_table(creator, voq_cgm_slice_slice_cgm_profile_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_slice_slice_cgm_profile_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(voq_cgm_wred_probability_table); slice_id++) {
        voq_cgm_wred_probability_table[slice_id] = std::make_shared<npl_voq_cgm_wred_probability_table_t>();
        retval = init_table(creator, voq_cgm_wred_probability_table[slice_id], slice_id, table_allocation_e::SLICE);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: voq_cgm_wred_probability_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(vsid_table); slice_id++) {
        vsid_table[slice_id] = std::make_shared<npl_vsid_table_t>();
        retval = init_table(creator, vsid_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: vsid_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    for (la_slice_id_t slice_id = 0; slice_id < array_size(vxlan_l2_dlp_table); slice_id++) {
        vxlan_l2_dlp_table[slice_id] = std::make_shared<npl_vxlan_l2_dlp_table_t>();
        retval = init_table(creator, vxlan_l2_dlp_table[slice_id], slice_id, table_allocation_e::SLICE_PAIR);
        return_on_error(retval, TABLES, ERROR, "table initialization failed: vxlan_l2_dlp_table(%d), %s", slice_id, la_status2str(retval).c_str());
    }
    
    inject_mact_ldb_to_output_lr = std::make_shared<npl_inject_mact_ldb_to_output_lr_t>();
    retval = init_table(creator, inject_mact_ldb_to_output_lr, {0, 1, 2, 3, 4, 5} /*all slices*/, table_allocation_e::SLICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: inject_mact_ldb_to_output_lr, %s", la_status2str(retval).c_str());
    
    lr_filter_write_ptr_reg = std::make_shared<npl_lr_filter_write_ptr_reg_t>();
    retval = init_table(creator, lr_filter_write_ptr_reg, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: lr_filter_write_ptr_reg, %s", la_status2str(retval).c_str());
    
    lr_write_ptr_reg = std::make_shared<npl_lr_write_ptr_reg_t>();
    retval = init_table(creator, lr_write_ptr_reg, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: lr_write_ptr_reg, %s", la_status2str(retval).c_str());
    
    learn_manager_cfg_max_learn_type_reg = std::make_shared<npl_learn_manager_cfg_max_learn_type_reg_t>();
    retval = init_table(creator, learn_manager_cfg_max_learn_type_reg, 0 /*slice id*/, table_allocation_e::DEVICE);
    return_on_error(retval, TABLES, ERROR, "table initialization failed: learn_manager_cfg_max_learn_type_reg, %s", la_status2str(retval).c_str());
    
    retval = creator.post_table_init();
    return_on_error(retval);
    
    return LA_STATUS_SUCCESS;
}

} // namespace silicon_one

