// This file has been automatically generated in nplapi package. Do not edit it manually.
// Generated by nplapi_utilities.py at 2021-05-12 16:24:26

#ifndef __RA_TRANSLATOR_CREATOR_BASE_H__
#define __RA_TRANSLATOR_CREATOR_BASE_H__


// nplapi compiled headers
#define NPLAPI_NUM_SLICES 6
#include "nplapi/nplapi_tables.h"

#include "nplapi/translator_creator.h"
#include "ra_translators_serialize_struct_helpers.h"

namespace silicon_one {

namespace ra {

/// @brief Helper functions to initialize functional tables with translators.
/// The functions should be implemented in one of the flow creation packages
///
/// @retval     LA_STATUS_SUCCESS           Operation completed successfully.
///             LA_STATUS_ENOTIMPLEMENTED   Specific type is not supported yet.
///
template <class _Table>
static la_status init_table(_Table& table, translator_creator& creator, const std::vector<size_t>& indices);

/// @brief Automatically generated class that implements interface to initialize NPL functional tables with corresponding translators.
///
class translator_creator_impl : public translator_creator {
public:

translator_creator_impl(ll_device_sptr lld, const std::vector<npl_context_e>& npl_context_slices): translator_creator(lld, npl_context_slices)
{
}

translator_creator_impl() {} // For serialization purposes only.

/// @brief Provides separate calls to template a function for each npl_table_type
/// allowing convenient implementation of each option by template specializations.
///
virtual la_status initialize_table(void* table, npl_tables_e table_type, const std::vector<size_t>& indices)
{
    la_status ret = LA_STATUS_ENOTIMPLEMENTED;
    
    switch (table_type) {    
        
        // table: acl_map_fi_header_type_to_protocol_number_table
        case NPL_TABLES_ACL_MAP_FI_HEADER_TYPE_TO_PROTOCOL_NUMBER_TABLE:
        ret = init_table(*(static_cast<npl_acl_map_fi_header_type_to_protocol_number_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_desired_tx_interval_table
        case NPL_TABLES_BFD_DESIRED_TX_INTERVAL_TABLE:
        ret = init_table(*(static_cast<npl_bfd_desired_tx_interval_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_detection_multiple_table
        case NPL_TABLES_BFD_DETECTION_MULTIPLE_TABLE:
        ret = init_table(*(static_cast<npl_bfd_detection_multiple_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_inject_inner_da_high_table
        case NPL_TABLES_BFD_INJECT_INNER_DA_HIGH_TABLE:
        ret = init_table(*(static_cast<npl_bfd_inject_inner_da_high_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_inject_inner_da_low_table
        case NPL_TABLES_BFD_INJECT_INNER_DA_LOW_TABLE:
        ret = init_table(*(static_cast<npl_bfd_inject_inner_da_low_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_inject_inner_ethernet_header_static_table
        case NPL_TABLES_BFD_INJECT_INNER_ETHERNET_HEADER_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_bfd_inject_inner_ethernet_header_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_inject_ttl_static_table
        case NPL_TABLES_BFD_INJECT_TTL_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_bfd_inject_ttl_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_ipv6_sip_A_table
        case NPL_TABLES_BFD_IPV6_SIP_A_TABLE:
        ret = init_table(*(static_cast<npl_bfd_ipv6_sip_A_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_ipv6_sip_B_table
        case NPL_TABLES_BFD_IPV6_SIP_B_TABLE:
        ret = init_table(*(static_cast<npl_bfd_ipv6_sip_B_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_ipv6_sip_C_table
        case NPL_TABLES_BFD_IPV6_SIP_C_TABLE:
        ret = init_table(*(static_cast<npl_bfd_ipv6_sip_C_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_ipv6_sip_D_table
        case NPL_TABLES_BFD_IPV6_SIP_D_TABLE:
        ret = init_table(*(static_cast<npl_bfd_ipv6_sip_D_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_punt_encap_static_table
        case NPL_TABLES_BFD_PUNT_ENCAP_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_bfd_punt_encap_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_required_tx_interval_table
        case NPL_TABLES_BFD_REQUIRED_TX_INTERVAL_TABLE:
        ret = init_table(*(static_cast<npl_bfd_required_tx_interval_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_set_inject_type_static_table
        case NPL_TABLES_BFD_SET_INJECT_TYPE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_bfd_set_inject_type_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_udp_port_static_table
        case NPL_TABLES_BFD_UDP_PORT_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_bfd_udp_port_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bvn_tc_map_table
        case NPL_TABLES_BVN_TC_MAP_TABLE:
        ret = init_table(*(static_cast<npl_bvn_tc_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ccm_flags_table
        case NPL_TABLES_CCM_FLAGS_TABLE:
        ret = init_table(*(static_cast<npl_ccm_flags_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: cong_level_ecn_remap_map_table
        case NPL_TABLES_CONG_LEVEL_ECN_REMAP_MAP_TABLE:
        ret = init_table(*(static_cast<npl_cong_level_ecn_remap_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: db_access_per_port_destination_table
        case NPL_TABLES_DB_ACCESS_PER_PORT_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_db_access_per_port_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: db_access_transmit_per_dest_port_npu_host_macro_stamping_table
        case NPL_TABLES_DB_ACCESS_TRANSMIT_PER_DEST_PORT_NPU_HOST_MACRO_STAMPING_TABLE:
        ret = init_table(*(static_cast<npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dsp_group_policy_table
        case NPL_TABLES_DSP_GROUP_POLICY_TABLE:
        ret = init_table(*(static_cast<npl_dsp_group_policy_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dsp_l2_attributes_table
        case NPL_TABLES_DSP_L2_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_dsp_l2_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dsp_l3_attributes_table
        case NPL_TABLES_DSP_L3_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_dsp_l3_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ene_macro_code_tpid_profile_static_table
        case NPL_TABLES_ENE_MACRO_CODE_TPID_PROFILE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ene_macro_code_tpid_profile_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ene_rewrite_punt_sa_prefix_index_table
        case NPL_TABLES_ENE_REWRITE_PUNT_SA_PREFIX_INDEX_TABLE:
        ret = init_table(*(static_cast<npl_ene_rewrite_punt_sa_prefix_index_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ene_rewrite_sa_prefix_index_table
        case NPL_TABLES_ENE_REWRITE_SA_PREFIX_INDEX_TABLE:
        ret = init_table(*(static_cast<npl_ene_rewrite_sa_prefix_index_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eth_meter_profile_mapping_table
        case NPL_TABLES_ETH_METER_PROFILE_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_eth_meter_profile_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eth_oam_set_da_mc2_static_table
        case NPL_TABLES_ETH_OAM_SET_DA_MC2_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_eth_oam_set_da_mc2_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eth_oam_set_da_mc_static_table
        case NPL_TABLES_ETH_OAM_SET_DA_MC_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_eth_oam_set_da_mc_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eth_rtf_conf_set_mapping_table
        case NPL_TABLES_ETH_RTF_CONF_SET_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_eth_rtf_conf_set_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eth_type_static_table
        case NPL_TABLES_ETH_TYPE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_eth_type_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eve_to_ethernet_ene_static_table
        case NPL_TABLES_EVE_TO_ETHERNET_ENE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_eve_to_ethernet_ene_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_header_types_static_table
        case NPL_TABLES_FABRIC_HEADER_TYPES_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_fabric_header_types_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_rx_fwd_error_handling_counter_table
        case NPL_TABLES_FABRIC_RX_FWD_ERROR_HANDLING_COUNTER_TABLE:
        ret = init_table(*(static_cast<npl_fabric_rx_fwd_error_handling_counter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_rx_fwd_error_handling_destination_table
        case NPL_TABLES_FABRIC_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_fabric_rx_fwd_error_handling_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_rx_term_error_handling_counter_table
        case NPL_TABLES_FABRIC_RX_TERM_ERROR_HANDLING_COUNTER_TABLE:
        ret = init_table(*(static_cast<npl_fabric_rx_term_error_handling_counter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_rx_term_error_handling_destination_table
        case NPL_TABLES_FABRIC_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_fabric_rx_term_error_handling_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_scaled_mc_map_to_netork_slice_static_table
        case NPL_TABLES_FABRIC_SCALED_MC_MAP_TO_NETORK_SLICE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_fabric_scaled_mc_map_to_netork_slice_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_smcid_threshold_table
        case NPL_TABLES_FABRIC_SMCID_THRESHOLD_TABLE:
        ret = init_table(*(static_cast<npl_fabric_smcid_threshold_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_tm_headers_table
        case NPL_TABLES_FABRIC_TM_HEADERS_TABLE:
        ret = init_table(*(static_cast<npl_fabric_tm_headers_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fe_smcid_threshold_table
        case NPL_TABLES_FE_SMCID_THRESHOLD_TABLE:
        ret = init_table(*(static_cast<npl_fe_smcid_threshold_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: first_ene_static_table
        case NPL_TABLES_FIRST_ENE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_first_ene_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fwd_bucket_a_lu_data_selector
        case NPL_TABLES_FWD_BUCKET_A_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_fwd_bucket_a_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: fwd_bucket_b_lu_data_selector
        case NPL_TABLES_FWD_BUCKET_B_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_fwd_bucket_b_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: fwd_bucket_c_lu_data_selector
        case NPL_TABLES_FWD_BUCKET_C_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_fwd_bucket_c_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: fwd_bucket_d_lu_data_selector
        case NPL_TABLES_FWD_BUCKET_D_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_fwd_bucket_d_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: get_ecm_meter_ptr_table
        case NPL_TABLES_GET_ECM_METER_PTR_TABLE:
        ret = init_table(*(static_cast<npl_get_ecm_meter_ptr_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: get_ingress_ptp_info_and_is_slp_dm_static_table
        case NPL_TABLES_GET_INGRESS_PTP_INFO_AND_IS_SLP_DM_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_get_ingress_ptp_info_and_is_slp_dm_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: get_l2_rtf_conf_set_and_init_stages
        case NPL_TABLES_GET_L2_RTF_CONF_SET_AND_INIT_STAGES:
        ret = init_table(*(static_cast<npl_get_l2_rtf_conf_set_and_init_stages_t*>(table)), *this, indices);
        return ret;    
        
        // table: get_non_comp_mc_value_static_table
        case NPL_TABLES_GET_NON_COMP_MC_VALUE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_get_non_comp_mc_value_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: gre_proto_static_table
        case NPL_TABLES_GRE_PROTO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_gre_proto_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ibm_mc_cmd_to_encap_data_table
        case NPL_TABLES_IBM_MC_CMD_TO_ENCAP_DATA_TABLE:
        ret = init_table(*(static_cast<npl_ibm_mc_cmd_to_encap_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ibm_uc_cmd_to_encap_data_table
        case NPL_TABLES_IBM_UC_CMD_TO_ENCAP_DATA_TABLE:
        ret = init_table(*(static_cast<npl_ibm_uc_cmd_to_encap_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_ip_qos_mapping_table
        case NPL_TABLES_INGRESS_IP_QOS_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_ingress_ip_qos_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: inner_tpid_table
        case NPL_TABLES_INNER_TPID_TABLE:
        ret = init_table(*(static_cast<npl_inner_tpid_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_fwd_header_mapping_to_ethtype_static_table
        case NPL_TABLES_IP_FWD_HEADER_MAPPING_TO_ETHTYPE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ip_fwd_header_mapping_to_ethtype_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_mc_local_inject_type_static_table
        case NPL_TABLES_IP_MC_LOCAL_INJECT_TYPE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ip_mc_local_inject_type_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_mc_next_macro_static_table
        case NPL_TABLES_IP_MC_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ip_mc_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_meter_profile_mapping_table
        case NPL_TABLES_IP_METER_PROFILE_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_ip_meter_profile_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_rx_global_counter_table
        case NPL_TABLES_IP_RX_GLOBAL_COUNTER_TABLE:
        ret = init_table(*(static_cast<npl_ip_rx_global_counter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_acl_sport_static_table
        case NPL_TABLES_IPV4_ACL_SPORT_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_acl_sport_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_rtf_conf_set_mapping_table
        case NPL_TABLES_IPV4_RTF_CONF_SET_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_rtf_conf_set_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_acl_sport_static_table
        case NPL_TABLES_IPV6_ACL_SPORT_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_acl_sport_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_rtf_conf_set_mapping_table
        case NPL_TABLES_IPV6_RTF_CONF_SET_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_rtf_conf_set_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_lp_profile_filter_table
        case NPL_TABLES_L2_LP_PROFILE_FILTER_TABLE:
        ret = init_table(*(static_cast<npl_l2_lp_profile_filter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_lpts_skip_p2p_static_table
        case NPL_TABLES_L2_LPTS_SKIP_P2P_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_l2_lpts_skip_p2p_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_tunnel_term_next_macro_static_table
        case NPL_TABLES_L2_TUNNEL_TERM_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_l2_tunnel_term_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l3_vxlan_overlay_sa_table
        case NPL_TABLES_L3_VXLAN_OVERLAY_SA_TABLE:
        ret = init_table(*(static_cast<npl_l3_vxlan_overlay_sa_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: lpts_2nd_lookup_table
        case NPL_TABLES_LPTS_2ND_LOOKUP_TABLE:
        ret = init_table(*(static_cast<npl_lpts_2nd_lookup_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: lpts_meter_table
        case NPL_TABLES_LPTS_METER_TABLE:
        ret = init_table(*(static_cast<npl_lpts_meter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_af_npp_attributes_table
        case NPL_TABLES_MAC_AF_NPP_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_mac_af_npp_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_qos_mapping_table
        case NPL_TABLES_MAC_QOS_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_mac_qos_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: map_ene_subcode_to8bit_static_table
        case NPL_TABLES_MAP_ENE_SUBCODE_TO8BIT_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_map_ene_subcode_to8bit_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: map_more_labels_static_table
        case NPL_TABLES_MAP_MORE_LABELS_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_map_more_labels_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: map_recyle_tx_to_rx_data_on_pd_static_table
        case NPL_TABLES_MAP_RECYLE_TX_TO_RX_DATA_ON_PD_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_map_recyle_tx_to_rx_data_on_pd_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: map_tm_dp_ecn_to_wa_ecn_dp_static_table
        case NPL_TABLES_MAP_TM_DP_ECN_TO_WA_ECN_DP_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mep_address_prefix_table
        case NPL_TABLES_MEP_ADDRESS_PREFIX_TABLE:
        ret = init_table(*(static_cast<npl_mep_address_prefix_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mirror_egress_attributes_table
        case NPL_TABLES_MIRROR_EGRESS_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_mirror_egress_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mirror_to_dsp_in_npu_soft_header_table
        case NPL_TABLES_MIRROR_TO_DSP_IN_NPU_SOFT_HEADER_TABLE:
        ret = init_table(*(static_cast<npl_mirror_to_dsp_in_npu_soft_header_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mldp_protection_table
        case NPL_TABLES_MLDP_PROTECTION_TABLE:
        ret = init_table(*(static_cast<npl_mldp_protection_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_encap_control_static_table
        case NPL_TABLES_MPLS_ENCAP_CONTROL_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mpls_encap_control_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_header_offset_in_bytes_static_table
        case NPL_TABLES_MPLS_HEADER_OFFSET_IN_BYTES_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mpls_header_offset_in_bytes_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_l3_lsp_static_table
        case NPL_TABLES_MPLS_L3_LSP_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mpls_l3_lsp_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_labels_1_to_4_jump_offset_static_table
        case NPL_TABLES_MPLS_LABELS_1_TO_4_JUMP_OFFSET_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mpls_labels_1_to_4_jump_offset_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_lsp_labels_config_static_table
        case NPL_TABLES_MPLS_LSP_LABELS_CONFIG_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mpls_lsp_labels_config_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_qos_mapping_table
        case NPL_TABLES_MPLS_QOS_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_mpls_qos_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: next_header_1_is_l4_over_ipv4_static_table
        case NPL_TABLES_NEXT_HEADER_1_IS_L4_OVER_IPV4_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_next_header_1_is_l4_over_ipv4_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: nhlfe_type_mapping_static_table
        case NPL_TABLES_NHLFE_TYPE_MAPPING_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_nhlfe_type_mapping_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: npp_sgt_attributes_table
        case NPL_TABLES_NPP_SGT_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_npp_sgt_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: nw_smcid_threshold_table
        case NPL_TABLES_NW_SMCID_THRESHOLD_TABLE:
        ret = init_table(*(static_cast<npl_nw_smcid_threshold_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: oamp_drop_destination_static_table
        case NPL_TABLES_OAMP_DROP_DESTINATION_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_oamp_drop_destination_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: oamp_redirect_get_counter_table
        case NPL_TABLES_OAMP_REDIRECT_GET_COUNTER_TABLE:
        ret = init_table(*(static_cast<npl_oamp_redirect_get_counter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: oamp_redirect_punt_eth_hdr_1_table
        case NPL_TABLES_OAMP_REDIRECT_PUNT_ETH_HDR_1_TABLE:
        ret = init_table(*(static_cast<npl_oamp_redirect_punt_eth_hdr_1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: oamp_redirect_punt_eth_hdr_2_table
        case NPL_TABLES_OAMP_REDIRECT_PUNT_ETH_HDR_2_TABLE:
        ret = init_table(*(static_cast<npl_oamp_redirect_punt_eth_hdr_2_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: oamp_redirect_punt_eth_hdr_3_table
        case NPL_TABLES_OAMP_REDIRECT_PUNT_ETH_HDR_3_TABLE:
        ret = init_table(*(static_cast<npl_oamp_redirect_punt_eth_hdr_3_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: oamp_redirect_punt_eth_hdr_4_table
        case NPL_TABLES_OAMP_REDIRECT_PUNT_ETH_HDR_4_TABLE:
        ret = init_table(*(static_cast<npl_oamp_redirect_punt_eth_hdr_4_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: oamp_redirect_table
        case NPL_TABLES_OAMP_REDIRECT_TABLE:
        ret = init_table(*(static_cast<npl_oamp_redirect_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: outer_tpid_table
        case NPL_TABLES_OUTER_TPID_TABLE:
        ret = init_table(*(static_cast<npl_outer_tpid_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: per_port_destination_table
        case NPL_TABLES_PER_PORT_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_per_port_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: punt_rcy_inject_header_ene_encap_table
        case NPL_TABLES_PUNT_RCY_INJECT_HEADER_ENE_ENCAP_TABLE:
        ret = init_table(*(static_cast<npl_punt_rcy_inject_header_ene_encap_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: punt_select_nw_ene_static_table
        case NPL_TABLES_PUNT_SELECT_NW_ENE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_punt_select_nw_ene_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: recycled_inject_up_info_table
        case NPL_TABLES_RECYCLED_INJECT_UP_INFO_TABLE:
        ret = init_table(*(static_cast<npl_recycled_inject_up_info_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: resolution_set_next_macro_table
        case NPL_TABLES_RESOLUTION_SET_NEXT_MACRO_TABLE:
        ret = init_table(*(static_cast<npl_resolution_set_next_macro_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rtf_conf_set_to_og_pcl_compress_bits_mapping_table
        case NPL_TABLES_RTF_CONF_SET_TO_OG_PCL_COMPRESS_BITS_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rtf_conf_set_to_og_pcl_ids_mapping_table
        case NPL_TABLES_RTF_CONF_SET_TO_OG_PCL_IDS_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_rtf_conf_set_to_og_pcl_ids_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rtf_conf_set_to_post_fwd_stage_mapping_table
        case NPL_TABLES_RTF_CONF_SET_TO_POST_FWD_STAGE_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_rtf_conf_set_to_post_fwd_stage_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_fwd_error_handling_counter_table
        case NPL_TABLES_RX_FWD_ERROR_HANDLING_COUNTER_TABLE:
        ret = init_table(*(static_cast<npl_rx_fwd_error_handling_counter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_fwd_error_handling_destination_table
        case NPL_TABLES_RX_FWD_ERROR_HANDLING_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_rx_fwd_error_handling_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_ip_p_counter_offset_static_table
        case NPL_TABLES_RX_IP_P_COUNTER_OFFSET_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_rx_ip_p_counter_offset_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_map_npp_to_ssp_table
        case NPL_TABLES_RX_MAP_NPP_TO_SSP_TABLE:
        ret = init_table(*(static_cast<npl_rx_map_npp_to_ssp_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_obm_code_table
        case NPL_TABLES_RX_OBM_CODE_TABLE:
        ret = init_table(*(static_cast<npl_rx_obm_code_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_redirect_code_ext_table
        case NPL_TABLES_RX_REDIRECT_CODE_EXT_TABLE:
        ret = init_table(*(static_cast<npl_rx_redirect_code_ext_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_redirect_code_table
        case NPL_TABLES_RX_REDIRECT_CODE_TABLE:
        ret = init_table(*(static_cast<npl_rx_redirect_code_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_term_error_handling_counter_table
        case NPL_TABLES_RX_TERM_ERROR_HANDLING_COUNTER_TABLE:
        ret = init_table(*(static_cast<npl_rx_term_error_handling_counter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_term_error_handling_destination_table
        case NPL_TABLES_RX_TERM_ERROR_HANDLING_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_rx_term_error_handling_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sda_fabric_enable_table
        case NPL_TABLES_SDA_FABRIC_ENABLE_TABLE:
        ret = init_table(*(static_cast<npl_sda_fabric_enable_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: select_mac_forwarding_static_table
        case NPL_TABLES_SELECT_MAC_FORWARDING_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_select_mac_forwarding_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: set_ene_macro_and_bytes_to_remove_table
        case NPL_TABLES_SET_ENE_MACRO_AND_BYTES_TO_REMOVE_TABLE:
        ret = init_table(*(static_cast<npl_set_ene_macro_and_bytes_to_remove_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sgacl_counter_bank_table
        case NPL_TABLES_SGACL_COUNTER_BANK_TABLE:
        ret = init_table(*(static_cast<npl_sgacl_counter_bank_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sgacl_l4_protocol_select_table
        case NPL_TABLES_SGACL_L4_PROTOCOL_SELECT_TABLE:
        ret = init_table(*(static_cast<npl_sgacl_l4_protocol_select_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sip_index_table
        case NPL_TABLES_SIP_INDEX_TABLE:
        ret = init_table(*(static_cast<npl_sip_index_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: snoop_to_dsp_in_npu_soft_header_table
        case NPL_TABLES_SNOOP_TO_DSP_IN_NPU_SOFT_HEADER_TABLE:
        ret = init_table(*(static_cast<npl_snoop_to_dsp_in_npu_soft_header_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: svl_dspa_table
        case NPL_TABLES_SVL_DSPA_TABLE:
        ret = init_table(*(static_cast<npl_svl_dspa_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: svl_mirror_cmd_remote_dsp_table
        case NPL_TABLES_SVL_MIRROR_CMD_REMOTE_DSP_TABLE:
        ret = init_table(*(static_cast<npl_svl_mirror_cmd_remote_dsp_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: svl_mode_table
        case NPL_TABLES_SVL_MODE_TABLE:
        ret = init_table(*(static_cast<npl_svl_mode_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: term_bucket_a_lu_data_selector
        case NPL_TABLES_TERM_BUCKET_A_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_term_bucket_a_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: term_bucket_b_lu_data_selector
        case NPL_TABLES_TERM_BUCKET_B_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_term_bucket_b_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: term_bucket_c_lu_data_selector
        case NPL_TABLES_TERM_BUCKET_C_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_term_bucket_c_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: term_bucket_d_lu_data_selector
        case NPL_TABLES_TERM_BUCKET_D_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_term_bucket_d_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: transmit_bucket_a_lu_data_selector
        case NPL_TABLES_TRANSMIT_BUCKET_A_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_transmit_bucket_a_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: transmit_bucket_b_lu_data_selector
        case NPL_TABLES_TRANSMIT_BUCKET_B_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_transmit_bucket_b_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: transmit_bucket_c_lu_data_selector
        case NPL_TABLES_TRANSMIT_BUCKET_C_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_transmit_bucket_c_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: transmit_bucket_d_lu_data_selector
        case NPL_TABLES_TRANSMIT_BUCKET_D_LU_DATA_SELECTOR:
        ret = init_table(*(static_cast<npl_transmit_bucket_d_lu_data_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: tunnel_qos_static_table
        case NPL_TABLES_TUNNEL_QOS_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_tunnel_qos_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: tx_error_handling_counter_table
        case NPL_TABLES_TX_ERROR_HANDLING_COUNTER_TABLE:
        ret = init_table(*(static_cast<npl_tx_error_handling_counter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpp_mapping_qos_tag_table
        case NPL_TABLES_TXPP_MAPPING_QOS_TAG_TABLE:
        ret = init_table(*(static_cast<npl_txpp_mapping_qos_tag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_udp_port_map_static_table
        case NPL_TABLES_BFD_UDP_PORT_MAP_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_bfd_udp_port_map_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dlp0_key_lsb_mapping_table
        case NPL_TABLES_DLP0_KEY_LSB_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_dlp0_key_lsb_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dlp1_key_lsb_mapping_table
        case NPL_TABLES_DLP1_KEY_LSB_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_dlp1_key_lsb_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dsp_dest_msbs_for_ecn_table
        case NPL_TABLES_DSP_DEST_MSBS_FOR_ECN_TABLE:
        ret = init_table(*(static_cast<npl_dsp_dest_msbs_for_ecn_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ecn_remark_static_table
        case NPL_TABLES_ECN_REMARK_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ecn_remark_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ene_byte_addition_static_table
        case NPL_TABLES_ENE_BYTE_ADDITION_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ene_byte_addition_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: erpp_fabric_counters_offset_table
        case NPL_TABLES_ERPP_FABRIC_COUNTERS_OFFSET_TABLE:
        ret = init_table(*(static_cast<npl_erpp_fabric_counters_offset_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: erpp_fabric_counters_table
        case NPL_TABLES_ERPP_FABRIC_COUNTERS_TABLE:
        ret = init_table(*(static_cast<npl_erpp_fabric_counters_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_and_tm_header_size_static_table
        case NPL_TABLES_FABRIC_AND_TM_HEADER_SIZE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_fabric_and_tm_header_size_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_header_ene_macro_table
        case NPL_TABLES_FABRIC_HEADER_ENE_MACRO_TABLE:
        ret = init_table(*(static_cast<npl_fabric_header_ene_macro_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_headers_type_table
        case NPL_TABLES_FABRIC_HEADERS_TYPE_TABLE:
        ret = init_table(*(static_cast<npl_fabric_headers_type_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_init_cfg
        case NPL_TABLES_FABRIC_INIT_CFG:
        ret = init_table(*(static_cast<npl_fabric_init_cfg_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_npuh_size_calculation_static_table
        case NPL_TABLES_FABRIC_NPUH_SIZE_CALCULATION_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_fabric_npuh_size_calculation_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_out_color_map_table
        case NPL_TABLES_FABRIC_OUT_COLOR_MAP_TABLE:
        ret = init_table(*(static_cast<npl_fabric_out_color_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_term_error_checker_static_table
        case NPL_TABLES_FABRIC_TERM_ERROR_CHECKER_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_fabric_term_error_checker_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fabric_transmit_error_checker_static_table
        case NPL_TABLES_FABRIC_TRANSMIT_ERROR_CHECKER_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_fabric_transmit_error_checker_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fixup_destination_for_resolution_static_table
        case NPL_TABLES_FIXUP_DESTINATION_FOR_RESOLUTION_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_fixup_destination_for_resolution_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: inject_down_select_ene_static_table
        case NPL_TABLES_INJECT_DOWN_SELECT_ENE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_inject_down_select_ene_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_inactivity_check_table
        case NPL_TABLES_IP_INACTIVITY_CHECK_TABLE:
        ret = init_table(*(static_cast<npl_ip_inactivity_check_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_ingress_cmp_mcid_static_table
        case NPL_TABLES_IP_INGRESS_CMP_MCID_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ip_ingress_cmp_mcid_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_mc_mpls_next_macro_static_table
        case NPL_TABLES_IP_MC_MPLS_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ip_mc_mpls_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_proto_type_mux_static_table
        case NPL_TABLES_IP_PROTO_TYPE_MUX_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ip_proto_type_mux_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_ver_mc_static_table
        case NPL_TABLES_IP_VER_MC_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ip_ver_mc_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_acl_map_protocol_type_to_protocol_number_table
        case NPL_TABLES_IPV4_ACL_MAP_PROTOCOL_TYPE_TO_PROTOCOL_NUMBER_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_acl_map_protocol_type_to_protocol_number_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_first_fragment_static_table
        case NPL_TABLES_IPV6_FIRST_FRAGMENT_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_first_fragment_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_lpts_ctrl_fields_static_table
        case NPL_TABLES_L2_LPTS_CTRL_FIELDS_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_l2_lpts_ctrl_fields_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_lpts_next_macro_static_table
        case NPL_TABLES_L2_LPTS_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_l2_lpts_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_lpts_protocol_table
        case NPL_TABLES_L2_LPTS_PROTOCOL_TABLE:
        ret = init_table(*(static_cast<npl_l2_lpts_protocol_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_termination_next_macro_static_table
        case NPL_TABLES_L2_TERMINATION_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_l2_termination_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l3_dlp_p_counter_offset_table
        case NPL_TABLES_L3_DLP_P_COUNTER_OFFSET_TABLE:
        ret = init_table(*(static_cast<npl_l3_dlp_p_counter_offset_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l3_lp_profile_filter_table
        case NPL_TABLES_L3_LP_PROFILE_FILTER_TABLE:
        ret = init_table(*(static_cast<npl_l3_lp_profile_filter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l3_termination_classify_ip_tunnels_table
        case NPL_TABLES_L3_TERMINATION_CLASSIFY_IP_TUNNELS_TABLE:
        ret = init_table(*(static_cast<npl_l3_termination_classify_ip_tunnels_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l3_termination_next_macro_static_table
        case NPL_TABLES_L3_TERMINATION_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_l3_termination_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l3_tunnel_termination_next_macro_static_table
        case NPL_TABLES_L3_TUNNEL_TERMINATION_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_l3_tunnel_termination_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: large_em_key_lsb_mapping_table
        case NPL_TABLES_LARGE_EM_KEY_LSB_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_large_em_key_lsb_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: local_mc_fwd_next_macro_static_table
        case NPL_TABLES_LOCAL_MC_FWD_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_local_mc_fwd_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: lpts_og_application_table
        case NPL_TABLES_LPTS_OG_APPLICATION_TABLE:
        ret = init_table(*(static_cast<npl_lpts_og_application_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_da_table
        case NPL_TABLES_MAC_DA_TABLE:
        ret = init_table(*(static_cast<npl_mac_da_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_ethernet_rate_limit_type_static_table
        case NPL_TABLES_MAC_ETHERNET_RATE_LIMIT_TYPE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mac_ethernet_rate_limit_type_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_termination_next_macro_static_table
        case NPL_TABLES_MAC_TERMINATION_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mac_termination_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: map_inject_ccm_macro_static_table
        case NPL_TABLES_MAP_INJECT_CCM_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_map_inject_ccm_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: map_tx_punt_next_macro_static_table
        case NPL_TABLES_MAP_TX_PUNT_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_map_tx_punt_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: map_tx_punt_rcy_next_macro_static_table
        case NPL_TABLES_MAP_TX_PUNT_RCY_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_map_tx_punt_rcy_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: meg_id_format_table
        case NPL_TABLES_MEG_ID_FORMAT_TABLE:
        ret = init_table(*(static_cast<npl_meg_id_format_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mldp_protection_enabled_static_table
        case NPL_TABLES_MLDP_PROTECTION_ENABLED_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mldp_protection_enabled_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_resolve_service_labels_static_table
        case NPL_TABLES_MPLS_RESOLVE_SERVICE_LABELS_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mpls_resolve_service_labels_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_vpn_enabled_static_table
        case NPL_TABLES_MPLS_VPN_ENABLED_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_mpls_vpn_enabled_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: my_ipv4_table
        case NPL_TABLES_MY_IPV4_TABLE:
        ret = init_table(*(static_cast<npl_my_ipv4_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: nh_macro_code_to_id_l6_static_table
        case NPL_TABLES_NH_MACRO_CODE_TO_ID_L6_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_nh_macro_code_to_id_l6_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: null_rtf_next_macro_static_table
        case NPL_TABLES_NULL_RTF_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_null_rtf_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: obm_next_macro_static_table
        case NPL_TABLES_OBM_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_obm_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: og_next_macro_static_table
        case NPL_TABLES_OG_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_og_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pad_mtu_inj_check_static_table
        case NPL_TABLES_PAD_MTU_INJ_CHECK_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_pad_mtu_inj_check_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pfc_filter_wd_table
        case NPL_TABLES_PFC_FILTER_WD_TABLE:
        ret = init_table(*(static_cast<npl_pfc_filter_wd_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pfc_offset_from_vector_static_table
        case NPL_TABLES_PFC_OFFSET_FROM_VECTOR_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_pfc_offset_from_vector_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pfc_ssp_slice_map_table
        case NPL_TABLES_PFC_SSP_SLICE_MAP_TABLE:
        ret = init_table(*(static_cast<npl_pfc_ssp_slice_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: post_fwd_rtf_next_macro_static_table
        case NPL_TABLES_POST_FWD_RTF_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_post_fwd_rtf_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: probe_marker_1_static_table
        case NPL_TABLES_PROBE_MARKER_1_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_probe_marker_1_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: probe_marker_2_static_table
        case NPL_TABLES_PROBE_MARKER_2_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_probe_marker_2_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: punt_ethertype_static_table
        case NPL_TABLES_PUNT_ETHERTYPE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_punt_ethertype_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: redirect_table
        case NPL_TABLES_REDIRECT_TABLE:
        ret = init_table(*(static_cast<npl_redirect_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rtf_next_macro_static_table
        case NPL_TABLES_RTF_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_rtf_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_redirect_next_macro_static_table
        case NPL_TABLES_RX_REDIRECT_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_rx_redirect_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: second_ene_static_table
        case NPL_TABLES_SECOND_ENE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_second_ene_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: select_inject_next_macro_static_table
        case NPL_TABLES_SELECT_INJECT_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_select_inject_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping0_key_lsb_mapping_table
        case NPL_TABLES_SERVICE_MAPPING0_KEY_LSB_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping0_key_lsb_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping1_key_lsb_mapping_table
        case NPL_TABLES_SERVICE_MAPPING1_KEY_LSB_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping1_key_lsb_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_tcam_key_lsb_mapping_table
        case NPL_TABLES_SERVICE_MAPPING_TCAM_KEY_LSB_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_tcam_key_lsb_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sgacl_ip_fragment_check_table
        case NPL_TABLES_SGACL_IP_FRAGMENT_CHECK_TABLE:
        ret = init_table(*(static_cast<npl_sgacl_ip_fragment_check_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sgacl_next_macro_static_table
        case NPL_TABLES_SGACL_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_sgacl_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sgt_derivation_macro_static_table
        case NPL_TABLES_SGT_DERIVATION_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_sgt_derivation_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sgt_vxlan_termination_table
        case NPL_TABLES_SGT_VXLAN_TERMINATION_TABLE:
        ret = init_table(*(static_cast<npl_sgt_vxlan_termination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: small_em_key_lsb_mapping_table
        case NPL_TABLES_SMALL_EM_KEY_LSB_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_small_em_key_lsb_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: snoop_table
        case NPL_TABLES_SNOOP_TABLE:
        ret = init_table(*(static_cast<npl_snoop_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: splitter_lu_b_key_selector
        case NPL_TABLES_SPLITTER_LU_B_KEY_SELECTOR:
        ret = init_table(*(static_cast<npl_splitter_lu_b_key_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: splitter_lu_d_key_selector
        case NPL_TABLES_SPLITTER_LU_D_KEY_SELECTOR:
        ret = init_table(*(static_cast<npl_splitter_lu_d_key_selector_t*>(table)), *this, indices);
        return ret;    
        
        // table: svl_is_dsp_remote
        case NPL_TABLES_SVL_IS_DSP_REMOTE:
        ret = init_table(*(static_cast<npl_svl_is_dsp_remote_t*>(table)), *this, indices);
        return ret;    
        
        // table: svl_next_macro_static_table
        case NPL_TABLES_SVL_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_svl_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: svl_sgacl_enable_static_table
        case NPL_TABLES_SVL_SGACL_ENABLE_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_svl_sgacl_enable_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: svl_sgacl_next_macro_static_table
        case NPL_TABLES_SVL_SGACL_NEXT_MACRO_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_svl_sgacl_next_macro_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: te_headend_lsp_counter_offset_table
        case NPL_TABLES_TE_HEADEND_LSP_COUNTER_OFFSET_TABLE:
        ret = init_table(*(static_cast<npl_te_headend_lsp_counter_offset_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: tunnel_dlp_p_counter_offset_table
        case NPL_TABLES_TUNNEL_DLP_P_COUNTER_OFFSET_TABLE:
        ret = init_table(*(static_cast<npl_tunnel_dlp_p_counter_offset_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: urpf_ipsa_dest_is_lpts_static_table
        case NPL_TABLES_URPF_IPSA_DEST_IS_LPTS_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_urpf_ipsa_dest_is_lpts_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vlan_format_table
        case NPL_TABLES_VLAN_FORMAT_TABLE:
        ret = init_table(*(static_cast<npl_vlan_format_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: all_reachable_vector
        case NPL_TABLES_ALL_REACHABLE_VECTOR:
        ret = init_table(*(static_cast<npl_all_reachable_vector_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_event_queue_table
        case NPL_TABLES_BFD_EVENT_QUEUE_TABLE:
        ret = init_table(*(static_cast<npl_bfd_event_queue_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bitmap_oqg_map_table
        case NPL_TABLES_BITMAP_OQG_MAP_TABLE:
        ret = init_table(*(static_cast<npl_bitmap_oqg_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: calc_checksum_enable_table
        case NPL_TABLES_CALC_CHECKSUM_ENABLE_TABLE:
        ret = init_table(*(static_cast<npl_calc_checksum_enable_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: cif2npa_c_lri_macro
        case NPL_TABLES_CIF2NPA_C_LRI_MACRO:
        ret = init_table(*(static_cast<npl_cif2npa_c_lri_macro_t*>(table)), *this, indices);
        return ret;    
        
        // table: cif2npa_c_mps_macro
        case NPL_TABLES_CIF2NPA_C_MPS_MACRO:
        ret = init_table(*(static_cast<npl_cif2npa_c_mps_macro_t*>(table)), *this, indices);
        return ret;    
        
        // table: counters_block_config_table
        case NPL_TABLES_COUNTERS_BLOCK_CONFIG_TABLE:
        ret = init_table(*(static_cast<npl_counters_block_config_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: counters_voq_block_map_table
        case NPL_TABLES_COUNTERS_VOQ_BLOCK_MAP_TABLE:
        ret = init_table(*(static_cast<npl_counters_voq_block_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: cud_is_multicast_bitmap
        case NPL_TABLES_CUD_IS_MULTICAST_BITMAP:
        ret = init_table(*(static_cast<npl_cud_is_multicast_bitmap_t*>(table)), *this, indices);
        return ret;    
        
        // table: cud_narrow_hw_table
        case NPL_TABLES_CUD_NARROW_HW_TABLE:
        ret = init_table(*(static_cast<npl_cud_narrow_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: cud_wide_hw_table
        case NPL_TABLES_CUD_WIDE_HW_TABLE:
        ret = init_table(*(static_cast<npl_cud_wide_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: db_access_ingress_vlan_membership_table_lu_d_res_c
        case NPL_TABLES_DB_ACCESS_INGRESS_VLAN_MEMBERSHIP_TABLE_LU_D_RES_C:
        ret = init_table(*(static_cast<npl_db_access_ingress_vlan_membership_table_lu_d_res_c_t*>(table)), *this, indices);
        return ret;    
        
        // table: db_access_ingress_vlan_membership_table_lu_d_res_d
        case NPL_TABLES_DB_ACCESS_INGRESS_VLAN_MEMBERSHIP_TABLE_LU_D_RES_D:
        ret = init_table(*(static_cast<npl_db_access_ingress_vlan_membership_table_lu_d_res_d_t*>(table)), *this, indices);
        return ret;    
        
        // table: db_access_vlan_membership_table_lu_c_res_c
        case NPL_TABLES_DB_ACCESS_VLAN_MEMBERSHIP_TABLE_LU_C_RES_C:
        ret = init_table(*(static_cast<npl_db_access_vlan_membership_table_lu_c_res_c_t*>(table)), *this, indices);
        return ret;    
        
        // table: db_access_vlan_membership_table_lu_d_res_c
        case NPL_TABLES_DB_ACCESS_VLAN_MEMBERSHIP_TABLE_LU_D_RES_C:
        ret = init_table(*(static_cast<npl_db_access_vlan_membership_table_lu_d_res_c_t*>(table)), *this, indices);
        return ret;    
        
        // table: dest_slice_voq_map_table
        case NPL_TABLES_DEST_SLICE_VOQ_MAP_TABLE:
        ret = init_table(*(static_cast<npl_dest_slice_voq_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dest_type_decoding_table
        case NPL_TABLES_DEST_TYPE_DECODING_TABLE:
        ret = init_table(*(static_cast<npl_dest_type_decoding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: device_mode_table
        case NPL_TABLES_DEVICE_MODE_TABLE:
        ret = init_table(*(static_cast<npl_device_mode_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dram_cgm_cgm_deq_lut_table
        case NPL_TABLES_DRAM_CGM_CGM_DEQ_LUT_TABLE:
        ret = init_table(*(static_cast<npl_dram_cgm_cgm_deq_lut_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dram_cgm_cgm_lut_table
        case NPL_TABLES_DRAM_CGM_CGM_LUT_TABLE:
        ret = init_table(*(static_cast<npl_dram_cgm_cgm_lut_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: dummy_dip_index_table
        case NPL_TABLES_DUMMY_DIP_INDEX_TABLE:
        ret = init_table(*(static_cast<npl_dummy_dip_index_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: egress_nh_and_svi_direct0_table
        case NPL_TABLES_EGRESS_NH_AND_SVI_DIRECT0_TABLE:
        ret = init_table(*(static_cast<npl_egress_nh_and_svi_direct0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: egress_nh_and_svi_direct1_table
        case NPL_TABLES_EGRESS_NH_AND_SVI_DIRECT1_TABLE:
        ret = init_table(*(static_cast<npl_egress_nh_and_svi_direct1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: encap_data_source_select_table
        case NPL_TABLES_ENCAP_DATA_SOURCE_SELECT_TABLE:
        ret = init_table(*(static_cast<npl_encap_data_source_select_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eve_drop_mapping_hw_table
        case NPL_TABLES_EVE_DROP_MAPPING_HW_TABLE:
        ret = init_table(*(static_cast<npl_eve_drop_mapping_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eve_drop_vlan_id_hw_table
        case NPL_TABLES_EVE_DROP_VLAN_ID_HW_TABLE:
        ret = init_table(*(static_cast<npl_eve_drop_vlan_id_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eve_interrupt_mapping_hw_table
        case NPL_TABLES_EVE_INTERRUPT_MAPPING_HW_TABLE:
        ret = init_table(*(static_cast<npl_eve_interrupt_mapping_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: event_queue_table
        case NPL_TABLES_EVENT_QUEUE_TABLE:
        ret = init_table(*(static_cast<npl_event_queue_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: external_aux_table
        case NPL_TABLES_EXTERNAL_AUX_TABLE:
        ret = init_table(*(static_cast<npl_external_aux_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fb_link_2_link_bundle_table
        case NPL_TABLES_FB_LINK_2_LINK_BUNDLE_TABLE:
        ret = init_table(*(static_cast<npl_fb_link_2_link_bundle_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fc_db_performance_vlan_membership_table
        case NPL_TABLES_FC_DB_PERFORMANCE_VLAN_MEMBERSHIP_TABLE:
        ret = init_table(*(static_cast<npl_fc_db_performance_vlan_membership_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fe_broadcast_bmp_table
        case NPL_TABLES_FE_BROADCAST_BMP_TABLE:
        ret = init_table(*(static_cast<npl_fe_broadcast_bmp_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fe_rlb_uc_tx_fb_link_to_oq_map_table
        case NPL_TABLES_FE_RLB_UC_TX_FB_LINK_TO_OQ_MAP_TABLE:
        ret = init_table(*(static_cast<npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fe_smcid_to_mcid_table
        case NPL_TABLES_FE_SMCID_TO_MCID_TABLE:
        ret = init_table(*(static_cast<npl_fe_smcid_to_mcid_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fe_uc_link_bundle_desc_table
        case NPL_TABLES_FE_UC_LINK_BUNDLE_DESC_TABLE:
        ret = init_table(*(static_cast<npl_fe_uc_link_bundle_desc_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fec_table
        case NPL_TABLES_FEC_TABLE:
        ret = init_table(*(static_cast<npl_fec_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fec_type_decoding_table
        case NPL_TABLES_FEC_TYPE_DECODING_TABLE:
        ret = init_table(*(static_cast<npl_fec_type_decoding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fi_macro_config_table
        case NPL_TABLES_FI_MACRO_CONFIG_TABLE:
        ret = init_table(*(static_cast<npl_fi_macro_config_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: filb_voq_mapping
        case NPL_TABLES_FILB_VOQ_MAPPING:
        ret = init_table(*(static_cast<npl_filb_voq_mapping_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_cache_range_comp_profile_table
        case NPL_TABLES_FLC_CACHE_RANGE_COMP_PROFILE_TABLE:
        ret = init_table(*(static_cast<npl_flc_cache_range_comp_profile_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_data_table
        case NPL_TABLES_FLC_DATA_TABLE:
        ret = init_table(*(static_cast<npl_flc_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_fbm_table
        case NPL_TABLES_FLC_FBM_TABLE:
        ret = init_table(*(static_cast<npl_flc_fbm_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_map_header_type_mask_id_table
        case NPL_TABLES_FLC_MAP_HEADER_TYPE_MASK_ID_TABLE:
        ret = init_table(*(static_cast<npl_flc_map_header_type_mask_id_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_map_header_type_mask_l_table
        case NPL_TABLES_FLC_MAP_HEADER_TYPE_MASK_L_TABLE:
        ret = init_table(*(static_cast<npl_flc_map_header_type_mask_l_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_map_header_type_mask_m_table
        case NPL_TABLES_FLC_MAP_HEADER_TYPE_MASK_M_TABLE:
        ret = init_table(*(static_cast<npl_flc_map_header_type_mask_m_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_map_header_type_mask_s_table
        case NPL_TABLES_FLC_MAP_HEADER_TYPE_MASK_S_TABLE:
        ret = init_table(*(static_cast<npl_flc_map_header_type_mask_s_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_q_range_comp_profile_table
        case NPL_TABLES_FLC_Q_RANGE_COMP_PROFILE_TABLE:
        ret = init_table(*(static_cast<npl_flc_q_range_comp_profile_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_range_comp_ranges_table
        case NPL_TABLES_FLC_RANGE_COMP_RANGES_TABLE:
        ret = init_table(*(static_cast<npl_flc_range_comp_ranges_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: frm_db_fabric_routing_table
        case NPL_TABLES_FRM_DB_FABRIC_ROUTING_TABLE:
        ret = init_table(*(static_cast<npl_frm_db_fabric_routing_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fwd_and_encap_types_to_field_a_offset_table
        case NPL_TABLES_FWD_AND_ENCAP_TYPES_TO_FIELD_A_OFFSET_TABLE:
        ret = init_table(*(static_cast<npl_fwd_and_encap_types_to_field_a_offset_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fwd_and_encap_types_to_field_b_offset_table
        case NPL_TABLES_FWD_AND_ENCAP_TYPES_TO_FIELD_B_OFFSET_TABLE:
        ret = init_table(*(static_cast<npl_fwd_and_encap_types_to_field_b_offset_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fwd_type_to_ive_enable_table
        case NPL_TABLES_FWD_TYPE_TO_IVE_ENABLE_TABLE:
        ret = init_table(*(static_cast<npl_fwd_type_to_ive_enable_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: hmc_cgm_profile_global_table
        case NPL_TABLES_HMC_CGM_PROFILE_GLOBAL_TABLE:
        ret = init_table(*(static_cast<npl_hmc_cgm_profile_global_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ibm_cmd_table
        case NPL_TABLES_IBM_CMD_TABLE:
        ret = init_table(*(static_cast<npl_ibm_cmd_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ifgb_tc_lut_table
        case NPL_TABLES_IFGB_TC_LUT_TABLE:
        ret = init_table(*(static_cast<npl_ifgb_tc_lut_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: inject_mact_ldb_to_output_lr
        case NPL_TABLES_INJECT_MACT_LDB_TO_OUTPUT_LR:
        ret = init_table(*(static_cast<npl_inject_mact_ldb_to_output_lr_t*>(table)), *this, indices);
        return ret;    
        
        // table: latest_learn_records_table
        case NPL_TABLES_LATEST_LEARN_RECORDS_TABLE:
        ret = init_table(*(static_cast<npl_latest_learn_records_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: learn_manager_cfg_max_learn_type_reg
        case NPL_TABLES_LEARN_MANAGER_CFG_MAX_LEARN_TYPE_REG:
        ret = init_table(*(static_cast<npl_learn_manager_cfg_max_learn_type_reg_t*>(table)), *this, indices);
        return ret;    
        
        // table: learn_record_fifo_table
        case NPL_TABLES_LEARN_RECORD_FIFO_TABLE:
        ret = init_table(*(static_cast<npl_learn_record_fifo_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_fabric_table
        case NPL_TABLES_LIGHT_FI_FABRIC_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_fabric_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_npu_base_table
        case NPL_TABLES_LIGHT_FI_NPU_BASE_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_npu_base_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_npu_encap_table
        case NPL_TABLES_LIGHT_FI_NPU_ENCAP_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_npu_encap_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_stages_cfg_table
        case NPL_TABLES_LIGHT_FI_STAGES_CFG_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_stages_cfg_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_tm_table
        case NPL_TABLES_LIGHT_FI_TM_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_tm_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: link_relay_attributes_table
        case NPL_TABLES_LINK_RELAY_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_link_relay_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: link_relay_id_static_table
        case NPL_TABLES_LINK_RELAY_ID_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_link_relay_id_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: link_up_vector
        case NPL_TABLES_LINK_UP_VECTOR:
        ret = init_table(*(static_cast<npl_link_up_vector_t*>(table)), *this, indices);
        return ret;    
        
        // table: lr_filter_write_ptr_reg
        case NPL_TABLES_LR_FILTER_WRITE_PTR_REG:
        ret = init_table(*(static_cast<npl_lr_filter_write_ptr_reg_t*>(table)), *this, indices);
        return ret;    
        
        // table: lr_write_ptr_reg
        case NPL_TABLES_LR_WRITE_PTR_REG:
        ret = init_table(*(static_cast<npl_lr_write_ptr_reg_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_bitmap_base_voq_lookup_table
        case NPL_TABLES_MC_BITMAP_BASE_VOQ_LOOKUP_TABLE:
        ret = init_table(*(static_cast<npl_mc_bitmap_base_voq_lookup_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_bitmap_tc_map_table
        case NPL_TABLES_MC_BITMAP_TC_MAP_TABLE:
        ret = init_table(*(static_cast<npl_mc_bitmap_tc_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_copy_id_map
        case NPL_TABLES_MC_COPY_ID_MAP:
        ret = init_table(*(static_cast<npl_mc_copy_id_map_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_cud_is_wide_table
        case NPL_TABLES_MC_CUD_IS_WIDE_TABLE:
        ret = init_table(*(static_cast<npl_mc_cud_is_wide_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_cud_table
        case NPL_TABLES_MC_CUD_TABLE:
        ret = init_table(*(static_cast<npl_mc_cud_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_emdb_tc_map_table
        case NPL_TABLES_MC_EMDB_TC_MAP_TABLE:
        ret = init_table(*(static_cast<npl_mc_emdb_tc_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_fe_links_bmp
        case NPL_TABLES_MC_FE_LINKS_BMP:
        ret = init_table(*(static_cast<npl_mc_fe_links_bmp_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_ibm_cud_mapping_table
        case NPL_TABLES_MC_IBM_CUD_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_mc_ibm_cud_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_slice_bitmap_table
        case NPL_TABLES_MC_SLICE_BITMAP_TABLE:
        ret = init_table(*(static_cast<npl_mc_slice_bitmap_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mii_loopback_table
        case NPL_TABLES_MII_LOOPBACK_TABLE:
        ret = init_table(*(static_cast<npl_mii_loopback_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mirror_code_2_hw_table
        case NPL_TABLES_MIRROR_CODE_2_HW_TABLE:
        ret = init_table(*(static_cast<npl_mirror_code_2_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mirror_code_hw_table
        case NPL_TABLES_MIRROR_CODE_HW_TABLE:
        ret = init_table(*(static_cast<npl_mirror_code_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mp_aux_data_table
        case NPL_TABLES_MP_AUX_DATA_TABLE:
        ret = init_table(*(static_cast<npl_mp_aux_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mp_data_table
        case NPL_TABLES_MP_DATA_TABLE:
        ret = init_table(*(static_cast<npl_mp_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ms_voq_fabric_context_offset_table
        case NPL_TABLES_MS_VOQ_FABRIC_CONTEXT_OFFSET_TABLE:
        ret = init_table(*(static_cast<npl_ms_voq_fabric_context_offset_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: oamp_event_queue_table
        case NPL_TABLES_OAMP_EVENT_QUEUE_TABLE:
        ret = init_table(*(static_cast<npl_oamp_event_queue_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pbts_map_table_stage0
        case NPL_TABLES_PBTS_MAP_TABLE_STAGE0:
        ret = init_table(*(static_cast<npl_pbts_map_table_stage0_t*>(table)), *this, indices);
        return ret;    
        
        // table: pbts_map_table_stage1
        case NPL_TABLES_PBTS_MAP_TABLE_STAGE1:
        ret = init_table(*(static_cast<npl_pbts_map_table_stage1_t*>(table)), *this, indices);
        return ret;    
        
        // table: pbts_map_table_stage2
        case NPL_TABLES_PBTS_MAP_TABLE_STAGE2:
        ret = init_table(*(static_cast<npl_pbts_map_table_stage2_t*>(table)), *this, indices);
        return ret;    
        
        // table: pbts_map_table_stage3
        case NPL_TABLES_PBTS_MAP_TABLE_STAGE3:
        ret = init_table(*(static_cast<npl_pbts_map_table_stage3_t*>(table)), *this, indices);
        return ret;    
        
        // table: pdoq_oq_ifc_mapping
        case NPL_TABLES_PDOQ_OQ_IFC_MAPPING:
        ret = init_table(*(static_cast<npl_pdoq_oq_ifc_mapping_t*>(table)), *this, indices);
        return ret;    
        
        // table: pdvoq_bank_pair_offset_table
        case NPL_TABLES_PDVOQ_BANK_PAIR_OFFSET_TABLE:
        ret = init_table(*(static_cast<npl_pdvoq_bank_pair_offset_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pdvoq_slice_dram_wred_lut_table
        case NPL_TABLES_PDVOQ_SLICE_DRAM_WRED_LUT_TABLE:
        ret = init_table(*(static_cast<npl_pdvoq_slice_dram_wred_lut_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pdvoq_slice_voq_properties_table
        case NPL_TABLES_PDVOQ_SLICE_VOQ_PROPERTIES_TABLE:
        ret = init_table(*(static_cast<npl_pdvoq_slice_voq_properties_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pin_start_offset_macros
        case NPL_TABLES_PIN_START_OFFSET_MACROS:
        ret = init_table(*(static_cast<npl_pin_start_offset_macros_t*>(table)), *this, indices);
        return ret;    
        
        // table: pma_loopback_table
        case NPL_TABLES_PMA_LOOPBACK_TABLE:
        ret = init_table(*(static_cast<npl_pma_loopback_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: punt_tunnel_transport_extended_encap_table2
        case NPL_TABLES_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE2:
        ret = init_table(*(static_cast<npl_punt_tunnel_transport_extended_encap_table2_t*>(table)), *this, indices);
        return ret;    
        
        // table: reassembly_source_port_map_table
        case NPL_TABLES_REASSEMBLY_SOURCE_PORT_MAP_TABLE:
        ret = init_table(*(static_cast<npl_reassembly_source_port_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: recycle_override_table
        case NPL_TABLES_RECYCLE_OVERRIDE_TABLE:
        ret = init_table(*(static_cast<npl_recycle_override_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: redirect_destination_table
        case NPL_TABLES_REDIRECT_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_redirect_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rmep_last_time_table
        case NPL_TABLES_RMEP_LAST_TIME_TABLE:
        ret = init_table(*(static_cast<npl_rmep_last_time_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rmep_state_table
        case NPL_TABLES_RMEP_STATE_TABLE:
        ret = init_table(*(static_cast<npl_rmep_state_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rpf_fec_access_map_table
        case NPL_TABLES_RPF_FEC_ACCESS_MAP_TABLE:
        ret = init_table(*(static_cast<npl_rpf_fec_access_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rpf_fec_table
        case NPL_TABLES_RPF_FEC_TABLE:
        ret = init_table(*(static_cast<npl_rpf_fec_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_counters_bank_id_map_config
        case NPL_TABLES_RX_COUNTERS_BANK_ID_MAP_CONFIG:
        ret = init_table(*(static_cast<npl_rx_counters_bank_id_map_config_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_counters_block_config_table
        case NPL_TABLES_RX_COUNTERS_BLOCK_CONFIG_TABLE:
        ret = init_table(*(static_cast<npl_rx_counters_block_config_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_bank_offset_map
        case NPL_TABLES_RX_METER_BANK_OFFSET_MAP:
        ret = init_table(*(static_cast<npl_rx_meter_bank_offset_map_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_block_meter_attribute_table
        case NPL_TABLES_RX_METER_BLOCK_METER_ATTRIBUTE_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_block_meter_attribute_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_block_meter_profile_table
        case NPL_TABLES_RX_METER_BLOCK_METER_PROFILE_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_block_meter_profile_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_block_meter_shaper_configuration_table
        case NPL_TABLES_RX_METER_BLOCK_METER_SHAPER_CONFIGURATION_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_block_meter_shaper_configuration_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_distributed_meter_profile_table
        case NPL_TABLES_RX_METER_DISTRIBUTED_METER_PROFILE_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_distributed_meter_profile_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_exact_meter_decision_mapping_table
        case NPL_TABLES_RX_METER_EXACT_METER_DECISION_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_exact_meter_decision_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_meter_profile_table
        case NPL_TABLES_RX_METER_METER_PROFILE_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_meter_profile_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_meter_shaper_configuration_table
        case NPL_TABLES_RX_METER_METER_SHAPER_CONFIGURATION_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_meter_shaper_configuration_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_meters_attribute_table
        case NPL_TABLES_RX_METER_METERS_ATTRIBUTE_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_meters_attribute_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_rate_limiter_shaper_configuration_table
        case NPL_TABLES_RX_METER_RATE_LIMITER_SHAPER_CONFIGURATION_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_rate_limiter_shaper_configuration_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_meter_stat_meter_decision_mapping_table
        case NPL_TABLES_RX_METER_STAT_METER_DECISION_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_rx_meter_stat_meter_decision_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_npu_to_tm_dest_table
        case NPL_TABLES_RX_NPU_TO_TM_DEST_TABLE:
        ret = init_table(*(static_cast<npl_rx_npu_to_tm_dest_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rxpdr_dsp_lookup_table
        case NPL_TABLES_RXPDR_DSP_LOOKUP_TABLE:
        ret = init_table(*(static_cast<npl_rxpdr_dsp_lookup_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rxpdr_dsp_tc_map
        case NPL_TABLES_RXPDR_DSP_TC_MAP:
        ret = init_table(*(static_cast<npl_rxpdr_dsp_tc_map_t*>(table)), *this, indices);
        return ret;    
        
        // table: rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table
        case NPL_TABLES_RXPDR_FE_RLB_UC_TX_FB_LINK_TO_OQ_TABLE:
        ret = init_table(*(static_cast<npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sch_oqse_cfg
        case NPL_TABLES_SCH_OQSE_CFG:
        ret = init_table(*(static_cast<npl_sch_oqse_cfg_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_lp_attributes_table
        case NPL_TABLES_SERVICE_LP_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_service_lp_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_relay_attributes_table
        case NPL_TABLES_SERVICE_RELAY_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_service_relay_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_relay_id_static_table
        case NPL_TABLES_SERVICE_RELAY_ID_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_service_relay_id_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: slice_modes_table
        case NPL_TABLES_SLICE_MODES_TABLE:
        ret = init_table(*(static_cast<npl_slice_modes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: snoop_code_hw_table
        case NPL_TABLES_SNOOP_CODE_HW_TABLE:
        ret = init_table(*(static_cast<npl_snoop_code_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: source_pif_hw_table
        case NPL_TABLES_SOURCE_PIF_HW_TABLE:
        ret = init_table(*(static_cast<npl_source_pif_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: source_port_to_link_table
        case NPL_TABLES_SOURCE_PORT_TO_LINK_TABLE:
        ret = init_table(*(static_cast<npl_source_port_to_link_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage0_assoc_data_table
        case NPL_TABLES_STAGE0_ASSOC_DATA_TABLE:
        ret = init_table(*(static_cast<npl_stage0_assoc_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage0_group_size_table
        case NPL_TABLES_STAGE0_GROUP_SIZE_TABLE:
        ret = init_table(*(static_cast<npl_stage0_group_size_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage0_protection_table
        case NPL_TABLES_STAGE0_PROTECTION_TABLE:
        ret = init_table(*(static_cast<npl_stage0_protection_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage0_type_decoding_table
        case NPL_TABLES_STAGE0_TYPE_DECODING_TABLE:
        ret = init_table(*(static_cast<npl_stage0_type_decoding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage1_assoc_data_table
        case NPL_TABLES_STAGE1_ASSOC_DATA_TABLE:
        ret = init_table(*(static_cast<npl_stage1_assoc_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage1_group_size_table
        case NPL_TABLES_STAGE1_GROUP_SIZE_TABLE:
        ret = init_table(*(static_cast<npl_stage1_group_size_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage1_protection_table
        case NPL_TABLES_STAGE1_PROTECTION_TABLE:
        ret = init_table(*(static_cast<npl_stage1_protection_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage1_type_decoding_table
        case NPL_TABLES_STAGE1_TYPE_DECODING_TABLE:
        ret = init_table(*(static_cast<npl_stage1_type_decoding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage2_assoc_data_table
        case NPL_TABLES_STAGE2_ASSOC_DATA_TABLE:
        ret = init_table(*(static_cast<npl_stage2_assoc_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage2_group_size_table
        case NPL_TABLES_STAGE2_GROUP_SIZE_TABLE:
        ret = init_table(*(static_cast<npl_stage2_group_size_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage2_protection_table
        case NPL_TABLES_STAGE2_PROTECTION_TABLE:
        ret = init_table(*(static_cast<npl_stage2_protection_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage2_type_decoding_table
        case NPL_TABLES_STAGE2_TYPE_DECODING_TABLE:
        ret = init_table(*(static_cast<npl_stage2_type_decoding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage3_assoc_data_table
        case NPL_TABLES_STAGE3_ASSOC_DATA_TABLE:
        ret = init_table(*(static_cast<npl_stage3_assoc_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage3_group_size_table
        case NPL_TABLES_STAGE3_GROUP_SIZE_TABLE:
        ret = init_table(*(static_cast<npl_stage3_group_size_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage3_protection_table
        case NPL_TABLES_STAGE3_PROTECTION_TABLE:
        ret = init_table(*(static_cast<npl_stage3_protection_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage3_type_decoding_table
        case NPL_TABLES_STAGE3_TYPE_DECODING_TABLE:
        ret = init_table(*(static_cast<npl_stage3_type_decoding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: term_to_fwd_hdr_shift_table
        case NPL_TABLES_TERM_TO_FWD_HDR_SHIFT_TABLE:
        ret = init_table(*(static_cast<npl_term_to_fwd_hdr_shift_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: termination_to_forwarding_fi_hardwired_table
        case NPL_TABLES_TERMINATION_TO_FORWARDING_FI_HARDWIRED_TABLE:
        ret = init_table(*(static_cast<npl_termination_to_forwarding_fi_hardwired_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: tm_ibm_cmd_to_destination
        case NPL_TABLES_TM_IBM_CMD_TO_DESTINATION:
        ret = init_table(*(static_cast<npl_tm_ibm_cmd_to_destination_t*>(table)), *this, indices);
        return ret;    
        
        // table: ts_cmd_hw_static_table
        case NPL_TABLES_TS_CMD_HW_STATIC_TABLE:
        ret = init_table(*(static_cast<npl_ts_cmd_hw_static_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: tx_counters_bank_id_map_config
        case NPL_TABLES_TX_COUNTERS_BANK_ID_MAP_CONFIG:
        ret = init_table(*(static_cast<npl_tx_counters_bank_id_map_config_t*>(table)), *this, indices);
        return ret;    
        
        // table: tx_counters_block_config_table
        case NPL_TABLES_TX_COUNTERS_BLOCK_CONFIG_TABLE:
        ret = init_table(*(static_cast<npl_tx_counters_block_config_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: tx_punt_eth_encap_table
        case NPL_TABLES_TX_PUNT_ETH_ENCAP_TABLE:
        ret = init_table(*(static_cast<npl_tx_punt_eth_encap_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpdr_mc_list_size_table
        case NPL_TABLES_TXPDR_MC_LIST_SIZE_TABLE:
        ret = init_table(*(static_cast<npl_txpdr_mc_list_size_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpdr_tc_map_table
        case NPL_TABLES_TXPDR_TC_MAP_TABLE:
        ret = init_table(*(static_cast<npl_txpdr_tc_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpp_dlp_profile_key_construct_parameters_table
        case NPL_TABLES_TXPP_DLP_PROFILE_KEY_CONSTRUCT_PARAMETERS_TABLE:
        ret = init_table(*(static_cast<npl_txpp_dlp_profile_key_construct_parameters_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpp_encap_qos_mapping_table
        case NPL_TABLES_TXPP_ENCAP_QOS_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_txpp_encap_qos_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpp_first_enc_type_to_second_enc_type_offset
        case NPL_TABLES_TXPP_FIRST_ENC_TYPE_TO_SECOND_ENC_TYPE_OFFSET:
        ret = init_table(*(static_cast<npl_txpp_first_enc_type_to_second_enc_type_offset_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpp_fwd_qos_mapping_table
        case NPL_TABLES_TXPP_FWD_QOS_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_txpp_fwd_qos_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpp_ibm_enables_table
        case NPL_TABLES_TXPP_IBM_ENABLES_TABLE:
        ret = init_table(*(static_cast<npl_txpp_ibm_enables_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: uc_ibm_tc_map_table
        case NPL_TABLES_UC_IBM_TC_MAP_TABLE:
        ret = init_table(*(static_cast<npl_uc_ibm_tc_map_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vlan_edit_tpid1_profile_hw_table
        case NPL_TABLES_VLAN_EDIT_TPID1_PROFILE_HW_TABLE:
        ret = init_table(*(static_cast<npl_vlan_edit_tpid1_profile_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vlan_edit_tpid2_profile_hw_table
        case NPL_TABLES_VLAN_EDIT_TPID2_PROFILE_HW_TABLE:
        ret = init_table(*(static_cast<npl_vlan_edit_tpid2_profile_hw_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_buffers_consumption_lut_for_deq_table
        case NPL_TABLES_VOQ_CGM_SLICE_BUFFERS_CONSUMPTION_LUT_FOR_DEQ_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_buffers_consumption_lut_for_enq_table
        case NPL_TABLES_VOQ_CGM_SLICE_BUFFERS_CONSUMPTION_LUT_FOR_ENQ_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_drop_green_probability_selector_table
        case NPL_TABLES_VOQ_CGM_SLICE_DROP_GREEN_PROBABILITY_SELECTOR_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_drop_green_probability_selector_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_drop_yellow_probability_selector_table
        case NPL_TABLES_VOQ_CGM_SLICE_DROP_YELLOW_PROBABILITY_SELECTOR_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_drop_yellow_probability_selector_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table
        case NPL_TABLES_VOQ_CGM_SLICE_EVICTED_BUFFERS_CONSUMPTION_LUT_FOR_ENQ_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_eviction_ok_lut_for_enq_table
        case NPL_TABLES_VOQ_CGM_SLICE_EVICTION_OK_LUT_FOR_ENQ_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_mark_probability_selector_table
        case NPL_TABLES_VOQ_CGM_SLICE_MARK_PROBABILITY_SELECTOR_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_mark_probability_selector_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_pd_consumption_lut_for_deq_table
        case NPL_TABLES_VOQ_CGM_SLICE_PD_CONSUMPTION_LUT_FOR_DEQ_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_pd_consumption_lut_for_enq_table
        case NPL_TABLES_VOQ_CGM_SLICE_PD_CONSUMPTION_LUT_FOR_ENQ_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_profile_buff_region_thresholds_table
        case NPL_TABLES_VOQ_CGM_SLICE_PROFILE_BUFF_REGION_THRESHOLDS_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_profile_buff_region_thresholds_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table
        case NPL_TABLES_VOQ_CGM_SLICE_PROFILE_PKT_ENQ_TIME_REGION_THRESHOLDS_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_profile_pkt_region_thresholds_table
        case NPL_TABLES_VOQ_CGM_SLICE_PROFILE_PKT_REGION_THRESHOLDS_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_profile_pkt_region_thresholds_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_slice_slice_cgm_profile_table
        case NPL_TABLES_VOQ_CGM_SLICE_SLICE_CGM_PROFILE_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_slice_slice_cgm_profile_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: voq_cgm_wred_probability_table
        case NPL_TABLES_VOQ_CGM_WRED_PROBABILITY_TABLE:
        ret = init_table(*(static_cast<npl_voq_cgm_wred_probability_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: additional_labels_table
        case NPL_TABLES_ADDITIONAL_LABELS_TABLE:
        ret = init_table(*(static_cast<npl_additional_labels_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: bfd_rx_table
        case NPL_TABLES_BFD_RX_TABLE:
        ret = init_table(*(static_cast<npl_bfd_rx_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: em_mp_table
        case NPL_TABLES_EM_MP_TABLE:
        ret = init_table(*(static_cast<npl_em_mp_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_db_table
        case NPL_TABLES_FLC_DB_TABLE:
        ret = init_table(*(static_cast<npl_flc_db_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fwd_destination_to_tm_result_data
        case NPL_TABLES_FWD_DESTINATION_TO_TM_RESULT_DATA:
        ret = init_table(*(static_cast<npl_fwd_destination_to_tm_result_data_t*>(table)), *this, indices);
        return ret;    
        
        // table: inject_down_tx_redirect_counter_table
        case NPL_TABLES_INJECT_DOWN_TX_REDIRECT_COUNTER_TABLE:
        ret = init_table(*(static_cast<npl_inject_down_tx_redirect_counter_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: inject_up_pif_ifg_init_data_table
        case NPL_TABLES_INJECT_UP_PIF_IFG_INIT_DATA_TABLE:
        ret = init_table(*(static_cast<npl_inject_up_pif_ifg_init_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: inject_up_ssp_init_data_table
        case NPL_TABLES_INJECT_UP_SSP_INIT_DATA_TABLE:
        ret = init_table(*(static_cast<npl_inject_up_ssp_init_data_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_prefix_destination_table
        case NPL_TABLES_IP_PREFIX_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_ip_prefix_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_relay_to_vni_table
        case NPL_TABLES_IP_RELAY_TO_VNI_TABLE:
        ret = init_table(*(static_cast<npl_ip_relay_to_vni_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_ip_tunnel_termination_dip_index_tt0_table
        case NPL_TABLES_IPV4_IP_TUNNEL_TERMINATION_DIP_INDEX_TT0_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_ip_tunnel_termination_dip_tt0_table
        case NPL_TABLES_IPV4_IP_TUNNEL_TERMINATION_DIP_TT0_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_ip_tunnel_termination_dip_tt0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_ip_tunnel_termination_sip_dip_index_tt0_table
        case NPL_TABLES_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT0_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_ip_tunnel_termination_sip_dip_index_tt1_table
        case NPL_TABLES_IPV4_IP_TUNNEL_TERMINATION_SIP_DIP_INDEX_TT1_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_og_pcl_em_table
        case NPL_TABLES_IPV4_OG_PCL_EM_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_og_pcl_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_sgt_em_table
        case NPL_TABLES_IPV4_SGT_EM_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_sgt_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_vrf_dip_em_table
        case NPL_TABLES_IPV4_VRF_DIP_EM_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_vrf_dip_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_vrf_s_g_table
        case NPL_TABLES_IPV4_VRF_S_G_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_vrf_s_g_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_og_pcl_em_table
        case NPL_TABLES_IPV6_OG_PCL_EM_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_og_pcl_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_sgt_em_table
        case NPL_TABLES_IPV6_SGT_EM_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_sgt_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_vrf_dip_em_table
        case NPL_TABLES_IPV6_VRF_DIP_EM_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_vrf_dip_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_vrf_s_g_table
        case NPL_TABLES_IPV6_VRF_S_G_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_vrf_s_g_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_dlp_table
        case NPL_TABLES_L2_DLP_TABLE:
        ret = init_table(*(static_cast<npl_l2_dlp_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l3_dlp_table
        case NPL_TABLES_L3_DLP_TABLE:
        ret = init_table(*(static_cast<npl_l3_dlp_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: large_encap_global_lsp_prefix_table
        case NPL_TABLES_LARGE_ENCAP_GLOBAL_LSP_PREFIX_TABLE:
        ret = init_table(*(static_cast<npl_large_encap_global_lsp_prefix_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: large_encap_ip_tunnel_table
        case NPL_TABLES_LARGE_ENCAP_IP_TUNNEL_TABLE:
        ret = init_table(*(static_cast<npl_large_encap_ip_tunnel_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: large_encap_mpls_he_no_ldp_table
        case NPL_TABLES_LARGE_ENCAP_MPLS_HE_NO_LDP_TABLE:
        ret = init_table(*(static_cast<npl_large_encap_mpls_he_no_ldp_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: large_encap_mpls_ldp_over_te_table
        case NPL_TABLES_LARGE_ENCAP_MPLS_LDP_OVER_TE_TABLE:
        ret = init_table(*(static_cast<npl_large_encap_mpls_ldp_over_te_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: large_encap_te_he_tunnel_id_table
        case NPL_TABLES_LARGE_ENCAP_TE_HE_TUNNEL_ID_TABLE:
        ret = init_table(*(static_cast<npl_large_encap_te_he_tunnel_id_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: lp_over_lag_table
        case NPL_TABLES_LP_OVER_LAG_TABLE:
        ret = init_table(*(static_cast<npl_lp_over_lag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_forwarding_table
        case NPL_TABLES_MAC_FORWARDING_TABLE:
        ret = init_table(*(static_cast<npl_mac_forwarding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_forwarding_w_metadata_table
        case NPL_TABLES_MAC_FORWARDING_W_METADATA_TABLE:
        ret = init_table(*(static_cast<npl_mac_forwarding_w_metadata_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_mc_em_termination_attributes_table
        case NPL_TABLES_MAC_MC_EM_TERMINATION_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_mac_mc_em_termination_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_relay_g_ipv4_table
        case NPL_TABLES_MAC_RELAY_G_IPV4_TABLE:
        ret = init_table(*(static_cast<npl_mac_relay_g_ipv4_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_relay_g_ipv6_table
        case NPL_TABLES_MAC_RELAY_G_IPV6_TABLE:
        ret = init_table(*(static_cast<npl_mac_relay_g_ipv6_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_relay_to_vni_table
        case NPL_TABLES_MAC_RELAY_TO_VNI_TABLE:
        ret = init_table(*(static_cast<npl_mac_relay_to_vni_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_termination_em_table
        case NPL_TABLES_MAC_TERMINATION_EM_TABLE:
        ret = init_table(*(static_cast<npl_mac_termination_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_termination_no_da_em_table
        case NPL_TABLES_MAC_TERMINATION_NO_DA_EM_TABLE:
        ret = init_table(*(static_cast<npl_mac_termination_no_da_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mc_em_db
        case NPL_TABLES_MC_EM_DB:
        ret = init_table(*(static_cast<npl_mc_em_db_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_forwarding_table
        case NPL_TABLES_MPLS_FORWARDING_TABLE:
        ret = init_table(*(static_cast<npl_mpls_forwarding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_termination_em0_table
        case NPL_TABLES_MPLS_TERMINATION_EM0_TABLE:
        ret = init_table(*(static_cast<npl_mpls_termination_em0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mpls_termination_em1_table
        case NPL_TABLES_MPLS_TERMINATION_EM1_TABLE:
        ret = init_table(*(static_cast<npl_mpls_termination_em1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: overlay_ipv4_sip_table
        case NPL_TABLES_OVERLAY_IPV4_SIP_TABLE:
        ret = init_table(*(static_cast<npl_overlay_ipv4_sip_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: per_asbr_and_dpe_table
        case NPL_TABLES_PER_ASBR_AND_DPE_TABLE:
        ret = init_table(*(static_cast<npl_per_asbr_and_dpe_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: per_pe_and_prefix_vpn_key_large_table
        case NPL_TABLES_PER_PE_AND_PREFIX_VPN_KEY_LARGE_TABLE:
        ret = init_table(*(static_cast<npl_per_pe_and_prefix_vpn_key_large_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: per_pe_and_vrf_vpn_key_large_table
        case NPL_TABLES_PER_PE_AND_VRF_VPN_KEY_LARGE_TABLE:
        ret = init_table(*(static_cast<npl_per_pe_and_vrf_vpn_key_large_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: per_vrf_mpls_forwarding_table
        case NPL_TABLES_PER_VRF_MPLS_FORWARDING_TABLE:
        ret = init_table(*(static_cast<npl_per_vrf_mpls_forwarding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pfc_destination_table
        case NPL_TABLES_PFC_DESTINATION_TABLE:
        ret = init_table(*(static_cast<npl_pfc_destination_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: punt_tunnel_transport_encap_table
        case NPL_TABLES_PUNT_TUNNEL_TRANSPORT_ENCAP_TABLE:
        ret = init_table(*(static_cast<npl_punt_tunnel_transport_encap_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: punt_tunnel_transport_extended_encap_table
        case NPL_TABLES_PUNT_TUNNEL_TRANSPORT_EXTENDED_ENCAP_TABLE:
        ret = init_table(*(static_cast<npl_punt_tunnel_transport_extended_encap_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pwe_label_table
        case NPL_TABLES_PWE_LABEL_TABLE:
        ret = init_table(*(static_cast<npl_pwe_label_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pwe_to_l3_dest_table
        case NPL_TABLES_PWE_TO_L3_DEST_TABLE:
        ret = init_table(*(static_cast<npl_pwe_to_l3_dest_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pwe_vpls_label_table
        case NPL_TABLES_PWE_VPLS_LABEL_TABLE:
        ret = init_table(*(static_cast<npl_pwe_vpls_label_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: pwe_vpls_tunnel_label_table
        case NPL_TABLES_PWE_VPLS_TUNNEL_LABEL_TABLE:
        ret = init_table(*(static_cast<npl_pwe_vpls_tunnel_label_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: rx_obm_punt_src_and_code_table
        case NPL_TABLES_RX_OBM_PUNT_SRC_AND_CODE_TABLE:
        ret = init_table(*(static_cast<npl_rx_obm_punt_src_and_code_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_em0_ac_port_table
        case NPL_TABLES_SERVICE_MAPPING_EM0_AC_PORT_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_em0_ac_port_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_em0_ac_port_tag_table
        case NPL_TABLES_SERVICE_MAPPING_EM0_AC_PORT_TAG_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_em0_ac_port_tag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_em0_ac_port_tag_tag_table
        case NPL_TABLES_SERVICE_MAPPING_EM0_AC_PORT_TAG_TAG_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_em0_ac_port_tag_tag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_em0_pwe_tag_table
        case NPL_TABLES_SERVICE_MAPPING_EM0_PWE_TAG_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_em0_pwe_tag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_em1_ac_port_tag_table
        case NPL_TABLES_SERVICE_MAPPING_EM1_AC_PORT_TAG_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_em1_ac_port_tag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sgt_matrix_table
        case NPL_TABLES_SGT_MATRIX_TABLE:
        ret = init_table(*(static_cast<npl_sgt_matrix_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: slp_based_forwarding_table
        case NPL_TABLES_SLP_BASED_FORWARDING_TABLE:
        ret = init_table(*(static_cast<npl_slp_based_forwarding_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: small_encap_mpls_he_asbr_table
        case NPL_TABLES_SMALL_ENCAP_MPLS_HE_ASBR_TABLE:
        ret = init_table(*(static_cast<npl_small_encap_mpls_he_asbr_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: small_encap_mpls_he_te_table
        case NPL_TABLES_SMALL_ENCAP_MPLS_HE_TE_TABLE:
        ret = init_table(*(static_cast<npl_small_encap_mpls_he_te_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage0_em_table
        case NPL_TABLES_STAGE0_EM_TABLE:
        ret = init_table(*(static_cast<npl_stage0_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage1_em_table
        case NPL_TABLES_STAGE1_EM_TABLE:
        ret = init_table(*(static_cast<npl_stage1_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage2_em_table
        case NPL_TABLES_STAGE2_EM_TABLE:
        ret = init_table(*(static_cast<npl_stage2_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: stage3_em_table
        case NPL_TABLES_STAGE3_EM_TABLE:
        ret = init_table(*(static_cast<npl_stage3_em_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: tx_redirect_code_table
        case NPL_TABLES_TX_REDIRECT_CODE_TABLE:
        ret = init_table(*(static_cast<npl_tx_redirect_code_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpp_em_dlp_profile_mapping_table
        case NPL_TABLES_TXPP_EM_DLP_PROFILE_MAPPING_TABLE:
        ret = init_table(*(static_cast<npl_txpp_em_dlp_profile_mapping_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vni_table
        case NPL_TABLES_VNI_TABLE:
        ret = init_table(*(static_cast<npl_vni_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vsid_table
        case NPL_TABLES_VSID_TABLE:
        ret = init_table(*(static_cast<npl_vsid_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vxlan_l2_dlp_table
        case NPL_TABLES_VXLAN_L2_DLP_TABLE:
        ret = init_table(*(static_cast<npl_vxlan_l2_dlp_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: default_egress_ipv4_sec_acl_table
        case NPL_TABLES_DEFAULT_EGRESS_IPV4_SEC_ACL_TABLE:
        ret = init_table(*(static_cast<npl_default_egress_ipv4_sec_acl_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: default_egress_ipv6_acl_sec_table
        case NPL_TABLES_DEFAULT_EGRESS_IPV6_ACL_SEC_TABLE:
        ret = init_table(*(static_cast<npl_default_egress_ipv6_acl_sec_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: egress_mac_ipv4_sec_acl_table
        case NPL_TABLES_EGRESS_MAC_IPV4_SEC_ACL_TABLE:
        ret = init_table(*(static_cast<npl_egress_mac_ipv4_sec_acl_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: eth_fi_core_tcam_table
        case NPL_TABLES_ETH_FI_CORE_TCAM_TABLE:
        ret = init_table(*(static_cast<npl_eth_fi_core_tcam_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: fi_core_tcam_table
        case NPL_TABLES_FI_CORE_TCAM_TABLE:
        ret = init_table(*(static_cast<npl_fi_core_tcam_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: flc_header_types_array_table
        case NPL_TABLES_FLC_HEADER_TYPES_ARRAY_TABLE:
        ret = init_table(*(static_cast<npl_flc_header_types_array_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_eth_db1_160_f0_table
        case NPL_TABLES_INGRESS_RTF_ETH_DB1_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_eth_db1_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_eth_db2_160_f0_table
        case NPL_TABLES_INGRESS_RTF_ETH_DB2_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_eth_db2_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db1_160_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB1_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db1_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db1_160_f1_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB1_160_F1_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db1_160_f1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db1_320_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB1_320_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db1_320_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db2_160_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB2_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db2_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db2_160_f1_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB2_160_F1_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db2_160_f1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db2_320_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB2_320_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db2_320_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db3_160_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB3_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db3_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db3_160_f1_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB3_160_F1_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db3_160_f1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db3_320_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB3_320_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db3_320_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db4_160_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB4_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db4_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db4_160_f1_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB4_160_F1_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db4_160_f1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv4_db4_320_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV4_DB4_320_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv4_db4_320_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db1_160_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB1_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db1_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db1_160_f1_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB1_160_F1_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db1_160_f1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db1_320_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB1_320_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db1_320_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db2_160_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB2_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db2_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db2_160_f1_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB2_160_F1_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db2_160_f1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db2_320_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB2_320_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db2_320_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db3_160_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB3_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db3_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db3_160_f1_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB3_160_F1_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db3_160_f1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db3_320_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB3_320_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db3_320_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db4_160_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB4_160_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db4_160_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db4_160_f1_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB4_160_F1_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db4_160_f1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ingress_rtf_ipv6_db4_320_f0_table
        case NPL_TABLES_INGRESS_RTF_IPV6_DB4_320_F0_TABLE:
        ret = init_table(*(static_cast<npl_ingress_rtf_ipv6_db4_320_f0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ip_fi_core_tcam_table
        case NPL_TABLES_IP_FI_CORE_TCAM_TABLE:
        ret = init_table(*(static_cast<npl_ip_fi_core_tcam_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_lpts_table
        case NPL_TABLES_IPV4_LPTS_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_lpts_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_lpts_table
        case NPL_TABLES_IPV6_LPTS_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_lpts_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_sip_compression_table
        case NPL_TABLES_IPV6_SIP_COMPRESSION_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_sip_compression_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_lpts_ipv4_table
        case NPL_TABLES_L2_LPTS_IPV4_TABLE:
        ret = init_table(*(static_cast<npl_l2_lpts_ipv4_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_lpts_ipv6_table
        case NPL_TABLES_L2_LPTS_IPV6_TABLE:
        ret = init_table(*(static_cast<npl_l2_lpts_ipv6_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: l2_lpts_mac_table
        case NPL_TABLES_L2_LPTS_MAC_TABLE:
        ret = init_table(*(static_cast<npl_l2_lpts_mac_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_nw_0_table
        case NPL_TABLES_LIGHT_FI_NW_0_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_nw_0_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_nw_1_table
        case NPL_TABLES_LIGHT_FI_NW_1_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_nw_1_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_nw_2_table
        case NPL_TABLES_LIGHT_FI_NW_2_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_nw_2_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: light_fi_nw_3_table
        case NPL_TABLES_LIGHT_FI_NW_3_TABLE:
        ret = init_table(*(static_cast<npl_light_fi_nw_3_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_mc_tcam_termination_attributes_table
        case NPL_TABLES_MAC_MC_TCAM_TERMINATION_ATTRIBUTES_TABLE:
        ret = init_table(*(static_cast<npl_mac_mc_tcam_termination_attributes_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: mac_termination_tcam_table
        case NPL_TABLES_MAC_TERMINATION_TCAM_TABLE:
        ret = init_table(*(static_cast<npl_mac_termination_tcam_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_tcam_ac_port_table
        case NPL_TABLES_SERVICE_MAPPING_TCAM_AC_PORT_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_tcam_ac_port_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_tcam_ac_port_tag_table
        case NPL_TABLES_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_tcam_ac_port_tag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_tcam_ac_port_tag_tag_table
        case NPL_TABLES_SERVICE_MAPPING_TCAM_AC_PORT_TAG_TAG_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_tcam_ac_port_tag_tag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: service_mapping_tcam_pwe_tag_table
        case NPL_TABLES_SERVICE_MAPPING_TCAM_PWE_TAG_TABLE:
        ret = init_table(*(static_cast<npl_service_mapping_tcam_pwe_tag_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: sgacl_table
        case NPL_TABLES_SGACL_TABLE:
        ret = init_table(*(static_cast<npl_sgacl_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: txpp_initial_npe_macro_table
        case NPL_TABLES_TXPP_INITIAL_NPE_MACRO_TABLE:
        ret = init_table(*(static_cast<npl_txpp_initial_npe_macro_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: udp_fi_core_tcam_table
        case NPL_TABLES_UDP_FI_CORE_TCAM_TABLE:
        ret = init_table(*(static_cast<npl_udp_fi_core_tcam_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vlan0_fi_core_tcam_table
        case NPL_TABLES_VLAN0_FI_CORE_TCAM_TABLE:
        ret = init_table(*(static_cast<npl_vlan0_fi_core_tcam_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vlan1_fi_core_tcam_table
        case NPL_TABLES_VLAN1_FI_CORE_TCAM_TABLE:
        ret = init_table(*(static_cast<npl_vlan1_fi_core_tcam_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: vlan_pe_fi_core_tcam_table
        case NPL_TABLES_VLAN_PE_FI_CORE_TCAM_TABLE:
        ret = init_table(*(static_cast<npl_vlan_pe_fi_core_tcam_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_lpm_table
        case NPL_TABLES_IPV4_LPM_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_lpm_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_og_pcl_lpm_table
        case NPL_TABLES_IPV4_OG_PCL_LPM_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_og_pcl_lpm_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv4_sgt_lpm_table
        case NPL_TABLES_IPV4_SGT_LPM_TABLE:
        ret = init_table(*(static_cast<npl_ipv4_sgt_lpm_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_lpm_table
        case NPL_TABLES_IPV6_LPM_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_lpm_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_og_pcl_lpm_table
        case NPL_TABLES_IPV6_OG_PCL_LPM_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_og_pcl_lpm_table_t*>(table)), *this, indices);
        return ret;    
        
        // table: ipv6_sgt_lpm_table
        case NPL_TABLES_IPV6_SGT_LPM_TABLE:
        ret = init_table(*(static_cast<npl_ipv6_sgt_lpm_table_t*>(table)), *this, indices);
        return ret;    
        
        default:
        return LA_STATUS_ENOTIMPLEMENTED;
    }
    
    return LA_STATUS_ENOTIMPLEMENTED;
}
}; // class translator_creator_impl


struct translators_serialization_s {



ra_direct_translator<npl_acl_map_fi_header_type_to_protocol_number_table_functional_traits_t> npl_acl_map_fi_header_type_to_protocol_number_table_ra_direct_translator;


ra_empty_direct_translator<npl_acl_map_fi_header_type_to_protocol_number_table_functional_traits_t> npl_acl_map_fi_header_type_to_protocol_number_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_desired_tx_interval_table_functional_traits_t> npl_bfd_desired_tx_interval_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_desired_tx_interval_table_functional_traits_t> npl_bfd_desired_tx_interval_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_detection_multiple_table_functional_traits_t> npl_bfd_detection_multiple_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_detection_multiple_table_functional_traits_t> npl_bfd_detection_multiple_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_inject_inner_da_high_table_functional_traits_t> npl_bfd_inject_inner_da_high_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_inject_inner_da_high_table_functional_traits_t> npl_bfd_inject_inner_da_high_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_inject_inner_da_low_table_functional_traits_t> npl_bfd_inject_inner_da_low_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_inject_inner_da_low_table_functional_traits_t> npl_bfd_inject_inner_da_low_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_inject_inner_ethernet_header_static_table_functional_traits_t> npl_bfd_inject_inner_ethernet_header_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_inject_inner_ethernet_header_static_table_functional_traits_t> npl_bfd_inject_inner_ethernet_header_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_inject_ttl_static_table_functional_traits_t> npl_bfd_inject_ttl_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_inject_ttl_static_table_functional_traits_t> npl_bfd_inject_ttl_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_ipv6_sip_A_table_functional_traits_t> npl_bfd_ipv6_sip_A_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_ipv6_sip_A_table_functional_traits_t> npl_bfd_ipv6_sip_A_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_ipv6_sip_B_table_functional_traits_t> npl_bfd_ipv6_sip_B_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_ipv6_sip_B_table_functional_traits_t> npl_bfd_ipv6_sip_B_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_ipv6_sip_C_table_functional_traits_t> npl_bfd_ipv6_sip_C_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_ipv6_sip_C_table_functional_traits_t> npl_bfd_ipv6_sip_C_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_ipv6_sip_D_table_functional_traits_t> npl_bfd_ipv6_sip_D_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_ipv6_sip_D_table_functional_traits_t> npl_bfd_ipv6_sip_D_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_punt_encap_static_table_functional_traits_t> npl_bfd_punt_encap_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_punt_encap_static_table_functional_traits_t> npl_bfd_punt_encap_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_required_tx_interval_table_functional_traits_t> npl_bfd_required_tx_interval_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_required_tx_interval_table_functional_traits_t> npl_bfd_required_tx_interval_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_set_inject_type_static_table_functional_traits_t> npl_bfd_set_inject_type_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_set_inject_type_static_table_functional_traits_t> npl_bfd_set_inject_type_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_udp_port_static_table_functional_traits_t> npl_bfd_udp_port_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_udp_port_static_table_functional_traits_t> npl_bfd_udp_port_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_bvn_tc_map_table_functional_traits_t> npl_bvn_tc_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_bvn_tc_map_table_functional_traits_t> npl_bvn_tc_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_ccm_flags_table_functional_traits_t> npl_ccm_flags_table_ra_direct_translator;


ra_empty_direct_translator<npl_ccm_flags_table_functional_traits_t> npl_ccm_flags_table_ra_empty_direct_translator;


ra_direct_translator<npl_cong_level_ecn_remap_map_table_functional_traits_t> npl_cong_level_ecn_remap_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_cong_level_ecn_remap_map_table_functional_traits_t> npl_cong_level_ecn_remap_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_db_access_per_port_destination_table_functional_traits_t> npl_db_access_per_port_destination_table_ra_direct_translator;


ra_empty_direct_translator<npl_db_access_per_port_destination_table_functional_traits_t> npl_db_access_per_port_destination_table_ra_empty_direct_translator;


ra_direct_translator<npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_functional_traits_t> npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_ra_direct_translator;


ra_empty_direct_translator<npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_functional_traits_t> npl_db_access_transmit_per_dest_port_npu_host_macro_stamping_table_ra_empty_direct_translator;


ra_direct_translator<npl_dsp_group_policy_table_functional_traits_t> npl_dsp_group_policy_table_ra_direct_translator;


ra_empty_direct_translator<npl_dsp_group_policy_table_functional_traits_t> npl_dsp_group_policy_table_ra_empty_direct_translator;


ra_direct_translator<npl_dsp_l2_attributes_table_functional_traits_t> npl_dsp_l2_attributes_table_ra_direct_translator;


ra_empty_direct_translator<npl_dsp_l2_attributes_table_functional_traits_t> npl_dsp_l2_attributes_table_ra_empty_direct_translator;


ra_direct_translator<npl_dsp_l3_attributes_table_functional_traits_t> npl_dsp_l3_attributes_table_ra_direct_translator;


ra_empty_direct_translator<npl_dsp_l3_attributes_table_functional_traits_t> npl_dsp_l3_attributes_table_ra_empty_direct_translator;


ra_direct_translator<npl_ene_macro_code_tpid_profile_static_table_functional_traits_t> npl_ene_macro_code_tpid_profile_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_ene_macro_code_tpid_profile_static_table_functional_traits_t> npl_ene_macro_code_tpid_profile_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_ene_rewrite_punt_sa_prefix_index_table_functional_traits_t> npl_ene_rewrite_punt_sa_prefix_index_table_ra_direct_translator;


ra_empty_direct_translator<npl_ene_rewrite_punt_sa_prefix_index_table_functional_traits_t> npl_ene_rewrite_punt_sa_prefix_index_table_ra_empty_direct_translator;


ra_direct_translator<npl_ene_rewrite_sa_prefix_index_table_functional_traits_t> npl_ene_rewrite_sa_prefix_index_table_ra_direct_translator;


ra_empty_direct_translator<npl_ene_rewrite_sa_prefix_index_table_functional_traits_t> npl_ene_rewrite_sa_prefix_index_table_ra_empty_direct_translator;


ra_direct_translator<npl_eth_meter_profile_mapping_table_functional_traits_t> npl_eth_meter_profile_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_eth_meter_profile_mapping_table_functional_traits_t> npl_eth_meter_profile_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_eth_oam_set_da_mc2_static_table_functional_traits_t> npl_eth_oam_set_da_mc2_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_eth_oam_set_da_mc2_static_table_functional_traits_t> npl_eth_oam_set_da_mc2_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_eth_oam_set_da_mc_static_table_functional_traits_t> npl_eth_oam_set_da_mc_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_eth_oam_set_da_mc_static_table_functional_traits_t> npl_eth_oam_set_da_mc_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_eth_rtf_conf_set_mapping_table_functional_traits_t> npl_eth_rtf_conf_set_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_eth_rtf_conf_set_mapping_table_functional_traits_t> npl_eth_rtf_conf_set_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_eth_type_static_table_functional_traits_t> npl_eth_type_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_eth_type_static_table_functional_traits_t> npl_eth_type_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_eve_to_ethernet_ene_static_table_functional_traits_t> npl_eve_to_ethernet_ene_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_eve_to_ethernet_ene_static_table_functional_traits_t> npl_eve_to_ethernet_ene_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_fabric_header_types_static_table_functional_traits_t> npl_fabric_header_types_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_fabric_header_types_static_table_functional_traits_t> npl_fabric_header_types_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_fabric_rx_fwd_error_handling_counter_table_functional_traits_t> npl_fabric_rx_fwd_error_handling_counter_table_ra_direct_translator;


ra_empty_direct_translator<npl_fabric_rx_fwd_error_handling_counter_table_functional_traits_t> npl_fabric_rx_fwd_error_handling_counter_table_ra_empty_direct_translator;


ra_direct_translator<npl_fabric_rx_fwd_error_handling_destination_table_functional_traits_t> npl_fabric_rx_fwd_error_handling_destination_table_ra_direct_translator;


ra_empty_direct_translator<npl_fabric_rx_fwd_error_handling_destination_table_functional_traits_t> npl_fabric_rx_fwd_error_handling_destination_table_ra_empty_direct_translator;


ra_direct_translator<npl_fabric_rx_term_error_handling_counter_table_functional_traits_t> npl_fabric_rx_term_error_handling_counter_table_ra_direct_translator;


ra_empty_direct_translator<npl_fabric_rx_term_error_handling_counter_table_functional_traits_t> npl_fabric_rx_term_error_handling_counter_table_ra_empty_direct_translator;


ra_direct_translator<npl_fabric_rx_term_error_handling_destination_table_functional_traits_t> npl_fabric_rx_term_error_handling_destination_table_ra_direct_translator;


ra_empty_direct_translator<npl_fabric_rx_term_error_handling_destination_table_functional_traits_t> npl_fabric_rx_term_error_handling_destination_table_ra_empty_direct_translator;


ra_direct_translator<npl_fabric_scaled_mc_map_to_netork_slice_static_table_functional_traits_t> npl_fabric_scaled_mc_map_to_netork_slice_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_fabric_scaled_mc_map_to_netork_slice_static_table_functional_traits_t> npl_fabric_scaled_mc_map_to_netork_slice_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_fabric_smcid_threshold_table_functional_traits_t> npl_fabric_smcid_threshold_table_ra_direct_translator;


ra_empty_direct_translator<npl_fabric_smcid_threshold_table_functional_traits_t> npl_fabric_smcid_threshold_table_ra_empty_direct_translator;


ra_direct_translator<npl_fabric_tm_headers_table_functional_traits_t> npl_fabric_tm_headers_table_ra_direct_translator;


ra_empty_direct_translator<npl_fabric_tm_headers_table_functional_traits_t> npl_fabric_tm_headers_table_ra_empty_direct_translator;


ra_direct_translator<npl_fe_smcid_threshold_table_functional_traits_t> npl_fe_smcid_threshold_table_ra_direct_translator;


ra_empty_direct_translator<npl_fe_smcid_threshold_table_functional_traits_t> npl_fe_smcid_threshold_table_ra_empty_direct_translator;


ra_direct_translator<npl_first_ene_static_table_functional_traits_t> npl_first_ene_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_first_ene_static_table_functional_traits_t> npl_first_ene_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_fwd_bucket_a_lu_data_selector_functional_traits_t> npl_fwd_bucket_a_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_fwd_bucket_a_lu_data_selector_functional_traits_t> npl_fwd_bucket_a_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_fwd_bucket_b_lu_data_selector_functional_traits_t> npl_fwd_bucket_b_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_fwd_bucket_b_lu_data_selector_functional_traits_t> npl_fwd_bucket_b_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_fwd_bucket_c_lu_data_selector_functional_traits_t> npl_fwd_bucket_c_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_fwd_bucket_c_lu_data_selector_functional_traits_t> npl_fwd_bucket_c_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_fwd_bucket_d_lu_data_selector_functional_traits_t> npl_fwd_bucket_d_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_fwd_bucket_d_lu_data_selector_functional_traits_t> npl_fwd_bucket_d_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_get_ecm_meter_ptr_table_functional_traits_t> npl_get_ecm_meter_ptr_table_ra_direct_translator;


ra_empty_direct_translator<npl_get_ecm_meter_ptr_table_functional_traits_t> npl_get_ecm_meter_ptr_table_ra_empty_direct_translator;


ra_direct_translator<npl_get_ingress_ptp_info_and_is_slp_dm_static_table_functional_traits_t> npl_get_ingress_ptp_info_and_is_slp_dm_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_get_ingress_ptp_info_and_is_slp_dm_static_table_functional_traits_t> npl_get_ingress_ptp_info_and_is_slp_dm_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_get_l2_rtf_conf_set_and_init_stages_functional_traits_t> npl_get_l2_rtf_conf_set_and_init_stages_ra_direct_translator;


ra_empty_direct_translator<npl_get_l2_rtf_conf_set_and_init_stages_functional_traits_t> npl_get_l2_rtf_conf_set_and_init_stages_ra_empty_direct_translator;


ra_direct_translator<npl_get_non_comp_mc_value_static_table_functional_traits_t> npl_get_non_comp_mc_value_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_get_non_comp_mc_value_static_table_functional_traits_t> npl_get_non_comp_mc_value_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_gre_proto_static_table_functional_traits_t> npl_gre_proto_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_gre_proto_static_table_functional_traits_t> npl_gre_proto_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_ibm_mc_cmd_to_encap_data_table_functional_traits_t> npl_ibm_mc_cmd_to_encap_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_ibm_mc_cmd_to_encap_data_table_functional_traits_t> npl_ibm_mc_cmd_to_encap_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_ibm_uc_cmd_to_encap_data_table_functional_traits_t> npl_ibm_uc_cmd_to_encap_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_ibm_uc_cmd_to_encap_data_table_functional_traits_t> npl_ibm_uc_cmd_to_encap_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_ingress_ip_qos_mapping_table_functional_traits_t> npl_ingress_ip_qos_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_ingress_ip_qos_mapping_table_functional_traits_t> npl_ingress_ip_qos_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_inner_tpid_table_functional_traits_t> npl_inner_tpid_table_ra_direct_translator;


ra_empty_direct_translator<npl_inner_tpid_table_functional_traits_t> npl_inner_tpid_table_ra_empty_direct_translator;


ra_direct_translator<npl_ip_fwd_header_mapping_to_ethtype_static_table_functional_traits_t> npl_ip_fwd_header_mapping_to_ethtype_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_ip_fwd_header_mapping_to_ethtype_static_table_functional_traits_t> npl_ip_fwd_header_mapping_to_ethtype_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_ip_mc_local_inject_type_static_table_functional_traits_t> npl_ip_mc_local_inject_type_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_ip_mc_local_inject_type_static_table_functional_traits_t> npl_ip_mc_local_inject_type_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_ip_mc_next_macro_static_table_functional_traits_t> npl_ip_mc_next_macro_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_ip_mc_next_macro_static_table_functional_traits_t> npl_ip_mc_next_macro_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_ip_meter_profile_mapping_table_functional_traits_t> npl_ip_meter_profile_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_ip_meter_profile_mapping_table_functional_traits_t> npl_ip_meter_profile_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_ip_rx_global_counter_table_functional_traits_t> npl_ip_rx_global_counter_table_ra_direct_translator;


ra_empty_direct_translator<npl_ip_rx_global_counter_table_functional_traits_t> npl_ip_rx_global_counter_table_ra_empty_direct_translator;


ra_direct_translator<npl_ipv4_acl_sport_static_table_functional_traits_t> npl_ipv4_acl_sport_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_ipv4_acl_sport_static_table_functional_traits_t> npl_ipv4_acl_sport_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_ipv4_rtf_conf_set_mapping_table_functional_traits_t> npl_ipv4_rtf_conf_set_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_ipv4_rtf_conf_set_mapping_table_functional_traits_t> npl_ipv4_rtf_conf_set_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_ipv6_acl_sport_static_table_functional_traits_t> npl_ipv6_acl_sport_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_ipv6_acl_sport_static_table_functional_traits_t> npl_ipv6_acl_sport_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_ipv6_rtf_conf_set_mapping_table_functional_traits_t> npl_ipv6_rtf_conf_set_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_ipv6_rtf_conf_set_mapping_table_functional_traits_t> npl_ipv6_rtf_conf_set_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_l2_lp_profile_filter_table_functional_traits_t> npl_l2_lp_profile_filter_table_ra_direct_translator;


ra_empty_direct_translator<npl_l2_lp_profile_filter_table_functional_traits_t> npl_l2_lp_profile_filter_table_ra_empty_direct_translator;


ra_direct_translator<npl_l2_lpts_skip_p2p_static_table_functional_traits_t> npl_l2_lpts_skip_p2p_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_l2_lpts_skip_p2p_static_table_functional_traits_t> npl_l2_lpts_skip_p2p_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_l2_tunnel_term_next_macro_static_table_functional_traits_t> npl_l2_tunnel_term_next_macro_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_l2_tunnel_term_next_macro_static_table_functional_traits_t> npl_l2_tunnel_term_next_macro_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_l3_vxlan_overlay_sa_table_functional_traits_t> npl_l3_vxlan_overlay_sa_table_ra_direct_translator;


ra_empty_direct_translator<npl_l3_vxlan_overlay_sa_table_functional_traits_t> npl_l3_vxlan_overlay_sa_table_ra_empty_direct_translator;


ra_direct_translator<npl_lpts_2nd_lookup_table_functional_traits_t> npl_lpts_2nd_lookup_table_ra_direct_translator;


ra_empty_direct_translator<npl_lpts_2nd_lookup_table_functional_traits_t> npl_lpts_2nd_lookup_table_ra_empty_direct_translator;


ra_direct_translator<npl_lpts_meter_table_functional_traits_t> npl_lpts_meter_table_ra_direct_translator;


ra_empty_direct_translator<npl_lpts_meter_table_functional_traits_t> npl_lpts_meter_table_ra_empty_direct_translator;


ra_direct_translator<npl_mac_af_npp_attributes_table_functional_traits_t> npl_mac_af_npp_attributes_table_ra_direct_translator;


ra_empty_direct_translator<npl_mac_af_npp_attributes_table_functional_traits_t> npl_mac_af_npp_attributes_table_ra_empty_direct_translator;


ra_direct_translator<npl_mac_qos_mapping_table_functional_traits_t> npl_mac_qos_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_mac_qos_mapping_table_functional_traits_t> npl_mac_qos_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_map_ene_subcode_to8bit_static_table_functional_traits_t> npl_map_ene_subcode_to8bit_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_map_ene_subcode_to8bit_static_table_functional_traits_t> npl_map_ene_subcode_to8bit_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_map_more_labels_static_table_functional_traits_t> npl_map_more_labels_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_map_more_labels_static_table_functional_traits_t> npl_map_more_labels_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_map_recyle_tx_to_rx_data_on_pd_static_table_functional_traits_t> npl_map_recyle_tx_to_rx_data_on_pd_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_map_recyle_tx_to_rx_data_on_pd_static_table_functional_traits_t> npl_map_recyle_tx_to_rx_data_on_pd_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_functional_traits_t> npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_functional_traits_t> npl_map_tm_dp_ecn_to_wa_ecn_dp_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_mep_address_prefix_table_functional_traits_t> npl_mep_address_prefix_table_ra_direct_translator;


ra_empty_direct_translator<npl_mep_address_prefix_table_functional_traits_t> npl_mep_address_prefix_table_ra_empty_direct_translator;


ra_direct_translator<npl_mirror_egress_attributes_table_functional_traits_t> npl_mirror_egress_attributes_table_ra_direct_translator;


ra_empty_direct_translator<npl_mirror_egress_attributes_table_functional_traits_t> npl_mirror_egress_attributes_table_ra_empty_direct_translator;


ra_direct_translator<npl_mirror_to_dsp_in_npu_soft_header_table_functional_traits_t> npl_mirror_to_dsp_in_npu_soft_header_table_ra_direct_translator;


ra_empty_direct_translator<npl_mirror_to_dsp_in_npu_soft_header_table_functional_traits_t> npl_mirror_to_dsp_in_npu_soft_header_table_ra_empty_direct_translator;


ra_direct_translator<npl_mldp_protection_table_functional_traits_t> npl_mldp_protection_table_ra_direct_translator;


ra_empty_direct_translator<npl_mldp_protection_table_functional_traits_t> npl_mldp_protection_table_ra_empty_direct_translator;


ra_direct_translator<npl_mpls_encap_control_static_table_functional_traits_t> npl_mpls_encap_control_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_mpls_encap_control_static_table_functional_traits_t> npl_mpls_encap_control_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_mpls_header_offset_in_bytes_static_table_functional_traits_t> npl_mpls_header_offset_in_bytes_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_mpls_header_offset_in_bytes_static_table_functional_traits_t> npl_mpls_header_offset_in_bytes_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_mpls_l3_lsp_static_table_functional_traits_t> npl_mpls_l3_lsp_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_mpls_l3_lsp_static_table_functional_traits_t> npl_mpls_l3_lsp_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_mpls_labels_1_to_4_jump_offset_static_table_functional_traits_t> npl_mpls_labels_1_to_4_jump_offset_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_mpls_labels_1_to_4_jump_offset_static_table_functional_traits_t> npl_mpls_labels_1_to_4_jump_offset_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_mpls_lsp_labels_config_static_table_functional_traits_t> npl_mpls_lsp_labels_config_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_mpls_lsp_labels_config_static_table_functional_traits_t> npl_mpls_lsp_labels_config_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_mpls_qos_mapping_table_functional_traits_t> npl_mpls_qos_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_mpls_qos_mapping_table_functional_traits_t> npl_mpls_qos_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_next_header_1_is_l4_over_ipv4_static_table_functional_traits_t> npl_next_header_1_is_l4_over_ipv4_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_next_header_1_is_l4_over_ipv4_static_table_functional_traits_t> npl_next_header_1_is_l4_over_ipv4_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_nhlfe_type_mapping_static_table_functional_traits_t> npl_nhlfe_type_mapping_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_nhlfe_type_mapping_static_table_functional_traits_t> npl_nhlfe_type_mapping_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_npp_sgt_attributes_table_functional_traits_t> npl_npp_sgt_attributes_table_ra_direct_translator;


ra_empty_direct_translator<npl_npp_sgt_attributes_table_functional_traits_t> npl_npp_sgt_attributes_table_ra_empty_direct_translator;


ra_direct_translator<npl_nw_smcid_threshold_table_functional_traits_t> npl_nw_smcid_threshold_table_ra_direct_translator;


ra_empty_direct_translator<npl_nw_smcid_threshold_table_functional_traits_t> npl_nw_smcid_threshold_table_ra_empty_direct_translator;


ra_direct_translator<npl_oamp_drop_destination_static_table_functional_traits_t> npl_oamp_drop_destination_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_oamp_drop_destination_static_table_functional_traits_t> npl_oamp_drop_destination_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_oamp_redirect_get_counter_table_functional_traits_t> npl_oamp_redirect_get_counter_table_ra_direct_translator;


ra_empty_direct_translator<npl_oamp_redirect_get_counter_table_functional_traits_t> npl_oamp_redirect_get_counter_table_ra_empty_direct_translator;


ra_direct_translator<npl_oamp_redirect_punt_eth_hdr_1_table_functional_traits_t> npl_oamp_redirect_punt_eth_hdr_1_table_ra_direct_translator;


ra_empty_direct_translator<npl_oamp_redirect_punt_eth_hdr_1_table_functional_traits_t> npl_oamp_redirect_punt_eth_hdr_1_table_ra_empty_direct_translator;


ra_direct_translator<npl_oamp_redirect_punt_eth_hdr_2_table_functional_traits_t> npl_oamp_redirect_punt_eth_hdr_2_table_ra_direct_translator;


ra_empty_direct_translator<npl_oamp_redirect_punt_eth_hdr_2_table_functional_traits_t> npl_oamp_redirect_punt_eth_hdr_2_table_ra_empty_direct_translator;


ra_direct_translator<npl_oamp_redirect_punt_eth_hdr_3_table_functional_traits_t> npl_oamp_redirect_punt_eth_hdr_3_table_ra_direct_translator;


ra_empty_direct_translator<npl_oamp_redirect_punt_eth_hdr_3_table_functional_traits_t> npl_oamp_redirect_punt_eth_hdr_3_table_ra_empty_direct_translator;


ra_direct_translator<npl_oamp_redirect_punt_eth_hdr_4_table_functional_traits_t> npl_oamp_redirect_punt_eth_hdr_4_table_ra_direct_translator;


ra_empty_direct_translator<npl_oamp_redirect_punt_eth_hdr_4_table_functional_traits_t> npl_oamp_redirect_punt_eth_hdr_4_table_ra_empty_direct_translator;


ra_direct_translator<npl_oamp_redirect_table_functional_traits_t> npl_oamp_redirect_table_ra_direct_translator;


ra_empty_direct_translator<npl_oamp_redirect_table_functional_traits_t> npl_oamp_redirect_table_ra_empty_direct_translator;


ra_direct_translator<npl_outer_tpid_table_functional_traits_t> npl_outer_tpid_table_ra_direct_translator;


ra_empty_direct_translator<npl_outer_tpid_table_functional_traits_t> npl_outer_tpid_table_ra_empty_direct_translator;


ra_direct_translator<npl_per_port_destination_table_functional_traits_t> npl_per_port_destination_table_ra_direct_translator;


ra_empty_direct_translator<npl_per_port_destination_table_functional_traits_t> npl_per_port_destination_table_ra_empty_direct_translator;


ra_direct_translator<npl_punt_rcy_inject_header_ene_encap_table_functional_traits_t> npl_punt_rcy_inject_header_ene_encap_table_ra_direct_translator;


ra_empty_direct_translator<npl_punt_rcy_inject_header_ene_encap_table_functional_traits_t> npl_punt_rcy_inject_header_ene_encap_table_ra_empty_direct_translator;


ra_direct_translator<npl_punt_select_nw_ene_static_table_functional_traits_t> npl_punt_select_nw_ene_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_punt_select_nw_ene_static_table_functional_traits_t> npl_punt_select_nw_ene_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_recycled_inject_up_info_table_functional_traits_t> npl_recycled_inject_up_info_table_ra_direct_translator;


ra_empty_direct_translator<npl_recycled_inject_up_info_table_functional_traits_t> npl_recycled_inject_up_info_table_ra_empty_direct_translator;


ra_direct_translator<npl_resolution_set_next_macro_table_functional_traits_t> npl_resolution_set_next_macro_table_ra_direct_translator;


ra_empty_direct_translator<npl_resolution_set_next_macro_table_functional_traits_t> npl_resolution_set_next_macro_table_ra_empty_direct_translator;


ra_direct_translator<npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_functional_traits_t> npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_functional_traits_t> npl_rtf_conf_set_to_og_pcl_compress_bits_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_rtf_conf_set_to_og_pcl_ids_mapping_table_functional_traits_t> npl_rtf_conf_set_to_og_pcl_ids_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_rtf_conf_set_to_og_pcl_ids_mapping_table_functional_traits_t> npl_rtf_conf_set_to_og_pcl_ids_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_rtf_conf_set_to_post_fwd_stage_mapping_table_functional_traits_t> npl_rtf_conf_set_to_post_fwd_stage_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_rtf_conf_set_to_post_fwd_stage_mapping_table_functional_traits_t> npl_rtf_conf_set_to_post_fwd_stage_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_fwd_error_handling_counter_table_functional_traits_t> npl_rx_fwd_error_handling_counter_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_fwd_error_handling_counter_table_functional_traits_t> npl_rx_fwd_error_handling_counter_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_fwd_error_handling_destination_table_functional_traits_t> npl_rx_fwd_error_handling_destination_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_fwd_error_handling_destination_table_functional_traits_t> npl_rx_fwd_error_handling_destination_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_ip_p_counter_offset_static_table_functional_traits_t> npl_rx_ip_p_counter_offset_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_ip_p_counter_offset_static_table_functional_traits_t> npl_rx_ip_p_counter_offset_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_map_npp_to_ssp_table_functional_traits_t> npl_rx_map_npp_to_ssp_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_map_npp_to_ssp_table_functional_traits_t> npl_rx_map_npp_to_ssp_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_obm_code_table_functional_traits_t> npl_rx_obm_code_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_obm_code_table_functional_traits_t> npl_rx_obm_code_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_redirect_code_ext_table_functional_traits_t> npl_rx_redirect_code_ext_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_redirect_code_ext_table_functional_traits_t> npl_rx_redirect_code_ext_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_redirect_code_table_functional_traits_t> npl_rx_redirect_code_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_redirect_code_table_functional_traits_t> npl_rx_redirect_code_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_term_error_handling_counter_table_functional_traits_t> npl_rx_term_error_handling_counter_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_term_error_handling_counter_table_functional_traits_t> npl_rx_term_error_handling_counter_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_term_error_handling_destination_table_functional_traits_t> npl_rx_term_error_handling_destination_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_term_error_handling_destination_table_functional_traits_t> npl_rx_term_error_handling_destination_table_ra_empty_direct_translator;


ra_direct_translator<npl_sda_fabric_enable_table_functional_traits_t> npl_sda_fabric_enable_table_ra_direct_translator;


ra_empty_direct_translator<npl_sda_fabric_enable_table_functional_traits_t> npl_sda_fabric_enable_table_ra_empty_direct_translator;


ra_direct_translator<npl_select_mac_forwarding_static_table_functional_traits_t> npl_select_mac_forwarding_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_select_mac_forwarding_static_table_functional_traits_t> npl_select_mac_forwarding_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_set_ene_macro_and_bytes_to_remove_table_functional_traits_t> npl_set_ene_macro_and_bytes_to_remove_table_ra_direct_translator;


ra_empty_direct_translator<npl_set_ene_macro_and_bytes_to_remove_table_functional_traits_t> npl_set_ene_macro_and_bytes_to_remove_table_ra_empty_direct_translator;


ra_direct_translator<npl_sgacl_counter_bank_table_functional_traits_t> npl_sgacl_counter_bank_table_ra_direct_translator;


ra_empty_direct_translator<npl_sgacl_counter_bank_table_functional_traits_t> npl_sgacl_counter_bank_table_ra_empty_direct_translator;


ra_direct_translator<npl_sgacl_l4_protocol_select_table_functional_traits_t> npl_sgacl_l4_protocol_select_table_ra_direct_translator;


ra_empty_direct_translator<npl_sgacl_l4_protocol_select_table_functional_traits_t> npl_sgacl_l4_protocol_select_table_ra_empty_direct_translator;


ra_direct_translator<npl_sip_index_table_functional_traits_t> npl_sip_index_table_ra_direct_translator;


ra_empty_direct_translator<npl_sip_index_table_functional_traits_t> npl_sip_index_table_ra_empty_direct_translator;


ra_direct_translator<npl_snoop_to_dsp_in_npu_soft_header_table_functional_traits_t> npl_snoop_to_dsp_in_npu_soft_header_table_ra_direct_translator;


ra_empty_direct_translator<npl_snoop_to_dsp_in_npu_soft_header_table_functional_traits_t> npl_snoop_to_dsp_in_npu_soft_header_table_ra_empty_direct_translator;


ra_direct_translator<npl_svl_dspa_table_functional_traits_t> npl_svl_dspa_table_ra_direct_translator;


ra_empty_direct_translator<npl_svl_dspa_table_functional_traits_t> npl_svl_dspa_table_ra_empty_direct_translator;


ra_direct_translator<npl_svl_mirror_cmd_remote_dsp_table_functional_traits_t> npl_svl_mirror_cmd_remote_dsp_table_ra_direct_translator;


ra_empty_direct_translator<npl_svl_mirror_cmd_remote_dsp_table_functional_traits_t> npl_svl_mirror_cmd_remote_dsp_table_ra_empty_direct_translator;


ra_direct_translator<npl_svl_mode_table_functional_traits_t> npl_svl_mode_table_ra_direct_translator;


ra_empty_direct_translator<npl_svl_mode_table_functional_traits_t> npl_svl_mode_table_ra_empty_direct_translator;


ra_direct_translator<npl_term_bucket_a_lu_data_selector_functional_traits_t> npl_term_bucket_a_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_term_bucket_a_lu_data_selector_functional_traits_t> npl_term_bucket_a_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_term_bucket_b_lu_data_selector_functional_traits_t> npl_term_bucket_b_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_term_bucket_b_lu_data_selector_functional_traits_t> npl_term_bucket_b_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_term_bucket_c_lu_data_selector_functional_traits_t> npl_term_bucket_c_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_term_bucket_c_lu_data_selector_functional_traits_t> npl_term_bucket_c_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_term_bucket_d_lu_data_selector_functional_traits_t> npl_term_bucket_d_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_term_bucket_d_lu_data_selector_functional_traits_t> npl_term_bucket_d_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_transmit_bucket_a_lu_data_selector_functional_traits_t> npl_transmit_bucket_a_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_transmit_bucket_a_lu_data_selector_functional_traits_t> npl_transmit_bucket_a_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_transmit_bucket_b_lu_data_selector_functional_traits_t> npl_transmit_bucket_b_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_transmit_bucket_b_lu_data_selector_functional_traits_t> npl_transmit_bucket_b_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_transmit_bucket_c_lu_data_selector_functional_traits_t> npl_transmit_bucket_c_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_transmit_bucket_c_lu_data_selector_functional_traits_t> npl_transmit_bucket_c_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_transmit_bucket_d_lu_data_selector_functional_traits_t> npl_transmit_bucket_d_lu_data_selector_ra_direct_translator;


ra_empty_direct_translator<npl_transmit_bucket_d_lu_data_selector_functional_traits_t> npl_transmit_bucket_d_lu_data_selector_ra_empty_direct_translator;


ra_direct_translator<npl_tunnel_qos_static_table_functional_traits_t> npl_tunnel_qos_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_tunnel_qos_static_table_functional_traits_t> npl_tunnel_qos_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_tx_error_handling_counter_table_functional_traits_t> npl_tx_error_handling_counter_table_ra_direct_translator;


ra_empty_direct_translator<npl_tx_error_handling_counter_table_functional_traits_t> npl_tx_error_handling_counter_table_ra_empty_direct_translator;


ra_direct_translator<npl_txpp_mapping_qos_tag_table_functional_traits_t> npl_txpp_mapping_qos_tag_table_ra_direct_translator;


ra_empty_direct_translator<npl_txpp_mapping_qos_tag_table_functional_traits_t> npl_txpp_mapping_qos_tag_table_ra_empty_direct_translator;


ra_ternary_translator<npl_bfd_udp_port_map_static_table_functional_traits_t> npl_bfd_udp_port_map_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_bfd_udp_port_map_static_table_functional_traits_t> npl_bfd_udp_port_map_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_dlp0_key_lsb_mapping_table_functional_traits_t> npl_dlp0_key_lsb_mapping_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_dlp0_key_lsb_mapping_table_functional_traits_t> npl_dlp0_key_lsb_mapping_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_dlp1_key_lsb_mapping_table_functional_traits_t> npl_dlp1_key_lsb_mapping_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_dlp1_key_lsb_mapping_table_functional_traits_t> npl_dlp1_key_lsb_mapping_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_dsp_dest_msbs_for_ecn_table_functional_traits_t> npl_dsp_dest_msbs_for_ecn_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_dsp_dest_msbs_for_ecn_table_functional_traits_t> npl_dsp_dest_msbs_for_ecn_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ecn_remark_static_table_functional_traits_t> npl_ecn_remark_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ecn_remark_static_table_functional_traits_t> npl_ecn_remark_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ene_byte_addition_static_table_functional_traits_t> npl_ene_byte_addition_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ene_byte_addition_static_table_functional_traits_t> npl_ene_byte_addition_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_erpp_fabric_counters_offset_table_functional_traits_t> npl_erpp_fabric_counters_offset_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_erpp_fabric_counters_offset_table_functional_traits_t> npl_erpp_fabric_counters_offset_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_erpp_fabric_counters_table_functional_traits_t> npl_erpp_fabric_counters_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_erpp_fabric_counters_table_functional_traits_t> npl_erpp_fabric_counters_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fabric_and_tm_header_size_static_table_functional_traits_t> npl_fabric_and_tm_header_size_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fabric_and_tm_header_size_static_table_functional_traits_t> npl_fabric_and_tm_header_size_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fabric_header_ene_macro_table_functional_traits_t> npl_fabric_header_ene_macro_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fabric_header_ene_macro_table_functional_traits_t> npl_fabric_header_ene_macro_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fabric_headers_type_table_functional_traits_t> npl_fabric_headers_type_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fabric_headers_type_table_functional_traits_t> npl_fabric_headers_type_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fabric_init_cfg_functional_traits_t> npl_fabric_init_cfg_ra_ternary_translator;


ra_empty_ternary_translator<npl_fabric_init_cfg_functional_traits_t> npl_fabric_init_cfg_ra_empty_ternary_translator;


ra_ternary_translator<npl_fabric_npuh_size_calculation_static_table_functional_traits_t> npl_fabric_npuh_size_calculation_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fabric_npuh_size_calculation_static_table_functional_traits_t> npl_fabric_npuh_size_calculation_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fabric_out_color_map_table_functional_traits_t> npl_fabric_out_color_map_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fabric_out_color_map_table_functional_traits_t> npl_fabric_out_color_map_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fabric_term_error_checker_static_table_functional_traits_t> npl_fabric_term_error_checker_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fabric_term_error_checker_static_table_functional_traits_t> npl_fabric_term_error_checker_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fabric_transmit_error_checker_static_table_functional_traits_t> npl_fabric_transmit_error_checker_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fabric_transmit_error_checker_static_table_functional_traits_t> npl_fabric_transmit_error_checker_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fixup_destination_for_resolution_static_table_functional_traits_t> npl_fixup_destination_for_resolution_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fixup_destination_for_resolution_static_table_functional_traits_t> npl_fixup_destination_for_resolution_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_inject_down_select_ene_static_table_functional_traits_t> npl_inject_down_select_ene_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_inject_down_select_ene_static_table_functional_traits_t> npl_inject_down_select_ene_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ip_inactivity_check_table_functional_traits_t> npl_ip_inactivity_check_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ip_inactivity_check_table_functional_traits_t> npl_ip_inactivity_check_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ip_ingress_cmp_mcid_static_table_functional_traits_t> npl_ip_ingress_cmp_mcid_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ip_ingress_cmp_mcid_static_table_functional_traits_t> npl_ip_ingress_cmp_mcid_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ip_mc_mpls_next_macro_static_table_functional_traits_t> npl_ip_mc_mpls_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ip_mc_mpls_next_macro_static_table_functional_traits_t> npl_ip_mc_mpls_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ip_proto_type_mux_static_table_functional_traits_t> npl_ip_proto_type_mux_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ip_proto_type_mux_static_table_functional_traits_t> npl_ip_proto_type_mux_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ip_ver_mc_static_table_functional_traits_t> npl_ip_ver_mc_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ip_ver_mc_static_table_functional_traits_t> npl_ip_ver_mc_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ipv4_acl_map_protocol_type_to_protocol_number_table_functional_traits_t> npl_ipv4_acl_map_protocol_type_to_protocol_number_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ipv4_acl_map_protocol_type_to_protocol_number_table_functional_traits_t> npl_ipv4_acl_map_protocol_type_to_protocol_number_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ipv6_first_fragment_static_table_functional_traits_t> npl_ipv6_first_fragment_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ipv6_first_fragment_static_table_functional_traits_t> npl_ipv6_first_fragment_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l2_lpts_ctrl_fields_static_table_functional_traits_t> npl_l2_lpts_ctrl_fields_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l2_lpts_ctrl_fields_static_table_functional_traits_t> npl_l2_lpts_ctrl_fields_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l2_lpts_next_macro_static_table_functional_traits_t> npl_l2_lpts_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l2_lpts_next_macro_static_table_functional_traits_t> npl_l2_lpts_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l2_lpts_protocol_table_functional_traits_t> npl_l2_lpts_protocol_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l2_lpts_protocol_table_functional_traits_t> npl_l2_lpts_protocol_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l2_termination_next_macro_static_table_functional_traits_t> npl_l2_termination_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l2_termination_next_macro_static_table_functional_traits_t> npl_l2_termination_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l3_dlp_p_counter_offset_table_functional_traits_t> npl_l3_dlp_p_counter_offset_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l3_dlp_p_counter_offset_table_functional_traits_t> npl_l3_dlp_p_counter_offset_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l3_lp_profile_filter_table_functional_traits_t> npl_l3_lp_profile_filter_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l3_lp_profile_filter_table_functional_traits_t> npl_l3_lp_profile_filter_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l3_termination_classify_ip_tunnels_table_functional_traits_t> npl_l3_termination_classify_ip_tunnels_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l3_termination_classify_ip_tunnels_table_functional_traits_t> npl_l3_termination_classify_ip_tunnels_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l3_termination_next_macro_static_table_functional_traits_t> npl_l3_termination_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l3_termination_next_macro_static_table_functional_traits_t> npl_l3_termination_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l3_tunnel_termination_next_macro_static_table_functional_traits_t> npl_l3_tunnel_termination_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l3_tunnel_termination_next_macro_static_table_functional_traits_t> npl_l3_tunnel_termination_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_large_em_key_lsb_mapping_table_functional_traits_t> npl_large_em_key_lsb_mapping_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_large_em_key_lsb_mapping_table_functional_traits_t> npl_large_em_key_lsb_mapping_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_local_mc_fwd_next_macro_static_table_functional_traits_t> npl_local_mc_fwd_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_local_mc_fwd_next_macro_static_table_functional_traits_t> npl_local_mc_fwd_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_lpts_og_application_table_functional_traits_t> npl_lpts_og_application_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_lpts_og_application_table_functional_traits_t> npl_lpts_og_application_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_mac_da_table_functional_traits_t> npl_mac_da_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_mac_da_table_functional_traits_t> npl_mac_da_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_mac_ethernet_rate_limit_type_static_table_functional_traits_t> npl_mac_ethernet_rate_limit_type_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_mac_ethernet_rate_limit_type_static_table_functional_traits_t> npl_mac_ethernet_rate_limit_type_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_mac_termination_next_macro_static_table_functional_traits_t> npl_mac_termination_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_mac_termination_next_macro_static_table_functional_traits_t> npl_mac_termination_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_map_inject_ccm_macro_static_table_functional_traits_t> npl_map_inject_ccm_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_map_inject_ccm_macro_static_table_functional_traits_t> npl_map_inject_ccm_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_map_tx_punt_next_macro_static_table_functional_traits_t> npl_map_tx_punt_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_map_tx_punt_next_macro_static_table_functional_traits_t> npl_map_tx_punt_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_map_tx_punt_rcy_next_macro_static_table_functional_traits_t> npl_map_tx_punt_rcy_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_map_tx_punt_rcy_next_macro_static_table_functional_traits_t> npl_map_tx_punt_rcy_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_meg_id_format_table_functional_traits_t> npl_meg_id_format_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_meg_id_format_table_functional_traits_t> npl_meg_id_format_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_mldp_protection_enabled_static_table_functional_traits_t> npl_mldp_protection_enabled_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_mldp_protection_enabled_static_table_functional_traits_t> npl_mldp_protection_enabled_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_mpls_resolve_service_labels_static_table_functional_traits_t> npl_mpls_resolve_service_labels_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_mpls_resolve_service_labels_static_table_functional_traits_t> npl_mpls_resolve_service_labels_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_mpls_vpn_enabled_static_table_functional_traits_t> npl_mpls_vpn_enabled_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_mpls_vpn_enabled_static_table_functional_traits_t> npl_mpls_vpn_enabled_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_my_ipv4_table_functional_traits_t> npl_my_ipv4_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_my_ipv4_table_functional_traits_t> npl_my_ipv4_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_nh_macro_code_to_id_l6_static_table_functional_traits_t> npl_nh_macro_code_to_id_l6_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_nh_macro_code_to_id_l6_static_table_functional_traits_t> npl_nh_macro_code_to_id_l6_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_null_rtf_next_macro_static_table_functional_traits_t> npl_null_rtf_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_null_rtf_next_macro_static_table_functional_traits_t> npl_null_rtf_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_obm_next_macro_static_table_functional_traits_t> npl_obm_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_obm_next_macro_static_table_functional_traits_t> npl_obm_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_og_next_macro_static_table_functional_traits_t> npl_og_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_og_next_macro_static_table_functional_traits_t> npl_og_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_pad_mtu_inj_check_static_table_functional_traits_t> npl_pad_mtu_inj_check_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_pad_mtu_inj_check_static_table_functional_traits_t> npl_pad_mtu_inj_check_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_pfc_filter_wd_table_functional_traits_t> npl_pfc_filter_wd_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_pfc_filter_wd_table_functional_traits_t> npl_pfc_filter_wd_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_pfc_offset_from_vector_static_table_functional_traits_t> npl_pfc_offset_from_vector_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_pfc_offset_from_vector_static_table_functional_traits_t> npl_pfc_offset_from_vector_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_pfc_ssp_slice_map_table_functional_traits_t> npl_pfc_ssp_slice_map_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_pfc_ssp_slice_map_table_functional_traits_t> npl_pfc_ssp_slice_map_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_post_fwd_rtf_next_macro_static_table_functional_traits_t> npl_post_fwd_rtf_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_post_fwd_rtf_next_macro_static_table_functional_traits_t> npl_post_fwd_rtf_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_probe_marker_1_static_table_functional_traits_t> npl_probe_marker_1_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_probe_marker_1_static_table_functional_traits_t> npl_probe_marker_1_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_probe_marker_2_static_table_functional_traits_t> npl_probe_marker_2_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_probe_marker_2_static_table_functional_traits_t> npl_probe_marker_2_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_punt_ethertype_static_table_functional_traits_t> npl_punt_ethertype_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_punt_ethertype_static_table_functional_traits_t> npl_punt_ethertype_static_table_ra_empty_ternary_translator;


ra_trap_ternary_translator<npl_redirect_table_functional_traits_t> npl_redirect_table_ra_trap_ternary_translator;


ra_empty_ternary_translator<npl_redirect_table_functional_traits_t> npl_redirect_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_rtf_next_macro_static_table_functional_traits_t> npl_rtf_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_rtf_next_macro_static_table_functional_traits_t> npl_rtf_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_rx_redirect_next_macro_static_table_functional_traits_t> npl_rx_redirect_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_rx_redirect_next_macro_static_table_functional_traits_t> npl_rx_redirect_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_second_ene_static_table_functional_traits_t> npl_second_ene_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_second_ene_static_table_functional_traits_t> npl_second_ene_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_select_inject_next_macro_static_table_functional_traits_t> npl_select_inject_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_select_inject_next_macro_static_table_functional_traits_t> npl_select_inject_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_service_mapping0_key_lsb_mapping_table_functional_traits_t> npl_service_mapping0_key_lsb_mapping_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_service_mapping0_key_lsb_mapping_table_functional_traits_t> npl_service_mapping0_key_lsb_mapping_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_service_mapping1_key_lsb_mapping_table_functional_traits_t> npl_service_mapping1_key_lsb_mapping_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_service_mapping1_key_lsb_mapping_table_functional_traits_t> npl_service_mapping1_key_lsb_mapping_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_service_mapping_tcam_key_lsb_mapping_table_functional_traits_t> npl_service_mapping_tcam_key_lsb_mapping_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_service_mapping_tcam_key_lsb_mapping_table_functional_traits_t> npl_service_mapping_tcam_key_lsb_mapping_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_sgacl_ip_fragment_check_table_functional_traits_t> npl_sgacl_ip_fragment_check_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_sgacl_ip_fragment_check_table_functional_traits_t> npl_sgacl_ip_fragment_check_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_sgacl_next_macro_static_table_functional_traits_t> npl_sgacl_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_sgacl_next_macro_static_table_functional_traits_t> npl_sgacl_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_sgt_derivation_macro_static_table_functional_traits_t> npl_sgt_derivation_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_sgt_derivation_macro_static_table_functional_traits_t> npl_sgt_derivation_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_sgt_vxlan_termination_table_functional_traits_t> npl_sgt_vxlan_termination_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_sgt_vxlan_termination_table_functional_traits_t> npl_sgt_vxlan_termination_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_small_em_key_lsb_mapping_table_functional_traits_t> npl_small_em_key_lsb_mapping_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_small_em_key_lsb_mapping_table_functional_traits_t> npl_small_em_key_lsb_mapping_table_ra_empty_ternary_translator;


ra_trap_ternary_translator<npl_snoop_table_functional_traits_t> npl_snoop_table_ra_trap_ternary_translator;


ra_empty_ternary_translator<npl_snoop_table_functional_traits_t> npl_snoop_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_splitter_lu_b_key_selector_functional_traits_t> npl_splitter_lu_b_key_selector_ra_ternary_translator;


ra_empty_ternary_translator<npl_splitter_lu_b_key_selector_functional_traits_t> npl_splitter_lu_b_key_selector_ra_empty_ternary_translator;


ra_ternary_translator<npl_splitter_lu_d_key_selector_functional_traits_t> npl_splitter_lu_d_key_selector_ra_ternary_translator;


ra_empty_ternary_translator<npl_splitter_lu_d_key_selector_functional_traits_t> npl_splitter_lu_d_key_selector_ra_empty_ternary_translator;


ra_ternary_translator<npl_svl_is_dsp_remote_functional_traits_t> npl_svl_is_dsp_remote_ra_ternary_translator;


ra_empty_ternary_translator<npl_svl_is_dsp_remote_functional_traits_t> npl_svl_is_dsp_remote_ra_empty_ternary_translator;


ra_ternary_translator<npl_svl_next_macro_static_table_functional_traits_t> npl_svl_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_svl_next_macro_static_table_functional_traits_t> npl_svl_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_svl_sgacl_enable_static_table_functional_traits_t> npl_svl_sgacl_enable_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_svl_sgacl_enable_static_table_functional_traits_t> npl_svl_sgacl_enable_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_svl_sgacl_next_macro_static_table_functional_traits_t> npl_svl_sgacl_next_macro_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_svl_sgacl_next_macro_static_table_functional_traits_t> npl_svl_sgacl_next_macro_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_te_headend_lsp_counter_offset_table_functional_traits_t> npl_te_headend_lsp_counter_offset_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_te_headend_lsp_counter_offset_table_functional_traits_t> npl_te_headend_lsp_counter_offset_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_tunnel_dlp_p_counter_offset_table_functional_traits_t> npl_tunnel_dlp_p_counter_offset_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_tunnel_dlp_p_counter_offset_table_functional_traits_t> npl_tunnel_dlp_p_counter_offset_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_urpf_ipsa_dest_is_lpts_static_table_functional_traits_t> npl_urpf_ipsa_dest_is_lpts_static_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_urpf_ipsa_dest_is_lpts_static_table_functional_traits_t> npl_urpf_ipsa_dest_is_lpts_static_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_vlan_format_table_functional_traits_t> npl_vlan_format_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_vlan_format_table_functional_traits_t> npl_vlan_format_table_ra_empty_ternary_translator;


ra_direct_translator<npl_all_reachable_vector_functional_traits_t> npl_all_reachable_vector_ra_direct_translator;


ra_empty_direct_translator<npl_all_reachable_vector_functional_traits_t> npl_all_reachable_vector_ra_empty_direct_translator;


ra_direct_translator<npl_bfd_event_queue_table_functional_traits_t> npl_bfd_event_queue_table_ra_direct_translator;


ra_empty_direct_translator<npl_bfd_event_queue_table_functional_traits_t> npl_bfd_event_queue_table_ra_empty_direct_translator;


ra_direct_translator<npl_bitmap_oqg_map_table_functional_traits_t> npl_bitmap_oqg_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_bitmap_oqg_map_table_functional_traits_t> npl_bitmap_oqg_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_calc_checksum_enable_table_functional_traits_t> npl_calc_checksum_enable_table_ra_direct_translator;


ra_empty_direct_translator<npl_calc_checksum_enable_table_functional_traits_t> npl_calc_checksum_enable_table_ra_empty_direct_translator;


ra_direct_translator<npl_cif2npa_c_lri_macro_functional_traits_t> npl_cif2npa_c_lri_macro_ra_direct_translator;


ra_empty_direct_translator<npl_cif2npa_c_lri_macro_functional_traits_t> npl_cif2npa_c_lri_macro_ra_empty_direct_translator;


ra_direct_translator<npl_cif2npa_c_mps_macro_functional_traits_t> npl_cif2npa_c_mps_macro_ra_direct_translator;


ra_empty_direct_translator<npl_cif2npa_c_mps_macro_functional_traits_t> npl_cif2npa_c_mps_macro_ra_empty_direct_translator;


ra_direct_translator<npl_counters_block_config_table_functional_traits_t> npl_counters_block_config_table_ra_direct_translator;


ra_empty_direct_translator<npl_counters_block_config_table_functional_traits_t> npl_counters_block_config_table_ra_empty_direct_translator;


ra_direct_translator<npl_counters_voq_block_map_table_functional_traits_t> npl_counters_voq_block_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_counters_voq_block_map_table_functional_traits_t> npl_counters_voq_block_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_cud_is_multicast_bitmap_functional_traits_t> npl_cud_is_multicast_bitmap_ra_direct_translator;


ra_empty_direct_translator<npl_cud_is_multicast_bitmap_functional_traits_t> npl_cud_is_multicast_bitmap_ra_empty_direct_translator;


ra_direct_translator<npl_cud_narrow_hw_table_functional_traits_t> npl_cud_narrow_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_cud_narrow_hw_table_functional_traits_t> npl_cud_narrow_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_cud_wide_hw_table_functional_traits_t> npl_cud_wide_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_cud_wide_hw_table_functional_traits_t> npl_cud_wide_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_db_access_ingress_vlan_membership_table_lu_d_res_c_functional_traits_t> npl_db_access_ingress_vlan_membership_table_lu_d_res_c_ra_direct_translator;


ra_empty_direct_translator<npl_db_access_ingress_vlan_membership_table_lu_d_res_c_functional_traits_t> npl_db_access_ingress_vlan_membership_table_lu_d_res_c_ra_empty_direct_translator;


ra_direct_translator<npl_db_access_ingress_vlan_membership_table_lu_d_res_d_functional_traits_t> npl_db_access_ingress_vlan_membership_table_lu_d_res_d_ra_direct_translator;


ra_empty_direct_translator<npl_db_access_ingress_vlan_membership_table_lu_d_res_d_functional_traits_t> npl_db_access_ingress_vlan_membership_table_lu_d_res_d_ra_empty_direct_translator;


ra_direct_translator<npl_db_access_vlan_membership_table_lu_c_res_c_functional_traits_t> npl_db_access_vlan_membership_table_lu_c_res_c_ra_direct_translator;


ra_empty_direct_translator<npl_db_access_vlan_membership_table_lu_c_res_c_functional_traits_t> npl_db_access_vlan_membership_table_lu_c_res_c_ra_empty_direct_translator;


ra_direct_translator<npl_db_access_vlan_membership_table_lu_d_res_c_functional_traits_t> npl_db_access_vlan_membership_table_lu_d_res_c_ra_direct_translator;


ra_empty_direct_translator<npl_db_access_vlan_membership_table_lu_d_res_c_functional_traits_t> npl_db_access_vlan_membership_table_lu_d_res_c_ra_empty_direct_translator;


ra_direct_translator<npl_dest_slice_voq_map_table_functional_traits_t> npl_dest_slice_voq_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_dest_slice_voq_map_table_functional_traits_t> npl_dest_slice_voq_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_dest_type_decoding_table_functional_traits_t> npl_dest_type_decoding_table_ra_direct_translator;


ra_empty_direct_translator<npl_dest_type_decoding_table_functional_traits_t> npl_dest_type_decoding_table_ra_empty_direct_translator;


ra_direct_translator<npl_device_mode_table_functional_traits_t> npl_device_mode_table_ra_direct_translator;


ra_empty_direct_translator<npl_device_mode_table_functional_traits_t> npl_device_mode_table_ra_empty_direct_translator;


ra_direct_translator<npl_dram_cgm_cgm_deq_lut_table_functional_traits_t> npl_dram_cgm_cgm_deq_lut_table_ra_direct_translator;


ra_empty_direct_translator<npl_dram_cgm_cgm_deq_lut_table_functional_traits_t> npl_dram_cgm_cgm_deq_lut_table_ra_empty_direct_translator;


ra_direct_translator<npl_dram_cgm_cgm_lut_table_functional_traits_t> npl_dram_cgm_cgm_lut_table_ra_direct_translator;


ra_empty_direct_translator<npl_dram_cgm_cgm_lut_table_functional_traits_t> npl_dram_cgm_cgm_lut_table_ra_empty_direct_translator;


ra_direct_translator<npl_dummy_dip_index_table_functional_traits_t> npl_dummy_dip_index_table_ra_direct_translator;


ra_empty_direct_translator<npl_dummy_dip_index_table_functional_traits_t> npl_dummy_dip_index_table_ra_empty_direct_translator;


ra_direct_translator<npl_egress_nh_and_svi_direct0_table_functional_traits_t> npl_egress_nh_and_svi_direct0_table_ra_direct_translator;


ra_empty_direct_translator<npl_egress_nh_and_svi_direct0_table_functional_traits_t> npl_egress_nh_and_svi_direct0_table_ra_empty_direct_translator;


ra_direct_translator<npl_egress_nh_and_svi_direct1_table_functional_traits_t> npl_egress_nh_and_svi_direct1_table_ra_direct_translator;


ra_empty_direct_translator<npl_egress_nh_and_svi_direct1_table_functional_traits_t> npl_egress_nh_and_svi_direct1_table_ra_empty_direct_translator;


ra_direct_translator<npl_encap_data_source_select_table_functional_traits_t> npl_encap_data_source_select_table_ra_direct_translator;


ra_empty_direct_translator<npl_encap_data_source_select_table_functional_traits_t> npl_encap_data_source_select_table_ra_empty_direct_translator;


ra_direct_translator<npl_eve_drop_mapping_hw_table_functional_traits_t> npl_eve_drop_mapping_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_eve_drop_mapping_hw_table_functional_traits_t> npl_eve_drop_mapping_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_eve_drop_vlan_id_hw_table_functional_traits_t> npl_eve_drop_vlan_id_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_eve_drop_vlan_id_hw_table_functional_traits_t> npl_eve_drop_vlan_id_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_eve_interrupt_mapping_hw_table_functional_traits_t> npl_eve_interrupt_mapping_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_eve_interrupt_mapping_hw_table_functional_traits_t> npl_eve_interrupt_mapping_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_event_queue_table_functional_traits_t> npl_event_queue_table_ra_direct_translator;


ra_empty_direct_translator<npl_event_queue_table_functional_traits_t> npl_event_queue_table_ra_empty_direct_translator;


ra_direct_translator<npl_external_aux_table_functional_traits_t> npl_external_aux_table_ra_direct_translator;


ra_empty_direct_translator<npl_external_aux_table_functional_traits_t> npl_external_aux_table_ra_empty_direct_translator;


ra_direct_translator<npl_fb_link_2_link_bundle_table_functional_traits_t> npl_fb_link_2_link_bundle_table_ra_direct_translator;


ra_empty_direct_translator<npl_fb_link_2_link_bundle_table_functional_traits_t> npl_fb_link_2_link_bundle_table_ra_empty_direct_translator;


ra_direct_translator<npl_fc_db_performance_vlan_membership_table_functional_traits_t> npl_fc_db_performance_vlan_membership_table_ra_direct_translator;


ra_empty_direct_translator<npl_fc_db_performance_vlan_membership_table_functional_traits_t> npl_fc_db_performance_vlan_membership_table_ra_empty_direct_translator;


ra_direct_translator<npl_fe_broadcast_bmp_table_functional_traits_t> npl_fe_broadcast_bmp_table_ra_direct_translator;


ra_empty_direct_translator<npl_fe_broadcast_bmp_table_functional_traits_t> npl_fe_broadcast_bmp_table_ra_empty_direct_translator;


ra_direct_translator<npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_functional_traits_t> npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_functional_traits_t> npl_fe_rlb_uc_tx_fb_link_to_oq_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_fe_smcid_to_mcid_table_functional_traits_t> npl_fe_smcid_to_mcid_table_ra_direct_translator;


ra_empty_direct_translator<npl_fe_smcid_to_mcid_table_functional_traits_t> npl_fe_smcid_to_mcid_table_ra_empty_direct_translator;


ra_direct_translator<npl_fe_uc_link_bundle_desc_table_functional_traits_t> npl_fe_uc_link_bundle_desc_table_ra_direct_translator;


ra_empty_direct_translator<npl_fe_uc_link_bundle_desc_table_functional_traits_t> npl_fe_uc_link_bundle_desc_table_ra_empty_direct_translator;


ra_direct_translator<npl_fec_table_functional_traits_t> npl_fec_table_ra_direct_translator;


ra_empty_direct_translator<npl_fec_table_functional_traits_t> npl_fec_table_ra_empty_direct_translator;


ra_direct_translator<npl_fec_type_decoding_table_functional_traits_t> npl_fec_type_decoding_table_ra_direct_translator;


ra_empty_direct_translator<npl_fec_type_decoding_table_functional_traits_t> npl_fec_type_decoding_table_ra_empty_direct_translator;


ra_direct_translator<npl_fi_macro_config_table_functional_traits_t> npl_fi_macro_config_table_ra_direct_translator;


ra_empty_direct_translator<npl_fi_macro_config_table_functional_traits_t> npl_fi_macro_config_table_ra_empty_direct_translator;


ra_direct_translator<npl_filb_voq_mapping_functional_traits_t> npl_filb_voq_mapping_ra_direct_translator;


ra_empty_direct_translator<npl_filb_voq_mapping_functional_traits_t> npl_filb_voq_mapping_ra_empty_direct_translator;


ra_direct_translator<npl_flc_cache_range_comp_profile_table_functional_traits_t> npl_flc_cache_range_comp_profile_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_cache_range_comp_profile_table_functional_traits_t> npl_flc_cache_range_comp_profile_table_ra_empty_direct_translator;


ra_direct_translator<npl_flc_data_table_functional_traits_t> npl_flc_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_data_table_functional_traits_t> npl_flc_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_flc_fbm_table_functional_traits_t> npl_flc_fbm_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_fbm_table_functional_traits_t> npl_flc_fbm_table_ra_empty_direct_translator;


ra_direct_translator<npl_flc_map_header_type_mask_id_table_functional_traits_t> npl_flc_map_header_type_mask_id_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_map_header_type_mask_id_table_functional_traits_t> npl_flc_map_header_type_mask_id_table_ra_empty_direct_translator;


ra_direct_translator<npl_flc_map_header_type_mask_l_table_functional_traits_t> npl_flc_map_header_type_mask_l_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_map_header_type_mask_l_table_functional_traits_t> npl_flc_map_header_type_mask_l_table_ra_empty_direct_translator;


ra_direct_translator<npl_flc_map_header_type_mask_m_table_functional_traits_t> npl_flc_map_header_type_mask_m_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_map_header_type_mask_m_table_functional_traits_t> npl_flc_map_header_type_mask_m_table_ra_empty_direct_translator;


ra_direct_translator<npl_flc_map_header_type_mask_s_table_functional_traits_t> npl_flc_map_header_type_mask_s_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_map_header_type_mask_s_table_functional_traits_t> npl_flc_map_header_type_mask_s_table_ra_empty_direct_translator;


ra_direct_translator<npl_flc_q_range_comp_profile_table_functional_traits_t> npl_flc_q_range_comp_profile_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_q_range_comp_profile_table_functional_traits_t> npl_flc_q_range_comp_profile_table_ra_empty_direct_translator;


ra_direct_translator<npl_flc_range_comp_ranges_table_functional_traits_t> npl_flc_range_comp_ranges_table_ra_direct_translator;


ra_empty_direct_translator<npl_flc_range_comp_ranges_table_functional_traits_t> npl_flc_range_comp_ranges_table_ra_empty_direct_translator;


ra_direct_translator<npl_frm_db_fabric_routing_table_functional_traits_t> npl_frm_db_fabric_routing_table_ra_direct_translator;


ra_empty_direct_translator<npl_frm_db_fabric_routing_table_functional_traits_t> npl_frm_db_fabric_routing_table_ra_empty_direct_translator;


ra_direct_translator<npl_fwd_and_encap_types_to_field_a_offset_table_functional_traits_t> npl_fwd_and_encap_types_to_field_a_offset_table_ra_direct_translator;


ra_empty_direct_translator<npl_fwd_and_encap_types_to_field_a_offset_table_functional_traits_t> npl_fwd_and_encap_types_to_field_a_offset_table_ra_empty_direct_translator;


ra_direct_translator<npl_fwd_and_encap_types_to_field_b_offset_table_functional_traits_t> npl_fwd_and_encap_types_to_field_b_offset_table_ra_direct_translator;


ra_empty_direct_translator<npl_fwd_and_encap_types_to_field_b_offset_table_functional_traits_t> npl_fwd_and_encap_types_to_field_b_offset_table_ra_empty_direct_translator;


ra_direct_translator<npl_fwd_type_to_ive_enable_table_functional_traits_t> npl_fwd_type_to_ive_enable_table_ra_direct_translator;


ra_empty_direct_translator<npl_fwd_type_to_ive_enable_table_functional_traits_t> npl_fwd_type_to_ive_enable_table_ra_empty_direct_translator;


ra_direct_translator<npl_hmc_cgm_profile_global_table_functional_traits_t> npl_hmc_cgm_profile_global_table_ra_direct_translator;


ra_empty_direct_translator<npl_hmc_cgm_profile_global_table_functional_traits_t> npl_hmc_cgm_profile_global_table_ra_empty_direct_translator;


ra_direct_translator<npl_ibm_cmd_table_functional_traits_t> npl_ibm_cmd_table_ra_direct_translator;


ra_empty_direct_translator<npl_ibm_cmd_table_functional_traits_t> npl_ibm_cmd_table_ra_empty_direct_translator;


ra_direct_translator<npl_ifgb_tc_lut_table_functional_traits_t> npl_ifgb_tc_lut_table_ra_direct_translator;


ra_empty_direct_translator<npl_ifgb_tc_lut_table_functional_traits_t> npl_ifgb_tc_lut_table_ra_empty_direct_translator;


ra_direct_translator<npl_inject_mact_ldb_to_output_lr_functional_traits_t> npl_inject_mact_ldb_to_output_lr_ra_direct_translator;


ra_empty_direct_translator<npl_inject_mact_ldb_to_output_lr_functional_traits_t> npl_inject_mact_ldb_to_output_lr_ra_empty_direct_translator;


ra_direct_translator<npl_latest_learn_records_table_functional_traits_t> npl_latest_learn_records_table_ra_direct_translator;


ra_empty_direct_translator<npl_latest_learn_records_table_functional_traits_t> npl_latest_learn_records_table_ra_empty_direct_translator;


ra_direct_translator<npl_learn_manager_cfg_max_learn_type_reg_functional_traits_t> npl_learn_manager_cfg_max_learn_type_reg_ra_direct_translator;


ra_empty_direct_translator<npl_learn_manager_cfg_max_learn_type_reg_functional_traits_t> npl_learn_manager_cfg_max_learn_type_reg_ra_empty_direct_translator;


ra_direct_translator<npl_learn_record_fifo_table_functional_traits_t> npl_learn_record_fifo_table_ra_direct_translator;


ra_empty_direct_translator<npl_learn_record_fifo_table_functional_traits_t> npl_learn_record_fifo_table_ra_empty_direct_translator;


ra_direct_translator<npl_light_fi_fabric_table_functional_traits_t> npl_light_fi_fabric_table_ra_direct_translator;


ra_empty_direct_translator<npl_light_fi_fabric_table_functional_traits_t> npl_light_fi_fabric_table_ra_empty_direct_translator;


ra_direct_translator<npl_light_fi_npu_base_table_functional_traits_t> npl_light_fi_npu_base_table_ra_direct_translator;


ra_empty_direct_translator<npl_light_fi_npu_base_table_functional_traits_t> npl_light_fi_npu_base_table_ra_empty_direct_translator;


ra_direct_translator<npl_light_fi_npu_encap_table_functional_traits_t> npl_light_fi_npu_encap_table_ra_direct_translator;


ra_empty_direct_translator<npl_light_fi_npu_encap_table_functional_traits_t> npl_light_fi_npu_encap_table_ra_empty_direct_translator;


ra_direct_translator<npl_light_fi_stages_cfg_table_functional_traits_t> npl_light_fi_stages_cfg_table_ra_direct_translator;


ra_empty_direct_translator<npl_light_fi_stages_cfg_table_functional_traits_t> npl_light_fi_stages_cfg_table_ra_empty_direct_translator;


ra_direct_translator<npl_light_fi_tm_table_functional_traits_t> npl_light_fi_tm_table_ra_direct_translator;


ra_empty_direct_translator<npl_light_fi_tm_table_functional_traits_t> npl_light_fi_tm_table_ra_empty_direct_translator;


ra_direct_translator<npl_link_relay_attributes_table_functional_traits_t> npl_link_relay_attributes_table_ra_direct_translator;


ra_empty_direct_translator<npl_link_relay_attributes_table_functional_traits_t> npl_link_relay_attributes_table_ra_empty_direct_translator;


ra_direct_translator<npl_link_relay_id_static_table_functional_traits_t> npl_link_relay_id_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_link_relay_id_static_table_functional_traits_t> npl_link_relay_id_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_link_up_vector_functional_traits_t> npl_link_up_vector_ra_direct_translator;


ra_empty_direct_translator<npl_link_up_vector_functional_traits_t> npl_link_up_vector_ra_empty_direct_translator;


ra_direct_translator<npl_lr_filter_write_ptr_reg_functional_traits_t> npl_lr_filter_write_ptr_reg_ra_direct_translator;


ra_empty_direct_translator<npl_lr_filter_write_ptr_reg_functional_traits_t> npl_lr_filter_write_ptr_reg_ra_empty_direct_translator;


ra_direct_translator<npl_lr_write_ptr_reg_functional_traits_t> npl_lr_write_ptr_reg_ra_direct_translator;


ra_empty_direct_translator<npl_lr_write_ptr_reg_functional_traits_t> npl_lr_write_ptr_reg_ra_empty_direct_translator;


ra_direct_translator<npl_mc_bitmap_base_voq_lookup_table_functional_traits_t> npl_mc_bitmap_base_voq_lookup_table_ra_direct_translator;


ra_empty_direct_translator<npl_mc_bitmap_base_voq_lookup_table_functional_traits_t> npl_mc_bitmap_base_voq_lookup_table_ra_empty_direct_translator;


ra_direct_translator<npl_mc_bitmap_tc_map_table_functional_traits_t> npl_mc_bitmap_tc_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_mc_bitmap_tc_map_table_functional_traits_t> npl_mc_bitmap_tc_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_mc_copy_id_map_functional_traits_t> npl_mc_copy_id_map_ra_direct_translator;


ra_empty_direct_translator<npl_mc_copy_id_map_functional_traits_t> npl_mc_copy_id_map_ra_empty_direct_translator;


ra_direct_translator<npl_mc_cud_is_wide_table_functional_traits_t> npl_mc_cud_is_wide_table_ra_direct_translator;


ra_empty_direct_translator<npl_mc_cud_is_wide_table_functional_traits_t> npl_mc_cud_is_wide_table_ra_empty_direct_translator;


ra_direct_translator<npl_mc_cud_table_functional_traits_t> npl_mc_cud_table_ra_direct_translator;


ra_empty_direct_translator<npl_mc_cud_table_functional_traits_t> npl_mc_cud_table_ra_empty_direct_translator;


ra_direct_translator<npl_mc_emdb_tc_map_table_functional_traits_t> npl_mc_emdb_tc_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_mc_emdb_tc_map_table_functional_traits_t> npl_mc_emdb_tc_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_mc_fe_links_bmp_functional_traits_t> npl_mc_fe_links_bmp_ra_direct_translator;


ra_empty_direct_translator<npl_mc_fe_links_bmp_functional_traits_t> npl_mc_fe_links_bmp_ra_empty_direct_translator;


ra_direct_translator<npl_mc_ibm_cud_mapping_table_functional_traits_t> npl_mc_ibm_cud_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_mc_ibm_cud_mapping_table_functional_traits_t> npl_mc_ibm_cud_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_mc_slice_bitmap_table_functional_traits_t> npl_mc_slice_bitmap_table_ra_direct_translator;


ra_empty_direct_translator<npl_mc_slice_bitmap_table_functional_traits_t> npl_mc_slice_bitmap_table_ra_empty_direct_translator;


ra_direct_translator<npl_mii_loopback_table_functional_traits_t> npl_mii_loopback_table_ra_direct_translator;


ra_empty_direct_translator<npl_mii_loopback_table_functional_traits_t> npl_mii_loopback_table_ra_empty_direct_translator;


ra_direct_translator<npl_mirror_code_2_hw_table_functional_traits_t> npl_mirror_code_2_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_mirror_code_2_hw_table_functional_traits_t> npl_mirror_code_2_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_mirror_code_hw_table_functional_traits_t> npl_mirror_code_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_mirror_code_hw_table_functional_traits_t> npl_mirror_code_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_mp_aux_data_table_functional_traits_t> npl_mp_aux_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_mp_aux_data_table_functional_traits_t> npl_mp_aux_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_mp_data_table_functional_traits_t> npl_mp_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_mp_data_table_functional_traits_t> npl_mp_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_ms_voq_fabric_context_offset_table_functional_traits_t> npl_ms_voq_fabric_context_offset_table_ra_direct_translator;


ra_empty_direct_translator<npl_ms_voq_fabric_context_offset_table_functional_traits_t> npl_ms_voq_fabric_context_offset_table_ra_empty_direct_translator;


ra_direct_translator<npl_oamp_event_queue_table_functional_traits_t> npl_oamp_event_queue_table_ra_direct_translator;


ra_empty_direct_translator<npl_oamp_event_queue_table_functional_traits_t> npl_oamp_event_queue_table_ra_empty_direct_translator;


ra_direct_translator<npl_pbts_map_table_stage0_functional_traits_t> npl_pbts_map_table_stage0_ra_direct_translator;


ra_empty_direct_translator<npl_pbts_map_table_stage0_functional_traits_t> npl_pbts_map_table_stage0_ra_empty_direct_translator;


ra_direct_translator<npl_pbts_map_table_stage1_functional_traits_t> npl_pbts_map_table_stage1_ra_direct_translator;


ra_empty_direct_translator<npl_pbts_map_table_stage1_functional_traits_t> npl_pbts_map_table_stage1_ra_empty_direct_translator;


ra_direct_translator<npl_pbts_map_table_stage2_functional_traits_t> npl_pbts_map_table_stage2_ra_direct_translator;


ra_empty_direct_translator<npl_pbts_map_table_stage2_functional_traits_t> npl_pbts_map_table_stage2_ra_empty_direct_translator;


ra_direct_translator<npl_pbts_map_table_stage3_functional_traits_t> npl_pbts_map_table_stage3_ra_direct_translator;


ra_empty_direct_translator<npl_pbts_map_table_stage3_functional_traits_t> npl_pbts_map_table_stage3_ra_empty_direct_translator;


ra_direct_translator<npl_pdoq_oq_ifc_mapping_functional_traits_t> npl_pdoq_oq_ifc_mapping_ra_direct_translator;


ra_empty_direct_translator<npl_pdoq_oq_ifc_mapping_functional_traits_t> npl_pdoq_oq_ifc_mapping_ra_empty_direct_translator;


ra_direct_translator<npl_pdvoq_bank_pair_offset_table_functional_traits_t> npl_pdvoq_bank_pair_offset_table_ra_direct_translator;


ra_empty_direct_translator<npl_pdvoq_bank_pair_offset_table_functional_traits_t> npl_pdvoq_bank_pair_offset_table_ra_empty_direct_translator;


ra_direct_translator<npl_pdvoq_slice_dram_wred_lut_table_functional_traits_t> npl_pdvoq_slice_dram_wred_lut_table_ra_direct_translator;


ra_empty_direct_translator<npl_pdvoq_slice_dram_wred_lut_table_functional_traits_t> npl_pdvoq_slice_dram_wred_lut_table_ra_empty_direct_translator;


ra_direct_translator<npl_pdvoq_slice_voq_properties_table_functional_traits_t> npl_pdvoq_slice_voq_properties_table_ra_direct_translator;


ra_empty_direct_translator<npl_pdvoq_slice_voq_properties_table_functional_traits_t> npl_pdvoq_slice_voq_properties_table_ra_empty_direct_translator;


ra_direct_translator<npl_pin_start_offset_macros_functional_traits_t> npl_pin_start_offset_macros_ra_direct_translator;


ra_empty_direct_translator<npl_pin_start_offset_macros_functional_traits_t> npl_pin_start_offset_macros_ra_empty_direct_translator;


ra_direct_translator<npl_pma_loopback_table_functional_traits_t> npl_pma_loopback_table_ra_direct_translator;


ra_empty_direct_translator<npl_pma_loopback_table_functional_traits_t> npl_pma_loopback_table_ra_empty_direct_translator;


ra_direct_translator<npl_punt_tunnel_transport_extended_encap_table2_functional_traits_t> npl_punt_tunnel_transport_extended_encap_table2_ra_direct_translator;


ra_empty_direct_translator<npl_punt_tunnel_transport_extended_encap_table2_functional_traits_t> npl_punt_tunnel_transport_extended_encap_table2_ra_empty_direct_translator;


ra_direct_translator<npl_reassembly_source_port_map_table_functional_traits_t> npl_reassembly_source_port_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_reassembly_source_port_map_table_functional_traits_t> npl_reassembly_source_port_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_recycle_override_table_functional_traits_t> npl_recycle_override_table_ra_direct_translator;


ra_empty_direct_translator<npl_recycle_override_table_functional_traits_t> npl_recycle_override_table_ra_empty_direct_translator;


ra_direct_translator<npl_redirect_destination_table_functional_traits_t> npl_redirect_destination_table_ra_direct_translator;


ra_empty_direct_translator<npl_redirect_destination_table_functional_traits_t> npl_redirect_destination_table_ra_empty_direct_translator;


ra_direct_translator<npl_rmep_last_time_table_functional_traits_t> npl_rmep_last_time_table_ra_direct_translator;


ra_empty_direct_translator<npl_rmep_last_time_table_functional_traits_t> npl_rmep_last_time_table_ra_empty_direct_translator;


ra_direct_translator<npl_rmep_state_table_functional_traits_t> npl_rmep_state_table_ra_direct_translator;


ra_empty_direct_translator<npl_rmep_state_table_functional_traits_t> npl_rmep_state_table_ra_empty_direct_translator;


ra_direct_translator<npl_rpf_fec_access_map_table_functional_traits_t> npl_rpf_fec_access_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_rpf_fec_access_map_table_functional_traits_t> npl_rpf_fec_access_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_rpf_fec_table_functional_traits_t> npl_rpf_fec_table_ra_direct_translator;


ra_empty_direct_translator<npl_rpf_fec_table_functional_traits_t> npl_rpf_fec_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_counters_bank_id_map_config_functional_traits_t> npl_rx_counters_bank_id_map_config_ra_direct_translator;


ra_empty_direct_translator<npl_rx_counters_bank_id_map_config_functional_traits_t> npl_rx_counters_bank_id_map_config_ra_empty_direct_translator;


ra_direct_translator<npl_rx_counters_block_config_table_functional_traits_t> npl_rx_counters_block_config_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_counters_block_config_table_functional_traits_t> npl_rx_counters_block_config_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_bank_offset_map_functional_traits_t> npl_rx_meter_bank_offset_map_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_bank_offset_map_functional_traits_t> npl_rx_meter_bank_offset_map_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_block_meter_attribute_table_functional_traits_t> npl_rx_meter_block_meter_attribute_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_block_meter_attribute_table_functional_traits_t> npl_rx_meter_block_meter_attribute_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_block_meter_profile_table_functional_traits_t> npl_rx_meter_block_meter_profile_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_block_meter_profile_table_functional_traits_t> npl_rx_meter_block_meter_profile_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_block_meter_shaper_configuration_table_functional_traits_t> npl_rx_meter_block_meter_shaper_configuration_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_block_meter_shaper_configuration_table_functional_traits_t> npl_rx_meter_block_meter_shaper_configuration_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_distributed_meter_profile_table_functional_traits_t> npl_rx_meter_distributed_meter_profile_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_distributed_meter_profile_table_functional_traits_t> npl_rx_meter_distributed_meter_profile_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_exact_meter_decision_mapping_table_functional_traits_t> npl_rx_meter_exact_meter_decision_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_exact_meter_decision_mapping_table_functional_traits_t> npl_rx_meter_exact_meter_decision_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_meter_profile_table_functional_traits_t> npl_rx_meter_meter_profile_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_meter_profile_table_functional_traits_t> npl_rx_meter_meter_profile_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_meter_shaper_configuration_table_functional_traits_t> npl_rx_meter_meter_shaper_configuration_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_meter_shaper_configuration_table_functional_traits_t> npl_rx_meter_meter_shaper_configuration_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_meters_attribute_table_functional_traits_t> npl_rx_meter_meters_attribute_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_meters_attribute_table_functional_traits_t> npl_rx_meter_meters_attribute_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_rate_limiter_shaper_configuration_table_functional_traits_t> npl_rx_meter_rate_limiter_shaper_configuration_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_rate_limiter_shaper_configuration_table_functional_traits_t> npl_rx_meter_rate_limiter_shaper_configuration_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_meter_stat_meter_decision_mapping_table_functional_traits_t> npl_rx_meter_stat_meter_decision_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_meter_stat_meter_decision_mapping_table_functional_traits_t> npl_rx_meter_stat_meter_decision_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_rx_npu_to_tm_dest_table_functional_traits_t> npl_rx_npu_to_tm_dest_table_ra_direct_translator;


ra_empty_direct_translator<npl_rx_npu_to_tm_dest_table_functional_traits_t> npl_rx_npu_to_tm_dest_table_ra_empty_direct_translator;


ra_direct_translator<npl_rxpdr_dsp_lookup_table_functional_traits_t> npl_rxpdr_dsp_lookup_table_ra_direct_translator;


ra_empty_direct_translator<npl_rxpdr_dsp_lookup_table_functional_traits_t> npl_rxpdr_dsp_lookup_table_ra_empty_direct_translator;


ra_direct_translator<npl_rxpdr_dsp_tc_map_functional_traits_t> npl_rxpdr_dsp_tc_map_ra_direct_translator;


ra_empty_direct_translator<npl_rxpdr_dsp_tc_map_functional_traits_t> npl_rxpdr_dsp_tc_map_ra_empty_direct_translator;


ra_direct_translator<npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_functional_traits_t> npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_ra_direct_translator;


ra_empty_direct_translator<npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_functional_traits_t> npl_rxpdr_fe_rlb_uc_tx_fb_link_to_oq_table_ra_empty_direct_translator;


ra_direct_translator<npl_sch_oqse_cfg_functional_traits_t> npl_sch_oqse_cfg_ra_direct_translator;


ra_empty_direct_translator<npl_sch_oqse_cfg_functional_traits_t> npl_sch_oqse_cfg_ra_empty_direct_translator;


ra_direct_translator<npl_service_lp_attributes_table_functional_traits_t> npl_service_lp_attributes_table_ra_direct_translator;


ra_empty_direct_translator<npl_service_lp_attributes_table_functional_traits_t> npl_service_lp_attributes_table_ra_empty_direct_translator;


ra_direct_translator<npl_service_relay_attributes_table_functional_traits_t> npl_service_relay_attributes_table_ra_direct_translator;


ra_empty_direct_translator<npl_service_relay_attributes_table_functional_traits_t> npl_service_relay_attributes_table_ra_empty_direct_translator;


ra_direct_translator<npl_service_relay_id_static_table_functional_traits_t> npl_service_relay_id_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_service_relay_id_static_table_functional_traits_t> npl_service_relay_id_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_slice_modes_table_functional_traits_t> npl_slice_modes_table_ra_direct_translator;


ra_empty_direct_translator<npl_slice_modes_table_functional_traits_t> npl_slice_modes_table_ra_empty_direct_translator;


ra_direct_translator<npl_snoop_code_hw_table_functional_traits_t> npl_snoop_code_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_snoop_code_hw_table_functional_traits_t> npl_snoop_code_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_source_pif_hw_table_functional_traits_t> npl_source_pif_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_source_pif_hw_table_functional_traits_t> npl_source_pif_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_source_port_to_link_table_functional_traits_t> npl_source_port_to_link_table_ra_direct_translator;


ra_empty_direct_translator<npl_source_port_to_link_table_functional_traits_t> npl_source_port_to_link_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage0_assoc_data_table_functional_traits_t> npl_stage0_assoc_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage0_assoc_data_table_functional_traits_t> npl_stage0_assoc_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage0_group_size_table_functional_traits_t> npl_stage0_group_size_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage0_group_size_table_functional_traits_t> npl_stage0_group_size_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage0_protection_table_functional_traits_t> npl_stage0_protection_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage0_protection_table_functional_traits_t> npl_stage0_protection_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage0_type_decoding_table_functional_traits_t> npl_stage0_type_decoding_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage0_type_decoding_table_functional_traits_t> npl_stage0_type_decoding_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage1_assoc_data_table_functional_traits_t> npl_stage1_assoc_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage1_assoc_data_table_functional_traits_t> npl_stage1_assoc_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage1_group_size_table_functional_traits_t> npl_stage1_group_size_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage1_group_size_table_functional_traits_t> npl_stage1_group_size_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage1_protection_table_functional_traits_t> npl_stage1_protection_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage1_protection_table_functional_traits_t> npl_stage1_protection_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage1_type_decoding_table_functional_traits_t> npl_stage1_type_decoding_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage1_type_decoding_table_functional_traits_t> npl_stage1_type_decoding_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage2_assoc_data_table_functional_traits_t> npl_stage2_assoc_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage2_assoc_data_table_functional_traits_t> npl_stage2_assoc_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage2_group_size_table_functional_traits_t> npl_stage2_group_size_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage2_group_size_table_functional_traits_t> npl_stage2_group_size_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage2_protection_table_functional_traits_t> npl_stage2_protection_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage2_protection_table_functional_traits_t> npl_stage2_protection_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage2_type_decoding_table_functional_traits_t> npl_stage2_type_decoding_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage2_type_decoding_table_functional_traits_t> npl_stage2_type_decoding_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage3_assoc_data_table_functional_traits_t> npl_stage3_assoc_data_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage3_assoc_data_table_functional_traits_t> npl_stage3_assoc_data_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage3_group_size_table_functional_traits_t> npl_stage3_group_size_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage3_group_size_table_functional_traits_t> npl_stage3_group_size_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage3_protection_table_functional_traits_t> npl_stage3_protection_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage3_protection_table_functional_traits_t> npl_stage3_protection_table_ra_empty_direct_translator;


ra_direct_translator<npl_stage3_type_decoding_table_functional_traits_t> npl_stage3_type_decoding_table_ra_direct_translator;


ra_empty_direct_translator<npl_stage3_type_decoding_table_functional_traits_t> npl_stage3_type_decoding_table_ra_empty_direct_translator;


ra_direct_translator<npl_term_to_fwd_hdr_shift_table_functional_traits_t> npl_term_to_fwd_hdr_shift_table_ra_direct_translator;


ra_empty_direct_translator<npl_term_to_fwd_hdr_shift_table_functional_traits_t> npl_term_to_fwd_hdr_shift_table_ra_empty_direct_translator;


ra_direct_translator<npl_termination_to_forwarding_fi_hardwired_table_functional_traits_t> npl_termination_to_forwarding_fi_hardwired_table_ra_direct_translator;


ra_empty_direct_translator<npl_termination_to_forwarding_fi_hardwired_table_functional_traits_t> npl_termination_to_forwarding_fi_hardwired_table_ra_empty_direct_translator;


ra_direct_translator<npl_tm_ibm_cmd_to_destination_functional_traits_t> npl_tm_ibm_cmd_to_destination_ra_direct_translator;


ra_empty_direct_translator<npl_tm_ibm_cmd_to_destination_functional_traits_t> npl_tm_ibm_cmd_to_destination_ra_empty_direct_translator;


ra_direct_translator<npl_ts_cmd_hw_static_table_functional_traits_t> npl_ts_cmd_hw_static_table_ra_direct_translator;


ra_empty_direct_translator<npl_ts_cmd_hw_static_table_functional_traits_t> npl_ts_cmd_hw_static_table_ra_empty_direct_translator;


ra_direct_translator<npl_tx_counters_bank_id_map_config_functional_traits_t> npl_tx_counters_bank_id_map_config_ra_direct_translator;


ra_empty_direct_translator<npl_tx_counters_bank_id_map_config_functional_traits_t> npl_tx_counters_bank_id_map_config_ra_empty_direct_translator;


ra_direct_translator<npl_tx_counters_block_config_table_functional_traits_t> npl_tx_counters_block_config_table_ra_direct_translator;


ra_empty_direct_translator<npl_tx_counters_block_config_table_functional_traits_t> npl_tx_counters_block_config_table_ra_empty_direct_translator;


ra_direct_translator<npl_tx_punt_eth_encap_table_functional_traits_t> npl_tx_punt_eth_encap_table_ra_direct_translator;


ra_empty_direct_translator<npl_tx_punt_eth_encap_table_functional_traits_t> npl_tx_punt_eth_encap_table_ra_empty_direct_translator;


ra_direct_translator<npl_txpdr_mc_list_size_table_functional_traits_t> npl_txpdr_mc_list_size_table_ra_direct_translator;


ra_empty_direct_translator<npl_txpdr_mc_list_size_table_functional_traits_t> npl_txpdr_mc_list_size_table_ra_empty_direct_translator;


ra_direct_translator<npl_txpdr_tc_map_table_functional_traits_t> npl_txpdr_tc_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_txpdr_tc_map_table_functional_traits_t> npl_txpdr_tc_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_txpp_dlp_profile_key_construct_parameters_table_functional_traits_t> npl_txpp_dlp_profile_key_construct_parameters_table_ra_direct_translator;


ra_empty_direct_translator<npl_txpp_dlp_profile_key_construct_parameters_table_functional_traits_t> npl_txpp_dlp_profile_key_construct_parameters_table_ra_empty_direct_translator;


ra_direct_translator<npl_txpp_encap_qos_mapping_table_functional_traits_t> npl_txpp_encap_qos_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_txpp_encap_qos_mapping_table_functional_traits_t> npl_txpp_encap_qos_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_txpp_first_enc_type_to_second_enc_type_offset_functional_traits_t> npl_txpp_first_enc_type_to_second_enc_type_offset_ra_direct_translator;


ra_empty_direct_translator<npl_txpp_first_enc_type_to_second_enc_type_offset_functional_traits_t> npl_txpp_first_enc_type_to_second_enc_type_offset_ra_empty_direct_translator;


ra_direct_translator<npl_txpp_fwd_qos_mapping_table_functional_traits_t> npl_txpp_fwd_qos_mapping_table_ra_direct_translator;


ra_empty_direct_translator<npl_txpp_fwd_qos_mapping_table_functional_traits_t> npl_txpp_fwd_qos_mapping_table_ra_empty_direct_translator;


ra_direct_translator<npl_txpp_ibm_enables_table_functional_traits_t> npl_txpp_ibm_enables_table_ra_direct_translator;


ra_empty_direct_translator<npl_txpp_ibm_enables_table_functional_traits_t> npl_txpp_ibm_enables_table_ra_empty_direct_translator;


ra_direct_translator<npl_uc_ibm_tc_map_table_functional_traits_t> npl_uc_ibm_tc_map_table_ra_direct_translator;


ra_empty_direct_translator<npl_uc_ibm_tc_map_table_functional_traits_t> npl_uc_ibm_tc_map_table_ra_empty_direct_translator;


ra_direct_translator<npl_vlan_edit_tpid1_profile_hw_table_functional_traits_t> npl_vlan_edit_tpid1_profile_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_vlan_edit_tpid1_profile_hw_table_functional_traits_t> npl_vlan_edit_tpid1_profile_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_vlan_edit_tpid2_profile_hw_table_functional_traits_t> npl_vlan_edit_tpid2_profile_hw_table_ra_direct_translator;


ra_empty_direct_translator<npl_vlan_edit_tpid2_profile_hw_table_functional_traits_t> npl_vlan_edit_tpid2_profile_hw_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_functional_traits_t> npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_functional_traits_t> npl_voq_cgm_slice_buffers_consumption_lut_for_deq_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_functional_traits_t> npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_functional_traits_t> npl_voq_cgm_slice_buffers_consumption_lut_for_enq_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_drop_green_probability_selector_table_functional_traits_t> npl_voq_cgm_slice_drop_green_probability_selector_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_drop_green_probability_selector_table_functional_traits_t> npl_voq_cgm_slice_drop_green_probability_selector_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_drop_yellow_probability_selector_table_functional_traits_t> npl_voq_cgm_slice_drop_yellow_probability_selector_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_drop_yellow_probability_selector_table_functional_traits_t> npl_voq_cgm_slice_drop_yellow_probability_selector_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_functional_traits_t> npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_functional_traits_t> npl_voq_cgm_slice_evicted_buffers_consumption_lut_for_enq_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_functional_traits_t> npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_functional_traits_t> npl_voq_cgm_slice_eviction_ok_lut_for_enq_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_mark_probability_selector_table_functional_traits_t> npl_voq_cgm_slice_mark_probability_selector_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_mark_probability_selector_table_functional_traits_t> npl_voq_cgm_slice_mark_probability_selector_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_functional_traits_t> npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_functional_traits_t> npl_voq_cgm_slice_pd_consumption_lut_for_deq_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_functional_traits_t> npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_functional_traits_t> npl_voq_cgm_slice_pd_consumption_lut_for_enq_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_profile_buff_region_thresholds_table_functional_traits_t> npl_voq_cgm_slice_profile_buff_region_thresholds_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_profile_buff_region_thresholds_table_functional_traits_t> npl_voq_cgm_slice_profile_buff_region_thresholds_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_functional_traits_t> npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_functional_traits_t> npl_voq_cgm_slice_profile_pkt_enq_time_region_thresholds_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_profile_pkt_region_thresholds_table_functional_traits_t> npl_voq_cgm_slice_profile_pkt_region_thresholds_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_profile_pkt_region_thresholds_table_functional_traits_t> npl_voq_cgm_slice_profile_pkt_region_thresholds_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_slice_slice_cgm_profile_table_functional_traits_t> npl_voq_cgm_slice_slice_cgm_profile_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_slice_slice_cgm_profile_table_functional_traits_t> npl_voq_cgm_slice_slice_cgm_profile_table_ra_empty_direct_translator;


ra_direct_translator<npl_voq_cgm_wred_probability_table_functional_traits_t> npl_voq_cgm_wred_probability_table_ra_direct_translator;


ra_empty_direct_translator<npl_voq_cgm_wred_probability_table_functional_traits_t> npl_voq_cgm_wred_probability_table_ra_empty_direct_translator;


ra_em_translator<npl_additional_labels_table_functional_traits_t> npl_additional_labels_table_ra_em_translator;


ra_empty_direct_translator<npl_additional_labels_table_functional_traits_t> npl_additional_labels_table_ra_empty_direct_translator;


ra_em_translator<npl_bfd_rx_table_functional_traits_t> npl_bfd_rx_table_ra_em_translator;


ra_empty_direct_translator<npl_bfd_rx_table_functional_traits_t> npl_bfd_rx_table_ra_empty_direct_translator;


ra_em_translator<npl_em_mp_table_functional_traits_t> npl_em_mp_table_ra_em_translator;


ra_empty_direct_translator<npl_em_mp_table_functional_traits_t> npl_em_mp_table_ra_empty_direct_translator;


ra_em_translator<npl_flc_db_table_functional_traits_t> npl_flc_db_table_ra_em_translator;


ra_empty_direct_translator<npl_flc_db_table_functional_traits_t> npl_flc_db_table_ra_empty_direct_translator;


ra_em_translator<npl_fwd_destination_to_tm_result_data_functional_traits_t> npl_fwd_destination_to_tm_result_data_ra_em_translator;


ra_empty_direct_translator<npl_fwd_destination_to_tm_result_data_functional_traits_t> npl_fwd_destination_to_tm_result_data_ra_empty_direct_translator;


ra_em_translator<npl_inject_down_tx_redirect_counter_table_functional_traits_t> npl_inject_down_tx_redirect_counter_table_ra_em_translator;


ra_empty_direct_translator<npl_inject_down_tx_redirect_counter_table_functional_traits_t> npl_inject_down_tx_redirect_counter_table_ra_empty_direct_translator;


ra_em_translator<npl_inject_up_pif_ifg_init_data_table_functional_traits_t> npl_inject_up_pif_ifg_init_data_table_ra_em_translator;


ra_empty_direct_translator<npl_inject_up_pif_ifg_init_data_table_functional_traits_t> npl_inject_up_pif_ifg_init_data_table_ra_empty_direct_translator;


ra_em_translator<npl_inject_up_ssp_init_data_table_functional_traits_t> npl_inject_up_ssp_init_data_table_ra_em_translator;


ra_empty_direct_translator<npl_inject_up_ssp_init_data_table_functional_traits_t> npl_inject_up_ssp_init_data_table_ra_empty_direct_translator;


ra_em_translator<npl_ip_prefix_destination_table_functional_traits_t> npl_ip_prefix_destination_table_ra_em_translator;


ra_empty_direct_translator<npl_ip_prefix_destination_table_functional_traits_t> npl_ip_prefix_destination_table_ra_empty_direct_translator;


ra_em_translator<npl_ip_relay_to_vni_table_functional_traits_t> npl_ip_relay_to_vni_table_ra_em_translator;


ra_empty_direct_translator<npl_ip_relay_to_vni_table_functional_traits_t> npl_ip_relay_to_vni_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_functional_traits_t> npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_functional_traits_t> npl_ipv4_ip_tunnel_termination_dip_index_tt0_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv4_ip_tunnel_termination_dip_tt0_table_functional_traits_t> npl_ipv4_ip_tunnel_termination_dip_tt0_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv4_ip_tunnel_termination_dip_tt0_table_functional_traits_t> npl_ipv4_ip_tunnel_termination_dip_tt0_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_functional_traits_t> npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_functional_traits_t> npl_ipv4_ip_tunnel_termination_sip_dip_index_tt0_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_functional_traits_t> npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_functional_traits_t> npl_ipv4_ip_tunnel_termination_sip_dip_index_tt1_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv4_og_pcl_em_table_functional_traits_t> npl_ipv4_og_pcl_em_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv4_og_pcl_em_table_functional_traits_t> npl_ipv4_og_pcl_em_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv4_sgt_em_table_functional_traits_t> npl_ipv4_sgt_em_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv4_sgt_em_table_functional_traits_t> npl_ipv4_sgt_em_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv4_vrf_dip_em_table_functional_traits_t> npl_ipv4_vrf_dip_em_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv4_vrf_dip_em_table_functional_traits_t> npl_ipv4_vrf_dip_em_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv4_vrf_s_g_table_functional_traits_t> npl_ipv4_vrf_s_g_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv4_vrf_s_g_table_functional_traits_t> npl_ipv4_vrf_s_g_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv6_og_pcl_em_table_functional_traits_t> npl_ipv6_og_pcl_em_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv6_og_pcl_em_table_functional_traits_t> npl_ipv6_og_pcl_em_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv6_sgt_em_table_functional_traits_t> npl_ipv6_sgt_em_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv6_sgt_em_table_functional_traits_t> npl_ipv6_sgt_em_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv6_vrf_dip_em_table_functional_traits_t> npl_ipv6_vrf_dip_em_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv6_vrf_dip_em_table_functional_traits_t> npl_ipv6_vrf_dip_em_table_ra_empty_direct_translator;


ra_em_translator<npl_ipv6_vrf_s_g_table_functional_traits_t> npl_ipv6_vrf_s_g_table_ra_em_translator;


ra_empty_direct_translator<npl_ipv6_vrf_s_g_table_functional_traits_t> npl_ipv6_vrf_s_g_table_ra_empty_direct_translator;


ra_em_translator<npl_l2_dlp_table_functional_traits_t> npl_l2_dlp_table_ra_em_translator;


ra_empty_direct_translator<npl_l2_dlp_table_functional_traits_t> npl_l2_dlp_table_ra_empty_direct_translator;


ra_em_translator<npl_l3_dlp_table_functional_traits_t> npl_l3_dlp_table_ra_em_translator;


ra_empty_direct_translator<npl_l3_dlp_table_functional_traits_t> npl_l3_dlp_table_ra_empty_direct_translator;


ra_em_translator<npl_large_encap_global_lsp_prefix_table_functional_traits_t> npl_large_encap_global_lsp_prefix_table_ra_em_translator;


ra_empty_direct_translator<npl_large_encap_global_lsp_prefix_table_functional_traits_t> npl_large_encap_global_lsp_prefix_table_ra_empty_direct_translator;


ra_em_translator<npl_large_encap_ip_tunnel_table_functional_traits_t> npl_large_encap_ip_tunnel_table_ra_em_translator;


ra_empty_direct_translator<npl_large_encap_ip_tunnel_table_functional_traits_t> npl_large_encap_ip_tunnel_table_ra_empty_direct_translator;


ra_em_translator<npl_large_encap_mpls_he_no_ldp_table_functional_traits_t> npl_large_encap_mpls_he_no_ldp_table_ra_em_translator;


ra_empty_direct_translator<npl_large_encap_mpls_he_no_ldp_table_functional_traits_t> npl_large_encap_mpls_he_no_ldp_table_ra_empty_direct_translator;


ra_em_translator<npl_large_encap_mpls_ldp_over_te_table_functional_traits_t> npl_large_encap_mpls_ldp_over_te_table_ra_em_translator;


ra_empty_direct_translator<npl_large_encap_mpls_ldp_over_te_table_functional_traits_t> npl_large_encap_mpls_ldp_over_te_table_ra_empty_direct_translator;


ra_em_translator<npl_large_encap_te_he_tunnel_id_table_functional_traits_t> npl_large_encap_te_he_tunnel_id_table_ra_em_translator;


ra_empty_direct_translator<npl_large_encap_te_he_tunnel_id_table_functional_traits_t> npl_large_encap_te_he_tunnel_id_table_ra_empty_direct_translator;


ra_em_translator<npl_lp_over_lag_table_functional_traits_t> npl_lp_over_lag_table_ra_em_translator;


ra_empty_direct_translator<npl_lp_over_lag_table_functional_traits_t> npl_lp_over_lag_table_ra_empty_direct_translator;


ra_em_translator<npl_mac_forwarding_table_functional_traits_t> npl_mac_forwarding_table_ra_em_translator;


ra_empty_direct_translator<npl_mac_forwarding_table_functional_traits_t> npl_mac_forwarding_table_ra_empty_direct_translator;


ra_em_translator<npl_mac_forwarding_w_metadata_table_functional_traits_t> npl_mac_forwarding_w_metadata_table_ra_em_translator;


ra_empty_direct_translator<npl_mac_forwarding_w_metadata_table_functional_traits_t> npl_mac_forwarding_w_metadata_table_ra_empty_direct_translator;


ra_em_translator<npl_mac_mc_em_termination_attributes_table_functional_traits_t> npl_mac_mc_em_termination_attributes_table_ra_em_translator;


ra_empty_direct_translator<npl_mac_mc_em_termination_attributes_table_functional_traits_t> npl_mac_mc_em_termination_attributes_table_ra_empty_direct_translator;


ra_em_translator<npl_mac_relay_g_ipv4_table_functional_traits_t> npl_mac_relay_g_ipv4_table_ra_em_translator;


ra_empty_direct_translator<npl_mac_relay_g_ipv4_table_functional_traits_t> npl_mac_relay_g_ipv4_table_ra_empty_direct_translator;


ra_em_translator<npl_mac_relay_g_ipv6_table_functional_traits_t> npl_mac_relay_g_ipv6_table_ra_em_translator;


ra_empty_direct_translator<npl_mac_relay_g_ipv6_table_functional_traits_t> npl_mac_relay_g_ipv6_table_ra_empty_direct_translator;


ra_em_translator<npl_mac_relay_to_vni_table_functional_traits_t> npl_mac_relay_to_vni_table_ra_em_translator;


ra_empty_direct_translator<npl_mac_relay_to_vni_table_functional_traits_t> npl_mac_relay_to_vni_table_ra_empty_direct_translator;


ra_em_translator<npl_mac_termination_em_table_functional_traits_t> npl_mac_termination_em_table_ra_em_translator;


ra_empty_direct_translator<npl_mac_termination_em_table_functional_traits_t> npl_mac_termination_em_table_ra_empty_direct_translator;


ra_em_translator<npl_mac_termination_no_da_em_table_functional_traits_t> npl_mac_termination_no_da_em_table_ra_em_translator;


ra_empty_direct_translator<npl_mac_termination_no_da_em_table_functional_traits_t> npl_mac_termination_no_da_em_table_ra_empty_direct_translator;


ra_em_translator<npl_mc_em_db_functional_traits_t> npl_mc_em_db_ra_em_translator;


ra_empty_direct_translator<npl_mc_em_db_functional_traits_t> npl_mc_em_db_ra_empty_direct_translator;


ra_em_translator<npl_mpls_forwarding_table_functional_traits_t> npl_mpls_forwarding_table_ra_em_translator;


ra_empty_direct_translator<npl_mpls_forwarding_table_functional_traits_t> npl_mpls_forwarding_table_ra_empty_direct_translator;


ra_em_translator<npl_mpls_termination_em0_table_functional_traits_t> npl_mpls_termination_em0_table_ra_em_translator;


ra_empty_direct_translator<npl_mpls_termination_em0_table_functional_traits_t> npl_mpls_termination_em0_table_ra_empty_direct_translator;


ra_em_translator<npl_mpls_termination_em1_table_functional_traits_t> npl_mpls_termination_em1_table_ra_em_translator;


ra_empty_direct_translator<npl_mpls_termination_em1_table_functional_traits_t> npl_mpls_termination_em1_table_ra_empty_direct_translator;


ra_em_translator<npl_overlay_ipv4_sip_table_functional_traits_t> npl_overlay_ipv4_sip_table_ra_em_translator;


ra_empty_direct_translator<npl_overlay_ipv4_sip_table_functional_traits_t> npl_overlay_ipv4_sip_table_ra_empty_direct_translator;


ra_em_translator<npl_per_asbr_and_dpe_table_functional_traits_t> npl_per_asbr_and_dpe_table_ra_em_translator;


ra_empty_direct_translator<npl_per_asbr_and_dpe_table_functional_traits_t> npl_per_asbr_and_dpe_table_ra_empty_direct_translator;


ra_em_translator<npl_per_pe_and_prefix_vpn_key_large_table_functional_traits_t> npl_per_pe_and_prefix_vpn_key_large_table_ra_em_translator;


ra_empty_direct_translator<npl_per_pe_and_prefix_vpn_key_large_table_functional_traits_t> npl_per_pe_and_prefix_vpn_key_large_table_ra_empty_direct_translator;


ra_em_translator<npl_per_pe_and_vrf_vpn_key_large_table_functional_traits_t> npl_per_pe_and_vrf_vpn_key_large_table_ra_em_translator;


ra_empty_direct_translator<npl_per_pe_and_vrf_vpn_key_large_table_functional_traits_t> npl_per_pe_and_vrf_vpn_key_large_table_ra_empty_direct_translator;


ra_em_translator<npl_per_vrf_mpls_forwarding_table_functional_traits_t> npl_per_vrf_mpls_forwarding_table_ra_em_translator;


ra_empty_direct_translator<npl_per_vrf_mpls_forwarding_table_functional_traits_t> npl_per_vrf_mpls_forwarding_table_ra_empty_direct_translator;


ra_em_translator<npl_pfc_destination_table_functional_traits_t> npl_pfc_destination_table_ra_em_translator;


ra_empty_direct_translator<npl_pfc_destination_table_functional_traits_t> npl_pfc_destination_table_ra_empty_direct_translator;


ra_em_translator<npl_punt_tunnel_transport_encap_table_functional_traits_t> npl_punt_tunnel_transport_encap_table_ra_em_translator;


ra_empty_direct_translator<npl_punt_tunnel_transport_encap_table_functional_traits_t> npl_punt_tunnel_transport_encap_table_ra_empty_direct_translator;


ra_em_translator<npl_punt_tunnel_transport_extended_encap_table_functional_traits_t> npl_punt_tunnel_transport_extended_encap_table_ra_em_translator;


ra_empty_direct_translator<npl_punt_tunnel_transport_extended_encap_table_functional_traits_t> npl_punt_tunnel_transport_extended_encap_table_ra_empty_direct_translator;


ra_em_translator<npl_pwe_label_table_functional_traits_t> npl_pwe_label_table_ra_em_translator;


ra_empty_direct_translator<npl_pwe_label_table_functional_traits_t> npl_pwe_label_table_ra_empty_direct_translator;


ra_em_translator<npl_pwe_to_l3_dest_table_functional_traits_t> npl_pwe_to_l3_dest_table_ra_em_translator;


ra_empty_direct_translator<npl_pwe_to_l3_dest_table_functional_traits_t> npl_pwe_to_l3_dest_table_ra_empty_direct_translator;


ra_em_translator<npl_pwe_vpls_label_table_functional_traits_t> npl_pwe_vpls_label_table_ra_em_translator;


ra_empty_direct_translator<npl_pwe_vpls_label_table_functional_traits_t> npl_pwe_vpls_label_table_ra_empty_direct_translator;


ra_em_translator<npl_pwe_vpls_tunnel_label_table_functional_traits_t> npl_pwe_vpls_tunnel_label_table_ra_em_translator;


ra_empty_direct_translator<npl_pwe_vpls_tunnel_label_table_functional_traits_t> npl_pwe_vpls_tunnel_label_table_ra_empty_direct_translator;


ra_em_translator<npl_rx_obm_punt_src_and_code_table_functional_traits_t> npl_rx_obm_punt_src_and_code_table_ra_em_translator;


ra_empty_direct_translator<npl_rx_obm_punt_src_and_code_table_functional_traits_t> npl_rx_obm_punt_src_and_code_table_ra_empty_direct_translator;


ra_em_translator<npl_service_mapping_em0_ac_port_table_functional_traits_t> npl_service_mapping_em0_ac_port_table_ra_em_translator;


ra_empty_direct_translator<npl_service_mapping_em0_ac_port_table_functional_traits_t> npl_service_mapping_em0_ac_port_table_ra_empty_direct_translator;


ra_em_translator<npl_service_mapping_em0_ac_port_tag_table_functional_traits_t> npl_service_mapping_em0_ac_port_tag_table_ra_em_translator;


ra_empty_direct_translator<npl_service_mapping_em0_ac_port_tag_table_functional_traits_t> npl_service_mapping_em0_ac_port_tag_table_ra_empty_direct_translator;


ra_em_translator<npl_service_mapping_em0_ac_port_tag_tag_table_functional_traits_t> npl_service_mapping_em0_ac_port_tag_tag_table_ra_em_translator;


ra_empty_direct_translator<npl_service_mapping_em0_ac_port_tag_tag_table_functional_traits_t> npl_service_mapping_em0_ac_port_tag_tag_table_ra_empty_direct_translator;


ra_em_translator<npl_service_mapping_em0_pwe_tag_table_functional_traits_t> npl_service_mapping_em0_pwe_tag_table_ra_em_translator;


ra_empty_direct_translator<npl_service_mapping_em0_pwe_tag_table_functional_traits_t> npl_service_mapping_em0_pwe_tag_table_ra_empty_direct_translator;


ra_em_translator<npl_service_mapping_em1_ac_port_tag_table_functional_traits_t> npl_service_mapping_em1_ac_port_tag_table_ra_em_translator;


ra_empty_direct_translator<npl_service_mapping_em1_ac_port_tag_table_functional_traits_t> npl_service_mapping_em1_ac_port_tag_table_ra_empty_direct_translator;


ra_em_translator<npl_sgt_matrix_table_functional_traits_t> npl_sgt_matrix_table_ra_em_translator;


ra_empty_direct_translator<npl_sgt_matrix_table_functional_traits_t> npl_sgt_matrix_table_ra_empty_direct_translator;


ra_em_translator<npl_slp_based_forwarding_table_functional_traits_t> npl_slp_based_forwarding_table_ra_em_translator;


ra_empty_direct_translator<npl_slp_based_forwarding_table_functional_traits_t> npl_slp_based_forwarding_table_ra_empty_direct_translator;


ra_em_translator<npl_small_encap_mpls_he_asbr_table_functional_traits_t> npl_small_encap_mpls_he_asbr_table_ra_em_translator;


ra_empty_direct_translator<npl_small_encap_mpls_he_asbr_table_functional_traits_t> npl_small_encap_mpls_he_asbr_table_ra_empty_direct_translator;


ra_em_translator<npl_small_encap_mpls_he_te_table_functional_traits_t> npl_small_encap_mpls_he_te_table_ra_em_translator;


ra_empty_direct_translator<npl_small_encap_mpls_he_te_table_functional_traits_t> npl_small_encap_mpls_he_te_table_ra_empty_direct_translator;


ra_em_translator<npl_stage0_em_table_functional_traits_t> npl_stage0_em_table_ra_em_translator;


ra_empty_direct_translator<npl_stage0_em_table_functional_traits_t> npl_stage0_em_table_ra_empty_direct_translator;


ra_em_translator<npl_stage1_em_table_functional_traits_t> npl_stage1_em_table_ra_em_translator;


ra_empty_direct_translator<npl_stage1_em_table_functional_traits_t> npl_stage1_em_table_ra_empty_direct_translator;


ra_em_translator<npl_stage2_em_table_functional_traits_t> npl_stage2_em_table_ra_em_translator;


ra_empty_direct_translator<npl_stage2_em_table_functional_traits_t> npl_stage2_em_table_ra_empty_direct_translator;


ra_em_translator<npl_stage3_em_table_functional_traits_t> npl_stage3_em_table_ra_em_translator;


ra_empty_direct_translator<npl_stage3_em_table_functional_traits_t> npl_stage3_em_table_ra_empty_direct_translator;


ra_em_translator<npl_tx_redirect_code_table_functional_traits_t> npl_tx_redirect_code_table_ra_em_translator;


ra_empty_direct_translator<npl_tx_redirect_code_table_functional_traits_t> npl_tx_redirect_code_table_ra_empty_direct_translator;


ra_em_translator<npl_txpp_em_dlp_profile_mapping_table_functional_traits_t> npl_txpp_em_dlp_profile_mapping_table_ra_em_translator;


ra_empty_direct_translator<npl_txpp_em_dlp_profile_mapping_table_functional_traits_t> npl_txpp_em_dlp_profile_mapping_table_ra_empty_direct_translator;


ra_em_translator<npl_vni_table_functional_traits_t> npl_vni_table_ra_em_translator;


ra_empty_direct_translator<npl_vni_table_functional_traits_t> npl_vni_table_ra_empty_direct_translator;


ra_em_translator<npl_vsid_table_functional_traits_t> npl_vsid_table_ra_em_translator;


ra_empty_direct_translator<npl_vsid_table_functional_traits_t> npl_vsid_table_ra_empty_direct_translator;


ra_em_translator<npl_vxlan_l2_dlp_table_functional_traits_t> npl_vxlan_l2_dlp_table_ra_em_translator;


ra_empty_direct_translator<npl_vxlan_l2_dlp_table_functional_traits_t> npl_vxlan_l2_dlp_table_ra_empty_direct_translator;


ra_ternary_translator<npl_default_egress_ipv4_sec_acl_table_functional_traits_t> npl_default_egress_ipv4_sec_acl_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_default_egress_ipv4_sec_acl_table_functional_traits_t> npl_default_egress_ipv4_sec_acl_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_default_egress_ipv6_acl_sec_table_functional_traits_t> npl_default_egress_ipv6_acl_sec_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_default_egress_ipv6_acl_sec_table_functional_traits_t> npl_default_egress_ipv6_acl_sec_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_egress_mac_ipv4_sec_acl_table_functional_traits_t> npl_egress_mac_ipv4_sec_acl_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_egress_mac_ipv4_sec_acl_table_functional_traits_t> npl_egress_mac_ipv4_sec_acl_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_eth_fi_core_tcam_table_functional_traits_t> npl_eth_fi_core_tcam_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_eth_fi_core_tcam_table_functional_traits_t> npl_eth_fi_core_tcam_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_fi_core_tcam_table_functional_traits_t> npl_fi_core_tcam_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_fi_core_tcam_table_functional_traits_t> npl_fi_core_tcam_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_flc_header_types_array_table_functional_traits_t> npl_flc_header_types_array_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_flc_header_types_array_table_functional_traits_t> npl_flc_header_types_array_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_eth_db1_160_f0_table_functional_traits_t> npl_ingress_rtf_eth_db1_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_eth_db1_160_f0_table_functional_traits_t> npl_ingress_rtf_eth_db1_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_eth_db2_160_f0_table_functional_traits_t> npl_ingress_rtf_eth_db2_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_eth_db2_160_f0_table_functional_traits_t> npl_ingress_rtf_eth_db2_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db1_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db1_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db1_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db1_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db1_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv4_db1_160_f1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db1_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv4_db1_160_f1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db1_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db1_320_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db1_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db1_320_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db2_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db2_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db2_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db2_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db2_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv4_db2_160_f1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db2_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv4_db2_160_f1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db2_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db2_320_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db2_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db2_320_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db3_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db3_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db3_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db3_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db3_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv4_db3_160_f1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db3_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv4_db3_160_f1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db3_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db3_320_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db3_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db3_320_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db4_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db4_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db4_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db4_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db4_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv4_db4_160_f1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db4_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv4_db4_160_f1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv4_db4_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db4_320_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv4_db4_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv4_db4_320_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db1_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db1_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db1_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db1_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db1_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv6_db1_160_f1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db1_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv6_db1_160_f1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db1_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db1_320_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db1_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db1_320_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db2_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db2_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db2_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db2_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db2_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv6_db2_160_f1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db2_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv6_db2_160_f1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db2_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db2_320_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db2_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db2_320_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db3_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db3_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db3_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db3_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db3_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv6_db3_160_f1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db3_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv6_db3_160_f1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db3_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db3_320_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db3_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db3_320_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db4_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db4_160_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db4_160_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db4_160_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db4_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv6_db4_160_f1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db4_160_f1_table_functional_traits_t> npl_ingress_rtf_ipv6_db4_160_f1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ingress_rtf_ipv6_db4_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db4_320_f0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ingress_rtf_ipv6_db4_320_f0_table_functional_traits_t> npl_ingress_rtf_ipv6_db4_320_f0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ip_fi_core_tcam_table_functional_traits_t> npl_ip_fi_core_tcam_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ip_fi_core_tcam_table_functional_traits_t> npl_ip_fi_core_tcam_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ipv4_lpts_table_functional_traits_t> npl_ipv4_lpts_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ipv4_lpts_table_functional_traits_t> npl_ipv4_lpts_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ipv6_lpts_table_functional_traits_t> npl_ipv6_lpts_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ipv6_lpts_table_functional_traits_t> npl_ipv6_lpts_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_ipv6_sip_compression_table_functional_traits_t> npl_ipv6_sip_compression_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_ipv6_sip_compression_table_functional_traits_t> npl_ipv6_sip_compression_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l2_lpts_ipv4_table_functional_traits_t> npl_l2_lpts_ipv4_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l2_lpts_ipv4_table_functional_traits_t> npl_l2_lpts_ipv4_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l2_lpts_ipv6_table_functional_traits_t> npl_l2_lpts_ipv6_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l2_lpts_ipv6_table_functional_traits_t> npl_l2_lpts_ipv6_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_l2_lpts_mac_table_functional_traits_t> npl_l2_lpts_mac_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_l2_lpts_mac_table_functional_traits_t> npl_l2_lpts_mac_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_light_fi_nw_0_table_functional_traits_t> npl_light_fi_nw_0_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_light_fi_nw_0_table_functional_traits_t> npl_light_fi_nw_0_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_light_fi_nw_1_table_functional_traits_t> npl_light_fi_nw_1_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_light_fi_nw_1_table_functional_traits_t> npl_light_fi_nw_1_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_light_fi_nw_2_table_functional_traits_t> npl_light_fi_nw_2_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_light_fi_nw_2_table_functional_traits_t> npl_light_fi_nw_2_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_light_fi_nw_3_table_functional_traits_t> npl_light_fi_nw_3_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_light_fi_nw_3_table_functional_traits_t> npl_light_fi_nw_3_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_mac_mc_tcam_termination_attributes_table_functional_traits_t> npl_mac_mc_tcam_termination_attributes_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_mac_mc_tcam_termination_attributes_table_functional_traits_t> npl_mac_mc_tcam_termination_attributes_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_mac_termination_tcam_table_functional_traits_t> npl_mac_termination_tcam_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_mac_termination_tcam_table_functional_traits_t> npl_mac_termination_tcam_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_service_mapping_tcam_ac_port_table_functional_traits_t> npl_service_mapping_tcam_ac_port_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_service_mapping_tcam_ac_port_table_functional_traits_t> npl_service_mapping_tcam_ac_port_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_service_mapping_tcam_ac_port_tag_table_functional_traits_t> npl_service_mapping_tcam_ac_port_tag_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_service_mapping_tcam_ac_port_tag_table_functional_traits_t> npl_service_mapping_tcam_ac_port_tag_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_service_mapping_tcam_ac_port_tag_tag_table_functional_traits_t> npl_service_mapping_tcam_ac_port_tag_tag_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_service_mapping_tcam_ac_port_tag_tag_table_functional_traits_t> npl_service_mapping_tcam_ac_port_tag_tag_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_service_mapping_tcam_pwe_tag_table_functional_traits_t> npl_service_mapping_tcam_pwe_tag_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_service_mapping_tcam_pwe_tag_table_functional_traits_t> npl_service_mapping_tcam_pwe_tag_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_sgacl_table_functional_traits_t> npl_sgacl_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_sgacl_table_functional_traits_t> npl_sgacl_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_txpp_initial_npe_macro_table_functional_traits_t> npl_txpp_initial_npe_macro_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_txpp_initial_npe_macro_table_functional_traits_t> npl_txpp_initial_npe_macro_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_udp_fi_core_tcam_table_functional_traits_t> npl_udp_fi_core_tcam_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_udp_fi_core_tcam_table_functional_traits_t> npl_udp_fi_core_tcam_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_vlan0_fi_core_tcam_table_functional_traits_t> npl_vlan0_fi_core_tcam_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_vlan0_fi_core_tcam_table_functional_traits_t> npl_vlan0_fi_core_tcam_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_vlan1_fi_core_tcam_table_functional_traits_t> npl_vlan1_fi_core_tcam_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_vlan1_fi_core_tcam_table_functional_traits_t> npl_vlan1_fi_core_tcam_table_ra_empty_ternary_translator;


ra_ternary_translator<npl_vlan_pe_fi_core_tcam_table_functional_traits_t> npl_vlan_pe_fi_core_tcam_table_ra_ternary_translator;


ra_empty_ternary_translator<npl_vlan_pe_fi_core_tcam_table_functional_traits_t> npl_vlan_pe_fi_core_tcam_table_ra_empty_ternary_translator;


ra_lpm_translator<npl_ipv4_lpm_table_functional_traits_t> npl_ipv4_lpm_table_ra_lpm_translator;


ra_lpm_translator<npl_ipv4_og_pcl_lpm_table_functional_traits_t> npl_ipv4_og_pcl_lpm_table_ra_lpm_translator;


ra_lpm_translator<npl_ipv4_sgt_lpm_table_functional_traits_t> npl_ipv4_sgt_lpm_table_ra_lpm_translator;


ra_lpm_translator<npl_ipv6_lpm_table_functional_traits_t> npl_ipv6_lpm_table_ra_lpm_translator;


ra_lpm_translator<npl_ipv6_og_pcl_lpm_table_functional_traits_t> npl_ipv6_og_pcl_lpm_table_ra_lpm_translator;


ra_lpm_translator<npl_ipv6_sgt_lpm_table_functional_traits_t> npl_ipv6_sgt_lpm_table_ra_lpm_translator;


}; // struct translators_serialization_s
} // namespace ra

} // namespace silicon_one

#endif
