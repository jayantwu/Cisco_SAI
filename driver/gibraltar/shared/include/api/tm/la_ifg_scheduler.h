// BEGIN_LEGAL
//
// Copyright (c) 2017-current, Cisco Systems, Inc. ("Cisco"). All Rights Reserved.
//
// This file and all technical concepts, proprietary knowledge, algorithms and
// intellectual property rights it contains (collectively the "Confidential Information"),
// are the sole propriety information of Cisco and shall remain at Cisco's ownership.
// You shall not disclose the Confidential Information to any third party and you
// shall use it solely in connection with operating and/or maintaining of Cisco's
// products and pursuant to the terms and conditions of the license agreement you
// entered into with Cisco.
//
// THE SOURCE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED.
// IN NO EVENT SHALL CISCO BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
// THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// END_LEGAL

#ifndef __LA_IFG_SCHEDULER_H__
#define __LA_IFG_SCHEDULER_H__

#include "api/types/la_common_types.h"
#include "api/types/la_object.h"
#include "api/types/la_tm_types.h"

/// @file
/// @brief Leaba Interface group Scheduler API-s.
///
/// Defines API-s for managing IFG's credit and transmit scheduler's objects.

/// @addtogroup TM_SCH
/// @{

namespace silicon_one
{

/// @brief      Interface group scheduler.
///
/// @details    An Interface group scheduler defines credit and transmit priorities, weights and rate limits for the whole interface
/// group.
class la_ifg_scheduler : public la_object
{
public:
    /// @brief Get credit scheduler's rate.
    ///
    /// @deprecated This API is deprecated.
    ///
    /// Controls the rate of credits generated by the scheduler.
    ///
    /// @param[out] out_rate            Rate in bps.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_credit_rate(la_rate_t& out_rate) const = 0;

    /// @brief Set credit scheduler's rate.
    ///
    /// @deprecated This API is deprecated.
    ///
    /// Controls the rate of credits generated by the scheduler. In the Pacific the rate is implemented in gbps. Actual rate is
    /// round-down to nearest mark.
    ///
    /// @param[in]  rate                Rate in bps.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate updated successfully.
    /// @retval     LA_STATUS_EINVAL    Rate is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_credit_rate(la_rate_t rate) = 0;

    /// @brief Get transmit scheduler's rate.
    ///
    /// @deprecated This API is deprecated.
    ///
    /// @param[out]  out_rate           Rate to populate, in bps.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_transmit_rate(la_rate_t& out_rate) const = 0;

    /// @brief Set a transmit scheduler's rate.
    ///
    /// @deprecated This API is deprecated.
    ///
    /// In the Pacific the rate is implemented in gbps. Actual rate is round-down to nearest mark.
    ///
    /// @param[in]  rate                Rate to set, in bps.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate updated successfully.
    /// @retval     LA_STATUS_EINVAL    Rate is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_transmit_rate(la_rate_t rate) = 0;

    /// @brief Get credit scheduler's burst size.
    ///
    /// @deprecated This API is deprecated.
    ///
    /// Controls the number of credits provided.
    ///
    /// @param[out] out_burst           Burst size to populate.
    ///
    /// @retval     LA_STATUS_SUCCESS   Burst size retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_credit_burst_size(size_t& out_burst) const = 0;

    /// @brief Set credit scheduler's burst size.
    ///
    /// @deprecated This API is deprecated.
    ///
    /// Controls the number of credits provided.
    ///
    /// @param[in]  burst               Burst size.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate updated successfully.
    /// @retval     LA_STATUS_EINVAL    Rate is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_credit_burst_size(size_t burst) = 0;

    /// @brief Get transmit scheduler's burst size.
    ///
    /// @deprecated This API is deprecated.
    ///
    /// Controls the number of credits provided.
    ///
    /// @param[out]  out_burst          Burst size to populate.
    ///
    /// @retval     LA_STATUS_SUCCESS   Burst size retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_transmit_burst_size(size_t& out_burst) const = 0;

    /// @brief Set a transmit scheduler's burst size.
    ///
    /// @deprecated This API is deprecated.
    ///
    /// @param[in]  burst               Burst size.
    ///
    /// @retval     LA_STATUS_SUCCESS   Burst size updated successfully.
    /// @retval     LA_STATUS_EINVAL    Burst size is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_transmit_burst_size(size_t burst) = 0;

    /// @brief Set the IFG scheduler max transmit rate utilization.
    ///
    /// Controls the utilization of the IFG maximum rate (by limiting the scheduler credits generation rate accordingly).
    /// Utilization of 1.0 means full line rate and it is the default initialized value.
    ///
    /// @param[in]  max_rate_percent    Rate utilization to set, values between 0 and 1.0.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate utilization updated successfully.
    /// @retval     LA_STATUS_EINVAL    Rate utilization is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_max_transmit_rate_utilization(la_float_t max_rate_percent) = 0;

    /// @brief Get the IFG scheduler max transmit rate utilization.
    ///
    /// @param[out]  out_max_rate_percent   Rate utilization to populate.
    ///
    /// @retval     LA_STATUS_SUCCESS       Rate utilization retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN      An unknown error occurred.
    virtual la_status get_max_transmit_rate_utilization(la_float_t& out_max_rate_percent) const = 0;

    /// @brief Set the IFG scheduler max rx rate utilization.
    ///
    /// Controls the utilization of the IFG maximum receive rate (by limiting the shaper credits generation rate accordingly).
    /// Utilization of 1.0 means maximum receive rate and it is the default initialized value.
    /// Note: As the float type utilization is multiplied and rounded to integer, and for odd IFG a small shift is inserted -
    /// the actual configured utilization might be different than requested by upto 4%.
    ///
    /// @param[in]  max_rate_percent    Rate utilization to set, values between 0 and 1.0.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate utilization updated successfully.
    /// @retval     LA_STATUS_EINVAL    Rate utilization is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_max_rx_rate_utilization(la_float_t max_rate_percent) = 0;

    /// @brief Get the IFG scheduler max rx rate utilization.
    ///
    /// @param[in]  out_max_rate_percent    Rate utilization to populate.
    ///
    /// @retval     LA_STATUS_SUCCESS       Rate utilization retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN      An unknown error occurred.
    virtual la_status get_max_rx_rate_utilization(la_float_t& out_max_rate_percent) const = 0;

    /// @brief Get credit scheduler's TXPDR Committed Information Rate.
    ///
    /// @param[out]  out_rate           Rate to get, in bps.
    ///
    /// @return     status.
    /// @retval     LA_STATUS_SUCCESS   Burst size retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_txpdr_cir(la_rate_t& out_rate) const = 0;

    /// @brief Set credit's scheduler's TXPDR Committed Information Rate.
    ///
    /// In the Pacific the rate is implemented in gbps. Actual rate is round-down to nearest mark.
    ///
    /// @param[in]  rate                Rate to set, in bps.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate updated successfully.
    /// @retval     LA_STATUS_EINVAL    Rate is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_txpdr_cir(la_rate_t rate) = 0;

    /// @brief Get credit scheduler's TXPDR Excess/Peak Information Rate.
    ///
    /// Gets the mode and rate for a credit scheduler's EIR/PIR TXPDR rate limiter.
    /// Either EIR or PIR are configured, not both.
    ///
    /// @param[out]  out_rate           Rate to get, in bps.
    /// @param[out]  out_is_eir         Rate is configured as EIR if true, PIR otherwise.
    ///
    /// @return     status.
    /// @retval     LA_STATUS_SUCCESS   Burst size retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_txpdr_eir_or_pir(la_rate_t& out_rate, bool& out_is_eir) const = 0;

    /// @brief Set a credit scheduler's TXPDR Excess/Peak Information Rate.
    ///
    /// Sets the mode and rate for a credit scheduler's EIR/PIR TXPDR rate limiter.
    /// Either EIR or PIR are configured, not both.
    /// In the Pacific the rate is implemented in gbps. Actual rate is round-down to nearest mark.
    ///
    /// @param[in]  rate                Rate to set, in bps.
    /// @param[in]  is_eir              Rate is configured as EIR if true, PIR otherwise.
    ///
    /// @retval     LA_STATUS_SUCCESS   Rate updated successfully.
    /// @retval     LA_STATUS_EINVAL    Rate is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_txpdr_eir_or_pir(la_rate_t rate, bool is_eir) = 0;

    /// @brief Get credit scheduler's TXPDR Committed credits weight.
    ///
    /// When TM ports and the TXPDR compete for CIR credits, credits are distributed proportionally
    /// to each port's weight.
    ///
    /// @param[out]  out_weight         Weight to get.
    ///
    /// @return     status.
    /// @retval     LA_STATUS_SUCCESS   Burst size retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_txpdr_cir_weight(la_wfq_weight_t& out_weight) const = 0;

    /// @brief Set a credit scheduler's TXPDR Committed credits weight.
    ///
    /// When TM ports and the TXPDR compete for CIR credits, credits are distributed proportionally
    /// to each port's weight.
    ///
    /// @param[in]  weight              Weight to set.
    ///
    /// @retval     LA_STATUS_SUCCESS   Weight updated successfully.
    /// @retval     LA_STATUS_EINVAL    Weight is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_txpdr_cir_weight(la_wfq_weight_t weight) = 0;

    /// @brief Get credit scheduler's TXPDR Excess credits weight.
    ///
    /// When TM ports and the TXPDR compete for EIR credits, credits are distributed proportionally
    /// to each port's weight.
    ///
    /// @param[out]  out_weight         Weight to get.
    ///
    /// @return     status.
    /// @retval     LA_STATUS_SUCCESS   Burst size retrieved successfully.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_txpdr_eir_weight(la_wfq_weight_t& out_weight) const = 0;

    /// @brief Set a credit scheduler's TXPDR Excess credits weight.
    ///
    /// When TM ports and the TXPDR compete for EIR credits, credits are distributed proportionally
    /// to each port's weight.
    ///
    /// @param[in]  weight              Weight to set.
    ///
    /// @retval     LA_STATUS_SUCCESS   Weight updated successfully.
    /// @retval     LA_STATUS_EINVAL    Weight is unsupported.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status set_txpdr_eir_weight(la_wfq_weight_t weight) = 0;

    /// @brief Get TXPDR's high-priority output queue scheduler.
    ///
    /// @param[out] out_oq_sch          Pointer to #silicon_one::la_output_queue_scheduler to populate.
    ///
    /// @retval     LA_STATUS_SUCCESS   Operation completed successfully. out_oqcs contains the OQ scheduler.
    /// @retval     LA_STATUS_EINVAL    out_oqcs is NULL.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_txpdr_hp_oqcs(la_output_queue_scheduler*& out_oq_sch) const = 0;

    /// @brief Get TXPDR's low-priority output queue credit scheduler.
    ///
    /// @param[out] out_oq_sch          Pointer to #silicon_one::la_output_queue_scheduler to populate.
    ///
    /// @retval     LA_STATUS_SUCCESS   Operation completed successfully. out_oqcs contains the OQ credit scheduler.
    /// @retval     LA_STATUS_EINVAL    out_oqcs is NULL.
    /// @retval     LA_STATUS_EUNKNOWN  An unknown error occurred.
    virtual la_status get_txpdr_lp_oqcs(la_output_queue_scheduler*& out_oq_sch) const = 0;

protected:
    ~la_ifg_scheduler() override = default;

}; // class la_ifg_scheduler

} // namespace silicon_one

/// @}

#endif // __LA_IFG_SCHEDULER_H__
