// BEGIN_LEGAL
//
// Copyright (c) 2019-current, Cisco Systems, Inc. ("Cisco"). All Rights Reserved.
//
// This file and all technical concepts, proprietary knowledge, algorithms and
// intellectual property rights it contains (collectively the "Confidential Information"),
// are the sole propriety information of Cisco and shall remain at Cisco's ownership.
// You shall not disclose the Confidential Information to any third party and you
// shall use it solely in connection with operating and/or maintaining of Cisco's
// products and pursuant to the terms and conditions of the license agreement you
// entered into with Cisco.
//
// THE SOURCE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED.
// IN NO EVENT SHALL CISCO BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN
// AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
// THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// END_LEGAL

// Automatically generated file - don't change
// clang-format off
#include "sai_strings.h"
#include "common/gen_utils.h"
#include "sai_device.h"
#include <auto_gen_attr.h>
#include <iomanip>
#include <map>
namespace silicon_one
{
namespace sai
{
std::string
to_string(sai_acl_counter_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ACL_COUNTER_ATTR_BYTES:
      {
          auto res = get_attr_value(SAI_ACL_COUNTER_ATTR_BYTES, v);
          return to_string(res);
      }
      case SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT:
      {
          auto res = get_attr_value(SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT, v);
          return to_string(res);
      }
      case SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT:
      {
          auto res = get_attr_value(SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT, v);
          return to_string(res);
      }
      case SAI_ACL_COUNTER_ATTR_PACKETS:
      {
          auto res = get_attr_value(SAI_ACL_COUNTER_ATTR_PACKETS, v);
          return to_string(res);
      }
      case SAI_ACL_COUNTER_ATTR_TABLE_ID:
      {
          auto res = get_attr_value(SAI_ACL_COUNTER_ATTR_TABLE_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_acl_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP:
      {
          sai_acl_dtel_flow_op_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID:
      {
          sai_uint16_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI:
      {
          sai_uint8_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_COUNTER:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT:
      {
          sai_uint8_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST:
      {
          sai_object_list_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP:
      {
          sai_ip_address_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_FLOOD:
      {
          sai_int32_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_FLOOD, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS:
      {
          sai_object_list_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS:
      {
          sai_object_list_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT:
      {
          bool res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION:
      {
          sai_packet_action_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST:
      {
          sai_object_list_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA:
      {
          sai_uint32_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN:
      {
          sai_uint32_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP:
      {
          sai_uint8_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP:
      {
          sai_ip4_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6:
      {
          sai_ip6_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC:
      {
          sai_mac_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN:
      {
          sai_uint8_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID:
      {
          sai_uint32_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI:
      {
          sai_uint8_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT:
      {
          sai_uint16_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT:
      {
          sai_uint16_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID:
      {
          sai_uint16_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI:
      {
          sai_uint8_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR:
      {
          sai_packet_color_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP:
      {
          sai_ip4_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6:
      {
          sai_ip6_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC:
      {
          sai_mac_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_TC:
      {
          sai_uint8_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_TC, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT:
      {
          sai_object_id_t res;
          get_aclaction_attr_value(SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT, v, res);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_ADMIN_STATE:
      {
          auto res = get_attr_value(SAI_ACL_ENTRY_ATTR_ADMIN_STATE, v);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG:
      {
          sai_acl_ip_frag_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE:
      {
          sai_acl_ip_type_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE:
      {
          sai_u8_list_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_DSCP:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DSCP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DSCP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_DST_IP:
      {
          sai_ip4_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC:
      {
          sai_mac_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ECN:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ECN, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ECN, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP:
      {
          sai_ip4_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP:
      {
          sai_ip4_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT:
      {
          sai_uint64_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS:
      {
          sai_u8_list_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI:
      {
          sai_uint64_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT:
      {
          sai_uint64_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS:
      {
          sai_u8_list_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN:
      {
          sai_packet_vlan_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP:
      {
          sai_ip4_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3:
      {
          sai_ip6_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC:
      {
          sai_mac_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT:
      {
          sai_uint64_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE:
      {
          sai_tam_int_type_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_TC:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TC, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TC, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_TOS:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TOS, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TOS, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_TTL:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TTL, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TTL, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META:
      {
          sai_uint32_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_ACL_ENTRY_ATTR_PRIORITY:
      {
          auto res = get_attr_value(SAI_ACL_ENTRY_ATTR_PRIORITY, v);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_TABLE_ID:
      {
          auto res = get_attr_value(SAI_ACL_ENTRY_ATTR_TABLE_ID, v);
          return to_string(res);
      }
      case SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN:
      {
          sai_u8_list_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, v, res_data);
          get_mask_aclfield_attr_value(SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_acl_range_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ACL_RANGE_ATTR_LIMIT:
      {
          auto res = get_attr_value(SAI_ACL_RANGE_ATTR_LIMIT, v);
          return to_string(res);
      }
      case SAI_ACL_RANGE_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_RANGE_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_acl_table_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ACL_TABLE_ATTR_ACL_ACTION_TYPE_LIST:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_ACL_ACTION_TYPE_LIST, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_ACL_STAGE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_ACL_STAGE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_COUNTER:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_COUNTER, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_ENTRY_LIST:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_ENTRY_LIST, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_FRAG:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_FRAG, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ACL_RANGE_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ACL_RANGE_TYPE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ACL_USER_META:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ACL_USER_META, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_AETH_SYNDROME:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_AETH_SYNDROME, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_BTH_OPCODE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_BTH_OPCODE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_DSCP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_DSCP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_DST_IP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_DST_IP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD0:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD0, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD1:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD1, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_DST_MAC:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_DST_MAC, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ECN:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ECN, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_FDB_DST_USER_META:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_FDB_DST_USER_META, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_FDB_NPU_META_DST_HIT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_FDB_NPU_META_DST_HIT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_GRE_KEY:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_GRE_KEY, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_HAS_VLAN_TAG:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_HAS_VLAN_TAG, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_CODE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_CODE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ICMP_CODE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ICMP_CODE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IPV6:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IPV6, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_ETHER_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_ETHER_TYPE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_IP_PROTOCOL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_IP_PROTOCOL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_DST_PORT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_DST_PORT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_SRC_PORT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_SRC_PORT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IPV6:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IPV6, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_CFI:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_CFI, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_IN_PORT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_IN_PORTS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_IN_PORTS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_IPV6_FLOW_LABEL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_IPV6_FLOW_LABEL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_IP_FLAGS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_IP_FLAGS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_IP_IDENTIFICATION:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_IP_IDENTIFICATION, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MACSEC_SCI:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MACSEC_SCI, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_BOS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_BOS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_EXP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_EXP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_LABEL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_LABEL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_TTL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_TTL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_BOS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_BOS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_EXP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_EXP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_LABEL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_LABEL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_TTL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_TTL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_BOS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_BOS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_EXP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_EXP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_LABEL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_LABEL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_TTL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_TTL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_BOS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_BOS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_EXP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_EXP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_LABEL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_LABEL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_TTL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_TTL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_BOS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_BOS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_EXP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_EXP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_LABEL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_LABEL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_TTL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_TTL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_DST_USER_META:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_DST_USER_META, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_CFI:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_CFI, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_OUT_PORTS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_OUT_PORTS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_PACKET_VLAN:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_PACKET_VLAN, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_PORT_USER_META:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_PORT_USER_META, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_ROUTE_NPU_META_DST_HIT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_ROUTE_NPU_META_DST_HIT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_SRC_IP:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_SRC_IP, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD0:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD0, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD1:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD1, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD2:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD2, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD3:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD3, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_SRC_PORT:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_SRC_PORT, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_TAM_INT_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_TAM_INT_TYPE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_TC:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_TC, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_TCP_FLAGS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_TCP_FLAGS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_TOS:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_TOS, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_TTL:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_TTL, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_TUNNEL_VNI:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_TUNNEL_VNI, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_FIELD_VLAN_USER_META:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_FIELD_VLAN_USER_META, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_SIZE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_SIZE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_acl_table_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_GROUP_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_GROUP_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_acl_table_group_member_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID, v);
          return to_string(res);
      }
      case SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY:
      {
          auto res = get_attr_value(SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_bfd_session_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_CBIT:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_CBIT, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_DST_IP_ADDRESS:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_DST_IP_ADDRESS, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS, v, res);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_ECHO_ENABLE:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_ECHO_ENABLE, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_HW_LOOKUP_VALID:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_HW_LOOKUP_VALID, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_IPHDR_VERSION:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_IPHDR_VERSION, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_LOCAL_DIAG:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_LOCAL_DIAG, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_MIN_RX:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_MIN_RX, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_MIN_TX:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_MIN_TX, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_MULTIHOP:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_MULTIHOP, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_MULTIPLIER:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_MULTIPLIER, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_NEGOTIATED_RX:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_NEGOTIATED_RX, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_NEGOTIATED_TX:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_NEGOTIATED_TX, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_OFFLOAD_TYPE:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_OFFLOAD_TYPE, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_PORT:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_PORT, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_REMOTE_DIAG:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_REMOTE_DIAG, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_REMOTE_MIN_RX:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_REMOTE_MIN_RX, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_REMOTE_MIN_TX:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_REMOTE_MIN_TX, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_REMOTE_MULTIPLIER:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_REMOTE_MULTIPLIER, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_SRC_IP_ADDRESS:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_SRC_IP_ADDRESS, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS, v, res);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_STATE:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_STATE, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_TC:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_TC, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_TOS:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_TOS, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_TTL:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_TTL, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_TUNNEL_TOS:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_TUNNEL_TOS, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_TUNNEL_TTL:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_TUNNEL_TTL, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_UDP_SRC_PORT:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_UDP_SRC_PORT, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_VLAN_CFI:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_VLAN_CFI, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_VLAN_HEADER_VALID:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_VLAN_HEADER_VALID, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_VLAN_ID:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_VLAN_PRI:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_VLAN_PRI, v);
          return to_string(res);
      }
      case SAI_BFD_SESSION_ATTR_VLAN_TPID:
      {
          auto res = get_attr_value(SAI_BFD_SESSION_ATTR_VLAN_TPID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_bridge_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_LEARN_DISABLE:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_LEARN_DISABLE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_PORT_LIST:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP:
      {
          auto res = get_attr_value(SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_bridge_port_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_BRIDGE_PORT_ATTR_ADMIN_STATE:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_ADMIN_STATE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_BRIDGE_ID:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_BRIDGE_ID, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_PORT_ID:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_PORT_ID, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_RIF_ID:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_RIF_ID, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_TAGGING_MODE:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_TAGGING_MODE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_TUNNEL_ID:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_TUNNEL_ID, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_BRIDGE_PORT_ATTR_VLAN_ID:
      {
          auto res = get_attr_value(SAI_BRIDGE_PORT_ATTR_VLAN_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_buffer_pool_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_BUFFER_POOL_ATTR_SHARED_SIZE:
      {
          auto res = get_attr_value(SAI_BUFFER_POOL_ATTR_SHARED_SIZE, v);
          return to_string(res);
      }
      case SAI_BUFFER_POOL_ATTR_SIZE:
      {
          auto res = get_attr_value(SAI_BUFFER_POOL_ATTR_SIZE, v);
          return to_string(res);
      }
      case SAI_BUFFER_POOL_ATTR_TAM:
      {
          auto res = get_attr_value(SAI_BUFFER_POOL_ATTR_TAM, v);
          return to_string(res);
      }
      case SAI_BUFFER_POOL_ATTR_THRESHOLD_MODE:
      {
          auto res = get_attr_value(SAI_BUFFER_POOL_ATTR_THRESHOLD_MODE, v);
          return to_string(res);
      }
      case SAI_BUFFER_POOL_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_BUFFER_POOL_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID, v);
          return to_string(res);
      }
      case SAI_BUFFER_POOL_ATTR_XOFF_SIZE:
      {
          auto res = get_attr_value(SAI_BUFFER_POOL_ATTR_XOFF_SIZE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_buffer_profile_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_BUFFER_PROFILE_ATTR_POOL_ID:
      {
          auto res = get_attr_value(SAI_BUFFER_PROFILE_ATTR_POOL_ID, v);
          return to_string(res);
      }
      case SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE:
      {
          auto res = get_attr_value(SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE, v);
          return to_string(res);
      }
      case SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH:
      {
          auto res = get_attr_value(SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH, v);
          return to_string(res);
      }
      case SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH:
      {
          auto res = get_attr_value(SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH, v);
          return to_string(res);
      }
      case SAI_BUFFER_PROFILE_ATTR_THRESHOLD_MODE:
      {
          auto res = get_attr_value(SAI_BUFFER_PROFILE_ATTR_THRESHOLD_MODE, v);
          return to_string(res);
      }
      case SAI_BUFFER_PROFILE_ATTR_XOFF_TH:
      {
          auto res = get_attr_value(SAI_BUFFER_PROFILE_ATTR_XOFF_TH, v);
          return to_string(res);
      }
      case SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH:
      {
          auto res = get_attr_value(SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH, v);
          return to_string(res);
      }
      case SAI_BUFFER_PROFILE_ATTR_XON_TH:
      {
          auto res = get_attr_value(SAI_BUFFER_PROFILE_ATTR_XON_TH, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_counter_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_COUNTER_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_COUNTER_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_debug_counter_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_DEBUG_COUNTER_ATTR_BIND_METHOD:
      {
          auto res = get_attr_value(SAI_DEBUG_COUNTER_ATTR_BIND_METHOD, v);
          return to_string(res);
      }
      case SAI_DEBUG_COUNTER_ATTR_INDEX:
      {
          auto res = get_attr_value(SAI_DEBUG_COUNTER_ATTR_INDEX, v);
          return to_string(res);
      }
      case SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST:
      {
          auto res = get_attr_value(SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST, v);
          return to_string(res);
      }
      case SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST:
      {
          auto res = get_attr_value(SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST, v);
          return to_string(res);
      }
      case SAI_DEBUG_COUNTER_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_DEBUG_COUNTER_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_dtel_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_DTEL_ATTR_DROP_REPORT_ENABLE:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_DROP_REPORT_ENABLE, v);
          return to_string(res);
      }
      case SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE, v);
          return to_string(res);
      }
      case SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE, v);
          return to_string(res);
      }
      case SAI_DTEL_ATTR_INT_L4_DSCP:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_DTEL_ATTR_INT_L4_DSCP, v, res_data);
          get_mask_aclfield_attr_value(SAI_DTEL_ATTR_INT_L4_DSCP, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_DTEL_ATTR_INT_TRANSIT_ENABLE:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_INT_TRANSIT_ENABLE, v);
          return to_string(res);
      }
      case SAI_DTEL_ATTR_LATENCY_SENSITIVITY:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_LATENCY_SENSITIVITY, v);
          return to_string(res);
      }
      case SAI_DTEL_ATTR_POSTCARD_ENABLE:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_POSTCARD_ENABLE, v);
          return to_string(res);
      }
      case SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE, v);
          return to_string(res);
      }
      case SAI_DTEL_ATTR_SINK_PORT_LIST:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_SINK_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_DTEL_ATTR_SWITCH_ID:
      {
          auto res = get_attr_value(SAI_DTEL_ATTR_SWITCH_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_dtel_event_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_DTEL_EVENT_ATTR_DSCP_VALUE:
      {
          auto res = get_attr_value(SAI_DTEL_EVENT_ATTR_DSCP_VALUE, v);
          return to_string(res);
      }
      case SAI_DTEL_EVENT_ATTR_REPORT_SESSION:
      {
          auto res = get_attr_value(SAI_DTEL_EVENT_ATTR_REPORT_SESSION, v);
          return to_string(res);
      }
      case SAI_DTEL_EVENT_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_DTEL_EVENT_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_dtel_int_session_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP:
      {
          auto res = get_attr_value(SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP, v);
          return to_string(res);
      }
      case SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP:
      {
          auto res = get_attr_value(SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP, v);
          return to_string(res);
      }
      case SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO:
      {
          auto res = get_attr_value(SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO, v);
          return to_string(res);
      }
      case SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID:
      {
          auto res = get_attr_value(SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID, v);
          return to_string(res);
      }
      case SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS:
      {
          auto res = get_attr_value(SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS, v);
          return to_string(res);
      }
      case SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT:
      {
          auto res = get_attr_value(SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_dtel_queue_report_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA:
      {
          auto res = get_attr_value(SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA, v);
          return to_string(res);
      }
      case SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD:
      {
          auto res = get_attr_value(SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD:
      {
          auto res = get_attr_value(SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_DTEL_QUEUE_REPORT_ATTR_QUEUE_ID:
      {
          auto res = get_attr_value(SAI_DTEL_QUEUE_REPORT_ATTR_QUEUE_ID, v);
          return to_string(res);
      }
      case SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP:
      {
          auto res = get_attr_value(SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_dtel_report_session_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST:
      {
          auto res = get_attr_value(SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST, v);
          return to_string(res);
      }
      case SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP:
      {
          auto res = get_attr_value(SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP, v);
          return to_string(res);
      }
      case SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE:
      {
          auto res = get_attr_value(SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE, v);
          return to_string(res);
      }
      case SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT:
      {
          auto res = get_attr_value(SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT, v);
          return to_string(res);
      }
      case SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID:
      {
          auto res = get_attr_value(SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_fdb_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE:
      {
          auto res = get_attr_value(SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE, v);
          return to_string(res);
      }
      case SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID:
      {
          auto res = get_attr_value(SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID, v);
          return to_string(res);
      }
      case SAI_FDB_ENTRY_ATTR_COUNTER_ID:
      {
          auto res = get_attr_value(SAI_FDB_ENTRY_ATTR_COUNTER_ID, v);
          return to_string(res);
      }
      case SAI_FDB_ENTRY_ATTR_META_DATA:
      {
          auto res = get_attr_value(SAI_FDB_ENTRY_ATTR_META_DATA, v);
          return to_string(res);
      }
      case SAI_FDB_ENTRY_ATTR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_FDB_ENTRY_ATTR_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_FDB_ENTRY_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_FDB_ENTRY_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_FDB_ENTRY_ATTR_USER_TRAP_ID:
      {
          auto res = get_attr_value(SAI_FDB_ENTRY_ATTR_USER_TRAP_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_fdb_flush_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_FDB_FLUSH_ATTR_BRIDGE_PORT_ID:
      {
          auto res = get_attr_value(SAI_FDB_FLUSH_ATTR_BRIDGE_PORT_ID, v);
          return to_string(res);
      }
      case SAI_FDB_FLUSH_ATTR_BV_ID:
      {
          auto res = get_attr_value(SAI_FDB_FLUSH_ATTR_BV_ID, v);
          return to_string(res);
      }
      case SAI_FDB_FLUSH_ATTR_ENTRY_TYPE:
      {
          auto res = get_attr_value(SAI_FDB_FLUSH_ATTR_ENTRY_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_fine_grained_hash_field_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK:
      {
          auto res = get_attr_value(SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK, v);
          return to_string(res);
      }
      case SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK:
      {
          sai_ip6_t res;
          get_ip6_attr_value(SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK, v, res);
          return to_string(res);
      }
      case SAI_FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD:
      {
          auto res = get_attr_value(SAI_FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD, v);
          return to_string(res);
      }
      case SAI_FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID:
      {
          auto res = get_attr_value(SAI_FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_hash_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST:
      {
          auto res = get_attr_value(SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST, v);
          return to_string(res);
      }
      case SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST:
      {
          auto res = get_attr_value(SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST, v);
          return to_string(res);
      }
      case SAI_HASH_ATTR_UDF_GROUP_LIST:
      {
          auto res = get_attr_value(SAI_HASH_ATTR_UDF_GROUP_LIST, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_hostif_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_HOSTIF_ATTR_GENETLINK_MCGRP_NAME:
      {
          auto res = get_attr_value(SAI_HOSTIF_ATTR_GENETLINK_MCGRP_NAME, v);
          return to_string(res);
      }
      case SAI_HOSTIF_ATTR_NAME:
      {
          auto res = get_attr_value(SAI_HOSTIF_ATTR_NAME, v);
          return to_string(res);
      }
      case SAI_HOSTIF_ATTR_OBJ_ID:
      {
          auto res = get_attr_value(SAI_HOSTIF_ATTR_OBJ_ID, v);
          return to_string(res);
      }
      case SAI_HOSTIF_ATTR_OPER_STATUS:
      {
          auto res = get_attr_value(SAI_HOSTIF_ATTR_OPER_STATUS, v);
          return to_string(res);
      }
      case SAI_HOSTIF_ATTR_QUEUE:
      {
          auto res = get_attr_value(SAI_HOSTIF_ATTR_QUEUE, v);
          return to_string(res);
      }
      case SAI_HOSTIF_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_HOSTIF_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_HOSTIF_ATTR_VLAN_TAG:
      {
          auto res = get_attr_value(SAI_HOSTIF_ATTR_VLAN_TAG, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_hostif_packet_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_HOSTIF_PACKET_ATTR_BRIDGE_ID:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_BRIDGE_ID, v);
          return to_string(res);
      }
      case SAI_HOSTIF_PACKET_ATTR_EGRESS_PORT_OR_LAG:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_EGRESS_PORT_OR_LAG, v);
          return to_string(res);
      }
      case SAI_HOSTIF_PACKET_ATTR_EGRESS_QUEUE_INDEX:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_EGRESS_QUEUE_INDEX, v);
          return to_string(res);
      }
      case SAI_HOSTIF_PACKET_ATTR_HOSTIF_TRAP_ID:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_HOSTIF_TRAP_ID, v);
          return to_string(res);
      }
      case SAI_HOSTIF_PACKET_ATTR_HOSTIF_TX_TYPE:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_HOSTIF_TX_TYPE, v);
          return to_string(res);
      }
      case SAI_HOSTIF_PACKET_ATTR_INGRESS_LAG:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_INGRESS_LAG, v);
          return to_string(res);
      }
      case SAI_HOSTIF_PACKET_ATTR_INGRESS_PORT:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_INGRESS_PORT, v);
          return to_string(res);
      }
      case SAI_HOSTIF_PACKET_ATTR_TIMESTAMP:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_TIMESTAMP, v);
          return to_string(res);
      }
      case SAI_HOSTIF_PACKET_ATTR_ZERO_COPY_TX:
      {
          auto res = get_attr_value(SAI_HOSTIF_PACKET_ATTR_ZERO_COPY_TX, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_hostif_table_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE:
      {
          auto res = get_attr_value(SAI_HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TABLE_ENTRY_ATTR_HOST_IF:
      {
          auto res = get_attr_value(SAI_HOSTIF_TABLE_ENTRY_ATTR_HOST_IF, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID:
      {
          auto res = get_attr_value(SAI_HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID:
      {
          auto res = get_attr_value(SAI_HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TABLE_ENTRY_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_HOSTIF_TABLE_ENTRY_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_hostif_trap_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_HOSTIF_TRAP_ATTR_COUNTER_ID:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_ATTR_COUNTER_ID, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TRAP_ATTR_TRAP_TYPE:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_ATTR_TRAP_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_hostif_trap_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER, v);
          return to_string(res);
      }
      case SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE:
      {
          auto res = get_attr_value(SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_hostif_user_defined_trap_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP:
      {
          auto res = get_attr_value(SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP, v);
          return to_string(res);
      }
      case SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY:
      {
          auto res = get_attr_value(SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY, v);
          return to_string(res);
      }
      case SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_ingress_priority_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE:
      {
          auto res = get_attr_value(SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE, v);
          return to_string(res);
      }
      case SAI_INGRESS_PRIORITY_GROUP_ATTR_INDEX:
      {
          auto res = get_attr_value(SAI_INGRESS_PRIORITY_GROUP_ATTR_INDEX, v);
          return to_string(res);
      }
      case SAI_INGRESS_PRIORITY_GROUP_ATTR_PORT:
      {
          auto res = get_attr_value(SAI_INGRESS_PRIORITY_GROUP_ATTR_PORT, v);
          return to_string(res);
      }
      case SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM:
      {
          auto res = get_attr_value(SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_inseg_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_NUM_OF_POP:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_NUM_OF_POP, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_PSC_TYPE:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_PSC_TYPE, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_QOS_TC:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_QOS_TC, v);
          return to_string(res);
      }
      case SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY:
      {
          auto res = get_attr_value(SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_ipmc_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID:
      {
          auto res = get_attr_value(SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_IPMC_ENTRY_ATTR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_IPMC_ENTRY_ATTR_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID:
      {
          auto res = get_attr_value(SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_ipmc_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_IPMC_GROUP_ATTR_IPMC_MEMBER_LIST:
      {
          auto res = get_attr_value(SAI_IPMC_GROUP_ATTR_IPMC_MEMBER_LIST, v);
          return to_string(res);
      }
      case SAI_IPMC_GROUP_ATTR_IPMC_OUTPUT_COUNT:
      {
          auto res = get_attr_value(SAI_IPMC_GROUP_ATTR_IPMC_OUTPUT_COUNT, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_ipmc_group_member_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_GROUP_ID:
      {
          auto res = get_attr_value(SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_OUTPUT_ID:
      {
          auto res = get_attr_value(SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_OUTPUT_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_isolation_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ISOLATION_GROUP_ATTR_ISOLATION_MEMBER_LIST:
      {
          auto res = get_attr_value(SAI_ISOLATION_GROUP_ATTR_ISOLATION_MEMBER_LIST, v);
          return to_string(res);
      }
      case SAI_ISOLATION_GROUP_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_ISOLATION_GROUP_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_isolation_group_member_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_GROUP_ID:
      {
          auto res = get_attr_value(SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_OBJECT:
      {
          auto res = get_attr_value(SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_OBJECT, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_l2mc_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID:
      {
          auto res = get_attr_value(SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_L2MC_ENTRY_ATTR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_L2MC_ENTRY_ATTR_PACKET_ACTION, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_l2mc_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_L2MC_GROUP_ATTR_L2MC_MEMBER_LIST:
      {
          auto res = get_attr_value(SAI_L2MC_GROUP_ATTR_L2MC_MEMBER_LIST, v);
          return to_string(res);
      }
      case SAI_L2MC_GROUP_ATTR_L2MC_OUTPUT_COUNT:
      {
          auto res = get_attr_value(SAI_L2MC_GROUP_ATTR_L2MC_OUTPUT_COUNT, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_l2mc_group_member_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_ENDPOINT_IP:
      {
          auto res = get_attr_value(SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_ENDPOINT_IP, v);
          return to_string(res);
      }
      case SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_GROUP_ID:
      {
          auto res = get_attr_value(SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_OUTPUT_ID:
      {
          auto res = get_attr_value(SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_OUTPUT_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_lag_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_DROP_TAGGED:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_DROP_TAGGED, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_DROP_UNTAGGED:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_DROP_UNTAGGED, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_EGRESS_ACL:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_EGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_INGRESS_ACL:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_INGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_LABEL:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_LABEL, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_PORT_LIST:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_PORT_VLAN_ID:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_PORT_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_SYSTEM_PORT_AGGREGATE_ID:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_SYSTEM_PORT_AGGREGATE_ID, v);
          return to_string(res);
      }
      case SAI_LAG_ATTR_TPID:
      {
          auto res = get_attr_value(SAI_LAG_ATTR_TPID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_lag_member_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE:
      {
          auto res = get_attr_value(SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE, v);
          return to_string(res);
      }
      case SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE:
      {
          auto res = get_attr_value(SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE, v);
          return to_string(res);
      }
      case SAI_LAG_MEMBER_ATTR_LAG_ID:
      {
          auto res = get_attr_value(SAI_LAG_MEMBER_ATTR_LAG_ID, v);
          return to_string(res);
      }
      case SAI_LAG_MEMBER_ATTR_PORT_ID:
      {
          auto res = get_attr_value(SAI_LAG_MEMBER_ATTR_PORT_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_macsec_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_MACSEC_ATTR_AVAILABLE_MACSEC_FLOW:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_AVAILABLE_MACSEC_FLOW, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SA:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SA, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SC:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SC, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_CTAG_TPID:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_CTAG_TPID, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_DIRECTION:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_DIRECTION, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_FLOW_LIST:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_FLOW_LIST, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_GCM_AES128_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_GCM_AES128_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_GCM_AES256_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_GCM_AES256_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_PN_32BIT_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_PN_32BIT_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_STAG_TPID:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_STAG_TPID, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_STATS_MODE:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_STATS_MODE, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_STATS_MODE_READ_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_STATS_MODE_READ_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_SUPPORTED_PORT_LIST:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_SUPPORTED_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_SYSTEM_SIDE_MTU:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_SYSTEM_SIDE_MTU, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_WARM_BOOT_ENABLE:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_WARM_BOOT_ENABLE, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_WARM_BOOT_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_WARM_BOOT_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_MACSEC_ATTR_XPN_64BIT_SUPPORTED:
      {
          auto res = get_attr_value(SAI_MACSEC_ATTR_XPN_64BIT_SUPPORTED, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_macsec_flow_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_MACSEC_FLOW_ATTR_ACL_ENTRY_LIST:
      {
          auto res = get_attr_value(SAI_MACSEC_FLOW_ATTR_ACL_ENTRY_LIST, v);
          return to_string(res);
      }
      case SAI_MACSEC_FLOW_ATTR_MACSEC_DIRECTION:
      {
          auto res = get_attr_value(SAI_MACSEC_FLOW_ATTR_MACSEC_DIRECTION, v);
          return to_string(res);
      }
      case SAI_MACSEC_FLOW_ATTR_SC_LIST:
      {
          auto res = get_attr_value(SAI_MACSEC_FLOW_ATTR_SC_LIST, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_macsec_port_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_MACSEC_PORT_ATTR_CTAG_ENABLE:
      {
          auto res = get_attr_value(SAI_MACSEC_PORT_ATTR_CTAG_ENABLE, v);
          return to_string(res);
      }
      case SAI_MACSEC_PORT_ATTR_MACSEC_DIRECTION:
      {
          auto res = get_attr_value(SAI_MACSEC_PORT_ATTR_MACSEC_DIRECTION, v);
          return to_string(res);
      }
      case SAI_MACSEC_PORT_ATTR_PORT_ID:
      {
          auto res = get_attr_value(SAI_MACSEC_PORT_ATTR_PORT_ID, v);
          return to_string(res);
      }
      case SAI_MACSEC_PORT_ATTR_STAG_ENABLE:
      {
          auto res = get_attr_value(SAI_MACSEC_PORT_ATTR_STAG_ENABLE, v);
          return to_string(res);
      }
      case SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE:
      {
          auto res = get_attr_value(SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_macsec_sa_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_MACSEC_SA_ATTR_AN:
      {
          auto res = get_attr_value(SAI_MACSEC_SA_ATTR_AN, v);
          return to_string(res);
      }
      case SAI_MACSEC_SA_ATTR_AUTH_KEY:
      {
          sai_macsec_auth_key_t res;
          get_authkey_attr_value(SAI_MACSEC_SA_ATTR_AUTH_KEY, v, res);
          return to_string(res);
      }
      case SAI_MACSEC_SA_ATTR_MACSEC_DIRECTION:
      {
          auto res = get_attr_value(SAI_MACSEC_SA_ATTR_MACSEC_DIRECTION, v);
          return to_string(res);
      }
      case SAI_MACSEC_SA_ATTR_MACSEC_SSCI:
      {
          auto res = get_attr_value(SAI_MACSEC_SA_ATTR_MACSEC_SSCI, v);
          return to_string(res);
      }
      case SAI_MACSEC_SA_ATTR_MINIMUM_XPN:
      {
          auto res = get_attr_value(SAI_MACSEC_SA_ATTR_MINIMUM_XPN, v);
          return to_string(res);
      }
      case SAI_MACSEC_SA_ATTR_SAK:
      {
          sai_macsec_sak_t res;
          get_sak_attr_value(SAI_MACSEC_SA_ATTR_SAK, v, res);
          return to_string(res);
      }
      case SAI_MACSEC_SA_ATTR_SALT:
      {
          sai_macsec_salt_t res;
          get_salt_attr_value(SAI_MACSEC_SA_ATTR_SALT, v, res);
          return to_string(res);
      }
      case SAI_MACSEC_SA_ATTR_SC_ID:
      {
          auto res = get_attr_value(SAI_MACSEC_SA_ATTR_SC_ID, v);
          return to_string(res);
      }
      case SAI_MACSEC_SA_ATTR_XPN:
      {
          auto res = get_attr_value(SAI_MACSEC_SA_ATTR_XPN, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_macsec_sc_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_FLOW_ID:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_FLOW_ID, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_MACSEC_DIRECTION:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_MACSEC_DIRECTION, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_MACSEC_SCI:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_MACSEC_SCI, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET, v);
          return to_string(res);
      }
      case SAI_MACSEC_SC_ATTR_SA_LIST:
      {
          auto res = get_attr_value(SAI_MACSEC_SC_ATTR_SA_LIST, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_mcast_fdb_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID:
      {
          auto res = get_attr_value(SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_MCAST_FDB_ENTRY_ATTR_META_DATA:
      {
          auto res = get_attr_value(SAI_MCAST_FDB_ENTRY_ATTR_META_DATA, v);
          return to_string(res);
      }
      case SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_mirror_session_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS, v, res);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_MONITOR_PORT:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_MONITOR_PORT, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_POLICER:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_POLICER, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS, v, res);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_TC:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_TC, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_TOS:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_TOS, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_TTL:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_TTL, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_VLAN_CFI:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_VLAN_CFI, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_VLAN_ID:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_VLAN_PRI:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_VLAN_PRI, v);
          return to_string(res);
      }
      case SAI_MIRROR_SESSION_ATTR_VLAN_TPID:
      {
          auto res = get_attr_value(SAI_MIRROR_SESSION_ATTR_VLAN_TPID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_nat_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_NAT_ENTRY_ATTR_BYTE_COUNT:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_BYTE_COUNT, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_DST_IP:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_DST_IP, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_DST_IP_MASK:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_DST_IP_MASK, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_HIT_BIT:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_HIT_BIT, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_HIT_BIT_COR:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_HIT_BIT_COR, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_L4_DST_PORT:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_L4_DST_PORT, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_L4_SRC_PORT:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_L4_SRC_PORT, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_NAT_TYPE:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_NAT_TYPE, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_PACKET_COUNT:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_PACKET_COUNT, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_SRC_IP:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_SRC_IP, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_SRC_IP_MASK:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_SRC_IP_MASK, v);
          return to_string(res);
      }
      case SAI_NAT_ENTRY_ATTR_VR_ID:
      {
          auto res = get_attr_value(SAI_NAT_ENTRY_ATTR_VR_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_nat_zone_counter_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT:
      {
          auto res = get_attr_value(SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT, v);
          return to_string(res);
      }
      case SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD:
      {
          auto res = get_attr_value(SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD, v);
          return to_string(res);
      }
      case SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS:
      {
          auto res = get_attr_value(SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS, v);
          return to_string(res);
      }
      case SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED:
      {
          auto res = get_attr_value(SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED, v);
          return to_string(res);
      }
      case SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE:
      {
          auto res = get_attr_value(SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE, v);
          return to_string(res);
      }
      case SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT:
      {
          auto res = get_attr_value(SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT, v);
          return to_string(res);
      }
      case SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT:
      {
          auto res = get_attr_value(SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT, v);
          return to_string(res);
      }
      case SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID:
      {
          auto res = get_attr_value(SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_neighbor_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID, v);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS, v, res);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX, v);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX, v);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY, v);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL, v);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_META_DATA:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_META_DATA, v);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE, v);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID:
      {
          auto res = get_attr_value(SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_next_hop_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_NEXT_HOP_ATTR_COUNTER_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_COUNTER_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_IP:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_IP, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_LABELSTACK:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_LABELSTACK, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_OUTSEG_TYPE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_OUTSEG_TYPE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_POP_TYPE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_POP_TYPE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_TYPE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_TYPE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_SEGMENTROUTE_SIDLIST_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_SEGMENTROUTE_SIDLIST_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_TUNNEL_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_TUNNEL_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_TUNNEL_MAC:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_NEXT_HOP_ATTR_TUNNEL_MAC, v, res);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_TUNNEL_VNI:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_TUNNEL_VNI, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_next_hop_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_ATTR_REAL_SIZE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_ATTR_REAL_SIZE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_next_hop_group_member_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_INDEX:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_INDEX, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID, v);
          return to_string(res);
      }
      case SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT:
      {
          auto res = get_attr_value(SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_policer_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_POLICER_ATTR_CBS:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_CBS, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_CIR:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_CIR, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_COLOR_SOURCE:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_COLOR_SOURCE, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_GREEN_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_GREEN_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_METER_TYPE:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_METER_TYPE, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_MODE:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_MODE, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_PBS:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_PBS, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_PIR:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_PIR, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_RED_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_RED_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_POLICER_ATTR_YELLOW_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_POLICER_ATTR_YELLOW_PACKET_ACTION, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_port_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_PORT_ATTR_ADMIN_STATE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADMIN_STATE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_FEC_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_FEC_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_OUI_CODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_OUI_CODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ADVERTISED_SPEED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ADVERTISED_SPEED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_AUTO_NEG_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_AUTO_NEG_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_AUTO_NEG_STATUS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_AUTO_NEG_STATUS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_DISABLE_DECREMENT_TTL:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_DISABLE_DECREMENT_TTL, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_DROP_TAGGED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_DROP_TAGGED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_DROP_UNTAGGED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_DROP_UNTAGGED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EEE_ENABLE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EEE_ENABLE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EEE_IDLE_TIME:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EEE_IDLE_TIME, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EEE_WAKE_TIME:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EEE_WAKE_TIME, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EGRESS_ACL:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EGRESS_MACSEC_ACL:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EGRESS_MACSEC_ACL, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EGRESS_MIRROR_SESSION:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EGRESS_MIRROR_SESSION, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ERR_STATUS_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ERR_STATUS_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_EYE_VALUES:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_EYE_VALUES, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_FABRIC_ATTACHED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_FABRIC_ATTACHED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_FABRIC_REACHABILITY:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_FABRIC_REACHABILITY, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_FEC_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_FEC_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_FULL_DUPLEX_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_FULL_DUPLEX_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_HW_LANE_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_HW_LANE_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_HW_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_HW_PROFILE_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_INGRESS_ACL:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_INGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_INGRESS_MACSEC_ACL:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_INGRESS_MACSEC_ACL, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_INGRESS_MIRROR_SESSION:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_INGRESS_MIRROR_SESSION, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_INTERFACE_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_INTERFACE_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_ISOLATION_GROUP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_ISOLATION_GROUP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_LINK_TRAINING_ENABLE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_LINK_TRAINING_ENABLE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_LINK_TRAINING_RX_STATUS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_LINK_TRAINING_RX_STATUS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_MACSEC_PORT_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_MACSEC_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_MEDIA_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_MEDIA_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_META_DATA:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_META_DATA, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_MTU:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_MTU, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_OPER_SPEED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_OPER_SPEED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_OPER_STATUS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_OPER_STATUS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PKT_TX_ENABLE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PKT_TX_ENABLE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_POLICER_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_POLICER_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PORT_POOL_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PORT_POOL_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PORT_SERDES_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PORT_SERDES_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PORT_VLAN_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PORT_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRBS_CONFIG:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRBS_CONFIG, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRBS_LOCK_LOSS_STATUS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRBS_LOCK_LOSS_STATUS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRBS_LOCK_STATUS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRBS_LOCK_STATUS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRBS_POLYNOMIAL:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRBS_POLYNOMIAL, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRBS_RX_STATUS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRBS_RX_STATUS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_PTP_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_PTP_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_DEFAULT_TC:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_DEFAULT_TC, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_QUEUE_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_QUEUE_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REFERENCE_CLOCK:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REFERENCE_CLOCK, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_REMOTE_ADVERTISED_SPEED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_REMOTE_ADVERTISED_SPEED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SERDES_IDRIVER:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SERDES_IDRIVER, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SERDES_IPREDRIVER:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SERDES_IPREDRIVER, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SERDES_PREEMPHASIS:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SERDES_PREEMPHASIS, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SPEED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SPEED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SUPPORTED_FEC_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SUPPORTED_FEC_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SUPPORTED_MEDIA_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SUPPORTED_MEDIA_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SUPPORTED_SPEED:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SUPPORTED_SPEED, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_SYSTEM_PORT:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_SYSTEM_PORT, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_TAM_OBJECT:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_TAM_OBJECT, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_TPID:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_TPID, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_PORT_ATTR_UPDATE_DSCP:
      {
          auto res = get_attr_value(SAI_PORT_ATTR_UPDATE_DSCP, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_port_connector_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE:
      {
          auto res = get_attr_value(SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE, v);
          return to_string(res);
      }
      case SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID:
      {
          auto res = get_attr_value(SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID, v);
          return to_string(res);
      }
      case SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID:
      {
          auto res = get_attr_value(SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID, v);
          return to_string(res);
      }
      case SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID:
      {
          auto res = get_attr_value(SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID, v);
          return to_string(res);
      }
      case SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID:
      {
          auto res = get_attr_value(SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_port_pool_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_PORT_POOL_ATTR_BUFFER_POOL_ID:
      {
          auto res = get_attr_value(SAI_PORT_POOL_ATTR_BUFFER_POOL_ID, v);
          return to_string(res);
      }
      case SAI_PORT_POOL_ATTR_PORT_ID:
      {
          auto res = get_attr_value(SAI_PORT_POOL_ATTR_PORT_ID, v);
          return to_string(res);
      }
      case SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_port_serdes_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_PORT_SERDES_ATTR_IDRIVER:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_IDRIVER, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_IPREDRIVER:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_IPREDRIVER, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_PORT_ID:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_PORT_ID, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_PREEMPHASIS:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_PREEMPHASIS, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_TX_FIR_ATTN:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_TX_FIR_ATTN, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_TX_FIR_MAIN:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_TX_FIR_MAIN, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_TX_FIR_POST1:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_TX_FIR_POST1, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_TX_FIR_POST2:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_TX_FIR_POST2, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_TX_FIR_POST3:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_TX_FIR_POST3, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_TX_FIR_PRE1:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_TX_FIR_PRE1, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_TX_FIR_PRE2:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_TX_FIR_PRE2, v);
          return to_string(res);
      }
      case SAI_PORT_SERDES_ATTR_TX_FIR_PRE3:
      {
          auto res = get_attr_value(SAI_PORT_SERDES_ATTR_TX_FIR_PRE3, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_qos_map_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST:
      {
          auto res = get_attr_value(SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST, v);
          return to_string(res);
      }
      case SAI_QOS_MAP_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_QOS_MAP_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_queue_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_QUEUE_ATTR_BUFFER_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_BUFFER_PROFILE_ID, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_ENABLE_PFC_DLDR:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_ENABLE_PFC_DLDR, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_INDEX:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_INDEX, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_PAUSE_STATUS:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_PAUSE_STATUS, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_PFC_DLR_INIT:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_PFC_DLR_INIT, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_PORT:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_PORT, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_TAM_OBJECT:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_TAM_OBJECT, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_QUEUE_ATTR_WRED_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_QUEUE_ATTR_WRED_PROFILE_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_route_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ROUTE_ENTRY_ATTR_COUNTER_ID:
      {
          auto res = get_attr_value(SAI_ROUTE_ENTRY_ATTR_COUNTER_ID, v);
          return to_string(res);
      }
      case SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY:
      {
          auto res = get_attr_value(SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY, v);
          return to_string(res);
      }
      case SAI_ROUTE_ENTRY_ATTR_META_DATA:
      {
          auto res = get_attr_value(SAI_ROUTE_ENTRY_ATTR_META_DATA, v);
          return to_string(res);
      }
      case SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID:
      {
          auto res = get_attr_value(SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID, v);
          return to_string(res);
      }
      case SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID:
      {
          auto res = get_attr_value(SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_router_interface_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_BRIDGE_ID:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_BRIDGE_ID, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_INNER_VLAN_ID:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_INNER_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_IS_VIRTUAL:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_IS_VIRTUAL, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_MTU:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_MTU, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_OUTER_VLAN_ID:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_OUTER_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_PORT_ID:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_PORT_ID, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS, v, res);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_VIRTUAL_ROUTER_ID:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_VIRTUAL_ROUTER_ID, v);
          return to_string(res);
      }
      case SAI_ROUTER_INTERFACE_ATTR_VLAN_ID:
      {
          auto res = get_attr_value(SAI_ROUTER_INTERFACE_ATTR_VLAN_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_rpf_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_RPF_GROUP_ATTR_RPF_INTERFACE_COUNT:
      {
          auto res = get_attr_value(SAI_RPF_GROUP_ATTR_RPF_INTERFACE_COUNT, v);
          return to_string(res);
      }
      case SAI_RPF_GROUP_ATTR_RPF_MEMBER_LIST:
      {
          auto res = get_attr_value(SAI_RPF_GROUP_ATTR_RPF_MEMBER_LIST, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_rpf_group_member_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID:
      {
          auto res = get_attr_value(SAI_RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID:
      {
          auto res = get_attr_value(SAI_RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_samplepacket_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_SAMPLEPACKET_ATTR_MODE:
      {
          auto res = get_attr_value(SAI_SAMPLEPACKET_ATTR_MODE, v);
          return to_string(res);
      }
      case SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE:
      {
          auto res = get_attr_value(SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE, v);
          return to_string(res);
      }
      case SAI_SAMPLEPACKET_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_SAMPLEPACKET_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_scheduler_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE:
      {
          auto res = get_attr_value(SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE:
      {
          auto res = get_attr_value(SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_ATTR_METER_TYPE:
      {
          auto res = get_attr_value(SAI_SCHEDULER_ATTR_METER_TYPE, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE:
      {
          auto res = get_attr_value(SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE:
      {
          auto res = get_attr_value(SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_ATTR_SCHEDULING_TYPE:
      {
          auto res = get_attr_value(SAI_SCHEDULER_ATTR_SCHEDULING_TYPE, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT:
      {
          auto res = get_attr_value(SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_scheduler_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_SCHEDULER_GROUP_ATTR_CHILD_COUNT:
      {
          auto res = get_attr_value(SAI_SCHEDULER_GROUP_ATTR_CHILD_COUNT, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_GROUP_ATTR_CHILD_LIST:
      {
          auto res = get_attr_value(SAI_SCHEDULER_GROUP_ATTR_CHILD_LIST, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_GROUP_ATTR_LEVEL:
      {
          auto res = get_attr_value(SAI_SCHEDULER_GROUP_ATTR_LEVEL, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_GROUP_ATTR_MAX_CHILDS:
      {
          auto res = get_attr_value(SAI_SCHEDULER_GROUP_ATTR_MAX_CHILDS, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE:
      {
          auto res = get_attr_value(SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_GROUP_ATTR_PORT_ID:
      {
          auto res = get_attr_value(SAI_SCHEDULER_GROUP_ATTR_PORT_ID, v);
          return to_string(res);
      }
      case SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_segmentroute_sidlist_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_SEGMENTROUTE_SIDLIST_ATTR_SEGMENT_LIST:
      {
          auto res = get_attr_value(SAI_SEGMENTROUTE_SIDLIST_ATTR_SEGMENT_LIST, v);
          return to_string(res);
      }
      case SAI_SEGMENTROUTE_SIDLIST_ATTR_TLV_LIST:
      {
          auto res = get_attr_value(SAI_SEGMENTROUTE_SIDLIST_ATTR_TLV_LIST, v);
          return to_string(res);
      }
      case SAI_SEGMENTROUTE_SIDLIST_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_SEGMENTROUTE_SIDLIST_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_stp_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_STP_ATTR_BRIDGE_ID:
      {
          auto res = get_attr_value(SAI_STP_ATTR_BRIDGE_ID, v);
          return to_string(res);
      }
      case SAI_STP_ATTR_PORT_LIST:
      {
          auto res = get_attr_value(SAI_STP_ATTR_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_STP_ATTR_VLAN_LIST:
      {
          auto res = get_attr_value(SAI_STP_ATTR_VLAN_LIST, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_stp_port_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_STP_PORT_ATTR_BRIDGE_PORT:
      {
          auto res = get_attr_value(SAI_STP_PORT_ATTR_BRIDGE_PORT, v);
          return to_string(res);
      }
      case SAI_STP_PORT_ATTR_STATE:
      {
          auto res = get_attr_value(SAI_STP_PORT_ATTR_STATE, v);
          return to_string(res);
      }
      case SAI_STP_PORT_ATTR_STP:
      {
          auto res = get_attr_value(SAI_STP_PORT_ATTR_STP, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_switch_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_SWITCH_ATTR_ACL_CAPABILITY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_CAPABILITY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_STAGE_EGRESS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_STAGE_EGRESS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_STAGE_INGRESS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_STAGE_INGRESS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_USER_META_DATA_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_USER_META_DATA_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_FDB_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_FDB_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_AVERAGE_TEMP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_AVERAGE_TEMP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_CPU_PORT:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_CPU_PORT, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_CRC_CHECK_ENABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_CRC_CHECK_ENABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_DEFAULT_VLAN_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_DEFAULT_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECMP_HASH:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECMP_HASH, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECMP_HASH_IPV4:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECMP_HASH_IPV4, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECMP_HASH_IPV6:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECMP_HASH_IPV6, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECMP_MEMBERS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECMP_MEMBERS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_EGRESS_ACL:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_EGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FABRIC_PORT_LIST:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FABRIC_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FAST_API_ENABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FAST_API_ENABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FDB_AGING_TIME:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FDB_AGING_TIME, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FDB_TABLE_SIZE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FDB_TABLE_SIZE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_LOAD_METHOD:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_LOAD_METHOD, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_LOAD_TYPE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_LOAD_TYPE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_MINOR_VERSION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_MINOR_VERSION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_PATH_NAME:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_PATH_NAME, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_STATUS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_STATUS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_HARDWARE_ACCESS_BUS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_HARDWARE_ACCESS_BUS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_INGRESS_ACL:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_INGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_INIT_SWITCH:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_INIT_SWITCH, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_LAG_HASH:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_LAG_HASH, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_LAG_HASH_IPV4:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_LAG_HASH_IPV4, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_LAG_HASH_IPV6:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_LAG_HASH_IPV6, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_LAG_MEMBERS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_LAG_MEMBERS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MACSEC_OBJECT_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MACSEC_OBJECT_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_ACL_ACTION_COUNT:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_ACL_ACTION_COUNT, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_ACL_RANGE_COUNT:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_ACL_RANGE_COUNT, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_BFD_SESSION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_BFD_SESSION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_MIRROR_SESSION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_MIRROR_SESSION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_STP_INSTANCE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_STP_INSTANCE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_SYSTEM_CORES:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_SYSTEM_CORES, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_TEMP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_TEMP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MIN_BFD_RX:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MIN_BFD_RX, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MIN_BFD_TX:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MIN_BFD_TX, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_MIRROR_TC:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_MIRROR_TC, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NAT_ENABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NAT_ENABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_BFD_SESSION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_BFD_SESSION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_LAGS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_LAGS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_QUEUES:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_QUEUES, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_NV_STORAGE_SIZE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_NV_STORAGE_SIZE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_OPER_STATUS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_OPER_STATUS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PLATFROM_CONTEXT:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PLATFROM_CONTEXT, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PORT_CONNECTOR_LIST:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PORT_CONNECTOR_LIST, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PORT_LIST:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PORT_MAX_MTU:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PORT_MAX_MTU, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PORT_USER_META_DATA_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PORT_USER_META_DATA_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PRE_SHUTDOWN:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PRE_SHUTDOWN, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_DEFAULT_TC:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_DEFAULT_TC, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_REGISTER_READ:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_REGISTER_READ, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_REGISTER_WRITE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_REGISTER_WRITE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_RESTART_TYPE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_RESTART_TYPE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_RESTART_WARM:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_RESTART_WARM, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SEGMENTROUTE_MAX_SID_DEPTH:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SEGMENTROUTE_MAX_SID_DEPTH, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SEGMENTROUTE_TLV_TYPE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SEGMENTROUTE_TLV_TYPE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SRC_MAC_ADDRESS:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_SWITCH_ATTR_SRC_MAC_ADDRESS, v, res);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SWITCHING_MODE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SWITCHING_MODE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SWITCH_HARDWARE_INFO:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SWITCH_HARDWARE_INFO, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SWITCH_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SWITCH_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SWITCH_PROFILE_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SWITCH_PROFILE_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_SYSTEM_PORT_LIST:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_SYSTEM_PORT_LIST, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_TAM_OBJECT_ID:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_TAM_OBJECT_ID, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_TEMP_LIST:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_TEMP_LIST, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_TOTAL_BUFFER_SIZE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_TOTAL_BUFFER_SIZE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_TPID_INNER_VLAN:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_TPID_INNER_VLAN, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_TPID_OUTER_VLAN:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_TPID_OUTER_VLAN, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_TUNNEL_LOOPBACK_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_TUNNEL_LOOPBACK_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT, v);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC, v, res);
          return to_string(res);
      }
      case SAI_SWITCH_ATTR_WARM_RECOVER:
      {
          auto res = get_attr_value(SAI_SWITCH_ATTR_WARM_RECOVER, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_system_port_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_SYSTEM_PORT_ATTR_ADMIN_STATE:
      {
          auto res = get_attr_value(SAI_SYSTEM_PORT_ATTR_ADMIN_STATE, v);
          return to_string(res);
      }
      case SAI_SYSTEM_PORT_ATTR_CONFIG_INFO:
      {
          auto res = get_attr_value(SAI_SYSTEM_PORT_ATTR_CONFIG_INFO, v);
          return to_string(res);
      }
      case SAI_SYSTEM_PORT_ATTR_PORT:
      {
          auto res = get_attr_value(SAI_SYSTEM_PORT_ATTR_PORT, v);
          return to_string(res);
      }
      case SAI_SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS:
      {
          auto res = get_attr_value(SAI_SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS, v);
          return to_string(res);
      }
      case SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP:
      {
          auto res = get_attr_value(SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP, v);
          return to_string(res);
      }
      case SAI_SYSTEM_PORT_ATTR_QOS_VOQ_LIST:
      {
          auto res = get_attr_value(SAI_SYSTEM_PORT_ATTR_QOS_VOQ_LIST, v);
          return to_string(res);
      }
      case SAI_SYSTEM_PORT_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_SYSTEM_PORT_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_ATTR_EVENT_OBJECTS_LIST:
      {
          auto res = get_attr_value(SAI_TAM_ATTR_EVENT_OBJECTS_LIST, v);
          return to_string(res);
      }
      case SAI_TAM_ATTR_INT_OBJECTS_LIST:
      {
          auto res = get_attr_value(SAI_TAM_ATTR_INT_OBJECTS_LIST, v);
          return to_string(res);
      }
      case SAI_TAM_ATTR_TAM_BIND_POINT_TYPE_LIST:
      {
          auto res = get_attr_value(SAI_TAM_ATTR_TAM_BIND_POINT_TYPE_LIST, v);
          return to_string(res);
      }
      case SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST:
      {
          auto res = get_attr_value(SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_collector_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE:
      {
          auto res = get_attr_value(SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE, v);
          return to_string(res);
      }
      case SAI_TAM_COLLECTOR_ATTR_DST_IP:
      {
          auto res = get_attr_value(SAI_TAM_COLLECTOR_ATTR_DST_IP, v);
          return to_string(res);
      }
      case SAI_TAM_COLLECTOR_ATTR_LOCALHOST:
      {
          auto res = get_attr_value(SAI_TAM_COLLECTOR_ATTR_LOCALHOST, v);
          return to_string(res);
      }
      case SAI_TAM_COLLECTOR_ATTR_SRC_IP:
      {
          auto res = get_attr_value(SAI_TAM_COLLECTOR_ATTR_SRC_IP, v);
          return to_string(res);
      }
      case SAI_TAM_COLLECTOR_ATTR_TRANSPORT:
      {
          auto res = get_attr_value(SAI_TAM_COLLECTOR_ATTR_TRANSPORT, v);
          return to_string(res);
      }
      case SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE:
      {
          auto res = get_attr_value(SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE, v);
          return to_string(res);
      }
      case SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID:
      {
          auto res = get_attr_value(SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_event_action_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_event_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_EVENT_ATTR_ACTION_LIST:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_ATTR_ACTION_LIST, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_ATTR_COLLECTOR_LIST:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_ATTR_COLLECTOR_LIST, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_ATTR_DSCP_VALUE:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_ATTR_DSCP_VALUE, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_ATTR_THRESHOLD:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_ATTR_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_event_threshold_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_THRESHOLD_ATTR_RATE:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_THRESHOLD_ATTR_RATE, v);
          return to_string(res);
      }
      case SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT:
      {
          auto res = get_attr_value(SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_int_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_INT_ATTR_ACL_GROUP:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_ACL_GROUP, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_ACTION_VECTOR:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_ACTION_VECTOR, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_COLLECTOR_LIST:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_COLLECTOR_LIST, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_DEVICE_ID:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_DEVICE_ID, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_INLINE:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_INLINE, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_INT_PRESENCE_PB1:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_INT_PRESENCE_PB1, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_INT_PRESENCE_PB2:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_INT_PRESENCE_PB2, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_INT_PRESENCE_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_INT_PRESENCE_TYPE, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_MATH_FUNC:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_MATH_FUNC, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_MAX_HOP_COUNT:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_MAX_HOP_COUNT, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_MAX_LENGTH:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_MAX_LENGTH, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_NAME_SPACE_ID:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_NAME_SPACE_ID, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_REPORT_ID:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_REPORT_ID, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_TRACE_VECTOR:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_TRACE_VECTOR, v);
          return to_string(res);
      }
      case SAI_TAM_INT_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_INT_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_math_func_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_report_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER:
      {
          auto res = get_attr_value(SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER, v);
          return to_string(res);
      }
      case SAI_TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY:
      {
          auto res = get_attr_value(SAI_TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY, v);
          return to_string(res);
      }
      case SAI_TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS:
      {
          auto res = get_attr_value(SAI_TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS, v);
          return to_string(res);
      }
      case SAI_TAM_REPORT_ATTR_QUOTA:
      {
          auto res = get_attr_value(SAI_TAM_REPORT_ATTR_QUOTA, v);
          return to_string(res);
      }
      case SAI_TAM_REPORT_ATTR_REPORT_INTERVAL:
      {
          auto res = get_attr_value(SAI_TAM_REPORT_ATTR_REPORT_INTERVAL, v);
          return to_string(res);
      }
      case SAI_TAM_REPORT_ATTR_REPORT_MODE:
      {
          auto res = get_attr_value(SAI_TAM_REPORT_ATTR_REPORT_MODE, v);
          return to_string(res);
      }
      case SAI_TAM_REPORT_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_REPORT_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_tel_type_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_REPORT_ID:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_REPORT_ID, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS, v);
          return to_string(res);
      }
      case SAI_TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_telemetry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_TELEMETRY_ATTR_COLLECTOR_LIST:
      {
          auto res = get_attr_value(SAI_TAM_TELEMETRY_ATTR_COLLECTOR_LIST, v);
          return to_string(res);
      }
      case SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL:
      {
          auto res = get_attr_value(SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL, v);
          return to_string(res);
      }
      case SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT:
      {
          auto res = get_attr_value(SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT, v);
          return to_string(res);
      }
      case SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST:
      {
          auto res = get_attr_value(SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tam_transport_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TAM_TRANSPORT_ATTR_DST_PORT:
      {
          auto res = get_attr_value(SAI_TAM_TRANSPORT_ATTR_DST_PORT, v);
          return to_string(res);
      }
      case SAI_TAM_TRANSPORT_ATTR_MTU:
      {
          auto res = get_attr_value(SAI_TAM_TRANSPORT_ATTR_MTU, v);
          return to_string(res);
      }
      case SAI_TAM_TRANSPORT_ATTR_SRC_PORT:
      {
          auto res = get_attr_value(SAI_TAM_TRANSPORT_ATTR_SRC_PORT, v);
          return to_string(res);
      }
      case SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE, v);
          return to_string(res);
      }
      case SAI_TAM_TRANSPORT_ATTR_TRANSPORT_TYPE:
      {
          auto res = get_attr_value(SAI_TAM_TRANSPORT_ATTR_TRANSPORT_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tunnel_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TUNNEL_ATTR_DECAP_DSCP_MODE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_DECAP_DSCP_MODE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_DECAP_ECN_MODE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_DECAP_ECN_MODE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_DECAP_MAPPERS:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_DECAP_MAPPERS, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_DECAP_TTL_MODE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_DECAP_TTL_MODE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_DST_IP:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_DST_IP, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_ECN_MODE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_ECN_MODE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_GRE_KEY:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_GRE_KEY, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_GRE_KEY_VALID:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_GRE_KEY_VALID, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_MAPPERS:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_MAPPERS, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_SRC_IP:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_SRC_IP, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_TTL_MODE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_TTL_MODE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_ENCAP_TTL_VAL:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_ENCAP_TTL_VAL, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_OVERLAY_INTERFACE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_OVERLAY_INTERFACE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_PEER_MODE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_PEER_MODE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_ATTR_UNDERLAY_INTERFACE:
      {
          auto res = get_attr_value(SAI_TUNNEL_ATTR_UNDERLAY_INTERFACE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tunnel_map_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TUNNEL_MAP_ATTR_ENTRY_LIST:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ATTR_ENTRY_LIST, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ATTR_TYPE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tunnel_map_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY, v);
          return to_string(res);
      }
      case SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE:
      {
          auto res = get_attr_value(SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_tunnel_term_table_entry_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID, v);
          return to_string(res);
      }
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP, v);
          return to_string(res);
      }
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK, v);
          return to_string(res);
      }
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY, v);
          return to_string(res);
      }
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP, v);
          return to_string(res);
      }
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK, v);
          return to_string(res);
      }
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID:
      {
          auto res = get_attr_value(SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_udf_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_UDF_ATTR_BASE:
      {
          auto res = get_attr_value(SAI_UDF_ATTR_BASE, v);
          return to_string(res);
      }
      case SAI_UDF_ATTR_GROUP_ID:
      {
          auto res = get_attr_value(SAI_UDF_ATTR_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_UDF_ATTR_HASH_MASK:
      {
          auto res = get_attr_value(SAI_UDF_ATTR_HASH_MASK, v);
          return to_string(res);
      }
      case SAI_UDF_ATTR_MATCH_ID:
      {
          auto res = get_attr_value(SAI_UDF_ATTR_MATCH_ID, v);
          return to_string(res);
      }
      case SAI_UDF_ATTR_OFFSET:
      {
          auto res = get_attr_value(SAI_UDF_ATTR_OFFSET, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_udf_group_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_UDF_GROUP_ATTR_LENGTH:
      {
          auto res = get_attr_value(SAI_UDF_GROUP_ATTR_LENGTH, v);
          return to_string(res);
      }
      case SAI_UDF_GROUP_ATTR_TYPE:
      {
          auto res = get_attr_value(SAI_UDF_GROUP_ATTR_TYPE, v);
          return to_string(res);
      }
      case SAI_UDF_GROUP_ATTR_UDF_LIST:
      {
          auto res = get_attr_value(SAI_UDF_GROUP_ATTR_UDF_LIST, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_udf_match_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_UDF_MATCH_ATTR_GRE_TYPE:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_UDF_MATCH_ATTR_GRE_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_UDF_MATCH_ATTR_GRE_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_UDF_MATCH_ATTR_L2_TYPE:
      {
          sai_uint16_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_UDF_MATCH_ATTR_L2_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_UDF_MATCH_ATTR_L2_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_UDF_MATCH_ATTR_L3_TYPE:
      {
          sai_uint8_t res_data, res_mask;
          get_data_aclfield_attr_value(SAI_UDF_MATCH_ATTR_L3_TYPE, v, res_data);
          get_mask_aclfield_attr_value(SAI_UDF_MATCH_ATTR_L3_TYPE, v, res_mask);
          return to_string(res_data)+to_string(res_mask);
      }
      case SAI_UDF_MATCH_ATTR_PRIORITY:
      {
          auto res = get_attr_value(SAI_UDF_MATCH_ATTR_PRIORITY, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_virtual_router_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE:
      {
          auto res = get_attr_value(SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE, v);
          return to_string(res);
      }
      case SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE:
      {
          auto res = get_attr_value(SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE, v);
          return to_string(res);
      }
      case SAI_VIRTUAL_ROUTER_ATTR_LABEL:
      {
          auto res = get_attr_value(SAI_VIRTUAL_ROUTER_ATTR_LABEL, v);
          return to_string(res);
      }
      case SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS:
      {
          sai_mac_t res;
          get_mac_attr_value(SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS, v, res);
          return to_string(res);
      }
      case SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION, v);
          return to_string(res);
      }
      case SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION:
      {
          auto res = get_attr_value(SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_vlan_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_EGRESS_ACL:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_EGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_INGRESS_ACL:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_INGRESS_ACL, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_LEARN_DISABLE:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_LEARN_DISABLE, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_MEMBER_LIST:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_MEMBER_LIST, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_META_DATA:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_META_DATA, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_STP_INSTANCE:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_STP_INSTANCE, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_TAM_OBJECT:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_TAM_OBJECT, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP, v);
          return to_string(res);
      }
      case SAI_VLAN_ATTR_VLAN_ID:
      {
          auto res = get_attr_value(SAI_VLAN_ATTR_VLAN_ID, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_vlan_member_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID:
      {
          auto res = get_attr_value(SAI_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID, v);
          return to_string(res);
      }
      case SAI_VLAN_MEMBER_ATTR_VLAN_ID:
      {
          auto res = get_attr_value(SAI_VLAN_MEMBER_ATTR_VLAN_ID, v);
          return to_string(res);
      }
      case SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE:
      {
          auto res = get_attr_value(SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_wred_attr_t a, sai_attribute_value_t v)
{
    switch (a) {
      case SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_MARK_MODE:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_MARK_MODE, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_GREEN_DROP_PROBABILITY:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_GREEN_DROP_PROBABILITY, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_GREEN_ENABLE:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_GREEN_ENABLE, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_GREEN_MAX_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_GREEN_MAX_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_GREEN_MIN_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_GREEN_MIN_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_RED_DROP_PROBABILITY:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_RED_DROP_PROBABILITY, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_RED_ENABLE:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_RED_ENABLE, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_RED_MAX_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_RED_MAX_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_RED_MIN_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_RED_MIN_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_WEIGHT:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_WEIGHT, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_YELLOW_ENABLE:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_YELLOW_ENABLE, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD, v);
          return to_string(res);
      }
      case SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD:
      {
          auto res = get_attr_value(SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD, v);
          return to_string(res);
      }
      default:
          break;
    }
    return "Unknown";
}

std::string
to_string(sai_acl_action_type_t& x)
{
    static std::map<sai_acl_action_type_t, const char*> strs = {
            {SAI_ACL_ACTION_TYPE_ACL_DTEL_FLOW_OP, "SAI_ACL_ACTION_TYPE_ACL_DTEL_FLOW_OP"},
            {SAI_ACL_ACTION_TYPE_ADD_VLAN_ID, "SAI_ACL_ACTION_TYPE_ADD_VLAN_ID"},
            {SAI_ACL_ACTION_TYPE_ADD_VLAN_PRI, "SAI_ACL_ACTION_TYPE_ADD_VLAN_PRI"},
            {SAI_ACL_ACTION_TYPE_COUNTER, "SAI_ACL_ACTION_TYPE_COUNTER"},
            {SAI_ACL_ACTION_TYPE_DECREMENT_TTL, "SAI_ACL_ACTION_TYPE_DECREMENT_TTL"},
            {SAI_ACL_ACTION_TYPE_DTEL_DROP_REPORT_ENABLE, "SAI_ACL_ACTION_TYPE_DTEL_DROP_REPORT_ENABLE"},
            {SAI_ACL_ACTION_TYPE_DTEL_FLOW_SAMPLE_PERCENT, "SAI_ACL_ACTION_TYPE_DTEL_FLOW_SAMPLE_PERCENT"},
            {SAI_ACL_ACTION_TYPE_DTEL_INT_SESSION, "SAI_ACL_ACTION_TYPE_DTEL_INT_SESSION"},
            {SAI_ACL_ACTION_TYPE_DTEL_REPORT_ALL_PACKETS, "SAI_ACL_ACTION_TYPE_DTEL_REPORT_ALL_PACKETS"},
            {SAI_ACL_ACTION_TYPE_DTEL_TAIL_DROP_REPORT_ENABLE, "SAI_ACL_ACTION_TYPE_DTEL_TAIL_DROP_REPORT_ENABLE"},
            {SAI_ACL_ACTION_TYPE_EGRESS_BLOCK_PORT_LIST, "SAI_ACL_ACTION_TYPE_EGRESS_BLOCK_PORT_LIST"},
            {SAI_ACL_ACTION_TYPE_EGRESS_SAMPLEPACKET_ENABLE, "SAI_ACL_ACTION_TYPE_EGRESS_SAMPLEPACKET_ENABLE"},
            {SAI_ACL_ACTION_TYPE_ENDPOINT_IP, "SAI_ACL_ACTION_TYPE_ENDPOINT_IP"},
            {SAI_ACL_ACTION_TYPE_FLOOD, "SAI_ACL_ACTION_TYPE_FLOOD"},
            {SAI_ACL_ACTION_TYPE_INGRESS_SAMPLEPACKET_ENABLE, "SAI_ACL_ACTION_TYPE_INGRESS_SAMPLEPACKET_ENABLE"},
            {SAI_ACL_ACTION_TYPE_INT_DELETE, "SAI_ACL_ACTION_TYPE_INT_DELETE"},
            {SAI_ACL_ACTION_TYPE_INT_INSERT, "SAI_ACL_ACTION_TYPE_INT_INSERT"},
            {SAI_ACL_ACTION_TYPE_INT_REPORT_DROPS, "SAI_ACL_ACTION_TYPE_INT_REPORT_DROPS"},
            {SAI_ACL_ACTION_TYPE_INT_REPORT_FLOW, "SAI_ACL_ACTION_TYPE_INT_REPORT_FLOW"},
            {SAI_ACL_ACTION_TYPE_INT_REPORT_TAIL_DROPS, "SAI_ACL_ACTION_TYPE_INT_REPORT_TAIL_DROPS"},
            {SAI_ACL_ACTION_TYPE_MACSEC_FLOW, "SAI_ACL_ACTION_TYPE_MACSEC_FLOW"},
            {SAI_ACL_ACTION_TYPE_MIRROR_EGRESS, "SAI_ACL_ACTION_TYPE_MIRROR_EGRESS"},
            {SAI_ACL_ACTION_TYPE_MIRROR_INGRESS, "SAI_ACL_ACTION_TYPE_MIRROR_INGRESS"},
            {SAI_ACL_ACTION_TYPE_NO_NAT, "SAI_ACL_ACTION_TYPE_NO_NAT"},
            {SAI_ACL_ACTION_TYPE_PACKET_ACTION, "SAI_ACL_ACTION_TYPE_PACKET_ACTION"},
            {SAI_ACL_ACTION_TYPE_REDIRECT, "SAI_ACL_ACTION_TYPE_REDIRECT"},
            {SAI_ACL_ACTION_TYPE_REDIRECT_LIST, "SAI_ACL_ACTION_TYPE_REDIRECT_LIST"},
            {SAI_ACL_ACTION_TYPE_SET_ACL_META_DATA, "SAI_ACL_ACTION_TYPE_SET_ACL_META_DATA"},
            {SAI_ACL_ACTION_TYPE_SET_DO_NOT_LEARN, "SAI_ACL_ACTION_TYPE_SET_DO_NOT_LEARN"},
            {SAI_ACL_ACTION_TYPE_SET_DSCP, "SAI_ACL_ACTION_TYPE_SET_DSCP"},
            {SAI_ACL_ACTION_TYPE_SET_DST_IP, "SAI_ACL_ACTION_TYPE_SET_DST_IP"},
            {SAI_ACL_ACTION_TYPE_SET_DST_IPV6, "SAI_ACL_ACTION_TYPE_SET_DST_IPV6"},
            {SAI_ACL_ACTION_TYPE_SET_DST_MAC, "SAI_ACL_ACTION_TYPE_SET_DST_MAC"},
            {SAI_ACL_ACTION_TYPE_SET_ECMP_HASH_ID, "SAI_ACL_ACTION_TYPE_SET_ECMP_HASH_ID"},
            {SAI_ACL_ACTION_TYPE_SET_ECN, "SAI_ACL_ACTION_TYPE_SET_ECN"},
            {SAI_ACL_ACTION_TYPE_SET_INNER_VLAN_ID, "SAI_ACL_ACTION_TYPE_SET_INNER_VLAN_ID"},
            {SAI_ACL_ACTION_TYPE_SET_INNER_VLAN_PRI, "SAI_ACL_ACTION_TYPE_SET_INNER_VLAN_PRI"},
            {SAI_ACL_ACTION_TYPE_SET_ISOLATION_GROUP, "SAI_ACL_ACTION_TYPE_SET_ISOLATION_GROUP"},
            {SAI_ACL_ACTION_TYPE_SET_L4_DST_PORT, "SAI_ACL_ACTION_TYPE_SET_L4_DST_PORT"},
            {SAI_ACL_ACTION_TYPE_SET_L4_SRC_PORT, "SAI_ACL_ACTION_TYPE_SET_L4_SRC_PORT"},
            {SAI_ACL_ACTION_TYPE_SET_LAG_HASH_ID, "SAI_ACL_ACTION_TYPE_SET_LAG_HASH_ID"},
            {SAI_ACL_ACTION_TYPE_SET_OUTER_VLAN_ID, "SAI_ACL_ACTION_TYPE_SET_OUTER_VLAN_ID"},
            {SAI_ACL_ACTION_TYPE_SET_OUTER_VLAN_PRI, "SAI_ACL_ACTION_TYPE_SET_OUTER_VLAN_PRI"},
            {SAI_ACL_ACTION_TYPE_SET_PACKET_COLOR, "SAI_ACL_ACTION_TYPE_SET_PACKET_COLOR"},
            {SAI_ACL_ACTION_TYPE_SET_POLICER, "SAI_ACL_ACTION_TYPE_SET_POLICER"},
            {SAI_ACL_ACTION_TYPE_SET_SRC_IP, "SAI_ACL_ACTION_TYPE_SET_SRC_IP"},
            {SAI_ACL_ACTION_TYPE_SET_SRC_IPV6, "SAI_ACL_ACTION_TYPE_SET_SRC_IPV6"},
            {SAI_ACL_ACTION_TYPE_SET_SRC_MAC, "SAI_ACL_ACTION_TYPE_SET_SRC_MAC"},
            {SAI_ACL_ACTION_TYPE_SET_TC, "SAI_ACL_ACTION_TYPE_SET_TC"},
            {SAI_ACL_ACTION_TYPE_SET_USER_TRAP_ID, "SAI_ACL_ACTION_TYPE_SET_USER_TRAP_ID"},
            {SAI_ACL_ACTION_TYPE_TAM_INT_OBJECT, "SAI_ACL_ACTION_TYPE_TAM_INT_OBJECT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_bind_point_type_t& x)
{
    static std::map<sai_acl_bind_point_type_t, const char*> strs = {
            {SAI_ACL_BIND_POINT_TYPE_LAG, "SAI_ACL_BIND_POINT_TYPE_LAG"},
            {SAI_ACL_BIND_POINT_TYPE_PORT, "SAI_ACL_BIND_POINT_TYPE_PORT"},
            {SAI_ACL_BIND_POINT_TYPE_ROUTER_INTERFACE, "SAI_ACL_BIND_POINT_TYPE_ROUTER_INTERFACE"},
            {SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF, "SAI_ACL_BIND_POINT_TYPE_ROUTER_INTF"},
            {SAI_ACL_BIND_POINT_TYPE_SWITCH, "SAI_ACL_BIND_POINT_TYPE_SWITCH"},
            {SAI_ACL_BIND_POINT_TYPE_VLAN, "SAI_ACL_BIND_POINT_TYPE_VLAN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_counter_attr_t& x)
{
    static std::map<sai_acl_counter_attr_t, const char*> strs = {
            {SAI_ACL_COUNTER_ATTR_BYTES, "SAI_ACL_COUNTER_ATTR_BYTES"},
            {SAI_ACL_COUNTER_ATTR_CUSTOM_RANGE_END, "SAI_ACL_COUNTER_ATTR_CUSTOM_RANGE_END"},
            {SAI_ACL_COUNTER_ATTR_CUSTOM_RANGE_START, "SAI_ACL_COUNTER_ATTR_CUSTOM_RANGE_START"},
            {SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT, "SAI_ACL_COUNTER_ATTR_ENABLE_BYTE_COUNT"},
            {SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT, "SAI_ACL_COUNTER_ATTR_ENABLE_PACKET_COUNT"},
            {SAI_ACL_COUNTER_ATTR_PACKETS, "SAI_ACL_COUNTER_ATTR_PACKETS"},
            {SAI_ACL_COUNTER_ATTR_TABLE_ID, "SAI_ACL_COUNTER_ATTR_TABLE_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_dtel_flow_op_t& x)
{
    static std::map<sai_acl_dtel_flow_op_t, const char*> strs = {
            {SAI_ACL_DTEL_FLOW_OP_INT, "SAI_ACL_DTEL_FLOW_OP_INT"},
            {SAI_ACL_DTEL_FLOW_OP_IOAM, "SAI_ACL_DTEL_FLOW_OP_IOAM"},
            {SAI_ACL_DTEL_FLOW_OP_NOP, "SAI_ACL_DTEL_FLOW_OP_NOP"},
            {SAI_ACL_DTEL_FLOW_OP_POSTCARD, "SAI_ACL_DTEL_FLOW_OP_POSTCARD"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_entry_attr_t& x)
{
    static std::map<sai_acl_entry_attr_t, const char*> strs = {
            {SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP, "SAI_ACL_ENTRY_ATTR_ACTION_ACL_DTEL_FLOW_OP"},
            {SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID, "SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_ID"},
            {SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI, "SAI_ACL_ENTRY_ATTR_ACTION_ADD_VLAN_PRI"},
            {SAI_ACL_ENTRY_ATTR_ACTION_COUNTER, "SAI_ACL_ENTRY_ATTR_ACTION_COUNTER"},
            {SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL, "SAI_ACL_ENTRY_ATTR_ACTION_DECREMENT_TTL"},
            {SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE, "SAI_ACL_ENTRY_ATTR_ACTION_DTEL_DROP_REPORT_ENABLE"},
            {SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT, "SAI_ACL_ENTRY_ATTR_ACTION_DTEL_FLOW_SAMPLE_PERCENT"},
            {SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION, "SAI_ACL_ENTRY_ATTR_ACTION_DTEL_INT_SESSION"},
            {SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS, "SAI_ACL_ENTRY_ATTR_ACTION_DTEL_REPORT_ALL_PACKETS"},
            {SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE, "SAI_ACL_ENTRY_ATTR_ACTION_DTEL_TAIL_DROP_REPORT_ENABLE"},
            {SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST, "SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_BLOCK_PORT_LIST"},
            {SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE, "SAI_ACL_ENTRY_ATTR_ACTION_EGRESS_SAMPLEPACKET_ENABLE"},
            {SAI_ACL_ENTRY_ATTR_ACTION_END, "SAI_ACL_ENTRY_ATTR_ACTION_END"},
            {SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP, "SAI_ACL_ENTRY_ATTR_ACTION_ENDPOINT_IP"},
            {SAI_ACL_ENTRY_ATTR_ACTION_FLOOD, "SAI_ACL_ENTRY_ATTR_ACTION_FLOOD"},
            {SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE, "SAI_ACL_ENTRY_ATTR_ACTION_INGRESS_SAMPLEPACKET_ENABLE"},
            {SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE, "SAI_ACL_ENTRY_ATTR_ACTION_INT_DELETE"},
            {SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT, "SAI_ACL_ENTRY_ATTR_ACTION_INT_INSERT"},
            {SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS, "SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_DROPS"},
            {SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW, "SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_FLOW"},
            {SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS, "SAI_ACL_ENTRY_ATTR_ACTION_INT_REPORT_TAIL_DROPS"},
            {SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW, "SAI_ACL_ENTRY_ATTR_ACTION_MACSEC_FLOW"},
            {SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS, "SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_EGRESS"},
            {SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS, "SAI_ACL_ENTRY_ATTR_ACTION_MIRROR_INGRESS"},
            {SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT, "SAI_ACL_ENTRY_ATTR_ACTION_NO_NAT"},
            {SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION, "SAI_ACL_ENTRY_ATTR_ACTION_PACKET_ACTION"},
            {SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT, "SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT"},
            {SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST, "SAI_ACL_ENTRY_ATTR_ACTION_REDIRECT_LIST"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA, "SAI_ACL_ENTRY_ATTR_ACTION_SET_ACL_META_DATA"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN, "SAI_ACL_ENTRY_ATTR_ACTION_SET_DO_NOT_LEARN"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP, "SAI_ACL_ENTRY_ATTR_ACTION_SET_DSCP"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP, "SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IP"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6, "SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_IPV6"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC, "SAI_ACL_ENTRY_ATTR_ACTION_SET_DST_MAC"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID, "SAI_ACL_ENTRY_ATTR_ACTION_SET_ECMP_HASH_ID"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN, "SAI_ACL_ENTRY_ATTR_ACTION_SET_ECN"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID, "SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_ID"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI, "SAI_ACL_ENTRY_ATTR_ACTION_SET_INNER_VLAN_PRI"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP, "SAI_ACL_ENTRY_ATTR_ACTION_SET_ISOLATION_GROUP"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT, "SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_DST_PORT"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT, "SAI_ACL_ENTRY_ATTR_ACTION_SET_L4_SRC_PORT"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID, "SAI_ACL_ENTRY_ATTR_ACTION_SET_LAG_HASH_ID"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID, "SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_ID"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI, "SAI_ACL_ENTRY_ATTR_ACTION_SET_OUTER_VLAN_PRI"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR, "SAI_ACL_ENTRY_ATTR_ACTION_SET_PACKET_COLOR"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER, "SAI_ACL_ENTRY_ATTR_ACTION_SET_POLICER"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP, "SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IP"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6, "SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_IPV6"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC, "SAI_ACL_ENTRY_ATTR_ACTION_SET_SRC_MAC"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_TC, "SAI_ACL_ENTRY_ATTR_ACTION_SET_TC"},
            {SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID, "SAI_ACL_ENTRY_ATTR_ACTION_SET_USER_TRAP_ID"},
            {SAI_ACL_ENTRY_ATTR_ACTION_START, "SAI_ACL_ENTRY_ATTR_ACTION_START"},
            {SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT, "SAI_ACL_ENTRY_ATTR_ACTION_TAM_INT_OBJECT"},
            {SAI_ACL_ENTRY_ATTR_ADMIN_STATE, "SAI_ACL_ENTRY_ATTR_ADMIN_STATE"},
            {SAI_ACL_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_ACL_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_ACL_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_ACL_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG, "SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_FRAG"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE, "SAI_ACL_ENTRY_ATTR_FIELD_ACL_IP_TYPE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE, "SAI_ACL_ENTRY_ATTR_FIELD_ACL_RANGE_TYPE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META, "SAI_ACL_ENTRY_ATTR_FIELD_ACL_USER_META"},
            {SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME, "SAI_ACL_ENTRY_ATTR_FIELD_AETH_SYNDROME"},
            {SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE, "SAI_ACL_ENTRY_ATTR_FIELD_BTH_OPCODE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_DSCP, "SAI_ACL_ENTRY_ATTR_FIELD_DSCP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_DST_IP, "SAI_ACL_ENTRY_ATTR_FIELD_DST_IP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6, "SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6"},
            {SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0, "SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD0"},
            {SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1, "SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD1"},
            {SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2, "SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD2"},
            {SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3, "SAI_ACL_ENTRY_ATTR_FIELD_DST_IPV6_WORD3"},
            {SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC, "SAI_ACL_ENTRY_ATTR_FIELD_DST_MAC"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ECN, "SAI_ACL_ENTRY_ATTR_FIELD_ECN"},
            {SAI_ACL_ENTRY_ATTR_FIELD_END, "SAI_ACL_ENTRY_ATTR_FIELD_END"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE, "SAI_ACL_ENTRY_ATTR_FIELD_ETHER_TYPE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META, "SAI_ACL_ENTRY_ATTR_FIELD_FDB_DST_USER_META"},
            {SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT, "SAI_ACL_ENTRY_ATTR_FIELD_FDB_NPU_META_DST_HIT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY, "SAI_ACL_ENTRY_ATTR_FIELD_GRE_KEY"},
            {SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG, "SAI_ACL_ENTRY_ATTR_FIELD_HAS_VLAN_TAG"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE, "SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_CODE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE, "SAI_ACL_ENTRY_ATTR_FIELD_ICMPV6_TYPE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE, "SAI_ACL_ENTRY_ATTR_FIELD_ICMP_CODE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE, "SAI_ACL_ENTRY_ATTR_FIELD_ICMP_TYPE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_DST_IPV6"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_ETHER_TYPE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_IP_PROTOCOL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_DST_PORT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_L4_SRC_PORT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_SRC_IPV6"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_CFI"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_ID"},
            {SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI, "SAI_ACL_ENTRY_ATTR_FIELD_INNER_VLAN_PRI"},
            {SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT, "SAI_ACL_ENTRY_ATTR_FIELD_IN_PORT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS, "SAI_ACL_ENTRY_ATTR_FIELD_IN_PORTS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL, "SAI_ACL_ENTRY_ATTR_FIELD_IPV6_FLOW_LABEL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER, "SAI_ACL_ENTRY_ATTR_FIELD_IPV6_NEXT_HEADER"},
            {SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS, "SAI_ACL_ENTRY_ATTR_FIELD_IP_FLAGS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION, "SAI_ACL_ENTRY_ATTR_FIELD_IP_IDENTIFICATION"},
            {SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL, "SAI_ACL_ENTRY_ATTR_FIELD_IP_PROTOCOL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT, "SAI_ACL_ENTRY_ATTR_FIELD_L4_DST_PORT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT, "SAI_ACL_ENTRY_ATTR_FIELD_L4_SRC_PORT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI, "SAI_ACL_ENTRY_ATTR_FIELD_MACSEC_SCI"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_BOS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_EXP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_LABEL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL0_TTL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_BOS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_EXP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_LABEL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL1_TTL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_BOS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_EXP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_LABEL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL2_TTL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_BOS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_EXP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_LABEL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL3_TTL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_BOS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_EXP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_LABEL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL, "SAI_ACL_ENTRY_ATTR_FIELD_MPLS_LABEL4_TTL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META, "SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_DST_USER_META"},
            {SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT, "SAI_ACL_ENTRY_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI, "SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_CFI"},
            {SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID, "SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_ID"},
            {SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI, "SAI_ACL_ENTRY_ATTR_FIELD_OUTER_VLAN_PRI"},
            {SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT, "SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS, "SAI_ACL_ENTRY_ATTR_FIELD_OUT_PORTS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN, "SAI_ACL_ENTRY_ATTR_FIELD_PACKET_VLAN"},
            {SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META, "SAI_ACL_ENTRY_ATTR_FIELD_PORT_USER_META"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META, "SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_DST_USER_META"},
            {SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT, "SAI_ACL_ENTRY_ATTR_FIELD_ROUTE_NPU_META_DST_HIT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP, "SAI_ACL_ENTRY_ATTR_FIELD_SRC_IP"},
            {SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6, "SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6"},
            {SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0, "SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD0"},
            {SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1, "SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD1"},
            {SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2, "SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD2"},
            {SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3, "SAI_ACL_ENTRY_ATTR_FIELD_SRC_IPV6_WORD3"},
            {SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC, "SAI_ACL_ENTRY_ATTR_FIELD_SRC_MAC"},
            {SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT, "SAI_ACL_ENTRY_ATTR_FIELD_SRC_PORT"},
            {SAI_ACL_ENTRY_ATTR_FIELD_START, "SAI_ACL_ENTRY_ATTR_FIELD_START"},
            {SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE, "SAI_ACL_ENTRY_ATTR_FIELD_TAM_INT_TYPE"},
            {SAI_ACL_ENTRY_ATTR_FIELD_TC, "SAI_ACL_ENTRY_ATTR_FIELD_TC"},
            {SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS, "SAI_ACL_ENTRY_ATTR_FIELD_TCP_FLAGS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_TOS, "SAI_ACL_ENTRY_ATTR_FIELD_TOS"},
            {SAI_ACL_ENTRY_ATTR_FIELD_TTL, "SAI_ACL_ENTRY_ATTR_FIELD_TTL"},
            {SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI, "SAI_ACL_ENTRY_ATTR_FIELD_TUNNEL_VNI"},
            {SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META, "SAI_ACL_ENTRY_ATTR_FIELD_VLAN_USER_META"},
            {SAI_ACL_ENTRY_ATTR_PRIORITY, "SAI_ACL_ENTRY_ATTR_PRIORITY"},
            {SAI_ACL_ENTRY_ATTR_TABLE_ID, "SAI_ACL_ENTRY_ATTR_TABLE_ID"},
            {SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX, "SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MAX"},
            {SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN, "SAI_ACL_ENTRY_ATTR_USER_DEFINED_FIELD_GROUP_MIN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_ip_frag_t& x)
{
    static std::map<sai_acl_ip_frag_t, const char*> strs = {
            {SAI_ACL_IP_FRAG_ANY, "SAI_ACL_IP_FRAG_ANY"},
            {SAI_ACL_IP_FRAG_HEAD, "SAI_ACL_IP_FRAG_HEAD"},
            {SAI_ACL_IP_FRAG_NON_FRAG, "SAI_ACL_IP_FRAG_NON_FRAG"},
            {SAI_ACL_IP_FRAG_NON_FRAG_OR_HEAD, "SAI_ACL_IP_FRAG_NON_FRAG_OR_HEAD"},
            {SAI_ACL_IP_FRAG_NON_HEAD, "SAI_ACL_IP_FRAG_NON_HEAD"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_ip_type_t& x)
{
    static std::map<sai_acl_ip_type_t, const char*> strs = {
            {SAI_ACL_IP_TYPE_ANY, "SAI_ACL_IP_TYPE_ANY"},
            {SAI_ACL_IP_TYPE_ARP, "SAI_ACL_IP_TYPE_ARP"},
            {SAI_ACL_IP_TYPE_ARP_REPLY, "SAI_ACL_IP_TYPE_ARP_REPLY"},
            {SAI_ACL_IP_TYPE_ARP_REQUEST, "SAI_ACL_IP_TYPE_ARP_REQUEST"},
            {SAI_ACL_IP_TYPE_IP, "SAI_ACL_IP_TYPE_IP"},
            {SAI_ACL_IP_TYPE_IPV4ANY, "SAI_ACL_IP_TYPE_IPV4ANY"},
            {SAI_ACL_IP_TYPE_IPV6ANY, "SAI_ACL_IP_TYPE_IPV6ANY"},
            {SAI_ACL_IP_TYPE_NON_IP, "SAI_ACL_IP_TYPE_NON_IP"},
            {SAI_ACL_IP_TYPE_NON_IPV4, "SAI_ACL_IP_TYPE_NON_IPV4"},
            {SAI_ACL_IP_TYPE_NON_IPV6, "SAI_ACL_IP_TYPE_NON_IPV6"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_range_attr_t& x)
{
    static std::map<sai_acl_range_attr_t, const char*> strs = {
            {SAI_ACL_RANGE_ATTR_CUSTOM_RANGE_END, "SAI_ACL_RANGE_ATTR_CUSTOM_RANGE_END"},
            {SAI_ACL_RANGE_ATTR_CUSTOM_RANGE_START, "SAI_ACL_RANGE_ATTR_CUSTOM_RANGE_START"},
            {SAI_ACL_RANGE_ATTR_LIMIT, "SAI_ACL_RANGE_ATTR_LIMIT"},
            {SAI_ACL_RANGE_ATTR_TYPE, "SAI_ACL_RANGE_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_range_type_t& x)
{
    static std::map<sai_acl_range_type_t, const char*> strs = {
            {SAI_ACL_RANGE_TYPE_INNER_VLAN, "SAI_ACL_RANGE_TYPE_INNER_VLAN"},
            {SAI_ACL_RANGE_TYPE_L4_DST_PORT_RANGE, "SAI_ACL_RANGE_TYPE_L4_DST_PORT_RANGE"},
            {SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE, "SAI_ACL_RANGE_TYPE_L4_SRC_PORT_RANGE"},
            {SAI_ACL_RANGE_TYPE_OUTER_VLAN, "SAI_ACL_RANGE_TYPE_OUTER_VLAN"},
            {SAI_ACL_RANGE_TYPE_PACKET_LENGTH, "SAI_ACL_RANGE_TYPE_PACKET_LENGTH"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_stage_t& x)
{
    static std::map<sai_acl_stage_t, const char*> strs = {
            {SAI_ACL_STAGE_EGRESS, "SAI_ACL_STAGE_EGRESS"},
            {SAI_ACL_STAGE_EGRESS_MACSEC, "SAI_ACL_STAGE_EGRESS_MACSEC"},
            {SAI_ACL_STAGE_INGRESS, "SAI_ACL_STAGE_INGRESS"},
            {SAI_ACL_STAGE_INGRESS_MACSEC, "SAI_ACL_STAGE_INGRESS_MACSEC"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_table_attr_t& x)
{
    static std::map<sai_acl_table_attr_t, const char*> strs = {
            {SAI_ACL_TABLE_ATTR_ACL_ACTION_TYPE_LIST, "SAI_ACL_TABLE_ATTR_ACL_ACTION_TYPE_LIST"},
            {SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST, "SAI_ACL_TABLE_ATTR_ACL_BIND_POINT_TYPE_LIST"},
            {SAI_ACL_TABLE_ATTR_ACL_STAGE, "SAI_ACL_TABLE_ATTR_ACL_STAGE"},
            {SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_COUNTER, "SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_COUNTER"},
            {SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY, "SAI_ACL_TABLE_ATTR_AVAILABLE_ACL_ENTRY"},
            {SAI_ACL_TABLE_ATTR_CUSTOM_RANGE_END, "SAI_ACL_TABLE_ATTR_CUSTOM_RANGE_END"},
            {SAI_ACL_TABLE_ATTR_CUSTOM_RANGE_START, "SAI_ACL_TABLE_ATTR_CUSTOM_RANGE_START"},
            {SAI_ACL_TABLE_ATTR_ENTRY_LIST, "SAI_ACL_TABLE_ATTR_ENTRY_LIST"},
            {SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_FRAG, "SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_FRAG"},
            {SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE, "SAI_ACL_TABLE_ATTR_FIELD_ACL_IP_TYPE"},
            {SAI_ACL_TABLE_ATTR_FIELD_ACL_RANGE_TYPE, "SAI_ACL_TABLE_ATTR_FIELD_ACL_RANGE_TYPE"},
            {SAI_ACL_TABLE_ATTR_FIELD_ACL_USER_META, "SAI_ACL_TABLE_ATTR_FIELD_ACL_USER_META"},
            {SAI_ACL_TABLE_ATTR_FIELD_AETH_SYNDROME, "SAI_ACL_TABLE_ATTR_FIELD_AETH_SYNDROME"},
            {SAI_ACL_TABLE_ATTR_FIELD_BTH_OPCODE, "SAI_ACL_TABLE_ATTR_FIELD_BTH_OPCODE"},
            {SAI_ACL_TABLE_ATTR_FIELD_DSCP, "SAI_ACL_TABLE_ATTR_FIELD_DSCP"},
            {SAI_ACL_TABLE_ATTR_FIELD_DST_IP, "SAI_ACL_TABLE_ATTR_FIELD_DST_IP"},
            {SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6, "SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6"},
            {SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD0, "SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD0"},
            {SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD1, "SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD1"},
            {SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2, "SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD2"},
            {SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3, "SAI_ACL_TABLE_ATTR_FIELD_DST_IPV6_WORD3"},
            {SAI_ACL_TABLE_ATTR_FIELD_DST_MAC, "SAI_ACL_TABLE_ATTR_FIELD_DST_MAC"},
            {SAI_ACL_TABLE_ATTR_FIELD_ECN, "SAI_ACL_TABLE_ATTR_FIELD_ECN"},
            {SAI_ACL_TABLE_ATTR_FIELD_END, "SAI_ACL_TABLE_ATTR_FIELD_END"},
            {SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE, "SAI_ACL_TABLE_ATTR_FIELD_ETHER_TYPE"},
            {SAI_ACL_TABLE_ATTR_FIELD_FDB_DST_USER_META, "SAI_ACL_TABLE_ATTR_FIELD_FDB_DST_USER_META"},
            {SAI_ACL_TABLE_ATTR_FIELD_FDB_NPU_META_DST_HIT, "SAI_ACL_TABLE_ATTR_FIELD_FDB_NPU_META_DST_HIT"},
            {SAI_ACL_TABLE_ATTR_FIELD_GRE_KEY, "SAI_ACL_TABLE_ATTR_FIELD_GRE_KEY"},
            {SAI_ACL_TABLE_ATTR_FIELD_HAS_VLAN_TAG, "SAI_ACL_TABLE_ATTR_FIELD_HAS_VLAN_TAG"},
            {SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_CODE, "SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_CODE"},
            {SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE, "SAI_ACL_TABLE_ATTR_FIELD_ICMPV6_TYPE"},
            {SAI_ACL_TABLE_ATTR_FIELD_ICMP_CODE, "SAI_ACL_TABLE_ATTR_FIELD_ICMP_CODE"},
            {SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE, "SAI_ACL_TABLE_ATTR_FIELD_ICMP_TYPE"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IP, "SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IP"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IPV6, "SAI_ACL_TABLE_ATTR_FIELD_INNER_DST_IPV6"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_ETHER_TYPE, "SAI_ACL_TABLE_ATTR_FIELD_INNER_ETHER_TYPE"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_IP_PROTOCOL, "SAI_ACL_TABLE_ATTR_FIELD_INNER_IP_PROTOCOL"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_DST_PORT, "SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_DST_PORT"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_SRC_PORT, "SAI_ACL_TABLE_ATTR_FIELD_INNER_L4_SRC_PORT"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IP, "SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IP"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IPV6, "SAI_ACL_TABLE_ATTR_FIELD_INNER_SRC_IPV6"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_CFI, "SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_CFI"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID, "SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_ID"},
            {SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI, "SAI_ACL_TABLE_ATTR_FIELD_INNER_VLAN_PRI"},
            {SAI_ACL_TABLE_ATTR_FIELD_IN_PORT, "SAI_ACL_TABLE_ATTR_FIELD_IN_PORT"},
            {SAI_ACL_TABLE_ATTR_FIELD_IN_PORTS, "SAI_ACL_TABLE_ATTR_FIELD_IN_PORTS"},
            {SAI_ACL_TABLE_ATTR_FIELD_IPV6_FLOW_LABEL, "SAI_ACL_TABLE_ATTR_FIELD_IPV6_FLOW_LABEL"},
            {SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER, "SAI_ACL_TABLE_ATTR_FIELD_IPV6_NEXT_HEADER"},
            {SAI_ACL_TABLE_ATTR_FIELD_IP_FLAGS, "SAI_ACL_TABLE_ATTR_FIELD_IP_FLAGS"},
            {SAI_ACL_TABLE_ATTR_FIELD_IP_IDENTIFICATION, "SAI_ACL_TABLE_ATTR_FIELD_IP_IDENTIFICATION"},
            {SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL, "SAI_ACL_TABLE_ATTR_FIELD_IP_PROTOCOL"},
            {SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT, "SAI_ACL_TABLE_ATTR_FIELD_L4_DST_PORT"},
            {SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT, "SAI_ACL_TABLE_ATTR_FIELD_L4_SRC_PORT"},
            {SAI_ACL_TABLE_ATTR_FIELD_MACSEC_SCI, "SAI_ACL_TABLE_ATTR_FIELD_MACSEC_SCI"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_BOS, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_BOS"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_EXP, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_EXP"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_LABEL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_LABEL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_TTL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL0_TTL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_BOS, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_BOS"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_EXP, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_EXP"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_LABEL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_LABEL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_TTL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL1_TTL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_BOS, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_BOS"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_EXP, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_EXP"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_LABEL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_LABEL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_TTL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL2_TTL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_BOS, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_BOS"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_EXP, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_EXP"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_LABEL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_LABEL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_TTL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL3_TTL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_BOS, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_BOS"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_EXP, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_EXP"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_LABEL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_LABEL"},
            {SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_TTL, "SAI_ACL_TABLE_ATTR_FIELD_MPLS_LABEL4_TTL"},
            {SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_DST_USER_META, "SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_DST_USER_META"},
            {SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT, "SAI_ACL_TABLE_ATTR_FIELD_NEIGHBOR_NPU_META_DST_HIT"},
            {SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_CFI, "SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_CFI"},
            {SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID, "SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_ID"},
            {SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI, "SAI_ACL_TABLE_ATTR_FIELD_OUTER_VLAN_PRI"},
            {SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT, "SAI_ACL_TABLE_ATTR_FIELD_OUT_PORT"},
            {SAI_ACL_TABLE_ATTR_FIELD_OUT_PORTS, "SAI_ACL_TABLE_ATTR_FIELD_OUT_PORTS"},
            {SAI_ACL_TABLE_ATTR_FIELD_PACKET_VLAN, "SAI_ACL_TABLE_ATTR_FIELD_PACKET_VLAN"},
            {SAI_ACL_TABLE_ATTR_FIELD_PORT_USER_META, "SAI_ACL_TABLE_ATTR_FIELD_PORT_USER_META"},
            {SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META, "SAI_ACL_TABLE_ATTR_FIELD_ROUTE_DST_USER_META"},
            {SAI_ACL_TABLE_ATTR_FIELD_ROUTE_NPU_META_DST_HIT, "SAI_ACL_TABLE_ATTR_FIELD_ROUTE_NPU_META_DST_HIT"},
            {SAI_ACL_TABLE_ATTR_FIELD_SRC_IP, "SAI_ACL_TABLE_ATTR_FIELD_SRC_IP"},
            {SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6, "SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6"},
            {SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD0, "SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD0"},
            {SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD1, "SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD1"},
            {SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD2, "SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD2"},
            {SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD3, "SAI_ACL_TABLE_ATTR_FIELD_SRC_IPV6_WORD3"},
            {SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC, "SAI_ACL_TABLE_ATTR_FIELD_SRC_MAC"},
            {SAI_ACL_TABLE_ATTR_FIELD_SRC_PORT, "SAI_ACL_TABLE_ATTR_FIELD_SRC_PORT"},
            {SAI_ACL_TABLE_ATTR_FIELD_START, "SAI_ACL_TABLE_ATTR_FIELD_START"},
            {SAI_ACL_TABLE_ATTR_FIELD_TAM_INT_TYPE, "SAI_ACL_TABLE_ATTR_FIELD_TAM_INT_TYPE"},
            {SAI_ACL_TABLE_ATTR_FIELD_TC, "SAI_ACL_TABLE_ATTR_FIELD_TC"},
            {SAI_ACL_TABLE_ATTR_FIELD_TCP_FLAGS, "SAI_ACL_TABLE_ATTR_FIELD_TCP_FLAGS"},
            {SAI_ACL_TABLE_ATTR_FIELD_TOS, "SAI_ACL_TABLE_ATTR_FIELD_TOS"},
            {SAI_ACL_TABLE_ATTR_FIELD_TTL, "SAI_ACL_TABLE_ATTR_FIELD_TTL"},
            {SAI_ACL_TABLE_ATTR_FIELD_TUNNEL_VNI, "SAI_ACL_TABLE_ATTR_FIELD_TUNNEL_VNI"},
            {SAI_ACL_TABLE_ATTR_FIELD_VLAN_USER_META, "SAI_ACL_TABLE_ATTR_FIELD_VLAN_USER_META"},
            {SAI_ACL_TABLE_ATTR_SIZE, "SAI_ACL_TABLE_ATTR_SIZE"},
            {SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX, "SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MAX"},
            {SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN, "SAI_ACL_TABLE_ATTR_USER_DEFINED_FIELD_GROUP_MIN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_table_group_attr_t& x)
{
    static std::map<sai_acl_table_group_attr_t, const char*> strs = {
            {SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST, "SAI_ACL_TABLE_GROUP_ATTR_ACL_BIND_POINT_TYPE_LIST"},
            {SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE, "SAI_ACL_TABLE_GROUP_ATTR_ACL_STAGE"},
            {SAI_ACL_TABLE_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_ACL_TABLE_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_ACL_TABLE_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_ACL_TABLE_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST, "SAI_ACL_TABLE_GROUP_ATTR_MEMBER_LIST"},
            {SAI_ACL_TABLE_GROUP_ATTR_TYPE, "SAI_ACL_TABLE_GROUP_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_table_group_member_attr_t& x)
{
    static std::map<sai_acl_table_group_member_attr_t, const char*> strs = {
            {SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID, "SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_GROUP_ID"},
            {SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID, "SAI_ACL_TABLE_GROUP_MEMBER_ATTR_ACL_TABLE_ID"},
            {SAI_ACL_TABLE_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END, "SAI_ACL_TABLE_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END"},
            {SAI_ACL_TABLE_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START, "SAI_ACL_TABLE_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START"},
            {SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY, "SAI_ACL_TABLE_GROUP_MEMBER_ATTR_PRIORITY"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_acl_table_group_type_t& x)
{
    static std::map<sai_acl_table_group_type_t, const char*> strs = {
            {SAI_ACL_TABLE_GROUP_TYPE_PARALLEL, "SAI_ACL_TABLE_GROUP_TYPE_PARALLEL"},
            {SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL, "SAI_ACL_TABLE_GROUP_TYPE_SEQUENTIAL"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_api_t& x)
{
    static std::map<sai_api_t, const char*> strs = {
            {SAI_API_ACL, "SAI_API_ACL"},
            {SAI_API_BFD, "SAI_API_BFD"},
            {SAI_API_BRIDGE, "SAI_API_BRIDGE"},
            {SAI_API_BUFFER, "SAI_API_BUFFER"},
            {SAI_API_COUNTER, "SAI_API_COUNTER"},
            {SAI_API_DEBUG_COUNTER, "SAI_API_DEBUG_COUNTER"},
            {SAI_API_DTEL, "SAI_API_DTEL"},
            {SAI_API_FDB, "SAI_API_FDB"},
            {SAI_API_HASH, "SAI_API_HASH"},
            {SAI_API_HOSTIF, "SAI_API_HOSTIF"},
            {SAI_API_IPMC, "SAI_API_IPMC"},
            {SAI_API_IPMC_GROUP, "SAI_API_IPMC_GROUP"},
            {SAI_API_ISOLATION_GROUP, "SAI_API_ISOLATION_GROUP"},
            {SAI_API_L2MC, "SAI_API_L2MC"},
            {SAI_API_L2MC_GROUP, "SAI_API_L2MC_GROUP"},
            {SAI_API_LAG, "SAI_API_LAG"},
            {SAI_API_MACSEC, "SAI_API_MACSEC"},
            {SAI_API_MAX, "SAI_API_MAX"},
            {SAI_API_MCAST_FDB, "SAI_API_MCAST_FDB"},
            {SAI_API_MIRROR, "SAI_API_MIRROR"},
            {SAI_API_MPLS, "SAI_API_MPLS"},
            {SAI_API_NAT, "SAI_API_NAT"},
            {SAI_API_NEIGHBOR, "SAI_API_NEIGHBOR"},
            {SAI_API_NEXT_HOP, "SAI_API_NEXT_HOP"},
            {SAI_API_NEXT_HOP_GROUP, "SAI_API_NEXT_HOP_GROUP"},
            {SAI_API_POLICER, "SAI_API_POLICER"},
            {SAI_API_PORT, "SAI_API_PORT"},
            {SAI_API_QOS_MAP, "SAI_API_QOS_MAP"},
            {SAI_API_QUEUE, "SAI_API_QUEUE"},
            {SAI_API_ROUTE, "SAI_API_ROUTE"},
            {SAI_API_ROUTER_INTERFACE, "SAI_API_ROUTER_INTERFACE"},
            {SAI_API_RPF_GROUP, "SAI_API_RPF_GROUP"},
            {SAI_API_SAMPLEPACKET, "SAI_API_SAMPLEPACKET"},
            {SAI_API_SCHEDULER, "SAI_API_SCHEDULER"},
            {SAI_API_SCHEDULER_GROUP, "SAI_API_SCHEDULER_GROUP"},
            {SAI_API_SEGMENTROUTE, "SAI_API_SEGMENTROUTE"},
            {SAI_API_STP, "SAI_API_STP"},
            {SAI_API_SWITCH, "SAI_API_SWITCH"},
            {SAI_API_SYSTEM_PORT, "SAI_API_SYSTEM_PORT"},
            {SAI_API_TAM, "SAI_API_TAM"},
            {SAI_API_TUNNEL, "SAI_API_TUNNEL"},
            {SAI_API_UDF, "SAI_API_UDF"},
            {SAI_API_UNSPECIFIED, "SAI_API_UNSPECIFIED"},
            {SAI_API_VIRTUAL_ROUTER, "SAI_API_VIRTUAL_ROUTER"},
            {SAI_API_VLAN, "SAI_API_VLAN"},
            {SAI_API_WRED, "SAI_API_WRED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bfd_encapsulation_type_t& x)
{
    static std::map<sai_bfd_encapsulation_type_t, const char*> strs = {
            {SAI_BFD_ENCAPSULATION_TYPE_IP_IN_IP, "SAI_BFD_ENCAPSULATION_TYPE_IP_IN_IP"},
            {SAI_BFD_ENCAPSULATION_TYPE_L3_GRE_TUNNEL, "SAI_BFD_ENCAPSULATION_TYPE_L3_GRE_TUNNEL"},
            {SAI_BFD_ENCAPSULATION_TYPE_NONE, "SAI_BFD_ENCAPSULATION_TYPE_NONE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bfd_session_attr_t& x)
{
    static std::map<sai_bfd_session_attr_t, const char*> strs = {
            {SAI_BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE, "SAI_BFD_SESSION_ATTR_BFD_ENCAPSULATION_TYPE"},
            {SAI_BFD_SESSION_ATTR_CBIT, "SAI_BFD_SESSION_ATTR_CBIT"},
            {SAI_BFD_SESSION_ATTR_CUSTOM_RANGE_END, "SAI_BFD_SESSION_ATTR_CUSTOM_RANGE_END"},
            {SAI_BFD_SESSION_ATTR_CUSTOM_RANGE_START, "SAI_BFD_SESSION_ATTR_CUSTOM_RANGE_START"},
            {SAI_BFD_SESSION_ATTR_DST_IP_ADDRESS, "SAI_BFD_SESSION_ATTR_DST_IP_ADDRESS"},
            {SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS, "SAI_BFD_SESSION_ATTR_DST_MAC_ADDRESS"},
            {SAI_BFD_SESSION_ATTR_ECHO_ENABLE, "SAI_BFD_SESSION_ATTR_ECHO_ENABLE"},
            {SAI_BFD_SESSION_ATTR_HW_LOOKUP_VALID, "SAI_BFD_SESSION_ATTR_HW_LOOKUP_VALID"},
            {SAI_BFD_SESSION_ATTR_IPHDR_VERSION, "SAI_BFD_SESSION_ATTR_IPHDR_VERSION"},
            {SAI_BFD_SESSION_ATTR_LOCAL_DIAG, "SAI_BFD_SESSION_ATTR_LOCAL_DIAG"},
            {SAI_BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR, "SAI_BFD_SESSION_ATTR_LOCAL_DISCRIMINATOR"},
            {SAI_BFD_SESSION_ATTR_MIN_RX, "SAI_BFD_SESSION_ATTR_MIN_RX"},
            {SAI_BFD_SESSION_ATTR_MIN_TX, "SAI_BFD_SESSION_ATTR_MIN_TX"},
            {SAI_BFD_SESSION_ATTR_MULTIHOP, "SAI_BFD_SESSION_ATTR_MULTIHOP"},
            {SAI_BFD_SESSION_ATTR_MULTIPLIER, "SAI_BFD_SESSION_ATTR_MULTIPLIER"},
            {SAI_BFD_SESSION_ATTR_NEGOTIATED_RX, "SAI_BFD_SESSION_ATTR_NEGOTIATED_RX"},
            {SAI_BFD_SESSION_ATTR_NEGOTIATED_TX, "SAI_BFD_SESSION_ATTR_NEGOTIATED_TX"},
            {SAI_BFD_SESSION_ATTR_OFFLOAD_TYPE, "SAI_BFD_SESSION_ATTR_OFFLOAD_TYPE"},
            {SAI_BFD_SESSION_ATTR_PORT, "SAI_BFD_SESSION_ATTR_PORT"},
            {SAI_BFD_SESSION_ATTR_REMOTE_DIAG, "SAI_BFD_SESSION_ATTR_REMOTE_DIAG"},
            {SAI_BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR, "SAI_BFD_SESSION_ATTR_REMOTE_DISCRIMINATOR"},
            {SAI_BFD_SESSION_ATTR_REMOTE_MIN_RX, "SAI_BFD_SESSION_ATTR_REMOTE_MIN_RX"},
            {SAI_BFD_SESSION_ATTR_REMOTE_MIN_TX, "SAI_BFD_SESSION_ATTR_REMOTE_MIN_TX"},
            {SAI_BFD_SESSION_ATTR_REMOTE_MULTIPLIER, "SAI_BFD_SESSION_ATTR_REMOTE_MULTIPLIER"},
            {SAI_BFD_SESSION_ATTR_SRC_IP_ADDRESS, "SAI_BFD_SESSION_ATTR_SRC_IP_ADDRESS"},
            {SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS, "SAI_BFD_SESSION_ATTR_SRC_MAC_ADDRESS"},
            {SAI_BFD_SESSION_ATTR_STATE, "SAI_BFD_SESSION_ATTR_STATE"},
            {SAI_BFD_SESSION_ATTR_TC, "SAI_BFD_SESSION_ATTR_TC"},
            {SAI_BFD_SESSION_ATTR_TOS, "SAI_BFD_SESSION_ATTR_TOS"},
            {SAI_BFD_SESSION_ATTR_TTL, "SAI_BFD_SESSION_ATTR_TTL"},
            {SAI_BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS, "SAI_BFD_SESSION_ATTR_TUNNEL_DST_IP_ADDRESS"},
            {SAI_BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS, "SAI_BFD_SESSION_ATTR_TUNNEL_SRC_IP_ADDRESS"},
            {SAI_BFD_SESSION_ATTR_TUNNEL_TOS, "SAI_BFD_SESSION_ATTR_TUNNEL_TOS"},
            {SAI_BFD_SESSION_ATTR_TUNNEL_TTL, "SAI_BFD_SESSION_ATTR_TUNNEL_TTL"},
            {SAI_BFD_SESSION_ATTR_TYPE, "SAI_BFD_SESSION_ATTR_TYPE"},
            {SAI_BFD_SESSION_ATTR_UDP_SRC_PORT, "SAI_BFD_SESSION_ATTR_UDP_SRC_PORT"},
            {SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER, "SAI_BFD_SESSION_ATTR_VIRTUAL_ROUTER"},
            {SAI_BFD_SESSION_ATTR_VLAN_CFI, "SAI_BFD_SESSION_ATTR_VLAN_CFI"},
            {SAI_BFD_SESSION_ATTR_VLAN_HEADER_VALID, "SAI_BFD_SESSION_ATTR_VLAN_HEADER_VALID"},
            {SAI_BFD_SESSION_ATTR_VLAN_ID, "SAI_BFD_SESSION_ATTR_VLAN_ID"},
            {SAI_BFD_SESSION_ATTR_VLAN_PRI, "SAI_BFD_SESSION_ATTR_VLAN_PRI"},
            {SAI_BFD_SESSION_ATTR_VLAN_TPID, "SAI_BFD_SESSION_ATTR_VLAN_TPID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bfd_session_offload_type_t& x)
{
    static std::map<sai_bfd_session_offload_type_t, const char*> strs = {
            {SAI_BFD_SESSION_OFFLOAD_TYPE_FULL, "SAI_BFD_SESSION_OFFLOAD_TYPE_FULL"},
            {SAI_BFD_SESSION_OFFLOAD_TYPE_NONE, "SAI_BFD_SESSION_OFFLOAD_TYPE_NONE"},
            {SAI_BFD_SESSION_OFFLOAD_TYPE_SUSTENANCE, "SAI_BFD_SESSION_OFFLOAD_TYPE_SUSTENANCE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bfd_session_stat_t& x)
{
    static std::map<sai_bfd_session_stat_t, const char*> strs = {
            {SAI_BFD_SESSION_STAT_DROP_PACKETS, "SAI_BFD_SESSION_STAT_DROP_PACKETS"},
            {SAI_BFD_SESSION_STAT_IN_PACKETS, "SAI_BFD_SESSION_STAT_IN_PACKETS"},
            {SAI_BFD_SESSION_STAT_OUT_PACKETS, "SAI_BFD_SESSION_STAT_OUT_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bfd_session_state_t& x)
{
    static std::map<sai_bfd_session_state_t, const char*> strs = {
            {SAI_BFD_SESSION_STATE_ADMIN_DOWN, "SAI_BFD_SESSION_STATE_ADMIN_DOWN"},
            {SAI_BFD_SESSION_STATE_DOWN, "SAI_BFD_SESSION_STATE_DOWN"},
            {SAI_BFD_SESSION_STATE_INIT, "SAI_BFD_SESSION_STATE_INIT"},
            {SAI_BFD_SESSION_STATE_UP, "SAI_BFD_SESSION_STATE_UP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bfd_session_type_t& x)
{
    static std::map<sai_bfd_session_type_t, const char*> strs = {
            {SAI_BFD_SESSION_TYPE_ASYNC_ACTIVE, "SAI_BFD_SESSION_TYPE_ASYNC_ACTIVE"},
            {SAI_BFD_SESSION_TYPE_ASYNC_PASSIVE, "SAI_BFD_SESSION_TYPE_ASYNC_PASSIVE"},
            {SAI_BFD_SESSION_TYPE_DEMAND_ACTIVE, "SAI_BFD_SESSION_TYPE_DEMAND_ACTIVE"},
            {SAI_BFD_SESSION_TYPE_DEMAND_PASSIVE, "SAI_BFD_SESSION_TYPE_DEMAND_PASSIVE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_attr_t& x)
{
    static std::map<sai_bridge_attr_t, const char*> strs = {
            {SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE, "SAI_BRIDGE_ATTR_BROADCAST_FLOOD_CONTROL_TYPE"},
            {SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP, "SAI_BRIDGE_ATTR_BROADCAST_FLOOD_GROUP"},
            {SAI_BRIDGE_ATTR_CUSTOM_RANGE_END, "SAI_BRIDGE_ATTR_CUSTOM_RANGE_END"},
            {SAI_BRIDGE_ATTR_CUSTOM_RANGE_START, "SAI_BRIDGE_ATTR_CUSTOM_RANGE_START"},
            {SAI_BRIDGE_ATTR_LEARN_DISABLE, "SAI_BRIDGE_ATTR_LEARN_DISABLE"},
            {SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES, "SAI_BRIDGE_ATTR_MAX_LEARNED_ADDRESSES"},
            {SAI_BRIDGE_ATTR_PORT_LIST, "SAI_BRIDGE_ATTR_PORT_LIST"},
            {SAI_BRIDGE_ATTR_TYPE, "SAI_BRIDGE_ATTR_TYPE"},
            {SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE, "SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE"},
            {SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP, "SAI_BRIDGE_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP"},
            {SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE, "SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE"},
            {SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP, "SAI_BRIDGE_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_flood_control_type_t& x)
{
    static std::map<sai_bridge_flood_control_type_t, const char*> strs = {
            {SAI_BRIDGE_FLOOD_CONTROL_TYPE_COMBINED, "SAI_BRIDGE_FLOOD_CONTROL_TYPE_COMBINED"},
            {SAI_BRIDGE_FLOOD_CONTROL_TYPE_L2MC_GROUP, "SAI_BRIDGE_FLOOD_CONTROL_TYPE_L2MC_GROUP"},
            {SAI_BRIDGE_FLOOD_CONTROL_TYPE_NONE, "SAI_BRIDGE_FLOOD_CONTROL_TYPE_NONE"},
            {SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS, "SAI_BRIDGE_FLOOD_CONTROL_TYPE_SUB_PORTS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_port_attr_t& x)
{
    static std::map<sai_bridge_port_attr_t, const char*> strs = {
            {SAI_BRIDGE_PORT_ATTR_ADMIN_STATE, "SAI_BRIDGE_PORT_ATTR_ADMIN_STATE"},
            {SAI_BRIDGE_PORT_ATTR_BRIDGE_ID, "SAI_BRIDGE_PORT_ATTR_BRIDGE_ID"},
            {SAI_BRIDGE_PORT_ATTR_CUSTOM_RANGE_END, "SAI_BRIDGE_PORT_ATTR_CUSTOM_RANGE_END"},
            {SAI_BRIDGE_PORT_ATTR_CUSTOM_RANGE_START, "SAI_BRIDGE_PORT_ATTR_CUSTOM_RANGE_START"},
            {SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING, "SAI_BRIDGE_PORT_ATTR_EGRESS_FILTERING"},
            {SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION, "SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_LIMIT_VIOLATION_PACKET_ACTION"},
            {SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE, "SAI_BRIDGE_PORT_ATTR_FDB_LEARNING_MODE"},
            {SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING, "SAI_BRIDGE_PORT_ATTR_INGRESS_FILTERING"},
            {SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP, "SAI_BRIDGE_PORT_ATTR_ISOLATION_GROUP"},
            {SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES, "SAI_BRIDGE_PORT_ATTR_MAX_LEARNED_ADDRESSES"},
            {SAI_BRIDGE_PORT_ATTR_PORT_ID, "SAI_BRIDGE_PORT_ATTR_PORT_ID"},
            {SAI_BRIDGE_PORT_ATTR_RIF_ID, "SAI_BRIDGE_PORT_ATTR_RIF_ID"},
            {SAI_BRIDGE_PORT_ATTR_TAGGING_MODE, "SAI_BRIDGE_PORT_ATTR_TAGGING_MODE"},
            {SAI_BRIDGE_PORT_ATTR_TUNNEL_ID, "SAI_BRIDGE_PORT_ATTR_TUNNEL_ID"},
            {SAI_BRIDGE_PORT_ATTR_TYPE, "SAI_BRIDGE_PORT_ATTR_TYPE"},
            {SAI_BRIDGE_PORT_ATTR_VLAN_ID, "SAI_BRIDGE_PORT_ATTR_VLAN_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_port_fdb_learning_mode_t& x)
{
    static std::map<sai_bridge_port_fdb_learning_mode_t, const char*> strs = {
            {SAI_BRIDGE_PORT_FDB_LEARNING_MODE_CPU_LOG, "SAI_BRIDGE_PORT_FDB_LEARNING_MODE_CPU_LOG"},
            {SAI_BRIDGE_PORT_FDB_LEARNING_MODE_CPU_TRAP, "SAI_BRIDGE_PORT_FDB_LEARNING_MODE_CPU_TRAP"},
            {SAI_BRIDGE_PORT_FDB_LEARNING_MODE_DISABLE, "SAI_BRIDGE_PORT_FDB_LEARNING_MODE_DISABLE"},
            {SAI_BRIDGE_PORT_FDB_LEARNING_MODE_DROP, "SAI_BRIDGE_PORT_FDB_LEARNING_MODE_DROP"},
            {SAI_BRIDGE_PORT_FDB_LEARNING_MODE_FDB_NOTIFICATION, "SAI_BRIDGE_PORT_FDB_LEARNING_MODE_FDB_NOTIFICATION"},
            {SAI_BRIDGE_PORT_FDB_LEARNING_MODE_HW, "SAI_BRIDGE_PORT_FDB_LEARNING_MODE_HW"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_port_stat_t& x)
{
    static std::map<sai_bridge_port_stat_t, const char*> strs = {
            {SAI_BRIDGE_PORT_STAT_IN_OCTETS, "SAI_BRIDGE_PORT_STAT_IN_OCTETS"},
            {SAI_BRIDGE_PORT_STAT_IN_PACKETS, "SAI_BRIDGE_PORT_STAT_IN_PACKETS"},
            {SAI_BRIDGE_PORT_STAT_OUT_OCTETS, "SAI_BRIDGE_PORT_STAT_OUT_OCTETS"},
            {SAI_BRIDGE_PORT_STAT_OUT_PACKETS, "SAI_BRIDGE_PORT_STAT_OUT_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_port_tagging_mode_t& x)
{
    static std::map<sai_bridge_port_tagging_mode_t, const char*> strs = {
            {SAI_BRIDGE_PORT_TAGGING_MODE_TAGGED, "SAI_BRIDGE_PORT_TAGGING_MODE_TAGGED"},
            {SAI_BRIDGE_PORT_TAGGING_MODE_UNTAGGED, "SAI_BRIDGE_PORT_TAGGING_MODE_UNTAGGED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_port_type_t& x)
{
    static std::map<sai_bridge_port_type_t, const char*> strs = {
            {SAI_BRIDGE_PORT_TYPE_1D_ROUTER, "SAI_BRIDGE_PORT_TYPE_1D_ROUTER"},
            {SAI_BRIDGE_PORT_TYPE_1Q_ROUTER, "SAI_BRIDGE_PORT_TYPE_1Q_ROUTER"},
            {SAI_BRIDGE_PORT_TYPE_PORT, "SAI_BRIDGE_PORT_TYPE_PORT"},
            {SAI_BRIDGE_PORT_TYPE_SUB_PORT, "SAI_BRIDGE_PORT_TYPE_SUB_PORT"},
            {SAI_BRIDGE_PORT_TYPE_TUNNEL, "SAI_BRIDGE_PORT_TYPE_TUNNEL"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_stat_t& x)
{
    static std::map<sai_bridge_stat_t, const char*> strs = {
            {SAI_BRIDGE_STAT_IN_OCTETS, "SAI_BRIDGE_STAT_IN_OCTETS"},
            {SAI_BRIDGE_STAT_IN_PACKETS, "SAI_BRIDGE_STAT_IN_PACKETS"},
            {SAI_BRIDGE_STAT_OUT_OCTETS, "SAI_BRIDGE_STAT_OUT_OCTETS"},
            {SAI_BRIDGE_STAT_OUT_PACKETS, "SAI_BRIDGE_STAT_OUT_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bridge_type_t& x)
{
    static std::map<sai_bridge_type_t, const char*> strs = {
            {SAI_BRIDGE_TYPE_1D, "SAI_BRIDGE_TYPE_1D"},
            {SAI_BRIDGE_TYPE_1Q, "SAI_BRIDGE_TYPE_1Q"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_buffer_pool_attr_t& x)
{
    static std::map<sai_buffer_pool_attr_t, const char*> strs = {
            {SAI_BUFFER_POOL_ATTR_CUSTOM_RANGE_END, "SAI_BUFFER_POOL_ATTR_CUSTOM_RANGE_END"},
            {SAI_BUFFER_POOL_ATTR_CUSTOM_RANGE_START, "SAI_BUFFER_POOL_ATTR_CUSTOM_RANGE_START"},
            {SAI_BUFFER_POOL_ATTR_SHARED_SIZE, "SAI_BUFFER_POOL_ATTR_SHARED_SIZE"},
            {SAI_BUFFER_POOL_ATTR_SIZE, "SAI_BUFFER_POOL_ATTR_SIZE"},
            {SAI_BUFFER_POOL_ATTR_TAM, "SAI_BUFFER_POOL_ATTR_TAM"},
            {SAI_BUFFER_POOL_ATTR_THRESHOLD_MODE, "SAI_BUFFER_POOL_ATTR_THRESHOLD_MODE"},
            {SAI_BUFFER_POOL_ATTR_TYPE, "SAI_BUFFER_POOL_ATTR_TYPE"},
            {SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID, "SAI_BUFFER_POOL_ATTR_WRED_PROFILE_ID"},
            {SAI_BUFFER_POOL_ATTR_XOFF_SIZE, "SAI_BUFFER_POOL_ATTR_XOFF_SIZE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_buffer_pool_stat_t& x)
{
    static std::map<sai_buffer_pool_stat_t, const char*> strs = {
            {SAI_BUFFER_POOL_STAT_CURR_OCCUPANCY_BYTES, "SAI_BUFFER_POOL_STAT_CURR_OCCUPANCY_BYTES"},
            {SAI_BUFFER_POOL_STAT_CUSTOM_RANGE_BASE, "SAI_BUFFER_POOL_STAT_CUSTOM_RANGE_BASE"},
            {SAI_BUFFER_POOL_STAT_DROPPED_PACKETS, "SAI_BUFFER_POOL_STAT_DROPPED_PACKETS"},
            {SAI_BUFFER_POOL_STAT_GREEN_WRED_DROPPED_BYTES, "SAI_BUFFER_POOL_STAT_GREEN_WRED_DROPPED_BYTES"},
            {SAI_BUFFER_POOL_STAT_GREEN_WRED_DROPPED_PACKETS, "SAI_BUFFER_POOL_STAT_GREEN_WRED_DROPPED_PACKETS"},
            {SAI_BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES, "SAI_BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES"},
            {SAI_BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS, "SAI_BUFFER_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS"},
            {SAI_BUFFER_POOL_STAT_RED_WRED_DROPPED_BYTES, "SAI_BUFFER_POOL_STAT_RED_WRED_DROPPED_BYTES"},
            {SAI_BUFFER_POOL_STAT_RED_WRED_DROPPED_PACKETS, "SAI_BUFFER_POOL_STAT_RED_WRED_DROPPED_PACKETS"},
            {SAI_BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_BYTES, "SAI_BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_BYTES"},
            {SAI_BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS, "SAI_BUFFER_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS"},
            {SAI_BUFFER_POOL_STAT_WATERMARK_BYTES, "SAI_BUFFER_POOL_STAT_WATERMARK_BYTES"},
            {SAI_BUFFER_POOL_STAT_WRED_DROPPED_BYTES, "SAI_BUFFER_POOL_STAT_WRED_DROPPED_BYTES"},
            {SAI_BUFFER_POOL_STAT_WRED_DROPPED_PACKETS, "SAI_BUFFER_POOL_STAT_WRED_DROPPED_PACKETS"},
            {SAI_BUFFER_POOL_STAT_WRED_ECN_MARKED_BYTES, "SAI_BUFFER_POOL_STAT_WRED_ECN_MARKED_BYTES"},
            {SAI_BUFFER_POOL_STAT_WRED_ECN_MARKED_PACKETS, "SAI_BUFFER_POOL_STAT_WRED_ECN_MARKED_PACKETS"},
            {SAI_BUFFER_POOL_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES, "SAI_BUFFER_POOL_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES"},
            {SAI_BUFFER_POOL_STAT_XOFF_ROOM_WATERMARK_BYTES, "SAI_BUFFER_POOL_STAT_XOFF_ROOM_WATERMARK_BYTES"},
            {SAI_BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_BYTES, "SAI_BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_BYTES"},
            {SAI_BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS, "SAI_BUFFER_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS"},
            {SAI_BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES, "SAI_BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES"},
            {SAI_BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS, "SAI_BUFFER_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_buffer_pool_threshold_mode_t& x)
{
    static std::map<sai_buffer_pool_threshold_mode_t, const char*> strs = {
            {SAI_BUFFER_POOL_THRESHOLD_MODE_DYNAMIC, "SAI_BUFFER_POOL_THRESHOLD_MODE_DYNAMIC"},
            {SAI_BUFFER_POOL_THRESHOLD_MODE_STATIC, "SAI_BUFFER_POOL_THRESHOLD_MODE_STATIC"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_buffer_pool_type_t& x)
{
    static std::map<sai_buffer_pool_type_t, const char*> strs = {
            {SAI_BUFFER_POOL_TYPE_BOTH, "SAI_BUFFER_POOL_TYPE_BOTH"},
            {SAI_BUFFER_POOL_TYPE_EGRESS, "SAI_BUFFER_POOL_TYPE_EGRESS"},
            {SAI_BUFFER_POOL_TYPE_INGRESS, "SAI_BUFFER_POOL_TYPE_INGRESS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_buffer_profile_attr_t& x)
{
    static std::map<sai_buffer_profile_attr_t, const char*> strs = {
            {SAI_BUFFER_PROFILE_ATTR_BUFFER_SIZE, "SAI_BUFFER_PROFILE_ATTR_BUFFER_SIZE"},
            {SAI_BUFFER_PROFILE_ATTR_CUSTOM_RANGE_END, "SAI_BUFFER_PROFILE_ATTR_CUSTOM_RANGE_END"},
            {SAI_BUFFER_PROFILE_ATTR_CUSTOM_RANGE_START, "SAI_BUFFER_PROFILE_ATTR_CUSTOM_RANGE_START"},
            {SAI_BUFFER_PROFILE_ATTR_POOL_ID, "SAI_BUFFER_PROFILE_ATTR_POOL_ID"},
            {SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE, "SAI_BUFFER_PROFILE_ATTR_RESERVED_BUFFER_SIZE"},
            {SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH, "SAI_BUFFER_PROFILE_ATTR_SHARED_DYNAMIC_TH"},
            {SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH, "SAI_BUFFER_PROFILE_ATTR_SHARED_STATIC_TH"},
            {SAI_BUFFER_PROFILE_ATTR_THRESHOLD_MODE, "SAI_BUFFER_PROFILE_ATTR_THRESHOLD_MODE"},
            {SAI_BUFFER_PROFILE_ATTR_XOFF_TH, "SAI_BUFFER_PROFILE_ATTR_XOFF_TH"},
            {SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH, "SAI_BUFFER_PROFILE_ATTR_XON_OFFSET_TH"},
            {SAI_BUFFER_PROFILE_ATTR_XON_TH, "SAI_BUFFER_PROFILE_ATTR_XON_TH"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_buffer_profile_threshold_mode_t& x)
{
    static std::map<sai_buffer_profile_threshold_mode_t, const char*> strs = {
            {SAI_BUFFER_PROFILE_THRESHOLD_MODE_DYNAMIC, "SAI_BUFFER_PROFILE_THRESHOLD_MODE_DYNAMIC"},
            {SAI_BUFFER_PROFILE_THRESHOLD_MODE_STATIC, "SAI_BUFFER_PROFILE_THRESHOLD_MODE_STATIC"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_bulk_op_error_mode_t& x)
{
    static std::map<sai_bulk_op_error_mode_t, const char*> strs = {
            {SAI_BULK_OP_ERROR_MODE_IGNORE_ERROR, "SAI_BULK_OP_ERROR_MODE_IGNORE_ERROR"},
            {SAI_BULK_OP_ERROR_MODE_STOP_ON_ERROR, "SAI_BULK_OP_ERROR_MODE_STOP_ON_ERROR"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_common_api_t& x)
{
    static std::map<sai_common_api_t, const char*> strs = {
            {SAI_COMMON_API_BULK_CREATE, "SAI_COMMON_API_BULK_CREATE"},
            {SAI_COMMON_API_BULK_GET, "SAI_COMMON_API_BULK_GET"},
            {SAI_COMMON_API_BULK_REMOVE, "SAI_COMMON_API_BULK_REMOVE"},
            {SAI_COMMON_API_BULK_SET, "SAI_COMMON_API_BULK_SET"},
            {SAI_COMMON_API_CREATE, "SAI_COMMON_API_CREATE"},
            {SAI_COMMON_API_GET, "SAI_COMMON_API_GET"},
            {SAI_COMMON_API_MAX, "SAI_COMMON_API_MAX"},
            {SAI_COMMON_API_REMOVE, "SAI_COMMON_API_REMOVE"},
            {SAI_COMMON_API_SET, "SAI_COMMON_API_SET"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_counter_attr_t& x)
{
    static std::map<sai_counter_attr_t, const char*> strs = {
            {SAI_COUNTER_ATTR_CUSTOM_RANGE_END, "SAI_COUNTER_ATTR_CUSTOM_RANGE_END"},
            {SAI_COUNTER_ATTR_CUSTOM_RANGE_START, "SAI_COUNTER_ATTR_CUSTOM_RANGE_START"},
            {SAI_COUNTER_ATTR_TYPE, "SAI_COUNTER_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_counter_stat_t& x)
{
    static std::map<sai_counter_stat_t, const char*> strs = {
            {SAI_COUNTER_STAT_BYTES, "SAI_COUNTER_STAT_BYTES"},
            {SAI_COUNTER_STAT_CUSTOM_RANGE_BASE, "SAI_COUNTER_STAT_CUSTOM_RANGE_BASE"},
            {SAI_COUNTER_STAT_PACKETS, "SAI_COUNTER_STAT_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_counter_type_t& x)
{
    static std::map<sai_counter_type_t, const char*> strs = {
            {SAI_COUNTER_TYPE_REGULAR, "SAI_COUNTER_TYPE_REGULAR"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_debug_counter_attr_t& x)
{
    static std::map<sai_debug_counter_attr_t, const char*> strs = {
            {SAI_DEBUG_COUNTER_ATTR_BIND_METHOD, "SAI_DEBUG_COUNTER_ATTR_BIND_METHOD"},
            {SAI_DEBUG_COUNTER_ATTR_CUSTOM_RANGE_END, "SAI_DEBUG_COUNTER_ATTR_CUSTOM_RANGE_END"},
            {SAI_DEBUG_COUNTER_ATTR_CUSTOM_RANGE_START, "SAI_DEBUG_COUNTER_ATTR_CUSTOM_RANGE_START"},
            {SAI_DEBUG_COUNTER_ATTR_INDEX, "SAI_DEBUG_COUNTER_ATTR_INDEX"},
            {SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST, "SAI_DEBUG_COUNTER_ATTR_IN_DROP_REASON_LIST"},
            {SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST, "SAI_DEBUG_COUNTER_ATTR_OUT_DROP_REASON_LIST"},
            {SAI_DEBUG_COUNTER_ATTR_TYPE, "SAI_DEBUG_COUNTER_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_debug_counter_bind_method_t& x)
{
    static std::map<sai_debug_counter_bind_method_t, const char*> strs = {
            {SAI_DEBUG_COUNTER_BIND_METHOD_AUTOMATIC, "SAI_DEBUG_COUNTER_BIND_METHOD_AUTOMATIC"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_debug_counter_type_t& x)
{
    static std::map<sai_debug_counter_type_t, const char*> strs = {
            {SAI_DEBUG_COUNTER_TYPE_PORT_IN_DROP_REASONS, "SAI_DEBUG_COUNTER_TYPE_PORT_IN_DROP_REASONS"},
            {SAI_DEBUG_COUNTER_TYPE_PORT_OUT_DROP_REASONS, "SAI_DEBUG_COUNTER_TYPE_PORT_OUT_DROP_REASONS"},
            {SAI_DEBUG_COUNTER_TYPE_SWITCH_IN_DROP_REASONS, "SAI_DEBUG_COUNTER_TYPE_SWITCH_IN_DROP_REASONS"},
            {SAI_DEBUG_COUNTER_TYPE_SWITCH_OUT_DROP_REASONS, "SAI_DEBUG_COUNTER_TYPE_SWITCH_OUT_DROP_REASONS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_dtel_attr_t& x)
{
    static std::map<sai_dtel_attr_t, const char*> strs = {
            {SAI_DTEL_ATTR_CUSTOM_RANGE_END, "SAI_DTEL_ATTR_CUSTOM_RANGE_END"},
            {SAI_DTEL_ATTR_CUSTOM_RANGE_START, "SAI_DTEL_ATTR_CUSTOM_RANGE_START"},
            {SAI_DTEL_ATTR_DROP_REPORT_ENABLE, "SAI_DTEL_ATTR_DROP_REPORT_ENABLE"},
            {SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE, "SAI_DTEL_ATTR_FLOW_STATE_CLEAR_CYCLE"},
            {SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE, "SAI_DTEL_ATTR_INT_ENDPOINT_ENABLE"},
            {SAI_DTEL_ATTR_INT_L4_DSCP, "SAI_DTEL_ATTR_INT_L4_DSCP"},
            {SAI_DTEL_ATTR_INT_TRANSIT_ENABLE, "SAI_DTEL_ATTR_INT_TRANSIT_ENABLE"},
            {SAI_DTEL_ATTR_LATENCY_SENSITIVITY, "SAI_DTEL_ATTR_LATENCY_SENSITIVITY"},
            {SAI_DTEL_ATTR_POSTCARD_ENABLE, "SAI_DTEL_ATTR_POSTCARD_ENABLE"},
            {SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE, "SAI_DTEL_ATTR_QUEUE_REPORT_ENABLE"},
            {SAI_DTEL_ATTR_SINK_PORT_LIST, "SAI_DTEL_ATTR_SINK_PORT_LIST"},
            {SAI_DTEL_ATTR_SWITCH_ID, "SAI_DTEL_ATTR_SWITCH_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_dtel_event_attr_t& x)
{
    static std::map<sai_dtel_event_attr_t, const char*> strs = {
            {SAI_DTEL_EVENT_ATTR_CUSTOM_RANGE_END, "SAI_DTEL_EVENT_ATTR_CUSTOM_RANGE_END"},
            {SAI_DTEL_EVENT_ATTR_CUSTOM_RANGE_START, "SAI_DTEL_EVENT_ATTR_CUSTOM_RANGE_START"},
            {SAI_DTEL_EVENT_ATTR_DSCP_VALUE, "SAI_DTEL_EVENT_ATTR_DSCP_VALUE"},
            {SAI_DTEL_EVENT_ATTR_REPORT_SESSION, "SAI_DTEL_EVENT_ATTR_REPORT_SESSION"},
            {SAI_DTEL_EVENT_ATTR_TYPE, "SAI_DTEL_EVENT_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_dtel_event_type_t& x)
{
    static std::map<sai_dtel_event_type_t, const char*> strs = {
            {SAI_DTEL_EVENT_TYPE_DROP_REPORT, "SAI_DTEL_EVENT_TYPE_DROP_REPORT"},
            {SAI_DTEL_EVENT_TYPE_FLOW_REPORT_ALL_PACKETS, "SAI_DTEL_EVENT_TYPE_FLOW_REPORT_ALL_PACKETS"},
            {SAI_DTEL_EVENT_TYPE_FLOW_STATE, "SAI_DTEL_EVENT_TYPE_FLOW_STATE"},
            {SAI_DTEL_EVENT_TYPE_FLOW_TCPFLAG, "SAI_DTEL_EVENT_TYPE_FLOW_TCPFLAG"},
            {SAI_DTEL_EVENT_TYPE_MAX, "SAI_DTEL_EVENT_TYPE_MAX"},
            {SAI_DTEL_EVENT_TYPE_QUEUE_REPORT_TAIL_DROP, "SAI_DTEL_EVENT_TYPE_QUEUE_REPORT_TAIL_DROP"},
            {SAI_DTEL_EVENT_TYPE_QUEUE_REPORT_THRESHOLD_BREACH, "SAI_DTEL_EVENT_TYPE_QUEUE_REPORT_THRESHOLD_BREACH"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_dtel_int_session_attr_t& x)
{
    static std::map<sai_dtel_int_session_attr_t, const char*> strs = {
            {SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP, "SAI_DTEL_INT_SESSION_ATTR_COLLECT_EGRESS_TIMESTAMP"},
            {SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP, "SAI_DTEL_INT_SESSION_ATTR_COLLECT_INGRESS_TIMESTAMP"},
            {SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO, "SAI_DTEL_INT_SESSION_ATTR_COLLECT_QUEUE_INFO"},
            {SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID, "SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_ID"},
            {SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS, "SAI_DTEL_INT_SESSION_ATTR_COLLECT_SWITCH_PORTS"},
            {SAI_DTEL_INT_SESSION_ATTR_CUSTOM_RANGE_END, "SAI_DTEL_INT_SESSION_ATTR_CUSTOM_RANGE_END"},
            {SAI_DTEL_INT_SESSION_ATTR_CUSTOM_RANGE_START, "SAI_DTEL_INT_SESSION_ATTR_CUSTOM_RANGE_START"},
            {SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT, "SAI_DTEL_INT_SESSION_ATTR_MAX_HOP_COUNT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_dtel_queue_report_attr_t& x)
{
    static std::map<sai_dtel_queue_report_attr_t, const char*> strs = {
            {SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA, "SAI_DTEL_QUEUE_REPORT_ATTR_BREACH_QUOTA"},
            {SAI_DTEL_QUEUE_REPORT_ATTR_CUSTOM_RANGE_END, "SAI_DTEL_QUEUE_REPORT_ATTR_CUSTOM_RANGE_END"},
            {SAI_DTEL_QUEUE_REPORT_ATTR_CUSTOM_RANGE_START, "SAI_DTEL_QUEUE_REPORT_ATTR_CUSTOM_RANGE_START"},
            {SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD, "SAI_DTEL_QUEUE_REPORT_ATTR_DEPTH_THRESHOLD"},
            {SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD, "SAI_DTEL_QUEUE_REPORT_ATTR_LATENCY_THRESHOLD"},
            {SAI_DTEL_QUEUE_REPORT_ATTR_QUEUE_ID, "SAI_DTEL_QUEUE_REPORT_ATTR_QUEUE_ID"},
            {SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP, "SAI_DTEL_QUEUE_REPORT_ATTR_TAIL_DROP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_dtel_report_session_attr_t& x)
{
    static std::map<sai_dtel_report_session_attr_t, const char*> strs = {
            {SAI_DTEL_REPORT_SESSION_ATTR_CUSTOM_RANGE_END, "SAI_DTEL_REPORT_SESSION_ATTR_CUSTOM_RANGE_END"},
            {SAI_DTEL_REPORT_SESSION_ATTR_CUSTOM_RANGE_START, "SAI_DTEL_REPORT_SESSION_ATTR_CUSTOM_RANGE_START"},
            {SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST, "SAI_DTEL_REPORT_SESSION_ATTR_DST_IP_LIST"},
            {SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP, "SAI_DTEL_REPORT_SESSION_ATTR_SRC_IP"},
            {SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE, "SAI_DTEL_REPORT_SESSION_ATTR_TRUNCATE_SIZE"},
            {SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT, "SAI_DTEL_REPORT_SESSION_ATTR_UDP_DST_PORT"},
            {SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID, "SAI_DTEL_REPORT_SESSION_ATTR_VIRTUAL_ROUTER_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_ecn_mark_mode_t& x)
{
    static std::map<sai_ecn_mark_mode_t, const char*> strs = {
            {SAI_ECN_MARK_MODE_ALL, "SAI_ECN_MARK_MODE_ALL"},
            {SAI_ECN_MARK_MODE_GREEN, "SAI_ECN_MARK_MODE_GREEN"},
            {SAI_ECN_MARK_MODE_GREEN_RED, "SAI_ECN_MARK_MODE_GREEN_RED"},
            {SAI_ECN_MARK_MODE_GREEN_YELLOW, "SAI_ECN_MARK_MODE_GREEN_YELLOW"},
            {SAI_ECN_MARK_MODE_NONE, "SAI_ECN_MARK_MODE_NONE"},
            {SAI_ECN_MARK_MODE_RED, "SAI_ECN_MARK_MODE_RED"},
            {SAI_ECN_MARK_MODE_YELLOW, "SAI_ECN_MARK_MODE_YELLOW"},
            {SAI_ECN_MARK_MODE_YELLOW_RED, "SAI_ECN_MARK_MODE_YELLOW_RED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_erspan_encapsulation_type_t& x)
{
    static std::map<sai_erspan_encapsulation_type_t, const char*> strs = {
            {SAI_ERSPAN_ENCAPSULATION_TYPE_MIRROR_L3_GRE_TUNNEL, "SAI_ERSPAN_ENCAPSULATION_TYPE_MIRROR_L3_GRE_TUNNEL"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_fdb_entry_attr_t& x)
{
    static std::map<sai_fdb_entry_attr_t, const char*> strs = {
            {SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE, "SAI_FDB_ENTRY_ATTR_ALLOW_MAC_MOVE"},
            {SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID, "SAI_FDB_ENTRY_ATTR_BRIDGE_PORT_ID"},
            {SAI_FDB_ENTRY_ATTR_COUNTER_ID, "SAI_FDB_ENTRY_ATTR_COUNTER_ID"},
            {SAI_FDB_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_FDB_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_FDB_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_FDB_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_FDB_ENTRY_ATTR_META_DATA, "SAI_FDB_ENTRY_ATTR_META_DATA"},
            {SAI_FDB_ENTRY_ATTR_PACKET_ACTION, "SAI_FDB_ENTRY_ATTR_PACKET_ACTION"},
            {SAI_FDB_ENTRY_ATTR_TYPE, "SAI_FDB_ENTRY_ATTR_TYPE"},
            {SAI_FDB_ENTRY_ATTR_USER_TRAP_ID, "SAI_FDB_ENTRY_ATTR_USER_TRAP_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_fdb_entry_type_t& x)
{
    static std::map<sai_fdb_entry_type_t, const char*> strs = {
            {SAI_FDB_ENTRY_TYPE_DYNAMIC, "SAI_FDB_ENTRY_TYPE_DYNAMIC"},
            {SAI_FDB_ENTRY_TYPE_STATIC, "SAI_FDB_ENTRY_TYPE_STATIC"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_fdb_event_t& x)
{
    static std::map<sai_fdb_event_t, const char*> strs = {
            {SAI_FDB_EVENT_AGED, "SAI_FDB_EVENT_AGED"},
            {SAI_FDB_EVENT_FLUSHED, "SAI_FDB_EVENT_FLUSHED"},
            {SAI_FDB_EVENT_LEARNED, "SAI_FDB_EVENT_LEARNED"},
            {SAI_FDB_EVENT_MOVE, "SAI_FDB_EVENT_MOVE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_fdb_flush_attr_t& x)
{
    static std::map<sai_fdb_flush_attr_t, const char*> strs = {
            {SAI_FDB_FLUSH_ATTR_BRIDGE_PORT_ID, "SAI_FDB_FLUSH_ATTR_BRIDGE_PORT_ID"},
            {SAI_FDB_FLUSH_ATTR_BV_ID, "SAI_FDB_FLUSH_ATTR_BV_ID"},
            {SAI_FDB_FLUSH_ATTR_CUSTOM_RANGE_END, "SAI_FDB_FLUSH_ATTR_CUSTOM_RANGE_END"},
            {SAI_FDB_FLUSH_ATTR_CUSTOM_RANGE_START, "SAI_FDB_FLUSH_ATTR_CUSTOM_RANGE_START"},
            {SAI_FDB_FLUSH_ATTR_ENTRY_TYPE, "SAI_FDB_FLUSH_ATTR_ENTRY_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_fdb_flush_entry_type_t& x)
{
    static std::map<sai_fdb_flush_entry_type_t, const char*> strs = {
            {SAI_FDB_FLUSH_ENTRY_TYPE_ALL, "SAI_FDB_FLUSH_ENTRY_TYPE_ALL"},
            {SAI_FDB_FLUSH_ENTRY_TYPE_DYNAMIC, "SAI_FDB_FLUSH_ENTRY_TYPE_DYNAMIC"},
            {SAI_FDB_FLUSH_ENTRY_TYPE_STATIC, "SAI_FDB_FLUSH_ENTRY_TYPE_STATIC"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_fine_grained_hash_field_attr_t& x)
{
    static std::map<sai_fine_grained_hash_field_attr_t, const char*> strs = {
            {SAI_FINE_GRAINED_HASH_FIELD_ATTR_CUSTOM_RANGE_END, "SAI_FINE_GRAINED_HASH_FIELD_ATTR_CUSTOM_RANGE_END"},
            {SAI_FINE_GRAINED_HASH_FIELD_ATTR_CUSTOM_RANGE_START, "SAI_FINE_GRAINED_HASH_FIELD_ATTR_CUSTOM_RANGE_START"},
            {SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK, "SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV4_MASK"},
            {SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK, "SAI_FINE_GRAINED_HASH_FIELD_ATTR_IPV6_MASK"},
            {SAI_FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD, "SAI_FINE_GRAINED_HASH_FIELD_ATTR_NATIVE_HASH_FIELD"},
            {SAI_FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID, "SAI_FINE_GRAINED_HASH_FIELD_ATTR_SEQUENCE_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hash_algorithm_t& x)
{
    static std::map<sai_hash_algorithm_t, const char*> strs = {
            {SAI_HASH_ALGORITHM_CRC, "SAI_HASH_ALGORITHM_CRC"},
            {SAI_HASH_ALGORITHM_CRC_32HI, "SAI_HASH_ALGORITHM_CRC_32HI"},
            {SAI_HASH_ALGORITHM_CRC_32LO, "SAI_HASH_ALGORITHM_CRC_32LO"},
            {SAI_HASH_ALGORITHM_CRC_CCITT, "SAI_HASH_ALGORITHM_CRC_CCITT"},
            {SAI_HASH_ALGORITHM_CRC_XOR, "SAI_HASH_ALGORITHM_CRC_XOR"},
            {SAI_HASH_ALGORITHM_RANDOM, "SAI_HASH_ALGORITHM_RANDOM"},
            {SAI_HASH_ALGORITHM_XOR, "SAI_HASH_ALGORITHM_XOR"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hash_attr_t& x)
{
    static std::map<sai_hash_attr_t, const char*> strs = {
            {SAI_HASH_ATTR_CUSTOM_RANGE_END, "SAI_HASH_ATTR_CUSTOM_RANGE_END"},
            {SAI_HASH_ATTR_CUSTOM_RANGE_START, "SAI_HASH_ATTR_CUSTOM_RANGE_START"},
            {SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST, "SAI_HASH_ATTR_FINE_GRAINED_HASH_FIELD_LIST"},
            {SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST, "SAI_HASH_ATTR_NATIVE_HASH_FIELD_LIST"},
            {SAI_HASH_ATTR_UDF_GROUP_LIST, "SAI_HASH_ATTR_UDF_GROUP_LIST"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_attr_t& x)
{
    static std::map<sai_hostif_attr_t, const char*> strs = {
            {SAI_HOSTIF_ATTR_CUSTOM_RANGE_END, "SAI_HOSTIF_ATTR_CUSTOM_RANGE_END"},
            {SAI_HOSTIF_ATTR_CUSTOM_RANGE_START, "SAI_HOSTIF_ATTR_CUSTOM_RANGE_START"},
            {SAI_HOSTIF_ATTR_GENETLINK_MCGRP_NAME, "SAI_HOSTIF_ATTR_GENETLINK_MCGRP_NAME"},
            {SAI_HOSTIF_ATTR_NAME, "SAI_HOSTIF_ATTR_NAME"},
            {SAI_HOSTIF_ATTR_OBJ_ID, "SAI_HOSTIF_ATTR_OBJ_ID"},
            {SAI_HOSTIF_ATTR_OPER_STATUS, "SAI_HOSTIF_ATTR_OPER_STATUS"},
            {SAI_HOSTIF_ATTR_QUEUE, "SAI_HOSTIF_ATTR_QUEUE"},
            {SAI_HOSTIF_ATTR_TYPE, "SAI_HOSTIF_ATTR_TYPE"},
            {SAI_HOSTIF_ATTR_VLAN_TAG, "SAI_HOSTIF_ATTR_VLAN_TAG"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_packet_attr_t& x)
{
    static std::map<sai_hostif_packet_attr_t, const char*> strs = {
            {SAI_HOSTIF_PACKET_ATTR_BRIDGE_ID, "SAI_HOSTIF_PACKET_ATTR_BRIDGE_ID"},
            {SAI_HOSTIF_PACKET_ATTR_CUSTOM_RANGE_END, "SAI_HOSTIF_PACKET_ATTR_CUSTOM_RANGE_END"},
            {SAI_HOSTIF_PACKET_ATTR_CUSTOM_RANGE_START, "SAI_HOSTIF_PACKET_ATTR_CUSTOM_RANGE_START"},
            {SAI_HOSTIF_PACKET_ATTR_EGRESS_PORT_OR_LAG, "SAI_HOSTIF_PACKET_ATTR_EGRESS_PORT_OR_LAG"},
            {SAI_HOSTIF_PACKET_ATTR_EGRESS_QUEUE_INDEX, "SAI_HOSTIF_PACKET_ATTR_EGRESS_QUEUE_INDEX"},
            {SAI_HOSTIF_PACKET_ATTR_HOSTIF_TRAP_ID, "SAI_HOSTIF_PACKET_ATTR_HOSTIF_TRAP_ID"},
            {SAI_HOSTIF_PACKET_ATTR_HOSTIF_TX_TYPE, "SAI_HOSTIF_PACKET_ATTR_HOSTIF_TX_TYPE"},
            {SAI_HOSTIF_PACKET_ATTR_INGRESS_LAG, "SAI_HOSTIF_PACKET_ATTR_INGRESS_LAG"},
            {SAI_HOSTIF_PACKET_ATTR_INGRESS_PORT, "SAI_HOSTIF_PACKET_ATTR_INGRESS_PORT"},
            {SAI_HOSTIF_PACKET_ATTR_TIMESTAMP, "SAI_HOSTIF_PACKET_ATTR_TIMESTAMP"},
            {SAI_HOSTIF_PACKET_ATTR_ZERO_COPY_TX, "SAI_HOSTIF_PACKET_ATTR_ZERO_COPY_TX"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_table_entry_attr_t& x)
{
    static std::map<sai_hostif_table_entry_attr_t, const char*> strs = {
            {SAI_HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE, "SAI_HOSTIF_TABLE_ENTRY_ATTR_CHANNEL_TYPE"},
            {SAI_HOSTIF_TABLE_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_HOSTIF_TABLE_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_HOSTIF_TABLE_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_HOSTIF_TABLE_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_HOSTIF_TABLE_ENTRY_ATTR_HOST_IF, "SAI_HOSTIF_TABLE_ENTRY_ATTR_HOST_IF"},
            {SAI_HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID, "SAI_HOSTIF_TABLE_ENTRY_ATTR_OBJ_ID"},
            {SAI_HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID, "SAI_HOSTIF_TABLE_ENTRY_ATTR_TRAP_ID"},
            {SAI_HOSTIF_TABLE_ENTRY_ATTR_TYPE, "SAI_HOSTIF_TABLE_ENTRY_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_table_entry_channel_type_t& x)
{
    static std::map<sai_hostif_table_entry_channel_type_t, const char*> strs = {
            {SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_CB, "SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_CB"},
            {SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_FD, "SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_FD"},
            {SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_GENETLINK, "SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_GENETLINK"},
            {SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_L3, "SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_L3"},
            {SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_LOGICAL_PORT, "SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_LOGICAL_PORT"},
            {SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_PHYSICAL_PORT, "SAI_HOSTIF_TABLE_ENTRY_CHANNEL_TYPE_NETDEV_PHYSICAL_PORT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_table_entry_type_t& x)
{
    static std::map<sai_hostif_table_entry_type_t, const char*> strs = {
            {SAI_HOSTIF_TABLE_ENTRY_TYPE_LAG, "SAI_HOSTIF_TABLE_ENTRY_TYPE_LAG"},
            {SAI_HOSTIF_TABLE_ENTRY_TYPE_PORT, "SAI_HOSTIF_TABLE_ENTRY_TYPE_PORT"},
            {SAI_HOSTIF_TABLE_ENTRY_TYPE_TRAP_ID, "SAI_HOSTIF_TABLE_ENTRY_TYPE_TRAP_ID"},
            {SAI_HOSTIF_TABLE_ENTRY_TYPE_VLAN, "SAI_HOSTIF_TABLE_ENTRY_TYPE_VLAN"},
            {SAI_HOSTIF_TABLE_ENTRY_TYPE_WILDCARD, "SAI_HOSTIF_TABLE_ENTRY_TYPE_WILDCARD"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_trap_attr_t& x)
{
    static std::map<sai_hostif_trap_attr_t, const char*> strs = {
            {SAI_HOSTIF_TRAP_ATTR_COUNTER_ID, "SAI_HOSTIF_TRAP_ATTR_COUNTER_ID"},
            {SAI_HOSTIF_TRAP_ATTR_CUSTOM_RANGE_END, "SAI_HOSTIF_TRAP_ATTR_CUSTOM_RANGE_END"},
            {SAI_HOSTIF_TRAP_ATTR_CUSTOM_RANGE_START, "SAI_HOSTIF_TRAP_ATTR_CUSTOM_RANGE_START"},
            {SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST, "SAI_HOSTIF_TRAP_ATTR_EXCLUDE_PORT_LIST"},
            {SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION, "SAI_HOSTIF_TRAP_ATTR_MIRROR_SESSION"},
            {SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION, "SAI_HOSTIF_TRAP_ATTR_PACKET_ACTION"},
            {SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP, "SAI_HOSTIF_TRAP_ATTR_TRAP_GROUP"},
            {SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY, "SAI_HOSTIF_TRAP_ATTR_TRAP_PRIORITY"},
            {SAI_HOSTIF_TRAP_ATTR_TRAP_TYPE, "SAI_HOSTIF_TRAP_ATTR_TRAP_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_trap_group_attr_t& x)
{
    static std::map<sai_hostif_trap_group_attr_t, const char*> strs = {
            {SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE, "SAI_HOSTIF_TRAP_GROUP_ATTR_ADMIN_STATE"},
            {SAI_HOSTIF_TRAP_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_HOSTIF_TRAP_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_HOSTIF_TRAP_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_HOSTIF_TRAP_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER, "SAI_HOSTIF_TRAP_GROUP_ATTR_POLICER"},
            {SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE, "SAI_HOSTIF_TRAP_GROUP_ATTR_QUEUE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_trap_type_t& x)
{
    static std::map<sai_hostif_trap_type_t, const char*> strs = {
            {SAI_HOSTIF_TRAP_TYPE_ARP_REQUEST, "SAI_HOSTIF_TRAP_TYPE_ARP_REQUEST"},
            {SAI_HOSTIF_TRAP_TYPE_ARP_RESPONSE, "SAI_HOSTIF_TRAP_TYPE_ARP_RESPONSE"},
            {SAI_HOSTIF_TRAP_TYPE_BFD, "SAI_HOSTIF_TRAP_TYPE_BFD"},
            {SAI_HOSTIF_TRAP_TYPE_BFDV6, "SAI_HOSTIF_TRAP_TYPE_BFDV6"},
            {SAI_HOSTIF_TRAP_TYPE_BGP, "SAI_HOSTIF_TRAP_TYPE_BGP"},
            {SAI_HOSTIF_TRAP_TYPE_BGPV6, "SAI_HOSTIF_TRAP_TYPE_BGPV6"},
            {SAI_HOSTIF_TRAP_TYPE_CDP, "SAI_HOSTIF_TRAP_TYPE_CDP"},
            {SAI_HOSTIF_TRAP_TYPE_CUSTOM_EXCEPTION_RANGE_BASE, "SAI_HOSTIF_TRAP_TYPE_CUSTOM_EXCEPTION_RANGE_BASE"},
            {SAI_HOSTIF_TRAP_TYPE_DHCP, "SAI_HOSTIF_TRAP_TYPE_DHCP"},
            {SAI_HOSTIF_TRAP_TYPE_DHCPV6, "SAI_HOSTIF_TRAP_TYPE_DHCPV6"},
            {SAI_HOSTIF_TRAP_TYPE_DHCPV6_L2, "SAI_HOSTIF_TRAP_TYPE_DHCPV6_L2"},
            {SAI_HOSTIF_TRAP_TYPE_DHCP_L2, "SAI_HOSTIF_TRAP_TYPE_DHCP_L2"},
            {SAI_HOSTIF_TRAP_TYPE_DNAT_MISS, "SAI_HOSTIF_TRAP_TYPE_DNAT_MISS"},
            {SAI_HOSTIF_TRAP_TYPE_DTP, "SAI_HOSTIF_TRAP_TYPE_DTP"},
            {SAI_HOSTIF_TRAP_TYPE_EAPOL, "SAI_HOSTIF_TRAP_TYPE_EAPOL"},
            {SAI_HOSTIF_TRAP_TYPE_END, "SAI_HOSTIF_TRAP_TYPE_END"},
            {SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_LEAVE, "SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_LEAVE"},
            {SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_QUERY, "SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_QUERY"},
            {SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_V1_REPORT, "SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_V1_REPORT"},
            {SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_V2_REPORT, "SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_V2_REPORT"},
            {SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_V3_REPORT, "SAI_HOSTIF_TRAP_TYPE_IGMP_TYPE_V3_REPORT"},
            {SAI_HOSTIF_TRAP_TYPE_IP2ME, "SAI_HOSTIF_TRAP_TYPE_IP2ME"},
            {SAI_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_DONE, "SAI_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_DONE"},
            {SAI_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_REPORT, "SAI_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_REPORT"},
            {SAI_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_V2, "SAI_HOSTIF_TRAP_TYPE_IPV6_MLD_V1_V2"},
            {SAI_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_ADVERTISEMENT, "SAI_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_ADVERTISEMENT"},
            {SAI_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_DISCOVERY, "SAI_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_DISCOVERY"},
            {SAI_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_SOLICITATION, "SAI_HOSTIF_TRAP_TYPE_IPV6_NEIGHBOR_SOLICITATION"},
            {SAI_HOSTIF_TRAP_TYPE_L3_MTU_ERROR, "SAI_HOSTIF_TRAP_TYPE_L3_MTU_ERROR"},
            {SAI_HOSTIF_TRAP_TYPE_LACP, "SAI_HOSTIF_TRAP_TYPE_LACP"},
            {SAI_HOSTIF_TRAP_TYPE_LLDP, "SAI_HOSTIF_TRAP_TYPE_LLDP"},
            {SAI_HOSTIF_TRAP_TYPE_LOCAL_IP_CUSTOM_RANGE_BASE, "SAI_HOSTIF_TRAP_TYPE_LOCAL_IP_CUSTOM_RANGE_BASE"},
            {SAI_HOSTIF_TRAP_TYPE_MLD_V2_REPORT, "SAI_HOSTIF_TRAP_TYPE_MLD_V2_REPORT"},
            {SAI_HOSTIF_TRAP_TYPE_MPLS_ROUTER_ALERT_LABEL, "SAI_HOSTIF_TRAP_TYPE_MPLS_ROUTER_ALERT_LABEL"},
            {SAI_HOSTIF_TRAP_TYPE_MPLS_TTL_ERROR, "SAI_HOSTIF_TRAP_TYPE_MPLS_TTL_ERROR"},
            {SAI_HOSTIF_TRAP_TYPE_NAT_HAIRPIN, "SAI_HOSTIF_TRAP_TYPE_NAT_HAIRPIN"},
            {SAI_HOSTIF_TRAP_TYPE_OSPF, "SAI_HOSTIF_TRAP_TYPE_OSPF"},
            {SAI_HOSTIF_TRAP_TYPE_OSPFV6, "SAI_HOSTIF_TRAP_TYPE_OSPFV6"},
            {SAI_HOSTIF_TRAP_TYPE_PAGP, "SAI_HOSTIF_TRAP_TYPE_PAGP"},
            {SAI_HOSTIF_TRAP_TYPE_PIM, "SAI_HOSTIF_TRAP_TYPE_PIM"},
            {SAI_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_EGRESS_BUFFER, "SAI_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_EGRESS_BUFFER"},
            {SAI_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_ROUTER, "SAI_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_ROUTER"},
            {SAI_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_WRED, "SAI_HOSTIF_TRAP_TYPE_PIPELINE_DISCARD_WRED"},
            {SAI_HOSTIF_TRAP_TYPE_PTP, "SAI_HOSTIF_TRAP_TYPE_PTP"},
            {SAI_HOSTIF_TRAP_TYPE_PTP_TX_EVENT, "SAI_HOSTIF_TRAP_TYPE_PTP_TX_EVENT"},
            {SAI_HOSTIF_TRAP_TYPE_PVRST, "SAI_HOSTIF_TRAP_TYPE_PVRST"},
            {SAI_HOSTIF_TRAP_TYPE_ROUTER_CUSTOM_RANGE_BASE, "SAI_HOSTIF_TRAP_TYPE_ROUTER_CUSTOM_RANGE_BASE"},
            {SAI_HOSTIF_TRAP_TYPE_SAMPLEPACKET, "SAI_HOSTIF_TRAP_TYPE_SAMPLEPACKET"},
            {SAI_HOSTIF_TRAP_TYPE_SNAT_MISS, "SAI_HOSTIF_TRAP_TYPE_SNAT_MISS"},
            {SAI_HOSTIF_TRAP_TYPE_SNMP, "SAI_HOSTIF_TRAP_TYPE_SNMP"},
            {SAI_HOSTIF_TRAP_TYPE_SSH, "SAI_HOSTIF_TRAP_TYPE_SSH"},
            {SAI_HOSTIF_TRAP_TYPE_START, "SAI_HOSTIF_TRAP_TYPE_START"},
            {SAI_HOSTIF_TRAP_TYPE_STATIC_FDB_MOVE, "SAI_HOSTIF_TRAP_TYPE_STATIC_FDB_MOVE"},
            {SAI_HOSTIF_TRAP_TYPE_STP, "SAI_HOSTIF_TRAP_TYPE_STP"},
            {SAI_HOSTIF_TRAP_TYPE_SWITCH_CUSTOM_RANGE_BASE, "SAI_HOSTIF_TRAP_TYPE_SWITCH_CUSTOM_RANGE_BASE"},
            {SAI_HOSTIF_TRAP_TYPE_TTL_ERROR, "SAI_HOSTIF_TRAP_TYPE_TTL_ERROR"},
            {SAI_HOSTIF_TRAP_TYPE_UDLD, "SAI_HOSTIF_TRAP_TYPE_UDLD"},
            {SAI_HOSTIF_TRAP_TYPE_UNKNOWN_L3_MULTICAST, "SAI_HOSTIF_TRAP_TYPE_UNKNOWN_L3_MULTICAST"},
            {SAI_HOSTIF_TRAP_TYPE_VRRP, "SAI_HOSTIF_TRAP_TYPE_VRRP"},
            {SAI_HOSTIF_TRAP_TYPE_VRRPV6, "SAI_HOSTIF_TRAP_TYPE_VRRPV6"},
            {SAI_HOSTIF_TRAP_TYPE_VTP, "SAI_HOSTIF_TRAP_TYPE_VTP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_tx_type_t& x)
{
    static std::map<sai_hostif_tx_type_t, const char*> strs = {
            {SAI_HOSTIF_TX_TYPE_CUSTOM_RANGE_BASE, "SAI_HOSTIF_TX_TYPE_CUSTOM_RANGE_BASE"},
            {SAI_HOSTIF_TX_TYPE_PIPELINE_BYPASS, "SAI_HOSTIF_TX_TYPE_PIPELINE_BYPASS"},
            {SAI_HOSTIF_TX_TYPE_PIPELINE_LOOKUP, "SAI_HOSTIF_TX_TYPE_PIPELINE_LOOKUP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_type_t& x)
{
    static std::map<sai_hostif_type_t, const char*> strs = {
            {SAI_HOSTIF_TYPE_FD, "SAI_HOSTIF_TYPE_FD"},
            {SAI_HOSTIF_TYPE_GENETLINK, "SAI_HOSTIF_TYPE_GENETLINK"},
            {SAI_HOSTIF_TYPE_NETDEV, "SAI_HOSTIF_TYPE_NETDEV"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_user_defined_trap_attr_t& x)
{
    static std::map<sai_hostif_user_defined_trap_attr_t, const char*> strs = {
            {SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_CUSTOM_RANGE_END, "SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_CUSTOM_RANGE_END"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_CUSTOM_RANGE_START, "SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_CUSTOM_RANGE_START"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP, "SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_GROUP"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY, "SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TRAP_PRIORITY"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE, "SAI_HOSTIF_USER_DEFINED_TRAP_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_user_defined_trap_type_t& x)
{
    static std::map<sai_hostif_user_defined_trap_type_t, const char*> strs = {
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_ACL, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_ACL"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_CUSTOM_RANGE_BASE, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_CUSTOM_RANGE_BASE"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_END, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_END"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_FDB, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_FDB"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_INSEG_ENTRY, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_INSEG_ENTRY"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGH, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGH"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGHBOR, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_NEIGHBOR"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_ROUTER, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_ROUTER"},
            {SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_START, "SAI_HOSTIF_USER_DEFINED_TRAP_TYPE_START"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_hostif_vlan_tag_t& x)
{
    static std::map<sai_hostif_vlan_tag_t, const char*> strs = {
            {SAI_HOSTIF_VLAN_TAG_KEEP, "SAI_HOSTIF_VLAN_TAG_KEEP"},
            {SAI_HOSTIF_VLAN_TAG_ORIGINAL, "SAI_HOSTIF_VLAN_TAG_ORIGINAL"},
            {SAI_HOSTIF_VLAN_TAG_STRIP, "SAI_HOSTIF_VLAN_TAG_STRIP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_in_drop_reason_t& x)
{
    static std::map<sai_in_drop_reason_t, const char*> strs = {
            {SAI_IN_DROP_REASON_ACL_ANY, "SAI_IN_DROP_REASON_ACL_ANY"},
            {SAI_IN_DROP_REASON_ACL_EGRESS_LAG, "SAI_IN_DROP_REASON_ACL_EGRESS_LAG"},
            {SAI_IN_DROP_REASON_ACL_EGRESS_PORT, "SAI_IN_DROP_REASON_ACL_EGRESS_PORT"},
            {SAI_IN_DROP_REASON_ACL_EGRESS_RIF, "SAI_IN_DROP_REASON_ACL_EGRESS_RIF"},
            {SAI_IN_DROP_REASON_ACL_EGRESS_SWITCH, "SAI_IN_DROP_REASON_ACL_EGRESS_SWITCH"},
            {SAI_IN_DROP_REASON_ACL_EGRESS_VLAN, "SAI_IN_DROP_REASON_ACL_EGRESS_VLAN"},
            {SAI_IN_DROP_REASON_ACL_INGRESS_LAG, "SAI_IN_DROP_REASON_ACL_INGRESS_LAG"},
            {SAI_IN_DROP_REASON_ACL_INGRESS_PORT, "SAI_IN_DROP_REASON_ACL_INGRESS_PORT"},
            {SAI_IN_DROP_REASON_ACL_INGRESS_RIF, "SAI_IN_DROP_REASON_ACL_INGRESS_RIF"},
            {SAI_IN_DROP_REASON_ACL_INGRESS_SWITCH, "SAI_IN_DROP_REASON_ACL_INGRESS_SWITCH"},
            {SAI_IN_DROP_REASON_ACL_INGRESS_VLAN, "SAI_IN_DROP_REASON_ACL_INGRESS_VLAN"},
            {SAI_IN_DROP_REASON_BLACKHOLE_ARP, "SAI_IN_DROP_REASON_BLACKHOLE_ARP"},
            {SAI_IN_DROP_REASON_BLACKHOLE_ROUTE, "SAI_IN_DROP_REASON_BLACKHOLE_ROUTE"},
            {SAI_IN_DROP_REASON_CUSTOM_RANGE_BASE, "SAI_IN_DROP_REASON_CUSTOM_RANGE_BASE"},
            {SAI_IN_DROP_REASON_CUSTOM_RANGE_END, "SAI_IN_DROP_REASON_CUSTOM_RANGE_END"},
            {SAI_IN_DROP_REASON_DECAP_ERROR, "SAI_IN_DROP_REASON_DECAP_ERROR"},
            {SAI_IN_DROP_REASON_DIP_LINK_LOCAL, "SAI_IN_DROP_REASON_DIP_LINK_LOCAL"},
            {SAI_IN_DROP_REASON_DIP_LOCAL, "SAI_IN_DROP_REASON_DIP_LOCAL"},
            {SAI_IN_DROP_REASON_DIP_LOOPBACK, "SAI_IN_DROP_REASON_DIP_LOOPBACK"},
            {SAI_IN_DROP_REASON_DMAC_RESERVED, "SAI_IN_DROP_REASON_DMAC_RESERVED"},
            {SAI_IN_DROP_REASON_END, "SAI_IN_DROP_REASON_END"},
            {SAI_IN_DROP_REASON_ERIF_DISABLED, "SAI_IN_DROP_REASON_ERIF_DISABLED"},
            {SAI_IN_DROP_REASON_EXCEEDS_L2_MTU, "SAI_IN_DROP_REASON_EXCEEDS_L2_MTU"},
            {SAI_IN_DROP_REASON_EXCEEDS_L3_MTU, "SAI_IN_DROP_REASON_EXCEEDS_L3_MTU"},
            {SAI_IN_DROP_REASON_FDB_AND_BLACKHOLE_DISCARDS, "SAI_IN_DROP_REASON_FDB_AND_BLACKHOLE_DISCARDS"},
            {SAI_IN_DROP_REASON_FDB_MC_DISCARD, "SAI_IN_DROP_REASON_FDB_MC_DISCARD"},
            {SAI_IN_DROP_REASON_FDB_UC_DISCARD, "SAI_IN_DROP_REASON_FDB_UC_DISCARD"},
            {SAI_IN_DROP_REASON_INGRESS_STP_FILTER, "SAI_IN_DROP_REASON_INGRESS_STP_FILTER"},
            {SAI_IN_DROP_REASON_INGRESS_VLAN_FILTER, "SAI_IN_DROP_REASON_INGRESS_VLAN_FILTER"},
            {SAI_IN_DROP_REASON_IPV6_MC_SCOPE0, "SAI_IN_DROP_REASON_IPV6_MC_SCOPE0"},
            {SAI_IN_DROP_REASON_IPV6_MC_SCOPE1, "SAI_IN_DROP_REASON_IPV6_MC_SCOPE1"},
            {SAI_IN_DROP_REASON_IP_HEADER_ERROR, "SAI_IN_DROP_REASON_IP_HEADER_ERROR"},
            {SAI_IN_DROP_REASON_IRIF_DISABLED, "SAI_IN_DROP_REASON_IRIF_DISABLED"},
            {SAI_IN_DROP_REASON_L2_ANY, "SAI_IN_DROP_REASON_L2_ANY"},
            {SAI_IN_DROP_REASON_L2_LOOPBACK_FILTER, "SAI_IN_DROP_REASON_L2_LOOPBACK_FILTER"},
            {SAI_IN_DROP_REASON_L3_ANY, "SAI_IN_DROP_REASON_L3_ANY"},
            {SAI_IN_DROP_REASON_L3_EGRESS_LINK_DOWN, "SAI_IN_DROP_REASON_L3_EGRESS_LINK_DOWN"},
            {SAI_IN_DROP_REASON_L3_LOOPBACK_FILTER, "SAI_IN_DROP_REASON_L3_LOOPBACK_FILTER"},
            {SAI_IN_DROP_REASON_LPM4_MISS, "SAI_IN_DROP_REASON_LPM4_MISS"},
            {SAI_IN_DROP_REASON_LPM6_MISS, "SAI_IN_DROP_REASON_LPM6_MISS"},
            {SAI_IN_DROP_REASON_MC_DMAC_MISMATCH, "SAI_IN_DROP_REASON_MC_DMAC_MISMATCH"},
            {SAI_IN_DROP_REASON_NON_ROUTABLE, "SAI_IN_DROP_REASON_NON_ROUTABLE"},
            {SAI_IN_DROP_REASON_NO_L3_HEADER, "SAI_IN_DROP_REASON_NO_L3_HEADER"},
            {SAI_IN_DROP_REASON_SIP_BC, "SAI_IN_DROP_REASON_SIP_BC"},
            {SAI_IN_DROP_REASON_SIP_CLASS_E, "SAI_IN_DROP_REASON_SIP_CLASS_E"},
            {SAI_IN_DROP_REASON_SIP_EQUALS_DIP, "SAI_IN_DROP_REASON_SIP_EQUALS_DIP"},
            {SAI_IN_DROP_REASON_SIP_LINK_LOCAL, "SAI_IN_DROP_REASON_SIP_LINK_LOCAL"},
            {SAI_IN_DROP_REASON_SIP_LOOPBACK, "SAI_IN_DROP_REASON_SIP_LOOPBACK"},
            {SAI_IN_DROP_REASON_SIP_MC, "SAI_IN_DROP_REASON_SIP_MC"},
            {SAI_IN_DROP_REASON_SIP_UNSPECIFIED, "SAI_IN_DROP_REASON_SIP_UNSPECIFIED"},
            {SAI_IN_DROP_REASON_SMAC_EQUALS_DMAC, "SAI_IN_DROP_REASON_SMAC_EQUALS_DMAC"},
            {SAI_IN_DROP_REASON_SMAC_MULTICAST, "SAI_IN_DROP_REASON_SMAC_MULTICAST"},
            {SAI_IN_DROP_REASON_START, "SAI_IN_DROP_REASON_START"},
            {SAI_IN_DROP_REASON_TTL, "SAI_IN_DROP_REASON_TTL"},
            {SAI_IN_DROP_REASON_UC_DIP_MC_DMAC, "SAI_IN_DROP_REASON_UC_DIP_MC_DMAC"},
            {SAI_IN_DROP_REASON_UNRESOLVED_NEXT_HOP, "SAI_IN_DROP_REASON_UNRESOLVED_NEXT_HOP"},
            {SAI_IN_DROP_REASON_VLAN_TAG_NOT_ALLOWED, "SAI_IN_DROP_REASON_VLAN_TAG_NOT_ALLOWED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_ingress_priority_group_attr_t& x)
{
    static std::map<sai_ingress_priority_group_attr_t, const char*> strs = {
            {SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE, "SAI_INGRESS_PRIORITY_GROUP_ATTR_BUFFER_PROFILE"},
            {SAI_INGRESS_PRIORITY_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_INGRESS_PRIORITY_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_INGRESS_PRIORITY_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_INGRESS_PRIORITY_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_INGRESS_PRIORITY_GROUP_ATTR_INDEX, "SAI_INGRESS_PRIORITY_GROUP_ATTR_INDEX"},
            {SAI_INGRESS_PRIORITY_GROUP_ATTR_PORT, "SAI_INGRESS_PRIORITY_GROUP_ATTR_PORT"},
            {SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM, "SAI_INGRESS_PRIORITY_GROUP_ATTR_TAM"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_ingress_priority_group_stat_t& x)
{
    static std::map<sai_ingress_priority_group_stat_t, const char*> strs = {
            {SAI_INGRESS_PRIORITY_GROUP_STAT_BYTES, "SAI_INGRESS_PRIORITY_GROUP_STAT_BYTES"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_CURR_OCCUPANCY_BYTES, "SAI_INGRESS_PRIORITY_GROUP_STAT_CURR_OCCUPANCY_BYTES"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_CUSTOM_RANGE_BASE, "SAI_INGRESS_PRIORITY_GROUP_STAT_CUSTOM_RANGE_BASE"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_DROPPED_PACKETS, "SAI_INGRESS_PRIORITY_GROUP_STAT_DROPPED_PACKETS"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_PACKETS, "SAI_INGRESS_PRIORITY_GROUP_STAT_PACKETS"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_SHARED_CURR_OCCUPANCY_BYTES, "SAI_INGRESS_PRIORITY_GROUP_STAT_SHARED_CURR_OCCUPANCY_BYTES"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_SHARED_WATERMARK_BYTES, "SAI_INGRESS_PRIORITY_GROUP_STAT_SHARED_WATERMARK_BYTES"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_WATERMARK_BYTES, "SAI_INGRESS_PRIORITY_GROUP_STAT_WATERMARK_BYTES"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES, "SAI_INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_CURR_OCCUPANCY_BYTES"},
            {SAI_INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_WATERMARK_BYTES, "SAI_INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_WATERMARK_BYTES"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_inseg_entry_attr_t& x)
{
    static std::map<sai_inseg_entry_attr_t, const char*> strs = {
            {SAI_INSEG_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_INSEG_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_INSEG_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_INSEG_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP, "SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_COLOR_MAP"},
            {SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP, "SAI_INSEG_ENTRY_ATTR_MPLS_EXP_TO_TC_MAP"},
            {SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID, "SAI_INSEG_ENTRY_ATTR_NEXT_HOP_ID"},
            {SAI_INSEG_ENTRY_ATTR_NUM_OF_POP, "SAI_INSEG_ENTRY_ATTR_NUM_OF_POP"},
            {SAI_INSEG_ENTRY_ATTR_PACKET_ACTION, "SAI_INSEG_ENTRY_ATTR_PACKET_ACTION"},
            {SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE, "SAI_INSEG_ENTRY_ATTR_POP_QOS_MODE"},
            {SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE, "SAI_INSEG_ENTRY_ATTR_POP_TTL_MODE"},
            {SAI_INSEG_ENTRY_ATTR_PSC_TYPE, "SAI_INSEG_ENTRY_ATTR_PSC_TYPE"},
            {SAI_INSEG_ENTRY_ATTR_QOS_TC, "SAI_INSEG_ENTRY_ATTR_QOS_TC"},
            {SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY, "SAI_INSEG_ENTRY_ATTR_TRAP_PRIORITY"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_inseg_entry_pop_qos_mode_t& x)
{
    static std::map<sai_inseg_entry_pop_qos_mode_t, const char*> strs = {
            {SAI_INSEG_ENTRY_POP_QOS_MODE_PIPE, "SAI_INSEG_ENTRY_POP_QOS_MODE_PIPE"},
            {SAI_INSEG_ENTRY_POP_QOS_MODE_UNIFORM, "SAI_INSEG_ENTRY_POP_QOS_MODE_UNIFORM"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_inseg_entry_pop_ttl_mode_t& x)
{
    static std::map<sai_inseg_entry_pop_ttl_mode_t, const char*> strs = {
            {SAI_INSEG_ENTRY_POP_TTL_MODE_PIPE, "SAI_INSEG_ENTRY_POP_TTL_MODE_PIPE"},
            {SAI_INSEG_ENTRY_POP_TTL_MODE_UNIFORM, "SAI_INSEG_ENTRY_POP_TTL_MODE_UNIFORM"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_inseg_entry_psc_type_t& x)
{
    static std::map<sai_inseg_entry_psc_type_t, const char*> strs = {
            {SAI_INSEG_ENTRY_PSC_TYPE_ELSP, "SAI_INSEG_ENTRY_PSC_TYPE_ELSP"},
            {SAI_INSEG_ENTRY_PSC_TYPE_LLSP, "SAI_INSEG_ENTRY_PSC_TYPE_LLSP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_ip_addr_family_t& x)
{
    static std::map<sai_ip_addr_family_t, const char*> strs = {
            {SAI_IP_ADDR_FAMILY_IPV4, "SAI_IP_ADDR_FAMILY_IPV4"},
            {SAI_IP_ADDR_FAMILY_IPV6, "SAI_IP_ADDR_FAMILY_IPV6"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_ipmc_entry_attr_t& x)
{
    static std::map<sai_ipmc_entry_attr_t, const char*> strs = {
            {SAI_IPMC_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_IPMC_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_IPMC_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_IPMC_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID, "SAI_IPMC_ENTRY_ATTR_OUTPUT_GROUP_ID"},
            {SAI_IPMC_ENTRY_ATTR_PACKET_ACTION, "SAI_IPMC_ENTRY_ATTR_PACKET_ACTION"},
            {SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID, "SAI_IPMC_ENTRY_ATTR_RPF_GROUP_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_ipmc_entry_type_t& x)
{
    static std::map<sai_ipmc_entry_type_t, const char*> strs = {
            {SAI_IPMC_ENTRY_TYPE_SG, "SAI_IPMC_ENTRY_TYPE_SG"},
            {SAI_IPMC_ENTRY_TYPE_XG, "SAI_IPMC_ENTRY_TYPE_XG"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_ipmc_group_attr_t& x)
{
    static std::map<sai_ipmc_group_attr_t, const char*> strs = {
            {SAI_IPMC_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_IPMC_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_IPMC_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_IPMC_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_IPMC_GROUP_ATTR_IPMC_MEMBER_LIST, "SAI_IPMC_GROUP_ATTR_IPMC_MEMBER_LIST"},
            {SAI_IPMC_GROUP_ATTR_IPMC_OUTPUT_COUNT, "SAI_IPMC_GROUP_ATTR_IPMC_OUTPUT_COUNT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_ipmc_group_member_attr_t& x)
{
    static std::map<sai_ipmc_group_member_attr_t, const char*> strs = {
            {SAI_IPMC_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END, "SAI_IPMC_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END"},
            {SAI_IPMC_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START, "SAI_IPMC_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START"},
            {SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_GROUP_ID, "SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_GROUP_ID"},
            {SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_OUTPUT_ID, "SAI_IPMC_GROUP_MEMBER_ATTR_IPMC_OUTPUT_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_isolation_group_attr_t& x)
{
    static std::map<sai_isolation_group_attr_t, const char*> strs = {
            {SAI_ISOLATION_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_ISOLATION_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_ISOLATION_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_ISOLATION_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_ISOLATION_GROUP_ATTR_ISOLATION_MEMBER_LIST, "SAI_ISOLATION_GROUP_ATTR_ISOLATION_MEMBER_LIST"},
            {SAI_ISOLATION_GROUP_ATTR_TYPE, "SAI_ISOLATION_GROUP_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_isolation_group_member_attr_t& x)
{
    static std::map<sai_isolation_group_member_attr_t, const char*> strs = {
            {SAI_ISOLATION_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END, "SAI_ISOLATION_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END"},
            {SAI_ISOLATION_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START, "SAI_ISOLATION_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START"},
            {SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_GROUP_ID, "SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_GROUP_ID"},
            {SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_OBJECT, "SAI_ISOLATION_GROUP_MEMBER_ATTR_ISOLATION_OBJECT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_isolation_group_type_t& x)
{
    static std::map<sai_isolation_group_type_t, const char*> strs = {
            {SAI_ISOLATION_GROUP_TYPE_BRIDGE_PORT, "SAI_ISOLATION_GROUP_TYPE_BRIDGE_PORT"},
            {SAI_ISOLATION_GROUP_TYPE_PORT, "SAI_ISOLATION_GROUP_TYPE_PORT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_l2mc_entry_attr_t& x)
{
    static std::map<sai_l2mc_entry_attr_t, const char*> strs = {
            {SAI_L2MC_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_L2MC_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_L2MC_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_L2MC_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID, "SAI_L2MC_ENTRY_ATTR_OUTPUT_GROUP_ID"},
            {SAI_L2MC_ENTRY_ATTR_PACKET_ACTION, "SAI_L2MC_ENTRY_ATTR_PACKET_ACTION"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_l2mc_entry_type_t& x)
{
    static std::map<sai_l2mc_entry_type_t, const char*> strs = {
            {SAI_L2MC_ENTRY_TYPE_SG, "SAI_L2MC_ENTRY_TYPE_SG"},
            {SAI_L2MC_ENTRY_TYPE_XG, "SAI_L2MC_ENTRY_TYPE_XG"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_l2mc_group_attr_t& x)
{
    static std::map<sai_l2mc_group_attr_t, const char*> strs = {
            {SAI_L2MC_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_L2MC_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_L2MC_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_L2MC_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_L2MC_GROUP_ATTR_L2MC_MEMBER_LIST, "SAI_L2MC_GROUP_ATTR_L2MC_MEMBER_LIST"},
            {SAI_L2MC_GROUP_ATTR_L2MC_OUTPUT_COUNT, "SAI_L2MC_GROUP_ATTR_L2MC_OUTPUT_COUNT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_l2mc_group_member_attr_t& x)
{
    static std::map<sai_l2mc_group_member_attr_t, const char*> strs = {
            {SAI_L2MC_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END, "SAI_L2MC_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END"},
            {SAI_L2MC_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START, "SAI_L2MC_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START"},
            {SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_ENDPOINT_IP, "SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_ENDPOINT_IP"},
            {SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_GROUP_ID, "SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_GROUP_ID"},
            {SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_OUTPUT_ID, "SAI_L2MC_GROUP_MEMBER_ATTR_L2MC_OUTPUT_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_lag_attr_t& x)
{
    static std::map<sai_lag_attr_t, const char*> strs = {
            {SAI_LAG_ATTR_CUSTOM_RANGE_END, "SAI_LAG_ATTR_CUSTOM_RANGE_END"},
            {SAI_LAG_ATTR_CUSTOM_RANGE_START, "SAI_LAG_ATTR_CUSTOM_RANGE_START"},
            {SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY, "SAI_LAG_ATTR_DEFAULT_VLAN_PRIORITY"},
            {SAI_LAG_ATTR_DROP_TAGGED, "SAI_LAG_ATTR_DROP_TAGGED"},
            {SAI_LAG_ATTR_DROP_UNTAGGED, "SAI_LAG_ATTR_DROP_UNTAGGED"},
            {SAI_LAG_ATTR_EGRESS_ACL, "SAI_LAG_ATTR_EGRESS_ACL"},
            {SAI_LAG_ATTR_INGRESS_ACL, "SAI_LAG_ATTR_INGRESS_ACL"},
            {SAI_LAG_ATTR_LABEL, "SAI_LAG_ATTR_LABEL"},
            {SAI_LAG_ATTR_PORT_LIST, "SAI_LAG_ATTR_PORT_LIST"},
            {SAI_LAG_ATTR_PORT_VLAN_ID, "SAI_LAG_ATTR_PORT_VLAN_ID"},
            {SAI_LAG_ATTR_SYSTEM_PORT_AGGREGATE_ID, "SAI_LAG_ATTR_SYSTEM_PORT_AGGREGATE_ID"},
            {SAI_LAG_ATTR_TPID, "SAI_LAG_ATTR_TPID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_lag_member_attr_t& x)
{
    static std::map<sai_lag_member_attr_t, const char*> strs = {
            {SAI_LAG_MEMBER_ATTR_CUSTOM_RANGE_END, "SAI_LAG_MEMBER_ATTR_CUSTOM_RANGE_END"},
            {SAI_LAG_MEMBER_ATTR_CUSTOM_RANGE_START, "SAI_LAG_MEMBER_ATTR_CUSTOM_RANGE_START"},
            {SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE, "SAI_LAG_MEMBER_ATTR_EGRESS_DISABLE"},
            {SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE, "SAI_LAG_MEMBER_ATTR_INGRESS_DISABLE"},
            {SAI_LAG_MEMBER_ATTR_LAG_ID, "SAI_LAG_MEMBER_ATTR_LAG_ID"},
            {SAI_LAG_MEMBER_ATTR_PORT_ID, "SAI_LAG_MEMBER_ATTR_PORT_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_log_level_t& x)
{
    static std::map<sai_log_level_t, const char*> strs = {
            {SAI_LOG_LEVEL_CRITICAL, "SAI_LOG_LEVEL_CRITICAL"},
            {SAI_LOG_LEVEL_DEBUG, "SAI_LOG_LEVEL_DEBUG"},
            {SAI_LOG_LEVEL_ERROR, "SAI_LOG_LEVEL_ERROR"},
            {SAI_LOG_LEVEL_INFO, "SAI_LOG_LEVEL_INFO"},
            {SAI_LOG_LEVEL_NOTICE, "SAI_LOG_LEVEL_NOTICE"},
            {SAI_LOG_LEVEL_WARN, "SAI_LOG_LEVEL_WARN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_attr_t& x)
{
    static std::map<sai_macsec_attr_t, const char*> strs = {
            {SAI_MACSEC_ATTR_AVAILABLE_MACSEC_FLOW, "SAI_MACSEC_ATTR_AVAILABLE_MACSEC_FLOW"},
            {SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SA, "SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SA"},
            {SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SC, "SAI_MACSEC_ATTR_AVAILABLE_MACSEC_SC"},
            {SAI_MACSEC_ATTR_CTAG_TPID, "SAI_MACSEC_ATTR_CTAG_TPID"},
            {SAI_MACSEC_ATTR_CUSTOM_RANGE_END, "SAI_MACSEC_ATTR_CUSTOM_RANGE_END"},
            {SAI_MACSEC_ATTR_CUSTOM_RANGE_START, "SAI_MACSEC_ATTR_CUSTOM_RANGE_START"},
            {SAI_MACSEC_ATTR_DIRECTION, "SAI_MACSEC_ATTR_DIRECTION"},
            {SAI_MACSEC_ATTR_FLOW_LIST, "SAI_MACSEC_ATTR_FLOW_LIST"},
            {SAI_MACSEC_ATTR_GCM_AES128_SUPPORTED, "SAI_MACSEC_ATTR_GCM_AES128_SUPPORTED"},
            {SAI_MACSEC_ATTR_GCM_AES256_SUPPORTED, "SAI_MACSEC_ATTR_GCM_AES256_SUPPORTED"},
            {SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED, "SAI_MACSEC_ATTR_MAX_VLAN_TAGS_PARSED"},
            {SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE, "SAI_MACSEC_ATTR_PHYSICAL_BYPASS_ENABLE"},
            {SAI_MACSEC_ATTR_PN_32BIT_SUPPORTED, "SAI_MACSEC_ATTR_PN_32BIT_SUPPORTED"},
            {SAI_MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL, "SAI_MACSEC_ATTR_SCI_IN_INGRESS_MACSEC_ACL"},
            {SAI_MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED, "SAI_MACSEC_ATTR_SECTAG_OFFSETS_SUPPORTED"},
            {SAI_MACSEC_ATTR_STAG_TPID, "SAI_MACSEC_ATTR_STAG_TPID"},
            {SAI_MACSEC_ATTR_STATS_MODE, "SAI_MACSEC_ATTR_STATS_MODE"},
            {SAI_MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED, "SAI_MACSEC_ATTR_STATS_MODE_READ_CLEAR_SUPPORTED"},
            {SAI_MACSEC_ATTR_STATS_MODE_READ_SUPPORTED, "SAI_MACSEC_ATTR_STATS_MODE_READ_SUPPORTED"},
            {SAI_MACSEC_ATTR_SUPPORTED_PORT_LIST, "SAI_MACSEC_ATTR_SUPPORTED_PORT_LIST"},
            {SAI_MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED, "SAI_MACSEC_ATTR_SWITCHING_MODE_CUT_THROUGH_SUPPORTED"},
            {SAI_MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED, "SAI_MACSEC_ATTR_SWITCHING_MODE_STORE_AND_FORWARD_SUPPORTED"},
            {SAI_MACSEC_ATTR_SYSTEM_SIDE_MTU, "SAI_MACSEC_ATTR_SYSTEM_SIDE_MTU"},
            {SAI_MACSEC_ATTR_WARM_BOOT_ENABLE, "SAI_MACSEC_ATTR_WARM_BOOT_ENABLE"},
            {SAI_MACSEC_ATTR_WARM_BOOT_SUPPORTED, "SAI_MACSEC_ATTR_WARM_BOOT_SUPPORTED"},
            {SAI_MACSEC_ATTR_XPN_64BIT_SUPPORTED, "SAI_MACSEC_ATTR_XPN_64BIT_SUPPORTED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_cipher_suite_t& x)
{
    static std::map<sai_macsec_cipher_suite_t, const char*> strs = {
            {SAI_MACSEC_CIPHER_SUITE_GCM_AES_128, "SAI_MACSEC_CIPHER_SUITE_GCM_AES_128"},
            {SAI_MACSEC_CIPHER_SUITE_GCM_AES_256, "SAI_MACSEC_CIPHER_SUITE_GCM_AES_256"},
            {SAI_MACSEC_CIPHER_SUITE_GCM_AES_XPN_128, "SAI_MACSEC_CIPHER_SUITE_GCM_AES_XPN_128"},
            {SAI_MACSEC_CIPHER_SUITE_GCM_AES_XPN_256, "SAI_MACSEC_CIPHER_SUITE_GCM_AES_XPN_256"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_direction_t& x)
{
    static std::map<sai_macsec_direction_t, const char*> strs = {
            {SAI_MACSEC_DIRECTION_EGRESS, "SAI_MACSEC_DIRECTION_EGRESS"},
            {SAI_MACSEC_DIRECTION_INGRESS, "SAI_MACSEC_DIRECTION_INGRESS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_flow_attr_t& x)
{
    static std::map<sai_macsec_flow_attr_t, const char*> strs = {
            {SAI_MACSEC_FLOW_ATTR_ACL_ENTRY_LIST, "SAI_MACSEC_FLOW_ATTR_ACL_ENTRY_LIST"},
            {SAI_MACSEC_FLOW_ATTR_CUSTOM_RANGE_END, "SAI_MACSEC_FLOW_ATTR_CUSTOM_RANGE_END"},
            {SAI_MACSEC_FLOW_ATTR_CUSTOM_RANGE_START, "SAI_MACSEC_FLOW_ATTR_CUSTOM_RANGE_START"},
            {SAI_MACSEC_FLOW_ATTR_MACSEC_DIRECTION, "SAI_MACSEC_FLOW_ATTR_MACSEC_DIRECTION"},
            {SAI_MACSEC_FLOW_ATTR_SC_LIST, "SAI_MACSEC_FLOW_ATTR_SC_LIST"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_flow_stat_t& x)
{
    static std::map<sai_macsec_flow_stat_t, const char*> strs = {
            {SAI_MACSEC_FLOW_STAT_BROADCAST_PKTS_CONTROLLED, "SAI_MACSEC_FLOW_STAT_BROADCAST_PKTS_CONTROLLED"},
            {SAI_MACSEC_FLOW_STAT_BROADCAST_PKTS_UNCONTROLLED, "SAI_MACSEC_FLOW_STAT_BROADCAST_PKTS_UNCONTROLLED"},
            {SAI_MACSEC_FLOW_STAT_CONTROL_PKTS, "SAI_MACSEC_FLOW_STAT_CONTROL_PKTS"},
            {SAI_MACSEC_FLOW_STAT_IN_PKTS_BAD_TAG, "SAI_MACSEC_FLOW_STAT_IN_PKTS_BAD_TAG"},
            {SAI_MACSEC_FLOW_STAT_IN_PKTS_NO_SCI, "SAI_MACSEC_FLOW_STAT_IN_PKTS_NO_SCI"},
            {SAI_MACSEC_FLOW_STAT_IN_PKTS_NO_TAG, "SAI_MACSEC_FLOW_STAT_IN_PKTS_NO_TAG"},
            {SAI_MACSEC_FLOW_STAT_IN_PKTS_OVERRUN, "SAI_MACSEC_FLOW_STAT_IN_PKTS_OVERRUN"},
            {SAI_MACSEC_FLOW_STAT_IN_PKTS_UNKNOWN_SCI, "SAI_MACSEC_FLOW_STAT_IN_PKTS_UNKNOWN_SCI"},
            {SAI_MACSEC_FLOW_STAT_IN_TAGGED_CONTROL_PKTS, "SAI_MACSEC_FLOW_STAT_IN_TAGGED_CONTROL_PKTS"},
            {SAI_MACSEC_FLOW_STAT_MULTICAST_PKTS_CONTROLLED, "SAI_MACSEC_FLOW_STAT_MULTICAST_PKTS_CONTROLLED"},
            {SAI_MACSEC_FLOW_STAT_MULTICAST_PKTS_UNCONTROLLED, "SAI_MACSEC_FLOW_STAT_MULTICAST_PKTS_UNCONTROLLED"},
            {SAI_MACSEC_FLOW_STAT_OCTETS_CONTROLLED, "SAI_MACSEC_FLOW_STAT_OCTETS_CONTROLLED"},
            {SAI_MACSEC_FLOW_STAT_OCTETS_UNCONTROLLED, "SAI_MACSEC_FLOW_STAT_OCTETS_UNCONTROLLED"},
            {SAI_MACSEC_FLOW_STAT_OTHER_ERR, "SAI_MACSEC_FLOW_STAT_OTHER_ERR"},
            {SAI_MACSEC_FLOW_STAT_OUT_OCTETS_COMMON, "SAI_MACSEC_FLOW_STAT_OUT_OCTETS_COMMON"},
            {SAI_MACSEC_FLOW_STAT_OUT_PKTS_TOO_LONG, "SAI_MACSEC_FLOW_STAT_OUT_PKTS_TOO_LONG"},
            {SAI_MACSEC_FLOW_STAT_PKTS_UNTAGGED, "SAI_MACSEC_FLOW_STAT_PKTS_UNTAGGED"},
            {SAI_MACSEC_FLOW_STAT_UCAST_PKTS_CONTROLLED, "SAI_MACSEC_FLOW_STAT_UCAST_PKTS_CONTROLLED"},
            {SAI_MACSEC_FLOW_STAT_UCAST_PKTS_UNCONTROLLED, "SAI_MACSEC_FLOW_STAT_UCAST_PKTS_UNCONTROLLED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_port_attr_t& x)
{
    static std::map<sai_macsec_port_attr_t, const char*> strs = {
            {SAI_MACSEC_PORT_ATTR_CTAG_ENABLE, "SAI_MACSEC_PORT_ATTR_CTAG_ENABLE"},
            {SAI_MACSEC_PORT_ATTR_CUSTOM_RANGE_END, "SAI_MACSEC_PORT_ATTR_CUSTOM_RANGE_END"},
            {SAI_MACSEC_PORT_ATTR_CUSTOM_RANGE_START, "SAI_MACSEC_PORT_ATTR_CUSTOM_RANGE_START"},
            {SAI_MACSEC_PORT_ATTR_MACSEC_DIRECTION, "SAI_MACSEC_PORT_ATTR_MACSEC_DIRECTION"},
            {SAI_MACSEC_PORT_ATTR_PORT_ID, "SAI_MACSEC_PORT_ATTR_PORT_ID"},
            {SAI_MACSEC_PORT_ATTR_STAG_ENABLE, "SAI_MACSEC_PORT_ATTR_STAG_ENABLE"},
            {SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE, "SAI_MACSEC_PORT_ATTR_SWITCH_SWITCHING_MODE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_port_stat_t& x)
{
    static std::map<sai_macsec_port_stat_t, const char*> strs = {
            {SAI_MACSEC_PORT_STAT_CONTROL_PKTS, "SAI_MACSEC_PORT_STAT_CONTROL_PKTS"},
            {SAI_MACSEC_PORT_STAT_DATA_PKTS, "SAI_MACSEC_PORT_STAT_DATA_PKTS"},
            {SAI_MACSEC_PORT_STAT_PRE_MACSEC_DROP_PKTS, "SAI_MACSEC_PORT_STAT_PRE_MACSEC_DROP_PKTS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_sa_attr_t& x)
{
    static std::map<sai_macsec_sa_attr_t, const char*> strs = {
            {SAI_MACSEC_SA_ATTR_AN, "SAI_MACSEC_SA_ATTR_AN"},
            {SAI_MACSEC_SA_ATTR_AUTH_KEY, "SAI_MACSEC_SA_ATTR_AUTH_KEY"},
            {SAI_MACSEC_SA_ATTR_CUSTOM_RANGE_END, "SAI_MACSEC_SA_ATTR_CUSTOM_RANGE_END"},
            {SAI_MACSEC_SA_ATTR_CUSTOM_RANGE_START, "SAI_MACSEC_SA_ATTR_CUSTOM_RANGE_START"},
            {SAI_MACSEC_SA_ATTR_MACSEC_DIRECTION, "SAI_MACSEC_SA_ATTR_MACSEC_DIRECTION"},
            {SAI_MACSEC_SA_ATTR_MACSEC_SSCI, "SAI_MACSEC_SA_ATTR_MACSEC_SSCI"},
            {SAI_MACSEC_SA_ATTR_MINIMUM_XPN, "SAI_MACSEC_SA_ATTR_MINIMUM_XPN"},
            {SAI_MACSEC_SA_ATTR_SAK, "SAI_MACSEC_SA_ATTR_SAK"},
            {SAI_MACSEC_SA_ATTR_SALT, "SAI_MACSEC_SA_ATTR_SALT"},
            {SAI_MACSEC_SA_ATTR_SC_ID, "SAI_MACSEC_SA_ATTR_SC_ID"},
            {SAI_MACSEC_SA_ATTR_XPN, "SAI_MACSEC_SA_ATTR_XPN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_sa_stat_t& x)
{
    static std::map<sai_macsec_sa_stat_t, const char*> strs = {
            {SAI_MACSEC_SA_STAT_IN_PKTS_DELAYED, "SAI_MACSEC_SA_STAT_IN_PKTS_DELAYED"},
            {SAI_MACSEC_SA_STAT_IN_PKTS_INVALID, "SAI_MACSEC_SA_STAT_IN_PKTS_INVALID"},
            {SAI_MACSEC_SA_STAT_IN_PKTS_LATE, "SAI_MACSEC_SA_STAT_IN_PKTS_LATE"},
            {SAI_MACSEC_SA_STAT_IN_PKTS_NOT_USING_SA, "SAI_MACSEC_SA_STAT_IN_PKTS_NOT_USING_SA"},
            {SAI_MACSEC_SA_STAT_IN_PKTS_NOT_VALID, "SAI_MACSEC_SA_STAT_IN_PKTS_NOT_VALID"},
            {SAI_MACSEC_SA_STAT_IN_PKTS_OK, "SAI_MACSEC_SA_STAT_IN_PKTS_OK"},
            {SAI_MACSEC_SA_STAT_IN_PKTS_UNCHECKED, "SAI_MACSEC_SA_STAT_IN_PKTS_UNCHECKED"},
            {SAI_MACSEC_SA_STAT_IN_PKTS_UNUSED_SA, "SAI_MACSEC_SA_STAT_IN_PKTS_UNUSED_SA"},
            {SAI_MACSEC_SA_STAT_OCTETS_ENCRYPTED, "SAI_MACSEC_SA_STAT_OCTETS_ENCRYPTED"},
            {SAI_MACSEC_SA_STAT_OCTETS_PROTECTED, "SAI_MACSEC_SA_STAT_OCTETS_PROTECTED"},
            {SAI_MACSEC_SA_STAT_OUT_PKTS_ENCRYPTED, "SAI_MACSEC_SA_STAT_OUT_PKTS_ENCRYPTED"},
            {SAI_MACSEC_SA_STAT_OUT_PKTS_PROTECTED, "SAI_MACSEC_SA_STAT_OUT_PKTS_PROTECTED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_sc_attr_t& x)
{
    static std::map<sai_macsec_sc_attr_t, const char*> strs = {
            {SAI_MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID, "SAI_MACSEC_SC_ATTR_ACTIVE_EGRESS_SA_ID"},
            {SAI_MACSEC_SC_ATTR_CUSTOM_RANGE_END, "SAI_MACSEC_SC_ATTR_CUSTOM_RANGE_END"},
            {SAI_MACSEC_SC_ATTR_CUSTOM_RANGE_START, "SAI_MACSEC_SC_ATTR_CUSTOM_RANGE_START"},
            {SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE, "SAI_MACSEC_SC_ATTR_ENCRYPTION_ENABLE"},
            {SAI_MACSEC_SC_ATTR_FLOW_ID, "SAI_MACSEC_SC_ATTR_FLOW_ID"},
            {SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE, "SAI_MACSEC_SC_ATTR_MACSEC_CIPHER_SUITE"},
            {SAI_MACSEC_SC_ATTR_MACSEC_DIRECTION, "SAI_MACSEC_SC_ATTR_MACSEC_DIRECTION"},
            {SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE, "SAI_MACSEC_SC_ATTR_MACSEC_EXPLICIT_SCI_ENABLE"},
            {SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE, "SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_ENABLE"},
            {SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW, "SAI_MACSEC_SC_ATTR_MACSEC_REPLAY_PROTECTION_WINDOW"},
            {SAI_MACSEC_SC_ATTR_MACSEC_SCI, "SAI_MACSEC_SC_ATTR_MACSEC_SCI"},
            {SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET, "SAI_MACSEC_SC_ATTR_MACSEC_SECTAG_OFFSET"},
            {SAI_MACSEC_SC_ATTR_SA_LIST, "SAI_MACSEC_SC_ATTR_SA_LIST"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_macsec_sc_stat_t& x)
{
    static std::map<sai_macsec_sc_stat_t, const char*> strs = {
            {SAI_MACSEC_SC_STAT_SA_NOT_IN_USE, "SAI_MACSEC_SC_STAT_SA_NOT_IN_USE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_mcast_fdb_entry_attr_t& x)
{
    static std::map<sai_mcast_fdb_entry_attr_t, const char*> strs = {
            {SAI_MCAST_FDB_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_MCAST_FDB_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_MCAST_FDB_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_MCAST_FDB_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID, "SAI_MCAST_FDB_ENTRY_ATTR_GROUP_ID"},
            {SAI_MCAST_FDB_ENTRY_ATTR_META_DATA, "SAI_MCAST_FDB_ENTRY_ATTR_META_DATA"},
            {SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION, "SAI_MCAST_FDB_ENTRY_ATTR_PACKET_ACTION"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_meter_type_t& x)
{
    static std::map<sai_meter_type_t, const char*> strs = {
            {SAI_METER_TYPE_BYTES, "SAI_METER_TYPE_BYTES"},
            {SAI_METER_TYPE_CUSTOM_RANGE_BASE, "SAI_METER_TYPE_CUSTOM_RANGE_BASE"},
            {SAI_METER_TYPE_PACKETS, "SAI_METER_TYPE_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_mirror_session_attr_t& x)
{
    static std::map<sai_mirror_session_attr_t, const char*> strs = {
            {SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE, "SAI_MIRROR_SESSION_ATTR_CONGESTION_MODE"},
            {SAI_MIRROR_SESSION_ATTR_CUSTOM_RANGE_END, "SAI_MIRROR_SESSION_ATTR_CUSTOM_RANGE_END"},
            {SAI_MIRROR_SESSION_ATTR_CUSTOM_RANGE_START, "SAI_MIRROR_SESSION_ATTR_CUSTOM_RANGE_START"},
            {SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS, "SAI_MIRROR_SESSION_ATTR_DST_IP_ADDRESS"},
            {SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS, "SAI_MIRROR_SESSION_ATTR_DST_MAC_ADDRESS"},
            {SAI_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE, "SAI_MIRROR_SESSION_ATTR_ERSPAN_ENCAPSULATION_TYPE"},
            {SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE, "SAI_MIRROR_SESSION_ATTR_GRE_PROTOCOL_TYPE"},
            {SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION, "SAI_MIRROR_SESSION_ATTR_IPHDR_VERSION"},
            {SAI_MIRROR_SESSION_ATTR_MONITOR_PORT, "SAI_MIRROR_SESSION_ATTR_MONITOR_PORT"},
            {SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST, "SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST"},
            {SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID, "SAI_MIRROR_SESSION_ATTR_MONITOR_PORTLIST_VALID"},
            {SAI_MIRROR_SESSION_ATTR_POLICER, "SAI_MIRROR_SESSION_ATTR_POLICER"},
            {SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE, "SAI_MIRROR_SESSION_ATTR_SAMPLE_RATE"},
            {SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS, "SAI_MIRROR_SESSION_ATTR_SRC_IP_ADDRESS"},
            {SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS, "SAI_MIRROR_SESSION_ATTR_SRC_MAC_ADDRESS"},
            {SAI_MIRROR_SESSION_ATTR_TC, "SAI_MIRROR_SESSION_ATTR_TC"},
            {SAI_MIRROR_SESSION_ATTR_TOS, "SAI_MIRROR_SESSION_ATTR_TOS"},
            {SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE, "SAI_MIRROR_SESSION_ATTR_TRUNCATE_SIZE"},
            {SAI_MIRROR_SESSION_ATTR_TTL, "SAI_MIRROR_SESSION_ATTR_TTL"},
            {SAI_MIRROR_SESSION_ATTR_TYPE, "SAI_MIRROR_SESSION_ATTR_TYPE"},
            {SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT, "SAI_MIRROR_SESSION_ATTR_UDP_DST_PORT"},
            {SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT, "SAI_MIRROR_SESSION_ATTR_UDP_SRC_PORT"},
            {SAI_MIRROR_SESSION_ATTR_VLAN_CFI, "SAI_MIRROR_SESSION_ATTR_VLAN_CFI"},
            {SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID, "SAI_MIRROR_SESSION_ATTR_VLAN_HEADER_VALID"},
            {SAI_MIRROR_SESSION_ATTR_VLAN_ID, "SAI_MIRROR_SESSION_ATTR_VLAN_ID"},
            {SAI_MIRROR_SESSION_ATTR_VLAN_PRI, "SAI_MIRROR_SESSION_ATTR_VLAN_PRI"},
            {SAI_MIRROR_SESSION_ATTR_VLAN_TPID, "SAI_MIRROR_SESSION_ATTR_VLAN_TPID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_mirror_session_congestion_mode_t& x)
{
    static std::map<sai_mirror_session_congestion_mode_t, const char*> strs = {
            {SAI_MIRROR_SESSION_CONGESTION_MODE_CORRELATED, "SAI_MIRROR_SESSION_CONGESTION_MODE_CORRELATED"},
            {SAI_MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT, "SAI_MIRROR_SESSION_CONGESTION_MODE_INDEPENDENT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_mirror_session_type_t& x)
{
    static std::map<sai_mirror_session_type_t, const char*> strs = {
            {SAI_MIRROR_SESSION_TYPE_ENHANCED_REMOTE, "SAI_MIRROR_SESSION_TYPE_ENHANCED_REMOTE"},
            {SAI_MIRROR_SESSION_TYPE_LOCAL, "SAI_MIRROR_SESSION_TYPE_LOCAL"},
            {SAI_MIRROR_SESSION_TYPE_REMOTE, "SAI_MIRROR_SESSION_TYPE_REMOTE"},
            {SAI_MIRROR_SESSION_TYPE_SFLOW, "SAI_MIRROR_SESSION_TYPE_SFLOW"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_nat_entry_attr_t& x)
{
    static std::map<sai_nat_entry_attr_t, const char*> strs = {
            {SAI_NAT_ENTRY_ATTR_BYTE_COUNT, "SAI_NAT_ENTRY_ATTR_BYTE_COUNT"},
            {SAI_NAT_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_NAT_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_NAT_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_NAT_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_NAT_ENTRY_ATTR_DST_IP, "SAI_NAT_ENTRY_ATTR_DST_IP"},
            {SAI_NAT_ENTRY_ATTR_DST_IP_MASK, "SAI_NAT_ENTRY_ATTR_DST_IP_MASK"},
            {SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT, "SAI_NAT_ENTRY_ATTR_ENABLE_BYTE_COUNT"},
            {SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT, "SAI_NAT_ENTRY_ATTR_ENABLE_PACKET_COUNT"},
            {SAI_NAT_ENTRY_ATTR_HIT_BIT, "SAI_NAT_ENTRY_ATTR_HIT_BIT"},
            {SAI_NAT_ENTRY_ATTR_HIT_BIT_COR, "SAI_NAT_ENTRY_ATTR_HIT_BIT_COR"},
            {SAI_NAT_ENTRY_ATTR_L4_DST_PORT, "SAI_NAT_ENTRY_ATTR_L4_DST_PORT"},
            {SAI_NAT_ENTRY_ATTR_L4_SRC_PORT, "SAI_NAT_ENTRY_ATTR_L4_SRC_PORT"},
            {SAI_NAT_ENTRY_ATTR_NAT_TYPE, "SAI_NAT_ENTRY_ATTR_NAT_TYPE"},
            {SAI_NAT_ENTRY_ATTR_PACKET_COUNT, "SAI_NAT_ENTRY_ATTR_PACKET_COUNT"},
            {SAI_NAT_ENTRY_ATTR_SRC_IP, "SAI_NAT_ENTRY_ATTR_SRC_IP"},
            {SAI_NAT_ENTRY_ATTR_SRC_IP_MASK, "SAI_NAT_ENTRY_ATTR_SRC_IP_MASK"},
            {SAI_NAT_ENTRY_ATTR_VR_ID, "SAI_NAT_ENTRY_ATTR_VR_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_nat_type_t& x)
{
    static std::map<sai_nat_type_t, const char*> strs = {
            {SAI_NAT_TYPE_DESTINATION_NAT, "SAI_NAT_TYPE_DESTINATION_NAT"},
            {SAI_NAT_TYPE_DESTINATION_NAT_POOL, "SAI_NAT_TYPE_DESTINATION_NAT_POOL"},
            {SAI_NAT_TYPE_DOUBLE_NAT, "SAI_NAT_TYPE_DOUBLE_NAT"},
            {SAI_NAT_TYPE_NONE, "SAI_NAT_TYPE_NONE"},
            {SAI_NAT_TYPE_SOURCE_NAT, "SAI_NAT_TYPE_SOURCE_NAT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_nat_zone_counter_attr_t& x)
{
    static std::map<sai_nat_zone_counter_attr_t, const char*> strs = {
            {SAI_NAT_ZONE_COUNTER_ATTR_CUSTOM_RANGE_END, "SAI_NAT_ZONE_COUNTER_ATTR_CUSTOM_RANGE_END"},
            {SAI_NAT_ZONE_COUNTER_ATTR_CUSTOM_RANGE_START, "SAI_NAT_ZONE_COUNTER_ATTR_CUSTOM_RANGE_START"},
            {SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT, "SAI_NAT_ZONE_COUNTER_ATTR_DISCARD_PACKET_COUNT"},
            {SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD, "SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_DISCARD"},
            {SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS, "SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATIONS"},
            {SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED, "SAI_NAT_ZONE_COUNTER_ATTR_ENABLE_TRANSLATION_NEEDED"},
            {SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE, "SAI_NAT_ZONE_COUNTER_ATTR_NAT_TYPE"},
            {SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT, "SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATIONS_PACKET_COUNT"},
            {SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT, "SAI_NAT_ZONE_COUNTER_ATTR_TRANSLATION_NEEDED_PACKET_COUNT"},
            {SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID, "SAI_NAT_ZONE_COUNTER_ATTR_ZONE_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_native_hash_field_t& x)
{
    static std::map<sai_native_hash_field_t, const char*> strs = {
            {SAI_NATIVE_HASH_FIELD_DST_IP, "SAI_NATIVE_HASH_FIELD_DST_IP"},
            {SAI_NATIVE_HASH_FIELD_DST_IPV4, "SAI_NATIVE_HASH_FIELD_DST_IPV4"},
            {SAI_NATIVE_HASH_FIELD_DST_IPV6, "SAI_NATIVE_HASH_FIELD_DST_IPV6"},
            {SAI_NATIVE_HASH_FIELD_DST_MAC, "SAI_NATIVE_HASH_FIELD_DST_MAC"},
            {SAI_NATIVE_HASH_FIELD_ETHERTYPE, "SAI_NATIVE_HASH_FIELD_ETHERTYPE"},
            {SAI_NATIVE_HASH_FIELD_INNER_DST_IP, "SAI_NATIVE_HASH_FIELD_INNER_DST_IP"},
            {SAI_NATIVE_HASH_FIELD_INNER_DST_IPV4, "SAI_NATIVE_HASH_FIELD_INNER_DST_IPV4"},
            {SAI_NATIVE_HASH_FIELD_INNER_DST_IPV6, "SAI_NATIVE_HASH_FIELD_INNER_DST_IPV6"},
            {SAI_NATIVE_HASH_FIELD_INNER_DST_MAC, "SAI_NATIVE_HASH_FIELD_INNER_DST_MAC"},
            {SAI_NATIVE_HASH_FIELD_INNER_ETHERTYPE, "SAI_NATIVE_HASH_FIELD_INNER_ETHERTYPE"},
            {SAI_NATIVE_HASH_FIELD_INNER_IP_PROTOCOL, "SAI_NATIVE_HASH_FIELD_INNER_IP_PROTOCOL"},
            {SAI_NATIVE_HASH_FIELD_INNER_L4_DST_PORT, "SAI_NATIVE_HASH_FIELD_INNER_L4_DST_PORT"},
            {SAI_NATIVE_HASH_FIELD_INNER_L4_SRC_PORT, "SAI_NATIVE_HASH_FIELD_INNER_L4_SRC_PORT"},
            {SAI_NATIVE_HASH_FIELD_INNER_SRC_IP, "SAI_NATIVE_HASH_FIELD_INNER_SRC_IP"},
            {SAI_NATIVE_HASH_FIELD_INNER_SRC_IPV4, "SAI_NATIVE_HASH_FIELD_INNER_SRC_IPV4"},
            {SAI_NATIVE_HASH_FIELD_INNER_SRC_IPV6, "SAI_NATIVE_HASH_FIELD_INNER_SRC_IPV6"},
            {SAI_NATIVE_HASH_FIELD_INNER_SRC_MAC, "SAI_NATIVE_HASH_FIELD_INNER_SRC_MAC"},
            {SAI_NATIVE_HASH_FIELD_IN_PORT, "SAI_NATIVE_HASH_FIELD_IN_PORT"},
            {SAI_NATIVE_HASH_FIELD_IP_PROTOCOL, "SAI_NATIVE_HASH_FIELD_IP_PROTOCOL"},
            {SAI_NATIVE_HASH_FIELD_L4_DST_PORT, "SAI_NATIVE_HASH_FIELD_L4_DST_PORT"},
            {SAI_NATIVE_HASH_FIELD_L4_SRC_PORT, "SAI_NATIVE_HASH_FIELD_L4_SRC_PORT"},
            {SAI_NATIVE_HASH_FIELD_MPLS_LABEL_0, "SAI_NATIVE_HASH_FIELD_MPLS_LABEL_0"},
            {SAI_NATIVE_HASH_FIELD_MPLS_LABEL_1, "SAI_NATIVE_HASH_FIELD_MPLS_LABEL_1"},
            {SAI_NATIVE_HASH_FIELD_MPLS_LABEL_2, "SAI_NATIVE_HASH_FIELD_MPLS_LABEL_2"},
            {SAI_NATIVE_HASH_FIELD_MPLS_LABEL_3, "SAI_NATIVE_HASH_FIELD_MPLS_LABEL_3"},
            {SAI_NATIVE_HASH_FIELD_MPLS_LABEL_4, "SAI_NATIVE_HASH_FIELD_MPLS_LABEL_4"},
            {SAI_NATIVE_HASH_FIELD_MPLS_LABEL_ALL, "SAI_NATIVE_HASH_FIELD_MPLS_LABEL_ALL"},
            {SAI_NATIVE_HASH_FIELD_NONE, "SAI_NATIVE_HASH_FIELD_NONE"},
            {SAI_NATIVE_HASH_FIELD_SRC_IP, "SAI_NATIVE_HASH_FIELD_SRC_IP"},
            {SAI_NATIVE_HASH_FIELD_SRC_IPV4, "SAI_NATIVE_HASH_FIELD_SRC_IPV4"},
            {SAI_NATIVE_HASH_FIELD_SRC_IPV6, "SAI_NATIVE_HASH_FIELD_SRC_IPV6"},
            {SAI_NATIVE_HASH_FIELD_SRC_MAC, "SAI_NATIVE_HASH_FIELD_SRC_MAC"},
            {SAI_NATIVE_HASH_FIELD_VLAN_ID, "SAI_NATIVE_HASH_FIELD_VLAN_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_neighbor_entry_attr_t& x)
{
    static std::map<sai_neighbor_entry_attr_t, const char*> strs = {
            {SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID, "SAI_NEIGHBOR_ENTRY_ATTR_COUNTER_ID"},
            {SAI_NEIGHBOR_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_NEIGHBOR_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_NEIGHBOR_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_NEIGHBOR_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS, "SAI_NEIGHBOR_ENTRY_ATTR_DST_MAC_ADDRESS"},
            {SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX, "SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_IMPOSE_INDEX"},
            {SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX, "SAI_NEIGHBOR_ENTRY_ATTR_ENCAP_INDEX"},
            {SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY, "SAI_NEIGHBOR_ENTRY_ATTR_IP_ADDR_FAMILY"},
            {SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL, "SAI_NEIGHBOR_ENTRY_ATTR_IS_LOCAL"},
            {SAI_NEIGHBOR_ENTRY_ATTR_META_DATA, "SAI_NEIGHBOR_ENTRY_ATTR_META_DATA"},
            {SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE, "SAI_NEIGHBOR_ENTRY_ATTR_NO_HOST_ROUTE"},
            {SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION, "SAI_NEIGHBOR_ENTRY_ATTR_PACKET_ACTION"},
            {SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID, "SAI_NEIGHBOR_ENTRY_ATTR_USER_TRAP_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_attr_t& x)
{
    static std::map<sai_next_hop_attr_t, const char*> strs = {
            {SAI_NEXT_HOP_ATTR_COUNTER_ID, "SAI_NEXT_HOP_ATTR_COUNTER_ID"},
            {SAI_NEXT_HOP_ATTR_CUSTOM_RANGE_END, "SAI_NEXT_HOP_ATTR_CUSTOM_RANGE_END"},
            {SAI_NEXT_HOP_ATTR_CUSTOM_RANGE_START, "SAI_NEXT_HOP_ATTR_CUSTOM_RANGE_START"},
            {SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL, "SAI_NEXT_HOP_ATTR_DISABLE_DECREMENT_TTL"},
            {SAI_NEXT_HOP_ATTR_IP, "SAI_NEXT_HOP_ATTR_IP"},
            {SAI_NEXT_HOP_ATTR_LABELSTACK, "SAI_NEXT_HOP_ATTR_LABELSTACK"},
            {SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE, "SAI_NEXT_HOP_ATTR_OUTSEG_EXP_MODE"},
            {SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE, "SAI_NEXT_HOP_ATTR_OUTSEG_EXP_VALUE"},
            {SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE, "SAI_NEXT_HOP_ATTR_OUTSEG_TTL_MODE"},
            {SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE, "SAI_NEXT_HOP_ATTR_OUTSEG_TTL_VALUE"},
            {SAI_NEXT_HOP_ATTR_OUTSEG_TYPE, "SAI_NEXT_HOP_ATTR_OUTSEG_TYPE"},
            {SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP, "SAI_NEXT_HOP_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP"},
            {SAI_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID, "SAI_NEXT_HOP_ATTR_ROUTER_INTERFACE_ID"},
            {SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_POP_TYPE, "SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_POP_TYPE"},
            {SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_TYPE, "SAI_NEXT_HOP_ATTR_SEGMENTROUTE_ENDPOINT_TYPE"},
            {SAI_NEXT_HOP_ATTR_SEGMENTROUTE_SIDLIST_ID, "SAI_NEXT_HOP_ATTR_SEGMENTROUTE_SIDLIST_ID"},
            {SAI_NEXT_HOP_ATTR_TUNNEL_ID, "SAI_NEXT_HOP_ATTR_TUNNEL_ID"},
            {SAI_NEXT_HOP_ATTR_TUNNEL_MAC, "SAI_NEXT_HOP_ATTR_TUNNEL_MAC"},
            {SAI_NEXT_HOP_ATTR_TUNNEL_VNI, "SAI_NEXT_HOP_ATTR_TUNNEL_VNI"},
            {SAI_NEXT_HOP_ATTR_TYPE, "SAI_NEXT_HOP_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_endpoint_pop_type_t& x)
{
    static std::map<sai_next_hop_endpoint_pop_type_t, const char*> strs = {
            {SAI_NEXT_HOP_ENDPOINT_POP_TYPE_PSP, "SAI_NEXT_HOP_ENDPOINT_POP_TYPE_PSP"},
            {SAI_NEXT_HOP_ENDPOINT_POP_TYPE_USP, "SAI_NEXT_HOP_ENDPOINT_POP_TYPE_USP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_endpoint_type_t& x)
{
    static std::map<sai_next_hop_endpoint_type_t, const char*> strs = {
            {SAI_NEXT_HOP_ENDPOINT_TYPE_CUSTOM_RANGE_BASE, "SAI_NEXT_HOP_ENDPOINT_TYPE_CUSTOM_RANGE_BASE"},
            {SAI_NEXT_HOP_ENDPOINT_TYPE_DT4, "SAI_NEXT_HOP_ENDPOINT_TYPE_DT4"},
            {SAI_NEXT_HOP_ENDPOINT_TYPE_DT6, "SAI_NEXT_HOP_ENDPOINT_TYPE_DT6"},
            {SAI_NEXT_HOP_ENDPOINT_TYPE_DX2, "SAI_NEXT_HOP_ENDPOINT_TYPE_DX2"},
            {SAI_NEXT_HOP_ENDPOINT_TYPE_DX4, "SAI_NEXT_HOP_ENDPOINT_TYPE_DX4"},
            {SAI_NEXT_HOP_ENDPOINT_TYPE_DX6, "SAI_NEXT_HOP_ENDPOINT_TYPE_DX6"},
            {SAI_NEXT_HOP_ENDPOINT_TYPE_E, "SAI_NEXT_HOP_ENDPOINT_TYPE_E"},
            {SAI_NEXT_HOP_ENDPOINT_TYPE_T, "SAI_NEXT_HOP_ENDPOINT_TYPE_T"},
            {SAI_NEXT_HOP_ENDPOINT_TYPE_X, "SAI_NEXT_HOP_ENDPOINT_TYPE_X"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_group_attr_t& x)
{
    static std::map<sai_next_hop_group_attr_t, const char*> strs = {
            {SAI_NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE, "SAI_NEXT_HOP_GROUP_ATTR_CONFIGURED_SIZE"},
            {SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID, "SAI_NEXT_HOP_GROUP_ATTR_COUNTER_ID"},
            {SAI_NEXT_HOP_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_NEXT_HOP_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_NEXT_HOP_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_NEXT_HOP_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT, "SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_COUNT"},
            {SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST, "SAI_NEXT_HOP_GROUP_ATTR_NEXT_HOP_MEMBER_LIST"},
            {SAI_NEXT_HOP_GROUP_ATTR_REAL_SIZE, "SAI_NEXT_HOP_GROUP_ATTR_REAL_SIZE"},
            {SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER, "SAI_NEXT_HOP_GROUP_ATTR_SET_SWITCHOVER"},
            {SAI_NEXT_HOP_GROUP_ATTR_TYPE, "SAI_NEXT_HOP_GROUP_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_group_member_attr_t& x)
{
    static std::map<sai_next_hop_group_member_attr_t, const char*> strs = {
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CONFIGURED_ROLE"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_COUNTER_ID"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_INDEX, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_INDEX"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_MONITORED_OBJECT"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_GROUP_ID"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_NEXT_HOP_ID"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_OBSERVED_ROLE"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_SEQUENCE_ID"},
            {SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT, "SAI_NEXT_HOP_GROUP_MEMBER_ATTR_WEIGHT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_group_member_configured_role_t& x)
{
    static std::map<sai_next_hop_group_member_configured_role_t, const char*> strs = {
            {SAI_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_PRIMARY, "SAI_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_PRIMARY"},
            {SAI_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_STANDBY, "SAI_NEXT_HOP_GROUP_MEMBER_CONFIGURED_ROLE_STANDBY"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_group_member_observed_role_t& x)
{
    static std::map<sai_next_hop_group_member_observed_role_t, const char*> strs = {
            {SAI_NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_ACTIVE, "SAI_NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_ACTIVE"},
            {SAI_NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_INACTIVE, "SAI_NEXT_HOP_GROUP_MEMBER_OBSERVED_ROLE_INACTIVE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_group_type_t& x)
{
    static std::map<sai_next_hop_group_type_t, const char*> strs = {
            {SAI_NEXT_HOP_GROUP_TYPE_DYNAMIC_ORDERED_ECMP, "SAI_NEXT_HOP_GROUP_TYPE_DYNAMIC_ORDERED_ECMP"},
            {SAI_NEXT_HOP_GROUP_TYPE_DYNAMIC_UNORDERED_ECMP, "SAI_NEXT_HOP_GROUP_TYPE_DYNAMIC_UNORDERED_ECMP"},
            {SAI_NEXT_HOP_GROUP_TYPE_ECMP, "SAI_NEXT_HOP_GROUP_TYPE_ECMP"},
            {SAI_NEXT_HOP_GROUP_TYPE_FINE_GRAIN_ECMP, "SAI_NEXT_HOP_GROUP_TYPE_FINE_GRAIN_ECMP"},
            {SAI_NEXT_HOP_GROUP_TYPE_PROTECTION, "SAI_NEXT_HOP_GROUP_TYPE_PROTECTION"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_next_hop_type_t& x)
{
    static std::map<sai_next_hop_type_t, const char*> strs = {
            {SAI_NEXT_HOP_TYPE_IP, "SAI_NEXT_HOP_TYPE_IP"},
            {SAI_NEXT_HOP_TYPE_MPLS, "SAI_NEXT_HOP_TYPE_MPLS"},
            {SAI_NEXT_HOP_TYPE_SEGMENTROUTE_ENDPOINT, "SAI_NEXT_HOP_TYPE_SEGMENTROUTE_ENDPOINT"},
            {SAI_NEXT_HOP_TYPE_SEGMENTROUTE_SIDLIST, "SAI_NEXT_HOP_TYPE_SEGMENTROUTE_SIDLIST"},
            {SAI_NEXT_HOP_TYPE_TUNNEL_ENCAP, "SAI_NEXT_HOP_TYPE_TUNNEL_ENCAP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_object_type_t& x)
{
    static std::map<sai_object_type_t, const char*> strs = {
            {SAI_OBJECT_TYPE_ACL_COUNTER, "SAI_OBJECT_TYPE_ACL_COUNTER"},
            {SAI_OBJECT_TYPE_ACL_ENTRY, "SAI_OBJECT_TYPE_ACL_ENTRY"},
            {SAI_OBJECT_TYPE_ACL_RANGE, "SAI_OBJECT_TYPE_ACL_RANGE"},
            {SAI_OBJECT_TYPE_ACL_TABLE, "SAI_OBJECT_TYPE_ACL_TABLE"},
            {SAI_OBJECT_TYPE_ACL_TABLE_GROUP, "SAI_OBJECT_TYPE_ACL_TABLE_GROUP"},
            {SAI_OBJECT_TYPE_ACL_TABLE_GROUP_MEMBER, "SAI_OBJECT_TYPE_ACL_TABLE_GROUP_MEMBER"},
            {SAI_OBJECT_TYPE_BFD_SESSION, "SAI_OBJECT_TYPE_BFD_SESSION"},
            {SAI_OBJECT_TYPE_BRIDGE, "SAI_OBJECT_TYPE_BRIDGE"},
            {SAI_OBJECT_TYPE_BRIDGE_PORT, "SAI_OBJECT_TYPE_BRIDGE_PORT"},
            {SAI_OBJECT_TYPE_BUFFER_POOL, "SAI_OBJECT_TYPE_BUFFER_POOL"},
            {SAI_OBJECT_TYPE_BUFFER_PROFILE, "SAI_OBJECT_TYPE_BUFFER_PROFILE"},
            {SAI_OBJECT_TYPE_COUNTER, "SAI_OBJECT_TYPE_COUNTER"},
            {SAI_OBJECT_TYPE_DEBUG_COUNTER, "SAI_OBJECT_TYPE_DEBUG_COUNTER"},
            {SAI_OBJECT_TYPE_DTEL, "SAI_OBJECT_TYPE_DTEL"},
            {SAI_OBJECT_TYPE_DTEL_EVENT, "SAI_OBJECT_TYPE_DTEL_EVENT"},
            {SAI_OBJECT_TYPE_DTEL_INT_SESSION, "SAI_OBJECT_TYPE_DTEL_INT_SESSION"},
            {SAI_OBJECT_TYPE_DTEL_QUEUE_REPORT, "SAI_OBJECT_TYPE_DTEL_QUEUE_REPORT"},
            {SAI_OBJECT_TYPE_DTEL_REPORT_SESSION, "SAI_OBJECT_TYPE_DTEL_REPORT_SESSION"},
            {SAI_OBJECT_TYPE_FDB_ENTRY, "SAI_OBJECT_TYPE_FDB_ENTRY"},
            {SAI_OBJECT_TYPE_FDB_FLUSH, "SAI_OBJECT_TYPE_FDB_FLUSH"},
            {SAI_OBJECT_TYPE_FINE_GRAINED_HASH_FIELD, "SAI_OBJECT_TYPE_FINE_GRAINED_HASH_FIELD"},
            {SAI_OBJECT_TYPE_HASH, "SAI_OBJECT_TYPE_HASH"},
            {SAI_OBJECT_TYPE_HOSTIF, "SAI_OBJECT_TYPE_HOSTIF"},
            {SAI_OBJECT_TYPE_HOSTIF_PACKET, "SAI_OBJECT_TYPE_HOSTIF_PACKET"},
            {SAI_OBJECT_TYPE_HOSTIF_TABLE_ENTRY, "SAI_OBJECT_TYPE_HOSTIF_TABLE_ENTRY"},
            {SAI_OBJECT_TYPE_HOSTIF_TRAP, "SAI_OBJECT_TYPE_HOSTIF_TRAP"},
            {SAI_OBJECT_TYPE_HOSTIF_TRAP_GROUP, "SAI_OBJECT_TYPE_HOSTIF_TRAP_GROUP"},
            {SAI_OBJECT_TYPE_HOSTIF_USER_DEFINED_TRAP, "SAI_OBJECT_TYPE_HOSTIF_USER_DEFINED_TRAP"},
            {SAI_OBJECT_TYPE_INGRESS_PRIORITY_GROUP, "SAI_OBJECT_TYPE_INGRESS_PRIORITY_GROUP"},
            {SAI_OBJECT_TYPE_INSEG_ENTRY, "SAI_OBJECT_TYPE_INSEG_ENTRY"},
            {SAI_OBJECT_TYPE_IPMC_ENTRY, "SAI_OBJECT_TYPE_IPMC_ENTRY"},
            {SAI_OBJECT_TYPE_IPMC_GROUP, "SAI_OBJECT_TYPE_IPMC_GROUP"},
            {SAI_OBJECT_TYPE_IPMC_GROUP_MEMBER, "SAI_OBJECT_TYPE_IPMC_GROUP_MEMBER"},
            {SAI_OBJECT_TYPE_ISOLATION_GROUP, "SAI_OBJECT_TYPE_ISOLATION_GROUP"},
            {SAI_OBJECT_TYPE_ISOLATION_GROUP_MEMBER, "SAI_OBJECT_TYPE_ISOLATION_GROUP_MEMBER"},
            {SAI_OBJECT_TYPE_L2MC_ENTRY, "SAI_OBJECT_TYPE_L2MC_ENTRY"},
            {SAI_OBJECT_TYPE_L2MC_GROUP, "SAI_OBJECT_TYPE_L2MC_GROUP"},
            {SAI_OBJECT_TYPE_L2MC_GROUP_MEMBER, "SAI_OBJECT_TYPE_L2MC_GROUP_MEMBER"},
            {SAI_OBJECT_TYPE_LAG, "SAI_OBJECT_TYPE_LAG"},
            {SAI_OBJECT_TYPE_LAG_MEMBER, "SAI_OBJECT_TYPE_LAG_MEMBER"},
            {SAI_OBJECT_TYPE_MACSEC, "SAI_OBJECT_TYPE_MACSEC"},
            {SAI_OBJECT_TYPE_MACSEC_FLOW, "SAI_OBJECT_TYPE_MACSEC_FLOW"},
            {SAI_OBJECT_TYPE_MACSEC_PORT, "SAI_OBJECT_TYPE_MACSEC_PORT"},
            {SAI_OBJECT_TYPE_MACSEC_SA, "SAI_OBJECT_TYPE_MACSEC_SA"},
            {SAI_OBJECT_TYPE_MACSEC_SC, "SAI_OBJECT_TYPE_MACSEC_SC"},
            {SAI_OBJECT_TYPE_MAX, "SAI_OBJECT_TYPE_MAX"},
            {SAI_OBJECT_TYPE_MCAST_FDB_ENTRY, "SAI_OBJECT_TYPE_MCAST_FDB_ENTRY"},
            {SAI_OBJECT_TYPE_MIRROR_SESSION, "SAI_OBJECT_TYPE_MIRROR_SESSION"},
            {SAI_OBJECT_TYPE_NAT_ENTRY, "SAI_OBJECT_TYPE_NAT_ENTRY"},
            {SAI_OBJECT_TYPE_NAT_ZONE_COUNTER, "SAI_OBJECT_TYPE_NAT_ZONE_COUNTER"},
            {SAI_OBJECT_TYPE_NEIGHBOR_ENTRY, "SAI_OBJECT_TYPE_NEIGHBOR_ENTRY"},
            {SAI_OBJECT_TYPE_NEXT_HOP, "SAI_OBJECT_TYPE_NEXT_HOP"},
            {SAI_OBJECT_TYPE_NEXT_HOP_GROUP, "SAI_OBJECT_TYPE_NEXT_HOP_GROUP"},
            {SAI_OBJECT_TYPE_NEXT_HOP_GROUP_MEMBER, "SAI_OBJECT_TYPE_NEXT_HOP_GROUP_MEMBER"},
            {SAI_OBJECT_TYPE_NULL, "SAI_OBJECT_TYPE_NULL"},
            {SAI_OBJECT_TYPE_POLICER, "SAI_OBJECT_TYPE_POLICER"},
            {SAI_OBJECT_TYPE_PORT, "SAI_OBJECT_TYPE_PORT"},
            {SAI_OBJECT_TYPE_PORT_CONNECTOR, "SAI_OBJECT_TYPE_PORT_CONNECTOR"},
            {SAI_OBJECT_TYPE_PORT_POOL, "SAI_OBJECT_TYPE_PORT_POOL"},
            {SAI_OBJECT_TYPE_PORT_SERDES, "SAI_OBJECT_TYPE_PORT_SERDES"},
            {SAI_OBJECT_TYPE_QOS_MAP, "SAI_OBJECT_TYPE_QOS_MAP"},
            {SAI_OBJECT_TYPE_QUEUE, "SAI_OBJECT_TYPE_QUEUE"},
            {SAI_OBJECT_TYPE_ROUTER_INTERFACE, "SAI_OBJECT_TYPE_ROUTER_INTERFACE"},
            {SAI_OBJECT_TYPE_ROUTE_ENTRY, "SAI_OBJECT_TYPE_ROUTE_ENTRY"},
            {SAI_OBJECT_TYPE_RPF_GROUP, "SAI_OBJECT_TYPE_RPF_GROUP"},
            {SAI_OBJECT_TYPE_RPF_GROUP_MEMBER, "SAI_OBJECT_TYPE_RPF_GROUP_MEMBER"},
            {SAI_OBJECT_TYPE_SAMPLEPACKET, "SAI_OBJECT_TYPE_SAMPLEPACKET"},
            {SAI_OBJECT_TYPE_SCHEDULER, "SAI_OBJECT_TYPE_SCHEDULER"},
            {SAI_OBJECT_TYPE_SCHEDULER_GROUP, "SAI_OBJECT_TYPE_SCHEDULER_GROUP"},
            {SAI_OBJECT_TYPE_SEGMENTROUTE_SIDLIST, "SAI_OBJECT_TYPE_SEGMENTROUTE_SIDLIST"},
            {SAI_OBJECT_TYPE_STP, "SAI_OBJECT_TYPE_STP"},
            {SAI_OBJECT_TYPE_STP_PORT, "SAI_OBJECT_TYPE_STP_PORT"},
            {SAI_OBJECT_TYPE_SWITCH, "SAI_OBJECT_TYPE_SWITCH"},
            {SAI_OBJECT_TYPE_SYSTEM_PORT, "SAI_OBJECT_TYPE_SYSTEM_PORT"},
            {SAI_OBJECT_TYPE_TAM, "SAI_OBJECT_TYPE_TAM"},
            {SAI_OBJECT_TYPE_TAM_COLLECTOR, "SAI_OBJECT_TYPE_TAM_COLLECTOR"},
            {SAI_OBJECT_TYPE_TAM_EVENT, "SAI_OBJECT_TYPE_TAM_EVENT"},
            {SAI_OBJECT_TYPE_TAM_EVENT_ACTION, "SAI_OBJECT_TYPE_TAM_EVENT_ACTION"},
            {SAI_OBJECT_TYPE_TAM_EVENT_THRESHOLD, "SAI_OBJECT_TYPE_TAM_EVENT_THRESHOLD"},
            {SAI_OBJECT_TYPE_TAM_INT, "SAI_OBJECT_TYPE_TAM_INT"},
            {SAI_OBJECT_TYPE_TAM_MATH_FUNC, "SAI_OBJECT_TYPE_TAM_MATH_FUNC"},
            {SAI_OBJECT_TYPE_TAM_REPORT, "SAI_OBJECT_TYPE_TAM_REPORT"},
            {SAI_OBJECT_TYPE_TAM_TELEMETRY, "SAI_OBJECT_TYPE_TAM_TELEMETRY"},
            {SAI_OBJECT_TYPE_TAM_TEL_TYPE, "SAI_OBJECT_TYPE_TAM_TEL_TYPE"},
            {SAI_OBJECT_TYPE_TAM_TRANSPORT, "SAI_OBJECT_TYPE_TAM_TRANSPORT"},
            {SAI_OBJECT_TYPE_TUNNEL, "SAI_OBJECT_TYPE_TUNNEL"},
            {SAI_OBJECT_TYPE_TUNNEL_MAP, "SAI_OBJECT_TYPE_TUNNEL_MAP"},
            {SAI_OBJECT_TYPE_TUNNEL_MAP_ENTRY, "SAI_OBJECT_TYPE_TUNNEL_MAP_ENTRY"},
            {SAI_OBJECT_TYPE_TUNNEL_TERM_TABLE_ENTRY, "SAI_OBJECT_TYPE_TUNNEL_TERM_TABLE_ENTRY"},
            {SAI_OBJECT_TYPE_UDF, "SAI_OBJECT_TYPE_UDF"},
            {SAI_OBJECT_TYPE_UDF_GROUP, "SAI_OBJECT_TYPE_UDF_GROUP"},
            {SAI_OBJECT_TYPE_UDF_MATCH, "SAI_OBJECT_TYPE_UDF_MATCH"},
            {SAI_OBJECT_TYPE_VIRTUAL_ROUTER, "SAI_OBJECT_TYPE_VIRTUAL_ROUTER"},
            {SAI_OBJECT_TYPE_VLAN, "SAI_OBJECT_TYPE_VLAN"},
            {SAI_OBJECT_TYPE_VLAN_MEMBER, "SAI_OBJECT_TYPE_VLAN_MEMBER"},
            {SAI_OBJECT_TYPE_WRED, "SAI_OBJECT_TYPE_WRED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_out_drop_reason_t& x)
{
    static std::map<sai_out_drop_reason_t, const char*> strs = {
            {SAI_OUT_DROP_REASON_CUSTOM_RANGE_BASE, "SAI_OUT_DROP_REASON_CUSTOM_RANGE_BASE"},
            {SAI_OUT_DROP_REASON_CUSTOM_RANGE_END, "SAI_OUT_DROP_REASON_CUSTOM_RANGE_END"},
            {SAI_OUT_DROP_REASON_EGRESS_VLAN_FILTER, "SAI_OUT_DROP_REASON_EGRESS_VLAN_FILTER"},
            {SAI_OUT_DROP_REASON_END, "SAI_OUT_DROP_REASON_END"},
            {SAI_OUT_DROP_REASON_L2_ANY, "SAI_OUT_DROP_REASON_L2_ANY"},
            {SAI_OUT_DROP_REASON_L3_ANY, "SAI_OUT_DROP_REASON_L3_ANY"},
            {SAI_OUT_DROP_REASON_L3_EGRESS_LINK_DOWN, "SAI_OUT_DROP_REASON_L3_EGRESS_LINK_DOWN"},
            {SAI_OUT_DROP_REASON_START, "SAI_OUT_DROP_REASON_START"},
            {SAI_OUT_DROP_REASON_TUNNEL_LOOPBACK_PACKET_DROP, "SAI_OUT_DROP_REASON_TUNNEL_LOOPBACK_PACKET_DROP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_outseg_exp_mode_t& x)
{
    static std::map<sai_outseg_exp_mode_t, const char*> strs = {
            {SAI_OUTSEG_EXP_MODE_PIPE, "SAI_OUTSEG_EXP_MODE_PIPE"},
            {SAI_OUTSEG_EXP_MODE_UNIFORM, "SAI_OUTSEG_EXP_MODE_UNIFORM"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_outseg_ttl_mode_t& x)
{
    static std::map<sai_outseg_ttl_mode_t, const char*> strs = {
            {SAI_OUTSEG_TTL_MODE_PIPE, "SAI_OUTSEG_TTL_MODE_PIPE"},
            {SAI_OUTSEG_TTL_MODE_UNIFORM, "SAI_OUTSEG_TTL_MODE_UNIFORM"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_outseg_type_t& x)
{
    static std::map<sai_outseg_type_t, const char*> strs = {
            {SAI_OUTSEG_TYPE_PUSH, "SAI_OUTSEG_TYPE_PUSH"},
            {SAI_OUTSEG_TYPE_SWAP, "SAI_OUTSEG_TYPE_SWAP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_packet_action_t& x)
{
    static std::map<sai_packet_action_t, const char*> strs = {
            {SAI_PACKET_ACTION_COPY, "SAI_PACKET_ACTION_COPY"},
            {SAI_PACKET_ACTION_COPY_CANCEL, "SAI_PACKET_ACTION_COPY_CANCEL"},
            {SAI_PACKET_ACTION_DENY, "SAI_PACKET_ACTION_DENY"},
            {SAI_PACKET_ACTION_DROP, "SAI_PACKET_ACTION_DROP"},
            {SAI_PACKET_ACTION_FORWARD, "SAI_PACKET_ACTION_FORWARD"},
            {SAI_PACKET_ACTION_LOG, "SAI_PACKET_ACTION_LOG"},
            {SAI_PACKET_ACTION_TRANSIT, "SAI_PACKET_ACTION_TRANSIT"},
            {SAI_PACKET_ACTION_TRAP, "SAI_PACKET_ACTION_TRAP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_packet_color_t& x)
{
    static std::map<sai_packet_color_t, const char*> strs = {
            {SAI_PACKET_COLOR_GREEN, "SAI_PACKET_COLOR_GREEN"},
            {SAI_PACKET_COLOR_RED, "SAI_PACKET_COLOR_RED"},
            {SAI_PACKET_COLOR_YELLOW, "SAI_PACKET_COLOR_YELLOW"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_packet_vlan_t& x)
{
    static std::map<sai_packet_vlan_t, const char*> strs = {
            {SAI_PACKET_VLAN_DOUBLE_TAG, "SAI_PACKET_VLAN_DOUBLE_TAG"},
            {SAI_PACKET_VLAN_SINGLE_OUTER_TAG, "SAI_PACKET_VLAN_SINGLE_OUTER_TAG"},
            {SAI_PACKET_VLAN_UNTAG, "SAI_PACKET_VLAN_UNTAG"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_policer_attr_t& x)
{
    static std::map<sai_policer_attr_t, const char*> strs = {
            {SAI_POLICER_ATTR_CBS, "SAI_POLICER_ATTR_CBS"},
            {SAI_POLICER_ATTR_CIR, "SAI_POLICER_ATTR_CIR"},
            {SAI_POLICER_ATTR_COLOR_SOURCE, "SAI_POLICER_ATTR_COLOR_SOURCE"},
            {SAI_POLICER_ATTR_CUSTOM_RANGE_END, "SAI_POLICER_ATTR_CUSTOM_RANGE_END"},
            {SAI_POLICER_ATTR_CUSTOM_RANGE_START, "SAI_POLICER_ATTR_CUSTOM_RANGE_START"},
            {SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST, "SAI_POLICER_ATTR_ENABLE_COUNTER_PACKET_ACTION_LIST"},
            {SAI_POLICER_ATTR_GREEN_PACKET_ACTION, "SAI_POLICER_ATTR_GREEN_PACKET_ACTION"},
            {SAI_POLICER_ATTR_METER_TYPE, "SAI_POLICER_ATTR_METER_TYPE"},
            {SAI_POLICER_ATTR_MODE, "SAI_POLICER_ATTR_MODE"},
            {SAI_POLICER_ATTR_PBS, "SAI_POLICER_ATTR_PBS"},
            {SAI_POLICER_ATTR_PIR, "SAI_POLICER_ATTR_PIR"},
            {SAI_POLICER_ATTR_RED_PACKET_ACTION, "SAI_POLICER_ATTR_RED_PACKET_ACTION"},
            {SAI_POLICER_ATTR_YELLOW_PACKET_ACTION, "SAI_POLICER_ATTR_YELLOW_PACKET_ACTION"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_policer_color_source_t& x)
{
    static std::map<sai_policer_color_source_t, const char*> strs = {
            {SAI_POLICER_COLOR_SOURCE_AWARE, "SAI_POLICER_COLOR_SOURCE_AWARE"},
            {SAI_POLICER_COLOR_SOURCE_BLIND, "SAI_POLICER_COLOR_SOURCE_BLIND"},
            {SAI_POLICER_COLOR_SOURCE_CUSTOM_RANGE_BASE, "SAI_POLICER_COLOR_SOURCE_CUSTOM_RANGE_BASE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_policer_mode_t& x)
{
    static std::map<sai_policer_mode_t, const char*> strs = {
            {SAI_POLICER_MODE_CUSTOM_RANGE_BASE, "SAI_POLICER_MODE_CUSTOM_RANGE_BASE"},
            {SAI_POLICER_MODE_SR_TCM, "SAI_POLICER_MODE_SR_TCM"},
            {SAI_POLICER_MODE_STORM_CONTROL, "SAI_POLICER_MODE_STORM_CONTROL"},
            {SAI_POLICER_MODE_TR_TCM, "SAI_POLICER_MODE_TR_TCM"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_policer_stat_t& x)
{
    static std::map<sai_policer_stat_t, const char*> strs = {
            {SAI_POLICER_STAT_ATTR_BYTES, "SAI_POLICER_STAT_ATTR_BYTES"},
            {SAI_POLICER_STAT_CUSTOM_RANGE_BASE, "SAI_POLICER_STAT_CUSTOM_RANGE_BASE"},
            {SAI_POLICER_STAT_GREEN_BYTES, "SAI_POLICER_STAT_GREEN_BYTES"},
            {SAI_POLICER_STAT_GREEN_PACKETS, "SAI_POLICER_STAT_GREEN_PACKETS"},
            {SAI_POLICER_STAT_PACKETS, "SAI_POLICER_STAT_PACKETS"},
            {SAI_POLICER_STAT_RED_BYTES, "SAI_POLICER_STAT_RED_BYTES"},
            {SAI_POLICER_STAT_RED_PACKETS, "SAI_POLICER_STAT_RED_PACKETS"},
            {SAI_POLICER_STAT_YELLOW_BYTES, "SAI_POLICER_STAT_YELLOW_BYTES"},
            {SAI_POLICER_STAT_YELLOW_PACKETS, "SAI_POLICER_STAT_YELLOW_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_attr_t& x)
{
    static std::map<sai_port_attr_t, const char*> strs = {
            {SAI_PORT_ATTR_ADMIN_STATE, "SAI_PORT_ATTR_ADMIN_STATE"},
            {SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE, "SAI_PORT_ATTR_ADVERTISED_ASYMMETRIC_PAUSE_MODE"},
            {SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE, "SAI_PORT_ATTR_ADVERTISED_AUTO_NEG_MODE"},
            {SAI_PORT_ATTR_ADVERTISED_FEC_MODE, "SAI_PORT_ATTR_ADVERTISED_FEC_MODE"},
            {SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE, "SAI_PORT_ATTR_ADVERTISED_FLOW_CONTROL_MODE"},
            {SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED, "SAI_PORT_ATTR_ADVERTISED_HALF_DUPLEX_SPEED"},
            {SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE, "SAI_PORT_ATTR_ADVERTISED_INTERFACE_TYPE"},
            {SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE, "SAI_PORT_ATTR_ADVERTISED_MEDIA_TYPE"},
            {SAI_PORT_ATTR_ADVERTISED_OUI_CODE, "SAI_PORT_ATTR_ADVERTISED_OUI_CODE"},
            {SAI_PORT_ATTR_ADVERTISED_SPEED, "SAI_PORT_ATTR_ADVERTISED_SPEED"},
            {SAI_PORT_ATTR_AUTO_NEG_MODE, "SAI_PORT_ATTR_AUTO_NEG_MODE"},
            {SAI_PORT_ATTR_AUTO_NEG_STATUS, "SAI_PORT_ATTR_AUTO_NEG_STATUS"},
            {SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID, "SAI_PORT_ATTR_BROADCAST_STORM_CONTROL_POLICER_ID"},
            {SAI_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE, "SAI_PORT_ATTR_CURRENT_BREAKOUT_MODE_TYPE"},
            {SAI_PORT_ATTR_CUSTOM_RANGE_END, "SAI_PORT_ATTR_CUSTOM_RANGE_END"},
            {SAI_PORT_ATTR_CUSTOM_RANGE_START, "SAI_PORT_ATTR_CUSTOM_RANGE_START"},
            {SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY, "SAI_PORT_ATTR_DEFAULT_VLAN_PRIORITY"},
            {SAI_PORT_ATTR_DISABLE_DECREMENT_TTL, "SAI_PORT_ATTR_DISABLE_DECREMENT_TTL"},
            {SAI_PORT_ATTR_DROP_TAGGED, "SAI_PORT_ATTR_DROP_TAGGED"},
            {SAI_PORT_ATTR_DROP_UNTAGGED, "SAI_PORT_ATTR_DROP_UNTAGGED"},
            {SAI_PORT_ATTR_EEE_ENABLE, "SAI_PORT_ATTR_EEE_ENABLE"},
            {SAI_PORT_ATTR_EEE_IDLE_TIME, "SAI_PORT_ATTR_EEE_IDLE_TIME"},
            {SAI_PORT_ATTR_EEE_WAKE_TIME, "SAI_PORT_ATTR_EEE_WAKE_TIME"},
            {SAI_PORT_ATTR_EGRESS_ACL, "SAI_PORT_ATTR_EGRESS_ACL"},
            {SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST, "SAI_PORT_ATTR_EGRESS_BLOCK_PORT_LIST"},
            {SAI_PORT_ATTR_EGRESS_MACSEC_ACL, "SAI_PORT_ATTR_EGRESS_MACSEC_ACL"},
            {SAI_PORT_ATTR_EGRESS_MIRROR_SESSION, "SAI_PORT_ATTR_EGRESS_MIRROR_SESSION"},
            {SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE, "SAI_PORT_ATTR_EGRESS_SAMPLEPACKET_ENABLE"},
            {SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION, "SAI_PORT_ATTR_EGRESS_SAMPLE_MIRROR_SESSION"},
            {SAI_PORT_ATTR_ERR_STATUS_LIST, "SAI_PORT_ATTR_ERR_STATUS_LIST"},
            {SAI_PORT_ATTR_EYE_VALUES, "SAI_PORT_ATTR_EYE_VALUES"},
            {SAI_PORT_ATTR_FABRIC_ATTACHED, "SAI_PORT_ATTR_FABRIC_ATTACHED"},
            {SAI_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX, "SAI_PORT_ATTR_FABRIC_ATTACHED_PORT_INDEX"},
            {SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID, "SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_ID"},
            {SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE, "SAI_PORT_ATTR_FABRIC_ATTACHED_SWITCH_TYPE"},
            {SAI_PORT_ATTR_FABRIC_REACHABILITY, "SAI_PORT_ATTR_FABRIC_REACHABILITY"},
            {SAI_PORT_ATTR_FEC_MODE, "SAI_PORT_ATTR_FEC_MODE"},
            {SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID, "SAI_PORT_ATTR_FLOOD_STORM_CONTROL_POLICER_ID"},
            {SAI_PORT_ATTR_FULL_DUPLEX_MODE, "SAI_PORT_ATTR_FULL_DUPLEX_MODE"},
            {SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE, "SAI_PORT_ATTR_GLOBAL_FLOW_CONTROL_MODE"},
            {SAI_PORT_ATTR_HW_LANE_LIST, "SAI_PORT_ATTR_HW_LANE_LIST"},
            {SAI_PORT_ATTR_HW_PROFILE_ID, "SAI_PORT_ATTR_HW_PROFILE_ID"},
            {SAI_PORT_ATTR_INGRESS_ACL, "SAI_PORT_ATTR_INGRESS_ACL"},
            {SAI_PORT_ATTR_INGRESS_MACSEC_ACL, "SAI_PORT_ATTR_INGRESS_MACSEC_ACL"},
            {SAI_PORT_ATTR_INGRESS_MIRROR_SESSION, "SAI_PORT_ATTR_INGRESS_MIRROR_SESSION"},
            {SAI_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST, "SAI_PORT_ATTR_INGRESS_PRIORITY_GROUP_LIST"},
            {SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE, "SAI_PORT_ATTR_INGRESS_SAMPLEPACKET_ENABLE"},
            {SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION, "SAI_PORT_ATTR_INGRESS_SAMPLE_MIRROR_SESSION"},
            {SAI_PORT_ATTR_INTERFACE_TYPE, "SAI_PORT_ATTR_INTERFACE_TYPE"},
            {SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE, "SAI_PORT_ATTR_INTERNAL_LOOPBACK_MODE"},
            {SAI_PORT_ATTR_ISOLATION_GROUP, "SAI_PORT_ATTR_ISOLATION_GROUP"},
            {SAI_PORT_ATTR_LINK_TRAINING_ENABLE, "SAI_PORT_ATTR_LINK_TRAINING_ENABLE"},
            {SAI_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS, "SAI_PORT_ATTR_LINK_TRAINING_FAILURE_STATUS"},
            {SAI_PORT_ATTR_LINK_TRAINING_RX_STATUS, "SAI_PORT_ATTR_LINK_TRAINING_RX_STATUS"},
            {SAI_PORT_ATTR_MACSEC_PORT_LIST, "SAI_PORT_ATTR_MACSEC_PORT_LIST"},
            {SAI_PORT_ATTR_MEDIA_TYPE, "SAI_PORT_ATTR_MEDIA_TYPE"},
            {SAI_PORT_ATTR_META_DATA, "SAI_PORT_ATTR_META_DATA"},
            {SAI_PORT_ATTR_MTU, "SAI_PORT_ATTR_MTU"},
            {SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID, "SAI_PORT_ATTR_MULTICAST_STORM_CONTROL_POLICER_ID"},
            {SAI_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS, "SAI_PORT_ATTR_NUMBER_OF_INGRESS_PRIORITY_GROUPS"},
            {SAI_PORT_ATTR_OPER_SPEED, "SAI_PORT_ATTR_OPER_SPEED"},
            {SAI_PORT_ATTR_OPER_STATUS, "SAI_PORT_ATTR_OPER_STATUS"},
            {SAI_PORT_ATTR_PKT_TX_ENABLE, "SAI_PORT_ATTR_PKT_TX_ENABLE"},
            {SAI_PORT_ATTR_POLICER_ID, "SAI_PORT_ATTR_POLICER_ID"},
            {SAI_PORT_ATTR_PORT_POOL_LIST, "SAI_PORT_ATTR_PORT_POOL_LIST"},
            {SAI_PORT_ATTR_PORT_SERDES_ID, "SAI_PORT_ATTR_PORT_SERDES_ID"},
            {SAI_PORT_ATTR_PORT_VLAN_ID, "SAI_PORT_ATTR_PORT_VLAN_ID"},
            {SAI_PORT_ATTR_PRBS_CONFIG, "SAI_PORT_ATTR_PRBS_CONFIG"},
            {SAI_PORT_ATTR_PRBS_LOCK_LOSS_STATUS, "SAI_PORT_ATTR_PRBS_LOCK_LOSS_STATUS"},
            {SAI_PORT_ATTR_PRBS_LOCK_STATUS, "SAI_PORT_ATTR_PRBS_LOCK_STATUS"},
            {SAI_PORT_ATTR_PRBS_POLYNOMIAL, "SAI_PORT_ATTR_PRBS_POLYNOMIAL"},
            {SAI_PORT_ATTR_PRBS_RX_STATUS, "SAI_PORT_ATTR_PRBS_RX_STATUS"},
            {SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL, "SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL"},
            {SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE, "SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_MODE"},
            {SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX, "SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_RX"},
            {SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX, "SAI_PORT_ATTR_PRIORITY_FLOW_CONTROL_TX"},
            {SAI_PORT_ATTR_PTP_MODE, "SAI_PORT_ATTR_PTP_MODE"},
            {SAI_PORT_ATTR_QOS_DEFAULT_TC, "SAI_PORT_ATTR_QOS_DEFAULT_TC"},
            {SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP, "SAI_PORT_ATTR_QOS_DOT1P_TO_COLOR_MAP"},
            {SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP, "SAI_PORT_ATTR_QOS_DOT1P_TO_TC_MAP"},
            {SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP, "SAI_PORT_ATTR_QOS_DSCP_TO_COLOR_MAP"},
            {SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP, "SAI_PORT_ATTR_QOS_DSCP_TO_TC_MAP"},
            {SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST, "SAI_PORT_ATTR_QOS_EGRESS_BUFFER_PROFILE_LIST"},
            {SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST, "SAI_PORT_ATTR_QOS_INGRESS_BUFFER_PROFILE_LIST"},
            {SAI_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE, "SAI_PORT_ATTR_QOS_MAXIMUM_HEADROOM_SIZE"},
            {SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP, "SAI_PORT_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP"},
            {SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP, "SAI_PORT_ATTR_QOS_MPLS_EXP_TO_TC_MAP"},
            {SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES, "SAI_PORT_ATTR_QOS_NUMBER_OF_QUEUES"},
            {SAI_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS, "SAI_PORT_ATTR_QOS_NUMBER_OF_SCHEDULER_GROUPS"},
            {SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP, "SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_PRIORITY_GROUP_MAP"},
            {SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP, "SAI_PORT_ATTR_QOS_PFC_PRIORITY_TO_QUEUE_MAP"},
            {SAI_PORT_ATTR_QOS_QUEUE_LIST, "SAI_PORT_ATTR_QOS_QUEUE_LIST"},
            {SAI_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST, "SAI_PORT_ATTR_QOS_SCHEDULER_GROUP_LIST"},
            {SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID, "SAI_PORT_ATTR_QOS_SCHEDULER_PROFILE_ID"},
            {SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP, "SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP"},
            {SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP, "SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP"},
            {SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP, "SAI_PORT_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP"},
            {SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP, "SAI_PORT_ATTR_QOS_TC_TO_PRIORITY_GROUP_MAP"},
            {SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP, "SAI_PORT_ATTR_QOS_TC_TO_QUEUE_MAP"},
            {SAI_PORT_ATTR_REFERENCE_CLOCK, "SAI_PORT_ATTR_REFERENCE_CLOCK"},
            {SAI_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE, "SAI_PORT_ATTR_REMOTE_ADVERTISED_ASYMMETRIC_PAUSE_MODE"},
            {SAI_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE, "SAI_PORT_ATTR_REMOTE_ADVERTISED_AUTO_NEG_MODE"},
            {SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE, "SAI_PORT_ATTR_REMOTE_ADVERTISED_FEC_MODE"},
            {SAI_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE, "SAI_PORT_ATTR_REMOTE_ADVERTISED_FLOW_CONTROL_MODE"},
            {SAI_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED, "SAI_PORT_ATTR_REMOTE_ADVERTISED_HALF_DUPLEX_SPEED"},
            {SAI_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE, "SAI_PORT_ATTR_REMOTE_ADVERTISED_MEDIA_TYPE"},
            {SAI_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE, "SAI_PORT_ATTR_REMOTE_ADVERTISED_OUI_CODE"},
            {SAI_PORT_ATTR_REMOTE_ADVERTISED_SPEED, "SAI_PORT_ATTR_REMOTE_ADVERTISED_SPEED"},
            {SAI_PORT_ATTR_SERDES_IDRIVER, "SAI_PORT_ATTR_SERDES_IDRIVER"},
            {SAI_PORT_ATTR_SERDES_IPREDRIVER, "SAI_PORT_ATTR_SERDES_IPREDRIVER"},
            {SAI_PORT_ATTR_SERDES_PREEMPHASIS, "SAI_PORT_ATTR_SERDES_PREEMPHASIS"},
            {SAI_PORT_ATTR_SPEED, "SAI_PORT_ATTR_SPEED"},
            {SAI_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE, "SAI_PORT_ATTR_SUPPORTED_ASYMMETRIC_PAUSE_MODE"},
            {SAI_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE, "SAI_PORT_ATTR_SUPPORTED_AUTO_NEG_MODE"},
            {SAI_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE, "SAI_PORT_ATTR_SUPPORTED_BREAKOUT_MODE_TYPE"},
            {SAI_PORT_ATTR_SUPPORTED_FEC_MODE, "SAI_PORT_ATTR_SUPPORTED_FEC_MODE"},
            {SAI_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE, "SAI_PORT_ATTR_SUPPORTED_FLOW_CONTROL_MODE"},
            {SAI_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED, "SAI_PORT_ATTR_SUPPORTED_HALF_DUPLEX_SPEED"},
            {SAI_PORT_ATTR_SUPPORTED_MEDIA_TYPE, "SAI_PORT_ATTR_SUPPORTED_MEDIA_TYPE"},
            {SAI_PORT_ATTR_SUPPORTED_SPEED, "SAI_PORT_ATTR_SUPPORTED_SPEED"},
            {SAI_PORT_ATTR_SYSTEM_PORT, "SAI_PORT_ATTR_SYSTEM_PORT"},
            {SAI_PORT_ATTR_TAM_OBJECT, "SAI_PORT_ATTR_TAM_OBJECT"},
            {SAI_PORT_ATTR_TPID, "SAI_PORT_ATTR_TPID"},
            {SAI_PORT_ATTR_TYPE, "SAI_PORT_ATTR_TYPE"},
            {SAI_PORT_ATTR_UPDATE_DSCP, "SAI_PORT_ATTR_UPDATE_DSCP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_breakout_mode_type_t& x)
{
    static std::map<sai_port_breakout_mode_type_t, const char*> strs = {
            {SAI_PORT_BREAKOUT_MODE_TYPE_1_LANE, "SAI_PORT_BREAKOUT_MODE_TYPE_1_LANE"},
            {SAI_PORT_BREAKOUT_MODE_TYPE_2_LANE, "SAI_PORT_BREAKOUT_MODE_TYPE_2_LANE"},
            {SAI_PORT_BREAKOUT_MODE_TYPE_4_LANE, "SAI_PORT_BREAKOUT_MODE_TYPE_4_LANE"},
            {SAI_PORT_BREAKOUT_MODE_TYPE_MAX, "SAI_PORT_BREAKOUT_MODE_TYPE_MAX"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_connector_attr_t& x)
{
    static std::map<sai_port_connector_attr_t, const char*> strs = {
            {SAI_PORT_CONNECTOR_ATTR_CUSTOM_RANGE_END, "SAI_PORT_CONNECTOR_ATTR_CUSTOM_RANGE_END"},
            {SAI_PORT_CONNECTOR_ATTR_CUSTOM_RANGE_START, "SAI_PORT_CONNECTOR_ATTR_CUSTOM_RANGE_START"},
            {SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE, "SAI_PORT_CONNECTOR_ATTR_FAILOVER_MODE"},
            {SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID, "SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_FAILOVER_PORT_ID"},
            {SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID, "SAI_PORT_CONNECTOR_ATTR_LINE_SIDE_PORT_ID"},
            {SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID, "SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_FAILOVER_PORT_ID"},
            {SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID, "SAI_PORT_CONNECTOR_ATTR_SYSTEM_SIDE_PORT_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_connector_failover_mode_t& x)
{
    static std::map<sai_port_connector_failover_mode_t, const char*> strs = {
            {SAI_PORT_CONNECTOR_FAILOVER_MODE_DISABLE, "SAI_PORT_CONNECTOR_FAILOVER_MODE_DISABLE"},
            {SAI_PORT_CONNECTOR_FAILOVER_MODE_PRIMARY, "SAI_PORT_CONNECTOR_FAILOVER_MODE_PRIMARY"},
            {SAI_PORT_CONNECTOR_FAILOVER_MODE_SECONDARY, "SAI_PORT_CONNECTOR_FAILOVER_MODE_SECONDARY"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_err_status_t& x)
{
    static std::map<sai_port_err_status_t, const char*> strs = {
            {SAI_PORT_ERR_STATUS_CODE_GROUP_ERROR, "SAI_PORT_ERR_STATUS_CODE_GROUP_ERROR"},
            {SAI_PORT_ERR_STATUS_CRC_RATE, "SAI_PORT_ERR_STATUS_CRC_RATE"},
            {SAI_PORT_ERR_STATUS_DATA_UNIT_CRC_ERROR, "SAI_PORT_ERR_STATUS_DATA_UNIT_CRC_ERROR"},
            {SAI_PORT_ERR_STATUS_DATA_UNIT_MISALIGNMENT_ERROR, "SAI_PORT_ERR_STATUS_DATA_UNIT_MISALIGNMENT_ERROR"},
            {SAI_PORT_ERR_STATUS_DATA_UNIT_SIZE, "SAI_PORT_ERR_STATUS_DATA_UNIT_SIZE"},
            {SAI_PORT_ERR_STATUS_MAX, "SAI_PORT_ERR_STATUS_MAX"},
            {SAI_PORT_ERR_STATUS_NO_RX_REACHABILITY, "SAI_PORT_ERR_STATUS_NO_RX_REACHABILITY"},
            {SAI_PORT_ERR_STATUS_REMOTE_FAULT_STATUS, "SAI_PORT_ERR_STATUS_REMOTE_FAULT_STATUS"},
            {SAI_PORT_ERR_STATUS_SIGNAL_LOCAL_ERROR, "SAI_PORT_ERR_STATUS_SIGNAL_LOCAL_ERROR"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_fec_mode_t& x)
{
    static std::map<sai_port_fec_mode_t, const char*> strs = {
            {SAI_PORT_FEC_MODE_FC, "SAI_PORT_FEC_MODE_FC"},
            {SAI_PORT_FEC_MODE_NONE, "SAI_PORT_FEC_MODE_NONE"},
            {SAI_PORT_FEC_MODE_RS, "SAI_PORT_FEC_MODE_RS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_flow_control_mode_t& x)
{
    static std::map<sai_port_flow_control_mode_t, const char*> strs = {
            {SAI_PORT_FLOW_CONTROL_MODE_BOTH_ENABLE, "SAI_PORT_FLOW_CONTROL_MODE_BOTH_ENABLE"},
            {SAI_PORT_FLOW_CONTROL_MODE_DISABLE, "SAI_PORT_FLOW_CONTROL_MODE_DISABLE"},
            {SAI_PORT_FLOW_CONTROL_MODE_RX_ONLY, "SAI_PORT_FLOW_CONTROL_MODE_RX_ONLY"},
            {SAI_PORT_FLOW_CONTROL_MODE_TX_ONLY, "SAI_PORT_FLOW_CONTROL_MODE_TX_ONLY"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_interface_type_t& x)
{
    static std::map<sai_port_interface_type_t, const char*> strs = {
            {SAI_PORT_INTERFACE_TYPE_CAUI, "SAI_PORT_INTERFACE_TYPE_CAUI"},
            {SAI_PORT_INTERFACE_TYPE_CAUI4, "SAI_PORT_INTERFACE_TYPE_CAUI4"},
            {SAI_PORT_INTERFACE_TYPE_CR, "SAI_PORT_INTERFACE_TYPE_CR"},
            {SAI_PORT_INTERFACE_TYPE_CR2, "SAI_PORT_INTERFACE_TYPE_CR2"},
            {SAI_PORT_INTERFACE_TYPE_CR4, "SAI_PORT_INTERFACE_TYPE_CR4"},
            {SAI_PORT_INTERFACE_TYPE_GMII, "SAI_PORT_INTERFACE_TYPE_GMII"},
            {SAI_PORT_INTERFACE_TYPE_KR, "SAI_PORT_INTERFACE_TYPE_KR"},
            {SAI_PORT_INTERFACE_TYPE_KR2, "SAI_PORT_INTERFACE_TYPE_KR2"},
            {SAI_PORT_INTERFACE_TYPE_KR4, "SAI_PORT_INTERFACE_TYPE_KR4"},
            {SAI_PORT_INTERFACE_TYPE_LR, "SAI_PORT_INTERFACE_TYPE_LR"},
            {SAI_PORT_INTERFACE_TYPE_LR4, "SAI_PORT_INTERFACE_TYPE_LR4"},
            {SAI_PORT_INTERFACE_TYPE_MAX, "SAI_PORT_INTERFACE_TYPE_MAX"},
            {SAI_PORT_INTERFACE_TYPE_NONE, "SAI_PORT_INTERFACE_TYPE_NONE"},
            {SAI_PORT_INTERFACE_TYPE_SFI, "SAI_PORT_INTERFACE_TYPE_SFI"},
            {SAI_PORT_INTERFACE_TYPE_SR, "SAI_PORT_INTERFACE_TYPE_SR"},
            {SAI_PORT_INTERFACE_TYPE_SR2, "SAI_PORT_INTERFACE_TYPE_SR2"},
            {SAI_PORT_INTERFACE_TYPE_SR4, "SAI_PORT_INTERFACE_TYPE_SR4"},
            {SAI_PORT_INTERFACE_TYPE_XAUI, "SAI_PORT_INTERFACE_TYPE_XAUI"},
            {SAI_PORT_INTERFACE_TYPE_XFI, "SAI_PORT_INTERFACE_TYPE_XFI"},
            {SAI_PORT_INTERFACE_TYPE_XGMII, "SAI_PORT_INTERFACE_TYPE_XGMII"},
            {SAI_PORT_INTERFACE_TYPE_XLAUI, "SAI_PORT_INTERFACE_TYPE_XLAUI"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_internal_loopback_mode_t& x)
{
    static std::map<sai_port_internal_loopback_mode_t, const char*> strs = {
            {SAI_PORT_INTERNAL_LOOPBACK_MODE_MAC, "SAI_PORT_INTERNAL_LOOPBACK_MODE_MAC"},
            {SAI_PORT_INTERNAL_LOOPBACK_MODE_NONE, "SAI_PORT_INTERNAL_LOOPBACK_MODE_NONE"},
            {SAI_PORT_INTERNAL_LOOPBACK_MODE_PHY, "SAI_PORT_INTERNAL_LOOPBACK_MODE_PHY"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_link_training_failure_status_t& x)
{
    static std::map<sai_port_link_training_failure_status_t, const char*> strs = {
            {SAI_PORT_LINK_TRAINING_FAILURE_STATUS_FRAME_LOCK_ERROR, "SAI_PORT_LINK_TRAINING_FAILURE_STATUS_FRAME_LOCK_ERROR"},
            {SAI_PORT_LINK_TRAINING_FAILURE_STATUS_NO_ERROR, "SAI_PORT_LINK_TRAINING_FAILURE_STATUS_NO_ERROR"},
            {SAI_PORT_LINK_TRAINING_FAILURE_STATUS_SNR_LOWER_THRESHOLD, "SAI_PORT_LINK_TRAINING_FAILURE_STATUS_SNR_LOWER_THRESHOLD"},
            {SAI_PORT_LINK_TRAINING_FAILURE_STATUS_TIME_OUT, "SAI_PORT_LINK_TRAINING_FAILURE_STATUS_TIME_OUT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_link_training_rx_status_t& x)
{
    static std::map<sai_port_link_training_rx_status_t, const char*> strs = {
            {SAI_PORT_LINK_TRAINING_RX_STATUS_NOT_TRAINED, "SAI_PORT_LINK_TRAINING_RX_STATUS_NOT_TRAINED"},
            {SAI_PORT_LINK_TRAINING_RX_STATUS_TRAINED, "SAI_PORT_LINK_TRAINING_RX_STATUS_TRAINED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_media_type_t& x)
{
    static std::map<sai_port_media_type_t, const char*> strs = {
            {SAI_PORT_MEDIA_TYPE_BACKPLANE, "SAI_PORT_MEDIA_TYPE_BACKPLANE"},
            {SAI_PORT_MEDIA_TYPE_COPPER, "SAI_PORT_MEDIA_TYPE_COPPER"},
            {SAI_PORT_MEDIA_TYPE_FIBER, "SAI_PORT_MEDIA_TYPE_FIBER"},
            {SAI_PORT_MEDIA_TYPE_NOT_PRESENT, "SAI_PORT_MEDIA_TYPE_NOT_PRESENT"},
            {SAI_PORT_MEDIA_TYPE_UNKNOWN, "SAI_PORT_MEDIA_TYPE_UNKNOWN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_oper_status_t& x)
{
    static std::map<sai_port_oper_status_t, const char*> strs = {
            {SAI_PORT_OPER_STATUS_DOWN, "SAI_PORT_OPER_STATUS_DOWN"},
            {SAI_PORT_OPER_STATUS_NOT_PRESENT, "SAI_PORT_OPER_STATUS_NOT_PRESENT"},
            {SAI_PORT_OPER_STATUS_TESTING, "SAI_PORT_OPER_STATUS_TESTING"},
            {SAI_PORT_OPER_STATUS_UNKNOWN, "SAI_PORT_OPER_STATUS_UNKNOWN"},
            {SAI_PORT_OPER_STATUS_UP, "SAI_PORT_OPER_STATUS_UP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_pool_attr_t& x)
{
    static std::map<sai_port_pool_attr_t, const char*> strs = {
            {SAI_PORT_POOL_ATTR_BUFFER_POOL_ID, "SAI_PORT_POOL_ATTR_BUFFER_POOL_ID"},
            {SAI_PORT_POOL_ATTR_CUSTOM_RANGE_END, "SAI_PORT_POOL_ATTR_CUSTOM_RANGE_END"},
            {SAI_PORT_POOL_ATTR_CUSTOM_RANGE_START, "SAI_PORT_POOL_ATTR_CUSTOM_RANGE_START"},
            {SAI_PORT_POOL_ATTR_PORT_ID, "SAI_PORT_POOL_ATTR_PORT_ID"},
            {SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID, "SAI_PORT_POOL_ATTR_QOS_WRED_PROFILE_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_pool_stat_t& x)
{
    static std::map<sai_port_pool_stat_t, const char*> strs = {
            {SAI_PORT_POOL_STAT_CURR_OCCUPANCY_BYTES, "SAI_PORT_POOL_STAT_CURR_OCCUPANCY_BYTES"},
            {SAI_PORT_POOL_STAT_DROPPED_PKTS, "SAI_PORT_POOL_STAT_DROPPED_PKTS"},
            {SAI_PORT_POOL_STAT_GREEN_WRED_DROPPED_BYTES, "SAI_PORT_POOL_STAT_GREEN_WRED_DROPPED_BYTES"},
            {SAI_PORT_POOL_STAT_GREEN_WRED_DROPPED_PACKETS, "SAI_PORT_POOL_STAT_GREEN_WRED_DROPPED_PACKETS"},
            {SAI_PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES, "SAI_PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_BYTES"},
            {SAI_PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS, "SAI_PORT_POOL_STAT_GREEN_WRED_ECN_MARKED_PACKETS"},
            {SAI_PORT_POOL_STAT_IF_OCTETS, "SAI_PORT_POOL_STAT_IF_OCTETS"},
            {SAI_PORT_POOL_STAT_RED_WRED_DROPPED_BYTES, "SAI_PORT_POOL_STAT_RED_WRED_DROPPED_BYTES"},
            {SAI_PORT_POOL_STAT_RED_WRED_DROPPED_PACKETS, "SAI_PORT_POOL_STAT_RED_WRED_DROPPED_PACKETS"},
            {SAI_PORT_POOL_STAT_RED_WRED_ECN_MARKED_BYTES, "SAI_PORT_POOL_STAT_RED_WRED_ECN_MARKED_BYTES"},
            {SAI_PORT_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS, "SAI_PORT_POOL_STAT_RED_WRED_ECN_MARKED_PACKETS"},
            {SAI_PORT_POOL_STAT_SHARED_CURR_OCCUPANCY_BYTES, "SAI_PORT_POOL_STAT_SHARED_CURR_OCCUPANCY_BYTES"},
            {SAI_PORT_POOL_STAT_SHARED_WATERMARK_BYTES, "SAI_PORT_POOL_STAT_SHARED_WATERMARK_BYTES"},
            {SAI_PORT_POOL_STAT_WATERMARK_BYTES, "SAI_PORT_POOL_STAT_WATERMARK_BYTES"},
            {SAI_PORT_POOL_STAT_WRED_DROPPED_BYTES, "SAI_PORT_POOL_STAT_WRED_DROPPED_BYTES"},
            {SAI_PORT_POOL_STAT_WRED_DROPPED_PACKETS, "SAI_PORT_POOL_STAT_WRED_DROPPED_PACKETS"},
            {SAI_PORT_POOL_STAT_WRED_ECN_MARKED_BYTES, "SAI_PORT_POOL_STAT_WRED_ECN_MARKED_BYTES"},
            {SAI_PORT_POOL_STAT_WRED_ECN_MARKED_PACKETS, "SAI_PORT_POOL_STAT_WRED_ECN_MARKED_PACKETS"},
            {SAI_PORT_POOL_STAT_YELLOW_WRED_DROPPED_BYTES, "SAI_PORT_POOL_STAT_YELLOW_WRED_DROPPED_BYTES"},
            {SAI_PORT_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS, "SAI_PORT_POOL_STAT_YELLOW_WRED_DROPPED_PACKETS"},
            {SAI_PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES, "SAI_PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_BYTES"},
            {SAI_PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS, "SAI_PORT_POOL_STAT_YELLOW_WRED_ECN_MARKED_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_prbs_config_t& x)
{
    static std::map<sai_port_prbs_config_t, const char*> strs = {
            {SAI_PORT_PRBS_CONFIG_DISABLE, "SAI_PORT_PRBS_CONFIG_DISABLE"},
            {SAI_PORT_PRBS_CONFIG_ENABLE_RX, "SAI_PORT_PRBS_CONFIG_ENABLE_RX"},
            {SAI_PORT_PRBS_CONFIG_ENABLE_TX, "SAI_PORT_PRBS_CONFIG_ENABLE_TX"},
            {SAI_PORT_PRBS_CONFIG_ENABLE_TX_RX, "SAI_PORT_PRBS_CONFIG_ENABLE_TX_RX"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_prbs_rx_status_t& x)
{
    static std::map<sai_port_prbs_rx_status_t, const char*> strs = {
            {SAI_PORT_PRBS_RX_STATUS_LOCK_WITH_ERRORS, "SAI_PORT_PRBS_RX_STATUS_LOCK_WITH_ERRORS"},
            {SAI_PORT_PRBS_RX_STATUS_LOST_LOCK, "SAI_PORT_PRBS_RX_STATUS_LOST_LOCK"},
            {SAI_PORT_PRBS_RX_STATUS_NOT_LOCKED, "SAI_PORT_PRBS_RX_STATUS_NOT_LOCKED"},
            {SAI_PORT_PRBS_RX_STATUS_OK, "SAI_PORT_PRBS_RX_STATUS_OK"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_priority_flow_control_mode_t& x)
{
    static std::map<sai_port_priority_flow_control_mode_t, const char*> strs = {
            {SAI_PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED, "SAI_PORT_PRIORITY_FLOW_CONTROL_MODE_COMBINED"},
            {SAI_PORT_PRIORITY_FLOW_CONTROL_MODE_SEPARATE, "SAI_PORT_PRIORITY_FLOW_CONTROL_MODE_SEPARATE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_ptp_mode_t& x)
{
    static std::map<sai_port_ptp_mode_t, const char*> strs = {
            {SAI_PORT_PTP_MODE_NONE, "SAI_PORT_PTP_MODE_NONE"},
            {SAI_PORT_PTP_MODE_SINGLE_STEP_TIMESTAMP, "SAI_PORT_PTP_MODE_SINGLE_STEP_TIMESTAMP"},
            {SAI_PORT_PTP_MODE_TWO_STEP_TIMESTAMP, "SAI_PORT_PTP_MODE_TWO_STEP_TIMESTAMP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_serdes_attr_t& x)
{
    static std::map<sai_port_serdes_attr_t, const char*> strs = {
            {SAI_PORT_SERDES_ATTR_CUSTOM_RANGE_END, "SAI_PORT_SERDES_ATTR_CUSTOM_RANGE_END"},
            {SAI_PORT_SERDES_ATTR_CUSTOM_RANGE_START, "SAI_PORT_SERDES_ATTR_CUSTOM_RANGE_START"},
            {SAI_PORT_SERDES_ATTR_IDRIVER, "SAI_PORT_SERDES_ATTR_IDRIVER"},
            {SAI_PORT_SERDES_ATTR_IPREDRIVER, "SAI_PORT_SERDES_ATTR_IPREDRIVER"},
            {SAI_PORT_SERDES_ATTR_PORT_ID, "SAI_PORT_SERDES_ATTR_PORT_ID"},
            {SAI_PORT_SERDES_ATTR_PREEMPHASIS, "SAI_PORT_SERDES_ATTR_PREEMPHASIS"},
            {SAI_PORT_SERDES_ATTR_TX_FIR_ATTN, "SAI_PORT_SERDES_ATTR_TX_FIR_ATTN"},
            {SAI_PORT_SERDES_ATTR_TX_FIR_MAIN, "SAI_PORT_SERDES_ATTR_TX_FIR_MAIN"},
            {SAI_PORT_SERDES_ATTR_TX_FIR_POST1, "SAI_PORT_SERDES_ATTR_TX_FIR_POST1"},
            {SAI_PORT_SERDES_ATTR_TX_FIR_POST2, "SAI_PORT_SERDES_ATTR_TX_FIR_POST2"},
            {SAI_PORT_SERDES_ATTR_TX_FIR_POST3, "SAI_PORT_SERDES_ATTR_TX_FIR_POST3"},
            {SAI_PORT_SERDES_ATTR_TX_FIR_PRE1, "SAI_PORT_SERDES_ATTR_TX_FIR_PRE1"},
            {SAI_PORT_SERDES_ATTR_TX_FIR_PRE2, "SAI_PORT_SERDES_ATTR_TX_FIR_PRE2"},
            {SAI_PORT_SERDES_ATTR_TX_FIR_PRE3, "SAI_PORT_SERDES_ATTR_TX_FIR_PRE3"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_stat_t& x)
{
    static std::map<sai_port_stat_t, const char*> strs = {
            {SAI_PORT_STAT_DOT3_CONTROL_IN_UNKNOWN_OPCODES, "SAI_PORT_STAT_DOT3_CONTROL_IN_UNKNOWN_OPCODES"},
            {SAI_PORT_STAT_DOT3_STATS_ALIGNMENT_ERRORS, "SAI_PORT_STAT_DOT3_STATS_ALIGNMENT_ERRORS"},
            {SAI_PORT_STAT_DOT3_STATS_CARRIER_SENSE_ERRORS, "SAI_PORT_STAT_DOT3_STATS_CARRIER_SENSE_ERRORS"},
            {SAI_PORT_STAT_DOT3_STATS_DEFERRED_TRANSMISSIONS, "SAI_PORT_STAT_DOT3_STATS_DEFERRED_TRANSMISSIONS"},
            {SAI_PORT_STAT_DOT3_STATS_EXCESSIVE_COLLISIONS, "SAI_PORT_STAT_DOT3_STATS_EXCESSIVE_COLLISIONS"},
            {SAI_PORT_STAT_DOT3_STATS_FCS_ERRORS, "SAI_PORT_STAT_DOT3_STATS_FCS_ERRORS"},
            {SAI_PORT_STAT_DOT3_STATS_FRAME_TOO_LONGS, "SAI_PORT_STAT_DOT3_STATS_FRAME_TOO_LONGS"},
            {SAI_PORT_STAT_DOT3_STATS_INTERNAL_MAC_RECEIVE_ERRORS, "SAI_PORT_STAT_DOT3_STATS_INTERNAL_MAC_RECEIVE_ERRORS"},
            {SAI_PORT_STAT_DOT3_STATS_INTERNAL_MAC_TRANSMIT_ERRORS, "SAI_PORT_STAT_DOT3_STATS_INTERNAL_MAC_TRANSMIT_ERRORS"},
            {SAI_PORT_STAT_DOT3_STATS_LATE_COLLISIONS, "SAI_PORT_STAT_DOT3_STATS_LATE_COLLISIONS"},
            {SAI_PORT_STAT_DOT3_STATS_MULTIPLE_COLLISION_FRAMES, "SAI_PORT_STAT_DOT3_STATS_MULTIPLE_COLLISION_FRAMES"},
            {SAI_PORT_STAT_DOT3_STATS_SINGLE_COLLISION_FRAMES, "SAI_PORT_STAT_DOT3_STATS_SINGLE_COLLISION_FRAMES"},
            {SAI_PORT_STAT_DOT3_STATS_SQE_TEST_ERRORS, "SAI_PORT_STAT_DOT3_STATS_SQE_TEST_ERRORS"},
            {SAI_PORT_STAT_DOT3_STATS_SYMBOL_ERRORS, "SAI_PORT_STAT_DOT3_STATS_SYMBOL_ERRORS"},
            {SAI_PORT_STAT_ECN_MARKED_PACKETS, "SAI_PORT_STAT_ECN_MARKED_PACKETS"},
            {SAI_PORT_STAT_EEE_RX_DURATION, "SAI_PORT_STAT_EEE_RX_DURATION"},
            {SAI_PORT_STAT_EEE_RX_EVENT_COUNT, "SAI_PORT_STAT_EEE_RX_EVENT_COUNT"},
            {SAI_PORT_STAT_EEE_TX_DURATION, "SAI_PORT_STAT_EEE_TX_DURATION"},
            {SAI_PORT_STAT_EEE_TX_EVENT_COUNT, "SAI_PORT_STAT_EEE_TX_EVENT_COUNT"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_1024_TO_1518_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_1024_TO_1518_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_128_TO_255_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_128_TO_255_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_1519_TO_2047_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_1519_TO_2047_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_2048_TO_4095_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_2048_TO_4095_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_256_TO_511_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_256_TO_511_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_4096_TO_9216_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_4096_TO_9216_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_512_TO_1023_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_512_TO_1023_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_64_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_64_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_65_TO_127_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_65_TO_127_OCTETS"},
            {SAI_PORT_STAT_ETHER_IN_PKTS_9217_TO_16383_OCTETS, "SAI_PORT_STAT_ETHER_IN_PKTS_9217_TO_16383_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_1024_TO_1518_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_1024_TO_1518_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_128_TO_255_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_128_TO_255_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_1519_TO_2047_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_1519_TO_2047_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_2048_TO_4095_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_2048_TO_4095_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_256_TO_511_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_256_TO_511_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_4096_TO_9216_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_4096_TO_9216_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_512_TO_1023_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_512_TO_1023_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_64_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_64_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_65_TO_127_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_65_TO_127_OCTETS"},
            {SAI_PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS, "SAI_PORT_STAT_ETHER_OUT_PKTS_9217_TO_16383_OCTETS"},
            {SAI_PORT_STAT_ETHER_RX_OVERSIZE_PKTS, "SAI_PORT_STAT_ETHER_RX_OVERSIZE_PKTS"},
            {SAI_PORT_STAT_ETHER_STATS_BROADCAST_PKTS, "SAI_PORT_STAT_ETHER_STATS_BROADCAST_PKTS"},
            {SAI_PORT_STAT_ETHER_STATS_COLLISIONS, "SAI_PORT_STAT_ETHER_STATS_COLLISIONS"},
            {SAI_PORT_STAT_ETHER_STATS_CRC_ALIGN_ERRORS, "SAI_PORT_STAT_ETHER_STATS_CRC_ALIGN_ERRORS"},
            {SAI_PORT_STAT_ETHER_STATS_DROP_EVENTS, "SAI_PORT_STAT_ETHER_STATS_DROP_EVENTS"},
            {SAI_PORT_STAT_ETHER_STATS_FRAGMENTS, "SAI_PORT_STAT_ETHER_STATS_FRAGMENTS"},
            {SAI_PORT_STAT_ETHER_STATS_JABBERS, "SAI_PORT_STAT_ETHER_STATS_JABBERS"},
            {SAI_PORT_STAT_ETHER_STATS_MULTICAST_PKTS, "SAI_PORT_STAT_ETHER_STATS_MULTICAST_PKTS"},
            {SAI_PORT_STAT_ETHER_STATS_OCTETS, "SAI_PORT_STAT_ETHER_STATS_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_OVERSIZE_PKTS, "SAI_PORT_STAT_ETHER_STATS_OVERSIZE_PKTS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS, "SAI_PORT_STAT_ETHER_STATS_PKTS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_1024_TO_1518_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_1024_TO_1518_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_128_TO_255_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_128_TO_255_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_1519_TO_2047_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_1519_TO_2047_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_2048_TO_4095_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_2048_TO_4095_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_256_TO_511_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_256_TO_511_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_4096_TO_9216_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_4096_TO_9216_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_512_TO_1023_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_512_TO_1023_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_64_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_64_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_65_TO_127_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_65_TO_127_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_PKTS_9217_TO_16383_OCTETS, "SAI_PORT_STAT_ETHER_STATS_PKTS_9217_TO_16383_OCTETS"},
            {SAI_PORT_STAT_ETHER_STATS_RX_NO_ERRORS, "SAI_PORT_STAT_ETHER_STATS_RX_NO_ERRORS"},
            {SAI_PORT_STAT_ETHER_STATS_TX_NO_ERRORS, "SAI_PORT_STAT_ETHER_STATS_TX_NO_ERRORS"},
            {SAI_PORT_STAT_ETHER_STATS_UNDERSIZE_PKTS, "SAI_PORT_STAT_ETHER_STATS_UNDERSIZE_PKTS"},
            {SAI_PORT_STAT_ETHER_TX_OVERSIZE_PKTS, "SAI_PORT_STAT_ETHER_TX_OVERSIZE_PKTS"},
            {SAI_PORT_STAT_GREEN_WRED_DROPPED_BYTES, "SAI_PORT_STAT_GREEN_WRED_DROPPED_BYTES"},
            {SAI_PORT_STAT_GREEN_WRED_DROPPED_PACKETS, "SAI_PORT_STAT_GREEN_WRED_DROPPED_PACKETS"},
            {SAI_PORT_STAT_IF_IN_BROADCAST_PKTS, "SAI_PORT_STAT_IF_IN_BROADCAST_PKTS"},
            {SAI_PORT_STAT_IF_IN_DISCARDS, "SAI_PORT_STAT_IF_IN_DISCARDS"},
            {SAI_PORT_STAT_IF_IN_ERRORS, "SAI_PORT_STAT_IF_IN_ERRORS"},
            {SAI_PORT_STAT_IF_IN_FABRIC_DATA_UNITS, "SAI_PORT_STAT_IF_IN_FABRIC_DATA_UNITS"},
            {SAI_PORT_STAT_IF_IN_FEC_CORRECTABLE_FRAMES, "SAI_PORT_STAT_IF_IN_FEC_CORRECTABLE_FRAMES"},
            {SAI_PORT_STAT_IF_IN_FEC_NOT_CORRECTABLE_FRAMES, "SAI_PORT_STAT_IF_IN_FEC_NOT_CORRECTABLE_FRAMES"},
            {SAI_PORT_STAT_IF_IN_FEC_SYMBOL_ERRORS, "SAI_PORT_STAT_IF_IN_FEC_SYMBOL_ERRORS"},
            {SAI_PORT_STAT_IF_IN_MULTICAST_PKTS, "SAI_PORT_STAT_IF_IN_MULTICAST_PKTS"},
            {SAI_PORT_STAT_IF_IN_NON_UCAST_PKTS, "SAI_PORT_STAT_IF_IN_NON_UCAST_PKTS"},
            {SAI_PORT_STAT_IF_IN_OCTETS, "SAI_PORT_STAT_IF_IN_OCTETS"},
            {SAI_PORT_STAT_IF_IN_UCAST_PKTS, "SAI_PORT_STAT_IF_IN_UCAST_PKTS"},
            {SAI_PORT_STAT_IF_IN_UNKNOWN_PROTOS, "SAI_PORT_STAT_IF_IN_UNKNOWN_PROTOS"},
            {SAI_PORT_STAT_IF_IN_VLAN_DISCARDS, "SAI_PORT_STAT_IF_IN_VLAN_DISCARDS"},
            {SAI_PORT_STAT_IF_OUT_BROADCAST_PKTS, "SAI_PORT_STAT_IF_OUT_BROADCAST_PKTS"},
            {SAI_PORT_STAT_IF_OUT_DISCARDS, "SAI_PORT_STAT_IF_OUT_DISCARDS"},
            {SAI_PORT_STAT_IF_OUT_ERRORS, "SAI_PORT_STAT_IF_OUT_ERRORS"},
            {SAI_PORT_STAT_IF_OUT_FABRIC_DATA_UNITS, "SAI_PORT_STAT_IF_OUT_FABRIC_DATA_UNITS"},
            {SAI_PORT_STAT_IF_OUT_MULTICAST_PKTS, "SAI_PORT_STAT_IF_OUT_MULTICAST_PKTS"},
            {SAI_PORT_STAT_IF_OUT_NON_UCAST_PKTS, "SAI_PORT_STAT_IF_OUT_NON_UCAST_PKTS"},
            {SAI_PORT_STAT_IF_OUT_OCTETS, "SAI_PORT_STAT_IF_OUT_OCTETS"},
            {SAI_PORT_STAT_IF_OUT_QLEN, "SAI_PORT_STAT_IF_OUT_QLEN"},
            {SAI_PORT_STAT_IF_OUT_UCAST_PKTS, "SAI_PORT_STAT_IF_OUT_UCAST_PKTS"},
            {SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS, "SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS, "SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS, "SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS, "SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS, "SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS, "SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS, "SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS, "SAI_PORT_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_CURR_OCCUPANCY_BYTES, "SAI_PORT_STAT_IN_CURR_OCCUPANCY_BYTES"},
            {SAI_PORT_STAT_IN_DROPPED_PKTS, "SAI_PORT_STAT_IN_DROPPED_PKTS"},
            {SAI_PORT_STAT_IN_DROP_REASON_RANGE_BASE, "SAI_PORT_STAT_IN_DROP_REASON_RANGE_BASE"},
            {SAI_PORT_STAT_IN_DROP_REASON_RANGE_END, "SAI_PORT_STAT_IN_DROP_REASON_RANGE_END"},
            {SAI_PORT_STAT_IN_SHARED_CURR_OCCUPANCY_BYTES, "SAI_PORT_STAT_IN_SHARED_CURR_OCCUPANCY_BYTES"},
            {SAI_PORT_STAT_IN_SHARED_WATERMARK_BYTES, "SAI_PORT_STAT_IN_SHARED_WATERMARK_BYTES"},
            {SAI_PORT_STAT_IN_WATERMARK_BYTES, "SAI_PORT_STAT_IN_WATERMARK_BYTES"},
            {SAI_PORT_STAT_IPV6_IN_DISCARDS, "SAI_PORT_STAT_IPV6_IN_DISCARDS"},
            {SAI_PORT_STAT_IPV6_IN_MCAST_PKTS, "SAI_PORT_STAT_IPV6_IN_MCAST_PKTS"},
            {SAI_PORT_STAT_IPV6_IN_NON_UCAST_PKTS, "SAI_PORT_STAT_IPV6_IN_NON_UCAST_PKTS"},
            {SAI_PORT_STAT_IPV6_IN_OCTETS, "SAI_PORT_STAT_IPV6_IN_OCTETS"},
            {SAI_PORT_STAT_IPV6_IN_RECEIVES, "SAI_PORT_STAT_IPV6_IN_RECEIVES"},
            {SAI_PORT_STAT_IPV6_IN_UCAST_PKTS, "SAI_PORT_STAT_IPV6_IN_UCAST_PKTS"},
            {SAI_PORT_STAT_IPV6_OUT_DISCARDS, "SAI_PORT_STAT_IPV6_OUT_DISCARDS"},
            {SAI_PORT_STAT_IPV6_OUT_MCAST_PKTS, "SAI_PORT_STAT_IPV6_OUT_MCAST_PKTS"},
            {SAI_PORT_STAT_IPV6_OUT_NON_UCAST_PKTS, "SAI_PORT_STAT_IPV6_OUT_NON_UCAST_PKTS"},
            {SAI_PORT_STAT_IPV6_OUT_OCTETS, "SAI_PORT_STAT_IPV6_OUT_OCTETS"},
            {SAI_PORT_STAT_IPV6_OUT_UCAST_PKTS, "SAI_PORT_STAT_IPV6_OUT_UCAST_PKTS"},
            {SAI_PORT_STAT_IP_IN_DISCARDS, "SAI_PORT_STAT_IP_IN_DISCARDS"},
            {SAI_PORT_STAT_IP_IN_NON_UCAST_PKTS, "SAI_PORT_STAT_IP_IN_NON_UCAST_PKTS"},
            {SAI_PORT_STAT_IP_IN_OCTETS, "SAI_PORT_STAT_IP_IN_OCTETS"},
            {SAI_PORT_STAT_IP_IN_RECEIVES, "SAI_PORT_STAT_IP_IN_RECEIVES"},
            {SAI_PORT_STAT_IP_IN_UCAST_PKTS, "SAI_PORT_STAT_IP_IN_UCAST_PKTS"},
            {SAI_PORT_STAT_IP_OUT_DISCARDS, "SAI_PORT_STAT_IP_OUT_DISCARDS"},
            {SAI_PORT_STAT_IP_OUT_NON_UCAST_PKTS, "SAI_PORT_STAT_IP_OUT_NON_UCAST_PKTS"},
            {SAI_PORT_STAT_IP_OUT_OCTETS, "SAI_PORT_STAT_IP_OUT_OCTETS"},
            {SAI_PORT_STAT_IP_OUT_UCAST_PKTS, "SAI_PORT_STAT_IP_OUT_UCAST_PKTS"},
            {SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS, "SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS, "SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS, "SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS, "SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS, "SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS, "SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS, "SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS, "SAI_PORT_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_CURR_OCCUPANCY_BYTES, "SAI_PORT_STAT_OUT_CURR_OCCUPANCY_BYTES"},
            {SAI_PORT_STAT_OUT_DROPPED_PKTS, "SAI_PORT_STAT_OUT_DROPPED_PKTS"},
            {SAI_PORT_STAT_OUT_DROP_REASON_RANGE_BASE, "SAI_PORT_STAT_OUT_DROP_REASON_RANGE_BASE"},
            {SAI_PORT_STAT_OUT_DROP_REASON_RANGE_END, "SAI_PORT_STAT_OUT_DROP_REASON_RANGE_END"},
            {SAI_PORT_STAT_OUT_SHARED_CURR_OCCUPANCY_BYTES, "SAI_PORT_STAT_OUT_SHARED_CURR_OCCUPANCY_BYTES"},
            {SAI_PORT_STAT_OUT_SHARED_WATERMARK_BYTES, "SAI_PORT_STAT_OUT_SHARED_WATERMARK_BYTES"},
            {SAI_PORT_STAT_OUT_WATERMARK_BYTES, "SAI_PORT_STAT_OUT_WATERMARK_BYTES"},
            {SAI_PORT_STAT_PAUSE_RX_PKTS, "SAI_PORT_STAT_PAUSE_RX_PKTS"},
            {SAI_PORT_STAT_PAUSE_TX_PKTS, "SAI_PORT_STAT_PAUSE_TX_PKTS"},
            {SAI_PORT_STAT_PFC_0_ON2OFF_RX_PKTS, "SAI_PORT_STAT_PFC_0_ON2OFF_RX_PKTS"},
            {SAI_PORT_STAT_PFC_0_RX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_0_RX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_0_RX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_0_RX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_0_RX_PKTS, "SAI_PORT_STAT_PFC_0_RX_PKTS"},
            {SAI_PORT_STAT_PFC_0_TX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_0_TX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_0_TX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_0_TX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_0_TX_PKTS, "SAI_PORT_STAT_PFC_0_TX_PKTS"},
            {SAI_PORT_STAT_PFC_1_ON2OFF_RX_PKTS, "SAI_PORT_STAT_PFC_1_ON2OFF_RX_PKTS"},
            {SAI_PORT_STAT_PFC_1_RX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_1_RX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_1_RX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_1_RX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_1_RX_PKTS, "SAI_PORT_STAT_PFC_1_RX_PKTS"},
            {SAI_PORT_STAT_PFC_1_TX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_1_TX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_1_TX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_1_TX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_1_TX_PKTS, "SAI_PORT_STAT_PFC_1_TX_PKTS"},
            {SAI_PORT_STAT_PFC_2_ON2OFF_RX_PKTS, "SAI_PORT_STAT_PFC_2_ON2OFF_RX_PKTS"},
            {SAI_PORT_STAT_PFC_2_RX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_2_RX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_2_RX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_2_RX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_2_RX_PKTS, "SAI_PORT_STAT_PFC_2_RX_PKTS"},
            {SAI_PORT_STAT_PFC_2_TX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_2_TX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_2_TX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_2_TX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_2_TX_PKTS, "SAI_PORT_STAT_PFC_2_TX_PKTS"},
            {SAI_PORT_STAT_PFC_3_ON2OFF_RX_PKTS, "SAI_PORT_STAT_PFC_3_ON2OFF_RX_PKTS"},
            {SAI_PORT_STAT_PFC_3_RX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_3_RX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_3_RX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_3_RX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_3_RX_PKTS, "SAI_PORT_STAT_PFC_3_RX_PKTS"},
            {SAI_PORT_STAT_PFC_3_TX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_3_TX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_3_TX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_3_TX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_3_TX_PKTS, "SAI_PORT_STAT_PFC_3_TX_PKTS"},
            {SAI_PORT_STAT_PFC_4_ON2OFF_RX_PKTS, "SAI_PORT_STAT_PFC_4_ON2OFF_RX_PKTS"},
            {SAI_PORT_STAT_PFC_4_RX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_4_RX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_4_RX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_4_RX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_4_RX_PKTS, "SAI_PORT_STAT_PFC_4_RX_PKTS"},
            {SAI_PORT_STAT_PFC_4_TX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_4_TX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_4_TX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_4_TX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_4_TX_PKTS, "SAI_PORT_STAT_PFC_4_TX_PKTS"},
            {SAI_PORT_STAT_PFC_5_ON2OFF_RX_PKTS, "SAI_PORT_STAT_PFC_5_ON2OFF_RX_PKTS"},
            {SAI_PORT_STAT_PFC_5_RX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_5_RX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_5_RX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_5_RX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_5_RX_PKTS, "SAI_PORT_STAT_PFC_5_RX_PKTS"},
            {SAI_PORT_STAT_PFC_5_TX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_5_TX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_5_TX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_5_TX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_5_TX_PKTS, "SAI_PORT_STAT_PFC_5_TX_PKTS"},
            {SAI_PORT_STAT_PFC_6_ON2OFF_RX_PKTS, "SAI_PORT_STAT_PFC_6_ON2OFF_RX_PKTS"},
            {SAI_PORT_STAT_PFC_6_RX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_6_RX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_6_RX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_6_RX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_6_RX_PKTS, "SAI_PORT_STAT_PFC_6_RX_PKTS"},
            {SAI_PORT_STAT_PFC_6_TX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_6_TX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_6_TX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_6_TX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_6_TX_PKTS, "SAI_PORT_STAT_PFC_6_TX_PKTS"},
            {SAI_PORT_STAT_PFC_7_ON2OFF_RX_PKTS, "SAI_PORT_STAT_PFC_7_ON2OFF_RX_PKTS"},
            {SAI_PORT_STAT_PFC_7_RX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_7_RX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_7_RX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_7_RX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_7_RX_PKTS, "SAI_PORT_STAT_PFC_7_RX_PKTS"},
            {SAI_PORT_STAT_PFC_7_TX_PAUSE_DURATION, "SAI_PORT_STAT_PFC_7_TX_PAUSE_DURATION"},
            {SAI_PORT_STAT_PFC_7_TX_PAUSE_DURATION_US, "SAI_PORT_STAT_PFC_7_TX_PAUSE_DURATION_US"},
            {SAI_PORT_STAT_PFC_7_TX_PKTS, "SAI_PORT_STAT_PFC_7_TX_PKTS"},
            {SAI_PORT_STAT_PRBS_ERROR_COUNT, "SAI_PORT_STAT_PRBS_ERROR_COUNT"},
            {SAI_PORT_STAT_RED_WRED_DROPPED_BYTES, "SAI_PORT_STAT_RED_WRED_DROPPED_BYTES"},
            {SAI_PORT_STAT_RED_WRED_DROPPED_PACKETS, "SAI_PORT_STAT_RED_WRED_DROPPED_PACKETS"},
            {SAI_PORT_STAT_WRED_DROPPED_BYTES, "SAI_PORT_STAT_WRED_DROPPED_BYTES"},
            {SAI_PORT_STAT_WRED_DROPPED_PACKETS, "SAI_PORT_STAT_WRED_DROPPED_PACKETS"},
            {SAI_PORT_STAT_YELLOW_WRED_DROPPED_BYTES, "SAI_PORT_STAT_YELLOW_WRED_DROPPED_BYTES"},
            {SAI_PORT_STAT_YELLOW_WRED_DROPPED_PACKETS, "SAI_PORT_STAT_YELLOW_WRED_DROPPED_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_port_type_t& x)
{
    static std::map<sai_port_type_t, const char*> strs = {
            {SAI_PORT_TYPE_CPU, "SAI_PORT_TYPE_CPU"},
            {SAI_PORT_TYPE_FABRIC, "SAI_PORT_TYPE_FABRIC"},
            {SAI_PORT_TYPE_LOGICAL, "SAI_PORT_TYPE_LOGICAL"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_qos_map_attr_t& x)
{
    static std::map<sai_qos_map_attr_t, const char*> strs = {
            {SAI_QOS_MAP_ATTR_CUSTOM_RANGE_END, "SAI_QOS_MAP_ATTR_CUSTOM_RANGE_END"},
            {SAI_QOS_MAP_ATTR_CUSTOM_RANGE_START, "SAI_QOS_MAP_ATTR_CUSTOM_RANGE_START"},
            {SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST, "SAI_QOS_MAP_ATTR_MAP_TO_VALUE_LIST"},
            {SAI_QOS_MAP_ATTR_TYPE, "SAI_QOS_MAP_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_qos_map_type_t& x)
{
    static std::map<sai_qos_map_type_t, const char*> strs = {
            {SAI_QOS_MAP_TYPE_CUSTOM_RANGE_BASE, "SAI_QOS_MAP_TYPE_CUSTOM_RANGE_BASE"},
            {SAI_QOS_MAP_TYPE_DOT1P_TO_COLOR, "SAI_QOS_MAP_TYPE_DOT1P_TO_COLOR"},
            {SAI_QOS_MAP_TYPE_DOT1P_TO_TC, "SAI_QOS_MAP_TYPE_DOT1P_TO_TC"},
            {SAI_QOS_MAP_TYPE_DSCP_TO_COLOR, "SAI_QOS_MAP_TYPE_DSCP_TO_COLOR"},
            {SAI_QOS_MAP_TYPE_DSCP_TO_TC, "SAI_QOS_MAP_TYPE_DSCP_TO_TC"},
            {SAI_QOS_MAP_TYPE_MPLS_EXP_TO_COLOR, "SAI_QOS_MAP_TYPE_MPLS_EXP_TO_COLOR"},
            {SAI_QOS_MAP_TYPE_MPLS_EXP_TO_TC, "SAI_QOS_MAP_TYPE_MPLS_EXP_TO_TC"},
            {SAI_QOS_MAP_TYPE_PFC_PRIORITY_TO_PRIORITY_GROUP, "SAI_QOS_MAP_TYPE_PFC_PRIORITY_TO_PRIORITY_GROUP"},
            {SAI_QOS_MAP_TYPE_PFC_PRIORITY_TO_QUEUE, "SAI_QOS_MAP_TYPE_PFC_PRIORITY_TO_QUEUE"},
            {SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_DOT1P, "SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_DOT1P"},
            {SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_DSCP, "SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_DSCP"},
            {SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_MPLS_EXP, "SAI_QOS_MAP_TYPE_TC_AND_COLOR_TO_MPLS_EXP"},
            {SAI_QOS_MAP_TYPE_TC_TO_PRIORITY_GROUP, "SAI_QOS_MAP_TYPE_TC_TO_PRIORITY_GROUP"},
            {SAI_QOS_MAP_TYPE_TC_TO_QUEUE, "SAI_QOS_MAP_TYPE_TC_TO_QUEUE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_queue_attr_t& x)
{
    static std::map<sai_queue_attr_t, const char*> strs = {
            {SAI_QUEUE_ATTR_BUFFER_PROFILE_ID, "SAI_QUEUE_ATTR_BUFFER_PROFILE_ID"},
            {SAI_QUEUE_ATTR_CUSTOM_RANGE_END, "SAI_QUEUE_ATTR_CUSTOM_RANGE_END"},
            {SAI_QUEUE_ATTR_CUSTOM_RANGE_START, "SAI_QUEUE_ATTR_CUSTOM_RANGE_START"},
            {SAI_QUEUE_ATTR_ENABLE_PFC_DLDR, "SAI_QUEUE_ATTR_ENABLE_PFC_DLDR"},
            {SAI_QUEUE_ATTR_INDEX, "SAI_QUEUE_ATTR_INDEX"},
            {SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE, "SAI_QUEUE_ATTR_PARENT_SCHEDULER_NODE"},
            {SAI_QUEUE_ATTR_PAUSE_STATUS, "SAI_QUEUE_ATTR_PAUSE_STATUS"},
            {SAI_QUEUE_ATTR_PFC_DLR_INIT, "SAI_QUEUE_ATTR_PFC_DLR_INIT"},
            {SAI_QUEUE_ATTR_PORT, "SAI_QUEUE_ATTR_PORT"},
            {SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID, "SAI_QUEUE_ATTR_SCHEDULER_PROFILE_ID"},
            {SAI_QUEUE_ATTR_TAM_OBJECT, "SAI_QUEUE_ATTR_TAM_OBJECT"},
            {SAI_QUEUE_ATTR_TYPE, "SAI_QUEUE_ATTR_TYPE"},
            {SAI_QUEUE_ATTR_WRED_PROFILE_ID, "SAI_QUEUE_ATTR_WRED_PROFILE_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_queue_pfc_deadlock_event_type_t& x)
{
    static std::map<sai_queue_pfc_deadlock_event_type_t, const char*> strs = {
            {SAI_QUEUE_PFC_DEADLOCK_EVENT_TYPE_DETECTED, "SAI_QUEUE_PFC_DEADLOCK_EVENT_TYPE_DETECTED"},
            {SAI_QUEUE_PFC_DEADLOCK_EVENT_TYPE_RECOVERED, "SAI_QUEUE_PFC_DEADLOCK_EVENT_TYPE_RECOVERED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_queue_stat_t& x)
{
    static std::map<sai_queue_stat_t, const char*> strs = {
            {SAI_QUEUE_STAT_BYTES, "SAI_QUEUE_STAT_BYTES"},
            {SAI_QUEUE_STAT_CURR_OCCUPANCY_BYTES, "SAI_QUEUE_STAT_CURR_OCCUPANCY_BYTES"},
            {SAI_QUEUE_STAT_CURR_OCCUPANCY_LEVEL, "SAI_QUEUE_STAT_CURR_OCCUPANCY_LEVEL"},
            {SAI_QUEUE_STAT_CUSTOM_RANGE_BASE, "SAI_QUEUE_STAT_CUSTOM_RANGE_BASE"},
            {SAI_QUEUE_STAT_DROPPED_BYTES, "SAI_QUEUE_STAT_DROPPED_BYTES"},
            {SAI_QUEUE_STAT_DROPPED_PACKETS, "SAI_QUEUE_STAT_DROPPED_PACKETS"},
            {SAI_QUEUE_STAT_GREEN_BYTES, "SAI_QUEUE_STAT_GREEN_BYTES"},
            {SAI_QUEUE_STAT_GREEN_DROPPED_BYTES, "SAI_QUEUE_STAT_GREEN_DROPPED_BYTES"},
            {SAI_QUEUE_STAT_GREEN_DROPPED_PACKETS, "SAI_QUEUE_STAT_GREEN_DROPPED_PACKETS"},
            {SAI_QUEUE_STAT_GREEN_PACKETS, "SAI_QUEUE_STAT_GREEN_PACKETS"},
            {SAI_QUEUE_STAT_GREEN_WRED_DROPPED_BYTES, "SAI_QUEUE_STAT_GREEN_WRED_DROPPED_BYTES"},
            {SAI_QUEUE_STAT_GREEN_WRED_DROPPED_PACKETS, "SAI_QUEUE_STAT_GREEN_WRED_DROPPED_PACKETS"},
            {SAI_QUEUE_STAT_GREEN_WRED_ECN_MARKED_BYTES, "SAI_QUEUE_STAT_GREEN_WRED_ECN_MARKED_BYTES"},
            {SAI_QUEUE_STAT_GREEN_WRED_ECN_MARKED_PACKETS, "SAI_QUEUE_STAT_GREEN_WRED_ECN_MARKED_PACKETS"},
            {SAI_QUEUE_STAT_PACKETS, "SAI_QUEUE_STAT_PACKETS"},
            {SAI_QUEUE_STAT_RED_BYTES, "SAI_QUEUE_STAT_RED_BYTES"},
            {SAI_QUEUE_STAT_RED_DROPPED_BYTES, "SAI_QUEUE_STAT_RED_DROPPED_BYTES"},
            {SAI_QUEUE_STAT_RED_DROPPED_PACKETS, "SAI_QUEUE_STAT_RED_DROPPED_PACKETS"},
            {SAI_QUEUE_STAT_RED_PACKETS, "SAI_QUEUE_STAT_RED_PACKETS"},
            {SAI_QUEUE_STAT_RED_WRED_DROPPED_BYTES, "SAI_QUEUE_STAT_RED_WRED_DROPPED_BYTES"},
            {SAI_QUEUE_STAT_RED_WRED_DROPPED_PACKETS, "SAI_QUEUE_STAT_RED_WRED_DROPPED_PACKETS"},
            {SAI_QUEUE_STAT_RED_WRED_ECN_MARKED_BYTES, "SAI_QUEUE_STAT_RED_WRED_ECN_MARKED_BYTES"},
            {SAI_QUEUE_STAT_RED_WRED_ECN_MARKED_PACKETS, "SAI_QUEUE_STAT_RED_WRED_ECN_MARKED_PACKETS"},
            {SAI_QUEUE_STAT_SHARED_CURR_OCCUPANCY_BYTES, "SAI_QUEUE_STAT_SHARED_CURR_OCCUPANCY_BYTES"},
            {SAI_QUEUE_STAT_SHARED_WATERMARK_BYTES, "SAI_QUEUE_STAT_SHARED_WATERMARK_BYTES"},
            {SAI_QUEUE_STAT_WATERMARK_BYTES, "SAI_QUEUE_STAT_WATERMARK_BYTES"},
            {SAI_QUEUE_STAT_WATERMARK_LEVEL, "SAI_QUEUE_STAT_WATERMARK_LEVEL"},
            {SAI_QUEUE_STAT_WRED_DROPPED_BYTES, "SAI_QUEUE_STAT_WRED_DROPPED_BYTES"},
            {SAI_QUEUE_STAT_WRED_DROPPED_PACKETS, "SAI_QUEUE_STAT_WRED_DROPPED_PACKETS"},
            {SAI_QUEUE_STAT_WRED_ECN_MARKED_BYTES, "SAI_QUEUE_STAT_WRED_ECN_MARKED_BYTES"},
            {SAI_QUEUE_STAT_WRED_ECN_MARKED_PACKETS, "SAI_QUEUE_STAT_WRED_ECN_MARKED_PACKETS"},
            {SAI_QUEUE_STAT_YELLOW_BYTES, "SAI_QUEUE_STAT_YELLOW_BYTES"},
            {SAI_QUEUE_STAT_YELLOW_DROPPED_BYTES, "SAI_QUEUE_STAT_YELLOW_DROPPED_BYTES"},
            {SAI_QUEUE_STAT_YELLOW_DROPPED_PACKETS, "SAI_QUEUE_STAT_YELLOW_DROPPED_PACKETS"},
            {SAI_QUEUE_STAT_YELLOW_PACKETS, "SAI_QUEUE_STAT_YELLOW_PACKETS"},
            {SAI_QUEUE_STAT_YELLOW_WRED_DROPPED_BYTES, "SAI_QUEUE_STAT_YELLOW_WRED_DROPPED_BYTES"},
            {SAI_QUEUE_STAT_YELLOW_WRED_DROPPED_PACKETS, "SAI_QUEUE_STAT_YELLOW_WRED_DROPPED_PACKETS"},
            {SAI_QUEUE_STAT_YELLOW_WRED_ECN_MARKED_BYTES, "SAI_QUEUE_STAT_YELLOW_WRED_ECN_MARKED_BYTES"},
            {SAI_QUEUE_STAT_YELLOW_WRED_ECN_MARKED_PACKETS, "SAI_QUEUE_STAT_YELLOW_WRED_ECN_MARKED_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_queue_type_t& x)
{
    static std::map<sai_queue_type_t, const char*> strs = {
            {SAI_QUEUE_TYPE_ALL, "SAI_QUEUE_TYPE_ALL"},
            {SAI_QUEUE_TYPE_CUSTOM_RANGE_BASE, "SAI_QUEUE_TYPE_CUSTOM_RANGE_BASE"},
            {SAI_QUEUE_TYPE_FABRIC_TX, "SAI_QUEUE_TYPE_FABRIC_TX"},
            {SAI_QUEUE_TYPE_MULTICAST, "SAI_QUEUE_TYPE_MULTICAST"},
            {SAI_QUEUE_TYPE_MULTICAST_VOQ, "SAI_QUEUE_TYPE_MULTICAST_VOQ"},
            {SAI_QUEUE_TYPE_UNICAST, "SAI_QUEUE_TYPE_UNICAST"},
            {SAI_QUEUE_TYPE_UNICAST_VOQ, "SAI_QUEUE_TYPE_UNICAST_VOQ"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_route_entry_attr_t& x)
{
    static std::map<sai_route_entry_attr_t, const char*> strs = {
            {SAI_ROUTE_ENTRY_ATTR_COUNTER_ID, "SAI_ROUTE_ENTRY_ATTR_COUNTER_ID"},
            {SAI_ROUTE_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_ROUTE_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_ROUTE_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_ROUTE_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY, "SAI_ROUTE_ENTRY_ATTR_IP_ADDR_FAMILY"},
            {SAI_ROUTE_ENTRY_ATTR_META_DATA, "SAI_ROUTE_ENTRY_ATTR_META_DATA"},
            {SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID, "SAI_ROUTE_ENTRY_ATTR_NEXT_HOP_ID"},
            {SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION, "SAI_ROUTE_ENTRY_ATTR_PACKET_ACTION"},
            {SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID, "SAI_ROUTE_ENTRY_ATTR_USER_TRAP_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_router_interface_attr_t& x)
{
    static std::map<sai_router_interface_attr_t, const char*> strs = {
            {SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE, "SAI_ROUTER_INTERFACE_ATTR_ADMIN_V4_STATE"},
            {SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE, "SAI_ROUTER_INTERFACE_ATTR_ADMIN_V6_STATE"},
            {SAI_ROUTER_INTERFACE_ATTR_BRIDGE_ID, "SAI_ROUTER_INTERFACE_ATTR_BRIDGE_ID"},
            {SAI_ROUTER_INTERFACE_ATTR_CUSTOM_RANGE_END, "SAI_ROUTER_INTERFACE_ATTR_CUSTOM_RANGE_END"},
            {SAI_ROUTER_INTERFACE_ATTR_CUSTOM_RANGE_START, "SAI_ROUTER_INTERFACE_ATTR_CUSTOM_RANGE_START"},
            {SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL, "SAI_ROUTER_INTERFACE_ATTR_DISABLE_DECREMENT_TTL"},
            {SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL, "SAI_ROUTER_INTERFACE_ATTR_EGRESS_ACL"},
            {SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL, "SAI_ROUTER_INTERFACE_ATTR_INGRESS_ACL"},
            {SAI_ROUTER_INTERFACE_ATTR_INNER_VLAN_ID, "SAI_ROUTER_INTERFACE_ATTR_INNER_VLAN_ID"},
            {SAI_ROUTER_INTERFACE_ATTR_IS_VIRTUAL, "SAI_ROUTER_INTERFACE_ATTR_IS_VIRTUAL"},
            {SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION, "SAI_ROUTER_INTERFACE_ATTR_LOOPBACK_PACKET_ACTION"},
            {SAI_ROUTER_INTERFACE_ATTR_MTU, "SAI_ROUTER_INTERFACE_ATTR_MTU"},
            {SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID, "SAI_ROUTER_INTERFACE_ATTR_NAT_ZONE_ID"},
            {SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION, "SAI_ROUTER_INTERFACE_ATTR_NEIGHBOR_MISS_PACKET_ACTION"},
            {SAI_ROUTER_INTERFACE_ATTR_OUTER_VLAN_ID, "SAI_ROUTER_INTERFACE_ATTR_OUTER_VLAN_ID"},
            {SAI_ROUTER_INTERFACE_ATTR_PORT_ID, "SAI_ROUTER_INTERFACE_ATTR_PORT_ID"},
            {SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS, "SAI_ROUTER_INTERFACE_ATTR_SRC_MAC_ADDRESS"},
            {SAI_ROUTER_INTERFACE_ATTR_TYPE, "SAI_ROUTER_INTERFACE_ATTR_TYPE"},
            {SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE, "SAI_ROUTER_INTERFACE_ATTR_V4_MCAST_ENABLE"},
            {SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE, "SAI_ROUTER_INTERFACE_ATTR_V6_MCAST_ENABLE"},
            {SAI_ROUTER_INTERFACE_ATTR_VIRTUAL_ROUTER_ID, "SAI_ROUTER_INTERFACE_ATTR_VIRTUAL_ROUTER_ID"},
            {SAI_ROUTER_INTERFACE_ATTR_VLAN_ID, "SAI_ROUTER_INTERFACE_ATTR_VLAN_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_router_interface_stat_t& x)
{
    static std::map<sai_router_interface_stat_t, const char*> strs = {
            {SAI_ROUTER_INTERFACE_STAT_IN_ERROR_OCTETS, "SAI_ROUTER_INTERFACE_STAT_IN_ERROR_OCTETS"},
            {SAI_ROUTER_INTERFACE_STAT_IN_ERROR_PACKETS, "SAI_ROUTER_INTERFACE_STAT_IN_ERROR_PACKETS"},
            {SAI_ROUTER_INTERFACE_STAT_IN_OCTETS, "SAI_ROUTER_INTERFACE_STAT_IN_OCTETS"},
            {SAI_ROUTER_INTERFACE_STAT_IN_PACKETS, "SAI_ROUTER_INTERFACE_STAT_IN_PACKETS"},
            {SAI_ROUTER_INTERFACE_STAT_OUT_ERROR_OCTETS, "SAI_ROUTER_INTERFACE_STAT_OUT_ERROR_OCTETS"},
            {SAI_ROUTER_INTERFACE_STAT_OUT_ERROR_PACKETS, "SAI_ROUTER_INTERFACE_STAT_OUT_ERROR_PACKETS"},
            {SAI_ROUTER_INTERFACE_STAT_OUT_OCTETS, "SAI_ROUTER_INTERFACE_STAT_OUT_OCTETS"},
            {SAI_ROUTER_INTERFACE_STAT_OUT_PACKETS, "SAI_ROUTER_INTERFACE_STAT_OUT_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_router_interface_type_t& x)
{
    static std::map<sai_router_interface_type_t, const char*> strs = {
            {SAI_ROUTER_INTERFACE_TYPE_BRIDGE, "SAI_ROUTER_INTERFACE_TYPE_BRIDGE"},
            {SAI_ROUTER_INTERFACE_TYPE_LOOPBACK, "SAI_ROUTER_INTERFACE_TYPE_LOOPBACK"},
            {SAI_ROUTER_INTERFACE_TYPE_MPLS_ROUTER, "SAI_ROUTER_INTERFACE_TYPE_MPLS_ROUTER"},
            {SAI_ROUTER_INTERFACE_TYPE_PORT, "SAI_ROUTER_INTERFACE_TYPE_PORT"},
            {SAI_ROUTER_INTERFACE_TYPE_QINQ_PORT, "SAI_ROUTER_INTERFACE_TYPE_QINQ_PORT"},
            {SAI_ROUTER_INTERFACE_TYPE_SUB_PORT, "SAI_ROUTER_INTERFACE_TYPE_SUB_PORT"},
            {SAI_ROUTER_INTERFACE_TYPE_VLAN, "SAI_ROUTER_INTERFACE_TYPE_VLAN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_rpf_group_attr_t& x)
{
    static std::map<sai_rpf_group_attr_t, const char*> strs = {
            {SAI_RPF_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_RPF_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_RPF_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_RPF_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_RPF_GROUP_ATTR_RPF_INTERFACE_COUNT, "SAI_RPF_GROUP_ATTR_RPF_INTERFACE_COUNT"},
            {SAI_RPF_GROUP_ATTR_RPF_MEMBER_LIST, "SAI_RPF_GROUP_ATTR_RPF_MEMBER_LIST"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_rpf_group_member_attr_t& x)
{
    static std::map<sai_rpf_group_member_attr_t, const char*> strs = {
            {SAI_RPF_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END, "SAI_RPF_GROUP_MEMBER_ATTR_CUSTOM_RANGE_END"},
            {SAI_RPF_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START, "SAI_RPF_GROUP_MEMBER_ATTR_CUSTOM_RANGE_START"},
            {SAI_RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID, "SAI_RPF_GROUP_MEMBER_ATTR_RPF_GROUP_ID"},
            {SAI_RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID, "SAI_RPF_GROUP_MEMBER_ATTR_RPF_INTERFACE_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_samplepacket_attr_t& x)
{
    static std::map<sai_samplepacket_attr_t, const char*> strs = {
            {SAI_SAMPLEPACKET_ATTR_CUSTOM_RANGE_END, "SAI_SAMPLEPACKET_ATTR_CUSTOM_RANGE_END"},
            {SAI_SAMPLEPACKET_ATTR_CUSTOM_RANGE_START, "SAI_SAMPLEPACKET_ATTR_CUSTOM_RANGE_START"},
            {SAI_SAMPLEPACKET_ATTR_MODE, "SAI_SAMPLEPACKET_ATTR_MODE"},
            {SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE, "SAI_SAMPLEPACKET_ATTR_SAMPLE_RATE"},
            {SAI_SAMPLEPACKET_ATTR_TYPE, "SAI_SAMPLEPACKET_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_samplepacket_mode_t& x)
{
    static std::map<sai_samplepacket_mode_t, const char*> strs = {
            {SAI_SAMPLEPACKET_MODE_EXCLUSIVE, "SAI_SAMPLEPACKET_MODE_EXCLUSIVE"},
            {SAI_SAMPLEPACKET_MODE_SHARED, "SAI_SAMPLEPACKET_MODE_SHARED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_samplepacket_type_t& x)
{
    static std::map<sai_samplepacket_type_t, const char*> strs = {
            {SAI_SAMPLEPACKET_TYPE_MIRROR_SESSION, "SAI_SAMPLEPACKET_TYPE_MIRROR_SESSION"},
            {SAI_SAMPLEPACKET_TYPE_SLOW_PATH, "SAI_SAMPLEPACKET_TYPE_SLOW_PATH"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_scheduler_attr_t& x)
{
    static std::map<sai_scheduler_attr_t, const char*> strs = {
            {SAI_SCHEDULER_ATTR_CUSTOM_RANGE_END, "SAI_SCHEDULER_ATTR_CUSTOM_RANGE_END"},
            {SAI_SCHEDULER_ATTR_CUSTOM_RANGE_START, "SAI_SCHEDULER_ATTR_CUSTOM_RANGE_START"},
            {SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE, "SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_BURST_RATE"},
            {SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE, "SAI_SCHEDULER_ATTR_MAX_BANDWIDTH_RATE"},
            {SAI_SCHEDULER_ATTR_METER_TYPE, "SAI_SCHEDULER_ATTR_METER_TYPE"},
            {SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE, "SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_BURST_RATE"},
            {SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE, "SAI_SCHEDULER_ATTR_MIN_BANDWIDTH_RATE"},
            {SAI_SCHEDULER_ATTR_SCHEDULING_TYPE, "SAI_SCHEDULER_ATTR_SCHEDULING_TYPE"},
            {SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT, "SAI_SCHEDULER_ATTR_SCHEDULING_WEIGHT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_scheduler_group_attr_t& x)
{
    static std::map<sai_scheduler_group_attr_t, const char*> strs = {
            {SAI_SCHEDULER_GROUP_ATTR_CHILD_COUNT, "SAI_SCHEDULER_GROUP_ATTR_CHILD_COUNT"},
            {SAI_SCHEDULER_GROUP_ATTR_CHILD_LIST, "SAI_SCHEDULER_GROUP_ATTR_CHILD_LIST"},
            {SAI_SCHEDULER_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_SCHEDULER_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_SCHEDULER_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_SCHEDULER_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_SCHEDULER_GROUP_ATTR_LEVEL, "SAI_SCHEDULER_GROUP_ATTR_LEVEL"},
            {SAI_SCHEDULER_GROUP_ATTR_MAX_CHILDS, "SAI_SCHEDULER_GROUP_ATTR_MAX_CHILDS"},
            {SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE, "SAI_SCHEDULER_GROUP_ATTR_PARENT_NODE"},
            {SAI_SCHEDULER_GROUP_ATTR_PORT_ID, "SAI_SCHEDULER_GROUP_ATTR_PORT_ID"},
            {SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID, "SAI_SCHEDULER_GROUP_ATTR_SCHEDULER_PROFILE_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_scheduling_type_t& x)
{
    static std::map<sai_scheduling_type_t, const char*> strs = {
            {SAI_SCHEDULING_TYPE_DWRR, "SAI_SCHEDULING_TYPE_DWRR"},
            {SAI_SCHEDULING_TYPE_STRICT, "SAI_SCHEDULING_TYPE_STRICT"},
            {SAI_SCHEDULING_TYPE_WRR, "SAI_SCHEDULING_TYPE_WRR"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_segmentroute_sidlist_attr_t& x)
{
    static std::map<sai_segmentroute_sidlist_attr_t, const char*> strs = {
            {SAI_SEGMENTROUTE_SIDLIST_ATTR_CUSTOM_RANGE_END, "SAI_SEGMENTROUTE_SIDLIST_ATTR_CUSTOM_RANGE_END"},
            {SAI_SEGMENTROUTE_SIDLIST_ATTR_CUSTOM_RANGE_START, "SAI_SEGMENTROUTE_SIDLIST_ATTR_CUSTOM_RANGE_START"},
            {SAI_SEGMENTROUTE_SIDLIST_ATTR_SEGMENT_LIST, "SAI_SEGMENTROUTE_SIDLIST_ATTR_SEGMENT_LIST"},
            {SAI_SEGMENTROUTE_SIDLIST_ATTR_TLV_LIST, "SAI_SEGMENTROUTE_SIDLIST_ATTR_TLV_LIST"},
            {SAI_SEGMENTROUTE_SIDLIST_ATTR_TYPE, "SAI_SEGMENTROUTE_SIDLIST_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_segmentroute_sidlist_type_t& x)
{
    static std::map<sai_segmentroute_sidlist_type_t, const char*> strs = {
            {SAI_SEGMENTROUTE_SIDLIST_TYPE_CUSTOM_RANGE_BASE, "SAI_SEGMENTROUTE_SIDLIST_TYPE_CUSTOM_RANGE_BASE"},
            {SAI_SEGMENTROUTE_SIDLIST_TYPE_ENCAPS, "SAI_SEGMENTROUTE_SIDLIST_TYPE_ENCAPS"},
            {SAI_SEGMENTROUTE_SIDLIST_TYPE_INSERT, "SAI_SEGMENTROUTE_SIDLIST_TYPE_INSERT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_stats_mode_t& x)
{
    static std::map<sai_stats_mode_t, const char*> strs = {
            {SAI_STATS_MODE_READ, "SAI_STATS_MODE_READ"},
            {SAI_STATS_MODE_READ_AND_CLEAR, "SAI_STATS_MODE_READ_AND_CLEAR"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_stp_attr_t& x)
{
    static std::map<sai_stp_attr_t, const char*> strs = {
            {SAI_STP_ATTR_BRIDGE_ID, "SAI_STP_ATTR_BRIDGE_ID"},
            {SAI_STP_ATTR_CUSTOM_RANGE_END, "SAI_STP_ATTR_CUSTOM_RANGE_END"},
            {SAI_STP_ATTR_CUSTOM_RANGE_START, "SAI_STP_ATTR_CUSTOM_RANGE_START"},
            {SAI_STP_ATTR_PORT_LIST, "SAI_STP_ATTR_PORT_LIST"},
            {SAI_STP_ATTR_VLAN_LIST, "SAI_STP_ATTR_VLAN_LIST"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_stp_port_attr_t& x)
{
    static std::map<sai_stp_port_attr_t, const char*> strs = {
            {SAI_STP_PORT_ATTR_BRIDGE_PORT, "SAI_STP_PORT_ATTR_BRIDGE_PORT"},
            {SAI_STP_PORT_ATTR_CUSTOM_RANGE_END, "SAI_STP_PORT_ATTR_CUSTOM_RANGE_END"},
            {SAI_STP_PORT_ATTR_CUSTOM_RANGE_START, "SAI_STP_PORT_ATTR_CUSTOM_RANGE_START"},
            {SAI_STP_PORT_ATTR_STATE, "SAI_STP_PORT_ATTR_STATE"},
            {SAI_STP_PORT_ATTR_STP, "SAI_STP_PORT_ATTR_STP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_stp_port_state_t& x)
{
    static std::map<sai_stp_port_state_t, const char*> strs = {
            {SAI_STP_PORT_STATE_BLOCKING, "SAI_STP_PORT_STATE_BLOCKING"},
            {SAI_STP_PORT_STATE_FORWARDING, "SAI_STP_PORT_STATE_FORWARDING"},
            {SAI_STP_PORT_STATE_LEARNING, "SAI_STP_PORT_STATE_LEARNING"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_attr_t& x)
{
    static std::map<sai_switch_attr_t, const char*> strs = {
            {SAI_SWITCH_ATTR_ACL_CAPABILITY, "SAI_SWITCH_ATTR_ACL_CAPABILITY"},
            {SAI_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY, "SAI_SWITCH_ATTR_ACL_ENTRY_MAXIMUM_PRIORITY"},
            {SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY, "SAI_SWITCH_ATTR_ACL_ENTRY_MINIMUM_PRIORITY"},
            {SAI_SWITCH_ATTR_ACL_STAGE_EGRESS, "SAI_SWITCH_ATTR_ACL_STAGE_EGRESS"},
            {SAI_SWITCH_ATTR_ACL_STAGE_INGRESS, "SAI_SWITCH_ATTR_ACL_STAGE_INGRESS"},
            {SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY, "SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MAXIMUM_PRIORITY"},
            {SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY, "SAI_SWITCH_ATTR_ACL_TABLE_GROUP_MINIMUM_PRIORITY"},
            {SAI_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY, "SAI_SWITCH_ATTR_ACL_TABLE_MAXIMUM_PRIORITY"},
            {SAI_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY, "SAI_SWITCH_ATTR_ACL_TABLE_MINIMUM_PRIORITY"},
            {SAI_SWITCH_ATTR_ACL_USER_META_DATA_RANGE, "SAI_SWITCH_ATTR_ACL_USER_META_DATA_RANGE"},
            {SAI_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE, "SAI_SWITCH_ATTR_ACL_USER_TRAP_ID_RANGE"},
            {SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE, "SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE"},
            {SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP, "SAI_SWITCH_ATTR_AVAILABLE_ACL_TABLE_GROUP"},
            {SAI_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_DNAT_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_DOUBLE_NAT_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_FDB_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_FDB_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_IPMC_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEIGHBOR_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_IPV4_NEXTHOP_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_IPV4_ROUTE_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEIGHBOR_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_IPV6_NEXTHOP_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_IPV6_ROUTE_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_L2MC_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_NEXT_HOP_GROUP_MEMBER_ENTRY"},
            {SAI_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY, "SAI_SWITCH_ATTR_AVAILABLE_SNAT_ENTRY"},
            {SAI_SWITCH_ATTR_AVERAGE_TEMP, "SAI_SWITCH_ATTR_AVERAGE_TEMP"},
            {SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE, "SAI_SWITCH_ATTR_BCAST_CPU_FLOOD_ENABLE"},
            {SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY, "SAI_SWITCH_ATTR_BFD_SESSION_STATE_CHANGE_NOTIFY"},
            {SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL, "SAI_SWITCH_ATTR_COUNTER_REFRESH_INTERVAL"},
            {SAI_SWITCH_ATTR_CPU_PORT, "SAI_SWITCH_ATTR_CPU_PORT"},
            {SAI_SWITCH_ATTR_CRC_CHECK_ENABLE, "SAI_SWITCH_ATTR_CRC_CHECK_ENABLE"},
            {SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE, "SAI_SWITCH_ATTR_CRC_RECALCULATION_ENABLE"},
            {SAI_SWITCH_ATTR_CUSTOM_RANGE_END, "SAI_SWITCH_ATTR_CUSTOM_RANGE_END"},
            {SAI_SWITCH_ATTR_CUSTOM_RANGE_START, "SAI_SWITCH_ATTR_CUSTOM_RANGE_START"},
            {SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID, "SAI_SWITCH_ATTR_DEFAULT_1Q_BRIDGE_ID"},
            {SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID, "SAI_SWITCH_ATTR_DEFAULT_STP_INST_ID"},
            {SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP, "SAI_SWITCH_ATTR_DEFAULT_TRAP_GROUP"},
            {SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID, "SAI_SWITCH_ATTR_DEFAULT_VIRTUAL_ROUTER_ID"},
            {SAI_SWITCH_ATTR_DEFAULT_VLAN_ID, "SAI_SWITCH_ATTR_DEFAULT_VLAN_ID"},
            {SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM, "SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_ALGORITHM"},
            {SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED, "SAI_SWITCH_ATTR_ECMP_DEFAULT_HASH_SEED"},
            {SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH, "SAI_SWITCH_ATTR_ECMP_DEFAULT_SYMMETRIC_HASH"},
            {SAI_SWITCH_ATTR_ECMP_HASH, "SAI_SWITCH_ATTR_ECMP_HASH"},
            {SAI_SWITCH_ATTR_ECMP_HASH_IPV4, "SAI_SWITCH_ATTR_ECMP_HASH_IPV4"},
            {SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4, "SAI_SWITCH_ATTR_ECMP_HASH_IPV4_IN_IPV4"},
            {SAI_SWITCH_ATTR_ECMP_HASH_IPV6, "SAI_SWITCH_ATTR_ECMP_HASH_IPV6"},
            {SAI_SWITCH_ATTR_ECMP_MEMBERS, "SAI_SWITCH_ATTR_ECMP_MEMBERS"},
            {SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE, "SAI_SWITCH_ATTR_ECN_ECT_THRESHOLD_ENABLE"},
            {SAI_SWITCH_ATTR_EGRESS_ACL, "SAI_SWITCH_ATTR_EGRESS_ACL"},
            {SAI_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM, "SAI_SWITCH_ATTR_EGRESS_BUFFER_POOL_NUM"},
            {SAI_SWITCH_ATTR_FABRIC_PORT_LIST, "SAI_SWITCH_ATTR_FABRIC_PORT_LIST"},
            {SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE, "SAI_SWITCH_ATTR_FAILOVER_CONFIG_MODE"},
            {SAI_SWITCH_ATTR_FAST_API_ENABLE, "SAI_SWITCH_ATTR_FAST_API_ENABLE"},
            {SAI_SWITCH_ATTR_FDB_AGING_TIME, "SAI_SWITCH_ATTR_FDB_AGING_TIME"},
            {SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION, "SAI_SWITCH_ATTR_FDB_BROADCAST_MISS_PACKET_ACTION"},
            {SAI_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE, "SAI_SWITCH_ATTR_FDB_DST_USER_META_DATA_RANGE"},
            {SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY, "SAI_SWITCH_ATTR_FDB_EVENT_NOTIFY"},
            {SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION, "SAI_SWITCH_ATTR_FDB_MULTICAST_MISS_PACKET_ACTION"},
            {SAI_SWITCH_ATTR_FDB_TABLE_SIZE, "SAI_SWITCH_ATTR_FDB_TABLE_SIZE"},
            {SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION, "SAI_SWITCH_ATTR_FDB_UNICAST_MISS_PACKET_ACTION"},
            {SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP, "SAI_SWITCH_ATTR_FIRMWARE_BROADCAST_STOP"},
            {SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST, "SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_BROADCAST"},
            {SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE, "SAI_SWITCH_ATTR_FIRMWARE_DOWNLOAD_EXECUTE"},
            {SAI_SWITCH_ATTR_FIRMWARE_LOAD_METHOD, "SAI_SWITCH_ATTR_FIRMWARE_LOAD_METHOD"},
            {SAI_SWITCH_ATTR_FIRMWARE_LOAD_TYPE, "SAI_SWITCH_ATTR_FIRMWARE_LOAD_TYPE"},
            {SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION, "SAI_SWITCH_ATTR_FIRMWARE_MAJOR_VERSION"},
            {SAI_SWITCH_ATTR_FIRMWARE_MINOR_VERSION, "SAI_SWITCH_ATTR_FIRMWARE_MINOR_VERSION"},
            {SAI_SWITCH_ATTR_FIRMWARE_PATH_NAME, "SAI_SWITCH_ATTR_FIRMWARE_PATH_NAME"},
            {SAI_SWITCH_ATTR_FIRMWARE_STATUS, "SAI_SWITCH_ATTR_FIRMWARE_STATUS"},
            {SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH, "SAI_SWITCH_ATTR_FIRMWARE_VERIFY_AND_INIT_SWITCH"},
            {SAI_SWITCH_ATTR_HARDWARE_ACCESS_BUS, "SAI_SWITCH_ATTR_HARDWARE_ACCESS_BUS"},
            {SAI_SWITCH_ATTR_INGRESS_ACL, "SAI_SWITCH_ATTR_INGRESS_ACL"},
            {SAI_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM, "SAI_SWITCH_ATTR_INGRESS_BUFFER_POOL_NUM"},
            {SAI_SWITCH_ATTR_INIT_SWITCH, "SAI_SWITCH_ATTR_INIT_SWITCH"},
            {SAI_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE, "SAI_SWITCH_ATTR_L3_NEIGHBOR_TABLE_SIZE"},
            {SAI_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE, "SAI_SWITCH_ATTR_L3_ROUTE_TABLE_SIZE"},
            {SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM, "SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_ALGORITHM"},
            {SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED, "SAI_SWITCH_ATTR_LAG_DEFAULT_HASH_SEED"},
            {SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH, "SAI_SWITCH_ATTR_LAG_DEFAULT_SYMMETRIC_HASH"},
            {SAI_SWITCH_ATTR_LAG_HASH, "SAI_SWITCH_ATTR_LAG_HASH"},
            {SAI_SWITCH_ATTR_LAG_HASH_IPV4, "SAI_SWITCH_ATTR_LAG_HASH_IPV4"},
            {SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4, "SAI_SWITCH_ATTR_LAG_HASH_IPV4_IN_IPV4"},
            {SAI_SWITCH_ATTR_LAG_HASH_IPV6, "SAI_SWITCH_ATTR_LAG_HASH_IPV6"},
            {SAI_SWITCH_ATTR_LAG_MEMBERS, "SAI_SWITCH_ATTR_LAG_MEMBERS"},
            {SAI_SWITCH_ATTR_MACSEC_OBJECT_ID, "SAI_SWITCH_ATTR_MACSEC_OBJECT_ID"},
            {SAI_SWITCH_ATTR_MAX_ACL_ACTION_COUNT, "SAI_SWITCH_ATTR_MAX_ACL_ACTION_COUNT"},
            {SAI_SWITCH_ATTR_MAX_ACL_RANGE_COUNT, "SAI_SWITCH_ATTR_MAX_ACL_RANGE_COUNT"},
            {SAI_SWITCH_ATTR_MAX_BFD_SESSION, "SAI_SWITCH_ATTR_MAX_BFD_SESSION"},
            {SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES, "SAI_SWITCH_ATTR_MAX_LEARNED_ADDRESSES"},
            {SAI_SWITCH_ATTR_MAX_MIRROR_SESSION, "SAI_SWITCH_ATTR_MAX_MIRROR_SESSION"},
            {SAI_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS, "SAI_SWITCH_ATTR_MAX_NUMBER_OF_SUPPORTED_PORTS"},
            {SAI_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS, "SAI_SWITCH_ATTR_MAX_NUMBER_OF_TEMP_SENSORS"},
            {SAI_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION, "SAI_SWITCH_ATTR_MAX_SAMPLED_MIRROR_SESSION"},
            {SAI_SWITCH_ATTR_MAX_STP_INSTANCE, "SAI_SWITCH_ATTR_MAX_STP_INSTANCE"},
            {SAI_SWITCH_ATTR_MAX_SYSTEM_CORES, "SAI_SWITCH_ATTR_MAX_SYSTEM_CORES"},
            {SAI_SWITCH_ATTR_MAX_TEMP, "SAI_SWITCH_ATTR_MAX_TEMP"},
            {SAI_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS, "SAI_SWITCH_ATTR_MAX_VIRTUAL_ROUTERS"},
            {SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE, "SAI_SWITCH_ATTR_MCAST_CPU_FLOOD_ENABLE"},
            {SAI_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY, "SAI_SWITCH_ATTR_MCAST_SNOOPING_CAPABILITY"},
            {SAI_SWITCH_ATTR_MIN_BFD_RX, "SAI_SWITCH_ATTR_MIN_BFD_RX"},
            {SAI_SWITCH_ATTR_MIN_BFD_TX, "SAI_SWITCH_ATTR_MIN_BFD_TX"},
            {SAI_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL, "SAI_SWITCH_ATTR_MIN_PLANNED_RESTART_INTERVAL"},
            {SAI_SWITCH_ATTR_MIRROR_TC, "SAI_SWITCH_ATTR_MIRROR_TC"},
            {SAI_SWITCH_ATTR_NAT_ENABLE, "SAI_SWITCH_ATTR_NAT_ENABLE"},
            {SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID, "SAI_SWITCH_ATTR_NAT_ZONE_COUNTER_OBJECT_ID"},
            {SAI_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE, "SAI_SWITCH_ATTR_NEIGHBOR_DST_USER_META_DATA_RANGE"},
            {SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS, "SAI_SWITCH_ATTR_NUMBER_OF_ACTIVE_PORTS"},
            {SAI_SWITCH_ATTR_NUMBER_OF_BFD_SESSION, "SAI_SWITCH_ATTR_NUMBER_OF_BFD_SESSION"},
            {SAI_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES, "SAI_SWITCH_ATTR_NUMBER_OF_CPU_QUEUES"},
            {SAI_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS, "SAI_SWITCH_ATTR_NUMBER_OF_ECMP_GROUPS"},
            {SAI_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS, "SAI_SWITCH_ATTR_NUMBER_OF_FABRIC_PORTS"},
            {SAI_SWITCH_ATTR_NUMBER_OF_LAGS, "SAI_SWITCH_ATTR_NUMBER_OF_LAGS"},
            {SAI_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES, "SAI_SWITCH_ATTR_NUMBER_OF_MULTICAST_QUEUES"},
            {SAI_SWITCH_ATTR_NUMBER_OF_QUEUES, "SAI_SWITCH_ATTR_NUMBER_OF_QUEUES"},
            {SAI_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS, "SAI_SWITCH_ATTR_NUMBER_OF_SYSTEM_PORTS"},
            {SAI_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES, "SAI_SWITCH_ATTR_NUMBER_OF_UNICAST_QUEUES"},
            {SAI_SWITCH_ATTR_NV_STORAGE_SIZE, "SAI_SWITCH_ATTR_NV_STORAGE_SIZE"},
            {SAI_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED, "SAI_SWITCH_ATTR_ON_LINK_ROUTE_SUPPORTED"},
            {SAI_SWITCH_ATTR_OPER_STATUS, "SAI_SWITCH_ATTR_OPER_STATUS"},
            {SAI_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE, "SAI_SWITCH_ATTR_PACKET_DMA_MEMORY_POOL_SIZE"},
            {SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY, "SAI_SWITCH_ATTR_PACKET_EVENT_NOTIFY"},
            {SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION, "SAI_SWITCH_ATTR_PFC_DLR_PACKET_ACTION"},
            {SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL, "SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL"},
            {SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE, "SAI_SWITCH_ATTR_PFC_TC_DLD_INTERVAL_RANGE"},
            {SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL, "SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL"},
            {SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE, "SAI_SWITCH_ATTR_PFC_TC_DLR_INTERVAL_RANGE"},
            {SAI_SWITCH_ATTR_PLATFROM_CONTEXT, "SAI_SWITCH_ATTR_PLATFROM_CONTEXT"},
            {SAI_SWITCH_ATTR_PORT_CONNECTOR_LIST, "SAI_SWITCH_ATTR_PORT_CONNECTOR_LIST"},
            {SAI_SWITCH_ATTR_PORT_LIST, "SAI_SWITCH_ATTR_PORT_LIST"},
            {SAI_SWITCH_ATTR_PORT_MAX_MTU, "SAI_SWITCH_ATTR_PORT_MAX_MTU"},
            {SAI_SWITCH_ATTR_PORT_NUMBER, "SAI_SWITCH_ATTR_PORT_NUMBER"},
            {SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY, "SAI_SWITCH_ATTR_PORT_STATE_CHANGE_NOTIFY"},
            {SAI_SWITCH_ATTR_PORT_USER_META_DATA_RANGE, "SAI_SWITCH_ATTR_PORT_USER_META_DATA_RANGE"},
            {SAI_SWITCH_ATTR_PRE_SHUTDOWN, "SAI_SWITCH_ATTR_PRE_SHUTDOWN"},
            {SAI_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT, "SAI_SWITCH_ATTR_PROPOGATE_PORT_STATE_FROM_LINE_TO_SYSTEM_PORT_SUPPORT"},
            {SAI_SWITCH_ATTR_QOS_DEFAULT_TC, "SAI_SWITCH_ATTR_QOS_DEFAULT_TC"},
            {SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP, "SAI_SWITCH_ATTR_QOS_DOT1P_TO_COLOR_MAP"},
            {SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP, "SAI_SWITCH_ATTR_QOS_DOT1P_TO_TC_MAP"},
            {SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP, "SAI_SWITCH_ATTR_QOS_DSCP_TO_COLOR_MAP"},
            {SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP, "SAI_SWITCH_ATTR_QOS_DSCP_TO_TC_MAP"},
            {SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP, "SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_CHILDS_PER_SCHEDULER_GROUP"},
            {SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL, "SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUPS_PER_HIERARCHY_LEVEL"},
            {SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS, "SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_SCHEDULER_GROUP_HIERARCHY_LEVELS"},
            {SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES, "SAI_SWITCH_ATTR_QOS_MAX_NUMBER_OF_TRAFFIC_CLASSES"},
            {SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP, "SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_COLOR_MAP"},
            {SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP, "SAI_SWITCH_ATTR_QOS_MPLS_EXP_TO_TC_MAP"},
            {SAI_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES, "SAI_SWITCH_ATTR_QOS_NUM_LOSSLESS_QUEUES"},
            {SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP, "SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DOT1P_MAP"},
            {SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP, "SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_DSCP_MAP"},
            {SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP, "SAI_SWITCH_ATTR_QOS_TC_AND_COLOR_TO_MPLS_EXP_MAP"},
            {SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP, "SAI_SWITCH_ATTR_QOS_TC_TO_QUEUE_MAP"},
            {SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY, "SAI_SWITCH_ATTR_QUEUE_PFC_DEADLOCK_NOTIFY"},
            {SAI_SWITCH_ATTR_REGISTER_READ, "SAI_SWITCH_ATTR_REGISTER_READ"},
            {SAI_SWITCH_ATTR_REGISTER_WRITE, "SAI_SWITCH_ATTR_REGISTER_WRITE"},
            {SAI_SWITCH_ATTR_RESTART_TYPE, "SAI_SWITCH_ATTR_RESTART_TYPE"},
            {SAI_SWITCH_ATTR_RESTART_WARM, "SAI_SWITCH_ATTR_RESTART_WARM"},
            {SAI_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE, "SAI_SWITCH_ATTR_ROUTE_DST_USER_META_DATA_RANGE"},
            {SAI_SWITCH_ATTR_SEGMENTROUTE_MAX_SID_DEPTH, "SAI_SWITCH_ATTR_SEGMENTROUTE_MAX_SID_DEPTH"},
            {SAI_SWITCH_ATTR_SEGMENTROUTE_TLV_TYPE, "SAI_SWITCH_ATTR_SEGMENTROUTE_TLV_TYPE"},
            {SAI_SWITCH_ATTR_SHUTDOWN_REQUEST_NOTIFY, "SAI_SWITCH_ATTR_SHUTDOWN_REQUEST_NOTIFY"},
            {SAI_SWITCH_ATTR_SRC_MAC_ADDRESS, "SAI_SWITCH_ATTR_SRC_MAC_ADDRESS"},
            {SAI_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE, "SAI_SWITCH_ATTR_SUPPORTED_EXTENDED_STATS_MODE"},
            {SAI_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE, "SAI_SWITCH_ATTR_SUPPORTED_FAILOVER_MODE"},
            {SAI_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE, "SAI_SWITCH_ATTR_SUPPORTED_IPV4_BFD_SESSION_OFFLOAD_TYPE"},
            {SAI_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE, "SAI_SWITCH_ATTR_SUPPORTED_IPV6_BFD_SESSION_OFFLOAD_TYPE"},
            {SAI_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST, "SAI_SWITCH_ATTR_SUPPORTED_OBJECT_TYPE_LIST"},
            {SAI_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE, "SAI_SWITCH_ATTR_SUPPORTED_PROTECTED_OBJECT_TYPE"},
            {SAI_SWITCH_ATTR_SWITCHING_MODE, "SAI_SWITCH_ATTR_SWITCHING_MODE"},
            {SAI_SWITCH_ATTR_SWITCH_HARDWARE_INFO, "SAI_SWITCH_ATTR_SWITCH_HARDWARE_INFO"},
            {SAI_SWITCH_ATTR_SWITCH_ID, "SAI_SWITCH_ATTR_SWITCH_ID"},
            {SAI_SWITCH_ATTR_SWITCH_PROFILE_ID, "SAI_SWITCH_ATTR_SWITCH_PROFILE_ID"},
            {SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE, "SAI_SWITCH_ATTR_SWITCH_SHELL_ENABLE"},
            {SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY, "SAI_SWITCH_ATTR_SWITCH_SHUTDOWN_REQUEST_NOTIFY"},
            {SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY, "SAI_SWITCH_ATTR_SWITCH_STATE_CHANGE_NOTIFY"},
            {SAI_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST, "SAI_SWITCH_ATTR_SYSTEM_PORT_CONFIG_LIST"},
            {SAI_SWITCH_ATTR_SYSTEM_PORT_LIST, "SAI_SWITCH_ATTR_SYSTEM_PORT_LIST"},
            {SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY, "SAI_SWITCH_ATTR_TAM_EVENT_NOTIFY"},
            {SAI_SWITCH_ATTR_TAM_OBJECT_ID, "SAI_SWITCH_ATTR_TAM_OBJECT_ID"},
            {SAI_SWITCH_ATTR_TEMP_LIST, "SAI_SWITCH_ATTR_TEMP_LIST"},
            {SAI_SWITCH_ATTR_TOTAL_BUFFER_SIZE, "SAI_SWITCH_ATTR_TOTAL_BUFFER_SIZE"},
            {SAI_SWITCH_ATTR_TPID_INNER_VLAN, "SAI_SWITCH_ATTR_TPID_INNER_VLAN"},
            {SAI_SWITCH_ATTR_TPID_OUTER_VLAN, "SAI_SWITCH_ATTR_TPID_OUTER_VLAN"},
            {SAI_SWITCH_ATTR_TUNNEL_LOOPBACK_PACKET_ACTION, "SAI_SWITCH_ATTR_TUNNEL_LOOPBACK_PACKET_ACTION"},
            {SAI_SWITCH_ATTR_TYPE, "SAI_SWITCH_ATTR_TYPE"},
            {SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL, "SAI_SWITCH_ATTR_UNINIT_DATA_PLANE_ON_REMOVAL"},
            {SAI_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE, "SAI_SWITCH_ATTR_VLAN_USER_META_DATA_RANGE"},
            {SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT, "SAI_SWITCH_ATTR_VXLAN_DEFAULT_PORT"},
            {SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC, "SAI_SWITCH_ATTR_VXLAN_DEFAULT_ROUTER_MAC"},
            {SAI_SWITCH_ATTR_WARM_RECOVER, "SAI_SWITCH_ATTR_WARM_RECOVER"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_failover_config_mode_t& x)
{
    static std::map<sai_switch_failover_config_mode_t, const char*> strs = {
            {SAI_SWITCH_FAILOVER_CONFIG_MODE_HITLESS, "SAI_SWITCH_FAILOVER_CONFIG_MODE_HITLESS"},
            {SAI_SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS, "SAI_SWITCH_FAILOVER_CONFIG_MODE_NO_HITLESS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_firmware_load_method_t& x)
{
    static std::map<sai_switch_firmware_load_method_t, const char*> strs = {
            {SAI_SWITCH_FIRMWARE_LOAD_METHOD_EEPROM, "SAI_SWITCH_FIRMWARE_LOAD_METHOD_EEPROM"},
            {SAI_SWITCH_FIRMWARE_LOAD_METHOD_INTERNAL, "SAI_SWITCH_FIRMWARE_LOAD_METHOD_INTERNAL"},
            {SAI_SWITCH_FIRMWARE_LOAD_METHOD_NONE, "SAI_SWITCH_FIRMWARE_LOAD_METHOD_NONE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_firmware_load_type_t& x)
{
    static std::map<sai_switch_firmware_load_type_t, const char*> strs = {
            {SAI_SWITCH_FIRMWARE_LOAD_TYPE_AUTO, "SAI_SWITCH_FIRMWARE_LOAD_TYPE_AUTO"},
            {SAI_SWITCH_FIRMWARE_LOAD_TYPE_FORCE, "SAI_SWITCH_FIRMWARE_LOAD_TYPE_FORCE"},
            {SAI_SWITCH_FIRMWARE_LOAD_TYPE_SKIP, "SAI_SWITCH_FIRMWARE_LOAD_TYPE_SKIP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_hardware_access_bus_t& x)
{
    static std::map<sai_switch_hardware_access_bus_t, const char*> strs = {
            {SAI_SWITCH_HARDWARE_ACCESS_BUS_CPLD, "SAI_SWITCH_HARDWARE_ACCESS_BUS_CPLD"},
            {SAI_SWITCH_HARDWARE_ACCESS_BUS_I2C, "SAI_SWITCH_HARDWARE_ACCESS_BUS_I2C"},
            {SAI_SWITCH_HARDWARE_ACCESS_BUS_MDIO, "SAI_SWITCH_HARDWARE_ACCESS_BUS_MDIO"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_mcast_snooping_capability_t& x)
{
    static std::map<sai_switch_mcast_snooping_capability_t, const char*> strs = {
            {SAI_SWITCH_MCAST_SNOOPING_CAPABILITY_NONE, "SAI_SWITCH_MCAST_SNOOPING_CAPABILITY_NONE"},
            {SAI_SWITCH_MCAST_SNOOPING_CAPABILITY_SG, "SAI_SWITCH_MCAST_SNOOPING_CAPABILITY_SG"},
            {SAI_SWITCH_MCAST_SNOOPING_CAPABILITY_XG, "SAI_SWITCH_MCAST_SNOOPING_CAPABILITY_XG"},
            {SAI_SWITCH_MCAST_SNOOPING_CAPABILITY_XG_AND_SG, "SAI_SWITCH_MCAST_SNOOPING_CAPABILITY_XG_AND_SG"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_oper_status_t& x)
{
    static std::map<sai_switch_oper_status_t, const char*> strs = {
            {SAI_SWITCH_OPER_STATUS_DOWN, "SAI_SWITCH_OPER_STATUS_DOWN"},
            {SAI_SWITCH_OPER_STATUS_FAILED, "SAI_SWITCH_OPER_STATUS_FAILED"},
            {SAI_SWITCH_OPER_STATUS_UNKNOWN, "SAI_SWITCH_OPER_STATUS_UNKNOWN"},
            {SAI_SWITCH_OPER_STATUS_UP, "SAI_SWITCH_OPER_STATUS_UP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_restart_type_t& x)
{
    static std::map<sai_switch_restart_type_t, const char*> strs = {
            {SAI_SWITCH_RESTART_TYPE_ANY, "SAI_SWITCH_RESTART_TYPE_ANY"},
            {SAI_SWITCH_RESTART_TYPE_NONE, "SAI_SWITCH_RESTART_TYPE_NONE"},
            {SAI_SWITCH_RESTART_TYPE_PLANNED, "SAI_SWITCH_RESTART_TYPE_PLANNED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_stat_t& x)
{
    static std::map<sai_switch_stat_t, const char*> strs = {
            {SAI_SWITCH_STAT_ECC_DROP, "SAI_SWITCH_STAT_ECC_DROP"},
            {SAI_SWITCH_STAT_FABRIC_DROP_REASON_RANGE_BASE, "SAI_SWITCH_STAT_FABRIC_DROP_REASON_RANGE_BASE"},
            {SAI_SWITCH_STAT_FABRIC_DROP_REASON_RANGE_END, "SAI_SWITCH_STAT_FABRIC_DROP_REASON_RANGE_END"},
            {SAI_SWITCH_STAT_GLOBAL_DROP, "SAI_SWITCH_STAT_GLOBAL_DROP"},
            {SAI_SWITCH_STAT_HIGHEST_QUEUE_CONGESTION_LEVEL, "SAI_SWITCH_STAT_HIGHEST_QUEUE_CONGESTION_LEVEL"},
            {SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS, "SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS, "SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS, "SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS, "SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS, "SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS, "SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS, "SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS, "SAI_SWITCH_STAT_IN_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_IN_DROP_REASON_RANGE_BASE, "SAI_SWITCH_STAT_IN_DROP_REASON_RANGE_BASE"},
            {SAI_SWITCH_STAT_IN_DROP_REASON_RANGE_END, "SAI_SWITCH_STAT_IN_DROP_REASON_RANGE_END"},
            {SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS, "SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_0_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS, "SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_1_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS, "SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_2_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS, "SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_3_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS, "SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_4_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS, "SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_5_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS, "SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_6_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS, "SAI_SWITCH_STAT_OUT_CONFIGURED_DROP_REASONS_7_DROPPED_PKTS"},
            {SAI_SWITCH_STAT_OUT_DROP_REASON_RANGE_BASE, "SAI_SWITCH_STAT_OUT_DROP_REASON_RANGE_BASE"},
            {SAI_SWITCH_STAT_OUT_DROP_REASON_RANGE_END, "SAI_SWITCH_STAT_OUT_DROP_REASON_RANGE_END"},
            {SAI_SWITCH_STAT_REACHABILITY_DROP, "SAI_SWITCH_STAT_REACHABILITY_DROP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_switching_mode_t& x)
{
    static std::map<sai_switch_switching_mode_t, const char*> strs = {
            {SAI_SWITCH_SWITCHING_MODE_CUT_THROUGH, "SAI_SWITCH_SWITCHING_MODE_CUT_THROUGH"},
            {SAI_SWITCH_SWITCHING_MODE_STORE_AND_FORWARD, "SAI_SWITCH_SWITCHING_MODE_STORE_AND_FORWARD"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_switch_type_t& x)
{
    static std::map<sai_switch_type_t, const char*> strs = {
            {SAI_SWITCH_TYPE_FABRIC, "SAI_SWITCH_TYPE_FABRIC"},
            {SAI_SWITCH_TYPE_NPU, "SAI_SWITCH_TYPE_NPU"},
            {SAI_SWITCH_TYPE_PHY, "SAI_SWITCH_TYPE_PHY"},
            {SAI_SWITCH_TYPE_VOQ, "SAI_SWITCH_TYPE_VOQ"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_system_port_attr_t& x)
{
    static std::map<sai_system_port_attr_t, const char*> strs = {
            {SAI_SYSTEM_PORT_ATTR_ADMIN_STATE, "SAI_SYSTEM_PORT_ATTR_ADMIN_STATE"},
            {SAI_SYSTEM_PORT_ATTR_CONFIG_INFO, "SAI_SYSTEM_PORT_ATTR_CONFIG_INFO"},
            {SAI_SYSTEM_PORT_ATTR_CUSTOM_RANGE_END, "SAI_SYSTEM_PORT_ATTR_CUSTOM_RANGE_END"},
            {SAI_SYSTEM_PORT_ATTR_CUSTOM_RANGE_START, "SAI_SYSTEM_PORT_ATTR_CUSTOM_RANGE_START"},
            {SAI_SYSTEM_PORT_ATTR_PORT, "SAI_SYSTEM_PORT_ATTR_PORT"},
            {SAI_SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS, "SAI_SYSTEM_PORT_ATTR_QOS_NUMBER_OF_VOQS"},
            {SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP, "SAI_SYSTEM_PORT_ATTR_QOS_TC_TO_QUEUE_MAP"},
            {SAI_SYSTEM_PORT_ATTR_QOS_VOQ_LIST, "SAI_SYSTEM_PORT_ATTR_QOS_VOQ_LIST"},
            {SAI_SYSTEM_PORT_ATTR_TYPE, "SAI_SYSTEM_PORT_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_system_port_type_t& x)
{
    static std::map<sai_system_port_type_t, const char*> strs = {
            {SAI_SYSTEM_PORT_TYPE_LOCAL, "SAI_SYSTEM_PORT_TYPE_LOCAL"},
            {SAI_SYSTEM_PORT_TYPE_REMOTE, "SAI_SYSTEM_PORT_TYPE_REMOTE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_attr_t& x)
{
    static std::map<sai_tam_attr_t, const char*> strs = {
            {SAI_TAM_ATTR_CUSTOM_RANGE_END, "SAI_TAM_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_ATTR_CUSTOM_RANGE_START, "SAI_TAM_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_ATTR_EVENT_OBJECTS_LIST, "SAI_TAM_ATTR_EVENT_OBJECTS_LIST"},
            {SAI_TAM_ATTR_INT_OBJECTS_LIST, "SAI_TAM_ATTR_INT_OBJECTS_LIST"},
            {SAI_TAM_ATTR_TAM_BIND_POINT_TYPE_LIST, "SAI_TAM_ATTR_TAM_BIND_POINT_TYPE_LIST"},
            {SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST, "SAI_TAM_ATTR_TELEMETRY_OBJECTS_LIST"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_bind_point_type_t& x)
{
    static std::map<sai_tam_bind_point_type_t, const char*> strs = {
            {SAI_TAM_BIND_POINT_TYPE_BSP, "SAI_TAM_BIND_POINT_TYPE_BSP"},
            {SAI_TAM_BIND_POINT_TYPE_IPG, "SAI_TAM_BIND_POINT_TYPE_IPG"},
            {SAI_TAM_BIND_POINT_TYPE_LAG, "SAI_TAM_BIND_POINT_TYPE_LAG"},
            {SAI_TAM_BIND_POINT_TYPE_PORT, "SAI_TAM_BIND_POINT_TYPE_PORT"},
            {SAI_TAM_BIND_POINT_TYPE_QUEUE, "SAI_TAM_BIND_POINT_TYPE_QUEUE"},
            {SAI_TAM_BIND_POINT_TYPE_SWITCH, "SAI_TAM_BIND_POINT_TYPE_SWITCH"},
            {SAI_TAM_BIND_POINT_TYPE_VLAN, "SAI_TAM_BIND_POINT_TYPE_VLAN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_collector_attr_t& x)
{
    static std::map<sai_tam_collector_attr_t, const char*> strs = {
            {SAI_TAM_COLLECTOR_ATTR_CUSTOM_RANGE_END, "SAI_TAM_COLLECTOR_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_COLLECTOR_ATTR_CUSTOM_RANGE_START, "SAI_TAM_COLLECTOR_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE, "SAI_TAM_COLLECTOR_ATTR_DSCP_VALUE"},
            {SAI_TAM_COLLECTOR_ATTR_DST_IP, "SAI_TAM_COLLECTOR_ATTR_DST_IP"},
            {SAI_TAM_COLLECTOR_ATTR_LOCALHOST, "SAI_TAM_COLLECTOR_ATTR_LOCALHOST"},
            {SAI_TAM_COLLECTOR_ATTR_SRC_IP, "SAI_TAM_COLLECTOR_ATTR_SRC_IP"},
            {SAI_TAM_COLLECTOR_ATTR_TRANSPORT, "SAI_TAM_COLLECTOR_ATTR_TRANSPORT"},
            {SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE, "SAI_TAM_COLLECTOR_ATTR_TRUNCATE_SIZE"},
            {SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID, "SAI_TAM_COLLECTOR_ATTR_VIRTUAL_ROUTER_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_event_action_attr_t& x)
{
    static std::map<sai_tam_event_action_attr_t, const char*> strs = {
            {SAI_TAM_EVENT_ACTION_ATTR_CUSTOM_RANGE_END, "SAI_TAM_EVENT_ACTION_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_EVENT_ACTION_ATTR_CUSTOM_RANGE_START, "SAI_TAM_EVENT_ACTION_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE, "SAI_TAM_EVENT_ACTION_ATTR_QOS_ACTION_TYPE"},
            {SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE, "SAI_TAM_EVENT_ACTION_ATTR_REPORT_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_event_attr_t& x)
{
    static std::map<sai_tam_event_attr_t, const char*> strs = {
            {SAI_TAM_EVENT_ATTR_ACTION_LIST, "SAI_TAM_EVENT_ATTR_ACTION_LIST"},
            {SAI_TAM_EVENT_ATTR_COLLECTOR_LIST, "SAI_TAM_EVENT_ATTR_COLLECTOR_LIST"},
            {SAI_TAM_EVENT_ATTR_CUSTOM_RANGE_END, "SAI_TAM_EVENT_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_EVENT_ATTR_CUSTOM_RANGE_START, "SAI_TAM_EVENT_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_EVENT_ATTR_DSCP_VALUE, "SAI_TAM_EVENT_ATTR_DSCP_VALUE"},
            {SAI_TAM_EVENT_ATTR_THRESHOLD, "SAI_TAM_EVENT_ATTR_THRESHOLD"},
            {SAI_TAM_EVENT_ATTR_TYPE, "SAI_TAM_EVENT_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_event_threshold_attr_t& x)
{
    static std::map<sai_tam_event_threshold_attr_t, const char*> strs = {
            {SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE, "SAI_TAM_EVENT_THRESHOLD_ATTR_ABS_VALUE"},
            {SAI_TAM_EVENT_THRESHOLD_ATTR_CUSTOM_RANGE_END, "SAI_TAM_EVENT_THRESHOLD_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_EVENT_THRESHOLD_ATTR_CUSTOM_RANGE_START, "SAI_TAM_EVENT_THRESHOLD_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK, "SAI_TAM_EVENT_THRESHOLD_ATTR_HIGH_WATERMARK"},
            {SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY, "SAI_TAM_EVENT_THRESHOLD_ATTR_LATENCY"},
            {SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK, "SAI_TAM_EVENT_THRESHOLD_ATTR_LOW_WATERMARK"},
            {SAI_TAM_EVENT_THRESHOLD_ATTR_RATE, "SAI_TAM_EVENT_THRESHOLD_ATTR_RATE"},
            {SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT, "SAI_TAM_EVENT_THRESHOLD_ATTR_UNIT"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_event_threshold_unit_t& x)
{
    static std::map<sai_tam_event_threshold_unit_t, const char*> strs = {
            {SAI_TAM_EVENT_THRESHOLD_UNIT_BYTES, "SAI_TAM_EVENT_THRESHOLD_UNIT_BYTES"},
            {SAI_TAM_EVENT_THRESHOLD_UNIT_CELLS, "SAI_TAM_EVENT_THRESHOLD_UNIT_CELLS"},
            {SAI_TAM_EVENT_THRESHOLD_UNIT_MSEC, "SAI_TAM_EVENT_THRESHOLD_UNIT_MSEC"},
            {SAI_TAM_EVENT_THRESHOLD_UNIT_NANOSEC, "SAI_TAM_EVENT_THRESHOLD_UNIT_NANOSEC"},
            {SAI_TAM_EVENT_THRESHOLD_UNIT_PACKETS, "SAI_TAM_EVENT_THRESHOLD_UNIT_PACKETS"},
            {SAI_TAM_EVENT_THRESHOLD_UNIT_PERCENT, "SAI_TAM_EVENT_THRESHOLD_UNIT_PERCENT"},
            {SAI_TAM_EVENT_THRESHOLD_UNIT_USEC, "SAI_TAM_EVENT_THRESHOLD_UNIT_USEC"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_event_type_t& x)
{
    static std::map<sai_tam_event_type_t, const char*> strs = {
            {SAI_TAM_EVENT_TYPE_BSP, "SAI_TAM_EVENT_TYPE_BSP"},
            {SAI_TAM_EVENT_TYPE_FLOW_STATE, "SAI_TAM_EVENT_TYPE_FLOW_STATE"},
            {SAI_TAM_EVENT_TYPE_FLOW_TCPFLAG, "SAI_TAM_EVENT_TYPE_FLOW_TCPFLAG"},
            {SAI_TAM_EVENT_TYPE_FLOW_WATCHLIST, "SAI_TAM_EVENT_TYPE_FLOW_WATCHLIST"},
            {SAI_TAM_EVENT_TYPE_IPG_SHARED, "SAI_TAM_EVENT_TYPE_IPG_SHARED"},
            {SAI_TAM_EVENT_TYPE_IPG_XOFF_ROOM, "SAI_TAM_EVENT_TYPE_IPG_XOFF_ROOM"},
            {SAI_TAM_EVENT_TYPE_PACKET_DROP, "SAI_TAM_EVENT_TYPE_PACKET_DROP"},
            {SAI_TAM_EVENT_TYPE_QUEUE_TAIL_DROP, "SAI_TAM_EVENT_TYPE_QUEUE_TAIL_DROP"},
            {SAI_TAM_EVENT_TYPE_QUEUE_THRESHOLD, "SAI_TAM_EVENT_TYPE_QUEUE_THRESHOLD"},
            {SAI_TAM_EVENT_TYPE_RESOURCE_UTILIZATION, "SAI_TAM_EVENT_TYPE_RESOURCE_UTILIZATION"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_int_attr_t& x)
{
    static std::map<sai_tam_int_attr_t, const char*> strs = {
            {SAI_TAM_INT_ATTR_ACL_GROUP, "SAI_TAM_INT_ATTR_ACL_GROUP"},
            {SAI_TAM_INT_ATTR_ACTION_VECTOR, "SAI_TAM_INT_ATTR_ACTION_VECTOR"},
            {SAI_TAM_INT_ATTR_COLLECTOR_LIST, "SAI_TAM_INT_ATTR_COLLECTOR_LIST"},
            {SAI_TAM_INT_ATTR_CUSTOM_RANGE_END, "SAI_TAM_INT_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_INT_ATTR_CUSTOM_RANGE_START, "SAI_TAM_INT_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_INT_ATTR_DEVICE_ID, "SAI_TAM_INT_ATTR_DEVICE_ID"},
            {SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD, "SAI_TAM_INT_ATTR_FLOW_LIVENESS_PERIOD"},
            {SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE, "SAI_TAM_INT_ATTR_INGRESS_SAMPLEPACKET_ENABLE"},
            {SAI_TAM_INT_ATTR_INLINE, "SAI_TAM_INT_ATTR_INLINE"},
            {SAI_TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE, "SAI_TAM_INT_ATTR_INT_PRESENCE_DSCP_VALUE"},
            {SAI_TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL, "SAI_TAM_INT_ATTR_INT_PRESENCE_L3_PROTOCOL"},
            {SAI_TAM_INT_ATTR_INT_PRESENCE_PB1, "SAI_TAM_INT_ATTR_INT_PRESENCE_PB1"},
            {SAI_TAM_INT_ATTR_INT_PRESENCE_PB2, "SAI_TAM_INT_ATTR_INT_PRESENCE_PB2"},
            {SAI_TAM_INT_ATTR_INT_PRESENCE_TYPE, "SAI_TAM_INT_ATTR_INT_PRESENCE_TYPE"},
            {SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE, "SAI_TAM_INT_ATTR_IOAM_TRACE_TYPE"},
            {SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY, "SAI_TAM_INT_ATTR_LATENCY_SENSITIVITY"},
            {SAI_TAM_INT_ATTR_MATH_FUNC, "SAI_TAM_INT_ATTR_MATH_FUNC"},
            {SAI_TAM_INT_ATTR_MAX_HOP_COUNT, "SAI_TAM_INT_ATTR_MAX_HOP_COUNT"},
            {SAI_TAM_INT_ATTR_MAX_LENGTH, "SAI_TAM_INT_ATTR_MAX_LENGTH"},
            {SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE, "SAI_TAM_INT_ATTR_METADATA_CHECKSUM_ENABLE"},
            {SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE, "SAI_TAM_INT_ATTR_METADATA_FRAGMENT_ENABLE"},
            {SAI_TAM_INT_ATTR_NAME_SPACE_ID, "SAI_TAM_INT_ATTR_NAME_SPACE_ID"},
            {SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL, "SAI_TAM_INT_ATTR_NAME_SPACE_ID_GLOBAL"},
            {SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP, "SAI_TAM_INT_ATTR_P4_INT_INSTRUCTION_BITMAP"},
            {SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS, "SAI_TAM_INT_ATTR_REPORT_ALL_PACKETS"},
            {SAI_TAM_INT_ATTR_REPORT_ID, "SAI_TAM_INT_ATTR_REPORT_ID"},
            {SAI_TAM_INT_ATTR_TRACE_VECTOR, "SAI_TAM_INT_ATTR_TRACE_VECTOR"},
            {SAI_TAM_INT_ATTR_TYPE, "SAI_TAM_INT_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_int_presence_type_t& x)
{
    static std::map<sai_tam_int_presence_type_t, const char*> strs = {
            {SAI_TAM_INT_PRESENCE_TYPE_DSCP, "SAI_TAM_INT_PRESENCE_TYPE_DSCP"},
            {SAI_TAM_INT_PRESENCE_TYPE_L3_PROTOCOL, "SAI_TAM_INT_PRESENCE_TYPE_L3_PROTOCOL"},
            {SAI_TAM_INT_PRESENCE_TYPE_PB, "SAI_TAM_INT_PRESENCE_TYPE_PB"},
            {SAI_TAM_INT_PRESENCE_TYPE_UNDEFINED, "SAI_TAM_INT_PRESENCE_TYPE_UNDEFINED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_int_type_t& x)
{
    static std::map<sai_tam_int_type_t, const char*> strs = {
            {SAI_TAM_INT_TYPE_DIRECT_EXPORT, "SAI_TAM_INT_TYPE_DIRECT_EXPORT"},
            {SAI_TAM_INT_TYPE_IFA1, "SAI_TAM_INT_TYPE_IFA1"},
            {SAI_TAM_INT_TYPE_IFA1_TAILSTAMP, "SAI_TAM_INT_TYPE_IFA1_TAILSTAMP"},
            {SAI_TAM_INT_TYPE_IFA2, "SAI_TAM_INT_TYPE_IFA2"},
            {SAI_TAM_INT_TYPE_IOAM, "SAI_TAM_INT_TYPE_IOAM"},
            {SAI_TAM_INT_TYPE_P4_INT_1, "SAI_TAM_INT_TYPE_P4_INT_1"},
            {SAI_TAM_INT_TYPE_P4_INT_2, "SAI_TAM_INT_TYPE_P4_INT_2"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_math_func_attr_t& x)
{
    static std::map<sai_tam_math_func_attr_t, const char*> strs = {
            {SAI_TAM_MATH_FUNC_ATTR_CUSTOM_RANGE_END, "SAI_TAM_MATH_FUNC_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_MATH_FUNC_ATTR_CUSTOM_RANGE_START, "SAI_TAM_MATH_FUNC_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE, "SAI_TAM_MATH_FUNC_ATTR_TAM_TEL_MATH_FUNC_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_report_attr_t& x)
{
    static std::map<sai_tam_report_attr_t, const char*> strs = {
            {SAI_TAM_REPORT_ATTR_CUSTOM_RANGE_END, "SAI_TAM_REPORT_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_REPORT_ATTR_CUSTOM_RANGE_START, "SAI_TAM_REPORT_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER, "SAI_TAM_REPORT_ATTR_ENTERPRISE_NUMBER"},
            {SAI_TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY, "SAI_TAM_REPORT_ATTR_HISTOGRAM_BIN_BOUNDARY"},
            {SAI_TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS, "SAI_TAM_REPORT_ATTR_HISTOGRAM_NUMBER_OF_BINS"},
            {SAI_TAM_REPORT_ATTR_QUOTA, "SAI_TAM_REPORT_ATTR_QUOTA"},
            {SAI_TAM_REPORT_ATTR_REPORT_INTERVAL, "SAI_TAM_REPORT_ATTR_REPORT_INTERVAL"},
            {SAI_TAM_REPORT_ATTR_REPORT_MODE, "SAI_TAM_REPORT_ATTR_REPORT_MODE"},
            {SAI_TAM_REPORT_ATTR_TYPE, "SAI_TAM_REPORT_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_report_mode_t& x)
{
    static std::map<sai_tam_report_mode_t, const char*> strs = {
            {SAI_TAM_REPORT_MODE_ALL, "SAI_TAM_REPORT_MODE_ALL"},
            {SAI_TAM_REPORT_MODE_BULK, "SAI_TAM_REPORT_MODE_BULK"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_report_type_t& x)
{
    static std::map<sai_tam_report_type_t, const char*> strs = {
            {SAI_TAM_REPORT_TYPE_HISTOGRAM, "SAI_TAM_REPORT_TYPE_HISTOGRAM"},
            {SAI_TAM_REPORT_TYPE_IPFIX, "SAI_TAM_REPORT_TYPE_IPFIX"},
            {SAI_TAM_REPORT_TYPE_JSON, "SAI_TAM_REPORT_TYPE_JSON"},
            {SAI_TAM_REPORT_TYPE_P4_EXTN, "SAI_TAM_REPORT_TYPE_P4_EXTN"},
            {SAI_TAM_REPORT_TYPE_PROTO, "SAI_TAM_REPORT_TYPE_PROTO"},
            {SAI_TAM_REPORT_TYPE_SFLOW, "SAI_TAM_REPORT_TYPE_SFLOW"},
            {SAI_TAM_REPORT_TYPE_THRIFT, "SAI_TAM_REPORT_TYPE_THRIFT"},
            {SAI_TAM_REPORT_TYPE_VENDOR_EXTN, "SAI_TAM_REPORT_TYPE_VENDOR_EXTN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_reporting_unit_t& x)
{
    static std::map<sai_tam_reporting_unit_t, const char*> strs = {
            {SAI_TAM_REPORTING_UNIT_DAY, "SAI_TAM_REPORTING_UNIT_DAY"},
            {SAI_TAM_REPORTING_UNIT_HOUR, "SAI_TAM_REPORTING_UNIT_HOUR"},
            {SAI_TAM_REPORTING_UNIT_MINUTE, "SAI_TAM_REPORTING_UNIT_MINUTE"},
            {SAI_TAM_REPORTING_UNIT_SEC, "SAI_TAM_REPORTING_UNIT_SEC"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_tel_math_func_type_t& x)
{
    static std::map<sai_tam_tel_math_func_type_t, const char*> strs = {
            {SAI_TAM_TEL_MATH_FUNC_TYPE_ALGEBRAIC_MEAN, "SAI_TAM_TEL_MATH_FUNC_TYPE_ALGEBRAIC_MEAN"},
            {SAI_TAM_TEL_MATH_FUNC_TYPE_AVERAGE, "SAI_TAM_TEL_MATH_FUNC_TYPE_AVERAGE"},
            {SAI_TAM_TEL_MATH_FUNC_TYPE_GEO_MEAN, "SAI_TAM_TEL_MATH_FUNC_TYPE_GEO_MEAN"},
            {SAI_TAM_TEL_MATH_FUNC_TYPE_MODE, "SAI_TAM_TEL_MATH_FUNC_TYPE_MODE"},
            {SAI_TAM_TEL_MATH_FUNC_TYPE_NONE, "SAI_TAM_TEL_MATH_FUNC_TYPE_NONE"},
            {SAI_TAM_TEL_MATH_FUNC_TYPE_RATE, "SAI_TAM_TEL_MATH_FUNC_TYPE_RATE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_tel_type_attr_t& x)
{
    static std::map<sai_tam_tel_type_attr_t, const char*> strs = {
            {SAI_TAM_TEL_TYPE_ATTR_CUSTOM_RANGE_END, "SAI_TAM_TEL_TYPE_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_TEL_TYPE_ATTR_CUSTOM_RANGE_START, "SAI_TAM_TEL_TYPE_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE, "SAI_TAM_TEL_TYPE_ATTR_DSCP_VALUE"},
            {SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q, "SAI_TAM_TEL_TYPE_ATTR_FABRIC_Q"},
            {SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER, "SAI_TAM_TEL_TYPE_ATTR_INT_SWITCH_IDENTIFIER"},
            {SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC, "SAI_TAM_TEL_TYPE_ATTR_MATH_FUNC"},
            {SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE, "SAI_TAM_TEL_TYPE_ATTR_NE_ENABLE"},
            {SAI_TAM_TEL_TYPE_ATTR_REPORT_ID, "SAI_TAM_TEL_TYPE_ATTR_REPORT_ID"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FABRIC_STATS"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_FILTER_STATS"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_MMU_STATS"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_OUTPUT_QUEUE_STATS"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_EGRESS"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_PORT_STATS_INGRESS"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_RESOURCE_UTILIZATION_STATS"},
            {SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS, "SAI_TAM_TEL_TYPE_ATTR_SWITCH_ENABLE_VIRTUAL_QUEUE_STATS"},
            {SAI_TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE, "SAI_TAM_TEL_TYPE_ATTR_TAM_TELEMETRY_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_telemetry_attr_t& x)
{
    static std::map<sai_tam_telemetry_attr_t, const char*> strs = {
            {SAI_TAM_TELEMETRY_ATTR_COLLECTOR_LIST, "SAI_TAM_TELEMETRY_ATTR_COLLECTOR_LIST"},
            {SAI_TAM_TELEMETRY_ATTR_CUSTOM_RANGE_END, "SAI_TAM_TELEMETRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_TELEMETRY_ATTR_CUSTOM_RANGE_START, "SAI_TAM_TELEMETRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL, "SAI_TAM_TELEMETRY_ATTR_REPORTING_INTERVAL"},
            {SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT, "SAI_TAM_TELEMETRY_ATTR_TAM_REPORTING_UNIT"},
            {SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST, "SAI_TAM_TELEMETRY_ATTR_TAM_TYPE_LIST"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_telemetry_type_t& x)
{
    static std::map<sai_tam_telemetry_type_t, const char*> strs = {
            {SAI_TAM_TELEMETRY_TYPE_FABRIC, "SAI_TAM_TELEMETRY_TYPE_FABRIC"},
            {SAI_TAM_TELEMETRY_TYPE_FLOW, "SAI_TAM_TELEMETRY_TYPE_FLOW"},
            {SAI_TAM_TELEMETRY_TYPE_INT, "SAI_TAM_TELEMETRY_TYPE_INT"},
            {SAI_TAM_TELEMETRY_TYPE_NE, "SAI_TAM_TELEMETRY_TYPE_NE"},
            {SAI_TAM_TELEMETRY_TYPE_SWITCH, "SAI_TAM_TELEMETRY_TYPE_SWITCH"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_transport_attr_t& x)
{
    static std::map<sai_tam_transport_attr_t, const char*> strs = {
            {SAI_TAM_TRANSPORT_ATTR_CUSTOM_RANGE_END, "SAI_TAM_TRANSPORT_ATTR_CUSTOM_RANGE_END"},
            {SAI_TAM_TRANSPORT_ATTR_CUSTOM_RANGE_START, "SAI_TAM_TRANSPORT_ATTR_CUSTOM_RANGE_START"},
            {SAI_TAM_TRANSPORT_ATTR_DST_PORT, "SAI_TAM_TRANSPORT_ATTR_DST_PORT"},
            {SAI_TAM_TRANSPORT_ATTR_MTU, "SAI_TAM_TRANSPORT_ATTR_MTU"},
            {SAI_TAM_TRANSPORT_ATTR_SRC_PORT, "SAI_TAM_TRANSPORT_ATTR_SRC_PORT"},
            {SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE, "SAI_TAM_TRANSPORT_ATTR_TRANSPORT_AUTH_TYPE"},
            {SAI_TAM_TRANSPORT_ATTR_TRANSPORT_TYPE, "SAI_TAM_TRANSPORT_ATTR_TRANSPORT_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_transport_auth_type_t& x)
{
    static std::map<sai_tam_transport_auth_type_t, const char*> strs = {
            {SAI_TAM_TRANSPORT_AUTH_TYPE_NONE, "SAI_TAM_TRANSPORT_AUTH_TYPE_NONE"},
            {SAI_TAM_TRANSPORT_AUTH_TYPE_SSL, "SAI_TAM_TRANSPORT_AUTH_TYPE_SSL"},
            {SAI_TAM_TRANSPORT_AUTH_TYPE_TLS, "SAI_TAM_TRANSPORT_AUTH_TYPE_TLS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tam_transport_type_t& x)
{
    static std::map<sai_tam_transport_type_t, const char*> strs = {
            {SAI_TAM_TRANSPORT_TYPE_GRPC, "SAI_TAM_TRANSPORT_TYPE_GRPC"},
            {SAI_TAM_TRANSPORT_TYPE_MIRROR, "SAI_TAM_TRANSPORT_TYPE_MIRROR"},
            {SAI_TAM_TRANSPORT_TYPE_NONE, "SAI_TAM_TRANSPORT_TYPE_NONE"},
            {SAI_TAM_TRANSPORT_TYPE_TCP, "SAI_TAM_TRANSPORT_TYPE_TCP"},
            {SAI_TAM_TRANSPORT_TYPE_UDP, "SAI_TAM_TRANSPORT_TYPE_UDP"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tlv_type_t& x)
{
    static std::map<sai_tlv_type_t, const char*> strs = {
            {SAI_TLV_TYPE_EGRESS, "SAI_TLV_TYPE_EGRESS"},
            {SAI_TLV_TYPE_HMAC, "SAI_TLV_TYPE_HMAC"},
            {SAI_TLV_TYPE_INGRESS, "SAI_TLV_TYPE_INGRESS"},
            {SAI_TLV_TYPE_OPAQUE, "SAI_TLV_TYPE_OPAQUE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_attr_t& x)
{
    static std::map<sai_tunnel_attr_t, const char*> strs = {
            {SAI_TUNNEL_ATTR_CUSTOM_RANGE_END, "SAI_TUNNEL_ATTR_CUSTOM_RANGE_END"},
            {SAI_TUNNEL_ATTR_CUSTOM_RANGE_START, "SAI_TUNNEL_ATTR_CUSTOM_RANGE_START"},
            {SAI_TUNNEL_ATTR_DECAP_DSCP_MODE, "SAI_TUNNEL_ATTR_DECAP_DSCP_MODE"},
            {SAI_TUNNEL_ATTR_DECAP_ECN_MODE, "SAI_TUNNEL_ATTR_DECAP_ECN_MODE"},
            {SAI_TUNNEL_ATTR_DECAP_MAPPERS, "SAI_TUNNEL_ATTR_DECAP_MAPPERS"},
            {SAI_TUNNEL_ATTR_DECAP_TTL_MODE, "SAI_TUNNEL_ATTR_DECAP_TTL_MODE"},
            {SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE, "SAI_TUNNEL_ATTR_ENCAP_DSCP_MODE"},
            {SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL, "SAI_TUNNEL_ATTR_ENCAP_DSCP_VAL"},
            {SAI_TUNNEL_ATTR_ENCAP_DST_IP, "SAI_TUNNEL_ATTR_ENCAP_DST_IP"},
            {SAI_TUNNEL_ATTR_ENCAP_ECN_MODE, "SAI_TUNNEL_ATTR_ENCAP_ECN_MODE"},
            {SAI_TUNNEL_ATTR_ENCAP_GRE_KEY, "SAI_TUNNEL_ATTR_ENCAP_GRE_KEY"},
            {SAI_TUNNEL_ATTR_ENCAP_GRE_KEY_VALID, "SAI_TUNNEL_ATTR_ENCAP_GRE_KEY_VALID"},
            {SAI_TUNNEL_ATTR_ENCAP_MAPPERS, "SAI_TUNNEL_ATTR_ENCAP_MAPPERS"},
            {SAI_TUNNEL_ATTR_ENCAP_SRC_IP, "SAI_TUNNEL_ATTR_ENCAP_SRC_IP"},
            {SAI_TUNNEL_ATTR_ENCAP_TTL_MODE, "SAI_TUNNEL_ATTR_ENCAP_TTL_MODE"},
            {SAI_TUNNEL_ATTR_ENCAP_TTL_VAL, "SAI_TUNNEL_ATTR_ENCAP_TTL_VAL"},
            {SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION, "SAI_TUNNEL_ATTR_LOOPBACK_PACKET_ACTION"},
            {SAI_TUNNEL_ATTR_OVERLAY_INTERFACE, "SAI_TUNNEL_ATTR_OVERLAY_INTERFACE"},
            {SAI_TUNNEL_ATTR_PEER_MODE, "SAI_TUNNEL_ATTR_PEER_MODE"},
            {SAI_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST, "SAI_TUNNEL_ATTR_TERM_TABLE_ENTRY_LIST"},
            {SAI_TUNNEL_ATTR_TYPE, "SAI_TUNNEL_ATTR_TYPE"},
            {SAI_TUNNEL_ATTR_UNDERLAY_INTERFACE, "SAI_TUNNEL_ATTR_UNDERLAY_INTERFACE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_decap_ecn_mode_t& x)
{
    static std::map<sai_tunnel_decap_ecn_mode_t, const char*> strs = {
            {SAI_TUNNEL_DECAP_ECN_MODE_COPY_FROM_OUTER, "SAI_TUNNEL_DECAP_ECN_MODE_COPY_FROM_OUTER"},
            {SAI_TUNNEL_DECAP_ECN_MODE_STANDARD, "SAI_TUNNEL_DECAP_ECN_MODE_STANDARD"},
            {SAI_TUNNEL_DECAP_ECN_MODE_USER_DEFINED, "SAI_TUNNEL_DECAP_ECN_MODE_USER_DEFINED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_dscp_mode_t& x)
{
    static std::map<sai_tunnel_dscp_mode_t, const char*> strs = {
            {SAI_TUNNEL_DSCP_MODE_PIPE_MODEL, "SAI_TUNNEL_DSCP_MODE_PIPE_MODEL"},
            {SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL, "SAI_TUNNEL_DSCP_MODE_UNIFORM_MODEL"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_encap_ecn_mode_t& x)
{
    static std::map<sai_tunnel_encap_ecn_mode_t, const char*> strs = {
            {SAI_TUNNEL_ENCAP_ECN_MODE_STANDARD, "SAI_TUNNEL_ENCAP_ECN_MODE_STANDARD"},
            {SAI_TUNNEL_ENCAP_ECN_MODE_USER_DEFINED, "SAI_TUNNEL_ENCAP_ECN_MODE_USER_DEFINED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_map_attr_t& x)
{
    static std::map<sai_tunnel_map_attr_t, const char*> strs = {
            {SAI_TUNNEL_MAP_ATTR_CUSTOM_RANGE_END, "SAI_TUNNEL_MAP_ATTR_CUSTOM_RANGE_END"},
            {SAI_TUNNEL_MAP_ATTR_CUSTOM_RANGE_START, "SAI_TUNNEL_MAP_ATTR_CUSTOM_RANGE_START"},
            {SAI_TUNNEL_MAP_ATTR_ENTRY_LIST, "SAI_TUNNEL_MAP_ATTR_ENTRY_LIST"},
            {SAI_TUNNEL_MAP_ATTR_TYPE, "SAI_TUNNEL_MAP_ATTR_TYPE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_map_entry_attr_t& x)
{
    static std::map<sai_tunnel_map_entry_attr_t, const char*> strs = {
            {SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY, "SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_KEY"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE, "SAI_TUNNEL_MAP_ENTRY_ATTR_BRIDGE_ID_VALUE"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_TUNNEL_MAP_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_TUNNEL_MAP_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY, "SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_KEY"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE, "SAI_TUNNEL_MAP_ENTRY_ATTR_OECN_VALUE"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP, "SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE, "SAI_TUNNEL_MAP_ENTRY_ATTR_TUNNEL_MAP_TYPE"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY, "SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_KEY"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE, "SAI_TUNNEL_MAP_ENTRY_ATTR_UECN_VALUE"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY, "SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_KEY"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE, "SAI_TUNNEL_MAP_ENTRY_ATTR_VIRTUAL_ROUTER_ID_VALUE"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY, "SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_KEY"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE, "SAI_TUNNEL_MAP_ENTRY_ATTR_VLAN_ID_VALUE"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY, "SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_KEY"},
            {SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE, "SAI_TUNNEL_MAP_ENTRY_ATTR_VNI_ID_VALUE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_map_type_t& x)
{
    static std::map<sai_tunnel_map_type_t, const char*> strs = {
            {SAI_TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VNI, "SAI_TUNNEL_MAP_TYPE_BRIDGE_IF_TO_VNI"},
            {SAI_TUNNEL_MAP_TYPE_CUSTOM_RANGE_BASE, "SAI_TUNNEL_MAP_TYPE_CUSTOM_RANGE_BASE"},
            {SAI_TUNNEL_MAP_TYPE_OECN_TO_UECN, "SAI_TUNNEL_MAP_TYPE_OECN_TO_UECN"},
            {SAI_TUNNEL_MAP_TYPE_UECN_OECN_TO_OECN, "SAI_TUNNEL_MAP_TYPE_UECN_OECN_TO_OECN"},
            {SAI_TUNNEL_MAP_TYPE_VIRTUAL_ROUTER_ID_TO_VNI, "SAI_TUNNEL_MAP_TYPE_VIRTUAL_ROUTER_ID_TO_VNI"},
            {SAI_TUNNEL_MAP_TYPE_VLAN_ID_TO_VNI, "SAI_TUNNEL_MAP_TYPE_VLAN_ID_TO_VNI"},
            {SAI_TUNNEL_MAP_TYPE_VNI_TO_BRIDGE_IF, "SAI_TUNNEL_MAP_TYPE_VNI_TO_BRIDGE_IF"},
            {SAI_TUNNEL_MAP_TYPE_VNI_TO_VIRTUAL_ROUTER_ID, "SAI_TUNNEL_MAP_TYPE_VNI_TO_VIRTUAL_ROUTER_ID"},
            {SAI_TUNNEL_MAP_TYPE_VNI_TO_VLAN_ID, "SAI_TUNNEL_MAP_TYPE_VNI_TO_VLAN_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_peer_mode_t& x)
{
    static std::map<sai_tunnel_peer_mode_t, const char*> strs = {
            {SAI_TUNNEL_PEER_MODE_P2MP, "SAI_TUNNEL_PEER_MODE_P2MP"},
            {SAI_TUNNEL_PEER_MODE_P2P, "SAI_TUNNEL_PEER_MODE_P2P"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_stat_t& x)
{
    static std::map<sai_tunnel_stat_t, const char*> strs = {
            {SAI_TUNNEL_STAT_IN_OCTETS, "SAI_TUNNEL_STAT_IN_OCTETS"},
            {SAI_TUNNEL_STAT_IN_PACKETS, "SAI_TUNNEL_STAT_IN_PACKETS"},
            {SAI_TUNNEL_STAT_OUT_OCTETS, "SAI_TUNNEL_STAT_OUT_OCTETS"},
            {SAI_TUNNEL_STAT_OUT_PACKETS, "SAI_TUNNEL_STAT_OUT_PACKETS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_term_table_entry_attr_t& x)
{
    static std::map<sai_tunnel_term_table_entry_attr_t, const char*> strs = {
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_ACTION_TUNNEL_ID"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_CUSTOM_RANGE_END, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_CUSTOM_RANGE_END"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_CUSTOM_RANGE_START, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_CUSTOM_RANGE_START"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_DST_IP_MASK"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_IP_ADDR_FAMILY"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_SRC_IP_MASK"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TUNNEL_TYPE"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_TYPE"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID, "SAI_TUNNEL_TERM_TABLE_ENTRY_ATTR_VR_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_term_table_entry_type_t& x)
{
    static std::map<sai_tunnel_term_table_entry_type_t, const char*> strs = {
            {SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2MP, "SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2MP"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2P, "SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_MP2P"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_P2MP, "SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_P2MP"},
            {SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_P2P, "SAI_TUNNEL_TERM_TABLE_ENTRY_TYPE_P2P"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_ttl_mode_t& x)
{
    static std::map<sai_tunnel_ttl_mode_t, const char*> strs = {
            {SAI_TUNNEL_TTL_MODE_PIPE_MODEL, "SAI_TUNNEL_TTL_MODE_PIPE_MODEL"},
            {SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL, "SAI_TUNNEL_TTL_MODE_UNIFORM_MODEL"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_tunnel_type_t& x)
{
    static std::map<sai_tunnel_type_t, const char*> strs = {
            {SAI_TUNNEL_TYPE_IPINIP, "SAI_TUNNEL_TYPE_IPINIP"},
            {SAI_TUNNEL_TYPE_IPINIP_GRE, "SAI_TUNNEL_TYPE_IPINIP_GRE"},
            {SAI_TUNNEL_TYPE_MPLS, "SAI_TUNNEL_TYPE_MPLS"},
            {SAI_TUNNEL_TYPE_VXLAN, "SAI_TUNNEL_TYPE_VXLAN"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_udf_attr_t& x)
{
    static std::map<sai_udf_attr_t, const char*> strs = {
            {SAI_UDF_ATTR_BASE, "SAI_UDF_ATTR_BASE"},
            {SAI_UDF_ATTR_CUSTOM_RANGE_END, "SAI_UDF_ATTR_CUSTOM_RANGE_END"},
            {SAI_UDF_ATTR_CUSTOM_RANGE_START, "SAI_UDF_ATTR_CUSTOM_RANGE_START"},
            {SAI_UDF_ATTR_GROUP_ID, "SAI_UDF_ATTR_GROUP_ID"},
            {SAI_UDF_ATTR_HASH_MASK, "SAI_UDF_ATTR_HASH_MASK"},
            {SAI_UDF_ATTR_MATCH_ID, "SAI_UDF_ATTR_MATCH_ID"},
            {SAI_UDF_ATTR_OFFSET, "SAI_UDF_ATTR_OFFSET"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_udf_base_t& x)
{
    static std::map<sai_udf_base_t, const char*> strs = {
            {SAI_UDF_BASE_L2, "SAI_UDF_BASE_L2"},
            {SAI_UDF_BASE_L3, "SAI_UDF_BASE_L3"},
            {SAI_UDF_BASE_L4, "SAI_UDF_BASE_L4"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_udf_group_attr_t& x)
{
    static std::map<sai_udf_group_attr_t, const char*> strs = {
            {SAI_UDF_GROUP_ATTR_CUSTOM_RANGE_END, "SAI_UDF_GROUP_ATTR_CUSTOM_RANGE_END"},
            {SAI_UDF_GROUP_ATTR_CUSTOM_RANGE_START, "SAI_UDF_GROUP_ATTR_CUSTOM_RANGE_START"},
            {SAI_UDF_GROUP_ATTR_LENGTH, "SAI_UDF_GROUP_ATTR_LENGTH"},
            {SAI_UDF_GROUP_ATTR_TYPE, "SAI_UDF_GROUP_ATTR_TYPE"},
            {SAI_UDF_GROUP_ATTR_UDF_LIST, "SAI_UDF_GROUP_ATTR_UDF_LIST"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_udf_group_type_t& x)
{
    static std::map<sai_udf_group_type_t, const char*> strs = {
            {SAI_UDF_GROUP_TYPE_END, "SAI_UDF_GROUP_TYPE_END"},
            {SAI_UDF_GROUP_TYPE_GENERIC, "SAI_UDF_GROUP_TYPE_GENERIC"},
            {SAI_UDF_GROUP_TYPE_HASH, "SAI_UDF_GROUP_TYPE_HASH"},
            {SAI_UDF_GROUP_TYPE_START, "SAI_UDF_GROUP_TYPE_START"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_udf_match_attr_t& x)
{
    static std::map<sai_udf_match_attr_t, const char*> strs = {
            {SAI_UDF_MATCH_ATTR_CUSTOM_RANGE_END, "SAI_UDF_MATCH_ATTR_CUSTOM_RANGE_END"},
            {SAI_UDF_MATCH_ATTR_CUSTOM_RANGE_START, "SAI_UDF_MATCH_ATTR_CUSTOM_RANGE_START"},
            {SAI_UDF_MATCH_ATTR_GRE_TYPE, "SAI_UDF_MATCH_ATTR_GRE_TYPE"},
            {SAI_UDF_MATCH_ATTR_L2_TYPE, "SAI_UDF_MATCH_ATTR_L2_TYPE"},
            {SAI_UDF_MATCH_ATTR_L3_TYPE, "SAI_UDF_MATCH_ATTR_L3_TYPE"},
            {SAI_UDF_MATCH_ATTR_PRIORITY, "SAI_UDF_MATCH_ATTR_PRIORITY"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_virtual_router_attr_t& x)
{
    static std::map<sai_virtual_router_attr_t, const char*> strs = {
            {SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE, "SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V4_STATE"},
            {SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE, "SAI_VIRTUAL_ROUTER_ATTR_ADMIN_V6_STATE"},
            {SAI_VIRTUAL_ROUTER_ATTR_CUSTOM_RANGE_END, "SAI_VIRTUAL_ROUTER_ATTR_CUSTOM_RANGE_END"},
            {SAI_VIRTUAL_ROUTER_ATTR_CUSTOM_RANGE_START, "SAI_VIRTUAL_ROUTER_ATTR_CUSTOM_RANGE_START"},
            {SAI_VIRTUAL_ROUTER_ATTR_LABEL, "SAI_VIRTUAL_ROUTER_ATTR_LABEL"},
            {SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS, "SAI_VIRTUAL_ROUTER_ATTR_SRC_MAC_ADDRESS"},
            {SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION, "SAI_VIRTUAL_ROUTER_ATTR_UNKNOWN_L3_MULTICAST_PACKET_ACTION"},
            {SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION, "SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_IP_OPTIONS_PACKET_ACTION"},
            {SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION, "SAI_VIRTUAL_ROUTER_ATTR_VIOLATION_TTL1_PACKET_ACTION"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_vlan_attr_t& x)
{
    static std::map<sai_vlan_attr_t, const char*> strs = {
            {SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE, "SAI_VLAN_ATTR_BROADCAST_FLOOD_CONTROL_TYPE"},
            {SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP, "SAI_VLAN_ATTR_BROADCAST_FLOOD_GROUP"},
            {SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE, "SAI_VLAN_ATTR_CUSTOM_IGMP_SNOOPING_ENABLE"},
            {SAI_VLAN_ATTR_CUSTOM_RANGE_END, "SAI_VLAN_ATTR_CUSTOM_RANGE_END"},
            {SAI_VLAN_ATTR_CUSTOM_RANGE_START, "SAI_VLAN_ATTR_CUSTOM_RANGE_START"},
            {SAI_VLAN_ATTR_EGRESS_ACL, "SAI_VLAN_ATTR_EGRESS_ACL"},
            {SAI_VLAN_ATTR_INGRESS_ACL, "SAI_VLAN_ATTR_INGRESS_ACL"},
            {SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE, "SAI_VLAN_ATTR_IPV4_MCAST_LOOKUP_KEY_TYPE"},
            {SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE, "SAI_VLAN_ATTR_IPV6_MCAST_LOOKUP_KEY_TYPE"},
            {SAI_VLAN_ATTR_LEARN_DISABLE, "SAI_VLAN_ATTR_LEARN_DISABLE"},
            {SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES, "SAI_VLAN_ATTR_MAX_LEARNED_ADDRESSES"},
            {SAI_VLAN_ATTR_MEMBER_LIST, "SAI_VLAN_ATTR_MEMBER_LIST"},
            {SAI_VLAN_ATTR_META_DATA, "SAI_VLAN_ATTR_META_DATA"},
            {SAI_VLAN_ATTR_STP_INSTANCE, "SAI_VLAN_ATTR_STP_INSTANCE"},
            {SAI_VLAN_ATTR_TAM_OBJECT, "SAI_VLAN_ATTR_TAM_OBJECT"},
            {SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID, "SAI_VLAN_ATTR_UNKNOWN_IPV4_MCAST_OUTPUT_GROUP_ID"},
            {SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID, "SAI_VLAN_ATTR_UNKNOWN_IPV6_MCAST_OUTPUT_GROUP_ID"},
            {SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID, "SAI_VLAN_ATTR_UNKNOWN_LINKLOCAL_MCAST_OUTPUT_GROUP_ID"},
            {SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE, "SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_CONTROL_TYPE"},
            {SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP, "SAI_VLAN_ATTR_UNKNOWN_MULTICAST_FLOOD_GROUP"},
            {SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID, "SAI_VLAN_ATTR_UNKNOWN_NON_IP_MCAST_OUTPUT_GROUP_ID"},
            {SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE, "SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_CONTROL_TYPE"},
            {SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP, "SAI_VLAN_ATTR_UNKNOWN_UNICAST_FLOOD_GROUP"},
            {SAI_VLAN_ATTR_VLAN_ID, "SAI_VLAN_ATTR_VLAN_ID"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_vlan_flood_control_type_t& x)
{
    static std::map<sai_vlan_flood_control_type_t, const char*> strs = {
            {SAI_VLAN_FLOOD_CONTROL_TYPE_ALL, "SAI_VLAN_FLOOD_CONTROL_TYPE_ALL"},
            {SAI_VLAN_FLOOD_CONTROL_TYPE_COMBINED, "SAI_VLAN_FLOOD_CONTROL_TYPE_COMBINED"},
            {SAI_VLAN_FLOOD_CONTROL_TYPE_L2MC_GROUP, "SAI_VLAN_FLOOD_CONTROL_TYPE_L2MC_GROUP"},
            {SAI_VLAN_FLOOD_CONTROL_TYPE_NONE, "SAI_VLAN_FLOOD_CONTROL_TYPE_NONE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_vlan_mcast_lookup_key_type_t& x)
{
    static std::map<sai_vlan_mcast_lookup_key_type_t, const char*> strs = {
            {SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA, "SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_MAC_DA"},
            {SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_SG, "SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_SG"},
            {SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_XG, "SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_XG"},
            {SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_XG_AND_SG, "SAI_VLAN_MCAST_LOOKUP_KEY_TYPE_XG_AND_SG"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_vlan_member_attr_t& x)
{
    static std::map<sai_vlan_member_attr_t, const char*> strs = {
            {SAI_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID, "SAI_VLAN_MEMBER_ATTR_BRIDGE_PORT_ID"},
            {SAI_VLAN_MEMBER_ATTR_CUSTOM_RANGE_END, "SAI_VLAN_MEMBER_ATTR_CUSTOM_RANGE_END"},
            {SAI_VLAN_MEMBER_ATTR_CUSTOM_RANGE_START, "SAI_VLAN_MEMBER_ATTR_CUSTOM_RANGE_START"},
            {SAI_VLAN_MEMBER_ATTR_VLAN_ID, "SAI_VLAN_MEMBER_ATTR_VLAN_ID"},
            {SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE, "SAI_VLAN_MEMBER_ATTR_VLAN_TAGGING_MODE"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_vlan_stat_t& x)
{
    static std::map<sai_vlan_stat_t, const char*> strs = {
            {SAI_VLAN_STAT_IN_DISCARDS, "SAI_VLAN_STAT_IN_DISCARDS"},
            {SAI_VLAN_STAT_IN_ERRORS, "SAI_VLAN_STAT_IN_ERRORS"},
            {SAI_VLAN_STAT_IN_NON_UCAST_PKTS, "SAI_VLAN_STAT_IN_NON_UCAST_PKTS"},
            {SAI_VLAN_STAT_IN_OCTETS, "SAI_VLAN_STAT_IN_OCTETS"},
            {SAI_VLAN_STAT_IN_PACKETS, "SAI_VLAN_STAT_IN_PACKETS"},
            {SAI_VLAN_STAT_IN_UCAST_PKTS, "SAI_VLAN_STAT_IN_UCAST_PKTS"},
            {SAI_VLAN_STAT_IN_UNKNOWN_PROTOS, "SAI_VLAN_STAT_IN_UNKNOWN_PROTOS"},
            {SAI_VLAN_STAT_OUT_DISCARDS, "SAI_VLAN_STAT_OUT_DISCARDS"},
            {SAI_VLAN_STAT_OUT_ERRORS, "SAI_VLAN_STAT_OUT_ERRORS"},
            {SAI_VLAN_STAT_OUT_NON_UCAST_PKTS, "SAI_VLAN_STAT_OUT_NON_UCAST_PKTS"},
            {SAI_VLAN_STAT_OUT_OCTETS, "SAI_VLAN_STAT_OUT_OCTETS"},
            {SAI_VLAN_STAT_OUT_PACKETS, "SAI_VLAN_STAT_OUT_PACKETS"},
            {SAI_VLAN_STAT_OUT_QLEN, "SAI_VLAN_STAT_OUT_QLEN"},
            {SAI_VLAN_STAT_OUT_UCAST_PKTS, "SAI_VLAN_STAT_OUT_UCAST_PKTS"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_vlan_tagging_mode_t& x)
{
    static std::map<sai_vlan_tagging_mode_t, const char*> strs = {
            {SAI_VLAN_TAGGING_MODE_PRIORITY_TAGGED, "SAI_VLAN_TAGGING_MODE_PRIORITY_TAGGED"},
            {SAI_VLAN_TAGGING_MODE_TAGGED, "SAI_VLAN_TAGGING_MODE_TAGGED"},
            {SAI_VLAN_TAGGING_MODE_UNTAGGED, "SAI_VLAN_TAGGING_MODE_UNTAGGED"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
std::string
to_string(sai_wred_attr_t& x)
{
    static std::map<sai_wred_attr_t, const char*> strs = {
            {SAI_WRED_ATTR_CUSTOM_RANGE_END, "SAI_WRED_ATTR_CUSTOM_RANGE_END"},
            {SAI_WRED_ATTR_CUSTOM_RANGE_START, "SAI_WRED_ATTR_CUSTOM_RANGE_START"},
            {SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY, "SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MARK_PROBABILITY"},
            {SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD, "SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MAX_THRESHOLD"},
            {SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD, "SAI_WRED_ATTR_ECN_COLOR_UNAWARE_MIN_THRESHOLD"},
            {SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY, "SAI_WRED_ATTR_ECN_GREEN_MARK_PROBABILITY"},
            {SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD, "SAI_WRED_ATTR_ECN_GREEN_MAX_THRESHOLD"},
            {SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD, "SAI_WRED_ATTR_ECN_GREEN_MIN_THRESHOLD"},
            {SAI_WRED_ATTR_ECN_MARK_MODE, "SAI_WRED_ATTR_ECN_MARK_MODE"},
            {SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY, "SAI_WRED_ATTR_ECN_RED_MARK_PROBABILITY"},
            {SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD, "SAI_WRED_ATTR_ECN_RED_MAX_THRESHOLD"},
            {SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD, "SAI_WRED_ATTR_ECN_RED_MIN_THRESHOLD"},
            {SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY, "SAI_WRED_ATTR_ECN_YELLOW_MARK_PROBABILITY"},
            {SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD, "SAI_WRED_ATTR_ECN_YELLOW_MAX_THRESHOLD"},
            {SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD, "SAI_WRED_ATTR_ECN_YELLOW_MIN_THRESHOLD"},
            {SAI_WRED_ATTR_GREEN_DROP_PROBABILITY, "SAI_WRED_ATTR_GREEN_DROP_PROBABILITY"},
            {SAI_WRED_ATTR_GREEN_ENABLE, "SAI_WRED_ATTR_GREEN_ENABLE"},
            {SAI_WRED_ATTR_GREEN_MAX_THRESHOLD, "SAI_WRED_ATTR_GREEN_MAX_THRESHOLD"},
            {SAI_WRED_ATTR_GREEN_MIN_THRESHOLD, "SAI_WRED_ATTR_GREEN_MIN_THRESHOLD"},
            {SAI_WRED_ATTR_RED_DROP_PROBABILITY, "SAI_WRED_ATTR_RED_DROP_PROBABILITY"},
            {SAI_WRED_ATTR_RED_ENABLE, "SAI_WRED_ATTR_RED_ENABLE"},
            {SAI_WRED_ATTR_RED_MAX_THRESHOLD, "SAI_WRED_ATTR_RED_MAX_THRESHOLD"},
            {SAI_WRED_ATTR_RED_MIN_THRESHOLD, "SAI_WRED_ATTR_RED_MIN_THRESHOLD"},
            {SAI_WRED_ATTR_WEIGHT, "SAI_WRED_ATTR_WEIGHT"},
            {SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY, "SAI_WRED_ATTR_YELLOW_DROP_PROBABILITY"},
            {SAI_WRED_ATTR_YELLOW_ENABLE, "SAI_WRED_ATTR_YELLOW_ENABLE"},
            {SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD, "SAI_WRED_ATTR_YELLOW_MAX_THRESHOLD"},
            {SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD, "SAI_WRED_ATTR_YELLOW_MIN_THRESHOLD"},
    };

    auto str = strs.find(x);
    if (str != strs.end()) {
        return str->second;
    }
    return "Unknown";
}
}
}
// clang-format on
