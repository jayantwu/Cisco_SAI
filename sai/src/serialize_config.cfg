library-name sai

# avoid adding enable_shared_from_this as base class in serialization code
skip-base-class std::enable_shared_from_this
######## skipped files ########
# We only care about saytypes.h. Ignoring all others
skip-file (.*/)?sai/sai[^t].*
skip-file (.*/)?sai/sait[^y].*
# Parsing config at cold boot
skip-file sai_config_parser.h
# Not recovering debug shell. Will be created again if needed.
skip-file sai_debug_shell.h
# logger definitions should be setup by user, in case there is a need to debug the boot process
skip-file sai_logger.h
# no structs in below files
skip-file auto_gen_attr_ext.h
skip-file auto_gen_attr.h
skip-file port_helper.h
skip-file sai_strings.h
skip-file sai_switch.h
skip-file sai_test_utils.h
skip-file sai_utils.h

# temporary objects not needed for warmboot
skip-file sai_netlink_msg.h
skip-file sai_netlink_test.h

######## skipped classes ########
# sai types from saitypes.h that we are not using
skip-class _sai_.*_list_t
skip-class _sai_acl.*
skip-class _sai_attribute_t
skip-class _sai_attribute_value_t
skip-class _sai_fabric.*_t
skip-class _sai_timespec_t
skip-class _sai_tlv.*_t
skip-class _sai_port.*_t
# static data belonging to debug_counter_manager
skip-class silicon_one::sai::debug_counter_val_getter
# We don't have any fields using below structs
skip-class silicon_one::sai::lsai_device::dot1q_hdr
skip-class silicon_one::sai::lsai_device::ether_hdr_1q_t
skip-class silicon_one::sai::lsai_device::eth_type_e
skip-class silicon_one::sai::lsai_device::ipv6
skip-class silicon_one::sai::lsai_device::mpls
skip-class silicon_one::sai::lsai_device::mpls_header_e
skip-class silicon_one::sai::json_struct_writer
# manual handling for this one because of sai_qos_map_t* list
skip-class silicon_one::sai::lasai_qos_map_list_t

# laobj_db_base members are saved in obj_db serialization.
# all other derived classes don't save data, they are just for use by get_object_count/list
skip-class silicon_one::sai::laobj_db_(.*)
# we have manual save for 2 below
skip-class silicon_one::sai::const_la_obj_wrap
skip-class silicon_one::sai::la_obj_wrap
# running initialize_logger_throttled post warm boot
skip-class silicon_one::sai::lsai_logger_throttled
# notification callbacks are pointers to user functions. should be set again after warm boot
skip-class silicon_one::sai::switch_notification_callbacks
# skip stats shadow
skip-class leaba::sai::lsai_stats_shadow
skip-class leaba::sai::cgm_watermarks_shadow
skip-class leaba::sai::queue_watermark_shadow
skip-class leaba::sai::queue_watermark_stats
skip-class leaba::sai::port_mibs_shadow

######## skipped fields ########
# 2 below created in the constructor
skip-field silicon_one::sai::debug_counter_manager::m_sai_to_la_counter_translation_in
skip-field silicon_one::sai::debug_counter_manager::m_sai_to_la_counter_translation_out
#3 below are part of a union
skip-field silicon_one::sai::lsai_detail_value_t::m_bridge_port_detail
skip-field silicon_one::sai::lsai_detail_value_t::m_queue_detail
skip-field silicon_one::sai::lsai_detail_value_t::m_lag_member_detail

# used as temporary storage space
skip-field silicon_one::sai::lsai_device::m_bulk_fdb_notifications
# used only in initialize_misc_defaults
skip-field silicon_one::sai::lsai_device::m_bulk_fdb_notification_attrs
# la_device* - recreated after boot
skip-field silicon_one::sai::lsai_device::m_dev
# calling initialize_logger_throttled at warm boot
skip-field silicon_one::sai::lsai_device::m_fdb_notification_debugs
# sockets - reopened after boot
skip-field silicon_one::sai::lsai_device::m_frontport_netdev_sock_fds
# temporary lock
skip-field silicon_one::sai::lsai_device::m_hostif_lock
# kernel socket reopened after boot
skip-field silicon_one::sai::lsai_device::m_inject_fd
# class laobj_db_(.*) is skipped
skip-field silicon_one::sai::lsai_device::m_laobj_db(.*)
# calling initialize_logger_throttled at warm boot
skip-field silicon_one::sai::lsai_device::m_mac_learn_debugs
# temporary lock
skip-field silicon_one::sai::lsai_device::m_mutex
# starting netdev thread again after boot if needed
skip-field silicon_one::sai::lsai_device::m_netdev_listen_thread_started
# netdev socket, opened again after boot
skip-field silicon_one::sai::lsai_device::m_netdev_sock_fd_to_hostif
# genetlink socket, opened again after boot
skip-field silicon_one::sai::sai_netlink_sock_wrapper::m_sock
# Upper layer should reregister notification callbacks after boot
skip-field silicon_one::sai::lsai_device::m_notification_callbacks
# thread - opened after boot
skip-field silicon_one::sai::lsai_device::m_notification_thread
# thread - opened after boot
skip-field silicon_one::sai::lsai_device::m_netdev_thread
# calling initialize_obj_ext_info to init this after boot
skip-field silicon_one::sai::lsai_device::m_per_obj_info
# kernel socket reopened after boot
skip-field silicon_one::sai::lsai_device::m_punt_fd
skip-field silicon_one::sai::lsai_device::m_learn_fd
# thread - opened after boot
skip-field silicon_one::sai::lsai_device::m_punt_thread
skip-field silicon_one::sai::lsai_device::m_learn_thread
# calling initialize_logger_throttled at warm boot
skip-field silicon_one::sai::lsai_device::m_punt_debugs
# Should always init to false on boot
skip-field silicon_one::sai::lsai_device::m_threads_should_exit
# only used during cold boot init
skip-field silicon_one::sai::lsai_port_cfg_t::m_attrs
# static trap_manager data
skip-field silicon_one::sai::trap_manager::m_lpts_info_map
skip-field silicon_one::sai::trap_manager::m_l2cp_info_vec
skip-field silicon_one::sai::trap_manager::m_punt_code_by_trap_type
skip-field silicon_one::sai::trap_manager::m_trap_type_by_event_code
skip-field silicon_one::sai::trap_manager::m_events_by_trap

# todo ??? check if we need to save these?
skip-field silicon_one::sai::lsai_device::m_bulk_fdb_notification_last_sent
skip-field silicon_one::sai::lsai_device::m_last_sent

%{

using namespace silicon_one;
using namespace silicon_one::sai;

%}
